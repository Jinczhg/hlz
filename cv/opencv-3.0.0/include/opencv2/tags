!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
A	cudev/util/detail/type_traits.hpp	/^        typedef typename SelectIf<sizeof(A) >= sizeof(B), A, B>::type type;$/;"	t	struct:cv::cudev::type_traits_detail::LargerDepth
ACCESS_FAST	core/mat.hpp	/^    ACCESS_RW=3<<24, ACCESS_MASK=ACCESS_RW, ACCESS_FAST=1<<26 };$/;"	e	enum:cv::__anon134
ACCESS_MASK	core/mat.hpp	/^    ACCESS_RW=3<<24, ACCESS_MASK=ACCESS_RW, ACCESS_FAST=1<<26 };$/;"	e	enum:cv::__anon134
ACCESS_READ	core/mat.hpp	/^enum { ACCESS_READ=1<<24, ACCESS_WRITE=1<<25,$/;"	e	enum:cv::__anon134
ACCESS_RW	core/mat.hpp	/^    ACCESS_RW=3<<24, ACCESS_MASK=ACCESS_RW, ACCESS_FAST=1<<26 };$/;"	e	enum:cv::__anon134
ACCESS_WRITE	core/mat.hpp	/^enum { ACCESS_READ=1<<24, ACCESS_WRITE=1<<25,$/;"	e	enum:cv::__anon134
ADAPTIVE_THRESH_GAUSSIAN_C	imgproc.hpp	/^    ADAPTIVE_THRESH_GAUSSIAN_C = 1$/;"	e	enum:cv::AdaptiveThresholdTypes
ADAPTIVE_THRESH_MEAN_C	imgproc.hpp	/^    ADAPTIVE_THRESH_MEAN_C     = 0,$/;"	e	enum:cv::AdaptiveThresholdTypes
ADD_FAILURE	ts/ts_gtest.h	19340;"	d
ADD_FAILURE_AT	ts/ts_gtest.h	19344;"	d
AGAST_5_8	features2d.hpp	/^        AGAST_5_8 = 0, AGAST_7_12d = 1, AGAST_7_12s = 2, OAST_9_16 = 3,$/;"	e	enum:cv::AgastFeatureDetector::__anon284
AGAST_7_12d	features2d.hpp	/^        AGAST_5_8 = 0, AGAST_7_12d = 1, AGAST_7_12s = 2, OAST_9_16 = 3,$/;"	e	enum:cv::AgastFeatureDetector::__anon284
AGAST_7_12s	features2d.hpp	/^        AGAST_5_8 = 0, AGAST_7_12d = 1, AGAST_7_12s = 2, OAST_9_16 = 3,$/;"	e	enum:cv::AgastFeatureDetector::__anon284
AKAZE	features2d.hpp	/^class CV_EXPORTS_W AKAZE : public Feature2D$/;"	c	namespace:cv
ALGORITHM	core.hpp	/^    enum { INT=0, BOOLEAN=1, REAL=2, STRING=3, MAT=4, MAT_VECTOR=5, ALGORITHM=6, FLOAT=7,$/;"	e	enum:cv::Param::__anon404
ALL_BORDER_MODES	ts/cuda_perf.hpp	55;"	d
ALL_BORDER_TYPES	ts/cuda_test.hpp	323;"	d
ALL_CHANNELS	ts/cuda_test.hpp	313;"	d
ALL_DEPTH	ts/cuda_test.hpp	220;"	d
ALL_DEVICES	ts/cuda_test.hpp	101;"	d
ALL_INTERPOLATIONS	ts/cuda_perf.hpp	56;"	d
ALL_TYPES	ts/cuda_test.hpp	258;"	d
ALPHA_ATOP	cudaimgproc.hpp	/^enum AlphaCompTypes { ALPHA_OVER, ALPHA_IN, ALPHA_OUT, ALPHA_ATOP, ALPHA_XOR, ALPHA_PLUS, ALPHA_OVER_PREMUL, ALPHA_IN_PREMUL, ALPHA_OUT_PREMUL,$/;"	e	enum:cv::cuda::AlphaCompTypes
ALPHA_ATOP_PREMUL	cudaimgproc.hpp	/^       ALPHA_ATOP_PREMUL, ALPHA_XOR_PREMUL, ALPHA_PLUS_PREMUL, ALPHA_PREMUL};$/;"	e	enum:cv::cuda::AlphaCompTypes
ALPHA_IN	cudaimgproc.hpp	/^enum AlphaCompTypes { ALPHA_OVER, ALPHA_IN, ALPHA_OUT, ALPHA_ATOP, ALPHA_XOR, ALPHA_PLUS, ALPHA_OVER_PREMUL, ALPHA_IN_PREMUL, ALPHA_OUT_PREMUL,$/;"	e	enum:cv::cuda::AlphaCompTypes
ALPHA_IN_PREMUL	cudaimgproc.hpp	/^enum AlphaCompTypes { ALPHA_OVER, ALPHA_IN, ALPHA_OUT, ALPHA_ATOP, ALPHA_XOR, ALPHA_PLUS, ALPHA_OVER_PREMUL, ALPHA_IN_PREMUL, ALPHA_OUT_PREMUL,$/;"	e	enum:cv::cuda::AlphaCompTypes
ALPHA_OUT	cudaimgproc.hpp	/^enum AlphaCompTypes { ALPHA_OVER, ALPHA_IN, ALPHA_OUT, ALPHA_ATOP, ALPHA_XOR, ALPHA_PLUS, ALPHA_OVER_PREMUL, ALPHA_IN_PREMUL, ALPHA_OUT_PREMUL,$/;"	e	enum:cv::cuda::AlphaCompTypes
ALPHA_OUT_PREMUL	cudaimgproc.hpp	/^enum AlphaCompTypes { ALPHA_OVER, ALPHA_IN, ALPHA_OUT, ALPHA_ATOP, ALPHA_XOR, ALPHA_PLUS, ALPHA_OVER_PREMUL, ALPHA_IN_PREMUL, ALPHA_OUT_PREMUL,$/;"	e	enum:cv::cuda::AlphaCompTypes
ALPHA_OVER	cudaimgproc.hpp	/^enum AlphaCompTypes { ALPHA_OVER, ALPHA_IN, ALPHA_OUT, ALPHA_ATOP, ALPHA_XOR, ALPHA_PLUS, ALPHA_OVER_PREMUL, ALPHA_IN_PREMUL, ALPHA_OUT_PREMUL,$/;"	e	enum:cv::cuda::AlphaCompTypes
ALPHA_OVER_PREMUL	cudaimgproc.hpp	/^enum AlphaCompTypes { ALPHA_OVER, ALPHA_IN, ALPHA_OUT, ALPHA_ATOP, ALPHA_XOR, ALPHA_PLUS, ALPHA_OVER_PREMUL, ALPHA_IN_PREMUL, ALPHA_OUT_PREMUL,$/;"	e	enum:cv::cuda::AlphaCompTypes
ALPHA_PLUS	cudaimgproc.hpp	/^enum AlphaCompTypes { ALPHA_OVER, ALPHA_IN, ALPHA_OUT, ALPHA_ATOP, ALPHA_XOR, ALPHA_PLUS, ALPHA_OVER_PREMUL, ALPHA_IN_PREMUL, ALPHA_OUT_PREMUL,$/;"	e	enum:cv::cuda::AlphaCompTypes
ALPHA_PLUS_PREMUL	cudaimgproc.hpp	/^       ALPHA_ATOP_PREMUL, ALPHA_XOR_PREMUL, ALPHA_PLUS_PREMUL, ALPHA_PREMUL};$/;"	e	enum:cv::cuda::AlphaCompTypes
ALPHA_PREMUL	cudaimgproc.hpp	/^       ALPHA_ATOP_PREMUL, ALPHA_XOR_PREMUL, ALPHA_PLUS_PREMUL, ALPHA_PREMUL};$/;"	e	enum:cv::cuda::AlphaCompTypes
ALPHA_XOR	cudaimgproc.hpp	/^enum AlphaCompTypes { ALPHA_OVER, ALPHA_IN, ALPHA_OUT, ALPHA_ATOP, ALPHA_XOR, ALPHA_PLUS, ALPHA_OVER_PREMUL, ALPHA_IN_PREMUL, ALPHA_OUT_PREMUL,$/;"	e	enum:cv::cuda::AlphaCompTypes
ALPHA_XOR_PREMUL	cudaimgproc.hpp	/^       ALPHA_ATOP_PREMUL, ALPHA_XOR_PREMUL, ALPHA_PLUS_PREMUL, ALPHA_PREMUL};$/;"	e	enum:cv::cuda::AlphaCompTypes
ALT	viz/types.hpp	/^            enum { NONE = 0, ALT = 1, CTRL = 2, SHIFT = 4 };$/;"	e	enum:cv::viz::KeyboardEvent::__anon73
ANGLE_ROW	cudafeatures2d.hpp	/^        ANGLE_ROW,$/;"	e	enum:cv::cuda::ORB::__anon292
ANN_MLP	ml.hpp	/^class CV_EXPORTS_W ANN_MLP : public StatModel$/;"	c	namespace:cv::ml
APPEND	core/persistence.hpp	/^        APPEND      = 2, \/\/!< value, open the file for appending$/;"	e	enum:cv::FileStorage::Mode
ARM_ROUND	hal/defs.h	343;"	d
ARM_ROUND_DBL	hal/defs.h	350;"	d
ARM_ROUND_DBL	hal/defs.h	352;"	d
ARM_ROUND_FLT	hal/defs.h	355;"	d
ARRAY_BUFFER	core/opengl.hpp	/^        ARRAY_BUFFER         = 0x8892, \/\/!< The buffer will be used as a source for vertex data$/;"	e	enum:cv::ogl::Buffer::Target
ASSERT_ANY_THROW	ts/ts_gtest.h	19385;"	d
ASSERT_DEATH	ts/ts_gtest.h	8675;"	d
ASSERT_DEATH_IF_SUPPORTED	ts/ts_gtest.h	8779;"	d
ASSERT_DEATH_IF_SUPPORTED	ts/ts_gtest.h	8784;"	d
ASSERT_DEBUG_DEATH	ts/ts_gtest.h	8757;"	d
ASSERT_DEBUG_DEATH	ts/ts_gtest.h	8765;"	d
ASSERT_DOUBLE_EQ	ts/ts_gtest.h	19928;"	d
ASSERT_EQ	ts/ts_gtest.h	19845;"	d
ASSERT_EXIT	ts/ts_gtest.h	8664;"	d
ASSERT_FALSE	ts/ts_gtest.h	19400;"	d
ASSERT_FLOAT_EQ	ts/ts_gtest.h	19924;"	d
ASSERT_GE	ts/ts_gtest.h	19861;"	d
ASSERT_GT	ts/ts_gtest.h	19865;"	d
ASSERT_HRESULT_FAILED	ts/ts_gtest.h	19973;"	d
ASSERT_HRESULT_SUCCEEDED	ts/ts_gtest.h	19967;"	d
ASSERT_KEYPOINTS_EQ	ts/cuda_test.hpp	332;"	d
ASSERT_LE	ts/ts_gtest.h	19853;"	d
ASSERT_LT	ts/ts_gtest.h	19857;"	d
ASSERT_MAT_NEAR	ts/cuda_test.hpp	113;"	d
ASSERT_MAT_SIMILAR	ts/cuda_test.hpp	162;"	d
ASSERT_NE	ts/ts_gtest.h	19849;"	d
ASSERT_NEAR	ts/ts_gtest.h	19936;"	d
ASSERT_NO_FATAL_FAILURE	ts/ts_gtest.h	19988;"	d
ASSERT_NO_THROW	ts/ts_gtest.h	19383;"	d
ASSERT_POINT2_NEAR	ts/cuda_test.hpp	135;"	d
ASSERT_POINT3_NEAR	ts/cuda_test.hpp	147;"	d
ASSERT_PRED1	ts/ts_gtest.h	19524;"	d
ASSERT_PRED2	ts/ts_gtest.h	19572;"	d
ASSERT_PRED3	ts/ts_gtest.h	19627;"	d
ASSERT_PRED4	ts/ts_gtest.h	19689;"	d
ASSERT_PRED5	ts/ts_gtest.h	19758;"	d
ASSERT_PRED_FORMAT1	ts/ts_gtest.h	19522;"	d
ASSERT_PRED_FORMAT2	ts/ts_gtest.h	19570;"	d
ASSERT_PRED_FORMAT3	ts/ts_gtest.h	19625;"	d
ASSERT_PRED_FORMAT4	ts/ts_gtest.h	19687;"	d
ASSERT_PRED_FORMAT5	ts/ts_gtest.h	19756;"	d
ASSERT_SCALAR_NEAR	ts/cuda_test.hpp	122;"	d
ASSERT_STRCASEEQ	ts/ts_gtest.h	19897;"	d
ASSERT_STRCASENE	ts/ts_gtest.h	19899;"	d
ASSERT_STREQ	ts/ts_gtest.h	19893;"	d
ASSERT_STRNE	ts/ts_gtest.h	19895;"	d
ASSERT_THROW	ts/ts_gtest.h	19381;"	d
ASSERT_TRUE	ts/ts_gtest.h	19397;"	d
AS_IS	stitching/detail/timelapsers.hpp	/^    enum {AS_IS, CROP};$/;"	e	enum:cv::detail::Timelapser::__anon417
AUTOTUNED	flann/defines.h	/^    AUTOTUNED = 255$/;"	e	enum:cvflann::flann_algorithm_t
AUTO_STEP	core/mat.hpp	/^    enum { MAGIC_VAL  = 0x42FF0000, AUTO_STEP = 0, CONTINUOUS_FLAG = CV_MAT_CONT_FLAG, SUBMATRIX_FLAG = CV_SUBMAT_FLAG };$/;"	e	enum:cv::Mat::__anon138
AUTO_STEP	core/mat.hpp	/^    enum { MAGIC_VAL  = 0x42FF0000, AUTO_STEP = 0, CONTINUOUS_FLAG = CV_MAT_CONT_FLAG, SUBMATRIX_FLAG = CV_SUBMAT_FLAG };$/;"	e	enum:cv::UMat::__anon140
Abort	ts/ts_gtest.h	/^inline void Abort() { abort(); }$/;"	f	namespace:std::tr1::posix
AbortReason	ts/ts_gtest.h	/^  enum AbortReason {$/;"	g	class:testing::internal::DeathTest
Access	core/opengl.hpp	/^    enum Access$/;"	g	class:cv::ogl::Buffer
Accumulator	features2d.hpp	/^struct CV_EXPORTS Accumulator$/;"	s	namespace:cv
Accumulator	features2d.hpp	/^template<> struct Accumulator<char>   { typedef float Type; };$/;"	s	namespace:cv
Accumulator	features2d.hpp	/^template<> struct Accumulator<short>  { typedef float Type; };$/;"	s	namespace:cv
Accumulator	features2d.hpp	/^template<> struct Accumulator<unsigned char>  { typedef float Type; };$/;"	s	namespace:cv
Accumulator	features2d.hpp	/^template<> struct Accumulator<unsigned short> { typedef float Type; };$/;"	s	namespace:cv
Accumulator	flann/dist.h	/^struct Accumulator { typedef T Type; };$/;"	s	namespace:cvflann
Accumulator	flann/dist.h	/^struct Accumulator<char>   { typedef float Type; };$/;"	s	namespace:cvflann
Accumulator	flann/dist.h	/^struct Accumulator<int> { typedef float Type; };$/;"	s	namespace:cvflann
Accumulator	flann/dist.h	/^struct Accumulator<short>  { typedef float Type; };$/;"	s	namespace:cvflann
Accumulator	flann/dist.h	/^struct Accumulator<unsigned char>  { typedef float Type; };$/;"	s	namespace:cvflann
Accumulator	flann/dist.h	/^struct Accumulator<unsigned int> { typedef float Type; };$/;"	s	namespace:cvflann
Accumulator	flann/dist.h	/^struct Accumulator<unsigned short> { typedef float Type; };$/;"	s	namespace:cvflann
Action	viz/types.hpp	/^            enum Action { KEY_UP = 0, KEY_DOWN = 1 };$/;"	g	class:cv::viz::KeyboardEvent
ActivationFunctions	ml.hpp	/^    enum ActivationFunctions {$/;"	g	class:cv::ml::ANN_MLP
AdaptiveThresholdTypes	imgproc.hpp	/^enum AdaptiveThresholdTypes {$/;"	g	namespace:cv
AddGlobalTestEnvironment	ts/ts_gtest.h	/^inline Environment* AddGlobalTestEnvironment(Environment* env) {$/;"	f	namespace:testing
AddParameterType	core/cuda/detail/type_traits_detail.hpp	/^        template <> struct AddParameterType<void> { typedef void type; };$/;"	s	namespace:cv::cuda::device::type_traits_detail
AddParameterType	core/cuda/detail/type_traits_detail.hpp	/^        template <class U> struct AddParameterType { typedef const U& type; };$/;"	s	namespace:cv::cuda::device::type_traits_detail
AddParameterType	core/cuda/detail/type_traits_detail.hpp	/^        template <class U> struct AddParameterType<U&> { typedef U& type; };$/;"	s	namespace:cv::cuda::device::type_traits_detail
AddParameterType	cudev/util/detail/type_traits.hpp	/^    template <> struct AddParameterType<void> { typedef void type; };$/;"	s	namespace:cv::cudev::type_traits_detail
AddParameterType	cudev/util/detail/type_traits.hpp	/^    template <class U> struct AddParameterType { typedef const U& type; };$/;"	s	namespace:cv::cudev::type_traits_detail
AddParameterType	cudev/util/detail/type_traits.hpp	/^    template <class U> struct AddParameterType<U&> { typedef U& type; };$/;"	s	namespace:cv::cudev::type_traits_detail
AddRef	ts/ts_gtest.h	/^struct AddRef { typedef T& type; };  \/\/ NOLINT$/;"	s	namespace:std::tr1::gtest_internal
AddRef	ts/ts_gtest.h	/^struct AddRef<T&> { typedef T& type; };  \/\/ NOLINT$/;"	s	namespace:std::tr1::gtest_internal
AddReference	ts/ts_gtest.h	/^struct AddReference { typedef T& type; };  \/\/ NOLINT$/;"	s	namespace:testing::internal
AddReference	ts/ts_gtest.h	/^struct AddReference<T&> { typedef T& type; };  \/\/ NOLINT$/;"	s	namespace:testing::internal
AddTestCaseInstantiation	ts/ts_gtest.h	/^  int AddTestCaseInstantiation(const string& instantiation_name,$/;"	f	class:testing::internal::ParameterizedTestCaseInfo
AddTestName	ts/ts_gtest.h	/^  bool AddTestName(const char* file, int line, const char* case_name,$/;"	f	class:testing::internal::TypedTestCasePState
AddTestPattern	ts/ts_gtest.h	/^  void AddTestPattern(const char* test_case_name,$/;"	f	class:testing::internal::ParameterizedTestCaseInfo
Advance	ts/ts_gtest.h	/^    virtual void Advance() {$/;"	f	class:testing::internal::CartesianProductGenerator10::Iterator
Advance	ts/ts_gtest.h	/^    virtual void Advance() {$/;"	f	class:testing::internal::CartesianProductGenerator2::Iterator
Advance	ts/ts_gtest.h	/^    virtual void Advance() {$/;"	f	class:testing::internal::CartesianProductGenerator3::Iterator
Advance	ts/ts_gtest.h	/^    virtual void Advance() {$/;"	f	class:testing::internal::CartesianProductGenerator4::Iterator
Advance	ts/ts_gtest.h	/^    virtual void Advance() {$/;"	f	class:testing::internal::CartesianProductGenerator5::Iterator
Advance	ts/ts_gtest.h	/^    virtual void Advance() {$/;"	f	class:testing::internal::CartesianProductGenerator6::Iterator
Advance	ts/ts_gtest.h	/^    virtual void Advance() {$/;"	f	class:testing::internal::CartesianProductGenerator7::Iterator
Advance	ts/ts_gtest.h	/^    virtual void Advance() {$/;"	f	class:testing::internal::CartesianProductGenerator8::Iterator
Advance	ts/ts_gtest.h	/^    virtual void Advance() {$/;"	f	class:testing::internal::CartesianProductGenerator9::Iterator
Advance	ts/ts_gtest.h	/^    virtual void Advance() {$/;"	f	class:testing::internal::RangeGenerator::Iterator
Advance	ts/ts_gtest.h	/^    virtual void Advance() {$/;"	f	class:testing::internal::ValuesInIteratorRangeGenerator::Iterator
Affine3	core/affine.hpp	/^    class Affine3$/;"	c	namespace:cv
Affine3	core/affine.hpp	/^cv::Affine3<T>::Affine3()$/;"	f	class:cv::Affine3
Affine3	core/affine.hpp	/^cv::Affine3<T>::Affine3(const Eigen::Transform<T, 3, Eigen::Affine, (Eigen::RowMajor)>& affine)$/;"	f	class:cv::Affine3
Affine3	core/affine.hpp	/^cv::Affine3<T>::Affine3(const Eigen::Transform<T, 3, Eigen::Affine>& affine)$/;"	f	class:cv::Affine3
Affine3	core/affine.hpp	/^cv::Affine3<T>::Affine3(const Mat3& R, const Vec3& t)$/;"	f	class:cv::Affine3
Affine3	core/affine.hpp	/^cv::Affine3<T>::Affine3(const Mat4& affine)$/;"	f	class:cv::Affine3
Affine3	core/affine.hpp	/^cv::Affine3<T>::Affine3(const Vec3& _rvec, const Vec3& t)$/;"	f	class:cv::Affine3
Affine3	core/affine.hpp	/^cv::Affine3<T>::Affine3(const cv::Mat& data, const Vec3& t)$/;"	f	class:cv::Affine3
Affine3	core/affine.hpp	/^cv::Affine3<T>::Affine3(const float_type* vals) : matrix(vals)$/;"	f	class:cv::Affine3
Affine3d	core/affine.hpp	/^    typedef Affine3<double> Affine3d;$/;"	t	namespace:cv
Affine3f	core/affine.hpp	/^    typedef Affine3<float> Affine3f;$/;"	t	namespace:cv
AffineMapPtr	cudev/ptr2d/warping.hpp	/^struct AffineMapPtr$/;"	s	namespace:cv::cudev
AffineMapPtrSz	cudev/ptr2d/warping.hpp	/^struct AffineMapPtrSz : AffineMapPtr$/;"	s	namespace:cv::cudev
AffineTransformer	shape/shape_transformer.hpp	/^class CV_EXPORTS_W AffineTransformer : public ShapeTransformer$/;"	c	namespace:cv
AgastFeatureDetector	features2d.hpp	/^class CV_EXPORTS_W AgastFeatureDetector : public Feature2D$/;"	c	namespace:cv
Algorithm	core.hpp	/^class CV_EXPORTS Algorithm;$/;"	m	namespace:cv	typeref:class:cv::CV_EXPORTS
Algorithm	core.hpp	/^class CV_EXPORTS_W Algorithm$/;"	c	namespace:cv
AlignExposures	photo.hpp	/^class CV_EXPORTS_W AlignExposures : public Algorithm$/;"	c	namespace:cv
AlignMTB	photo.hpp	/^class CV_EXPORTS_W AlignMTB : public AlignExposures$/;"	c	namespace:cv
AllocType	core/cuda.hpp	/^    enum AllocType { PAGE_LOCKED = 1, SHARED = 2, WRITE_COMBINED = 4 };$/;"	g	class:cv::cuda::HostMem
Allocate	core/wimage.hpp	/^inline void WImageBuffer<T>::Allocate(int width, int height, int nchannels)$/;"	f	class:cv::WImageBuffer
Allocate	core/wimage.hpp	/^inline void WImageBufferC<T, C>::Allocate(int width, int height)$/;"	f	class:cv::WImageBufferC
Allocator	core/cuda.hpp	/^    class CV_EXPORTS Allocator$/;"	c	class:cv::cuda::GpuMat
Allocator	core/cvstd.hpp	/^    explicit Allocator() {}$/;"	f	class:cv::Allocator
Allocator	core/cvstd.hpp	/^    explicit Allocator(Allocator const&) {}$/;"	f	class:cv::Allocator
Allocator	core/cvstd.hpp	/^    explicit Allocator(Allocator<U> const&) {}$/;"	f	class:cv::Allocator
Allocator	core/cvstd.hpp	/^template<typename _Tp> class Allocator$/;"	c	namespace:cv
AlmostEquals	ts/ts_gtest.h	/^  bool AlmostEquals(const FloatingPoint& rhs) const {$/;"	f	class:testing::internal::FloatingPoint
AlphaCompTypes	cudaimgproc.hpp	/^enum AlphaCompTypes { ALPHA_OVER, ALPHA_IN, ALPHA_OUT, ALPHA_ATOP, ALPHA_XOR, ALPHA_PLUS, ALPHA_OVER_PREMUL, ALPHA_IN_PREMUL, ALPHA_OUT_PREMUL,$/;"	g	namespace:cv::cuda
AlwaysFalse	ts/ts_gtest.h	/^inline bool AlwaysFalse() { return !AlwaysTrue(); }$/;"	f	namespace:testing::internal
AppendMessage	ts/ts_gtest.h	/^  void AppendMessage(const Message& a_message) {$/;"	f	class:testing::AssertionResult
AreaFilter	core/cuda/filters.hpp	/^        explicit __host__ __device__ __forceinline__ AreaFilter(const Ptr2D& src_, float scale_x_, float scale_y_)$/;"	f	struct:cv::cuda::device::AreaFilter
AreaFilter	core/cuda/filters.hpp	/^    template <typename Ptr2D> struct AreaFilter$/;"	s	namespace:cv::cuda::device
ArrayAwareFind	ts/ts_gtest.h	/^Iter ArrayAwareFind(Iter begin, Iter end, const Element& elem) {$/;"	f	namespace:testing::internal
ArrayEq	ts/ts_gtest.h	/^bool ArrayEq(const T* lhs, size_t size, const U* rhs) {$/;"	f	namespace:testing::internal
ArrayEq	ts/ts_gtest.h	/^inline bool ArrayEq(const T& lhs, const U& rhs) { return lhs == rhs; }$/;"	f	namespace:testing::internal
ArrayTest	ts.hpp	/^class CV_EXPORTS ArrayTest : public BaseTest$/;"	c	namespace:cvtest
ArrayWrapper	cudev/util/type_traits.hpp	/^template <typename T, int COUNT> struct ArrayWrapper$/;"	s	namespace:cv::cudev
Arrays	core/base.hpp	/^    class CV_EXPORTS Arrays;$/;"	m	namespace:cv::ogl	typeref:class:cv::ogl::CV_EXPORTS
Arrays	core/opengl.hpp	/^class CV_EXPORTS Arrays$/;"	c	namespace:cv::ogl
Arrays	core/opengl.hpp	/^cv::ogl::Arrays::Arrays() : size_(0)$/;"	f	class:cv::ogl::Arrays
AssertHeld	ts/ts_gtest.h	/^  void AssertHeld() const {$/;"	f	class:std::tr1::MutexBase
AssertHeld	ts/ts_gtest.h	/^  void AssertHeld() const {}$/;"	f	class:std::tr1::Mutex
AssertHelper	ts/ts_gtest.h	/^class GTEST_API_ AssertHelper {$/;"	c	namespace:testing::internal
AssertHelperData	ts/ts_gtest.h	/^    AssertHelperData(TestPartResult::Type t,$/;"	f	struct:testing::internal::AssertHelper::AssertHelperData
AssertHelperData	ts/ts_gtest.h	/^  struct AssertHelperData {$/;"	s	class:testing::internal::AssertHelper
AssertPred1Helper	ts/ts_gtest.h	/^AssertionResult AssertPred1Helper(const char* pred_text,$/;"	f	namespace:testing
AssertPred2Helper	ts/ts_gtest.h	/^AssertionResult AssertPred2Helper(const char* pred_text,$/;"	f	namespace:testing
AssertPred3Helper	ts/ts_gtest.h	/^AssertionResult AssertPred3Helper(const char* pred_text,$/;"	f	namespace:testing
AssertPred4Helper	ts/ts_gtest.h	/^AssertionResult AssertPred4Helper(const char* pred_text,$/;"	f	namespace:testing
AssertPred5Helper	ts/ts_gtest.h	/^AssertionResult AssertPred5Helper(const char* pred_text,$/;"	f	namespace:testing
AssertTypeEq	ts/ts_gtest.h	/^struct AssertTypeEq<T, T> {$/;"	s	namespace:testing::internal
AssertionResult	ts/ts_gtest.h	/^  explicit AssertionResult(bool success) : success_(success) {}$/;"	f	class:testing::AssertionResult
AssertionResult	ts/ts_gtest.h	/^class GTEST_API_ AssertionResult {$/;"	c	namespace:testing
AtEnd	ts/ts_gtest.h	/^    bool AtEnd() const {$/;"	f	class:testing::internal::CartesianProductGenerator10::Iterator
AtEnd	ts/ts_gtest.h	/^    bool AtEnd() const {$/;"	f	class:testing::internal::CartesianProductGenerator2::Iterator
AtEnd	ts/ts_gtest.h	/^    bool AtEnd() const {$/;"	f	class:testing::internal::CartesianProductGenerator3::Iterator
AtEnd	ts/ts_gtest.h	/^    bool AtEnd() const {$/;"	f	class:testing::internal::CartesianProductGenerator4::Iterator
AtEnd	ts/ts_gtest.h	/^    bool AtEnd() const {$/;"	f	class:testing::internal::CartesianProductGenerator5::Iterator
AtEnd	ts/ts_gtest.h	/^    bool AtEnd() const {$/;"	f	class:testing::internal::CartesianProductGenerator6::Iterator
AtEnd	ts/ts_gtest.h	/^    bool AtEnd() const {$/;"	f	class:testing::internal::CartesianProductGenerator7::Iterator
AtEnd	ts/ts_gtest.h	/^    bool AtEnd() const {$/;"	f	class:testing::internal::CartesianProductGenerator8::Iterator
AtEnd	ts/ts_gtest.h	/^    bool AtEnd() const {$/;"	f	class:testing::internal::CartesianProductGenerator9::Iterator
AtomicUnroll	cudev/grid/detail/reduce.hpp	/^    template <typename R> struct AtomicUnroll<R, 1>$/;"	s	namespace:cv::cudev::grid_reduce_detail
AtomicUnroll	cudev/grid/detail/reduce.hpp	/^    template <typename R> struct AtomicUnroll<R, 2>$/;"	s	namespace:cv::cudev::grid_reduce_detail
AtomicUnroll	cudev/grid/detail/reduce.hpp	/^    template <typename R> struct AtomicUnroll<R, 3>$/;"	s	namespace:cv::cudev::grid_reduce_detail
AtomicUnroll	cudev/grid/detail/reduce.hpp	/^    template <typename R> struct AtomicUnroll<R, 4>$/;"	s	namespace:cv::cudev::grid_reduce_detail
AutoBuffer	core/utility.hpp	/^AutoBuffer<_Tp, fixed_size>::AutoBuffer()$/;"	f	class:cv::AutoBuffer
AutoBuffer	core/utility.hpp	/^AutoBuffer<_Tp, fixed_size>::AutoBuffer(const AutoBuffer<_Tp, fixed_size>& abuf )$/;"	f	class:cv::AutoBuffer
AutoBuffer	core/utility.hpp	/^AutoBuffer<_Tp, fixed_size>::AutoBuffer(size_t _size)$/;"	f	class:cv::AutoBuffer
AutoBuffer	core/utility.hpp	/^template<typename _Tp, size_t fixed_size = 1024\/sizeof(_Tp)+8> class AutoBuffer$/;"	c	namespace:cv
AutoLock	core/utility.hpp	/^    AutoLock(Mutex& m) : mutex(&m) { mutex->lock(); }$/;"	f	class:cv::AutoLock
AutoLock	core/utility.hpp	/^class CV_EXPORTS AutoLock$/;"	c	namespace:cv
AutotunedIndex	flann/autotuned_index.h	/^    AutotunedIndex(const Matrix<ElementType>& inputData, const IndexParams& params = AutotunedIndexParams(), Distance d = Distance()) :$/;"	f	class:cvflann::AutotunedIndex
AutotunedIndex	flann/autotuned_index.h	/^class AutotunedIndex : public NNIndex<Distance>$/;"	c	namespace:cvflann
AutotunedIndexParams	flann/autotuned_index.h	/^    AutotunedIndexParams(float target_precision = 0.8, float build_weight = 0.01, float memory_weight = 0, float sample_fraction = 0.1)$/;"	f	struct:cvflann::AutotunedIndexParams
AutotunedIndexParams	flann/autotuned_index.h	/^struct AutotunedIndexParams : public IndexParams$/;"	s	namespace:cvflann
AutotunedIndexParams	flann/miniflann.hpp	/^struct CV_EXPORTS AutotunedIndexParams : public IndexParams$/;"	s	namespace:cv::flann
Avg	cudev/grid/reduce_to_vec.hpp	/^template <typename T> struct Avg : plus<T>$/;"	s	namespace:cv::cudev
AvgBitrate	cudacodec.hpp	/^    int AvgBitrate;      \/\/!< NVVE_AVG_BITRATE,$/;"	m	struct:cv::cudacodec::EncoderParams
B2Y	core/cuda/detail/color_detail.hpp	/^            B2Y        = 1868,$/;"	e	enum:cv::cuda::device::color_detail::__anon240
B2Y	cudev/functional/detail/color_cvt.hpp	/^        B2Y        = 1868,$/;"	e	enum:cv::cudev::color_cvt_detail::__anon396
BACKPROP	ml.hpp	/^        BACKPROP=0, \/\/!< The back-propagation algorithm.$/;"	e	enum:cv::ml::ANN_MLP::TrainingMethods
BAND	videostab/fast_marching.hpp	/^    enum { INSIDE = 0, BAND = 1, KNOWN = 255 };$/;"	e	enum:cv::videostab::FastMarchingMethod::__anon71
BATCH	ml.hpp	/^        BATCH = 0,$/;"	e	enum:cv::ml::LogisticRegression::Methods
BFMatcher	features2d.hpp	/^class CV_EXPORTS_W BFMatcher : public DescriptorMatcher$/;"	c	namespace:cv
BFRAME	cudacodec.hpp	/^        BFRAME = 3$/;"	e	enum:cv::cudacodec::EncoderCallBack::PicType
BGR	ts/cuda_perf.hpp	/^    enum { Gray = 1, TwoChannel = 2, BGR = 3, BGRA = 4 };$/;"	e	enum:perf::__anon37
BGRA	ts/cuda_perf.hpp	/^    enum { Gray = 1, TwoChannel = 2, BGR = 3, BGRA = 4 };$/;"	e	enum:perf::__anon37
BLOCKING_SYNC	core/cuda.hpp	/^        BLOCKING_SYNC  = 0x01,  \/**< Event uses blocking synchronization *\/$/;"	e	enum:cv::cuda::Event::CreateFlags
BLOCKSIZE	flann/allocator.h	/^const  size_t     BLOCKSIZE=8192;$/;"	m	namespace:cvflann
BLOCK_SIZE	core/cuda/detail/color_detail.hpp	/^            BLOCK_SIZE = 256$/;"	e	enum:cv::cuda::device::color_detail::__anon240
BLOCK_SIZE	cudev/functional/detail/color_cvt.hpp	/^        BLOCK_SIZE = 256$/;"	e	enum:cv::cudev::color_cvt_detail::__anon396
BOOLEAN	core.hpp	/^    enum { INT=0, BOOLEAN=1, REAL=2, STRING=3, MAT=4, MAT_VECTOR=5, ALGORITHM=6, FLOAT=7,$/;"	e	enum:cv::Param::__anon404
BORDER_CONSTANT	core/base.hpp	/^    BORDER_CONSTANT    = 0, \/\/!< `iiiiii|abcdefgh|iiiiiii`  with some specified `i`$/;"	e	enum:cv::BorderTypes
BORDER_DEFAULT	core/base.hpp	/^    BORDER_DEFAULT     = BORDER_REFLECT_101, \/\/!< same as BORDER_REFLECT_101$/;"	e	enum:cv::BorderTypes
BORDER_ISOLATED	core/base.hpp	/^    BORDER_ISOLATED    = 16 \/\/!< do not look outside of ROI$/;"	e	enum:cv::BorderTypes
BORDER_REFLECT	core/base.hpp	/^    BORDER_REFLECT     = 2, \/\/!< `fedcba|abcdefgh|hgfedcb`$/;"	e	enum:cv::BorderTypes
BORDER_REFLECT101	core/base.hpp	/^    BORDER_REFLECT101  = BORDER_REFLECT_101, \/\/!< same as BORDER_REFLECT_101$/;"	e	enum:cv::BorderTypes
BORDER_REFLECT_101	core/base.hpp	/^    BORDER_REFLECT_101 = 4, \/\/!< `gfedcb|abcdefgh|gfedcba`$/;"	e	enum:cv::BorderTypes
BORDER_REPLICATE	core/base.hpp	/^    BORDER_REPLICATE   = 1, \/\/!< `aaaaaa|abcdefgh|hhhhhhh`$/;"	e	enum:cv::BorderTypes
BORDER_TRANSPARENT	core/base.hpp	/^    BORDER_TRANSPARENT = 5, \/\/!< `uvwxyz|absdefgh|ijklmno`$/;"	e	enum:cv::BorderTypes
BORDER_WRAP	core/base.hpp	/^    BORDER_WRAP        = 3, \/\/!< `cdefgh|abcdefgh|abcdefg`$/;"	e	enum:cv::BorderTypes
BOTH	viz/widgets.hpp	/^            enum {FRAMES = 1, PATH = 2, BOTH = FRAMES + PATH };$/;"	e	enum:cv::viz::WTrajectory::__anon74
BOWImgDescriptorExtractor	features2d.hpp	/^class CV_EXPORTS_W BOWImgDescriptorExtractor$/;"	c	namespace:cv
BOWKMeansTrainer	features2d.hpp	/^class CV_EXPORTS_W BOWKMeansTrainer : public BOWTrainer$/;"	c	namespace:cv
BOWTrainer	features2d.hpp	/^class CV_EXPORTS_W BOWTrainer$/;"	c	namespace:cv
BRISK	features2d.hpp	/^class CV_EXPORTS_W BRISK : public Feature2D$/;"	c	namespace:cv
BRUTE_FORCE	ml.hpp	/^        BRUTE_FORCE=1,$/;"	e	enum:cv::ml::KNearest::Types
BackgroundSubtractor	video/background_segm.hpp	/^class CV_EXPORTS_W BackgroundSubtractor : public Algorithm$/;"	c	namespace:cv
BackgroundSubtractorFGD	cudalegacy.hpp	/^class CV_EXPORTS BackgroundSubtractorFGD : public cv::BackgroundSubtractor$/;"	c	namespace:cv::cuda
BackgroundSubtractorGMG	cudalegacy.hpp	/^class CV_EXPORTS BackgroundSubtractorGMG : public cv::BackgroundSubtractor$/;"	c	namespace:cv::cuda
BackgroundSubtractorKNN	video/background_segm.hpp	/^class CV_EXPORTS_W BackgroundSubtractorKNN : public BackgroundSubtractor$/;"	c	namespace:cv
BackgroundSubtractorMOG	cudabgsegm.hpp	/^class CV_EXPORTS BackgroundSubtractorMOG : public cv::BackgroundSubtractor$/;"	c	namespace:cv::cuda
BackgroundSubtractorMOG2	cudabgsegm.hpp	/^class CV_EXPORTS BackgroundSubtractorMOG2 : public cv::BackgroundSubtractorMOG2$/;"	c	namespace:cv::cuda
BackgroundSubtractorMOG2	video/background_segm.hpp	/^class CV_EXPORTS_W BackgroundSubtractorMOG2 : public BackgroundSubtractor$/;"	c	namespace:cv
BadAlign	core/base.hpp	/^    BadAlign=                  -21,  \/\/!<$/;"	e	enum:cv::Error::Code
BadAlphaChannel	core/base.hpp	/^    BadAlphaChannel=           -18,  \/\/!<$/;"	e	enum:cv::Error::Code
BadArgTest	ts.hpp	/^class CV_EXPORTS BadArgTest : public BaseTest$/;"	c	namespace:cvtest
BadCOI	core/base.hpp	/^    BadCOI=                    -24,  \/\/!<$/;"	e	enum:cv::Error::Code
BadCallBack	core/base.hpp	/^    BadCallBack=               -22,  \/\/!<$/;"	e	enum:cv::Error::Code
BadDataPtr	core/base.hpp	/^    BadDataPtr=                -12,  \/\/!<$/;"	e	enum:cv::Error::Code
BadDepth	core/base.hpp	/^    BadDepth=                  -17,  \/\/!<$/;"	e	enum:cv::Error::Code
BadImageSize	core/base.hpp	/^    BadImageSize=              -10,  \/\/!< image size is invalid$/;"	e	enum:cv::Error::Code
BadModelOrChSeq	core/base.hpp	/^    BadModelOrChSeq=           -14,  \/\/!<$/;"	e	enum:cv::Error::Code
BadNumChannel1U	core/base.hpp	/^    BadNumChannel1U=           -16,  \/\/!<$/;"	e	enum:cv::Error::Code
BadNumChannels	core/base.hpp	/^    BadNumChannels=            -15,  \/\/!<$/;"	e	enum:cv::Error::Code
BadOffset	core/base.hpp	/^    BadOffset=                 -11,  \/\/!< offset is invalid$/;"	e	enum:cv::Error::Code
BadOrder	core/base.hpp	/^    BadOrder=                  -19,  \/\/!<$/;"	e	enum:cv::Error::Code
BadOrigin	core/base.hpp	/^    BadOrigin=                 -20,  \/\/!<$/;"	e	enum:cv::Error::Code
BadROISize	core/base.hpp	/^    BadROISize=                -25,  \/\/!<$/;"	e	enum:cv::Error::Code
BadStep	core/base.hpp	/^    BadStep=                   -13,  \/\/!<$/;"	e	enum:cv::Error::Code
BadTileSize	core/base.hpp	/^    BadTileSize=               -23,  \/\/!<$/;"	e	enum:cv::Error::Code
Ballot	core/cuda/emulation.hpp	/^        static __forceinline__ __device__ int Ballot(int predicate)$/;"	f	struct:cv::cuda::device::Emulation
BaseCascadeClassifier	objdetect.hpp	/^class CV_EXPORTS_W BaseCascadeClassifier : public Algorithm$/;"	c	namespace:cv
BaseGenerator	ts/ts_gtest.h	/^    virtual const ParamGeneratorInterface<ParamType>* BaseGenerator() const {$/;"	f	class:testing::internal::CartesianProductGenerator10::Iterator
BaseGenerator	ts/ts_gtest.h	/^    virtual const ParamGeneratorInterface<ParamType>* BaseGenerator() const {$/;"	f	class:testing::internal::CartesianProductGenerator2::Iterator
BaseGenerator	ts/ts_gtest.h	/^    virtual const ParamGeneratorInterface<ParamType>* BaseGenerator() const {$/;"	f	class:testing::internal::CartesianProductGenerator3::Iterator
BaseGenerator	ts/ts_gtest.h	/^    virtual const ParamGeneratorInterface<ParamType>* BaseGenerator() const {$/;"	f	class:testing::internal::CartesianProductGenerator4::Iterator
BaseGenerator	ts/ts_gtest.h	/^    virtual const ParamGeneratorInterface<ParamType>* BaseGenerator() const {$/;"	f	class:testing::internal::CartesianProductGenerator5::Iterator
BaseGenerator	ts/ts_gtest.h	/^    virtual const ParamGeneratorInterface<ParamType>* BaseGenerator() const {$/;"	f	class:testing::internal::CartesianProductGenerator6::Iterator
BaseGenerator	ts/ts_gtest.h	/^    virtual const ParamGeneratorInterface<ParamType>* BaseGenerator() const {$/;"	f	class:testing::internal::CartesianProductGenerator7::Iterator
BaseGenerator	ts/ts_gtest.h	/^    virtual const ParamGeneratorInterface<ParamType>* BaseGenerator() const {$/;"	f	class:testing::internal::CartesianProductGenerator8::Iterator
BaseGenerator	ts/ts_gtest.h	/^    virtual const ParamGeneratorInterface<ParamType>* BaseGenerator() const {$/;"	f	class:testing::internal::CartesianProductGenerator9::Iterator
BaseGenerator	ts/ts_gtest.h	/^    virtual const ParamGeneratorInterface<T>* BaseGenerator() const {$/;"	f	class:testing::internal::RangeGenerator::Iterator
BaseGenerator	ts/ts_gtest.h	/^    virtual const ParamGeneratorInterface<T>* BaseGenerator() const {$/;"	f	class:testing::internal::ValuesInIteratorRangeGenerator::Iterator
BaseTest	ts.hpp	/^class CV_EXPORTS BaseTest$/;"	c	namespace:cvtest
BaseType	core/wimage.hpp	/^    typedef T BaseType;$/;"	t	class:cv::WImage
BaseType	core/wimage.hpp	/^    typedef typename WImage<T>::BaseType BaseType;$/;"	t	class:cv::WImageBuffer
BaseType	core/wimage.hpp	/^    typedef typename WImage<T>::BaseType BaseType;$/;"	t	class:cv::WImageBufferC
BaseType	core/wimage.hpp	/^    typedef typename WImage<T>::BaseType BaseType;$/;"	t	class:cv::WImageC
BaseType	core/wimage.hpp	/^    typedef typename WImage<T>::BaseType BaseType;$/;"	t	class:cv::WImageView
BaseType	core/wimage.hpp	/^    typedef typename WImage<T>::BaseType BaseType;$/;"	t	class:cv::WImageViewC
BasicNarrowIoManip	ts/ts_gtest.h	/^  typedef std::ostream& (*BasicNarrowIoManip)(std::ostream&);$/;"	t	class:testing::Message::std
Begin	ts/ts_gtest.h	/^  virtual ParamIteratorInterface<ParamType>* Begin() const {$/;"	f	class:testing::internal::CartesianProductGenerator10
Begin	ts/ts_gtest.h	/^  virtual ParamIteratorInterface<ParamType>* Begin() const {$/;"	f	class:testing::internal::CartesianProductGenerator2
Begin	ts/ts_gtest.h	/^  virtual ParamIteratorInterface<ParamType>* Begin() const {$/;"	f	class:testing::internal::CartesianProductGenerator3
Begin	ts/ts_gtest.h	/^  virtual ParamIteratorInterface<ParamType>* Begin() const {$/;"	f	class:testing::internal::CartesianProductGenerator4
Begin	ts/ts_gtest.h	/^  virtual ParamIteratorInterface<ParamType>* Begin() const {$/;"	f	class:testing::internal::CartesianProductGenerator5
Begin	ts/ts_gtest.h	/^  virtual ParamIteratorInterface<ParamType>* Begin() const {$/;"	f	class:testing::internal::CartesianProductGenerator6
Begin	ts/ts_gtest.h	/^  virtual ParamIteratorInterface<ParamType>* Begin() const {$/;"	f	class:testing::internal::CartesianProductGenerator7
Begin	ts/ts_gtest.h	/^  virtual ParamIteratorInterface<ParamType>* Begin() const {$/;"	f	class:testing::internal::CartesianProductGenerator8
Begin	ts/ts_gtest.h	/^  virtual ParamIteratorInterface<ParamType>* Begin() const {$/;"	f	class:testing::internal::CartesianProductGenerator9
Begin	ts/ts_gtest.h	/^  virtual ParamIteratorInterface<T>* Begin() const {$/;"	f	class:testing::internal::RangeGenerator
Begin	ts/ts_gtest.h	/^  virtual ParamIteratorInterface<T>* Begin() const {$/;"	f	class:testing::internal::ValuesInIteratorRangeGenerator
BestOf2NearestMatcher	stitching/detail/matchers.hpp	/^class CV_EXPORTS BestOf2NearestMatcher : public FeaturesMatcher$/;"	c	namespace:cv::detail
BestOf2NearestRangeMatcher	stitching/detail/matchers.hpp	/^class CV_EXPORTS BestOf2NearestRangeMatcher : public BestOf2NearestMatcher$/;"	c	namespace:cv::detail
BiggestInt	ts/ts_gtest.h	/^typedef __int64 BiggestInt;$/;"	t	namespace:std::tr1
BiggestInt	ts/ts_gtest.h	/^typedef long long BiggestInt;  \/\/ NOLINT$/;"	t	namespace:std::tr1
BinOpShift	core/cuda/functional.hpp	/^        template <size_t src_elem_size1, size_t src_elem_size2, size_t dst_elem_size> struct BinOpShift { enum { shift = 1 }; };$/;"	s	namespace:cv::cuda::device::functional_detail
BinOpShift	core/cuda/functional.hpp	/^        template <size_t src_elem_size1, size_t src_elem_size2> struct BinOpShift<src_elem_size1, src_elem_size2, 1> { enum { shift = 4 }; };$/;"	s	namespace:cv::cuda::device::functional_detail
BinOpShift	core/cuda/functional.hpp	/^        template <size_t src_elem_size1, size_t src_elem_size2> struct BinOpShift<src_elem_size1, src_elem_size2, 2> { enum { shift = 2 }; };$/;"	s	namespace:cv::cuda::device::functional_detail
BinaryNegate	cudev/functional/functional.hpp	/^template <class Predicate> struct BinaryNegate : binary_function<typename Predicate::first_argument_type, typename Predicate::second_argument_type, typename Predicate::result_type>$/;"	s	namespace:cv::cudev
BinaryReadWriteTraits	core/cuda/detail/transform_detail.hpp	/^        template <typename T1, typename T2, typename D, int shift> struct BinaryReadWriteTraits$/;"	s	namespace:cv::cuda::device::transform_detail
BinaryTransformPtr	cudev/ptr2d/transform.hpp	/^template <class Src1Ptr, class Src2Ptr, class Op> struct BinaryTransformPtr$/;"	s	namespace:cv::cudev
BinaryTransformPtrSz	cudev/ptr2d/transform.hpp	/^template <class Src1Ptr, class Src2Ptr, class Op> struct BinaryTransformPtrSz : BinaryTransformPtr<Src1Ptr, Src2Ptr, Op>$/;"	s	namespace:cv::cudev
BinaryTupleAdapter	cudev/functional/tuple_adapter.hpp	/^template <class Op, int n0, int n1> struct BinaryTupleAdapter$/;"	s	namespace:cv::cudev
Bind	ts/ts_gtest.h	/^  struct Bind {$/;"	s	struct:testing::internal::TemplateSel
Binder1st	cudev/functional/functional.hpp	/^template <class Op> struct Binder1st : unary_function<typename Op::second_argument_type, typename Op::result_type>$/;"	s	namespace:cv::cudev
Binder2nd	cudev/functional/functional.hpp	/^template <class Op> struct Binder2nd : unary_function<typename Op::first_argument_type, typename Op::result_type>$/;"	s	namespace:cv::cudev
Bits	ts/ts_gtest.h	/^  typedef typename TypeWithSize<sizeof(RawType)>::UInt Bits;$/;"	t	class:testing::internal::FloatingPoint
Blender	stitching/detail/blenders.hpp	/^class CV_EXPORTS Blender$/;"	c	namespace:cv::detail
Block	core/cuda/block.hpp	/^    struct Block$/;"	s	namespace:cv::cuda::device
Block	cudev/block/block.hpp	/^struct Block$/;"	s	namespace:cv::cudev
BlockScan	core/cuda/scan.hpp	/^        __device__ __forceinline__ BlockScan() {}$/;"	f	struct:cv::cuda::device::BlockScan
BlockScan	core/cuda/scan.hpp	/^        __device__ __forceinline__ BlockScan(const BlockScan& other) { (void)other; }$/;"	f	struct:cv::cuda::device::BlockScan
BlockScan	core/cuda/scan.hpp	/^    template <ScanKind Kind , typename T, typename Sc, typename F> struct BlockScan$/;"	s	namespace:cv::cuda::device
BlockedRange	core/private.hpp	/^    typedef tbb::blocked_range<int> BlockedRange;$/;"	t	namespace:cv
BlocksGainCompensator	stitching/detail/exposure_compensate.hpp	/^    BlocksGainCompensator(int bl_width = 32, int bl_height = 32)$/;"	f	class:cv::detail::BlocksGainCompensator
BlocksGainCompensator	stitching/detail/exposure_compensate.hpp	/^class CV_EXPORTS BlocksGainCompensator : public ExposureCompensator$/;"	c	namespace:cv::detail
Bool	ts/ts_gtest.h	/^inline internal::ParamGenerator<bool> Bool() {$/;"	f	namespace:testing
Boost	ml.hpp	/^class CV_EXPORTS_W Boost : public DTrees$/;"	c	namespace:cv::ml
Border	ts/ocl_test.hpp	/^    struct Border$/;"	s	struct:cvtest::ocl::TestUtils
BorderConst	core/types_c.h	/^    int  BorderConst[4];    \/**< Ditto.                                 *\/$/;"	m	struct:_IplImage
BorderMode	core/types_c.h	/^    int  BorderMode[4];     \/**< Ignored by OpenCV.                     *\/$/;"	m	struct:_IplImage
BorderReader	core/cuda/border_interpolate.hpp	/^        __host__ __device__ __forceinline__ BorderReader(const Ptr2D& ptr_, const B& b_) : ptr(ptr_), b(b_) {}$/;"	f	struct:cv::cuda::device::BorderReader
BorderReader	core/cuda/border_interpolate.hpp	/^        __host__ __device__ __forceinline__ BorderReader(const Ptr2D& src_, const BrdConstant<D>& b) :$/;"	f	struct:cv::cuda::device::BorderReader
BorderReader	core/cuda/border_interpolate.hpp	/^    template <typename Ptr2D, typename B> struct BorderReader$/;"	s	namespace:cv::cuda::device
BorderReader	core/cuda/border_interpolate.hpp	/^    template <typename Ptr2D, typename D> struct BorderReader< Ptr2D, BrdConstant<D> >$/;"	s	namespace:cv::cuda::device
BorderTypes	core/base.hpp	/^enum BorderTypes {$/;"	g	namespace:cv
BoundingBox	flann/kdtree_single_index.h	/^    typedef std::vector<Interval> BoundingBox;$/;"	t	class:cvflann::KDTreeSingleIndex
Branch	flann/kdtree_index.h	/^    typedef BranchSt* Branch;$/;"	t	class:cvflann::KDTreeIndex
Branch	flann/kdtree_single_index.h	/^    typedef BranchSt* Branch;$/;"	t	class:cvflann::KDTreeSingleIndex
BranchSt	flann/hierarchical_clustering_index.h	/^    typedef BranchStruct<NodePtr, DistanceType> BranchSt;$/;"	t	class:cvflann::HierarchicalClusteringIndex
BranchSt	flann/kdtree_index.h	/^    typedef BranchStruct<NodePtr, DistanceType> BranchSt;$/;"	t	class:cvflann::KDTreeIndex
BranchSt	flann/kdtree_single_index.h	/^    typedef BranchStruct<NodePtr, DistanceType> BranchSt;$/;"	t	class:cvflann::KDTreeSingleIndex
BranchSt	flann/kmeans_index.h	/^    typedef BranchStruct<KMeansNodePtr, DistanceType> BranchSt;$/;"	t	class:cvflann::KMeansIndex
BranchStruct	flann/result_set.h	/^    BranchStruct() {}$/;"	f	struct:cvflann::BranchStruct
BranchStruct	flann/result_set.h	/^    BranchStruct(const T& aNode, DistanceType dist) : node(aNode), mindist(dist) {}$/;"	f	struct:cvflann::BranchStruct
BranchStruct	flann/result_set.h	/^struct BranchStruct$/;"	s	namespace:cvflann
BrdBase	cudev/ptr2d/extrapolation.hpp	/^template <class BrdImpl, class SrcPtr> struct BrdBase$/;"	s	namespace:cv::cudev
BrdColConstant	core/cuda/border_interpolate.hpp	/^        explicit __host__ __device__ __forceinline__ BrdColConstant(int height_, const D& val_ = VecTraits<D>::all(0)) : height(height_), val(val_) {}$/;"	f	struct:cv::cuda::device::BrdColConstant
BrdColConstant	core/cuda/border_interpolate.hpp	/^    template <typename D> struct BrdColConstant$/;"	s	namespace:cv::cuda::device
BrdColReflect	core/cuda/border_interpolate.hpp	/^        explicit __host__ __device__ __forceinline__ BrdColReflect(int height) : last_row(height - 1) {}$/;"	f	struct:cv::cuda::device::BrdColReflect
BrdColReflect	core/cuda/border_interpolate.hpp	/^        template <typename U> __host__ __device__ __forceinline__ BrdColReflect(int height, U) : last_row(height - 1) {}$/;"	f	struct:cv::cuda::device::BrdColReflect
BrdColReflect	core/cuda/border_interpolate.hpp	/^    template <typename D> struct BrdColReflect$/;"	s	namespace:cv::cuda::device
BrdColReflect101	core/cuda/border_interpolate.hpp	/^        explicit __host__ __device__ __forceinline__ BrdColReflect101(int height) : last_row(height - 1) {}$/;"	f	struct:cv::cuda::device::BrdColReflect101
BrdColReflect101	core/cuda/border_interpolate.hpp	/^        template <typename U> __host__ __device__ __forceinline__ BrdColReflect101(int height, U) : last_row(height - 1) {}$/;"	f	struct:cv::cuda::device::BrdColReflect101
BrdColReflect101	core/cuda/border_interpolate.hpp	/^    template <typename D> struct BrdColReflect101$/;"	s	namespace:cv::cuda::device
BrdColReplicate	core/cuda/border_interpolate.hpp	/^        explicit __host__ __device__ __forceinline__ BrdColReplicate(int height) : last_row(height - 1) {}$/;"	f	struct:cv::cuda::device::BrdColReplicate
BrdColReplicate	core/cuda/border_interpolate.hpp	/^        template <typename U> __host__ __device__ __forceinline__ BrdColReplicate(int height, U) : last_row(height - 1) {}$/;"	f	struct:cv::cuda::device::BrdColReplicate
BrdColReplicate	core/cuda/border_interpolate.hpp	/^    template <typename D> struct BrdColReplicate$/;"	s	namespace:cv::cuda::device
BrdColWrap	core/cuda/border_interpolate.hpp	/^        explicit __host__ __device__ __forceinline__ BrdColWrap(int height_) : height(height_) {}$/;"	f	struct:cv::cuda::device::BrdColWrap
BrdColWrap	core/cuda/border_interpolate.hpp	/^        template <typename U> __host__ __device__ __forceinline__ BrdColWrap(int height_, U) : height(height_) {}$/;"	f	struct:cv::cuda::device::BrdColWrap
BrdColWrap	core/cuda/border_interpolate.hpp	/^    template <typename D> struct BrdColWrap$/;"	s	namespace:cv::cuda::device
BrdConstant	core/cuda/border_interpolate.hpp	/^        __host__ __device__ __forceinline__ BrdConstant(int height_, int width_, const D& val_ = VecTraits<D>::all(0)) : height(height_), width(width_), val(val_)$/;"	f	struct:cv::cuda::device::BrdConstant
BrdConstant	core/cuda/border_interpolate.hpp	/^    template <typename D> struct BrdConstant$/;"	s	namespace:cv::cuda::device
BrdConstant	cudev/ptr2d/extrapolation.hpp	/^template <class SrcPtr> struct BrdConstant$/;"	s	namespace:cv::cudev
BrdReflect	core/cuda/border_interpolate.hpp	/^        __host__ __device__ __forceinline__ BrdReflect(int height, int width) : last_row(height - 1), last_col(width - 1) {}$/;"	f	struct:cv::cuda::device::BrdReflect
BrdReflect	core/cuda/border_interpolate.hpp	/^        template <typename U> __host__ __device__ __forceinline__ BrdReflect(int height, int width, U) : last_row(height - 1), last_col(width - 1) {}$/;"	f	struct:cv::cuda::device::BrdReflect
BrdReflect	core/cuda/border_interpolate.hpp	/^    template <typename D> struct BrdReflect$/;"	s	namespace:cv::cuda::device
BrdReflect	cudev/ptr2d/extrapolation.hpp	/^struct BrdReflect$/;"	s	namespace:cv::cudev
BrdReflect101	core/cuda/border_interpolate.hpp	/^        __host__ __device__ __forceinline__ BrdReflect101(int height, int width) : last_row(height - 1), last_col(width - 1) {}$/;"	f	struct:cv::cuda::device::BrdReflect101
BrdReflect101	core/cuda/border_interpolate.hpp	/^        template <typename U> __host__ __device__ __forceinline__ BrdReflect101(int height, int width, U) : last_row(height - 1), last_col(width - 1) {}$/;"	f	struct:cv::cuda::device::BrdReflect101
BrdReflect101	core/cuda/border_interpolate.hpp	/^    template <typename D> struct BrdReflect101$/;"	s	namespace:cv::cuda::device
BrdReflect101	cudev/ptr2d/extrapolation.hpp	/^struct BrdReflect101$/;"	s	namespace:cv::cudev
BrdReplicate	core/cuda/border_interpolate.hpp	/^        __host__ __device__ __forceinline__ BrdReplicate(int height, int width) : last_row(height - 1), last_col(width - 1) {}$/;"	f	struct:cv::cuda::device::BrdReplicate
BrdReplicate	core/cuda/border_interpolate.hpp	/^        template <typename U> __host__ __device__ __forceinline__ BrdReplicate(int height, int width, U) : last_row(height - 1), last_col(width - 1) {}$/;"	f	struct:cv::cuda::device::BrdReplicate
BrdReplicate	core/cuda/border_interpolate.hpp	/^    template <typename D> struct BrdReplicate$/;"	s	namespace:cv::cuda::device
BrdReplicate	cudev/ptr2d/extrapolation.hpp	/^struct BrdReplicate$/;"	s	namespace:cv::cudev
BrdRowConstant	core/cuda/border_interpolate.hpp	/^        explicit __host__ __device__ __forceinline__ BrdRowConstant(int width_, const D& val_ = VecTraits<D>::all(0)) : width(width_), val(val_) {}$/;"	f	struct:cv::cuda::device::BrdRowConstant
BrdRowConstant	core/cuda/border_interpolate.hpp	/^    template <typename D> struct BrdRowConstant$/;"	s	namespace:cv::cuda::device
BrdRowReflect	core/cuda/border_interpolate.hpp	/^        explicit __host__ __device__ __forceinline__ BrdRowReflect(int width) : last_col(width - 1) {}$/;"	f	struct:cv::cuda::device::BrdRowReflect
BrdRowReflect	core/cuda/border_interpolate.hpp	/^        template <typename U> __host__ __device__ __forceinline__ BrdRowReflect(int width, U) : last_col(width - 1) {}$/;"	f	struct:cv::cuda::device::BrdRowReflect
BrdRowReflect	core/cuda/border_interpolate.hpp	/^    template <typename D> struct BrdRowReflect$/;"	s	namespace:cv::cuda::device
BrdRowReflect101	core/cuda/border_interpolate.hpp	/^        explicit __host__ __device__ __forceinline__ BrdRowReflect101(int width) : last_col(width - 1) {}$/;"	f	struct:cv::cuda::device::BrdRowReflect101
BrdRowReflect101	core/cuda/border_interpolate.hpp	/^        template <typename U> __host__ __device__ __forceinline__ BrdRowReflect101(int width, U) : last_col(width - 1) {}$/;"	f	struct:cv::cuda::device::BrdRowReflect101
BrdRowReflect101	core/cuda/border_interpolate.hpp	/^    template <typename D> struct BrdRowReflect101$/;"	s	namespace:cv::cuda::device
BrdRowReplicate	core/cuda/border_interpolate.hpp	/^        explicit __host__ __device__ __forceinline__ BrdRowReplicate(int width) : last_col(width - 1) {}$/;"	f	struct:cv::cuda::device::BrdRowReplicate
BrdRowReplicate	core/cuda/border_interpolate.hpp	/^        template <typename U> __host__ __device__ __forceinline__ BrdRowReplicate(int width, U) : last_col(width - 1) {}$/;"	f	struct:cv::cuda::device::BrdRowReplicate
BrdRowReplicate	core/cuda/border_interpolate.hpp	/^    template <typename D> struct BrdRowReplicate$/;"	s	namespace:cv::cuda::device
BrdRowWrap	core/cuda/border_interpolate.hpp	/^        explicit __host__ __device__ __forceinline__ BrdRowWrap(int width_) : width(width_) {}$/;"	f	struct:cv::cuda::device::BrdRowWrap
BrdRowWrap	core/cuda/border_interpolate.hpp	/^        template <typename U> __host__ __device__ __forceinline__ BrdRowWrap(int width_, U) : width(width_) {}$/;"	f	struct:cv::cuda::device::BrdRowWrap
BrdRowWrap	core/cuda/border_interpolate.hpp	/^    template <typename D> struct BrdRowWrap$/;"	s	namespace:cv::cuda::device
BrdWrap	core/cuda/border_interpolate.hpp	/^        __host__ __device__ __forceinline__ BrdWrap(int height_, int width_) :$/;"	f	struct:cv::cuda::device::BrdWrap
BrdWrap	core/cuda/border_interpolate.hpp	/^        __host__ __device__ __forceinline__ BrdWrap(int height_, int width_, U) :$/;"	f	struct:cv::cuda::device::BrdWrap
BrdWrap	core/cuda/border_interpolate.hpp	/^    template <typename D> struct BrdWrap$/;"	s	namespace:cv::cuda::device
BrdWrap	cudev/ptr2d/extrapolation.hpp	/^struct BrdWrap$/;"	s	namespace:cv::cudev
BroxOpticalFlow	cudaoptflow.hpp	/^class CV_EXPORTS BroxOpticalFlow : public DenseOpticalFlow$/;"	c	namespace:cv::cuda
BroxOpticalFlow	superres/optical_flow.hpp	/^        class CV_EXPORTS BroxOpticalFlow : public virtual DenseOpticalFlowExt$/;"	c	namespace:cv::superres
Bucket	flann/lsh_table.h	/^typedef std::vector<FeatureIndex> Bucket;$/;"	t	namespace:cvflann::lsh
BucketKey	flann/lsh_table.h	/^typedef unsigned int BucketKey;$/;"	t	namespace:cvflann::lsh
BucketsSpace	flann/lsh_table.h	/^    typedef std::unordered_map<BucketKey, Bucket> BucketsSpace;$/;"	t	class:cvflann::lsh::LshTable
BucketsSpeed	flann/lsh_table.h	/^    typedef std::vector<Bucket> BucketsSpeed;$/;"	t	class:cvflann::lsh::LshTable
Buffer	core/base.hpp	/^    class CV_EXPORTS Buffer;$/;"	m	namespace:cv::ogl	typeref:class:cv::ogl::CV_EXPORTS
Buffer	core/opengl.hpp	/^class CV_EXPORTS Buffer$/;"	c	namespace:cv::ogl
Buffer	core/opengl.hpp	/^cv::ogl::Buffer::Buffer(Size asize, int atype, Target target, bool autoRelease) : rows_(0), cols_(0), type_(0)$/;"	f	class:cv::ogl::Buffer
Buffer	core/opengl.hpp	/^cv::ogl::Buffer::Buffer(int arows, int acols, int atype, Target target, bool autoRelease) : rows_(0), cols_(0), type_(0)$/;"	f	class:cv::ogl::Buffer
BufferPoolController	core/bufferpool.hpp	/^class BufferPoolController$/;"	c	namespace:cv
BundleAdjusterBase	stitching/detail/motion_estimators.hpp	/^    BundleAdjusterBase(int num_params_per_cam, int num_errs_per_measurement)$/;"	f	class:cv::detail::BundleAdjusterBase
BundleAdjusterBase	stitching/detail/motion_estimators.hpp	/^class CV_EXPORTS BundleAdjusterBase : public Estimator$/;"	c	namespace:cv::detail
BundleAdjusterRay	stitching/detail/motion_estimators.hpp	/^    BundleAdjusterRay() : BundleAdjusterBase(4, 3) {}$/;"	f	class:cv::detail::BundleAdjusterRay
BundleAdjusterRay	stitching/detail/motion_estimators.hpp	/^class CV_EXPORTS BundleAdjusterRay : public BundleAdjusterBase$/;"	c	namespace:cv::detail
BundleAdjusterReproj	stitching/detail/motion_estimators.hpp	/^    BundleAdjusterReproj() : BundleAdjusterBase(7, 2) {}$/;"	f	class:cv::detail::BundleAdjusterReproj
BundleAdjusterReproj	stitching/detail/motion_estimators.hpp	/^class CV_EXPORTS BundleAdjusterReproj : public BundleAdjusterBase$/;"	c	namespace:cv::detail
ButtonCallback	highgui.hpp	/^typedef void (*ButtonCallback)(int state, void* userdata);$/;"	t	namespace:cv
ByRef	ts/ts_gtest.h	/^struct ByRef { typedef const T& type; };  \/\/ NOLINT$/;"	s	namespace:std::tr1::gtest_internal
ByRef	ts/ts_gtest.h	/^struct ByRef<T&> { typedef T& type; };  \/\/ NOLINT$/;"	s	namespace:std::tr1::gtest_internal
C	ml.hpp	/^        C=0,$/;"	e	enum:cv::ml::SVM::ParamTypes
CALC_J	calib3d/calib3d_c.h	/^    enum { DONE=0, STARTED=1, CALC_J=2, CHECK_ERR=3 };$/;"	e	enum:CvLevMarq::__anon55
CALIB_CB_ADAPTIVE_THRESH	calib3d.hpp	/^enum { CALIB_CB_ADAPTIVE_THRESH = 1,$/;"	e	enum:cv::__anon45
CALIB_CB_ASYMMETRIC_GRID	calib3d.hpp	/^       CALIB_CB_ASYMMETRIC_GRID = 2,$/;"	e	enum:cv::__anon46
CALIB_CB_CLUSTERING	calib3d.hpp	/^       CALIB_CB_CLUSTERING      = 4$/;"	e	enum:cv::__anon46
CALIB_CB_FAST_CHECK	calib3d.hpp	/^       CALIB_CB_FAST_CHECK      = 8$/;"	e	enum:cv::__anon45
CALIB_CB_FILTER_QUADS	calib3d.hpp	/^       CALIB_CB_FILTER_QUADS    = 4,$/;"	e	enum:cv::__anon45
CALIB_CB_NORMALIZE_IMAGE	calib3d.hpp	/^       CALIB_CB_NORMALIZE_IMAGE = 2,$/;"	e	enum:cv::__anon45
CALIB_CB_SYMMETRIC_GRID	calib3d.hpp	/^enum { CALIB_CB_SYMMETRIC_GRID  = 1,$/;"	e	enum:cv::__anon46
CALIB_CHECK_COND	calib3d.hpp	/^        CALIB_CHECK_COND            = 4,$/;"	e	enum:cv::fisheye::__anon52
CALIB_FIX_ASPECT_RATIO	calib3d.hpp	/^       CALIB_FIX_ASPECT_RATIO    = 0x00002,$/;"	e	enum:cv::__anon47
CALIB_FIX_FOCAL_LENGTH	calib3d.hpp	/^       CALIB_FIX_FOCAL_LENGTH    = 0x00010,$/;"	e	enum:cv::__anon47
CALIB_FIX_INTRINSIC	calib3d.hpp	/^        CALIB_FIX_INTRINSIC         = 256$/;"	e	enum:cv::fisheye::__anon52
CALIB_FIX_INTRINSIC	calib3d.hpp	/^       CALIB_FIX_INTRINSIC       = 0x00100,$/;"	e	enum:cv::__anon47
CALIB_FIX_K1	calib3d.hpp	/^        CALIB_FIX_K1                = 16,$/;"	e	enum:cv::fisheye::__anon52
CALIB_FIX_K1	calib3d.hpp	/^       CALIB_FIX_K1              = 0x00020,$/;"	e	enum:cv::__anon47
CALIB_FIX_K2	calib3d.hpp	/^        CALIB_FIX_K2                = 32,$/;"	e	enum:cv::fisheye::__anon52
CALIB_FIX_K2	calib3d.hpp	/^       CALIB_FIX_K2              = 0x00040,$/;"	e	enum:cv::__anon47
CALIB_FIX_K3	calib3d.hpp	/^        CALIB_FIX_K3                = 64,$/;"	e	enum:cv::fisheye::__anon52
CALIB_FIX_K3	calib3d.hpp	/^       CALIB_FIX_K3              = 0x00080,$/;"	e	enum:cv::__anon47
CALIB_FIX_K4	calib3d.hpp	/^        CALIB_FIX_K4                = 128,$/;"	e	enum:cv::fisheye::__anon52
CALIB_FIX_K4	calib3d.hpp	/^       CALIB_FIX_K4              = 0x00800,$/;"	e	enum:cv::__anon47
CALIB_FIX_K5	calib3d.hpp	/^       CALIB_FIX_K5              = 0x01000,$/;"	e	enum:cv::__anon47
CALIB_FIX_K6	calib3d.hpp	/^       CALIB_FIX_K6              = 0x02000,$/;"	e	enum:cv::__anon47
CALIB_FIX_PRINCIPAL_POINT	calib3d.hpp	/^       CALIB_FIX_PRINCIPAL_POINT = 0x00004,$/;"	e	enum:cv::__anon47
CALIB_FIX_S1_S2_S3_S4	calib3d.hpp	/^       CALIB_FIX_S1_S2_S3_S4     = 0x10000,$/;"	e	enum:cv::__anon47
CALIB_FIX_SKEW	calib3d.hpp	/^        CALIB_FIX_SKEW              = 8,$/;"	e	enum:cv::fisheye::__anon52
CALIB_RATIONAL_MODEL	calib3d.hpp	/^       CALIB_RATIONAL_MODEL      = 0x04000,$/;"	e	enum:cv::__anon47
CALIB_RECOMPUTE_EXTRINSIC	calib3d.hpp	/^        CALIB_RECOMPUTE_EXTRINSIC   = 2,$/;"	e	enum:cv::fisheye::__anon52
CALIB_SAME_FOCAL_LENGTH	calib3d.hpp	/^       CALIB_SAME_FOCAL_LENGTH   = 0x00200,$/;"	e	enum:cv::__anon47
CALIB_THIN_PRISM_MODEL	calib3d.hpp	/^       CALIB_THIN_PRISM_MODEL    = 0x08000,$/;"	e	enum:cv::__anon47
CALIB_USE_INTRINSIC_GUESS	calib3d.hpp	/^        CALIB_USE_INTRINSIC_GUESS   = 1,$/;"	e	enum:cv::fisheye::__anon52
CALIB_USE_INTRINSIC_GUESS	calib3d.hpp	/^enum { CALIB_USE_INTRINSIC_GUESS = 0x00001,$/;"	e	enum:cv::__anon47
CALIB_ZERO_DISPARITY	calib3d.hpp	/^       CALIB_ZERO_DISPARITY      = 0x00400$/;"	e	enum:cv::__anon47
CALIB_ZERO_TANGENT_DIST	calib3d.hpp	/^       CALIB_ZERO_TANGENT_DIST   = 0x00008,$/;"	e	enum:cv::__anon47
CAP_ANDROID	videoio.hpp	/^       CAP_ANDROID      = 1000,  \/\/ Android - not used$/;"	e	enum:cv::__anon420
CAP_ANY	videoio.hpp	/^enum { CAP_ANY          = 0,     \/\/ autodetect$/;"	e	enum:cv::__anon420
CAP_AVFOUNDATION	videoio.hpp	/^       CAP_AVFOUNDATION = 1200,  \/\/ AVFoundation framework for iOS (OS X Lion will have the same API)$/;"	e	enum:cv::__anon420
CAP_CMU1394	videoio.hpp	/^       CAP_CMU1394      = CAP_FIREWARE,$/;"	e	enum:cv::__anon420
CAP_DC1394	videoio.hpp	/^       CAP_DC1394       = CAP_FIREWARE,$/;"	e	enum:cv::__anon420
CAP_DSHOW	videoio.hpp	/^       CAP_DSHOW        = 700,   \/\/ DirectShow (via videoInput)$/;"	e	enum:cv::__anon420
CAP_FIREWARE	videoio.hpp	/^       CAP_FIREWARE     = 300,   \/\/ IEEE 1394 drivers$/;"	e	enum:cv::__anon420
CAP_FIREWIRE	videoio.hpp	/^       CAP_FIREWIRE     = CAP_FIREWARE,$/;"	e	enum:cv::__anon420
CAP_GIGANETIX	videoio.hpp	/^       CAP_GIGANETIX    = 1300,  \/\/ Smartek Giganetix GigEVisionSDK$/;"	e	enum:cv::__anon420
CAP_GPHOTO2	videoio.hpp	/^       CAP_GPHOTO2      = 1700   \/\/ gPhoto2 connection$/;"	e	enum:cv::__anon420
CAP_IEEE1394	videoio.hpp	/^       CAP_IEEE1394     = CAP_FIREWARE,$/;"	e	enum:cv::__anon420
CAP_INTELPERC	videoio.hpp	/^       CAP_INTELPERC    = 1500,  \/\/ Intel Perceptual Computing SDK$/;"	e	enum:cv::__anon420
CAP_INTELPERC_DEPTH_GENERATOR	videoio.hpp	/^enum { CAP_INTELPERC_DEPTH_GENERATOR = 1 << 29,$/;"	e	enum:cv::__anon438
CAP_INTELPERC_DEPTH_MAP	videoio.hpp	/^enum { CAP_INTELPERC_DEPTH_MAP              = 0, \/\/ Each pixel is a 16-bit integer. The value indicates the distance from an object to the camera's XY plane or the Cartesian depth.$/;"	e	enum:cv::__anon439
CAP_INTELPERC_GENERATORS_MASK	videoio.hpp	/^       CAP_INTELPERC_GENERATORS_MASK = CAP_INTELPERC_DEPTH_GENERATOR + CAP_INTELPERC_IMAGE_GENERATOR$/;"	e	enum:cv::__anon438
CAP_INTELPERC_IMAGE	videoio.hpp	/^       CAP_INTELPERC_IMAGE                  = 3$/;"	e	enum:cv::__anon439
CAP_INTELPERC_IMAGE_GENERATOR	videoio.hpp	/^       CAP_INTELPERC_IMAGE_GENERATOR = 1 << 28,$/;"	e	enum:cv::__anon438
CAP_INTELPERC_IR_MAP	videoio.hpp	/^       CAP_INTELPERC_IR_MAP                 = 2, \/\/ Each pixel is a 16-bit integer. The value indicates the intensity of the reflected laser beam.$/;"	e	enum:cv::__anon439
CAP_INTELPERC_UVDEPTH_MAP	videoio.hpp	/^       CAP_INTELPERC_UVDEPTH_MAP            = 1, \/\/ Each pixel contains two 32-bit floating point values in the range of 0-1, representing the mapping of depth coordinates to the color coordinates.$/;"	e	enum:cv::__anon439
CAP_MODE_BGR	videoio.hpp	/^enum { CAP_MODE_BGR  = 0, \/\/ BGR24 (default)$/;"	e	enum:cv::__anon422
CAP_MODE_GRAY	videoio.hpp	/^       CAP_MODE_GRAY = 2, \/\/ Y8$/;"	e	enum:cv::__anon422
CAP_MODE_RGB	videoio.hpp	/^       CAP_MODE_RGB  = 1, \/\/ RGB24$/;"	e	enum:cv::__anon422
CAP_MODE_YUYV	videoio.hpp	/^       CAP_MODE_YUYV = 3  \/\/ YUYV$/;"	e	enum:cv::__anon422
CAP_MSMF	videoio.hpp	/^       CAP_MSMF         = 1400,  \/\/ Microsoft Media Foundation (via videoInput)$/;"	e	enum:cv::__anon420
CAP_OPENNI	videoio.hpp	/^       CAP_OPENNI       = 900,   \/\/ OpenNI (for Kinect)$/;"	e	enum:cv::__anon420
CAP_OPENNI2	videoio.hpp	/^       CAP_OPENNI2      = 1600,  \/\/ OpenNI2 (for Kinect)$/;"	e	enum:cv::__anon420
CAP_OPENNI2_ASUS	videoio.hpp	/^       CAP_OPENNI2_ASUS = 1610,  \/\/ OpenNI2 (for Asus Xtion and Occipital Structure sensors)$/;"	e	enum:cv::__anon420
CAP_OPENNI_ASUS	videoio.hpp	/^       CAP_OPENNI_ASUS  = 910,   \/\/ OpenNI (for Asus Xtion)$/;"	e	enum:cv::__anon420
CAP_OPENNI_BGR_IMAGE	videoio.hpp	/^       CAP_OPENNI_BGR_IMAGE         = 5,$/;"	e	enum:cv::__anon427
CAP_OPENNI_DEPTH_GENERATOR	videoio.hpp	/^enum { CAP_OPENNI_DEPTH_GENERATOR = 1 << 31,$/;"	e	enum:cv::__anon424
CAP_OPENNI_DEPTH_GENERATOR_BASELINE	videoio.hpp	/^       CAP_OPENNI_DEPTH_GENERATOR_BASELINE        = CAP_OPENNI_DEPTH_GENERATOR + CAP_PROP_OPENNI_BASELINE,$/;"	e	enum:cv::__anon426
CAP_OPENNI_DEPTH_GENERATOR_FOCAL_LENGTH	videoio.hpp	/^       CAP_OPENNI_DEPTH_GENERATOR_FOCAL_LENGTH    = CAP_OPENNI_DEPTH_GENERATOR + CAP_PROP_OPENNI_FOCAL_LENGTH,$/;"	e	enum:cv::__anon426
CAP_OPENNI_DEPTH_GENERATOR_REGISTRATION	videoio.hpp	/^       CAP_OPENNI_DEPTH_GENERATOR_REGISTRATION    = CAP_OPENNI_DEPTH_GENERATOR + CAP_PROP_OPENNI_REGISTRATION,$/;"	e	enum:cv::__anon426
CAP_OPENNI_DEPTH_GENERATOR_REGISTRATION_ON	videoio.hpp	/^       CAP_OPENNI_DEPTH_GENERATOR_REGISTRATION_ON = CAP_OPENNI_DEPTH_GENERATOR_REGISTRATION$/;"	e	enum:cv::__anon426
CAP_OPENNI_DEPTH_MAP	videoio.hpp	/^enum { CAP_OPENNI_DEPTH_MAP         = 0, \/\/ Depth values in mm (CV_16UC1)$/;"	e	enum:cv::__anon427
CAP_OPENNI_DISPARITY_MAP	videoio.hpp	/^       CAP_OPENNI_DISPARITY_MAP     = 2, \/\/ Disparity in pixels (CV_8UC1)$/;"	e	enum:cv::__anon427
CAP_OPENNI_DISPARITY_MAP_32F	videoio.hpp	/^       CAP_OPENNI_DISPARITY_MAP_32F = 3, \/\/ Disparity in pixels (CV_32FC1)$/;"	e	enum:cv::__anon427
CAP_OPENNI_GENERATORS_MASK	videoio.hpp	/^       CAP_OPENNI_GENERATORS_MASK = CAP_OPENNI_DEPTH_GENERATOR + CAP_OPENNI_IMAGE_GENERATOR$/;"	e	enum:cv::__anon424
CAP_OPENNI_GRAY_IMAGE	videoio.hpp	/^       CAP_OPENNI_GRAY_IMAGE        = 6$/;"	e	enum:cv::__anon427
CAP_OPENNI_IMAGE_GENERATOR	videoio.hpp	/^       CAP_OPENNI_IMAGE_GENERATOR = 1 << 30,$/;"	e	enum:cv::__anon424
CAP_OPENNI_IMAGE_GENERATOR_OUTPUT_MODE	videoio.hpp	/^       CAP_OPENNI_IMAGE_GENERATOR_OUTPUT_MODE     = CAP_OPENNI_IMAGE_GENERATOR + CAP_PROP_OPENNI_OUTPUT_MODE,$/;"	e	enum:cv::__anon426
CAP_OPENNI_IMAGE_GENERATOR_PRESENT	videoio.hpp	/^enum { CAP_OPENNI_IMAGE_GENERATOR_PRESENT         = CAP_OPENNI_IMAGE_GENERATOR + CAP_PROP_OPENNI_GENERATOR_PRESENT,$/;"	e	enum:cv::__anon426
CAP_OPENNI_POINT_CLOUD_MAP	videoio.hpp	/^       CAP_OPENNI_POINT_CLOUD_MAP   = 1, \/\/ XYZ in meters (CV_32FC3)$/;"	e	enum:cv::__anon427
CAP_OPENNI_QVGA_30HZ	videoio.hpp	/^       CAP_OPENNI_QVGA_30HZ = 3,$/;"	e	enum:cv::__anon428
CAP_OPENNI_QVGA_60HZ	videoio.hpp	/^       CAP_OPENNI_QVGA_60HZ = 4$/;"	e	enum:cv::__anon428
CAP_OPENNI_SXGA_15HZ	videoio.hpp	/^       CAP_OPENNI_SXGA_15HZ = 1,$/;"	e	enum:cv::__anon428
CAP_OPENNI_SXGA_30HZ	videoio.hpp	/^       CAP_OPENNI_SXGA_30HZ = 2,$/;"	e	enum:cv::__anon428
CAP_OPENNI_VALID_DEPTH_MASK	videoio.hpp	/^       CAP_OPENNI_VALID_DEPTH_MASK  = 4, \/\/ CV_8UC1$/;"	e	enum:cv::__anon427
CAP_OPENNI_VGA_30HZ	videoio.hpp	/^enum { CAP_OPENNI_VGA_30HZ  = 0,$/;"	e	enum:cv::__anon428
CAP_PROP_APERTURE	videoio.hpp	/^       CAP_PROP_APERTURE                  = 17008, \/\/ Aperture. Can be readonly, depends on camera program.$/;"	e	enum:cv::__anon441
CAP_PROP_AUTO_EXPOSURE	videoio.hpp	/^       CAP_PROP_AUTO_EXPOSURE =21, \/\/ DC1394: exposure control done by camera, user can adjust refernce level using this feature$/;"	e	enum:cv::__anon421
CAP_PROP_BACKLIGHT	videoio.hpp	/^       CAP_PROP_BACKLIGHT     =32,$/;"	e	enum:cv::__anon421
CAP_PROP_BRIGHTNESS	videoio.hpp	/^       CAP_PROP_BRIGHTNESS    =10,$/;"	e	enum:cv::__anon421
CAP_PROP_CONTRAST	videoio.hpp	/^       CAP_PROP_CONTRAST      =11,$/;"	e	enum:cv::__anon421
CAP_PROP_CONVERT_RGB	videoio.hpp	/^       CAP_PROP_CONVERT_RGB   =16,$/;"	e	enum:cv::__anon421
CAP_PROP_DC1394_MAX	videoio.hpp	/^       CAP_PROP_DC1394_MAX                = 31$/;"	e	enum:cv::__anon423
CAP_PROP_DC1394_MODE_AUTO	videoio.hpp	/^       CAP_PROP_DC1394_MODE_AUTO          = -2,$/;"	e	enum:cv::__anon423
CAP_PROP_DC1394_MODE_MANUAL	videoio.hpp	/^       CAP_PROP_DC1394_MODE_MANUAL        = -3, \/\/set automatically when a value of the feature is set by the user$/;"	e	enum:cv::__anon423
CAP_PROP_DC1394_MODE_ONE_PUSH_AUTO	videoio.hpp	/^       CAP_PROP_DC1394_MODE_ONE_PUSH_AUTO = -1,$/;"	e	enum:cv::__anon423
CAP_PROP_DC1394_OFF	videoio.hpp	/^enum { CAP_PROP_DC1394_OFF                = -4, \/\/turn the feature off (not controlled manually nor automatically)$/;"	e	enum:cv::__anon423
CAP_PROP_EXPOSURE	videoio.hpp	/^       CAP_PROP_EXPOSURE      =15,$/;"	e	enum:cv::__anon421
CAP_PROP_EXPOSUREPROGRAM	videoio.hpp	/^       CAP_PROP_EXPOSUREPROGRAM           = 17009, \/\/ Camera exposure program.$/;"	e	enum:cv::__anon441
CAP_PROP_FOCUS	videoio.hpp	/^       CAP_PROP_FOCUS         =28,$/;"	e	enum:cv::__anon421
CAP_PROP_FORMAT	videoio.hpp	/^       CAP_PROP_FORMAT         =8,$/;"	e	enum:cv::__anon421
CAP_PROP_FOURCC	videoio.hpp	/^       CAP_PROP_FOURCC         =6,$/;"	e	enum:cv::__anon421
CAP_PROP_FPS	videoio.hpp	/^       CAP_PROP_FPS            =5,$/;"	e	enum:cv::__anon421
CAP_PROP_FRAME_COUNT	videoio.hpp	/^       CAP_PROP_FRAME_COUNT    =7,$/;"	e	enum:cv::__anon421
CAP_PROP_FRAME_HEIGHT	videoio.hpp	/^       CAP_PROP_FRAME_HEIGHT   =4,$/;"	e	enum:cv::__anon421
CAP_PROP_FRAME_WIDTH	videoio.hpp	/^       CAP_PROP_FRAME_WIDTH    =3,$/;"	e	enum:cv::__anon421
CAP_PROP_GAIN	videoio.hpp	/^       CAP_PROP_GAIN          =14,$/;"	e	enum:cv::__anon421
CAP_PROP_GAMMA	videoio.hpp	/^       CAP_PROP_GAMMA         =22,$/;"	e	enum:cv::__anon421
CAP_PROP_GIGA_FRAME_HEIGH_MAX	videoio.hpp	/^       CAP_PROP_GIGA_FRAME_HEIGH_MAX  = 10004,$/;"	e	enum:cv::__anon436
CAP_PROP_GIGA_FRAME_OFFSET_X	videoio.hpp	/^enum { CAP_PROP_GIGA_FRAME_OFFSET_X   = 10001,$/;"	e	enum:cv::__anon436
CAP_PROP_GIGA_FRAME_OFFSET_Y	videoio.hpp	/^       CAP_PROP_GIGA_FRAME_OFFSET_Y   = 10002,$/;"	e	enum:cv::__anon436
CAP_PROP_GIGA_FRAME_SENS_HEIGH	videoio.hpp	/^       CAP_PROP_GIGA_FRAME_SENS_HEIGH = 10006$/;"	e	enum:cv::__anon436
CAP_PROP_GIGA_FRAME_SENS_WIDTH	videoio.hpp	/^       CAP_PROP_GIGA_FRAME_SENS_WIDTH = 10005,$/;"	e	enum:cv::__anon436
CAP_PROP_GIGA_FRAME_WIDTH_MAX	videoio.hpp	/^       CAP_PROP_GIGA_FRAME_WIDTH_MAX  = 10003,$/;"	e	enum:cv::__anon436
CAP_PROP_GPHOTO2_COLLECT_MSGS	videoio.hpp	/^       CAP_PROP_GPHOTO2_COLLECT_MSGS      = 17005, \/\/ Collect messages with details.$/;"	e	enum:cv::__anon441
CAP_PROP_GPHOTO2_FLUSH_MSGS	videoio.hpp	/^       CAP_PROP_GPHOTO2_FLUSH_MSGS        = 17006, \/\/ Readonly, returns (const char *).$/;"	e	enum:cv::__anon441
CAP_PROP_GPHOTO2_PREVIEW	videoio.hpp	/^enum { CAP_PROP_GPHOTO2_PREVIEW           = 17001, \/\/ Capture only preview from liveview mode.$/;"	e	enum:cv::__anon441
CAP_PROP_GPHOTO2_RELOAD_CONFIG	videoio.hpp	/^       CAP_PROP_GPHOTO2_RELOAD_CONFIG     = 17003, \/\/ Trigger, only by set. Reload camera settings.$/;"	e	enum:cv::__anon441
CAP_PROP_GPHOTO2_RELOAD_ON_CHANGE	videoio.hpp	/^       CAP_PROP_GPHOTO2_RELOAD_ON_CHANGE  = 17004, \/\/ Reload all settings on set.$/;"	e	enum:cv::__anon441
CAP_PROP_GPHOTO2_WIDGET_ENUMERATE	videoio.hpp	/^       CAP_PROP_GPHOTO2_WIDGET_ENUMERATE  = 17002, \/\/ Readonly, returns (const char *).$/;"	e	enum:cv::__anon441
CAP_PROP_GSTREAMER_QUEUE_LENGTH	videoio.hpp	/^enum { CAP_PROP_GSTREAMER_QUEUE_LENGTH = 200 \/\/ default is 1$/;"	e	enum:cv::__anon429
CAP_PROP_GUID	videoio.hpp	/^       CAP_PROP_GUID          =29,$/;"	e	enum:cv::__anon421
CAP_PROP_HUE	videoio.hpp	/^       CAP_PROP_HUE           =13,$/;"	e	enum:cv::__anon421
CAP_PROP_INTELPERC_DEPTH_CONFIDENCE_THRESHOLD	videoio.hpp	/^       CAP_PROP_INTELPERC_DEPTH_CONFIDENCE_THRESHOLD  = 11005,$/;"	e	enum:cv::__anon437
CAP_PROP_INTELPERC_DEPTH_FOCAL_LENGTH_HORZ	videoio.hpp	/^       CAP_PROP_INTELPERC_DEPTH_FOCAL_LENGTH_HORZ     = 11006,$/;"	e	enum:cv::__anon437
CAP_PROP_INTELPERC_DEPTH_FOCAL_LENGTH_VERT	videoio.hpp	/^       CAP_PROP_INTELPERC_DEPTH_FOCAL_LENGTH_VERT     = 11007$/;"	e	enum:cv::__anon437
CAP_PROP_INTELPERC_DEPTH_LOW_CONFIDENCE_VALUE	videoio.hpp	/^       CAP_PROP_INTELPERC_DEPTH_LOW_CONFIDENCE_VALUE  = 11003,$/;"	e	enum:cv::__anon437
CAP_PROP_INTELPERC_DEPTH_SATURATION_VALUE	videoio.hpp	/^       CAP_PROP_INTELPERC_DEPTH_SATURATION_VALUE      = 11004,$/;"	e	enum:cv::__anon437
CAP_PROP_INTELPERC_PROFILE_COUNT	videoio.hpp	/^enum { CAP_PROP_INTELPERC_PROFILE_COUNT               = 11001,$/;"	e	enum:cv::__anon437
CAP_PROP_INTELPERC_PROFILE_IDX	videoio.hpp	/^       CAP_PROP_INTELPERC_PROFILE_IDX                 = 11002,$/;"	e	enum:cv::__anon437
CAP_PROP_IOS_DEVICE_EXPOSURE	videoio.hpp	/^       CAP_PROP_IOS_DEVICE_EXPOSURE     = 9002,$/;"	e	enum:cv::__anon435
CAP_PROP_IOS_DEVICE_FLASH	videoio.hpp	/^       CAP_PROP_IOS_DEVICE_FLASH        = 9003,$/;"	e	enum:cv::__anon435
CAP_PROP_IOS_DEVICE_FOCUS	videoio.hpp	/^enum { CAP_PROP_IOS_DEVICE_FOCUS        = 9001,$/;"	e	enum:cv::__anon435
CAP_PROP_IOS_DEVICE_TORCH	videoio.hpp	/^       CAP_PROP_IOS_DEVICE_TORCH        = 9005$/;"	e	enum:cv::__anon435
CAP_PROP_IOS_DEVICE_WHITEBALANCE	videoio.hpp	/^       CAP_PROP_IOS_DEVICE_WHITEBALANCE = 9004,$/;"	e	enum:cv::__anon435
CAP_PROP_IRIS	videoio.hpp	/^       CAP_PROP_IRIS          =36,$/;"	e	enum:cv::__anon421
CAP_PROP_ISO_SPEED	videoio.hpp	/^       CAP_PROP_ISO_SPEED     =30,$/;"	e	enum:cv::__anon421
CAP_PROP_MODE	videoio.hpp	/^       CAP_PROP_MODE           =9,$/;"	e	enum:cv::__anon421
CAP_PROP_MONOCHROME	videoio.hpp	/^       CAP_PROP_MONOCHROME    =19,$/;"	e	enum:cv::__anon421
CAP_PROP_OPENNI2_MIRROR	videoio.hpp	/^       CAP_PROP_OPENNI2_MIRROR           = 111$/;"	e	enum:cv::__anon425
CAP_PROP_OPENNI2_SYNC	videoio.hpp	/^       CAP_PROP_OPENNI2_SYNC             = 110,$/;"	e	enum:cv::__anon425
CAP_PROP_OPENNI_APPROX_FRAME_SYNC	videoio.hpp	/^       CAP_PROP_OPENNI_APPROX_FRAME_SYNC = 105,$/;"	e	enum:cv::__anon425
CAP_PROP_OPENNI_BASELINE	videoio.hpp	/^       CAP_PROP_OPENNI_BASELINE          = 102, \/\/ in mm$/;"	e	enum:cv::__anon425
CAP_PROP_OPENNI_CIRCLE_BUFFER	videoio.hpp	/^       CAP_PROP_OPENNI_CIRCLE_BUFFER     = 107,$/;"	e	enum:cv::__anon425
CAP_PROP_OPENNI_FOCAL_LENGTH	videoio.hpp	/^       CAP_PROP_OPENNI_FOCAL_LENGTH      = 103, \/\/ in pixels$/;"	e	enum:cv::__anon425
CAP_PROP_OPENNI_FRAME_MAX_DEPTH	videoio.hpp	/^       CAP_PROP_OPENNI_FRAME_MAX_DEPTH   = 101, \/\/ in mm$/;"	e	enum:cv::__anon425
CAP_PROP_OPENNI_GENERATOR_PRESENT	videoio.hpp	/^       CAP_PROP_OPENNI_GENERATOR_PRESENT = 109,$/;"	e	enum:cv::__anon425
CAP_PROP_OPENNI_MAX_BUFFER_SIZE	videoio.hpp	/^       CAP_PROP_OPENNI_MAX_BUFFER_SIZE   = 106,$/;"	e	enum:cv::__anon425
CAP_PROP_OPENNI_MAX_TIME_DURATION	videoio.hpp	/^       CAP_PROP_OPENNI_MAX_TIME_DURATION = 108,$/;"	e	enum:cv::__anon425
CAP_PROP_OPENNI_OUTPUT_MODE	videoio.hpp	/^enum { CAP_PROP_OPENNI_OUTPUT_MODE       = 100,$/;"	e	enum:cv::__anon425
CAP_PROP_OPENNI_REGISTRATION	videoio.hpp	/^       CAP_PROP_OPENNI_REGISTRATION      = 104, \/\/ flag that synchronizes the remapping depth map to image map$/;"	e	enum:cv::__anon425
CAP_PROP_OPENNI_REGISTRATION_ON	videoio.hpp	/^       CAP_PROP_OPENNI_REGISTRATION_ON   = CAP_PROP_OPENNI_REGISTRATION,$/;"	e	enum:cv::__anon425
CAP_PROP_PAN	videoio.hpp	/^       CAP_PROP_PAN           =33,$/;"	e	enum:cv::__anon421
CAP_PROP_POS_AVI_RATIO	videoio.hpp	/^       CAP_PROP_POS_AVI_RATIO  =2,$/;"	e	enum:cv::__anon421
CAP_PROP_POS_FRAMES	videoio.hpp	/^       CAP_PROP_POS_FRAMES     =1,$/;"	e	enum:cv::__anon421
CAP_PROP_POS_MSEC	videoio.hpp	/^enum { CAP_PROP_POS_MSEC       =0,$/;"	e	enum:cv::__anon421
CAP_PROP_PVAPI_BINNINGX	videoio.hpp	/^       CAP_PROP_PVAPI_BINNINGX              = 304, \/\/ Horizontal binning factor$/;"	e	enum:cv::__anon430
CAP_PROP_PVAPI_BINNINGY	videoio.hpp	/^       CAP_PROP_PVAPI_BINNINGY              = 305, \/\/ Vertical binning factor$/;"	e	enum:cv::__anon430
CAP_PROP_PVAPI_DECIMATIONHORIZONTAL	videoio.hpp	/^       CAP_PROP_PVAPI_DECIMATIONHORIZONTAL  = 302, \/\/ Horizontal sub-sampling of the image$/;"	e	enum:cv::__anon430
CAP_PROP_PVAPI_DECIMATIONVERTICAL	videoio.hpp	/^       CAP_PROP_PVAPI_DECIMATIONVERTICAL    = 303, \/\/ Vertical sub-sampling of the image$/;"	e	enum:cv::__anon430
CAP_PROP_PVAPI_FRAMESTARTTRIGGERMODE	videoio.hpp	/^       CAP_PROP_PVAPI_FRAMESTARTTRIGGERMODE = 301, \/\/ FrameStartTriggerMode: Determines how a frame is initiated$/;"	e	enum:cv::__anon430
CAP_PROP_PVAPI_MULTICASTIP	videoio.hpp	/^enum { CAP_PROP_PVAPI_MULTICASTIP           = 300, \/\/ ip for anable multicast master mode. 0 for disable multicast$/;"	e	enum:cv::__anon430
CAP_PROP_PVAPI_PIXELFORMAT	videoio.hpp	/^       CAP_PROP_PVAPI_PIXELFORMAT           = 306  \/\/ Pixel format$/;"	e	enum:cv::__anon430
CAP_PROP_RECTIFICATION	videoio.hpp	/^       CAP_PROP_RECTIFICATION =18,$/;"	e	enum:cv::__anon421
CAP_PROP_ROLL	videoio.hpp	/^       CAP_PROP_ROLL          =35,$/;"	e	enum:cv::__anon421
CAP_PROP_SATURATION	videoio.hpp	/^       CAP_PROP_SATURATION    =12,$/;"	e	enum:cv::__anon421
CAP_PROP_SETTINGS	videoio.hpp	/^       CAP_PROP_SETTINGS      =37$/;"	e	enum:cv::__anon421
CAP_PROP_SHARPNESS	videoio.hpp	/^       CAP_PROP_SHARPNESS     =20,$/;"	e	enum:cv::__anon421
CAP_PROP_SPEED	videoio.hpp	/^       CAP_PROP_SPEED                     = 17007, \/\/ Exposure speed. Can be readonly, depends on camera program.$/;"	e	enum:cv::__anon441
CAP_PROP_TEMPERATURE	videoio.hpp	/^       CAP_PROP_TEMPERATURE   =23,$/;"	e	enum:cv::__anon421
CAP_PROP_TILT	videoio.hpp	/^       CAP_PROP_TILT          =34,$/;"	e	enum:cv::__anon421
CAP_PROP_TRIGGER	videoio.hpp	/^       CAP_PROP_TRIGGER       =24,$/;"	e	enum:cv::__anon421
CAP_PROP_TRIGGER_DELAY	videoio.hpp	/^       CAP_PROP_TRIGGER_DELAY =25,$/;"	e	enum:cv::__anon421
CAP_PROP_VIEWFINDER	videoio.hpp	/^       CAP_PROP_VIEWFINDER                = 17010  \/\/ Enter liveview mode.$/;"	e	enum:cv::__anon441
CAP_PROP_WHITE_BALANCE_BLUE_U	videoio.hpp	/^       CAP_PROP_WHITE_BALANCE_BLUE_U =17,$/;"	e	enum:cv::__anon421
CAP_PROP_WHITE_BALANCE_RED_V	videoio.hpp	/^       CAP_PROP_WHITE_BALANCE_RED_V =26,$/;"	e	enum:cv::__anon421
CAP_PROP_XI_AEAG	videoio.hpp	/^       CAP_PROP_XI_AEAG          = 415, \/\/ Automatic exposure\/gain$/;"	e	enum:cv::__anon434
CAP_PROP_XI_AEAG_LEVEL	videoio.hpp	/^       CAP_PROP_XI_AEAG_LEVEL    = 419, \/\/ Average intensity of output signal AEAG should achieve(in %)$/;"	e	enum:cv::__anon434
CAP_PROP_XI_AE_MAX_LIMIT	videoio.hpp	/^       CAP_PROP_XI_AE_MAX_LIMIT  = 417, \/\/ Maximum limit of exposure in AEAG procedure$/;"	e	enum:cv::__anon434
CAP_PROP_XI_AG_MAX_LIMIT	videoio.hpp	/^       CAP_PROP_XI_AG_MAX_LIMIT  = 418, \/\/ Maximum limit of gain in AEAG procedure$/;"	e	enum:cv::__anon434
CAP_PROP_XI_AUTO_WB	videoio.hpp	/^       CAP_PROP_XI_AUTO_WB       = 414, \/\/ Automatic white balance$/;"	e	enum:cv::__anon434
CAP_PROP_XI_DATA_FORMAT	videoio.hpp	/^       CAP_PROP_XI_DATA_FORMAT   = 401, \/\/ Output data format.$/;"	e	enum:cv::__anon434
CAP_PROP_XI_DOWNSAMPLING	videoio.hpp	/^enum { CAP_PROP_XI_DOWNSAMPLING  = 400, \/\/ Change image resolution by binning or skipping.$/;"	e	enum:cv::__anon434
CAP_PROP_XI_EXP_PRIORITY	videoio.hpp	/^       CAP_PROP_XI_EXP_PRIORITY  = 416, \/\/ Exposure priority (0.5 - exposure 50%, gain 50%).$/;"	e	enum:cv::__anon434
CAP_PROP_XI_GPI_LEVEL	videoio.hpp	/^       CAP_PROP_XI_GPI_LEVEL     = 408, \/\/ Get general purpose level$/;"	e	enum:cv::__anon434
CAP_PROP_XI_GPI_MODE	videoio.hpp	/^       CAP_PROP_XI_GPI_MODE      = 407, \/\/ Set general purpose input mode$/;"	e	enum:cv::__anon434
CAP_PROP_XI_GPI_SELECTOR	videoio.hpp	/^       CAP_PROP_XI_GPI_SELECTOR  = 406, \/\/ Selects general purpose input$/;"	e	enum:cv::__anon434
CAP_PROP_XI_GPO_MODE	videoio.hpp	/^       CAP_PROP_XI_GPO_MODE      = 410, \/\/ Set general purpose output mode$/;"	e	enum:cv::__anon434
CAP_PROP_XI_GPO_SELECTOR	videoio.hpp	/^       CAP_PROP_XI_GPO_SELECTOR  = 409, \/\/ Selects general purpose output$/;"	e	enum:cv::__anon434
CAP_PROP_XI_LED_MODE	videoio.hpp	/^       CAP_PROP_XI_LED_MODE      = 412, \/\/ Define camera signalling LED functionality$/;"	e	enum:cv::__anon434
CAP_PROP_XI_LED_SELECTOR	videoio.hpp	/^       CAP_PROP_XI_LED_SELECTOR  = 411, \/\/ Selects camera signalling LED$/;"	e	enum:cv::__anon434
CAP_PROP_XI_MANUAL_WB	videoio.hpp	/^       CAP_PROP_XI_MANUAL_WB     = 413, \/\/ Calculates White Balance(must be called during acquisition)$/;"	e	enum:cv::__anon434
CAP_PROP_XI_OFFSET_X	videoio.hpp	/^       CAP_PROP_XI_OFFSET_X      = 402, \/\/ Horizontal offset from the origin to the area of interest (in pixels).$/;"	e	enum:cv::__anon434
CAP_PROP_XI_OFFSET_Y	videoio.hpp	/^       CAP_PROP_XI_OFFSET_Y      = 403, \/\/ Vertical offset from the origin to the area of interest (in pixels).$/;"	e	enum:cv::__anon434
CAP_PROP_XI_TIMEOUT	videoio.hpp	/^       CAP_PROP_XI_TIMEOUT       = 420  \/\/ Image capture timeout in milliseconds$/;"	e	enum:cv::__anon434
CAP_PROP_XI_TRG_SOFTWARE	videoio.hpp	/^       CAP_PROP_XI_TRG_SOFTWARE  = 405, \/\/ Generates an internal trigger. PRM_TRG_SOURCE must be set to TRG_SOFTWARE.$/;"	e	enum:cv::__anon434
CAP_PROP_XI_TRG_SOURCE	videoio.hpp	/^       CAP_PROP_XI_TRG_SOURCE    = 404, \/\/ Defines source of trigger.$/;"	e	enum:cv::__anon434
CAP_PROP_ZOOM	videoio.hpp	/^       CAP_PROP_ZOOM          =27,$/;"	e	enum:cv::__anon421
CAP_PVAPI	videoio.hpp	/^       CAP_PVAPI        = 800,   \/\/ PvAPI, Prosilica GigE SDK$/;"	e	enum:cv::__anon420
CAP_PVAPI_DECIMATION_2OUTOF16	videoio.hpp	/^       CAP_PVAPI_DECIMATION_2OUTOF16  = 8     \/\/ 2 out of 16 decimation$/;"	e	enum:cv::__anon432
CAP_PVAPI_DECIMATION_2OUTOF4	videoio.hpp	/^       CAP_PVAPI_DECIMATION_2OUTOF4   = 2,    \/\/ 2 out of 4 decimation$/;"	e	enum:cv::__anon432
CAP_PVAPI_DECIMATION_2OUTOF8	videoio.hpp	/^       CAP_PVAPI_DECIMATION_2OUTOF8   = 4,    \/\/ 2 out of 8 decimation$/;"	e	enum:cv::__anon432
CAP_PVAPI_DECIMATION_OFF	videoio.hpp	/^enum { CAP_PVAPI_DECIMATION_OFF       = 1,    \/\/ Off$/;"	e	enum:cv::__anon432
CAP_PVAPI_FSTRIGMODE_FIXEDRATE	videoio.hpp	/^       CAP_PVAPI_FSTRIGMODE_FIXEDRATE   = 3,    \/\/ FixedRate$/;"	e	enum:cv::__anon431
CAP_PVAPI_FSTRIGMODE_FREERUN	videoio.hpp	/^enum { CAP_PVAPI_FSTRIGMODE_FREERUN     = 0,    \/\/ Freerun$/;"	e	enum:cv::__anon431
CAP_PVAPI_FSTRIGMODE_SOFTWARE	videoio.hpp	/^       CAP_PVAPI_FSTRIGMODE_SOFTWARE    = 4     \/\/ Software$/;"	e	enum:cv::__anon431
CAP_PVAPI_FSTRIGMODE_SYNCIN1	videoio.hpp	/^       CAP_PVAPI_FSTRIGMODE_SYNCIN1     = 1,    \/\/ SyncIn1$/;"	e	enum:cv::__anon431
CAP_PVAPI_FSTRIGMODE_SYNCIN2	videoio.hpp	/^       CAP_PVAPI_FSTRIGMODE_SYNCIN2     = 2,    \/\/ SyncIn2$/;"	e	enum:cv::__anon431
CAP_PVAPI_PIXELFORMAT_BAYER16	videoio.hpp	/^       CAP_PVAPI_PIXELFORMAT_BAYER16  = 4,    \/\/ Bayer16$/;"	e	enum:cv::__anon433
CAP_PVAPI_PIXELFORMAT_BAYER8	videoio.hpp	/^       CAP_PVAPI_PIXELFORMAT_BAYER8   = 3,    \/\/ Bayer8$/;"	e	enum:cv::__anon433
CAP_PVAPI_PIXELFORMAT_BGR24	videoio.hpp	/^       CAP_PVAPI_PIXELFORMAT_BGR24    = 6,    \/\/ Bgr24$/;"	e	enum:cv::__anon433
CAP_PVAPI_PIXELFORMAT_BGRA32	videoio.hpp	/^       CAP_PVAPI_PIXELFORMAT_BGRA32   = 8,    \/\/ Bgra32$/;"	e	enum:cv::__anon433
CAP_PVAPI_PIXELFORMAT_MONO16	videoio.hpp	/^       CAP_PVAPI_PIXELFORMAT_MONO16   = 2,    \/\/ Mono16$/;"	e	enum:cv::__anon433
CAP_PVAPI_PIXELFORMAT_MONO8	videoio.hpp	/^enum { CAP_PVAPI_PIXELFORMAT_MONO8    = 1,    \/\/ Mono8$/;"	e	enum:cv::__anon433
CAP_PVAPI_PIXELFORMAT_RGB24	videoio.hpp	/^       CAP_PVAPI_PIXELFORMAT_RGB24    = 5,    \/\/ Rgb24$/;"	e	enum:cv::__anon433
CAP_PVAPI_PIXELFORMAT_RGBA32	videoio.hpp	/^       CAP_PVAPI_PIXELFORMAT_RGBA32   = 7,    \/\/ Rgba32$/;"	e	enum:cv::__anon433
CAP_QT	videoio.hpp	/^       CAP_QT           = 500,   \/\/ QuickTime$/;"	e	enum:cv::__anon420
CAP_UNICAP	videoio.hpp	/^       CAP_UNICAP       = 600,   \/\/ Unicap drivers$/;"	e	enum:cv::__anon420
CAP_V4L	videoio.hpp	/^       CAP_V4L          = 200,$/;"	e	enum:cv::__anon420
CAP_V4L2	videoio.hpp	/^       CAP_V4L2         = CAP_V4L,$/;"	e	enum:cv::__anon420
CAP_VFW	videoio.hpp	/^       CAP_VFW          = 200,   \/\/ platform native$/;"	e	enum:cv::__anon420
CAP_WINRT	videoio.hpp	/^       CAP_WINRT        = 1410,  \/\/ Microsoft Windows Runtime using Media Foundation$/;"	e	enum:cv::__anon420
CAP_XIAPI	videoio.hpp	/^       CAP_XIAPI        = 1100,  \/\/ XIMEA Camera API$/;"	e	enum:cv::__anon420
CASCADE_DO_CANNY_PRUNING	objdetect.hpp	/^enum { CASCADE_DO_CANNY_PRUNING    = 1,$/;"	e	enum:cv::__anon40
CASCADE_DO_ROUGH_SEARCH	objdetect.hpp	/^       CASCADE_DO_ROUGH_SEARCH     = 8$/;"	e	enum:cv::__anon40
CASCADE_FIND_BIGGEST_OBJECT	objdetect.hpp	/^       CASCADE_FIND_BIGGEST_OBJECT = 4,$/;"	e	enum:cv::__anon40
CASCADE_SCALE_IMAGE	objdetect.hpp	/^       CASCADE_SCALE_IMAGE         = 2,$/;"	e	enum:cv::__anon40
CC_STAT_AREA	imgproc.hpp	/^    CC_STAT_AREA   = 4, \/\/!< The total area (in pixels) of the connected component$/;"	e	enum:cv::ConnectedComponentsTypes
CC_STAT_HEIGHT	imgproc.hpp	/^    CC_STAT_HEIGHT = 3, \/\/!< The vertical size of the bounding box$/;"	e	enum:cv::ConnectedComponentsTypes
CC_STAT_LEFT	imgproc.hpp	/^    CC_STAT_LEFT   = 0, \/\/!< The leftmost (x) coordinate which is the inclusive start of the bounding$/;"	e	enum:cv::ConnectedComponentsTypes
CC_STAT_MAX	imgproc.hpp	/^    CC_STAT_MAX    = 5$/;"	e	enum:cv::ConnectedComponentsTypes
CC_STAT_TOP	imgproc.hpp	/^    CC_STAT_TOP    = 1, \/\/!< The topmost (y) coordinate which is the inclusive start of the bounding$/;"	e	enum:cv::ConnectedComponentsTypes
CC_STAT_WIDTH	imgproc.hpp	/^    CC_STAT_WIDTH  = 2, \/\/!< The horizontal size of the bounding box$/;"	e	enum:cv::ConnectedComponentsTypes
CENTERS_GONZALES	flann/defines.h	/^    CENTERS_GONZALES = 1,$/;"	e	enum:cvflann::flann_centers_init_t
CENTERS_KMEANSPP	flann/defines.h	/^    CENTERS_KMEANSPP = 2$/;"	e	enum:cvflann::flann_centers_init_t
CENTERS_RANDOM	flann/defines.h	/^    CENTERS_RANDOM = 0,$/;"	e	enum:cvflann::flann_centers_init_t
CHAIN_APPROX_NONE	imgproc.hpp	/^    CHAIN_APPROX_NONE      = 1,$/;"	e	enum:cv::ContourApproximationModes
CHAIN_APPROX_SIMPLE	imgproc.hpp	/^    CHAIN_APPROX_SIMPLE    = 2,$/;"	e	enum:cv::ContourApproximationModes
CHAIN_APPROX_TC89_KCOS	imgproc.hpp	/^    CHAIN_APPROX_TC89_KCOS = 4$/;"	e	enum:cv::ContourApproximationModes
CHAIN_APPROX_TC89_L1	imgproc.hpp	/^    CHAIN_APPROX_TC89_L1   = 3,$/;"	e	enum:cv::ContourApproximationModes
CHECK_ERR	calib3d/calib3d_c.h	/^    enum { DONE=0, STARTED=1, CALC_J=2, CHECK_ERR=3 };$/;"	e	enum:CvLevMarq::__anon55
CHECK_ERROR	flann/hdf5.h	73;"	d
CHI2	ml.hpp	/^        CHI2=4,$/;"	e	enum:cv::ml::SVM::KernelTypes
CLAHE	cudaimgproc.hpp	/^class CV_EXPORTS CLAHE : public cv::CLAHE$/;"	c	namespace:cv::cuda
CLAHE	imgproc.hpp	/^class CV_EXPORTS_W CLAHE : public Algorithm$/;"	c	namespace:cv
CLAMP	cudalegacy/NCV.hpp	1013;"	d
CLAMP_0_255	cudalegacy/NCV.hpp	1016;"	d
CLAMP_BOTTOM	cudalegacy/NCV.hpp	1015;"	d
CLAMP_TOP	cudalegacy/NCV.hpp	1014;"	d
CLOSE_CAMERA	videoio/cap_winrt.hpp	/^    CLOSE_CAMERA,$/;"	e	enum:cv::__anon70
CL_COMMAND_SVM_FREE_AMD	core/opencl/runtime/opencl_svm_hsa_extension.hpp	66;"	d
CL_COMMAND_SVM_MAP_AMD	core/opencl/runtime/opencl_svm_hsa_extension.hpp	69;"	d
CL_COMMAND_SVM_MEMCPY_AMD	core/opencl/runtime/opencl_svm_hsa_extension.hpp	67;"	d
CL_COMMAND_SVM_MEMFILL_AMD	core/opencl/runtime/opencl_svm_hsa_extension.hpp	68;"	d
CL_COMMAND_SVM_UNMAP_AMD	core/opencl/runtime/opencl_svm_hsa_extension.hpp	70;"	d
CL_DEVICE_DOUBLE_FP_CONFIG	core/opencl/runtime/opencl_core.hpp	82;"	d
CL_DEVICE_HALF_FP_CONFIG	core/opencl/runtime/opencl_core.hpp	86;"	d
CL_DEVICE_PREFERRED_PLATFORM_ATOMIC_ALIGNMENT_AMD	core/opencl/runtime/opencl_svm_hsa_extension.hpp	46;"	d
CL_DEVICE_SVM_ATOMICS	core/opencl/runtime/opencl_svm_definitions.hpp	27;"	d
CL_DEVICE_SVM_ATOMICS_AMD	core/opencl/runtime/opencl_svm_hsa_extension.hpp	52;"	d
CL_DEVICE_SVM_CAPABILITIES	core/opencl/runtime/opencl_svm_definitions.hpp	22;"	d
CL_DEVICE_SVM_CAPABILITIES_AMD	core/opencl/runtime/opencl_svm_hsa_extension.hpp	45;"	d
CL_DEVICE_SVM_COARSE_GRAIN_BUFFER	core/opencl/runtime/opencl_svm_definitions.hpp	24;"	d
CL_DEVICE_SVM_COARSE_GRAIN_BUFFER_AMD	core/opencl/runtime/opencl_svm_hsa_extension.hpp	49;"	d
CL_DEVICE_SVM_FINE_GRAIN_BUFFER	core/opencl/runtime/opencl_svm_definitions.hpp	25;"	d
CL_DEVICE_SVM_FINE_GRAIN_BUFFER_AMD	core/opencl/runtime/opencl_svm_hsa_extension.hpp	50;"	d
CL_DEVICE_SVM_FINE_GRAIN_SYSTEM	core/opencl/runtime/opencl_svm_definitions.hpp	26;"	d
CL_DEVICE_SVM_FINE_GRAIN_SYSTEM_AMD	core/opencl/runtime/opencl_svm_hsa_extension.hpp	51;"	d
CL_EXT_SUFFIX__VERSION_1_2	core/opencl/runtime/opencl_svm_hsa_extension.hpp	/^) CL_EXT_SUFFIX__VERSION_1_2;$/;"	t
CL_KERNEL_EXEC_INFO_SVM_FINE_GRAIN_SYSTEM_AMD	core/opencl/runtime/opencl_svm_hsa_extension.hpp	63;"	d
CL_KERNEL_EXEC_INFO_SVM_PTRS_AMD	core/opencl/runtime/opencl_svm_hsa_extension.hpp	62;"	d
CL_MEM_SVM_ATOMICS	core/opencl/runtime/opencl_svm_definitions.hpp	35;"	d
CL_MEM_SVM_ATOMICS_AMD	core/opencl/runtime/opencl_svm_hsa_extension.hpp	56;"	d
CL_MEM_SVM_FINE_GRAIN_BUFFER	core/opencl/runtime/opencl_svm_definitions.hpp	31;"	d
CL_MEM_SVM_FINE_GRAIN_BUFFER_AMD	core/opencl/runtime/opencl_svm_hsa_extension.hpp	55;"	d
CL_MEM_USES_SVM_POINTER_AMD	core/opencl/runtime/opencl_svm_hsa_extension.hpp	59;"	d
CL_RUNTIME_EXPORT	core/opencl/runtime/opencl_clamdblas.hpp	49;"	d
CL_RUNTIME_EXPORT	core/opencl/runtime/opencl_clamdblas.hpp	51;"	d
CL_RUNTIME_EXPORT	core/opencl/runtime/opencl_clamdfft.hpp	49;"	d
CL_RUNTIME_EXPORT	core/opencl/runtime/opencl_clamdfft.hpp	51;"	d
CL_RUNTIME_EXPORT	core/opencl/runtime/opencl_core.hpp	59;"	d
CL_RUNTIME_EXPORT	core/opencl/runtime/opencl_core.hpp	61;"	d
CMP_EQ	core/base.hpp	/^enum CmpTypes { CMP_EQ = 0, \/\/!< src1 is equal to src2.$/;"	e	enum:cv::CmpTypes
CMP_GE	core/base.hpp	/^                CMP_GE = 2, \/\/!< src1 is greater than or equal to src2.$/;"	e	enum:cv::CmpTypes
CMP_GT	core/base.hpp	/^                CMP_GT = 1, \/\/!< src1 is greater than src2.$/;"	e	enum:cv::CmpTypes
CMP_LE	core/base.hpp	/^                CMP_LE = 4, \/\/!< src1 is less than or equal to src2.$/;"	e	enum:cv::CmpTypes
CMP_LT	core/base.hpp	/^                CMP_LT = 3, \/\/!< src1 is less than src2.$/;"	e	enum:cv::CmpTypes
CMP_NE	core/base.hpp	/^                CMP_NE = 5  \/\/!< src1 is unequal to src2.$/;"	e	enum:cv::CmpTypes
COEF	ml.hpp	/^        COEF=4,$/;"	e	enum:cv::ml::SVM::ParamTypes
COLOR	stitching/detail/seam_finders.hpp	/^    enum CostFunction { COLOR, COLOR_GRAD };$/;"	e	enum:cv::detail::DpSeamFinder::CostFunction
COLORMAP_AUTUMN	imgproc.hpp	/^    COLORMAP_AUTUMN = 0, \/\/!< ![autumn](pics\/colormaps\/colorscale_autumn.jpg)$/;"	e	enum:cv::ColormapTypes
COLORMAP_BONE	imgproc.hpp	/^    COLORMAP_BONE = 1, \/\/!< ![bone](pics\/colormaps\/colorscale_bone.jpg)$/;"	e	enum:cv::ColormapTypes
COLORMAP_COOL	imgproc.hpp	/^    COLORMAP_COOL = 8, \/\/!< ![cool](pics\/colormaps\/colorscale_cool.jpg)$/;"	e	enum:cv::ColormapTypes
COLORMAP_HOT	imgproc.hpp	/^    COLORMAP_HOT = 11, \/\/!< ![hot](pics\/colormaps\/colorscale_hot.jpg)$/;"	e	enum:cv::ColormapTypes
COLORMAP_HSV	imgproc.hpp	/^    COLORMAP_HSV = 9, \/\/!< ![HSV](pics\/colormaps\/colorscale_hsv.jpg)$/;"	e	enum:cv::ColormapTypes
COLORMAP_JET	imgproc.hpp	/^    COLORMAP_JET = 2, \/\/!< ![jet](pics\/colormaps\/colorscale_jet.jpg)$/;"	e	enum:cv::ColormapTypes
COLORMAP_OCEAN	imgproc.hpp	/^    COLORMAP_OCEAN = 5, \/\/!< ![ocean](pics\/colormaps\/colorscale_ocean.jpg)$/;"	e	enum:cv::ColormapTypes
COLORMAP_PARULA	imgproc.hpp	/^    COLORMAP_PARULA = 12 \/\/!< ![hot](pics\/colormaps\/colorscale_parula.jpg)$/;"	e	enum:cv::ColormapTypes
COLORMAP_PINK	imgproc.hpp	/^    COLORMAP_PINK = 10, \/\/!< ![pink](pics\/colormaps\/colorscale_pink.jpg)$/;"	e	enum:cv::ColormapTypes
COLORMAP_RAINBOW	imgproc.hpp	/^    COLORMAP_RAINBOW = 4, \/\/!< ![rainbow](pics\/colormaps\/colorscale_rainbow.jpg)$/;"	e	enum:cv::ColormapTypes
COLORMAP_SPRING	imgproc.hpp	/^    COLORMAP_SPRING = 7, \/\/!< ![spring](pics\/colormaps\/colorscale_spring.jpg)$/;"	e	enum:cv::ColormapTypes
COLORMAP_SUMMER	imgproc.hpp	/^    COLORMAP_SUMMER = 6, \/\/!< ![summer](pics\/colormaps\/colorscale_summer.jpg)$/;"	e	enum:cv::ColormapTypes
COLORMAP_WINTER	imgproc.hpp	/^    COLORMAP_WINTER = 3, \/\/!< ![winter](pics\/colormaps\/colorscale_winter.jpg)$/;"	e	enum:cv::ColormapTypes
COLOR_BGR2BGR555	imgproc.hpp	/^    COLOR_BGR2BGR555   = 22,  \/\/!< convert between RGB\/BGR and BGR555 (16-bit images)$/;"	e	enum:cv::ColorConversionCodes
COLOR_BGR2BGR565	imgproc.hpp	/^    COLOR_BGR2BGR565   = 12, \/\/!< convert between RGB\/BGR and BGR565 (16-bit images)$/;"	e	enum:cv::ColorConversionCodes
COLOR_BGR2BGRA	imgproc.hpp	/^    COLOR_BGR2BGRA     = 0, \/\/!< add alpha channel to RGB or BGR image$/;"	e	enum:cv::ColorConversionCodes
COLOR_BGR2GRAY	imgproc.hpp	/^    COLOR_BGR2GRAY     = 6, \/\/!< convert between RGB\/BGR and grayscale, @ref color_convert_rgb_gray "color conversions"$/;"	e	enum:cv::ColorConversionCodes
COLOR_BGR2HLS	imgproc.hpp	/^    COLOR_BGR2HLS      = 52, \/\/!< convert RGB\/BGR to HLS (hue lightness saturation), @ref color_convert_rgb_hls "color conversions"$/;"	e	enum:cv::ColorConversionCodes
COLOR_BGR2HLS_FULL	imgproc.hpp	/^    COLOR_BGR2HLS_FULL = 68,$/;"	e	enum:cv::ColorConversionCodes
COLOR_BGR2HSV	imgproc.hpp	/^    COLOR_BGR2HSV      = 40, \/\/!< convert RGB\/BGR to HSV (hue saturation value), @ref color_convert_rgb_hsv "color conversions"$/;"	e	enum:cv::ColorConversionCodes
COLOR_BGR2HSV_FULL	imgproc.hpp	/^    COLOR_BGR2HSV_FULL = 66, \/\/!<$/;"	e	enum:cv::ColorConversionCodes
COLOR_BGR2Lab	imgproc.hpp	/^    COLOR_BGR2Lab      = 44, \/\/!< convert RGB\/BGR to CIE Lab, @ref color_convert_rgb_lab "color conversions"$/;"	e	enum:cv::ColorConversionCodes
COLOR_BGR2Luv	imgproc.hpp	/^    COLOR_BGR2Luv      = 50, \/\/!< convert RGB\/BGR to CIE Luv, @ref color_convert_rgb_luv "color conversions"$/;"	e	enum:cv::ColorConversionCodes
COLOR_BGR2RGB	imgproc.hpp	/^    COLOR_BGR2RGB      = 4,$/;"	e	enum:cv::ColorConversionCodes
COLOR_BGR2RGBA	imgproc.hpp	/^    COLOR_BGR2RGBA     = 2, \/\/!< convert between RGB and BGR color spaces (with or without alpha channel)$/;"	e	enum:cv::ColorConversionCodes
COLOR_BGR2XYZ	imgproc.hpp	/^    COLOR_BGR2XYZ      = 32, \/\/!< convert RGB\/BGR to CIE XYZ, @ref color_convert_rgb_xyz "color conversions"$/;"	e	enum:cv::ColorConversionCodes
COLOR_BGR2YCrCb	imgproc.hpp	/^    COLOR_BGR2YCrCb    = 36, \/\/!< convert RGB\/BGR to luma-chroma (aka YCC), @ref color_convert_rgb_ycrcb "color conversions"$/;"	e	enum:cv::ColorConversionCodes
COLOR_BGR2YUV	imgproc.hpp	/^    COLOR_BGR2YUV      = 82, \/\/!< convert between RGB\/BGR and YUV$/;"	e	enum:cv::ColorConversionCodes
COLOR_BGR2YUV_I420	imgproc.hpp	/^    COLOR_BGR2YUV_I420  = 128,$/;"	e	enum:cv::ColorConversionCodes
COLOR_BGR2YUV_IYUV	imgproc.hpp	/^    COLOR_BGR2YUV_IYUV  = COLOR_BGR2YUV_I420,$/;"	e	enum:cv::ColorConversionCodes
COLOR_BGR2YUV_YV12	imgproc.hpp	/^    COLOR_BGR2YUV_YV12  = 132,$/;"	e	enum:cv::ColorConversionCodes
COLOR_BGR5552BGR	imgproc.hpp	/^    COLOR_BGR5552BGR   = 24,$/;"	e	enum:cv::ColorConversionCodes
COLOR_BGR5552BGRA	imgproc.hpp	/^    COLOR_BGR5552BGRA  = 28,$/;"	e	enum:cv::ColorConversionCodes
COLOR_BGR5552GRAY	imgproc.hpp	/^    COLOR_BGR5552GRAY  = 31,$/;"	e	enum:cv::ColorConversionCodes
COLOR_BGR5552RGB	imgproc.hpp	/^    COLOR_BGR5552RGB   = 25,$/;"	e	enum:cv::ColorConversionCodes
COLOR_BGR5552RGBA	imgproc.hpp	/^    COLOR_BGR5552RGBA  = 29,$/;"	e	enum:cv::ColorConversionCodes
COLOR_BGR5652BGR	imgproc.hpp	/^    COLOR_BGR5652BGR   = 14,$/;"	e	enum:cv::ColorConversionCodes
COLOR_BGR5652BGRA	imgproc.hpp	/^    COLOR_BGR5652BGRA  = 18,$/;"	e	enum:cv::ColorConversionCodes
COLOR_BGR5652GRAY	imgproc.hpp	/^    COLOR_BGR5652GRAY  = 21,$/;"	e	enum:cv::ColorConversionCodes
COLOR_BGR5652RGB	imgproc.hpp	/^    COLOR_BGR5652RGB   = 15,$/;"	e	enum:cv::ColorConversionCodes
COLOR_BGR5652RGBA	imgproc.hpp	/^    COLOR_BGR5652RGBA  = 19,$/;"	e	enum:cv::ColorConversionCodes
COLOR_BGRA2BGR	imgproc.hpp	/^    COLOR_BGRA2BGR     = 1, \/\/!< remove alpha channel from RGB or BGR image$/;"	e	enum:cv::ColorConversionCodes
COLOR_BGRA2BGR555	imgproc.hpp	/^    COLOR_BGRA2BGR555  = 26,$/;"	e	enum:cv::ColorConversionCodes
COLOR_BGRA2BGR565	imgproc.hpp	/^    COLOR_BGRA2BGR565  = 16,$/;"	e	enum:cv::ColorConversionCodes
COLOR_BGRA2GRAY	imgproc.hpp	/^    COLOR_BGRA2GRAY    = 10,$/;"	e	enum:cv::ColorConversionCodes
COLOR_BGRA2RGB	imgproc.hpp	/^    COLOR_BGRA2RGB     = COLOR_RGBA2BGR,$/;"	e	enum:cv::ColorConversionCodes
COLOR_BGRA2RGBA	imgproc.hpp	/^    COLOR_BGRA2RGBA    = 5,$/;"	e	enum:cv::ColorConversionCodes
COLOR_BGRA2YUV_I420	imgproc.hpp	/^    COLOR_BGRA2YUV_I420 = 130,$/;"	e	enum:cv::ColorConversionCodes
COLOR_BGRA2YUV_IYUV	imgproc.hpp	/^    COLOR_BGRA2YUV_IYUV = COLOR_BGRA2YUV_I420,$/;"	e	enum:cv::ColorConversionCodes
COLOR_BGRA2YUV_YV12	imgproc.hpp	/^    COLOR_BGRA2YUV_YV12 = 134,$/;"	e	enum:cv::ColorConversionCodes
COLOR_BayerBG2BGR	imgproc.hpp	/^    COLOR_BayerBG2BGR = 46,$/;"	e	enum:cv::ColorConversionCodes
COLOR_BayerBG2BGR_EA	imgproc.hpp	/^    COLOR_BayerBG2BGR_EA  = 135,$/;"	e	enum:cv::ColorConversionCodes
COLOR_BayerBG2BGR_MHT	cudaimgproc.hpp	/^    COLOR_BayerBG2BGR_MHT = 256,$/;"	e	enum:cv::cuda::DemosaicTypes
COLOR_BayerBG2BGR_VNG	imgproc.hpp	/^    COLOR_BayerBG2BGR_VNG = 62,$/;"	e	enum:cv::ColorConversionCodes
COLOR_BayerBG2GRAY	imgproc.hpp	/^    COLOR_BayerBG2GRAY = 86,$/;"	e	enum:cv::ColorConversionCodes
COLOR_BayerBG2GRAY_MHT	cudaimgproc.hpp	/^    COLOR_BayerBG2GRAY_MHT = 260,$/;"	e	enum:cv::cuda::DemosaicTypes
COLOR_BayerBG2RGB	imgproc.hpp	/^    COLOR_BayerBG2RGB = COLOR_BayerRG2BGR,$/;"	e	enum:cv::ColorConversionCodes
COLOR_BayerBG2RGB_EA	imgproc.hpp	/^    COLOR_BayerBG2RGB_EA  = COLOR_BayerRG2BGR_EA,$/;"	e	enum:cv::ColorConversionCodes
COLOR_BayerBG2RGB_MHT	cudaimgproc.hpp	/^    COLOR_BayerBG2RGB_MHT = COLOR_BayerRG2BGR_MHT,$/;"	e	enum:cv::cuda::DemosaicTypes
COLOR_BayerBG2RGB_VNG	imgproc.hpp	/^    COLOR_BayerBG2RGB_VNG = COLOR_BayerRG2BGR_VNG,$/;"	e	enum:cv::ColorConversionCodes
COLOR_BayerGB2BGR	imgproc.hpp	/^    COLOR_BayerGB2BGR = 47,$/;"	e	enum:cv::ColorConversionCodes
COLOR_BayerGB2BGR_EA	imgproc.hpp	/^    COLOR_BayerGB2BGR_EA  = 136,$/;"	e	enum:cv::ColorConversionCodes
COLOR_BayerGB2BGR_MHT	cudaimgproc.hpp	/^    COLOR_BayerGB2BGR_MHT = 257,$/;"	e	enum:cv::cuda::DemosaicTypes
COLOR_BayerGB2BGR_VNG	imgproc.hpp	/^    COLOR_BayerGB2BGR_VNG = 63,$/;"	e	enum:cv::ColorConversionCodes
COLOR_BayerGB2GRAY	imgproc.hpp	/^    COLOR_BayerGB2GRAY = 87,$/;"	e	enum:cv::ColorConversionCodes
COLOR_BayerGB2GRAY_MHT	cudaimgproc.hpp	/^    COLOR_BayerGB2GRAY_MHT = 261,$/;"	e	enum:cv::cuda::DemosaicTypes
COLOR_BayerGB2RGB	imgproc.hpp	/^    COLOR_BayerGB2RGB = COLOR_BayerGR2BGR,$/;"	e	enum:cv::ColorConversionCodes
COLOR_BayerGB2RGB_EA	imgproc.hpp	/^    COLOR_BayerGB2RGB_EA  = COLOR_BayerGR2BGR_EA,$/;"	e	enum:cv::ColorConversionCodes
COLOR_BayerGB2RGB_MHT	cudaimgproc.hpp	/^    COLOR_BayerGB2RGB_MHT = COLOR_BayerGR2BGR_MHT,$/;"	e	enum:cv::cuda::DemosaicTypes
COLOR_BayerGB2RGB_VNG	imgproc.hpp	/^    COLOR_BayerGB2RGB_VNG = COLOR_BayerGR2BGR_VNG,$/;"	e	enum:cv::ColorConversionCodes
COLOR_BayerGR2BGR	imgproc.hpp	/^    COLOR_BayerGR2BGR = 49,$/;"	e	enum:cv::ColorConversionCodes
COLOR_BayerGR2BGR_EA	imgproc.hpp	/^    COLOR_BayerGR2BGR_EA  = 138,$/;"	e	enum:cv::ColorConversionCodes
COLOR_BayerGR2BGR_MHT	cudaimgproc.hpp	/^    COLOR_BayerGR2BGR_MHT = 259,$/;"	e	enum:cv::cuda::DemosaicTypes
COLOR_BayerGR2BGR_VNG	imgproc.hpp	/^    COLOR_BayerGR2BGR_VNG = 65,$/;"	e	enum:cv::ColorConversionCodes
COLOR_BayerGR2GRAY	imgproc.hpp	/^    COLOR_BayerGR2GRAY = 89,$/;"	e	enum:cv::ColorConversionCodes
COLOR_BayerGR2GRAY_MHT	cudaimgproc.hpp	/^    COLOR_BayerGR2GRAY_MHT = 263$/;"	e	enum:cv::cuda::DemosaicTypes
COLOR_BayerGR2RGB	imgproc.hpp	/^    COLOR_BayerGR2RGB = COLOR_BayerGB2BGR,$/;"	e	enum:cv::ColorConversionCodes
COLOR_BayerGR2RGB_EA	imgproc.hpp	/^    COLOR_BayerGR2RGB_EA  = COLOR_BayerGB2BGR_EA,$/;"	e	enum:cv::ColorConversionCodes
COLOR_BayerGR2RGB_MHT	cudaimgproc.hpp	/^    COLOR_BayerGR2RGB_MHT = COLOR_BayerGB2BGR_MHT,$/;"	e	enum:cv::cuda::DemosaicTypes
COLOR_BayerGR2RGB_VNG	imgproc.hpp	/^    COLOR_BayerGR2RGB_VNG = COLOR_BayerGB2BGR_VNG,$/;"	e	enum:cv::ColorConversionCodes
COLOR_BayerRG2BGR	imgproc.hpp	/^    COLOR_BayerRG2BGR = 48,$/;"	e	enum:cv::ColorConversionCodes
COLOR_BayerRG2BGR_EA	imgproc.hpp	/^    COLOR_BayerRG2BGR_EA  = 137,$/;"	e	enum:cv::ColorConversionCodes
COLOR_BayerRG2BGR_MHT	cudaimgproc.hpp	/^    COLOR_BayerRG2BGR_MHT = 258,$/;"	e	enum:cv::cuda::DemosaicTypes
COLOR_BayerRG2BGR_VNG	imgproc.hpp	/^    COLOR_BayerRG2BGR_VNG = 64,$/;"	e	enum:cv::ColorConversionCodes
COLOR_BayerRG2GRAY	imgproc.hpp	/^    COLOR_BayerRG2GRAY = 88,$/;"	e	enum:cv::ColorConversionCodes
COLOR_BayerRG2GRAY_MHT	cudaimgproc.hpp	/^    COLOR_BayerRG2GRAY_MHT = 262,$/;"	e	enum:cv::cuda::DemosaicTypes
COLOR_BayerRG2RGB	imgproc.hpp	/^    COLOR_BayerRG2RGB = COLOR_BayerBG2BGR,$/;"	e	enum:cv::ColorConversionCodes
COLOR_BayerRG2RGB_EA	imgproc.hpp	/^    COLOR_BayerRG2RGB_EA  = COLOR_BayerBG2BGR_EA,$/;"	e	enum:cv::ColorConversionCodes
COLOR_BayerRG2RGB_MHT	cudaimgproc.hpp	/^    COLOR_BayerRG2RGB_MHT = COLOR_BayerBG2BGR_MHT,$/;"	e	enum:cv::cuda::DemosaicTypes
COLOR_BayerRG2RGB_VNG	imgproc.hpp	/^    COLOR_BayerRG2RGB_VNG = COLOR_BayerBG2BGR_VNG,$/;"	e	enum:cv::ColorConversionCodes
COLOR_COLORCVT_MAX	imgproc.hpp	/^    COLOR_COLORCVT_MAX  = 139$/;"	e	enum:cv::ColorConversionCodes
COLOR_GRAD	stitching/detail/seam_finders.hpp	/^    enum CostFunction { COLOR, COLOR_GRAD };$/;"	e	enum:cv::detail::DpSeamFinder::CostFunction
COLOR_GRAY2BGR	imgproc.hpp	/^    COLOR_GRAY2BGR     = 8,$/;"	e	enum:cv::ColorConversionCodes
COLOR_GRAY2BGR555	imgproc.hpp	/^    COLOR_GRAY2BGR555  = 30, \/\/!< convert between grayscale and BGR555 (16-bit images)$/;"	e	enum:cv::ColorConversionCodes
COLOR_GRAY2BGR565	imgproc.hpp	/^    COLOR_GRAY2BGR565  = 20, \/\/!< convert between grayscale to BGR565 (16-bit images)$/;"	e	enum:cv::ColorConversionCodes
COLOR_GRAY2BGRA	imgproc.hpp	/^    COLOR_GRAY2BGRA    = 9,$/;"	e	enum:cv::ColorConversionCodes
COLOR_GRAY2RGB	imgproc.hpp	/^    COLOR_GRAY2RGB     = COLOR_GRAY2BGR,$/;"	e	enum:cv::ColorConversionCodes
COLOR_GRAY2RGBA	imgproc.hpp	/^    COLOR_GRAY2RGBA    = COLOR_GRAY2BGRA,$/;"	e	enum:cv::ColorConversionCodes
COLOR_HLS2BGR	imgproc.hpp	/^    COLOR_HLS2BGR      = 60,$/;"	e	enum:cv::ColorConversionCodes
COLOR_HLS2BGR_FULL	imgproc.hpp	/^    COLOR_HLS2BGR_FULL = 72,$/;"	e	enum:cv::ColorConversionCodes
COLOR_HLS2RGB	imgproc.hpp	/^    COLOR_HLS2RGB      = 61,$/;"	e	enum:cv::ColorConversionCodes
COLOR_HLS2RGB_FULL	imgproc.hpp	/^    COLOR_HLS2RGB_FULL = 73,$/;"	e	enum:cv::ColorConversionCodes
COLOR_HSV2BGR	imgproc.hpp	/^    COLOR_HSV2BGR      = 54, \/\/!< backward conversions to RGB\/BGR$/;"	e	enum:cv::ColorConversionCodes
COLOR_HSV2BGR_FULL	imgproc.hpp	/^    COLOR_HSV2BGR_FULL = 70,$/;"	e	enum:cv::ColorConversionCodes
COLOR_HSV2RGB	imgproc.hpp	/^    COLOR_HSV2RGB      = 55,$/;"	e	enum:cv::ColorConversionCodes
COLOR_HSV2RGB_FULL	imgproc.hpp	/^    COLOR_HSV2RGB_FULL = 71,$/;"	e	enum:cv::ColorConversionCodes
COLOR_LBGR2Lab	imgproc.hpp	/^    COLOR_LBGR2Lab     = 74,$/;"	e	enum:cv::ColorConversionCodes
COLOR_LBGR2Luv	imgproc.hpp	/^    COLOR_LBGR2Luv     = 76,$/;"	e	enum:cv::ColorConversionCodes
COLOR_LRGB2Lab	imgproc.hpp	/^    COLOR_LRGB2Lab     = 75,$/;"	e	enum:cv::ColorConversionCodes
COLOR_LRGB2Luv	imgproc.hpp	/^    COLOR_LRGB2Luv     = 77,$/;"	e	enum:cv::ColorConversionCodes
COLOR_Lab2BGR	imgproc.hpp	/^    COLOR_Lab2BGR      = 56,$/;"	e	enum:cv::ColorConversionCodes
COLOR_Lab2LBGR	imgproc.hpp	/^    COLOR_Lab2LBGR     = 78,$/;"	e	enum:cv::ColorConversionCodes
COLOR_Lab2LRGB	imgproc.hpp	/^    COLOR_Lab2LRGB     = 79,$/;"	e	enum:cv::ColorConversionCodes
COLOR_Lab2RGB	imgproc.hpp	/^    COLOR_Lab2RGB      = 57,$/;"	e	enum:cv::ColorConversionCodes
COLOR_Luv2BGR	imgproc.hpp	/^    COLOR_Luv2BGR      = 58,$/;"	e	enum:cv::ColorConversionCodes
COLOR_Luv2LBGR	imgproc.hpp	/^    COLOR_Luv2LBGR     = 80,$/;"	e	enum:cv::ColorConversionCodes
COLOR_Luv2LRGB	imgproc.hpp	/^    COLOR_Luv2LRGB     = 81,$/;"	e	enum:cv::ColorConversionCodes
COLOR_Luv2RGB	imgproc.hpp	/^    COLOR_Luv2RGB      = 59,$/;"	e	enum:cv::ColorConversionCodes
COLOR_RGB2BGR	imgproc.hpp	/^    COLOR_RGB2BGR      = COLOR_BGR2RGB,$/;"	e	enum:cv::ColorConversionCodes
COLOR_RGB2BGR555	imgproc.hpp	/^    COLOR_RGB2BGR555   = 23,$/;"	e	enum:cv::ColorConversionCodes
COLOR_RGB2BGR565	imgproc.hpp	/^    COLOR_RGB2BGR565   = 13,$/;"	e	enum:cv::ColorConversionCodes
COLOR_RGB2BGRA	imgproc.hpp	/^    COLOR_RGB2BGRA     = COLOR_BGR2RGBA,$/;"	e	enum:cv::ColorConversionCodes
COLOR_RGB2GRAY	imgproc.hpp	/^    COLOR_RGB2GRAY     = 7,$/;"	e	enum:cv::ColorConversionCodes
COLOR_RGB2HLS	imgproc.hpp	/^    COLOR_RGB2HLS      = 53,$/;"	e	enum:cv::ColorConversionCodes
COLOR_RGB2HLS_FULL	imgproc.hpp	/^    COLOR_RGB2HLS_FULL = 69,$/;"	e	enum:cv::ColorConversionCodes
COLOR_RGB2HSV	imgproc.hpp	/^    COLOR_RGB2HSV      = 41,$/;"	e	enum:cv::ColorConversionCodes
COLOR_RGB2HSV_FULL	imgproc.hpp	/^    COLOR_RGB2HSV_FULL = 67,$/;"	e	enum:cv::ColorConversionCodes
COLOR_RGB2Lab	imgproc.hpp	/^    COLOR_RGB2Lab      = 45,$/;"	e	enum:cv::ColorConversionCodes
COLOR_RGB2Luv	imgproc.hpp	/^    COLOR_RGB2Luv      = 51,$/;"	e	enum:cv::ColorConversionCodes
COLOR_RGB2RGBA	imgproc.hpp	/^    COLOR_RGB2RGBA     = COLOR_BGR2BGRA,$/;"	e	enum:cv::ColorConversionCodes
COLOR_RGB2XYZ	imgproc.hpp	/^    COLOR_RGB2XYZ      = 33,$/;"	e	enum:cv::ColorConversionCodes
COLOR_RGB2YCrCb	imgproc.hpp	/^    COLOR_RGB2YCrCb    = 37,$/;"	e	enum:cv::ColorConversionCodes
COLOR_RGB2YUV	imgproc.hpp	/^    COLOR_RGB2YUV      = 83,$/;"	e	enum:cv::ColorConversionCodes
COLOR_RGB2YUV_I420	imgproc.hpp	/^    COLOR_RGB2YUV_I420  = 127,$/;"	e	enum:cv::ColorConversionCodes
COLOR_RGB2YUV_IYUV	imgproc.hpp	/^    COLOR_RGB2YUV_IYUV  = COLOR_RGB2YUV_I420,$/;"	e	enum:cv::ColorConversionCodes
COLOR_RGB2YUV_YV12	imgproc.hpp	/^    COLOR_RGB2YUV_YV12  = 131,$/;"	e	enum:cv::ColorConversionCodes
COLOR_RGBA2BGR	imgproc.hpp	/^    COLOR_RGBA2BGR     = 3,$/;"	e	enum:cv::ColorConversionCodes
COLOR_RGBA2BGR555	imgproc.hpp	/^    COLOR_RGBA2BGR555  = 27,$/;"	e	enum:cv::ColorConversionCodes
COLOR_RGBA2BGR565	imgproc.hpp	/^    COLOR_RGBA2BGR565  = 17,$/;"	e	enum:cv::ColorConversionCodes
COLOR_RGBA2BGRA	imgproc.hpp	/^    COLOR_RGBA2BGRA    = COLOR_BGRA2RGBA,$/;"	e	enum:cv::ColorConversionCodes
COLOR_RGBA2GRAY	imgproc.hpp	/^    COLOR_RGBA2GRAY    = 11,$/;"	e	enum:cv::ColorConversionCodes
COLOR_RGBA2RGB	imgproc.hpp	/^    COLOR_RGBA2RGB     = COLOR_BGRA2BGR,$/;"	e	enum:cv::ColorConversionCodes
COLOR_RGBA2YUV_I420	imgproc.hpp	/^    COLOR_RGBA2YUV_I420 = 129,$/;"	e	enum:cv::ColorConversionCodes
COLOR_RGBA2YUV_IYUV	imgproc.hpp	/^    COLOR_RGBA2YUV_IYUV = COLOR_RGBA2YUV_I420,$/;"	e	enum:cv::ColorConversionCodes
COLOR_RGBA2YUV_YV12	imgproc.hpp	/^    COLOR_RGBA2YUV_YV12 = 133,$/;"	e	enum:cv::ColorConversionCodes
COLOR_RGBA2mRGBA	imgproc.hpp	/^    COLOR_RGBA2mRGBA    = 125,$/;"	e	enum:cv::ColorConversionCodes
COLOR_XYZ2BGR	imgproc.hpp	/^    COLOR_XYZ2BGR      = 34,$/;"	e	enum:cv::ColorConversionCodes
COLOR_XYZ2RGB	imgproc.hpp	/^    COLOR_XYZ2RGB      = 35,$/;"	e	enum:cv::ColorConversionCodes
COLOR_YCrCb2BGR	imgproc.hpp	/^    COLOR_YCrCb2BGR    = 38,$/;"	e	enum:cv::ColorConversionCodes
COLOR_YCrCb2RGB	imgproc.hpp	/^    COLOR_YCrCb2RGB    = 39,$/;"	e	enum:cv::ColorConversionCodes
COLOR_YUV2BGR	imgproc.hpp	/^    COLOR_YUV2BGR      = 84,$/;"	e	enum:cv::ColorConversionCodes
COLOR_YUV2BGRA_I420	imgproc.hpp	/^    COLOR_YUV2BGRA_I420 = COLOR_YUV2BGRA_IYUV,$/;"	e	enum:cv::ColorConversionCodes
COLOR_YUV2BGRA_IYUV	imgproc.hpp	/^    COLOR_YUV2BGRA_IYUV = 105,$/;"	e	enum:cv::ColorConversionCodes
COLOR_YUV2BGRA_NV12	imgproc.hpp	/^    COLOR_YUV2BGRA_NV12 = 95,$/;"	e	enum:cv::ColorConversionCodes
COLOR_YUV2BGRA_NV21	imgproc.hpp	/^    COLOR_YUV2BGRA_NV21 = 97,$/;"	e	enum:cv::ColorConversionCodes
COLOR_YUV2BGRA_UYNV	imgproc.hpp	/^    COLOR_YUV2BGRA_UYNV = COLOR_YUV2BGRA_UYVY,$/;"	e	enum:cv::ColorConversionCodes
COLOR_YUV2BGRA_UYVY	imgproc.hpp	/^    COLOR_YUV2BGRA_UYVY = 112,$/;"	e	enum:cv::ColorConversionCodes
COLOR_YUV2BGRA_Y422	imgproc.hpp	/^    COLOR_YUV2BGRA_Y422 = COLOR_YUV2BGRA_UYVY,$/;"	e	enum:cv::ColorConversionCodes
COLOR_YUV2BGRA_YUNV	imgproc.hpp	/^    COLOR_YUV2BGRA_YUNV = COLOR_YUV2BGRA_YUY2,$/;"	e	enum:cv::ColorConversionCodes
COLOR_YUV2BGRA_YUY2	imgproc.hpp	/^    COLOR_YUV2BGRA_YUY2 = 120,$/;"	e	enum:cv::ColorConversionCodes
COLOR_YUV2BGRA_YUYV	imgproc.hpp	/^    COLOR_YUV2BGRA_YUYV = COLOR_YUV2BGRA_YUY2,$/;"	e	enum:cv::ColorConversionCodes
COLOR_YUV2BGRA_YV12	imgproc.hpp	/^    COLOR_YUV2BGRA_YV12 = 103,$/;"	e	enum:cv::ColorConversionCodes
COLOR_YUV2BGRA_YVYU	imgproc.hpp	/^    COLOR_YUV2BGRA_YVYU = 122,$/;"	e	enum:cv::ColorConversionCodes
COLOR_YUV2BGR_I420	imgproc.hpp	/^    COLOR_YUV2BGR_I420  = COLOR_YUV2BGR_IYUV,$/;"	e	enum:cv::ColorConversionCodes
COLOR_YUV2BGR_IYUV	imgproc.hpp	/^    COLOR_YUV2BGR_IYUV  = 101,$/;"	e	enum:cv::ColorConversionCodes
COLOR_YUV2BGR_NV12	imgproc.hpp	/^    COLOR_YUV2BGR_NV12  = 91,$/;"	e	enum:cv::ColorConversionCodes
COLOR_YUV2BGR_NV21	imgproc.hpp	/^    COLOR_YUV2BGR_NV21  = 93,$/;"	e	enum:cv::ColorConversionCodes
COLOR_YUV2BGR_UYNV	imgproc.hpp	/^    COLOR_YUV2BGR_UYNV = COLOR_YUV2BGR_UYVY,$/;"	e	enum:cv::ColorConversionCodes
COLOR_YUV2BGR_UYVY	imgproc.hpp	/^    COLOR_YUV2BGR_UYVY = 108,$/;"	e	enum:cv::ColorConversionCodes
COLOR_YUV2BGR_Y422	imgproc.hpp	/^    COLOR_YUV2BGR_Y422 = COLOR_YUV2BGR_UYVY,$/;"	e	enum:cv::ColorConversionCodes
COLOR_YUV2BGR_YUNV	imgproc.hpp	/^    COLOR_YUV2BGR_YUNV = COLOR_YUV2BGR_YUY2,$/;"	e	enum:cv::ColorConversionCodes
COLOR_YUV2BGR_YUY2	imgproc.hpp	/^    COLOR_YUV2BGR_YUY2 = 116,$/;"	e	enum:cv::ColorConversionCodes
COLOR_YUV2BGR_YUYV	imgproc.hpp	/^    COLOR_YUV2BGR_YUYV = COLOR_YUV2BGR_YUY2,$/;"	e	enum:cv::ColorConversionCodes
COLOR_YUV2BGR_YV12	imgproc.hpp	/^    COLOR_YUV2BGR_YV12  = 99,$/;"	e	enum:cv::ColorConversionCodes
COLOR_YUV2BGR_YVYU	imgproc.hpp	/^    COLOR_YUV2BGR_YVYU = 118,$/;"	e	enum:cv::ColorConversionCodes
COLOR_YUV2GRAY_420	imgproc.hpp	/^    COLOR_YUV2GRAY_420  = 106,$/;"	e	enum:cv::ColorConversionCodes
COLOR_YUV2GRAY_I420	imgproc.hpp	/^    COLOR_YUV2GRAY_I420 = COLOR_YUV2GRAY_420,$/;"	e	enum:cv::ColorConversionCodes
COLOR_YUV2GRAY_IYUV	imgproc.hpp	/^    COLOR_YUV2GRAY_IYUV = COLOR_YUV2GRAY_420,$/;"	e	enum:cv::ColorConversionCodes
COLOR_YUV2GRAY_NV12	imgproc.hpp	/^    COLOR_YUV2GRAY_NV12 = COLOR_YUV2GRAY_420,$/;"	e	enum:cv::ColorConversionCodes
COLOR_YUV2GRAY_NV21	imgproc.hpp	/^    COLOR_YUV2GRAY_NV21 = COLOR_YUV2GRAY_420,$/;"	e	enum:cv::ColorConversionCodes
COLOR_YUV2GRAY_UYNV	imgproc.hpp	/^    COLOR_YUV2GRAY_UYNV = COLOR_YUV2GRAY_UYVY,$/;"	e	enum:cv::ColorConversionCodes
COLOR_YUV2GRAY_UYVY	imgproc.hpp	/^    COLOR_YUV2GRAY_UYVY = 123,$/;"	e	enum:cv::ColorConversionCodes
COLOR_YUV2GRAY_Y422	imgproc.hpp	/^    COLOR_YUV2GRAY_Y422 = COLOR_YUV2GRAY_UYVY,$/;"	e	enum:cv::ColorConversionCodes
COLOR_YUV2GRAY_YUNV	imgproc.hpp	/^    COLOR_YUV2GRAY_YUNV = COLOR_YUV2GRAY_YUY2,$/;"	e	enum:cv::ColorConversionCodes
COLOR_YUV2GRAY_YUY2	imgproc.hpp	/^    COLOR_YUV2GRAY_YUY2 = 124,$/;"	e	enum:cv::ColorConversionCodes
COLOR_YUV2GRAY_YUYV	imgproc.hpp	/^    COLOR_YUV2GRAY_YUYV = COLOR_YUV2GRAY_YUY2,$/;"	e	enum:cv::ColorConversionCodes
COLOR_YUV2GRAY_YV12	imgproc.hpp	/^    COLOR_YUV2GRAY_YV12 = COLOR_YUV2GRAY_420,$/;"	e	enum:cv::ColorConversionCodes
COLOR_YUV2GRAY_YVYU	imgproc.hpp	/^    COLOR_YUV2GRAY_YVYU = COLOR_YUV2GRAY_YUY2,$/;"	e	enum:cv::ColorConversionCodes
COLOR_YUV2RGB	imgproc.hpp	/^    COLOR_YUV2RGB      = 85,$/;"	e	enum:cv::ColorConversionCodes
COLOR_YUV2RGBA_I420	imgproc.hpp	/^    COLOR_YUV2RGBA_I420 = COLOR_YUV2RGBA_IYUV,$/;"	e	enum:cv::ColorConversionCodes
COLOR_YUV2RGBA_IYUV	imgproc.hpp	/^    COLOR_YUV2RGBA_IYUV = 104,$/;"	e	enum:cv::ColorConversionCodes
COLOR_YUV2RGBA_NV12	imgproc.hpp	/^    COLOR_YUV2RGBA_NV12 = 94,$/;"	e	enum:cv::ColorConversionCodes
COLOR_YUV2RGBA_NV21	imgproc.hpp	/^    COLOR_YUV2RGBA_NV21 = 96,$/;"	e	enum:cv::ColorConversionCodes
COLOR_YUV2RGBA_UYNV	imgproc.hpp	/^    COLOR_YUV2RGBA_UYNV = COLOR_YUV2RGBA_UYVY,$/;"	e	enum:cv::ColorConversionCodes
COLOR_YUV2RGBA_UYVY	imgproc.hpp	/^    COLOR_YUV2RGBA_UYVY = 111,$/;"	e	enum:cv::ColorConversionCodes
COLOR_YUV2RGBA_Y422	imgproc.hpp	/^    COLOR_YUV2RGBA_Y422 = COLOR_YUV2RGBA_UYVY,$/;"	e	enum:cv::ColorConversionCodes
COLOR_YUV2RGBA_YUNV	imgproc.hpp	/^    COLOR_YUV2RGBA_YUNV = COLOR_YUV2RGBA_YUY2,$/;"	e	enum:cv::ColorConversionCodes
COLOR_YUV2RGBA_YUY2	imgproc.hpp	/^    COLOR_YUV2RGBA_YUY2 = 119,$/;"	e	enum:cv::ColorConversionCodes
COLOR_YUV2RGBA_YUYV	imgproc.hpp	/^    COLOR_YUV2RGBA_YUYV = COLOR_YUV2RGBA_YUY2,$/;"	e	enum:cv::ColorConversionCodes
COLOR_YUV2RGBA_YV12	imgproc.hpp	/^    COLOR_YUV2RGBA_YV12 = 102,$/;"	e	enum:cv::ColorConversionCodes
COLOR_YUV2RGBA_YVYU	imgproc.hpp	/^    COLOR_YUV2RGBA_YVYU = 121,$/;"	e	enum:cv::ColorConversionCodes
COLOR_YUV2RGB_I420	imgproc.hpp	/^    COLOR_YUV2RGB_I420  = COLOR_YUV2RGB_IYUV,$/;"	e	enum:cv::ColorConversionCodes
COLOR_YUV2RGB_IYUV	imgproc.hpp	/^    COLOR_YUV2RGB_IYUV  = 100,$/;"	e	enum:cv::ColorConversionCodes
COLOR_YUV2RGB_NV12	imgproc.hpp	/^    COLOR_YUV2RGB_NV12  = 90,$/;"	e	enum:cv::ColorConversionCodes
COLOR_YUV2RGB_NV21	imgproc.hpp	/^    COLOR_YUV2RGB_NV21  = 92,$/;"	e	enum:cv::ColorConversionCodes
COLOR_YUV2RGB_UYNV	imgproc.hpp	/^    COLOR_YUV2RGB_UYNV = COLOR_YUV2RGB_UYVY,$/;"	e	enum:cv::ColorConversionCodes
COLOR_YUV2RGB_UYVY	imgproc.hpp	/^    COLOR_YUV2RGB_UYVY = 107,$/;"	e	enum:cv::ColorConversionCodes
COLOR_YUV2RGB_Y422	imgproc.hpp	/^    COLOR_YUV2RGB_Y422 = COLOR_YUV2RGB_UYVY,$/;"	e	enum:cv::ColorConversionCodes
COLOR_YUV2RGB_YUNV	imgproc.hpp	/^    COLOR_YUV2RGB_YUNV = COLOR_YUV2RGB_YUY2,$/;"	e	enum:cv::ColorConversionCodes
COLOR_YUV2RGB_YUY2	imgproc.hpp	/^    COLOR_YUV2RGB_YUY2 = 115,$/;"	e	enum:cv::ColorConversionCodes
COLOR_YUV2RGB_YUYV	imgproc.hpp	/^    COLOR_YUV2RGB_YUYV = COLOR_YUV2RGB_YUY2,$/;"	e	enum:cv::ColorConversionCodes
COLOR_YUV2RGB_YV12	imgproc.hpp	/^    COLOR_YUV2RGB_YV12  = 98,$/;"	e	enum:cv::ColorConversionCodes
COLOR_YUV2RGB_YVYU	imgproc.hpp	/^    COLOR_YUV2RGB_YVYU = 117,$/;"	e	enum:cv::ColorConversionCodes
COLOR_YUV420p2BGR	imgproc.hpp	/^    COLOR_YUV420p2BGR   = COLOR_YUV2BGR_YV12,$/;"	e	enum:cv::ColorConversionCodes
COLOR_YUV420p2BGRA	imgproc.hpp	/^    COLOR_YUV420p2BGRA  = COLOR_YUV2BGRA_YV12,$/;"	e	enum:cv::ColorConversionCodes
COLOR_YUV420p2GRAY	imgproc.hpp	/^    COLOR_YUV420p2GRAY  = COLOR_YUV2GRAY_420,$/;"	e	enum:cv::ColorConversionCodes
COLOR_YUV420p2RGB	imgproc.hpp	/^    COLOR_YUV420p2RGB   = COLOR_YUV2RGB_YV12,$/;"	e	enum:cv::ColorConversionCodes
COLOR_YUV420p2RGBA	imgproc.hpp	/^    COLOR_YUV420p2RGBA  = COLOR_YUV2RGBA_YV12,$/;"	e	enum:cv::ColorConversionCodes
COLOR_YUV420sp2BGR	imgproc.hpp	/^    COLOR_YUV420sp2BGR  = COLOR_YUV2BGR_NV21,$/;"	e	enum:cv::ColorConversionCodes
COLOR_YUV420sp2BGRA	imgproc.hpp	/^    COLOR_YUV420sp2BGRA = COLOR_YUV2BGRA_NV21,$/;"	e	enum:cv::ColorConversionCodes
COLOR_YUV420sp2GRAY	imgproc.hpp	/^    COLOR_YUV420sp2GRAY = COLOR_YUV2GRAY_420,$/;"	e	enum:cv::ColorConversionCodes
COLOR_YUV420sp2RGB	imgproc.hpp	/^    COLOR_YUV420sp2RGB  = COLOR_YUV2RGB_NV21,$/;"	e	enum:cv::ColorConversionCodes
COLOR_YUV420sp2RGBA	imgproc.hpp	/^    COLOR_YUV420sp2RGBA = COLOR_YUV2RGBA_NV21,$/;"	e	enum:cv::ColorConversionCodes
COLOR_mRGBA2RGBA	imgproc.hpp	/^    COLOR_mRGBA2RGBA    = 126,$/;"	e	enum:cv::ColorConversionCodes
COL_SAMPLE	ml.hpp	/^    COL_SAMPLE = 1  \/\/!< each training sample occupies a column of samples$/;"	e	enum:cv::ml::SampleTypes
COMPOSITE	flann/defines.h	/^    COMPOSITE = 3,$/;"	e	enum:cvflann::flann_algorithm_t
COMPRESSED_INPUT	ml.hpp	/^        COMPRESSED_INPUT=2,$/;"	e	enum:cv::ml::StatModel::Flags
CONSOLE	ts.hpp	/^        CONSOLE=1 << CONSOLE_IDX,$/;"	e	enum:cvtest::TS::__anon25
CONSOLE_IDX	ts.hpp	/^        CONSOLE_IDX=3,$/;"	e	enum:cvtest::TS::__anon25
CONSTANT	core/ocl.hpp	/^    enum { LOCAL=1, READ_ONLY=2, WRITE_ONLY=4, READ_WRITE=6, CONSTANT=8, PTR_ONLY = 16, NO_SIZE=256 };$/;"	e	enum:cv::ocl::KernelArg::__anon160
CONTINUOUS_FLAG	core/mat.hpp	/^    enum { MAGIC_VAL  = 0x42FF0000, AUTO_STEP = 0, CONTINUOUS_FLAG = CV_MAT_CONT_FLAG, SUBMATRIX_FLAG = CV_SUBMAT_FLAG };$/;"	e	enum:cv::Mat::__anon138
CONTINUOUS_FLAG	core/mat.hpp	/^    enum { MAGIC_VAL  = 0x42FF0000, AUTO_STEP = 0, CONTINUOUS_FLAG = CV_MAT_CONT_FLAG, SUBMATRIX_FLAG = CV_SUBMAT_FLAG };$/;"	e	enum:cv::UMat::__anon140
COPY_ON_MAP	core/mat.hpp	/^    enum { COPY_ON_MAP=1, HOST_COPY_OBSOLETE=2,$/;"	e	enum:cv::UMatData::__anon137
COST_COLOR	stitching/detail/seam_finders.hpp	/^    enum CostType { COST_COLOR, COST_COLOR_GRAD };$/;"	e	enum:cv::detail::GraphCutSeamFinderBase::CostType
COST_COLOR_GRAD	stitching/detail/seam_finders.hpp	/^    enum CostType { COST_COLOR, COST_COLOR_GRAD };$/;"	e	enum:cv::detail::GraphCutSeamFinderBase::CostType
COUNT	core/types.hpp	/^        COUNT=1, \/\/!< the maximum number of iterations or elements to compute$/;"	e	enum:cv::TermCriteria::Type
COUNT	cudev/util/type_traits.hpp	/^    enum { value = Log2<N, (CURRENT_VAL >> 1), COUNT + 1>::VALUE };$/;"	e	enum:cv::cudev::Log2::__anon369
COVAR_COLS	core.hpp	/^    COVAR_COLS      = 16$/;"	e	enum:cv::CovarFlags
COVAR_NORMAL	core.hpp	/^    COVAR_NORMAL    = 1,$/;"	e	enum:cv::CovarFlags
COVAR_ROWS	core.hpp	/^    COVAR_ROWS      = 8,$/;"	e	enum:cv::CovarFlags
COVAR_SCALE	core.hpp	/^    COVAR_SCALE     = 4,$/;"	e	enum:cv::CovarFlags
COVAR_SCRAMBLED	core.hpp	/^    COVAR_SCRAMBLED = 0,$/;"	e	enum:cv::CovarFlags
COVAR_USE_AVG	core.hpp	/^    COVAR_USE_AVG   = 2,$/;"	e	enum:cv::CovarFlags
COV_MAT_DEFAULT	ml.hpp	/^        COV_MAT_DEFAULT=COV_MAT_DIAGONAL$/;"	e	enum:cv::ml::EM::Types
COV_MAT_DIAGONAL	ml.hpp	/^        COV_MAT_DIAGONAL=1,$/;"	e	enum:cv::ml::EM::Types
COV_MAT_GENERIC	ml.hpp	/^        COV_MAT_GENERIC=2,$/;"	e	enum:cv::ml::EM::Types
COV_MAT_SPHERICAL	ml.hpp	/^        COV_MAT_SPHERICAL=0,$/;"	e	enum:cv::ml::EM::Types
CP	video/tracking_c.h	/^    int CP;                     \/* number of control vector dimensions *\/$/;"	m	struct:CvKalman
CPU_AVX	core/utility.hpp	/^    CPU_AVX             = 10,$/;"	e	enum:cv::CpuFeatures
CPU_AVX2	core/utility.hpp	/^    CPU_AVX2            = 11,$/;"	e	enum:cv::CpuFeatures
CPU_AVX_512BW	core/utility.hpp	/^    CPU_AVX_512BW       = 14,$/;"	e	enum:cv::CpuFeatures
CPU_AVX_512CD	core/utility.hpp	/^    CPU_AVX_512CD       = 15,$/;"	e	enum:cv::CpuFeatures
CPU_AVX_512DQ	core/utility.hpp	/^    CPU_AVX_512DQ       = 16,$/;"	e	enum:cv::CpuFeatures
CPU_AVX_512ER	core/utility.hpp	/^    CPU_AVX_512ER       = 17,$/;"	e	enum:cv::CpuFeatures
CPU_AVX_512F	core/utility.hpp	/^    CPU_AVX_512F        = 13,$/;"	e	enum:cv::CpuFeatures
CPU_AVX_512IFMA512	core/utility.hpp	/^    CPU_AVX_512IFMA512  = 18,$/;"	e	enum:cv::CpuFeatures
CPU_AVX_512PF	core/utility.hpp	/^    CPU_AVX_512PF       = 19,$/;"	e	enum:cv::CpuFeatures
CPU_AVX_512VBMI	core/utility.hpp	/^    CPU_AVX_512VBMI     = 20,$/;"	e	enum:cv::CpuFeatures
CPU_AVX_512VL	core/utility.hpp	/^    CPU_AVX_512VL       = 21,$/;"	e	enum:cv::CpuFeatures
CPU_FMA3	core/utility.hpp	/^    CPU_FMA3            = 12,$/;"	e	enum:cv::CpuFeatures
CPU_HAS_NEON_FEATURE	hal/defs.h	176;"	d
CPU_MMX	core/utility.hpp	/^    CPU_MMX             = 1,$/;"	e	enum:cv::CpuFeatures
CPU_NEON	core/utility.hpp	/^    CPU_NEON            = 100$/;"	e	enum:cv::CpuFeatures
CPU_POPCNT	core/utility.hpp	/^    CPU_POPCNT          = 8,$/;"	e	enum:cv::CpuFeatures
CPU_SANITY_CHECK	ts/cuda_perf.hpp	88;"	d
CPU_SSE	core/utility.hpp	/^    CPU_SSE             = 2,$/;"	e	enum:cv::CpuFeatures
CPU_SSE2	core/utility.hpp	/^    CPU_SSE2            = 3,$/;"	e	enum:cv::CpuFeatures
CPU_SSE3	core/utility.hpp	/^    CPU_SSE3            = 4,$/;"	e	enum:cv::CpuFeatures
CPU_SSE4_1	core/utility.hpp	/^    CPU_SSE4_1          = 6,$/;"	e	enum:cv::CpuFeatures
CPU_SSE4_2	core/utility.hpp	/^    CPU_SSE4_2          = 7,$/;"	e	enum:cv::CpuFeatures
CPU_SSSE3	core/utility.hpp	/^    CPU_SSSE3           = 5,$/;"	e	enum:cv::CpuFeatures
CROP	stitching/detail/timelapsers.hpp	/^    enum {AS_IS, CROP};$/;"	e	enum:cv::detail::Timelapser::__anon417
CS	flann/defines.h	/^    CS         = 7,$/;"	e	enum:cvflann::flann_distance_t
CSV	ts.hpp	/^        CSV=1 << CSV_IDX,$/;"	e	enum:cvtest::TS::__anon25
CSV_IDX	ts.hpp	/^        CSV_IDX=2,$/;"	e	enum:cvtest::TS::__anon25
CTRL	viz/types.hpp	/^            enum { NONE = 0, ALT = 1, CTRL = 2, SHIFT = 4 };$/;"	e	enum:cv::viz::KeyboardEvent::__anon73
CT_ASSERT_FAILURE	cudalegacy/NCV.hpp	/^    struct CT_ASSERT_FAILURE<true> {};$/;"	s	namespace:NcvCTprep
CUDART_MINIMUM_REQUIRED_VERSION	core/private.cuda.hpp	67;"	d
CUDA_CHANNELS_1_3	ts/cuda_perf.hpp	66;"	d
CUDA_CHANNELS_1_3_4	ts/cuda_perf.hpp	65;"	d
CUDA_GPU_MAT	core/mat.hpp	/^        CUDA_GPU_MAT      = 9 << KIND_SHIFT,$/;"	e	enum:cv::_InputArray::__anon135
CUDA_HOST_MEM	core/mat.hpp	/^        CUDA_HOST_MEM     = 8 << KIND_SHIFT,$/;"	e	enum:cv::_InputArray::__anon135
CUDA_SANITY_CHECK	ts/cuda_perf.hpp	82;"	d
CUDA_TEST_P	ts/cuda_test.hpp	172;"	d
CUDA_TYPICAL_MAT_SIZES	ts/cuda_perf.hpp	78;"	d
CUSTOM	ml.hpp	/^        CUSTOM=-1,$/;"	e	enum:cv::ml::SVM::KernelTypes
CVAPI	core/types_c.h	93;"	d
CVAUX_CONCAT	core/base.hpp	255;"	d
CVAUX_CONCAT_EXP	core/base.hpp	254;"	d
CVAUX_STR	core/version.hpp	59;"	d
CVAUX_STRW	core/version.hpp	62;"	d
CVAUX_STRW_EXP	core/version.hpp	61;"	d
CVAUX_STR_EXP	core/version.hpp	58;"	d
CVStatus	core/types_c.h	/^typedef int CVStatus;$/;"	t
CV_16S	core/cvdef.h	104;"	d
CV_16SC	core/cvdef.h	138;"	d
CV_16SC1	core/cvdef.h	134;"	d
CV_16SC2	core/cvdef.h	135;"	d
CV_16SC3	core/cvdef.h	136;"	d
CV_16SC4	core/cvdef.h	137;"	d
CV_16U	core/cvdef.h	103;"	d
CV_16UC	core/cvdef.h	132;"	d
CV_16UC1	core/cvdef.h	128;"	d
CV_16UC2	core/cvdef.h	129;"	d
CV_16UC3	core/cvdef.h	130;"	d
CV_16UC4	core/cvdef.h	131;"	d
CV_2PI	hal/defs.h	302;"	d
CV_32F	core/cvdef.h	106;"	d
CV_32FC	core/cvdef.h	150;"	d
CV_32FC1	core/cvdef.h	146;"	d
CV_32FC2	core/cvdef.h	147;"	d
CV_32FC3	core/cvdef.h	148;"	d
CV_32FC4	core/cvdef.h	149;"	d
CV_32S	core/cvdef.h	105;"	d
CV_32SC	core/cvdef.h	144;"	d
CV_32SC1	core/cvdef.h	140;"	d
CV_32SC2	core/cvdef.h	141;"	d
CV_32SC3	core/cvdef.h	142;"	d
CV_32SC4	core/cvdef.h	143;"	d
CV_64F	core/cvdef.h	107;"	d
CV_64FC	core/cvdef.h	156;"	d
CV_64FC1	core/cvdef.h	152;"	d
CV_64FC2	core/cvdef.h	153;"	d
CV_64FC3	core/cvdef.h	154;"	d
CV_64FC4	core/cvdef.h	155;"	d
CV_8S	core/cvdef.h	102;"	d
CV_8SC	core/cvdef.h	126;"	d
CV_8SC1	core/cvdef.h	122;"	d
CV_8SC2	core/cvdef.h	123;"	d
CV_8SC3	core/cvdef.h	124;"	d
CV_8SC4	core/cvdef.h	125;"	d
CV_8U	core/cvdef.h	101;"	d
CV_8UC	core/cvdef.h	120;"	d
CV_8UC1	core/cvdef.h	116;"	d
CV_8UC2	core/cvdef.h	117;"	d
CV_8UC3	core/cvdef.h	118;"	d
CV_8UC4	core/cvdef.h	119;"	d
CV_AA	imgproc/imgproc_c.h	988;"	d
CV_ADAPTIVE_THRESH_GAUSSIAN_C	imgproc/types_c.h	/^    CV_ADAPTIVE_THRESH_GAUSSIAN_C  =1$/;"	e	enum:__anon21
CV_ADAPTIVE_THRESH_MEAN_C	imgproc/types_c.h	/^    CV_ADAPTIVE_THRESH_MEAN_C  =0,$/;"	e	enum:__anon21
CV_ARE_CNS_EQ	core/types_c.h	488;"	d
CV_ARE_DEPTHS_EQ	core/types_c.h	491;"	d
CV_ARE_SIZES_EQ	core/types_c.h	494;"	d
CV_ARE_TYPES_EQ	core/types_c.h	485;"	d
CV_ASSERT	core/core_c.h	2719;"	d
CV_AUTOSTEP	core/core_c.h	220;"	d
CV_AUTO_STEP	core/types_c.h	405;"	d
CV_AVX	hal/defs.h	156;"	d
CV_AVX	hal/defs.h	213;"	d
CV_AVX2	hal/defs.h	165;"	d
CV_AVX2	hal/defs.h	216;"	d
CV_AVX_512BW	hal/defs.h	225;"	d
CV_AVX_512CD	hal/defs.h	228;"	d
CV_AVX_512DQ	hal/defs.h	231;"	d
CV_AVX_512ER	hal/defs.h	234;"	d
CV_AVX_512F	hal/defs.h	222;"	d
CV_AVX_512IFMA512	hal/defs.h	237;"	d
CV_AVX_512PF	hal/defs.h	240;"	d
CV_AVX_512VBMI	hal/defs.h	243;"	d
CV_AVX_512VL	hal/defs.h	246;"	d
CV_Assert	core/base.hpp	389;"	d
CV_BACK	core/core_c.h	1608;"	d
CV_BADARG_ERR	core/private.hpp	/^    CV_BADARG_ERR               = -49,  \/\/ipp comp$/;"	e	enum:CvStatus
CV_BADCHANNELS_ERR	core/private.hpp	/^    CV_BADCHANNELS_ERR          = -47,  \/\/ipp comp$/;"	e	enum:CvStatus
CV_BADCOEF_ERR	core/private.hpp	/^    CV_BADCOEF_ERR              =  -10,$/;"	e	enum:CvStatus
CV_BADCONVERGENCE_ERR	core/private.hpp	/^    CV_BADCONVERGENCE_ERR       = -109,$/;"	e	enum:CvStatus
CV_BADDEPTH_ERR	core/private.hpp	/^    CV_BADDEPTH_ERR             = -107,$/;"	e	enum:CvStatus
CV_BADFACTOR_ERR	core/private.hpp	/^    CV_BADFACTOR_ERR            =  -7,$/;"	e	enum:CvStatus
CV_BADFLAG_ERR	core/private.hpp	/^    CV_BADFLAG_ERR              =  -12,$/;"	e	enum:CvStatus
CV_BADHEADER_ERR	core/private.hpp	/^    CV_BADHEADER_ERR            = -105,$/;"	e	enum:CvStatus
CV_BADMEMBLOCK_ERR	core/private.hpp	/^    CV_BADMEMBLOCK_ERR          = -113,$/;"	e	enum:CvStatus
CV_BADPOINT_ERR	core/private.hpp	/^    CV_BADPOINT_ERR             =  -6,$/;"	e	enum:CvStatus
CV_BADRANGE_ERR	core/private.hpp	/^    CV_BADRANGE_ERR             = -44,  \/\/ipp comp$/;"	e	enum:CvStatus
CV_BADROI_ERR	core/private.hpp	/^    CV_BADROI_ERR               = -106,$/;"	e	enum:CvStatus
CV_BADSCALE_ERR	core/private.hpp	/^    CV_BADSCALE_ERR             =  -4,$/;"	e	enum:CvStatus
CV_BADSIZE_ERR	core/private.hpp	/^    CV_BADSIZE_ERR              =  -1,$/;"	e	enum:CvStatus
CV_BADSTEP_ERR	core/private.hpp	/^    CV_BADSTEP_ERR              = -29,  \/\/ipp comp$/;"	e	enum:CvStatus
CV_BGR2BGR555	imgproc/types_c.h	/^    CV_BGR2BGR555  =22,$/;"	e	enum:__anon7
CV_BGR2BGR565	imgproc/types_c.h	/^    CV_BGR2BGR565  =12,$/;"	e	enum:__anon7
CV_BGR2BGRA	imgproc/types_c.h	/^    CV_BGR2BGRA    =0,$/;"	e	enum:__anon7
CV_BGR2GRAY	imgproc/types_c.h	/^    CV_BGR2GRAY    =6,$/;"	e	enum:__anon7
CV_BGR2HLS	imgproc/types_c.h	/^    CV_BGR2HLS     =52,$/;"	e	enum:__anon7
CV_BGR2HLS_FULL	imgproc/types_c.h	/^    CV_BGR2HLS_FULL = 68,$/;"	e	enum:__anon7
CV_BGR2HSV	imgproc/types_c.h	/^    CV_BGR2HSV     =40,$/;"	e	enum:__anon7
CV_BGR2HSV_FULL	imgproc/types_c.h	/^    CV_BGR2HSV_FULL = 66,$/;"	e	enum:__anon7
CV_BGR2Lab	imgproc/types_c.h	/^    CV_BGR2Lab     =44,$/;"	e	enum:__anon7
CV_BGR2Luv	imgproc/types_c.h	/^    CV_BGR2Luv     =50,$/;"	e	enum:__anon7
CV_BGR2RGB	imgproc/types_c.h	/^    CV_BGR2RGB     =4,$/;"	e	enum:__anon7
CV_BGR2RGBA	imgproc/types_c.h	/^    CV_BGR2RGBA    =2,$/;"	e	enum:__anon7
CV_BGR2XYZ	imgproc/types_c.h	/^    CV_BGR2XYZ     =32,$/;"	e	enum:__anon7
CV_BGR2YCrCb	imgproc/types_c.h	/^    CV_BGR2YCrCb   =36,$/;"	e	enum:__anon7
CV_BGR2YUV	imgproc/types_c.h	/^    CV_BGR2YUV      = 82,$/;"	e	enum:__anon7
CV_BGR2YUV_I420	imgproc/types_c.h	/^    CV_BGR2YUV_I420 = 128,$/;"	e	enum:__anon7
CV_BGR2YUV_IYUV	imgproc/types_c.h	/^    CV_BGR2YUV_IYUV = CV_BGR2YUV_I420,$/;"	e	enum:__anon7
CV_BGR2YUV_YV12	imgproc/types_c.h	/^    CV_BGR2YUV_YV12  = 132,$/;"	e	enum:__anon7
CV_BGR5552BGR	imgproc/types_c.h	/^    CV_BGR5552BGR  =24,$/;"	e	enum:__anon7
CV_BGR5552BGRA	imgproc/types_c.h	/^    CV_BGR5552BGRA =28,$/;"	e	enum:__anon7
CV_BGR5552GRAY	imgproc/types_c.h	/^    CV_BGR5552GRAY =31,$/;"	e	enum:__anon7
CV_BGR5552RGB	imgproc/types_c.h	/^    CV_BGR5552RGB  =25,$/;"	e	enum:__anon7
CV_BGR5552RGBA	imgproc/types_c.h	/^    CV_BGR5552RGBA =29,$/;"	e	enum:__anon7
CV_BGR5652BGR	imgproc/types_c.h	/^    CV_BGR5652BGR  =14,$/;"	e	enum:__anon7
CV_BGR5652BGRA	imgproc/types_c.h	/^    CV_BGR5652BGRA =18,$/;"	e	enum:__anon7
CV_BGR5652GRAY	imgproc/types_c.h	/^    CV_BGR5652GRAY =21,$/;"	e	enum:__anon7
CV_BGR5652RGB	imgproc/types_c.h	/^    CV_BGR5652RGB  =15,$/;"	e	enum:__anon7
CV_BGR5652RGBA	imgproc/types_c.h	/^    CV_BGR5652RGBA =19,$/;"	e	enum:__anon7
CV_BGRA2BGR	imgproc/types_c.h	/^    CV_BGRA2BGR    =1,$/;"	e	enum:__anon7
CV_BGRA2BGR555	imgproc/types_c.h	/^    CV_BGRA2BGR555 =26,$/;"	e	enum:__anon7
CV_BGRA2BGR565	imgproc/types_c.h	/^    CV_BGRA2BGR565 =16,$/;"	e	enum:__anon7
CV_BGRA2GRAY	imgproc/types_c.h	/^    CV_BGRA2GRAY   =10,$/;"	e	enum:__anon7
CV_BGRA2RGB	imgproc/types_c.h	/^    CV_BGRA2RGB    =CV_RGBA2BGR,$/;"	e	enum:__anon7
CV_BGRA2RGBA	imgproc/types_c.h	/^    CV_BGRA2RGBA   =5,$/;"	e	enum:__anon7
CV_BGRA2YUV_I420	imgproc/types_c.h	/^    CV_BGRA2YUV_I420 = 130,$/;"	e	enum:__anon7
CV_BGRA2YUV_IYUV	imgproc/types_c.h	/^    CV_BGRA2YUV_IYUV = CV_BGRA2YUV_I420,$/;"	e	enum:__anon7
CV_BGRA2YUV_YV12	imgproc/types_c.h	/^    CV_BGRA2YUV_YV12 = 134,$/;"	e	enum:__anon7
CV_BIG_INT	hal/defs.h	291;"	d
CV_BIG_INT	hal/defs.h	296;"	d
CV_BIG_UINT	hal/defs.h	292;"	d
CV_BIG_UINT	hal/defs.h	297;"	d
CV_BILATERAL	imgproc/types_c.h	/^    CV_BILATERAL =4$/;"	e	enum:SmoothMethod_c
CV_BLUR	imgproc/types_c.h	/^    CV_BLUR  =1,$/;"	e	enum:SmoothMethod_c
CV_BLUR_NO_SCALE	imgproc/types_c.h	/^    CV_BLUR_NO_SCALE =0,$/;"	e	enum:SmoothMethod_c
CV_BadAlign	core/types_c.h	/^ CV_BadAlign=                  -21,  \/**\/$/;"	e	enum:__anon143
CV_BadAlphaChannel	core/types_c.h	/^ CV_BadAlphaChannel=           -18,  \/**\/$/;"	e	enum:__anon143
CV_BadCOI	core/types_c.h	/^ CV_BadCOI=                    -24,  \/**\/$/;"	e	enum:__anon143
CV_BadCallBack	core/types_c.h	/^ CV_BadCallBack=               -22,  \/**\/$/;"	e	enum:__anon143
CV_BadDataPtr	core/types_c.h	/^ CV_BadDataPtr=                -12,  \/**\/$/;"	e	enum:__anon143
CV_BadDepth	core/types_c.h	/^ CV_BadDepth=                  -17,  \/**\/$/;"	e	enum:__anon143
CV_BadImageSize	core/types_c.h	/^ CV_BadImageSize=              -10,  \/**< image size is invalid           *\/$/;"	e	enum:__anon143
CV_BadModelOrChSeq	core/types_c.h	/^ CV_BadModelOrChSeq=           -14,  \/**\/$/;"	e	enum:__anon143
CV_BadNumChannel1U	core/types_c.h	/^ CV_BadNumChannel1U=           -16,  \/**\/$/;"	e	enum:__anon143
CV_BadNumChannels	core/types_c.h	/^ CV_BadNumChannels=            -15,  \/**\/$/;"	e	enum:__anon143
CV_BadOffset	core/types_c.h	/^ CV_BadOffset=                 -11,  \/**< offset is invalid               *\/$/;"	e	enum:__anon143
CV_BadOrder	core/types_c.h	/^ CV_BadOrder=                  -19,  \/**\/$/;"	e	enum:__anon143
CV_BadOrigin	core/types_c.h	/^ CV_BadOrigin=                 -20,  \/**\/$/;"	e	enum:__anon143
CV_BadROISize	core/types_c.h	/^ CV_BadROISize=                -25,  \/**\/$/;"	e	enum:__anon143
CV_BadStep	core/types_c.h	/^ CV_BadStep=                   -13,  \/**\/$/;"	e	enum:__anon143
CV_BadTileSize	core/types_c.h	/^ CV_BadTileSize=               -23,  \/**\/$/;"	e	enum:__anon143
CV_BayerBG2BGR	imgproc/types_c.h	/^    CV_BayerBG2BGR =46,$/;"	e	enum:__anon7
CV_BayerBG2BGR_EA	imgproc/types_c.h	/^    CV_BayerBG2BGR_EA = 135,$/;"	e	enum:__anon7
CV_BayerBG2BGR_VNG	imgproc/types_c.h	/^    CV_BayerBG2BGR_VNG =62,$/;"	e	enum:__anon7
CV_BayerBG2GRAY	imgproc/types_c.h	/^    CV_BayerBG2GRAY = 86,$/;"	e	enum:__anon7
CV_BayerBG2RGB	imgproc/types_c.h	/^    CV_BayerBG2RGB =CV_BayerRG2BGR,$/;"	e	enum:__anon7
CV_BayerBG2RGB_EA	imgproc/types_c.h	/^    CV_BayerBG2RGB_EA = CV_BayerRG2BGR_EA,$/;"	e	enum:__anon7
CV_BayerBG2RGB_VNG	imgproc/types_c.h	/^    CV_BayerBG2RGB_VNG =CV_BayerRG2BGR_VNG,$/;"	e	enum:__anon7
CV_BayerGB2BGR	imgproc/types_c.h	/^    CV_BayerGB2BGR =47,$/;"	e	enum:__anon7
CV_BayerGB2BGR_EA	imgproc/types_c.h	/^    CV_BayerGB2BGR_EA = 136,$/;"	e	enum:__anon7
CV_BayerGB2BGR_VNG	imgproc/types_c.h	/^    CV_BayerGB2BGR_VNG =63,$/;"	e	enum:__anon7
CV_BayerGB2GRAY	imgproc/types_c.h	/^    CV_BayerGB2GRAY = 87,$/;"	e	enum:__anon7
CV_BayerGB2RGB	imgproc/types_c.h	/^    CV_BayerGB2RGB =CV_BayerGR2BGR,$/;"	e	enum:__anon7
CV_BayerGB2RGB_EA	imgproc/types_c.h	/^    CV_BayerGB2RGB_EA = CV_BayerGR2BGR_EA,$/;"	e	enum:__anon7
CV_BayerGB2RGB_VNG	imgproc/types_c.h	/^    CV_BayerGB2RGB_VNG =CV_BayerGR2BGR_VNG,$/;"	e	enum:__anon7
CV_BayerGR2BGR	imgproc/types_c.h	/^    CV_BayerGR2BGR =49,$/;"	e	enum:__anon7
CV_BayerGR2BGR_EA	imgproc/types_c.h	/^    CV_BayerGR2BGR_EA = 138,$/;"	e	enum:__anon7
CV_BayerGR2BGR_VNG	imgproc/types_c.h	/^    CV_BayerGR2BGR_VNG =65,$/;"	e	enum:__anon7
CV_BayerGR2GRAY	imgproc/types_c.h	/^    CV_BayerGR2GRAY = 89,$/;"	e	enum:__anon7
CV_BayerGR2RGB	imgproc/types_c.h	/^    CV_BayerGR2RGB =CV_BayerGB2BGR,$/;"	e	enum:__anon7
CV_BayerGR2RGB_EA	imgproc/types_c.h	/^    CV_BayerGR2RGB_EA = CV_BayerGB2BGR_EA,$/;"	e	enum:__anon7
CV_BayerGR2RGB_VNG	imgproc/types_c.h	/^    CV_BayerGR2RGB_VNG =CV_BayerGB2BGR_VNG,$/;"	e	enum:__anon7
CV_BayerRG2BGR	imgproc/types_c.h	/^    CV_BayerRG2BGR =48,$/;"	e	enum:__anon7
CV_BayerRG2BGR_EA	imgproc/types_c.h	/^    CV_BayerRG2BGR_EA = 137,$/;"	e	enum:__anon7
CV_BayerRG2BGR_VNG	imgproc/types_c.h	/^    CV_BayerRG2BGR_VNG =64,$/;"	e	enum:__anon7
CV_BayerRG2GRAY	imgproc/types_c.h	/^    CV_BayerRG2GRAY = 88,$/;"	e	enum:__anon7
CV_BayerRG2RGB	imgproc/types_c.h	/^    CV_BayerRG2RGB =CV_BayerBG2BGR,$/;"	e	enum:__anon7
CV_BayerRG2RGB_EA	imgproc/types_c.h	/^    CV_BayerRG2RGB_EA = CV_BayerBG2BGR_EA,$/;"	e	enum:__anon7
CV_BayerRG2RGB_VNG	imgproc/types_c.h	/^    CV_BayerRG2RGB_VNG =CV_BayerBG2BGR_VNG,$/;"	e	enum:__anon7
CV_C	core/core_c.h	1456;"	d
CV_CALIB_CB_ADAPTIVE_THRESH	calib3d/calib3d_c.h	208;"	d
CV_CALIB_CB_FAST_CHECK	calib3d/calib3d_c.h	211;"	d
CV_CALIB_CB_FILTER_QUADS	calib3d/calib3d_c.h	210;"	d
CV_CALIB_CB_NORMALIZE_IMAGE	calib3d/calib3d_c.h	209;"	d
CV_CALIB_FIX_ASPECT_RATIO	calib3d/calib3d_c.h	233;"	d
CV_CALIB_FIX_FOCAL_LENGTH	calib3d/calib3d_c.h	236;"	d
CV_CALIB_FIX_INTRINSIC	calib3d/calib3d_c.h	274;"	d
CV_CALIB_FIX_K1	calib3d/calib3d_c.h	237;"	d
CV_CALIB_FIX_K2	calib3d/calib3d_c.h	238;"	d
CV_CALIB_FIX_K3	calib3d/calib3d_c.h	239;"	d
CV_CALIB_FIX_K4	calib3d/calib3d_c.h	240;"	d
CV_CALIB_FIX_K5	calib3d/calib3d_c.h	241;"	d
CV_CALIB_FIX_K6	calib3d/calib3d_c.h	242;"	d
CV_CALIB_FIX_PRINCIPAL_POINT	calib3d/calib3d_c.h	234;"	d
CV_CALIB_FIX_S1_S2_S3_S4	calib3d/calib3d_c.h	245;"	d
CV_CALIB_RATIONAL_MODEL	calib3d/calib3d_c.h	243;"	d
CV_CALIB_SAME_FOCAL_LENGTH	calib3d/calib3d_c.h	275;"	d
CV_CALIB_THIN_PRISM_MODEL	calib3d/calib3d_c.h	244;"	d
CV_CALIB_USE_INTRINSIC_GUESS	calib3d/calib3d_c.h	232;"	d
CV_CALIB_ZERO_DISPARITY	calib3d/calib3d_c.h	290;"	d
CV_CALIB_ZERO_TANGENT_DIST	calib3d/calib3d_c.h	235;"	d
CV_CALL	core/core_c.h	2711;"	d
CV_CANNY_L2_GRADIENT	imgproc/types_c.h	/^    CV_CANNY_L2_GRADIENT  =(1 << 31)$/;"	e	enum:__anon23
CV_CAP_ANDROID	videoio/videoio_c.h	/^    CV_CAP_ANDROID  =1000,  \/\/ Android - not used$/;"	e	enum:__anon63
CV_CAP_ANDROID_BACK	videoio/videoio_c.h	/^    CV_CAP_ANDROID_BACK =CV_CAP_ANDROID+99, \/\/ Android back camera - not used$/;"	e	enum:__anon63
CV_CAP_ANDROID_FRONT	videoio/videoio_c.h	/^    CV_CAP_ANDROID_FRONT =CV_CAP_ANDROID+98, \/\/ Android front camera - not used$/;"	e	enum:__anon63
CV_CAP_ANY	videoio/videoio_c.h	/^    CV_CAP_ANY      =0,     \/\/ autodetect$/;"	e	enum:__anon63
CV_CAP_AVFOUNDATION	videoio/videoio_c.h	/^    CV_CAP_AVFOUNDATION = 1200,  \/\/ AVFoundation framework for iOS (OS X Lion will have the same API)$/;"	e	enum:__anon63
CV_CAP_CMU1394	videoio/videoio_c.h	/^    CV_CAP_CMU1394  =300,$/;"	e	enum:__anon63
CV_CAP_DC1394	videoio/videoio_c.h	/^    CV_CAP_DC1394   =300,$/;"	e	enum:__anon63
CV_CAP_DSHOW	videoio/videoio_c.h	/^    CV_CAP_DSHOW    =700,   \/\/ DirectShow (via videoInput)$/;"	e	enum:__anon63
CV_CAP_FIREWARE	videoio/videoio_c.h	/^    CV_CAP_FIREWARE =300,   \/\/ IEEE 1394 drivers$/;"	e	enum:__anon63
CV_CAP_FIREWIRE	videoio/videoio_c.h	/^    CV_CAP_FIREWIRE =300,$/;"	e	enum:__anon63
CV_CAP_GIGANETIX	videoio/videoio_c.h	/^    CV_CAP_GIGANETIX = 1300,  \/\/ Smartek Giganetix GigEVisionSDK$/;"	e	enum:__anon63
CV_CAP_GPHOTO2	videoio/videoio_c.h	/^    CV_CAP_GPHOTO2 = 1700$/;"	e	enum:__anon63
CV_CAP_GSTREAMER_QUEUE_LENGTH	videoio/videoio_c.h	/^    CV_CAP_GSTREAMER_QUEUE_LENGTH           = 200, \/\/ default is 1$/;"	e	enum:__anon64
CV_CAP_IEEE1394	videoio/videoio_c.h	/^    CV_CAP_IEEE1394 =300,$/;"	e	enum:__anon63
CV_CAP_INTELPERC	videoio/videoio_c.h	/^    CV_CAP_INTELPERC = 1500, \/\/ Intel Perceptual Computing$/;"	e	enum:__anon63
CV_CAP_INTELPERC_DEPTH_GENERATOR	videoio/videoio_c.h	/^    CV_CAP_INTELPERC_DEPTH_GENERATOR = 1 << 29,$/;"	e	enum:__anon64
CV_CAP_INTELPERC_DEPTH_MAP	videoio/videoio_c.h	/^    CV_CAP_INTELPERC_DEPTH_MAP              = 0, \/\/ Each pixel is a 16-bit integer. The value indicates the distance from an object to the camera's XY plane or the Cartesian depth.$/;"	e	enum:__anon68
CV_CAP_INTELPERC_GENERATORS_MASK	videoio/videoio_c.h	/^    CV_CAP_INTELPERC_GENERATORS_MASK = CV_CAP_INTELPERC_DEPTH_GENERATOR + CV_CAP_INTELPERC_IMAGE_GENERATOR$/;"	e	enum:__anon64
CV_CAP_INTELPERC_IMAGE	videoio/videoio_c.h	/^    CV_CAP_INTELPERC_IMAGE                  = 3$/;"	e	enum:__anon68
CV_CAP_INTELPERC_IMAGE_GENERATOR	videoio/videoio_c.h	/^    CV_CAP_INTELPERC_IMAGE_GENERATOR = 1 << 28,$/;"	e	enum:__anon64
CV_CAP_INTELPERC_IR_MAP	videoio/videoio_c.h	/^    CV_CAP_INTELPERC_IR_MAP                 = 2, \/\/ Each pixel is a 16-bit integer. The value indicates the intensity of the reflected laser beam.$/;"	e	enum:__anon68
CV_CAP_INTELPERC_UVDEPTH_MAP	videoio/videoio_c.h	/^    CV_CAP_INTELPERC_UVDEPTH_MAP            = 1, \/\/ Each pixel contains two 32-bit floating point values in the range of 0-1, representing the mapping of depth coordinates to the color coordinates.$/;"	e	enum:__anon68
CV_CAP_MIL	videoio/videoio_c.h	/^    CV_CAP_MIL      =100,   \/\/ MIL proprietary drivers$/;"	e	enum:__anon63
CV_CAP_MODE_BGR	videoio/videoio_c.h	/^    CV_CAP_MODE_BGR  = 0, \/\/ BGR24 (default)$/;"	e	enum:__anon65
CV_CAP_MODE_GRAY	videoio/videoio_c.h	/^    CV_CAP_MODE_GRAY = 2, \/\/ Y8$/;"	e	enum:__anon65
CV_CAP_MODE_RGB	videoio/videoio_c.h	/^    CV_CAP_MODE_RGB  = 1, \/\/ RGB24$/;"	e	enum:__anon65
CV_CAP_MODE_YUYV	videoio/videoio_c.h	/^    CV_CAP_MODE_YUYV = 3  \/\/ YUYV$/;"	e	enum:__anon65
CV_CAP_MSMF	videoio/videoio_c.h	/^    CV_CAP_MSMF     =1400,  \/\/ Microsoft Media Foundation (via videoInput)$/;"	e	enum:__anon63
CV_CAP_OPENNI	videoio/videoio_c.h	/^    CV_CAP_OPENNI   =900,   \/\/ OpenNI (for Kinect)$/;"	e	enum:__anon63
CV_CAP_OPENNI2	videoio/videoio_c.h	/^    CV_CAP_OPENNI2 = 1600,   \/\/ OpenNI2 (for Kinect)$/;"	e	enum:__anon63
CV_CAP_OPENNI_ASUS	videoio/videoio_c.h	/^    CV_CAP_OPENNI_ASUS =910,   \/\/ OpenNI (for Asus Xtion)$/;"	e	enum:__anon63
CV_CAP_OPENNI_BGR_IMAGE	videoio/videoio_c.h	/^    CV_CAP_OPENNI_BGR_IMAGE                 = 5,$/;"	e	enum:__anon66
CV_CAP_OPENNI_DEPTH_GENERATOR	videoio/videoio_c.h	/^    CV_CAP_OPENNI_DEPTH_GENERATOR = 1 << 31,$/;"	e	enum:__anon64
CV_CAP_OPENNI_DEPTH_GENERATOR_BASELINE	videoio/videoio_c.h	/^    CV_CAP_OPENNI_DEPTH_GENERATOR_BASELINE        = CV_CAP_OPENNI_DEPTH_GENERATOR + CV_CAP_PROP_OPENNI_BASELINE,$/;"	e	enum:__anon64
CV_CAP_OPENNI_DEPTH_GENERATOR_FOCAL_LENGTH	videoio/videoio_c.h	/^    CV_CAP_OPENNI_DEPTH_GENERATOR_FOCAL_LENGTH    = CV_CAP_OPENNI_DEPTH_GENERATOR + CV_CAP_PROP_OPENNI_FOCAL_LENGTH,$/;"	e	enum:__anon64
CV_CAP_OPENNI_DEPTH_GENERATOR_REGISTRATION	videoio/videoio_c.h	/^    CV_CAP_OPENNI_DEPTH_GENERATOR_REGISTRATION    = CV_CAP_OPENNI_DEPTH_GENERATOR + CV_CAP_PROP_OPENNI_REGISTRATION,$/;"	e	enum:__anon64
CV_CAP_OPENNI_DEPTH_GENERATOR_REGISTRATION_ON	videoio/videoio_c.h	/^    CV_CAP_OPENNI_DEPTH_GENERATOR_REGISTRATION_ON = CV_CAP_OPENNI_DEPTH_GENERATOR_REGISTRATION,$/;"	e	enum:__anon64
CV_CAP_OPENNI_DEPTH_MAP	videoio/videoio_c.h	/^    CV_CAP_OPENNI_DEPTH_MAP                 = 0, \/\/ Depth values in mm (CV_16UC1)$/;"	e	enum:__anon66
CV_CAP_OPENNI_DISPARITY_MAP	videoio/videoio_c.h	/^    CV_CAP_OPENNI_DISPARITY_MAP             = 2, \/\/ Disparity in pixels (CV_8UC1)$/;"	e	enum:__anon66
CV_CAP_OPENNI_DISPARITY_MAP_32F	videoio/videoio_c.h	/^    CV_CAP_OPENNI_DISPARITY_MAP_32F         = 3, \/\/ Disparity in pixels (CV_32FC1)$/;"	e	enum:__anon66
CV_CAP_OPENNI_GENERATORS_MASK	videoio/videoio_c.h	/^    CV_CAP_OPENNI_GENERATORS_MASK = CV_CAP_OPENNI_DEPTH_GENERATOR + CV_CAP_OPENNI_IMAGE_GENERATOR,$/;"	e	enum:__anon64
CV_CAP_OPENNI_GRAY_IMAGE	videoio/videoio_c.h	/^    CV_CAP_OPENNI_GRAY_IMAGE                = 6$/;"	e	enum:__anon66
CV_CAP_OPENNI_IMAGE_GENERATOR	videoio/videoio_c.h	/^    CV_CAP_OPENNI_IMAGE_GENERATOR = 1 << 30,$/;"	e	enum:__anon64
CV_CAP_OPENNI_IMAGE_GENERATOR_OUTPUT_MODE	videoio/videoio_c.h	/^    CV_CAP_OPENNI_IMAGE_GENERATOR_OUTPUT_MODE     = CV_CAP_OPENNI_IMAGE_GENERATOR + CV_CAP_PROP_OPENNI_OUTPUT_MODE,$/;"	e	enum:__anon64
CV_CAP_OPENNI_IMAGE_GENERATOR_PRESENT	videoio/videoio_c.h	/^    CV_CAP_OPENNI_IMAGE_GENERATOR_PRESENT         = CV_CAP_OPENNI_IMAGE_GENERATOR + CV_CAP_PROP_OPENNI_GENERATOR_PRESENT,$/;"	e	enum:__anon64
CV_CAP_OPENNI_POINT_CLOUD_MAP	videoio/videoio_c.h	/^    CV_CAP_OPENNI_POINT_CLOUD_MAP           = 1, \/\/ XYZ in meters (CV_32FC3)$/;"	e	enum:__anon66
CV_CAP_OPENNI_QVGA_30HZ	videoio/videoio_c.h	/^    CV_CAP_OPENNI_QVGA_30HZ    = 3,$/;"	e	enum:__anon67
CV_CAP_OPENNI_QVGA_60HZ	videoio/videoio_c.h	/^    CV_CAP_OPENNI_QVGA_60HZ    = 4$/;"	e	enum:__anon67
CV_CAP_OPENNI_SXGA_15HZ	videoio/videoio_c.h	/^    CV_CAP_OPENNI_SXGA_15HZ    = 1,$/;"	e	enum:__anon67
CV_CAP_OPENNI_SXGA_30HZ	videoio/videoio_c.h	/^    CV_CAP_OPENNI_SXGA_30HZ    = 2,$/;"	e	enum:__anon67
CV_CAP_OPENNI_VALID_DEPTH_MASK	videoio/videoio_c.h	/^    CV_CAP_OPENNI_VALID_DEPTH_MASK          = 4, \/\/ CV_8UC1$/;"	e	enum:__anon66
CV_CAP_OPENNI_VGA_30HZ	videoio/videoio_c.h	/^    CV_CAP_OPENNI_VGA_30HZ     = 0,$/;"	e	enum:__anon67
CV_CAP_PROP_ANDROID_ANTIBANDING	videoio/videoio_c.h	/^    CV_CAP_PROP_ANDROID_ANTIBANDING = 8004,$/;"	e	enum:__anon64
CV_CAP_PROP_ANDROID_EXPOSE_LOCK	videoio/videoio_c.h	/^    CV_CAP_PROP_ANDROID_EXPOSE_LOCK = 8009,$/;"	e	enum:__anon64
CV_CAP_PROP_ANDROID_FLASH_MODE	videoio/videoio_c.h	/^    CV_CAP_PROP_ANDROID_FLASH_MODE = 8001,$/;"	e	enum:__anon64
CV_CAP_PROP_ANDROID_FOCAL_LENGTH	videoio/videoio_c.h	/^    CV_CAP_PROP_ANDROID_FOCAL_LENGTH = 8005,$/;"	e	enum:__anon64
CV_CAP_PROP_ANDROID_FOCUS_DISTANCE_FAR	videoio/videoio_c.h	/^    CV_CAP_PROP_ANDROID_FOCUS_DISTANCE_FAR = 8008,$/;"	e	enum:__anon64
CV_CAP_PROP_ANDROID_FOCUS_DISTANCE_NEAR	videoio/videoio_c.h	/^    CV_CAP_PROP_ANDROID_FOCUS_DISTANCE_NEAR = 8006,$/;"	e	enum:__anon64
CV_CAP_PROP_ANDROID_FOCUS_DISTANCE_OPTIMAL	videoio/videoio_c.h	/^    CV_CAP_PROP_ANDROID_FOCUS_DISTANCE_OPTIMAL = 8007,$/;"	e	enum:__anon64
CV_CAP_PROP_ANDROID_FOCUS_MODE	videoio/videoio_c.h	/^    CV_CAP_PROP_ANDROID_FOCUS_MODE = 8002,$/;"	e	enum:__anon64
CV_CAP_PROP_ANDROID_WHITEBALANCE_LOCK	videoio/videoio_c.h	/^    CV_CAP_PROP_ANDROID_WHITEBALANCE_LOCK = 8010,$/;"	e	enum:__anon64
CV_CAP_PROP_ANDROID_WHITE_BALANCE	videoio/videoio_c.h	/^    CV_CAP_PROP_ANDROID_WHITE_BALANCE = 8003,$/;"	e	enum:__anon64
CV_CAP_PROP_APERTURE	videoio/videoio_c.h	/^    CV_CAP_PROP_APERTURE                  = 17008, \/\/ Aperture. Can be readonly, depends on camera program.$/;"	e	enum:__anon69
CV_CAP_PROP_AUTOGRAB	videoio/videoio_c.h	/^    CV_CAP_PROP_AUTOGRAB      =1024, \/\/ property for videoio class CvCapture_Android only$/;"	e	enum:__anon64
CV_CAP_PROP_AUTO_EXPOSURE	videoio/videoio_c.h	/^    CV_CAP_PROP_AUTO_EXPOSURE =21, \/\/ exposure control done by camera,$/;"	e	enum:__anon64
CV_CAP_PROP_BACKLIGHT	videoio/videoio_c.h	/^    CV_CAP_PROP_BACKLIGHT     =32,$/;"	e	enum:__anon64
CV_CAP_PROP_BRIGHTNESS	videoio/videoio_c.h	/^    CV_CAP_PROP_BRIGHTNESS    =10,$/;"	e	enum:__anon64
CV_CAP_PROP_BUFFERSIZE	videoio/videoio_c.h	/^    CV_CAP_PROP_BUFFERSIZE    =38,$/;"	e	enum:__anon64
CV_CAP_PROP_CONTRAST	videoio/videoio_c.h	/^    CV_CAP_PROP_CONTRAST      =11,$/;"	e	enum:__anon64
CV_CAP_PROP_CONVERT_RGB	videoio/videoio_c.h	/^    CV_CAP_PROP_CONVERT_RGB   =16,$/;"	e	enum:__anon64
CV_CAP_PROP_DC1394_MODE_AUTO	videoio/videoio_c.h	/^    CV_CAP_PROP_DC1394_MODE_AUTO = -2,$/;"	e	enum:__anon64
CV_CAP_PROP_DC1394_MODE_MANUAL	videoio/videoio_c.h	/^    CV_CAP_PROP_DC1394_MODE_MANUAL = -3, \/\/set automatically when a value of the feature is set by the user$/;"	e	enum:__anon64
CV_CAP_PROP_DC1394_MODE_ONE_PUSH_AUTO	videoio/videoio_c.h	/^    CV_CAP_PROP_DC1394_MODE_ONE_PUSH_AUTO = -1,$/;"	e	enum:__anon64
CV_CAP_PROP_DC1394_OFF	videoio/videoio_c.h	/^    CV_CAP_PROP_DC1394_OFF         = -4,  \/\/turn the feature off (not controlled manually nor automatically)$/;"	e	enum:__anon64
CV_CAP_PROP_EXPOSURE	videoio/videoio_c.h	/^    CV_CAP_PROP_EXPOSURE      =15,$/;"	e	enum:__anon64
CV_CAP_PROP_EXPOSUREPROGRAM	videoio/videoio_c.h	/^    CV_CAP_PROP_EXPOSUREPROGRAM           = 17009, \/\/ Camera exposure program.$/;"	e	enum:__anon69
CV_CAP_PROP_FOCUS	videoio/videoio_c.h	/^    CV_CAP_PROP_FOCUS         =28,$/;"	e	enum:__anon64
CV_CAP_PROP_FORMAT	videoio/videoio_c.h	/^    CV_CAP_PROP_FORMAT         =8,$/;"	e	enum:__anon64
CV_CAP_PROP_FOURCC	videoio/videoio_c.h	/^    CV_CAP_PROP_FOURCC         =6,$/;"	e	enum:__anon64
CV_CAP_PROP_FPS	videoio/videoio_c.h	/^    CV_CAP_PROP_FPS            =5,$/;"	e	enum:__anon64
CV_CAP_PROP_FRAME_COUNT	videoio/videoio_c.h	/^    CV_CAP_PROP_FRAME_COUNT    =7,$/;"	e	enum:__anon64
CV_CAP_PROP_FRAME_HEIGHT	videoio/videoio_c.h	/^    CV_CAP_PROP_FRAME_HEIGHT   =4,$/;"	e	enum:__anon64
CV_CAP_PROP_FRAME_WIDTH	videoio/videoio_c.h	/^    CV_CAP_PROP_FRAME_WIDTH    =3,$/;"	e	enum:__anon64
CV_CAP_PROP_GAIN	videoio/videoio_c.h	/^    CV_CAP_PROP_GAIN          =14,$/;"	e	enum:__anon64
CV_CAP_PROP_GAMMA	videoio/videoio_c.h	/^    CV_CAP_PROP_GAMMA         =22,$/;"	e	enum:__anon64
CV_CAP_PROP_GIGA_FRAME_HEIGH_MAX	videoio/videoio_c.h	/^    CV_CAP_PROP_GIGA_FRAME_HEIGH_MAX = 10004,$/;"	e	enum:__anon64
CV_CAP_PROP_GIGA_FRAME_OFFSET_X	videoio/videoio_c.h	/^    CV_CAP_PROP_GIGA_FRAME_OFFSET_X = 10001,$/;"	e	enum:__anon64
CV_CAP_PROP_GIGA_FRAME_OFFSET_Y	videoio/videoio_c.h	/^    CV_CAP_PROP_GIGA_FRAME_OFFSET_Y = 10002,$/;"	e	enum:__anon64
CV_CAP_PROP_GIGA_FRAME_SENS_HEIGH	videoio/videoio_c.h	/^    CV_CAP_PROP_GIGA_FRAME_SENS_HEIGH = 10006,$/;"	e	enum:__anon64
CV_CAP_PROP_GIGA_FRAME_SENS_WIDTH	videoio/videoio_c.h	/^    CV_CAP_PROP_GIGA_FRAME_SENS_WIDTH = 10005,$/;"	e	enum:__anon64
CV_CAP_PROP_GIGA_FRAME_WIDTH_MAX	videoio/videoio_c.h	/^    CV_CAP_PROP_GIGA_FRAME_WIDTH_MAX = 10003,$/;"	e	enum:__anon64
CV_CAP_PROP_GPHOTO2_COLLECT_MSGS	videoio/videoio_c.h	/^    CV_CAP_PROP_GPHOTO2_COLLECT_MSGS      = 17005, \/\/ Collect messages with details.$/;"	e	enum:__anon69
CV_CAP_PROP_GPHOTO2_FLUSH_MSGS	videoio/videoio_c.h	/^    CV_CAP_PROP_GPHOTO2_FLUSH_MSGS        = 17006, \/\/ Readonly, returns (const char *).$/;"	e	enum:__anon69
CV_CAP_PROP_GPHOTO2_PREVIEW	videoio/videoio_c.h	/^    CV_CAP_PROP_GPHOTO2_PREVIEW           = 17001, \/\/ Capture only preview from liveview mode.$/;"	e	enum:__anon69
CV_CAP_PROP_GPHOTO2_RELOAD_CONFIG	videoio/videoio_c.h	/^    CV_CAP_PROP_GPHOTO2_RELOAD_CONFIG     = 17003, \/\/ Trigger, only by set. Reload camera settings.$/;"	e	enum:__anon69
CV_CAP_PROP_GPHOTO2_RELOAD_ON_CHANGE	videoio/videoio_c.h	/^    CV_CAP_PROP_GPHOTO2_RELOAD_ON_CHANGE  = 17004, \/\/ Reload all settings on set.$/;"	e	enum:__anon69
CV_CAP_PROP_GPHOTO2_WIDGET_ENUMERATE	videoio/videoio_c.h	/^    CV_CAP_PROP_GPHOTO2_WIDGET_ENUMERATE  = 17002, \/\/ Readonly, returns (const char *).$/;"	e	enum:__anon69
CV_CAP_PROP_GUID	videoio/videoio_c.h	/^    CV_CAP_PROP_GUID          =29,$/;"	e	enum:__anon64
CV_CAP_PROP_HUE	videoio/videoio_c.h	/^    CV_CAP_PROP_HUE           =13,$/;"	e	enum:__anon64
CV_CAP_PROP_INTELPERC_DEPTH_CONFIDENCE_THRESHOLD	videoio/videoio_c.h	/^    CV_CAP_PROP_INTELPERC_DEPTH_CONFIDENCE_THRESHOLD  = 11005,$/;"	e	enum:__anon64
CV_CAP_PROP_INTELPERC_DEPTH_FOCAL_LENGTH_HORZ	videoio/videoio_c.h	/^    CV_CAP_PROP_INTELPERC_DEPTH_FOCAL_LENGTH_HORZ     = 11006,$/;"	e	enum:__anon64
CV_CAP_PROP_INTELPERC_DEPTH_FOCAL_LENGTH_VERT	videoio/videoio_c.h	/^    CV_CAP_PROP_INTELPERC_DEPTH_FOCAL_LENGTH_VERT     = 11007,$/;"	e	enum:__anon64
CV_CAP_PROP_INTELPERC_DEPTH_LOW_CONFIDENCE_VALUE	videoio/videoio_c.h	/^    CV_CAP_PROP_INTELPERC_DEPTH_LOW_CONFIDENCE_VALUE  = 11003,$/;"	e	enum:__anon64
CV_CAP_PROP_INTELPERC_DEPTH_SATURATION_VALUE	videoio/videoio_c.h	/^    CV_CAP_PROP_INTELPERC_DEPTH_SATURATION_VALUE      = 11004,$/;"	e	enum:__anon64
CV_CAP_PROP_INTELPERC_PROFILE_COUNT	videoio/videoio_c.h	/^    CV_CAP_PROP_INTELPERC_PROFILE_COUNT               = 11001,$/;"	e	enum:__anon64
CV_CAP_PROP_INTELPERC_PROFILE_IDX	videoio/videoio_c.h	/^    CV_CAP_PROP_INTELPERC_PROFILE_IDX                 = 11002,$/;"	e	enum:__anon64
CV_CAP_PROP_IOS_DEVICE_EXPOSURE	videoio/videoio_c.h	/^    CV_CAP_PROP_IOS_DEVICE_EXPOSURE = 9002,$/;"	e	enum:__anon64
CV_CAP_PROP_IOS_DEVICE_FLASH	videoio/videoio_c.h	/^    CV_CAP_PROP_IOS_DEVICE_FLASH = 9003,$/;"	e	enum:__anon64
CV_CAP_PROP_IOS_DEVICE_FOCUS	videoio/videoio_c.h	/^    CV_CAP_PROP_IOS_DEVICE_FOCUS = 9001,$/;"	e	enum:__anon64
CV_CAP_PROP_IOS_DEVICE_TORCH	videoio/videoio_c.h	/^    CV_CAP_PROP_IOS_DEVICE_TORCH = 9005,$/;"	e	enum:__anon64
CV_CAP_PROP_IOS_DEVICE_WHITEBALANCE	videoio/videoio_c.h	/^    CV_CAP_PROP_IOS_DEVICE_WHITEBALANCE = 9004,$/;"	e	enum:__anon64
CV_CAP_PROP_IRIS	videoio/videoio_c.h	/^    CV_CAP_PROP_IRIS          =36,$/;"	e	enum:__anon64
CV_CAP_PROP_ISO_SPEED	videoio/videoio_c.h	/^    CV_CAP_PROP_ISO_SPEED     =30,$/;"	e	enum:__anon64
CV_CAP_PROP_MAX_DC1394	videoio/videoio_c.h	/^    CV_CAP_PROP_MAX_DC1394    =31,$/;"	e	enum:__anon64
CV_CAP_PROP_MODE	videoio/videoio_c.h	/^    CV_CAP_PROP_MODE           =9,$/;"	e	enum:__anon64
CV_CAP_PROP_MONOCHROME	videoio/videoio_c.h	/^    CV_CAP_PROP_MONOCHROME    =19,$/;"	e	enum:__anon64
CV_CAP_PROP_OPENNI2_MIRROR	videoio/videoio_c.h	/^    CV_CAP_PROP_OPENNI2_MIRROR = 111,$/;"	e	enum:__anon64
CV_CAP_PROP_OPENNI2_SYNC	videoio/videoio_c.h	/^    CV_CAP_PROP_OPENNI2_SYNC = 110,$/;"	e	enum:__anon64
CV_CAP_PROP_OPENNI_APPROX_FRAME_SYNC	videoio/videoio_c.h	/^    CV_CAP_PROP_OPENNI_APPROX_FRAME_SYNC = 105,$/;"	e	enum:__anon64
CV_CAP_PROP_OPENNI_BASELINE	videoio/videoio_c.h	/^    CV_CAP_PROP_OPENNI_BASELINE        = 102, \/\/ in mm$/;"	e	enum:__anon64
CV_CAP_PROP_OPENNI_CIRCLE_BUFFER	videoio/videoio_c.h	/^    CV_CAP_PROP_OPENNI_CIRCLE_BUFFER     = 107,$/;"	e	enum:__anon64
CV_CAP_PROP_OPENNI_FOCAL_LENGTH	videoio/videoio_c.h	/^    CV_CAP_PROP_OPENNI_FOCAL_LENGTH    = 103, \/\/ in pixels$/;"	e	enum:__anon64
CV_CAP_PROP_OPENNI_FRAME_MAX_DEPTH	videoio/videoio_c.h	/^    CV_CAP_PROP_OPENNI_FRAME_MAX_DEPTH = 101, \/\/ in mm$/;"	e	enum:__anon64
CV_CAP_PROP_OPENNI_GENERATOR_PRESENT	videoio/videoio_c.h	/^    CV_CAP_PROP_OPENNI_GENERATOR_PRESENT = 109,$/;"	e	enum:__anon64
CV_CAP_PROP_OPENNI_MAX_BUFFER_SIZE	videoio/videoio_c.h	/^    CV_CAP_PROP_OPENNI_MAX_BUFFER_SIZE   = 106,$/;"	e	enum:__anon64
CV_CAP_PROP_OPENNI_MAX_TIME_DURATION	videoio/videoio_c.h	/^    CV_CAP_PROP_OPENNI_MAX_TIME_DURATION = 108,$/;"	e	enum:__anon64
CV_CAP_PROP_OPENNI_OUTPUT_MODE	videoio/videoio_c.h	/^    CV_CAP_PROP_OPENNI_OUTPUT_MODE     = 100,$/;"	e	enum:__anon64
CV_CAP_PROP_OPENNI_REGISTRATION	videoio/videoio_c.h	/^    CV_CAP_PROP_OPENNI_REGISTRATION    = 104, \/\/ flag$/;"	e	enum:__anon64
CV_CAP_PROP_OPENNI_REGISTRATION_ON	videoio/videoio_c.h	/^    CV_CAP_PROP_OPENNI_REGISTRATION_ON = CV_CAP_PROP_OPENNI_REGISTRATION, \/\/ flag that synchronizes the remapping depth map to image map$/;"	e	enum:__anon64
CV_CAP_PROP_PAN	videoio/videoio_c.h	/^    CV_CAP_PROP_PAN           =33,$/;"	e	enum:__anon64
CV_CAP_PROP_POS_AVI_RATIO	videoio/videoio_c.h	/^    CV_CAP_PROP_POS_AVI_RATIO  =2,$/;"	e	enum:__anon64
CV_CAP_PROP_POS_FRAMES	videoio/videoio_c.h	/^    CV_CAP_PROP_POS_FRAMES     =1,$/;"	e	enum:__anon64
CV_CAP_PROP_POS_MSEC	videoio/videoio_c.h	/^    CV_CAP_PROP_POS_MSEC       =0,$/;"	e	enum:__anon64
CV_CAP_PROP_PREVIEW_FORMAT	videoio/videoio_c.h	/^    CV_CAP_PROP_PREVIEW_FORMAT=1026, \/\/ readonly, tricky property, returns cpnst char* indeed$/;"	e	enum:__anon64
CV_CAP_PROP_PVAPI_BINNINGX	videoio/videoio_c.h	/^    CV_CAP_PROP_PVAPI_BINNINGX              = 304, \/\/ Horizontal binning factor$/;"	e	enum:__anon64
CV_CAP_PROP_PVAPI_BINNINGY	videoio/videoio_c.h	/^    CV_CAP_PROP_PVAPI_BINNINGY              = 305, \/\/ Vertical binning factor$/;"	e	enum:__anon64
CV_CAP_PROP_PVAPI_DECIMATIONHORIZONTAL	videoio/videoio_c.h	/^    CV_CAP_PROP_PVAPI_DECIMATIONHORIZONTAL  = 302, \/\/ Horizontal sub-sampling of the image$/;"	e	enum:__anon64
CV_CAP_PROP_PVAPI_DECIMATIONVERTICAL	videoio/videoio_c.h	/^    CV_CAP_PROP_PVAPI_DECIMATIONVERTICAL    = 303, \/\/ Vertical sub-sampling of the image$/;"	e	enum:__anon64
CV_CAP_PROP_PVAPI_FRAMESTARTTRIGGERMODE	videoio/videoio_c.h	/^    CV_CAP_PROP_PVAPI_FRAMESTARTTRIGGERMODE = 301, \/\/ FrameStartTriggerMode: Determines how a frame is initiated$/;"	e	enum:__anon64
CV_CAP_PROP_PVAPI_MULTICASTIP	videoio/videoio_c.h	/^    CV_CAP_PROP_PVAPI_MULTICASTIP           = 300, \/\/ ip for anable multicast master mode. 0 for disable multicast$/;"	e	enum:__anon64
CV_CAP_PROP_PVAPI_PIXELFORMAT	videoio/videoio_c.h	/^    CV_CAP_PROP_PVAPI_PIXELFORMAT           = 306, \/\/ Pixel format$/;"	e	enum:__anon64
CV_CAP_PROP_RECTIFICATION	videoio/videoio_c.h	/^    CV_CAP_PROP_RECTIFICATION =18,$/;"	e	enum:__anon64
CV_CAP_PROP_ROLL	videoio/videoio_c.h	/^    CV_CAP_PROP_ROLL          =35,$/;"	e	enum:__anon64
CV_CAP_PROP_SATURATION	videoio/videoio_c.h	/^    CV_CAP_PROP_SATURATION    =12,$/;"	e	enum:__anon64
CV_CAP_PROP_SETTINGS	videoio/videoio_c.h	/^    CV_CAP_PROP_SETTINGS      =37,$/;"	e	enum:__anon64
CV_CAP_PROP_SHARPNESS	videoio/videoio_c.h	/^    CV_CAP_PROP_SHARPNESS     =20,$/;"	e	enum:__anon64
CV_CAP_PROP_SPEED	videoio/videoio_c.h	/^    CV_CAP_PROP_SPEED                     = 17007, \/\/ Exposure speed. Can be readonly, depends on camera program.$/;"	e	enum:__anon69
CV_CAP_PROP_SUPPORTED_PREVIEW_SIZES_STRING	videoio/videoio_c.h	/^    CV_CAP_PROP_SUPPORTED_PREVIEW_SIZES_STRING=1025, \/\/ readonly, tricky property, returns cpnst char* indeed$/;"	e	enum:__anon64
CV_CAP_PROP_TEMPERATURE	videoio/videoio_c.h	/^    CV_CAP_PROP_TEMPERATURE   =23,$/;"	e	enum:__anon64
CV_CAP_PROP_TILT	videoio/videoio_c.h	/^    CV_CAP_PROP_TILT          =34,$/;"	e	enum:__anon64
CV_CAP_PROP_TRIGGER	videoio/videoio_c.h	/^    CV_CAP_PROP_TRIGGER       =24,$/;"	e	enum:__anon64
CV_CAP_PROP_TRIGGER_DELAY	videoio/videoio_c.h	/^    CV_CAP_PROP_TRIGGER_DELAY =25,$/;"	e	enum:__anon64
CV_CAP_PROP_VIEWFINDER	videoio/videoio_c.h	/^    CV_CAP_PROP_VIEWFINDER                = 17010  \/\/ Enter liveview mode.$/;"	e	enum:__anon69
CV_CAP_PROP_WHITE_BALANCE_BLUE_U	videoio/videoio_c.h	/^    CV_CAP_PROP_WHITE_BALANCE_BLUE_U =17,$/;"	e	enum:__anon64
CV_CAP_PROP_WHITE_BALANCE_RED_V	videoio/videoio_c.h	/^    CV_CAP_PROP_WHITE_BALANCE_RED_V =26,$/;"	e	enum:__anon64
CV_CAP_PROP_XI_AEAG	videoio/videoio_c.h	/^    CV_CAP_PROP_XI_AEAG          = 415,      \/\/ Automatic exposure\/gain$/;"	e	enum:__anon64
CV_CAP_PROP_XI_AEAG_LEVEL	videoio/videoio_c.h	/^    CV_CAP_PROP_XI_AEAG_LEVEL    = 419,       \/\/ Average intensity of output signal AEAG should achieve(in %)$/;"	e	enum:__anon64
CV_CAP_PROP_XI_AE_MAX_LIMIT	videoio/videoio_c.h	/^    CV_CAP_PROP_XI_AE_MAX_LIMIT  = 417,      \/\/ Maximum limit of exposure in AEAG procedure$/;"	e	enum:__anon64
CV_CAP_PROP_XI_AG_MAX_LIMIT	videoio/videoio_c.h	/^    CV_CAP_PROP_XI_AG_MAX_LIMIT  = 418,      \/\/ Maximum limit of gain in AEAG procedure$/;"	e	enum:__anon64
CV_CAP_PROP_XI_AUTO_WB	videoio/videoio_c.h	/^    CV_CAP_PROP_XI_AUTO_WB       = 414,      \/\/ Automatic white balance$/;"	e	enum:__anon64
CV_CAP_PROP_XI_DATA_FORMAT	videoio/videoio_c.h	/^    CV_CAP_PROP_XI_DATA_FORMAT   = 401,       \/\/ Output data format.$/;"	e	enum:__anon64
CV_CAP_PROP_XI_DOWNSAMPLING	videoio/videoio_c.h	/^    CV_CAP_PROP_XI_DOWNSAMPLING  = 400,      \/\/ Change image resolution by binning or skipping.$/;"	e	enum:__anon64
CV_CAP_PROP_XI_EXP_PRIORITY	videoio/videoio_c.h	/^    CV_CAP_PROP_XI_EXP_PRIORITY  = 416,      \/\/ Exposure priority (0.5 - exposure 50%, gain 50%).$/;"	e	enum:__anon64
CV_CAP_PROP_XI_GPI_LEVEL	videoio/videoio_c.h	/^    CV_CAP_PROP_XI_GPI_LEVEL     = 408,      \/\/ Get general purpose level$/;"	e	enum:__anon64
CV_CAP_PROP_XI_GPI_MODE	videoio/videoio_c.h	/^    CV_CAP_PROP_XI_GPI_MODE      = 407,      \/\/ Set general purpose input mode$/;"	e	enum:__anon64
CV_CAP_PROP_XI_GPI_SELECTOR	videoio/videoio_c.h	/^    CV_CAP_PROP_XI_GPI_SELECTOR  = 406,      \/\/ Selects general purpose input$/;"	e	enum:__anon64
CV_CAP_PROP_XI_GPO_MODE	videoio/videoio_c.h	/^    CV_CAP_PROP_XI_GPO_MODE      = 410,      \/\/ Set general purpose output mode$/;"	e	enum:__anon64
CV_CAP_PROP_XI_GPO_SELECTOR	videoio/videoio_c.h	/^    CV_CAP_PROP_XI_GPO_SELECTOR  = 409,      \/\/ Selects general purpose output$/;"	e	enum:__anon64
CV_CAP_PROP_XI_LED_MODE	videoio/videoio_c.h	/^    CV_CAP_PROP_XI_LED_MODE      = 412,      \/\/ Define camera signalling LED functionality$/;"	e	enum:__anon64
CV_CAP_PROP_XI_LED_SELECTOR	videoio/videoio_c.h	/^    CV_CAP_PROP_XI_LED_SELECTOR  = 411,      \/\/ Selects camera signalling LED$/;"	e	enum:__anon64
CV_CAP_PROP_XI_MANUAL_WB	videoio/videoio_c.h	/^    CV_CAP_PROP_XI_MANUAL_WB     = 413,      \/\/ Calculates White Balance(must be called during acquisition)$/;"	e	enum:__anon64
CV_CAP_PROP_XI_OFFSET_X	videoio/videoio_c.h	/^    CV_CAP_PROP_XI_OFFSET_X      = 402,      \/\/ Horizontal offset from the origin to the area of interest (in pixels).$/;"	e	enum:__anon64
CV_CAP_PROP_XI_OFFSET_Y	videoio/videoio_c.h	/^    CV_CAP_PROP_XI_OFFSET_Y      = 403,      \/\/ Vertical offset from the origin to the area of interest (in pixels).$/;"	e	enum:__anon64
CV_CAP_PROP_XI_TIMEOUT	videoio/videoio_c.h	/^    CV_CAP_PROP_XI_TIMEOUT       = 420,       \/\/ Image capture timeout in milliseconds$/;"	e	enum:__anon64
CV_CAP_PROP_XI_TRG_SOFTWARE	videoio/videoio_c.h	/^    CV_CAP_PROP_XI_TRG_SOFTWARE  = 405,      \/\/ Generates an internal trigger. PRM_TRG_SOURCE must be set to TRG_SOFTWARE.$/;"	e	enum:__anon64
CV_CAP_PROP_XI_TRG_SOURCE	videoio/videoio_c.h	/^    CV_CAP_PROP_XI_TRG_SOURCE    = 404,      \/\/ Defines source of trigger.$/;"	e	enum:__anon64
CV_CAP_PROP_ZOOM	videoio/videoio_c.h	/^    CV_CAP_PROP_ZOOM          =27,$/;"	e	enum:__anon64
CV_CAP_PVAPI	videoio/videoio_c.h	/^    CV_CAP_PVAPI    =800,   \/\/ PvAPI, Prosilica GigE SDK$/;"	e	enum:__anon63
CV_CAP_QT	videoio/videoio_c.h	/^    CV_CAP_QT       =500,   \/\/ QuickTime$/;"	e	enum:__anon63
CV_CAP_STEREO	videoio/videoio_c.h	/^    CV_CAP_STEREO   =400,   \/\/ TYZX proprietary drivers$/;"	e	enum:__anon63
CV_CAP_TYZX	videoio/videoio_c.h	/^    CV_CAP_TYZX     =400,$/;"	e	enum:__anon63
CV_CAP_UNICAP	videoio/videoio_c.h	/^    CV_CAP_UNICAP   =600,   \/\/ Unicap drivers$/;"	e	enum:__anon63
CV_CAP_V4L	videoio/videoio_c.h	/^    CV_CAP_V4L      =200,$/;"	e	enum:__anon63
CV_CAP_V4L2	videoio/videoio_c.h	/^    CV_CAP_V4L2     =200,$/;"	e	enum:__anon63
CV_CAP_VFW	videoio/videoio_c.h	/^    CV_CAP_VFW      =200,   \/\/ platform native$/;"	e	enum:__anon63
CV_CAP_XIAPI	videoio/videoio_c.h	/^    CV_CAP_XIAPI    =1100,   \/\/ XIMEA Camera API$/;"	e	enum:__anon63
CV_CDECL	core/types_c.h	69;"	d
CV_CDECL	core/types_c.h	72;"	d
CV_CHAIN_APPROX_NONE	imgproc/types_c.h	/^    CV_CHAIN_APPROX_NONE=1,$/;"	e	enum:__anon13
CV_CHAIN_APPROX_SIMPLE	imgproc/types_c.h	/^    CV_CHAIN_APPROX_SIMPLE=2,$/;"	e	enum:__anon13
CV_CHAIN_APPROX_TC89_KCOS	imgproc/types_c.h	/^    CV_CHAIN_APPROX_TC89_KCOS=4,$/;"	e	enum:__anon13
CV_CHAIN_APPROX_TC89_L1	imgproc/types_c.h	/^    CV_CHAIN_APPROX_TC89_L1=3,$/;"	e	enum:__anon13
CV_CHAIN_CODE	imgproc/types_c.h	/^    CV_CHAIN_CODE=0,$/;"	e	enum:__anon13
CV_CHECK	core/core_c.h	2699;"	d
CV_CHECKBOX	highgui/highgui_c.h	/^enum {CV_PUSH_BUTTON = 0, CV_CHECKBOX = 1, CV_RADIOBOX = 2};$/;"	e	enum:__anon444
CV_CHECK_QUIET	core/core_c.h	1216;"	d
CV_CHECK_RANGE	core/core_c.h	1215;"	d
CV_CHOLESKY	core/core_c.h	1344;"	d
CV_CLOCKWISE	imgproc/types_c.h	/^    CV_CLOCKWISE         =1,$/;"	e	enum:__anon15
CV_CMP	core/types_c.h	194;"	d
CV_CMP_EQ	core/core_c.h	1143;"	d
CV_CMP_GE	core/core_c.h	1145;"	d
CV_CMP_GT	core/core_c.h	1144;"	d
CV_CMP_LE	core/core_c.h	1147;"	d
CV_CMP_LT	core/core_c.h	1146;"	d
CV_CMP_NE	core/core_c.h	1148;"	d
CV_CN_MAX	core/cvdef.h	97;"	d
CV_CN_SHIFT	core/cvdef.h	98;"	d
CV_COLORCVT_MAX	imgproc/types_c.h	/^    CV_COLORCVT_MAX  = 139$/;"	e	enum:__anon7
CV_COMP_BHATTACHARYYA	imgproc/types_c.h	/^    CV_COMP_BHATTACHARYYA =3,$/;"	e	enum:__anon16
CV_COMP_CHISQR	imgproc/types_c.h	/^    CV_COMP_CHISQR        =1,$/;"	e	enum:__anon16
CV_COMP_CHISQR_ALT	imgproc/types_c.h	/^    CV_COMP_CHISQR_ALT    =4,$/;"	e	enum:__anon16
CV_COMP_CORREL	imgproc/types_c.h	/^    CV_COMP_CORREL        =0,$/;"	e	enum:__anon16
CV_COMP_HELLINGER	imgproc/types_c.h	/^    CV_COMP_HELLINGER     =CV_COMP_BHATTACHARYYA,$/;"	e	enum:__anon16
CV_COMP_INTERSECT	imgproc/types_c.h	/^    CV_COMP_INTERSECT     =2,$/;"	e	enum:__anon16
CV_COMP_KL_DIV	imgproc/types_c.h	/^    CV_COMP_KL_DIV        =5$/;"	e	enum:__anon16
CV_CONTOURS_MATCH_I1	imgproc/types_c.h	/^    CV_CONTOURS_MATCH_I1  =1, \/\/!< \\f[I_1(A,B) =  \\sum _{i=1...7}  \\left |  \\frac{1}{m^A_i} -  \\frac{1}{m^B_i} \\right |\\f]$/;"	e	enum:ShapeMatchModes
CV_CONTOURS_MATCH_I2	imgproc/types_c.h	/^    CV_CONTOURS_MATCH_I2  =2, \/\/!< \\f[I_2(A,B) =  \\sum _{i=1...7}  \\left | m^A_i - m^B_i  \\right |\\f]$/;"	e	enum:ShapeMatchModes
CV_CONTOURS_MATCH_I3	imgproc/types_c.h	/^    CV_CONTOURS_MATCH_I3  =3  \/\/!< \\f[I_3(A,B) =  \\max _{i=1...7}  \\frac{ \\left| m^A_i - m^B_i \\right| }{ \\left| m^A_i \\right| }\\f]$/;"	e	enum:ShapeMatchModes
CV_CONTOUR_FIELDS	core/types_c.h	1373;"	d
CV_COUNTER_CLOCKWISE	imgproc/types_c.h	/^    CV_COUNTER_CLOCKWISE =2$/;"	e	enum:__anon15
CV_COVAR_COLS	core/core_c.h	1403;"	d
CV_COVAR_NORMAL	core/core_c.h	1390;"	d
CV_COVAR_ROWS	core/core_c.h	1400;"	d
CV_COVAR_SCALE	core/core_c.h	1397;"	d
CV_COVAR_SCRAMBLED	core/core_c.h	1387;"	d
CV_COVAR_USE_AVG	core/core_c.h	1394;"	d
CV_CPU_AVX	hal/defs.h	101;"	d
CV_CPU_AVX2	hal/defs.h	102;"	d
CV_CPU_AVX_512BW	hal/defs.h	106;"	d
CV_CPU_AVX_512CD	hal/defs.h	107;"	d
CV_CPU_AVX_512DQ	hal/defs.h	108;"	d
CV_CPU_AVX_512ER	hal/defs.h	109;"	d
CV_CPU_AVX_512F	hal/defs.h	105;"	d
CV_CPU_AVX_512IFMA512	hal/defs.h	110;"	d
CV_CPU_AVX_512PF	hal/defs.h	111;"	d
CV_CPU_AVX_512VBMI	hal/defs.h	112;"	d
CV_CPU_AVX_512VL	hal/defs.h	113;"	d
CV_CPU_FMA3	hal/defs.h	103;"	d
CV_CPU_MMX	hal/defs.h	92;"	d
CV_CPU_NEON	hal/defs.h	115;"	d
CV_CPU_NONE	hal/defs.h	91;"	d
CV_CPU_POPCNT	hal/defs.h	99;"	d
CV_CPU_SSE	hal/defs.h	93;"	d
CV_CPU_SSE2	hal/defs.h	94;"	d
CV_CPU_SSE3	hal/defs.h	95;"	d
CV_CPU_SSE4_1	hal/defs.h	97;"	d
CV_CPU_SSE4_2	hal/defs.h	98;"	d
CV_CPU_SSSE3	hal/defs.h	96;"	d
CV_CUDA_TEST_MAIN	ts/cuda_test.hpp	354;"	d
CV_CUDEV_ARCH	cudev/common.hpp	63;"	d
CV_CUDEV_BINARY_FUNCTION_INST	cudev/functional/functional.hpp	543;"	d
CV_CUDEV_BINARY_FUNCTION_INST	cudev/functional/functional.hpp	611;"	d
CV_CUDEV_DATA_TYPE_INST	cudev/util/vec_traits.hpp	206;"	d
CV_CUDEV_DATA_TYPE_INST	cudev/util/vec_traits.hpp	257;"	d
CV_CUDEV_DESCALE	cudev/functional/detail/color_cvt.hpp	1279;"	d
CV_CUDEV_DESCALE	cudev/functional/detail/color_cvt.hpp	61;"	d
CV_CUDEV_EXPR_BINARY_FUNC	cudev/expr/binary_func.hpp	61;"	d
CV_CUDEV_EXPR_BINARY_FUNC	cudev/expr/binary_func.hpp	74;"	d
CV_CUDEV_EXPR_BINOP_INST	cudev/expr/binary_op.hpp	234;"	d
CV_CUDEV_EXPR_BINOP_INST	cudev/expr/binary_op.hpp	66;"	d
CV_CUDEV_EXPR_CVTCOLOR_INST	cudev/expr/color.hpp	281;"	d
CV_CUDEV_EXPR_CVTCOLOR_INST	cudev/expr/color.hpp	60;"	d
CV_CUDEV_EXPR_UNARY_FUNC	cudev/expr/unary_func.hpp	60;"	d
CV_CUDEV_EXPR_UNARY_FUNC	cudev/expr/unary_func.hpp	90;"	d
CV_CUDEV_EXPR_UNOP_INST	cudev/expr/unary_op.hpp	63;"	d
CV_CUDEV_EXPR_UNOP_INST	cudev/expr/unary_op.hpp	93;"	d
CV_CUDEV_GRAY2RGB5x5_INST	cudev/functional/color_cvt.hpp	457;"	d
CV_CUDEV_GRAY2RGB5x5_INST	cudev/functional/color_cvt.hpp	463;"	d
CV_CUDEV_GRAY2RGB_INST	cudev/functional/color_cvt.hpp	89;"	d
CV_CUDEV_GRAY2RGB_INST	cudev/functional/color_cvt.hpp	97;"	d
CV_CUDEV_HLS2RGB_INST	cudev/functional/color_cvt.hpp	290;"	d
CV_CUDEV_HLS2RGB_INST	cudev/functional/color_cvt.hpp	313;"	d
CV_CUDEV_HSV2RGB_INST	cudev/functional/color_cvt.hpp	236;"	d
CV_CUDEV_HSV2RGB_INST	cudev/functional/color_cvt.hpp	259;"	d
CV_CUDEV_IMPLEMENT_SCALAR_BINARY_FUNC	core/cuda/vec_math.hpp	814;"	d
CV_CUDEV_IMPLEMENT_SCALAR_BINARY_FUNC	core/cuda/vec_math.hpp	924;"	d
CV_CUDEV_IMPLEMENT_SCALAR_BINARY_FUNC	cudev/util/vec_math.hpp	825;"	d
CV_CUDEV_IMPLEMENT_SCALAR_BINARY_FUNC	cudev/util/vec_math.hpp	935;"	d
CV_CUDEV_IMPLEMENT_SCALAR_BINARY_OP	core/cuda/vec_math.hpp	537;"	d
CV_CUDEV_IMPLEMENT_SCALAR_BINARY_OP	core/cuda/vec_math.hpp	752;"	d
CV_CUDEV_IMPLEMENT_SCALAR_BINARY_OP	cudev/util/vec_math.hpp	548;"	d
CV_CUDEV_IMPLEMENT_SCALAR_BINARY_OP	cudev/util/vec_math.hpp	763;"	d
CV_CUDEV_IMPLEMENT_VEC_BINARY_FUNC	core/cuda/vec_math.hpp	756;"	d
CV_CUDEV_IMPLEMENT_VEC_BINARY_FUNC	core/cuda/vec_math.hpp	810;"	d
CV_CUDEV_IMPLEMENT_VEC_BINARY_FUNC	cudev/util/vec_math.hpp	767;"	d
CV_CUDEV_IMPLEMENT_VEC_BINARY_FUNC	cudev/util/vec_math.hpp	821;"	d
CV_CUDEV_IMPLEMENT_VEC_BINARY_OP	core/cuda/vec_math.hpp	386;"	d
CV_CUDEV_IMPLEMENT_VEC_BINARY_OP	core/cuda/vec_math.hpp	533;"	d
CV_CUDEV_IMPLEMENT_VEC_BINARY_OP	cudev/util/vec_math.hpp	397;"	d
CV_CUDEV_IMPLEMENT_VEC_BINARY_OP	cudev/util/vec_math.hpp	544;"	d
CV_CUDEV_IMPLEMENT_VEC_UNARY_FUNC	core/cuda/vec_math.hpp	184;"	d
CV_CUDEV_IMPLEMENT_VEC_UNARY_FUNC	core/cuda/vec_math.hpp	382;"	d
CV_CUDEV_IMPLEMENT_VEC_UNARY_FUNC	cudev/util/vec_math.hpp	182;"	d
CV_CUDEV_IMPLEMENT_VEC_UNARY_FUNC	cudev/util/vec_math.hpp	393;"	d
CV_CUDEV_IMPLEMENT_VEC_UNARY_OP	core/cuda/vec_math.hpp	140;"	d
CV_CUDEV_IMPLEMENT_VEC_UNARY_OP	core/cuda/vec_math.hpp	180;"	d
CV_CUDEV_IMPLEMENT_VEC_UNARY_OP	cudev/util/vec_math.hpp	138;"	d
CV_CUDEV_IMPLEMENT_VEC_UNARY_OP	cudev/util/vec_math.hpp	178;"	d
CV_CUDEV_Lab2RGB_INST	cudev/functional/color_cvt.hpp	344;"	d
CV_CUDEV_Lab2RGB_INST	cudev/functional/color_cvt.hpp	367;"	d
CV_CUDEV_Luv2RGB_INST	cudev/functional/color_cvt.hpp	398;"	d
CV_CUDEV_Luv2RGB_INST	cudev/functional/color_cvt.hpp	421;"	d
CV_CUDEV_MAKE_VEC_INST	cudev/util/vec_traits.hpp	60;"	d
CV_CUDEV_MAKE_VEC_INST	cudev/util/vec_traits.hpp	74;"	d
CV_CUDEV_MINMAX_INST	cudev/functional/functional.hpp	328;"	d
CV_CUDEV_MINMAX_INST	cudev/functional/functional.hpp	348;"	d
CV_CUDEV_RGB2GRAY_INST	cudev/functional/color_cvt.hpp	75;"	d
CV_CUDEV_RGB2GRAY_INST	cudev/functional/color_cvt.hpp	85;"	d
CV_CUDEV_RGB2HLS_INST	cudev/functional/color_cvt.hpp	263;"	d
CV_CUDEV_RGB2HLS_INST	cudev/functional/color_cvt.hpp	286;"	d
CV_CUDEV_RGB2HSV_INST	cudev/functional/color_cvt.hpp	209;"	d
CV_CUDEV_RGB2HSV_INST	cudev/functional/color_cvt.hpp	232;"	d
CV_CUDEV_RGB2Lab_INST	cudev/functional/color_cvt.hpp	317;"	d
CV_CUDEV_RGB2Lab_INST	cudev/functional/color_cvt.hpp	340;"	d
CV_CUDEV_RGB2Luv_INST	cudev/functional/color_cvt.hpp	371;"	d
CV_CUDEV_RGB2Luv_INST	cudev/functional/color_cvt.hpp	394;"	d
CV_CUDEV_RGB2RGB5x5_INST	cudev/functional/color_cvt.hpp	425;"	d
CV_CUDEV_RGB2RGB5x5_INST	cudev/functional/color_cvt.hpp	437;"	d
CV_CUDEV_RGB2RGB_INST	cudev/functional/color_cvt.hpp	59;"	d
CV_CUDEV_RGB2RGB_INST	cudev/functional/color_cvt.hpp	71;"	d
CV_CUDEV_RGB2XYZ_INST	cudev/functional/color_cvt.hpp	173;"	d
CV_CUDEV_RGB2XYZ_INST	cudev/functional/color_cvt.hpp	187;"	d
CV_CUDEV_RGB2YCrCb_INST	cudev/functional/color_cvt.hpp	137;"	d
CV_CUDEV_RGB2YCrCb_INST	cudev/functional/color_cvt.hpp	151;"	d
CV_CUDEV_RGB2YUV_INST	cudev/functional/color_cvt.hpp	101;"	d
CV_CUDEV_RGB2YUV_INST	cudev/functional/color_cvt.hpp	115;"	d
CV_CUDEV_RGB5x52GRAY_INST	cudev/functional/color_cvt.hpp	467;"	d
CV_CUDEV_RGB5x52GRAY_INST	cudev/functional/color_cvt.hpp	473;"	d
CV_CUDEV_RGB5x52RGB_INST	cudev/functional/color_cvt.hpp	441;"	d
CV_CUDEV_RGB5x52RGB_INST	cudev/functional/color_cvt.hpp	453;"	d
CV_CUDEV_SAFE_CALL	cudev/common.hpp	76;"	d
CV_CUDEV_SHFL_DOWN_VEC_INST	cudev/warp/shuffle.hpp	289;"	d
CV_CUDEV_SHFL_DOWN_VEC_INST	cudev/warp/shuffle.hpp	330;"	d
CV_CUDEV_SHFL_UP_VEC_INST	cudev/warp/shuffle.hpp	198;"	d
CV_CUDEV_SHFL_UP_VEC_INST	cudev/warp/shuffle.hpp	239;"	d
CV_CUDEV_SHFL_VEC_INST	cudev/warp/shuffle.hpp	107;"	d
CV_CUDEV_SHFL_VEC_INST	cudev/warp/shuffle.hpp	148;"	d
CV_CUDEV_SHFL_XOR_VEC_INST	cudev/warp/shuffle.hpp	380;"	d
CV_CUDEV_SHFL_XOR_VEC_INST	cudev/warp/shuffle.hpp	421;"	d
CV_CUDEV_UNARY_FUNCTION_INST	cudev/functional/functional.hpp	456;"	d
CV_CUDEV_UNARY_FUNCTION_INST	cudev/functional/functional.hpp	541;"	d
CV_CUDEV_VEC_TRAITS_INST	cudev/util/vec_traits.hpp	140;"	d
CV_CUDEV_VEC_TRAITS_INST	cudev/util/vec_traits.hpp	90;"	d
CV_CUDEV_XYZ2RGB_INST	cudev/functional/color_cvt.hpp	191;"	d
CV_CUDEV_XYZ2RGB_INST	cudev/functional/color_cvt.hpp	205;"	d
CV_CUDEV_YCrCb2RGB_INST	cudev/functional/color_cvt.hpp	155;"	d
CV_CUDEV_YCrCb2RGB_INST	cudev/functional/color_cvt.hpp	169;"	d
CV_CUDEV_YUV2RGB_INST	cudev/functional/color_cvt.hpp	119;"	d
CV_CUDEV_YUV2RGB_INST	cudev/functional/color_cvt.hpp	133;"	d
CV_CURRENT_POINT	core/types_c.h	1631;"	d
CV_CVTIMG_FLIP	imgcodecs/imgcodecs_c.h	/^    CV_CVTIMG_FLIP      =1,$/;"	e	enum:__anon35
CV_CVTIMG_SWAP_RB	imgcodecs/imgcodecs_c.h	/^    CV_CVTIMG_SWAP_RB   =2$/;"	e	enum:__anon35
CV_DECL_ALIGNED	hal/defs.h	83;"	d
CV_DECL_ALIGNED	hal/defs.h	85;"	d
CV_DECL_ALIGNED	hal/defs.h	87;"	d
CV_DEFAULT	core/types_c.h	78;"	d
CV_DEFAULT	core/types_c.h	80;"	d
CV_DEPTH_MAX	core/cvdef.h	99;"	d
CV_DESCALE	core/cuda/detail/color_detail.hpp	1974;"	d
CV_DESCALE	core/cuda/detail/color_detail.hpp	57;"	d
CV_DIFF	core/core_c.h	1461;"	d
CV_DIFF_C	core/core_c.h	1464;"	d
CV_DIFF_L1	core/core_c.h	1465;"	d
CV_DIFF_L2	core/core_c.h	1466;"	d
CV_DIST_C	imgproc/types_c.h	/^    CV_DIST_C       =3,   \/**< distance = max(|x1-x2|,|y1-y2|) *\/$/;"	e	enum:__anon19
CV_DIST_FAIR	imgproc/types_c.h	/^    CV_DIST_FAIR    =5,   \/**< distance = c^2(|x|\/c-log(1+|x|\/c)), c = 1.3998 *\/$/;"	e	enum:__anon19
CV_DIST_HUBER	imgproc/types_c.h	/^    CV_DIST_HUBER   =7    \/**< distance = |x|<c ? x^2\/2 : c(|x|-c\/2), c=1.345 *\/$/;"	e	enum:__anon19
CV_DIST_L1	imgproc/types_c.h	/^    CV_DIST_L1      =1,   \/**< distance = |x1-x2| + |y1-y2| *\/$/;"	e	enum:__anon19
CV_DIST_L12	imgproc/types_c.h	/^    CV_DIST_L12     =4,   \/**< L1-L2 metric: distance = 2(sqrt(1+x*x\/2) - 1)) *\/$/;"	e	enum:__anon19
CV_DIST_L2	imgproc/types_c.h	/^    CV_DIST_L2      =2,   \/**< the simple euclidean distance *\/$/;"	e	enum:__anon19
CV_DIST_LABEL_CCOMP	imgproc/types_c.h	/^  CV_DIST_LABEL_CCOMP = 0,$/;"	e	enum:__anon18
CV_DIST_LABEL_PIXEL	imgproc/types_c.h	/^  CV_DIST_LABEL_PIXEL = 1$/;"	e	enum:__anon18
CV_DIST_MASK_3	imgproc/types_c.h	/^    CV_DIST_MASK_3   =3,$/;"	e	enum:__anon17
CV_DIST_MASK_5	imgproc/types_c.h	/^    CV_DIST_MASK_5   =5,$/;"	e	enum:__anon17
CV_DIST_MASK_PRECISE	imgproc/types_c.h	/^    CV_DIST_MASK_PRECISE =0$/;"	e	enum:__anon17
CV_DIST_USER	imgproc/types_c.h	/^    CV_DIST_USER    =-1,  \/**< User defined distance *\/$/;"	e	enum:__anon19
CV_DIST_WELSCH	imgproc/types_c.h	/^    CV_DIST_WELSCH  =6,   \/**< distance = c^2\/2(1-exp(-(x\/c)^2)), c = 2.9846 *\/$/;"	e	enum:__anon19
CV_DIV_BY_ZERO_ERR	core/private.hpp	/^    CV_DIV_BY_ZERO_ERR          =  -11, \/\/ipp comp$/;"	e	enum:CvStatus
CV_DLS	calib3d/calib3d_c.h	/^    CV_DLS = 3 \/\/ Joel A. Hesch and Stergios I. Roumeliotis. "A Direct Least-Squares (DLS) Method for PnP"$/;"	e	enum:__anon54
CV_DO_PRAGMA	core/base.hpp	287;"	d
CV_DO_PRAGMA	core/base.hpp	289;"	d
CV_DO_PRAGMA	core/base.hpp	291;"	d
CV_DXT_FORWARD	core/core_c.h	1507;"	d
CV_DXT_INVERSE	core/core_c.h	1508;"	d
CV_DXT_INVERSE_SCALE	core/core_c.h	1511;"	d
CV_DXT_INV_SCALE	core/core_c.h	1510;"	d
CV_DXT_MUL_CONJ	core/core_c.h	1513;"	d
CV_DXT_ROWS	core/core_c.h	1512;"	d
CV_DXT_SCALE	core/core_c.h	1509;"	d
CV_DbgAssert	core/base.hpp	399;"	d
CV_DbgAssert	core/base.hpp	401;"	d
CV_ELEM_SIZE	core/cvdef.h	176;"	d
CV_ELEM_SIZE1	core/cvdef.h	172;"	d
CV_ENABLE_UNROLLED	hal/defs.h	77;"	d
CV_ENABLE_UNROLLED	hal/defs.h	79;"	d
CV_ENUM	ts/ts_perf.hpp	96;"	d
CV_EPNP	calib3d/calib3d_c.h	/^    CV_EPNP = 1, \/\/ F.Moreno-Noguer, V.Lepetit and P.Fua "EPnP: Efficient Perspective-n-Point Camera Pose Estimation"$/;"	e	enum:__anon54
CV_ERROR	core/core_c.h	2688;"	d
CV_EVENT_FLAG_ALTKEY	highgui/highgui_c.h	/^    CV_EVENT_FLAG_ALTKEY    =32$/;"	e	enum:__anon447
CV_EVENT_FLAG_CTRLKEY	highgui/highgui_c.h	/^    CV_EVENT_FLAG_CTRLKEY   =8,$/;"	e	enum:__anon447
CV_EVENT_FLAG_LBUTTON	highgui/highgui_c.h	/^    CV_EVENT_FLAG_LBUTTON   =1,$/;"	e	enum:__anon447
CV_EVENT_FLAG_MBUTTON	highgui/highgui_c.h	/^    CV_EVENT_FLAG_MBUTTON   =4,$/;"	e	enum:__anon447
CV_EVENT_FLAG_RBUTTON	highgui/highgui_c.h	/^    CV_EVENT_FLAG_RBUTTON   =2,$/;"	e	enum:__anon447
CV_EVENT_FLAG_SHIFTKEY	highgui/highgui_c.h	/^    CV_EVENT_FLAG_SHIFTKEY  =16,$/;"	e	enum:__anon447
CV_EVENT_LBUTTONDBLCLK	highgui/highgui_c.h	/^    CV_EVENT_LBUTTONDBLCLK  =7,$/;"	e	enum:__anon446
CV_EVENT_LBUTTONDOWN	highgui/highgui_c.h	/^    CV_EVENT_LBUTTONDOWN    =1,$/;"	e	enum:__anon446
CV_EVENT_LBUTTONUP	highgui/highgui_c.h	/^    CV_EVENT_LBUTTONUP      =4,$/;"	e	enum:__anon446
CV_EVENT_MBUTTONDBLCLK	highgui/highgui_c.h	/^    CV_EVENT_MBUTTONDBLCLK  =9,$/;"	e	enum:__anon446
CV_EVENT_MBUTTONDOWN	highgui/highgui_c.h	/^    CV_EVENT_MBUTTONDOWN    =3,$/;"	e	enum:__anon446
CV_EVENT_MBUTTONUP	highgui/highgui_c.h	/^    CV_EVENT_MBUTTONUP      =6,$/;"	e	enum:__anon446
CV_EVENT_MOUSEHWHEEL	highgui/highgui_c.h	/^    CV_EVENT_MOUSEHWHEEL    =11$/;"	e	enum:__anon446
CV_EVENT_MOUSEMOVE	highgui/highgui_c.h	/^    CV_EVENT_MOUSEMOVE      =0,$/;"	e	enum:__anon446
CV_EVENT_MOUSEWHEEL	highgui/highgui_c.h	/^    CV_EVENT_MOUSEWHEEL     =10,$/;"	e	enum:__anon446
CV_EVENT_RBUTTONDBLCLK	highgui/highgui_c.h	/^    CV_EVENT_RBUTTONDBLCLK  =8,$/;"	e	enum:__anon446
CV_EVENT_RBUTTONDOWN	highgui/highgui_c.h	/^    CV_EVENT_RBUTTONDOWN    =2,$/;"	e	enum:__anon446
CV_EVENT_RBUTTONUP	highgui/highgui_c.h	/^    CV_EVENT_RBUTTONUP      =5,$/;"	e	enum:__anon446
CV_EXPORTS	core/cvdef.h	66;"	d
CV_EXPORTS	core/cvdef.h	68;"	d
CV_EXPORTS	core/cvdef.h	70;"	d
CV_EXPORTS_AS	core/cvdef.h	84;"	d
CV_EXPORTS_W	core/cvdef.h	82;"	d
CV_EXPORTS_W_MAP	core/cvdef.h	85;"	d
CV_EXPORTS_W_SIMPLE	core/cvdef.h	83;"	d
CV_EXTERN_C	core/cvdef.h	75;"	d
CV_EXTERN_C	core/cvdef.h	77;"	d
CV_EXTERN_C_FUNCPTR	core/types_c.h	86;"	d
CV_EXTERN_C_FUNCPTR	core/types_c.h	88;"	d
CV_ErrModeLeaf	core/core_c.h	2615;"	d
CV_ErrModeParent	core/core_c.h	2616;"	d
CV_ErrModeSilent	core/core_c.h	2617;"	d
CV_Error	core/base.hpp	367;"	d
CV_ErrorNoReturn	core/base.hpp	392;"	d
CV_ErrorNoReturn_	core/base.hpp	395;"	d
CV_Error_	core/base.hpp	381;"	d
CV_FILLED	imgproc/imgproc_c.h	986;"	d
CV_FLAGS	ts/ts_perf.hpp	126;"	d
CV_FLOODFILL_FIXED_RANGE	imgproc/types_c.h	/^    CV_FLOODFILL_FIXED_RANGE =(1 << 16),$/;"	e	enum:__anon22
CV_FLOODFILL_MASK_ONLY	imgproc/types_c.h	/^    CV_FLOODFILL_MASK_ONLY   =(1 << 17)$/;"	e	enum:__anon22
CV_FMA3	hal/defs.h	167;"	d
CV_FMA3	hal/defs.h	219;"	d
CV_FM_7POINT	calib3d/calib3d_c.h	83;"	d
CV_FM_8POINT	calib3d/calib3d_c.h	84;"	d
CV_FM_LMEDS	calib3d/calib3d_c.h	91;"	d
CV_FM_LMEDS_ONLY	calib3d/calib3d_c.h	89;"	d
CV_FM_RANSAC	calib3d/calib3d_c.h	92;"	d
CV_FM_RANSAC_ONLY	calib3d/calib3d_c.h	90;"	d
CV_FONT_BLACK	highgui/highgui_c.h	/^        CV_FONT_BLACK           = 87 \/\/QFont::Black$/;"	e	enum:__anon442
CV_FONT_BOLD	highgui/highgui_c.h	/^        CV_FONT_BOLD            = 75,\/\/QFont::Bold,$/;"	e	enum:__anon442
CV_FONT_DEMIBOLD	highgui/highgui_c.h	/^        CV_FONT_DEMIBOLD        = 63,\/\/QFont::DemiBold,$/;"	e	enum:__anon442
CV_FONT_HERSHEY_COMPLEX	imgproc/imgproc_c.h	1106;"	d
CV_FONT_HERSHEY_COMPLEX_SMALL	imgproc/imgproc_c.h	1108;"	d
CV_FONT_HERSHEY_DUPLEX	imgproc/imgproc_c.h	1105;"	d
CV_FONT_HERSHEY_PLAIN	imgproc/imgproc_c.h	1104;"	d
CV_FONT_HERSHEY_SCRIPT_COMPLEX	imgproc/imgproc_c.h	1110;"	d
CV_FONT_HERSHEY_SCRIPT_SIMPLEX	imgproc/imgproc_c.h	1109;"	d
CV_FONT_HERSHEY_SIMPLEX	imgproc/imgproc_c.h	1103;"	d
CV_FONT_HERSHEY_TRIPLEX	imgproc/imgproc_c.h	1107;"	d
CV_FONT_ITALIC	imgproc/imgproc_c.h	1112;"	d
CV_FONT_LIGHT	highgui/highgui_c.h	/^enum {  CV_FONT_LIGHT           = 25,\/\/QFont::Light,$/;"	e	enum:__anon442
CV_FONT_NORMAL	highgui/highgui_c.h	/^        CV_FONT_NORMAL          = 50,\/\/QFont::Normal,$/;"	e	enum:__anon442
CV_FONT_VECTOR0	imgproc/imgproc_c.h	1114;"	d
CV_FOURCC	videoio/videoio_c.h	/^CV_INLINE int CV_FOURCC(char c1, char c2, char c3, char c4)$/;"	f
CV_FOURCC_DEFAULT	videoio/videoio_c.h	376;"	d
CV_FOURCC_MACRO	videoio/videoio_c.h	368;"	d
CV_FOURCC_PROMPT	videoio/videoio_c.h	375;"	d
CV_FRONT	core/core_c.h	1607;"	d
CV_FUNCNAME	core/core_c.h	2676;"	d
CV_FUNCNAME	core/core_c.h	2679;"	d
CV_Func	core/base.hpp	350;"	d
CV_Func	core/base.hpp	352;"	d
CV_Func	core/base.hpp	354;"	d
CV_GAUSSIAN	imgproc/types_c.h	/^    CV_GAUSSIAN  =2,$/;"	e	enum:SmoothMethod_c
CV_GAUSSIAN_5x5	imgproc/types_c.h	/^    CV_GAUSSIAN_5x5 = 7$/;"	e	enum:__anon5
CV_GEMM_A_T	core/core_c.h	1286;"	d
CV_GEMM_B_T	core/core_c.h	1287;"	d
CV_GEMM_C_T	core/core_c.h	1288;"	d
CV_GET_SEQ_ELEM	core/types_c.h	1557;"	d
CV_GET_WHEEL_DELTA	highgui/highgui_c.h	197;"	d
CV_GRAPH	core/types_c.h	1438;"	d
CV_GRAPH_ALL_ITEMS	core/core_c.h	1849;"	d
CV_GRAPH_ANY_EDGE	core/core_c.h	1844;"	d
CV_GRAPH_BACKTRACKING	core/core_c.h	1846;"	d
CV_GRAPH_BACK_EDGE	core/core_c.h	1841;"	d
CV_GRAPH_CROSS_EDGE	core/core_c.h	1843;"	d
CV_GRAPH_EDGE_FIELDS	core/types_c.h	1315;"	d
CV_GRAPH_FIELDS	core/types_c.h	1350;"	d
CV_GRAPH_FLAG_ORIENTED	core/types_c.h	1436;"	d
CV_GRAPH_FORWARD_EDGE	core/core_c.h	1842;"	d
CV_GRAPH_FORWARD_EDGE_FLAG	core/core_c.h	1858;"	d
CV_GRAPH_ITEM_VISITED_FLAG	core/core_c.h	1852;"	d
CV_GRAPH_NEW_TREE	core/core_c.h	1845;"	d
CV_GRAPH_OVER	core/core_c.h	1847;"	d
CV_GRAPH_SEARCH_TREE_NODE_FLAG	core/core_c.h	1857;"	d
CV_GRAPH_TREE_EDGE	core/core_c.h	1840;"	d
CV_GRAPH_VERTEX	core/core_c.h	1839;"	d
CV_GRAPH_VERTEX_FIELDS	core/types_c.h	1322;"	d
CV_GRAY2BGR	imgproc/types_c.h	/^    CV_GRAY2BGR    =8,$/;"	e	enum:__anon7
CV_GRAY2BGR555	imgproc/types_c.h	/^    CV_GRAY2BGR555 =30,$/;"	e	enum:__anon7
CV_GRAY2BGR565	imgproc/types_c.h	/^    CV_GRAY2BGR565 =20,$/;"	e	enum:__anon7
CV_GRAY2BGRA	imgproc/types_c.h	/^    CV_GRAY2BGRA   =9,$/;"	e	enum:__anon7
CV_GRAY2RGB	imgproc/types_c.h	/^    CV_GRAY2RGB    =CV_GRAY2BGR,$/;"	e	enum:__anon7
CV_GRAY2RGBA	imgproc/types_c.h	/^    CV_GRAY2RGBA   =CV_GRAY2BGRA,$/;"	e	enum:__anon7
CV_GUI_EXPANDED	highgui/highgui_c.h	/^    CV_GUI_EXPANDED         = 0x00000000, \/\/status bar and tool bar$/;"	e	enum:__anon445
CV_GUI_NORMAL	highgui/highgui_c.h	/^    CV_GUI_NORMAL           = 0x00000010, \/\/old fashious way$/;"	e	enum:__anon445
CV_GpuApiCallError	core/types_c.h	/^ CV_GpuApiCallError=           -217,$/;"	e	enum:__anon143
CV_GpuNotSupported	core/types_c.h	/^ CV_GpuNotSupported=           -216,$/;"	e	enum:__anon143
CV_HAAR_DO_CANNY_PRUNING	objdetect/objdetect_c.h	130;"	d
CV_HAAR_DO_ROUGH_SEARCH	objdetect/objdetect_c.h	133;"	d
CV_HAAR_FEATURE_MAX	objdetect/objdetect_c.h	71;"	d
CV_HAAR_FIND_BIGGEST_OBJECT	objdetect/objdetect_c.h	132;"	d
CV_HAAR_MAGIC_VAL	objdetect/objdetect_c.h	64;"	d
CV_HAAR_SCALE_IMAGE	objdetect/objdetect_c.h	131;"	d
CV_HARDWARE_MAX_FEATURE	hal/defs.h	118;"	d
CV_HELP_IMPL_PROPERTY	core/private.hpp	172;"	d
CV_HELP_WRAP_PROPERTY	core/private.hpp	176;"	d
CV_HIST_ARRAY	core/types_c.h	740;"	d
CV_HIST_HAS_RANGES	core/types_c.h	769;"	d
CV_HIST_MAGIC_VAL	core/types_c.h	734;"	d
CV_HIST_RANGES_FLAG	core/types_c.h	738;"	d
CV_HIST_SPARSE	core/types_c.h	741;"	d
CV_HIST_TREE	core/types_c.h	742;"	d
CV_HIST_UNIFORM	core/types_c.h	746;"	d
CV_HIST_UNIFORM_FLAG	core/types_c.h	735;"	d
CV_HLS2BGR	imgproc/types_c.h	/^    CV_HLS2BGR     =60,$/;"	e	enum:__anon7
CV_HLS2BGR_FULL	imgproc/types_c.h	/^    CV_HLS2BGR_FULL = 72,$/;"	e	enum:__anon7
CV_HLS2RGB	imgproc/types_c.h	/^    CV_HLS2RGB     =61,$/;"	e	enum:__anon7
CV_HLS2RGB_FULL	imgproc/types_c.h	/^    CV_HLS2RGB_FULL = 73,$/;"	e	enum:__anon7
CV_HOUGH_GRADIENT	imgproc/types_c.h	/^    CV_HOUGH_GRADIENT =3$/;"	e	enum:__anon24
CV_HOUGH_MULTI_SCALE	imgproc/types_c.h	/^    CV_HOUGH_MULTI_SCALE =2,$/;"	e	enum:__anon24
CV_HOUGH_PROBABILISTIC	imgproc/types_c.h	/^    CV_HOUGH_PROBABILISTIC =1,$/;"	e	enum:__anon24
CV_HOUGH_STANDARD	imgproc/types_c.h	/^    CV_HOUGH_STANDARD =0,$/;"	e	enum:__anon24
CV_HSV2BGR	imgproc/types_c.h	/^    CV_HSV2BGR     =54,$/;"	e	enum:__anon7
CV_HSV2BGR_FULL	imgproc/types_c.h	/^    CV_HSV2BGR_FULL = 70,$/;"	e	enum:__anon7
CV_HSV2RGB	imgproc/types_c.h	/^    CV_HSV2RGB     =55,$/;"	e	enum:__anon7
CV_HSV2RGB_FULL	imgproc/types_c.h	/^    CV_HSV2RGB_FULL = 71,$/;"	e	enum:__anon7
CV_HeaderIsNull	core/types_c.h	/^ CV_HeaderIsNull=               -9,  \/**< image header is NULL            *\/$/;"	e	enum:__anon143
CV_IABS	core/types_c.h	190;"	d
CV_IABS	core/types_c.h	192;"	d
CV_ICC	hal/defs.h	55;"	d
CV_ICC	hal/defs.h	57;"	d
CV_ICC	hal/defs.h	59;"	d
CV_ICC	hal/defs.h	61;"	d
CV_ICC	hal/defs.h	63;"	d
CV_IMAGE_ELEM	core/types_c.h	398;"	d
CV_IMAX	core/types_c.h	186;"	d
CV_IMIN	core/types_c.h	184;"	d
CV_IMPL	core/types_c.h	97;"	d
CV_IMPL_ADD	core/utility.hpp	72;"	d
CV_IMPL_IPP	core/utility.hpp	69;"	d
CV_IMPL_MT	core/utility.hpp	70;"	d
CV_IMPL_OCL	core/utility.hpp	68;"	d
CV_IMPL_PLAIN	core/utility.hpp	67;"	d
CV_IMPL_PROPERTY	core/private.hpp	180;"	d
CV_IMPL_PROPERTY_RO	core/private.hpp	169;"	d
CV_IMPL_PROPERTY_S	core/private.hpp	181;"	d
CV_IMWRITE_JPEG_CHROMA_QUALITY	imgcodecs/imgcodecs_c.h	/^    CV_IMWRITE_JPEG_CHROMA_QUALITY =6,$/;"	e	enum:__anon34
CV_IMWRITE_JPEG_LUMA_QUALITY	imgcodecs/imgcodecs_c.h	/^    CV_IMWRITE_JPEG_LUMA_QUALITY =5,$/;"	e	enum:__anon34
CV_IMWRITE_JPEG_OPTIMIZE	imgcodecs/imgcodecs_c.h	/^    CV_IMWRITE_JPEG_OPTIMIZE =3,$/;"	e	enum:__anon34
CV_IMWRITE_JPEG_PROGRESSIVE	imgcodecs/imgcodecs_c.h	/^    CV_IMWRITE_JPEG_PROGRESSIVE =2,$/;"	e	enum:__anon34
CV_IMWRITE_JPEG_QUALITY	imgcodecs/imgcodecs_c.h	/^    CV_IMWRITE_JPEG_QUALITY =1,$/;"	e	enum:__anon34
CV_IMWRITE_JPEG_RST_INTERVAL	imgcodecs/imgcodecs_c.h	/^    CV_IMWRITE_JPEG_RST_INTERVAL =4,$/;"	e	enum:__anon34
CV_IMWRITE_PNG_BILEVEL	imgcodecs/imgcodecs_c.h	/^    CV_IMWRITE_PNG_BILEVEL =18,$/;"	e	enum:__anon34
CV_IMWRITE_PNG_COMPRESSION	imgcodecs/imgcodecs_c.h	/^    CV_IMWRITE_PNG_COMPRESSION =16,$/;"	e	enum:__anon34
CV_IMWRITE_PNG_STRATEGY	imgcodecs/imgcodecs_c.h	/^    CV_IMWRITE_PNG_STRATEGY =17,$/;"	e	enum:__anon34
CV_IMWRITE_PNG_STRATEGY_DEFAULT	imgcodecs/imgcodecs_c.h	/^    CV_IMWRITE_PNG_STRATEGY_DEFAULT =0,$/;"	e	enum:__anon34
CV_IMWRITE_PNG_STRATEGY_FILTERED	imgcodecs/imgcodecs_c.h	/^    CV_IMWRITE_PNG_STRATEGY_FILTERED =1,$/;"	e	enum:__anon34
CV_IMWRITE_PNG_STRATEGY_FIXED	imgcodecs/imgcodecs_c.h	/^    CV_IMWRITE_PNG_STRATEGY_FIXED =4,$/;"	e	enum:__anon34
CV_IMWRITE_PNG_STRATEGY_HUFFMAN_ONLY	imgcodecs/imgcodecs_c.h	/^    CV_IMWRITE_PNG_STRATEGY_HUFFMAN_ONLY =2,$/;"	e	enum:__anon34
CV_IMWRITE_PNG_STRATEGY_RLE	imgcodecs/imgcodecs_c.h	/^    CV_IMWRITE_PNG_STRATEGY_RLE =3,$/;"	e	enum:__anon34
CV_IMWRITE_PXM_BINARY	imgcodecs/imgcodecs_c.h	/^    CV_IMWRITE_PXM_BINARY =32,$/;"	e	enum:__anon34
CV_IMWRITE_WEBP_QUALITY	imgcodecs/imgcodecs_c.h	/^    CV_IMWRITE_WEBP_QUALITY =64$/;"	e	enum:__anon34
CV_INIT_3X3_DELTAS	imgproc/types_c.h	481;"	d
CV_INLINE	hal/defs.h	68;"	d
CV_INLINE	hal/defs.h	70;"	d
CV_INLINE	hal/defs.h	72;"	d
CV_INPAINT_NS	photo/photo_c.h	/^    CV_INPAINT_NS      =0,$/;"	e	enum:InpaintingModes
CV_INPAINT_TELEA	photo/photo_c.h	/^    CV_INPAINT_TELEA   =1$/;"	e	enum:InpaintingModes
CV_INPLACE_NOT_SUPPORTED_ERR	core/private.hpp	/^    CV_INPLACE_NOT_SUPPORTED_ERR= -112,$/;"	e	enum:CvStatus
CV_INTER_AREA	imgproc/types_c.h	/^    CV_INTER_AREA      =3,$/;"	e	enum:__anon8
CV_INTER_CUBIC	imgproc/types_c.h	/^    CV_INTER_CUBIC     =2,$/;"	e	enum:__anon8
CV_INTER_LANCZOS4	imgproc/types_c.h	/^    CV_INTER_LANCZOS4  =4$/;"	e	enum:__anon8
CV_INTER_LINEAR	imgproc/types_c.h	/^    CV_INTER_LINEAR    =1,$/;"	e	enum:__anon8
CV_INTER_NN	imgproc/types_c.h	/^    CV_INTER_NN        =0,$/;"	e	enum:__anon8
CV_IN_OUT	core/cvdef.h	86;"	d
CV_IPP_CHECK	core/private.hpp	239;"	d
CV_IPP_CHECK_COND	core/private.hpp	238;"	d
CV_IS_CONT_MAT	core/cvdef.h	165;"	d
CV_IS_GRAPH	core/types_c.h	1501;"	d
CV_IS_GRAPH_EDGE_VISITED	core/core_c.h	1855;"	d
CV_IS_GRAPH_ORIENTED	core/types_c.h	1504;"	d
CV_IS_GRAPH_VERTEX_VISITED	core/core_c.h	1853;"	d
CV_IS_HAAR_CLASSIFIER	objdetect/objdetect_c.h	67;"	d
CV_IS_HIST	core/types_c.h	758;"	d
CV_IS_IMAGE	core/types_c.h	389;"	d
CV_IS_IMAGE_HDR	core/types_c.h	386;"	d
CV_IS_MASK_ARR	core/types_c.h	482;"	d
CV_IS_MAT	core/types_c.h	479;"	d
CV_IS_MATND	core/types_c.h	660;"	d
CV_IS_MATND_HDR	core/types_c.h	657;"	d
CV_IS_MAT_CONST	core/types_c.h	497;"	d
CV_IS_MAT_CONT	core/cvdef.h	164;"	d
CV_IS_MAT_HDR	core/types_c.h	469;"	d
CV_IS_MAT_HDR_Z	core/types_c.h	474;"	d
CV_IS_SEQ	core/types_c.h	1393;"	d
CV_IS_SEQ_CHAIN	core/types_c.h	1488;"	d
CV_IS_SEQ_CHAIN_CONTOUR	core/types_c.h	1494;"	d
CV_IS_SEQ_CLOSED	core/types_c.h	1470;"	d
CV_IS_SEQ_CONTOUR	core/types_c.h	1491;"	d
CV_IS_SEQ_CONVEX	core/types_c.h	1471;"	d
CV_IS_SEQ_CURVE	core/types_c.h	1469;"	d
CV_IS_SEQ_HOLE	core/types_c.h	1472;"	d
CV_IS_SEQ_INDEX	core/types_c.h	1466;"	d
CV_IS_SEQ_POINT_SET	core/types_c.h	1476;"	d
CV_IS_SEQ_POINT_SUBSET	core/types_c.h	1479;"	d
CV_IS_SEQ_POLYGON	core/types_c.h	1485;"	d
CV_IS_SEQ_POLYGON_TREE	core/types_c.h	1497;"	d
CV_IS_SEQ_POLYLINE	core/types_c.h	1482;"	d
CV_IS_SEQ_SIMPLE	core/types_c.h	1473;"	d
CV_IS_SET	core/types_c.h	1397;"	d
CV_IS_SET_ELEM	core/types_c.h	1291;"	d
CV_IS_SPARSE_HIST	core/types_c.h	766;"	d
CV_IS_SPARSE_MAT	core/types_c.h	705;"	d
CV_IS_SPARSE_MAT_HDR	core/types_c.h	701;"	d
CV_IS_STORAGE	core/types_c.h	1200;"	d
CV_IS_SUBDIV2D	core/types_c.h	1507;"	d
CV_IS_SUBMAT	core/cvdef.h	168;"	d
CV_IS_UNIFORM_HIST	core/types_c.h	763;"	d
CV_ITERATIVE	calib3d/calib3d_c.h	/^    CV_ITERATIVE = 0,$/;"	e	enum:__anon54
CV_KMEANS_USE_INITIAL_LABELS	core/core_c.h	1922;"	d
CV_L1	core/core_c.h	1457;"	d
CV_L2	core/core_c.h	1458;"	d
CV_LBGR2Lab	imgproc/types_c.h	/^    CV_LBGR2Lab     = 74,$/;"	e	enum:__anon7
CV_LBGR2Luv	imgproc/types_c.h	/^    CV_LBGR2Luv     = 76,$/;"	e	enum:__anon7
CV_LINK_RUNS	imgproc/types_c.h	/^    CV_LINK_RUNS=5$/;"	e	enum:__anon13
CV_LKFLOW_GET_MIN_EIGENVALS	video/tracking_c.h	66;"	d
CV_LKFLOW_INITIAL_GUESSES	video/tracking_c.h	65;"	d
CV_LKFLOW_PYR_A_READY	video/tracking_c.h	63;"	d
CV_LKFLOW_PYR_B_READY	video/tracking_c.h	64;"	d
CV_LMEDS	calib3d/calib3d_c.h	86;"	d
CV_LOAD_IMAGE_ANYCOLOR	imgcodecs/imgcodecs_c.h	/^    CV_LOAD_IMAGE_ANYCOLOR   =4$/;"	e	enum:__anon33
CV_LOAD_IMAGE_ANYDEPTH	imgcodecs/imgcodecs_c.h	/^    CV_LOAD_IMAGE_ANYDEPTH   =2,$/;"	e	enum:__anon33
CV_LOAD_IMAGE_COLOR	imgcodecs/imgcodecs_c.h	/^    CV_LOAD_IMAGE_COLOR      =1,$/;"	e	enum:__anon33
CV_LOAD_IMAGE_GRAYSCALE	imgcodecs/imgcodecs_c.h	/^    CV_LOAD_IMAGE_GRAYSCALE  =0,$/;"	e	enum:__anon33
CV_LOAD_IMAGE_UNCHANGED	imgcodecs/imgcodecs_c.h	/^    CV_LOAD_IMAGE_UNCHANGED  =-1,$/;"	e	enum:__anon33
CV_LOG2	hal/defs.h	303;"	d
CV_LOG2_F	cudev/common.hpp	88;"	d
CV_LRGB2Lab	imgproc/types_c.h	/^    CV_LRGB2Lab     = 75,$/;"	e	enum:__anon7
CV_LRGB2Luv	imgproc/types_c.h	/^    CV_LRGB2Luv     = 77,$/;"	e	enum:__anon7
CV_LU	core/core_c.h	1341;"	d
CV_Lab2BGR	imgproc/types_c.h	/^    CV_Lab2BGR     =56,$/;"	e	enum:__anon7
CV_Lab2LBGR	imgproc/types_c.h	/^    CV_Lab2LBGR     = 78,$/;"	e	enum:__anon7
CV_Lab2LRGB	imgproc/types_c.h	/^    CV_Lab2LRGB     = 79,$/;"	e	enum:__anon7
CV_Lab2RGB	imgproc/types_c.h	/^    CV_Lab2RGB     =57,$/;"	e	enum:__anon7
CV_Luv2BGR	imgproc/types_c.h	/^    CV_Luv2BGR     =58,$/;"	e	enum:__anon7
CV_Luv2LBGR	imgproc/types_c.h	/^    CV_Luv2LBGR     = 80,$/;"	e	enum:__anon7
CV_Luv2LRGB	imgproc/types_c.h	/^    CV_Luv2LRGB     = 81,$/;"	e	enum:__anon7
CV_Luv2RGB	imgproc/types_c.h	/^    CV_Luv2RGB     =59,$/;"	e	enum:__anon7
CV_MAGIC_MASK	core/types_c.h	408;"	d
CV_MAJOR_VERSION	core/version.hpp	67;"	d
CV_MAKETYPE	core/cvdef.h	113;"	d
CV_MAKE_TYPE	core/cvdef.h	114;"	d
CV_MALLOC_ALIGN	core/private.hpp	137;"	d
CV_MATND_MAGIC_VAL	core/types_c.h	613;"	d
CV_MAT_AUG_OPERATOR	core/operations.hpp	231;"	d
CV_MAT_AUG_OPERATOR	core/operations.hpp	282;"	d
CV_MAT_AUG_OPERATOR1	core/operations.hpp	228;"	d
CV_MAT_AUG_OPERATOR1	core/operations.hpp	283;"	d
CV_MAT_AUG_OPERATOR_T	core/operations.hpp	235;"	d
CV_MAT_AUG_OPERATOR_T	core/operations.hpp	281;"	d
CV_MAT_CN	core/cvdef.h	159;"	d
CV_MAT_CN_MASK	core/cvdef.h	158;"	d
CV_MAT_CONT_FLAG	core/cvdef.h	163;"	d
CV_MAT_CONT_FLAG_SHIFT	core/cvdef.h	162;"	d
CV_MAT_DEPTH	core/cvdef.h	111;"	d
CV_MAT_DEPTH_MASK	core/cvdef.h	110;"	d
CV_MAT_ELEM	core/types_c.h	545;"	d
CV_MAT_ELEM_PTR	core/types_c.h	542;"	d
CV_MAT_ELEM_PTR_FAST	core/types_c.h	537;"	d
CV_MAT_MAGIC_VAL	core/types_c.h	409;"	d
CV_MAT_TYPE	core/cvdef.h	161;"	d
CV_MAT_TYPE_MASK	core/cvdef.h	160;"	d
CV_MAX_ARR	core/core_c.h	563;"	d
CV_MAX_DIM	core/types_c.h	616;"	d
CV_MAX_DIM_HEAP	core/types_c.h	617;"	d
CV_MAX_SOBEL_KSIZE	imgproc/types_c.h	/^    CV_MAX_SOBEL_KSIZE =7$/;"	e	enum:__anon6
CV_MEDIAN	imgproc/types_c.h	/^    CV_MEDIAN =3,$/;"	e	enum:SmoothMethod_c
CV_MINMAX	core/core_c.h	1462;"	d
CV_MINOR_VERSION	core/version.hpp	68;"	d
CV_MMX	hal/defs.h	125;"	d
CV_MMX	hal/defs.h	192;"	d
CV_MOP_BLACKHAT	imgproc/types_c.h	/^    CV_MOP_BLACKHAT     =6$/;"	e	enum:__anon10
CV_MOP_CLOSE	imgproc/types_c.h	/^    CV_MOP_CLOSE        =3,$/;"	e	enum:__anon10
CV_MOP_DILATE	imgproc/types_c.h	/^    CV_MOP_DILATE       =1,$/;"	e	enum:__anon10
CV_MOP_ERODE	imgproc/types_c.h	/^    CV_MOP_ERODE        =0,$/;"	e	enum:__anon10
CV_MOP_GRADIENT	imgproc/types_c.h	/^    CV_MOP_GRADIENT     =4,$/;"	e	enum:__anon10
CV_MOP_OPEN	imgproc/types_c.h	/^    CV_MOP_OPEN         =2,$/;"	e	enum:__anon10
CV_MOP_TOPHAT	imgproc/types_c.h	/^    CV_MOP_TOPHAT       =5,$/;"	e	enum:__anon10
CV_MaskIsTiled	core/types_c.h	/^ CV_MaskIsTiled=               -26,  \/**\/$/;"	e	enum:__anon143
CV_NEON	hal/defs.h	175;"	d
CV_NEON	hal/defs.h	179;"	d
CV_NEON	hal/defs.h	250;"	d
CV_NEXT_GRAPH_EDGE	core/types_c.h	1648;"	d
CV_NEXT_LINE_POINT	imgproc/imgproc_c.h	1093;"	d
CV_NEXT_SEQ_ELEM	core/types_c.h	1584;"	d
CV_NODE_EMPTY	core/types_c.h	1717;"	d
CV_NODE_FLOAT	core/types_c.h	1704;"	d
CV_NODE_FLOW	core/types_c.h	1715;"	d
CV_NODE_HAS_NAME	core/types_c.h	1729;"	d
CV_NODE_IDX	core/types_c.h	726;"	d
CV_NODE_INT	core/types_c.h	1701;"	d
CV_NODE_INTEGER	core/types_c.h	1702;"	d
CV_NODE_IS_COLLECTION	core/types_c.h	1725;"	d
CV_NODE_IS_EMPTY	core/types_c.h	1727;"	d
CV_NODE_IS_FLOW	core/types_c.h	1726;"	d
CV_NODE_IS_INT	core/types_c.h	1720;"	d
CV_NODE_IS_MAP	core/types_c.h	1724;"	d
CV_NODE_IS_REAL	core/types_c.h	1721;"	d
CV_NODE_IS_SEQ	core/types_c.h	1723;"	d
CV_NODE_IS_STRING	core/types_c.h	1722;"	d
CV_NODE_IS_USER	core/types_c.h	1728;"	d
CV_NODE_MAP	core/types_c.h	1709;"	d
CV_NODE_NAMED	core/types_c.h	1718;"	d
CV_NODE_NONE	core/types_c.h	1700;"	d
CV_NODE_REAL	core/types_c.h	1703;"	d
CV_NODE_REF	core/types_c.h	1707;"	d
CV_NODE_SEQ	core/types_c.h	1708;"	d
CV_NODE_SEQ_IS_SIMPLE	core/types_c.h	1732;"	d
CV_NODE_SEQ_SIMPLE	core/types_c.h	1731;"	d
CV_NODE_STR	core/types_c.h	1705;"	d
CV_NODE_STRING	core/types_c.h	1706;"	d
CV_NODE_TYPE	core/types_c.h	1712;"	d
CV_NODE_TYPE_MASK	core/types_c.h	1710;"	d
CV_NODE_USER	core/types_c.h	1716;"	d
CV_NODE_VAL	core/types_c.h	725;"	d
CV_NORETURN	core/cvdef.h	223;"	d
CV_NORETURN	core/cvdef.h	225;"	d
CV_NORETURN	core/cvdef.h	227;"	d
CV_NORMAL	core/core_c.h	1346;"	d
CV_NORM_MASK	core/core_c.h	1459;"	d
CV_NOTDEFINED_ERR	core/private.hpp	/^    CV_NOTDEFINED_ERR           = -48,  \/\/ipp comp$/;"	e	enum:CvStatus
CV_NOTFOUND_ERR	core/private.hpp	/^    CV_NOTFOUND_ERR             = -110,$/;"	e	enum:CvStatus
CV_NO_CN_CHECK	core/core_c.h	579;"	d
CV_NO_DEPTH_CHECK	core/core_c.h	578;"	d
CV_NO_ERR	core/private.hpp	/^    CV_NO_ERR                   =   0,$/;"	e	enum:CvStatus
CV_NO_SIZE_CHECK	core/core_c.h	580;"	d
CV_NULLPTR_ERR	core/private.hpp	/^    CV_NULLPTR_ERR              =  -2,$/;"	e	enum:CvStatus
CV_OCL_RUN	core/opencl/ocl_defs.hpp	58;"	d
CV_OCL_RUN_	core/opencl/ocl_defs.hpp	14;"	d
CV_OCL_RUN_	core/opencl/ocl_defs.hpp	30;"	d
CV_OCL_RUN_	core/opencl/ocl_defs.hpp	46;"	d
CV_OCL_RUN_	core/opencl/ocl_defs.hpp	55;"	d
CV_OK	core/private.hpp	/^    CV_OK                       =   CV_NO_ERR$/;"	e	enum:CvStatus
CV_ORIENTED_GRAPH	core/types_c.h	1439;"	d
CV_OUT	core/cvdef.h	87;"	d
CV_OUTOFMEM_ERR	core/private.hpp	/^    CV_OUTOFMEM_ERR             =  -3,$/;"	e	enum:CvStatus
CV_OpenCLApiCallError	core/types_c.h	/^ CV_OpenCLApiCallError=        -220,$/;"	e	enum:__anon143
CV_OpenCLDoubleNotSupported	core/types_c.h	/^ CV_OpenCLDoubleNotSupported=  -221,$/;"	e	enum:__anon143
CV_OpenCLInitError	core/types_c.h	/^ CV_OpenCLInitError=           -222,$/;"	e	enum:__anon143
CV_OpenCLNoAMDBlasFft	core/types_c.h	/^ CV_OpenCLNoAMDBlasFft=        -223$/;"	e	enum:__anon143
CV_OpenGlApiCallError	core/types_c.h	/^ CV_OpenGlApiCallError=        -219,$/;"	e	enum:__anon143
CV_OpenGlNotSupported	core/types_c.h	/^ CV_OpenGlNotSupported=        -218,$/;"	e	enum:__anon143
CV_P3P	calib3d/calib3d_c.h	/^    CV_P3P = 2, \/\/ X.S. Gao, X.-R. Hou, J. Tang, H.-F. Chang; "Complete Solution Classification for the Perspective-Three-Point Problem"$/;"	e	enum:__anon54
CV_PCA_DATA_AS_COL	core/core_c.h	1414;"	d
CV_PCA_DATA_AS_ROW	core/core_c.h	1413;"	d
CV_PCA_USE_AVG	core/core_c.h	1415;"	d
CV_PERF_TEST_CUDA_MAIN	ts/cuda_perf.hpp	112;"	d
CV_PERF_TEST_CUDA_MAIN	ts/cuda_perf.hpp	119;"	d
CV_PERF_TEST_MAIN	ts/ts_perf.hpp	639;"	d
CV_PERF_TEST_MAIN_INTERNALS	ts/ts_perf.hpp	620;"	d
CV_PERF_TEST_MAIN_WITH_IMPLS	ts/ts_perf.hpp	633;"	d
CV_PI	hal/defs.h	301;"	d
CV_PI_F	core/cuda/common.hpp	59;"	d
CV_PI_F	core/cuda/common.hpp	61;"	d
CV_PI_F	cudev/common.hpp	87;"	d
CV_POLY_APPROX_DP	imgproc/types_c.h	/^    CV_POLY_APPROX_DP = 0$/;"	e	enum:__anon14
CV_POPCNT	hal/defs.h	150;"	d
CV_POPCNT	hal/defs.h	189;"	d
CV_PREV_POINT	core/types_c.h	1632;"	d
CV_PREV_SEQ_ELEM	core/types_c.h	1594;"	d
CV_PROP	core/cvdef.h	88;"	d
CV_PROP_RW	core/cvdef.h	89;"	d
CV_PUSH_BUTTON	highgui/highgui_c.h	/^enum {CV_PUSH_BUTTON = 0, CV_CHECKBOX = 1, CV_RADIOBOX = 2};$/;"	e	enum:__anon444
CV_QR	core/core_c.h	1345;"	d
CV_RADIOBOX	highgui/highgui_c.h	/^enum {CV_PUSH_BUTTON = 0, CV_CHECKBOX = 1, CV_RADIOBOX = 2};$/;"	e	enum:__anon444
CV_RAND_NORMAL	core/core_c.h	1226;"	d
CV_RAND_UNI	core/core_c.h	1225;"	d
CV_RANSAC	calib3d/calib3d_c.h	87;"	d
CV_READ_CHAIN_POINT	core/types_c.h	1619;"	d
CV_READ_EDGE	core/types_c.h	1634;"	d
CV_READ_SEQ_ELEM	core/types_c.h	1603;"	d
CV_REDUCE_AVG	core/core_c.h	1490;"	d
CV_REDUCE_MAX	core/core_c.h	1491;"	d
CV_REDUCE_MIN	core/core_c.h	1492;"	d
CV_REDUCE_SUM	core/core_c.h	1489;"	d
CV_RELATIVE	core/core_c.h	1460;"	d
CV_RELATIVE_C	core/core_c.h	1467;"	d
CV_RELATIVE_L1	core/core_c.h	1468;"	d
CV_RELATIVE_L2	core/core_c.h	1469;"	d
CV_REQUIRE_OPENCL_1_2_ERROR	core/opencl/runtime/opencl_core.hpp	90;"	d
CV_RETR_CCOMP	imgproc/types_c.h	/^    CV_RETR_CCOMP=2,$/;"	e	enum:__anon12
CV_RETR_EXTERNAL	imgproc/types_c.h	/^    CV_RETR_EXTERNAL=0,$/;"	e	enum:__anon12
CV_RETR_FLOODFILL	imgproc/types_c.h	/^    CV_RETR_FLOODFILL=4$/;"	e	enum:__anon12
CV_RETR_LIST	imgproc/types_c.h	/^    CV_RETR_LIST=1,$/;"	e	enum:__anon12
CV_RETR_TREE	imgproc/types_c.h	/^    CV_RETR_TREE=3,$/;"	e	enum:__anon12
CV_REV_READ_SEQ_ELEM	core/types_c.h	1611;"	d
CV_RGB	imgproc/imgproc_c.h	985;"	d
CV_RGB2BGR	imgproc/types_c.h	/^    CV_RGB2BGR     =CV_BGR2RGB,$/;"	e	enum:__anon7
CV_RGB2BGR555	imgproc/types_c.h	/^    CV_RGB2BGR555  =23,$/;"	e	enum:__anon7
CV_RGB2BGR565	imgproc/types_c.h	/^    CV_RGB2BGR565  =13,$/;"	e	enum:__anon7
CV_RGB2BGRA	imgproc/types_c.h	/^    CV_RGB2BGRA    =CV_BGR2RGBA,$/;"	e	enum:__anon7
CV_RGB2GRAY	imgproc/types_c.h	/^    CV_RGB2GRAY    =7,$/;"	e	enum:__anon7
CV_RGB2HLS	imgproc/types_c.h	/^    CV_RGB2HLS     =53,$/;"	e	enum:__anon7
CV_RGB2HLS_FULL	imgproc/types_c.h	/^    CV_RGB2HLS_FULL = 69,$/;"	e	enum:__anon7
CV_RGB2HSV	imgproc/types_c.h	/^    CV_RGB2HSV     =41,$/;"	e	enum:__anon7
CV_RGB2HSV_FULL	imgproc/types_c.h	/^    CV_RGB2HSV_FULL = 67,$/;"	e	enum:__anon7
CV_RGB2Lab	imgproc/types_c.h	/^    CV_RGB2Lab     =45,$/;"	e	enum:__anon7
CV_RGB2Luv	imgproc/types_c.h	/^    CV_RGB2Luv     =51,$/;"	e	enum:__anon7
CV_RGB2RGBA	imgproc/types_c.h	/^    CV_RGB2RGBA    =CV_BGR2BGRA,$/;"	e	enum:__anon7
CV_RGB2XYZ	imgproc/types_c.h	/^    CV_RGB2XYZ     =33,$/;"	e	enum:__anon7
CV_RGB2YCrCb	imgproc/types_c.h	/^    CV_RGB2YCrCb   =37,$/;"	e	enum:__anon7
CV_RGB2YUV	imgproc/types_c.h	/^    CV_RGB2YUV      = 83,$/;"	e	enum:__anon7
CV_RGB2YUV_I420	imgproc/types_c.h	/^    CV_RGB2YUV_I420 = 127,$/;"	e	enum:__anon7
CV_RGB2YUV_IYUV	imgproc/types_c.h	/^    CV_RGB2YUV_IYUV = CV_RGB2YUV_I420,$/;"	e	enum:__anon7
CV_RGB2YUV_YV12	imgproc/types_c.h	/^    CV_RGB2YUV_YV12  = 131,$/;"	e	enum:__anon7
CV_RGBA2BGR	imgproc/types_c.h	/^    CV_RGBA2BGR    =3,$/;"	e	enum:__anon7
CV_RGBA2BGR555	imgproc/types_c.h	/^    CV_RGBA2BGR555 =27,$/;"	e	enum:__anon7
CV_RGBA2BGR565	imgproc/types_c.h	/^    CV_RGBA2BGR565 =17,$/;"	e	enum:__anon7
CV_RGBA2BGRA	imgproc/types_c.h	/^    CV_RGBA2BGRA   =CV_BGRA2RGBA,$/;"	e	enum:__anon7
CV_RGBA2GRAY	imgproc/types_c.h	/^    CV_RGBA2GRAY   =11,$/;"	e	enum:__anon7
CV_RGBA2RGB	imgproc/types_c.h	/^    CV_RGBA2RGB    =CV_BGRA2BGR,$/;"	e	enum:__anon7
CV_RGBA2YUV_I420	imgproc/types_c.h	/^    CV_RGBA2YUV_I420 = 129,$/;"	e	enum:__anon7
CV_RGBA2YUV_IYUV	imgproc/types_c.h	/^    CV_RGBA2YUV_IYUV = CV_RGBA2YUV_I420,$/;"	e	enum:__anon7
CV_RGBA2YUV_YV12	imgproc/types_c.h	/^    CV_RGBA2YUV_YV12 = 133,$/;"	e	enum:__anon7
CV_RGBA2mRGBA	imgproc/types_c.h	/^    CV_RGBA2mRGBA = 125,$/;"	e	enum:__anon7
CV_RNG_COEFF	core/types_c.h	205;"	d
CV_SCHARR	imgproc/types_c.h	/^    CV_SCHARR =-1,$/;"	e	enum:__anon6
CV_SEQUENCE_FIELDS	core/types_c.h	1239;"	d
CV_SEQ_CHAIN	core/types_c.h	1450;"	d
CV_SEQ_CHAIN_CONTOUR	core/types_c.h	1451;"	d
CV_SEQ_CONNECTED_COMP	core/types_c.h	1457;"	d
CV_SEQ_CONTOUR	core/types_c.h	1446;"	d
CV_SEQ_ELEM	core/types_c.h	1549;"	d
CV_SEQ_ELTYPE	core/types_c.h	1462;"	d
CV_SEQ_ELTYPE_BITS	core/types_c.h	1400;"	d
CV_SEQ_ELTYPE_CODE	core/types_c.h	1404;"	d
CV_SEQ_ELTYPE_CONNECTED_COMP	core/types_c.h	1412;"	d
CV_SEQ_ELTYPE_GENERIC	core/types_c.h	1405;"	d
CV_SEQ_ELTYPE_GRAPH_EDGE	core/types_c.h	1409;"	d
CV_SEQ_ELTYPE_GRAPH_VERTEX	core/types_c.h	1410;"	d
CV_SEQ_ELTYPE_INDEX	core/types_c.h	1408;"	d
CV_SEQ_ELTYPE_MASK	core/types_c.h	1401;"	d
CV_SEQ_ELTYPE_POINT	core/types_c.h	1403;"	d
CV_SEQ_ELTYPE_POINT3D	core/types_c.h	1413;"	d
CV_SEQ_ELTYPE_PPOINT	core/types_c.h	1407;"	d
CV_SEQ_ELTYPE_PTR	core/types_c.h	1406;"	d
CV_SEQ_ELTYPE_TRIAN_ATR	core/types_c.h	1411;"	d
CV_SEQ_FLAG_CLOSED	core/types_c.h	1430;"	d
CV_SEQ_FLAG_CONVEX	core/types_c.h	1432;"	d
CV_SEQ_FLAG_HOLE	core/types_c.h	1433;"	d
CV_SEQ_FLAG_SHIFT	core/types_c.h	1427;"	d
CV_SEQ_FLAG_SIMPLE	core/types_c.h	1431;"	d
CV_SEQ_INDEX	core/types_c.h	1460;"	d
CV_SEQ_KIND	core/types_c.h	1463;"	d
CV_SEQ_KIND_BIN_TREE	core/types_c.h	1421;"	d
CV_SEQ_KIND_BITS	core/types_c.h	1415;"	d
CV_SEQ_KIND_CURVE	core/types_c.h	1420;"	d
CV_SEQ_KIND_GENERIC	core/types_c.h	1419;"	d
CV_SEQ_KIND_GRAPH	core/types_c.h	1424;"	d
CV_SEQ_KIND_MASK	core/types_c.h	1416;"	d
CV_SEQ_KIND_SUBDIV2D	core/types_c.h	1425;"	d
CV_SEQ_MAGIC_VAL	core/types_c.h	1391;"	d
CV_SEQ_POINT3D_SET	core/types_c.h	1443;"	d
CV_SEQ_POINT_SET	core/types_c.h	1442;"	d
CV_SEQ_POLYGON	core/types_c.h	1445;"	d
CV_SEQ_POLYGON_TREE	core/types_c.h	1454;"	d
CV_SEQ_POLYLINE	core/types_c.h	1444;"	d
CV_SEQ_READER_FIELDS	core/types_c.h	1529;"	d
CV_SEQ_SIMPLE_POLYGON	core/types_c.h	1447;"	d
CV_SEQ_WRITER_FIELDS	core/types_c.h	1514;"	d
CV_SET_ELEM_FIELDS	core/types_c.h	1265;"	d
CV_SET_ELEM_FREE_FLAG	core/types_c.h	1288;"	d
CV_SET_ELEM_IDX_MASK	core/types_c.h	1287;"	d
CV_SET_FIELDS	core/types_c.h	1275;"	d
CV_SET_MAGIC_VAL	core/types_c.h	1396;"	d
CV_SHAPE_CROSS	imgproc/types_c.h	/^    CV_SHAPE_CROSS     =1,$/;"	e	enum:MorphShapes_c
CV_SHAPE_CUSTOM	imgproc/types_c.h	/^    CV_SHAPE_CUSTOM    =100 \/\/!< custom structuring element$/;"	e	enum:MorphShapes_c
CV_SHAPE_ELLIPSE	imgproc/types_c.h	/^    CV_SHAPE_ELLIPSE   =2,$/;"	e	enum:MorphShapes_c
CV_SHAPE_RECT	imgproc/types_c.h	/^    CV_SHAPE_RECT      =0,$/;"	e	enum:MorphShapes_c
CV_SIGN	core/types_c.h	195;"	d
CV_SIMD128	hal/intrin.hpp	285;"	d
CV_SIMD128	hal/intrin_neon.hpp	51;"	d
CV_SIMD128	hal/intrin_sse.hpp	48;"	d
CV_SIMD128_64F	hal/intrin.hpp	289;"	d
CV_SIMD128_64F	hal/intrin_sse.hpp	49;"	d
CV_SORT_ASCENDING	core/core_c.h	1252;"	d
CV_SORT_DESCENDING	core/core_c.h	1253;"	d
CV_SORT_EVERY_COLUMN	core/core_c.h	1251;"	d
CV_SORT_EVERY_ROW	core/core_c.h	1250;"	d
CV_SPARSE_MAT_MAGIC_VAL	core/types_c.h	668;"	d
CV_SSE	hal/defs.h	126;"	d
CV_SSE	hal/defs.h	195;"	d
CV_SSE2	hal/defs.h	127;"	d
CV_SSE2	hal/defs.h	198;"	d
CV_SSE3	hal/defs.h	130;"	d
CV_SSE3	hal/defs.h	201;"	d
CV_SSE4_1	hal/defs.h	138;"	d
CV_SSE4_1	hal/defs.h	207;"	d
CV_SSE4_2	hal/defs.h	142;"	d
CV_SSE4_2	hal/defs.h	210;"	d
CV_SSSE3	hal/defs.h	134;"	d
CV_SSSE3	hal/defs.h	204;"	d
CV_STDCALL	core/types_c.h	70;"	d
CV_STDCALL	core/types_c.h	73;"	d
CV_STEREO_BM_BASIC	calib3d/calib3d_c.h	354;"	d
CV_STEREO_BM_FISH_EYE	calib3d/calib3d_c.h	355;"	d
CV_STEREO_BM_NARROW	calib3d/calib3d_c.h	356;"	d
CV_STEREO_BM_NORMALIZED_RESPONSE	calib3d/calib3d_c.h	316;"	d
CV_STEREO_BM_XSOBEL	calib3d/calib3d_c.h	317;"	d
CV_STORAGE_APPEND	core/types_c.h	1666;"	d
CV_STORAGE_FORMAT_AUTO	core/types_c.h	1669;"	d
CV_STORAGE_FORMAT_MASK	core/types_c.h	1668;"	d
CV_STORAGE_FORMAT_XML	core/types_c.h	1670;"	d
CV_STORAGE_FORMAT_YAML	core/types_c.h	1671;"	d
CV_STORAGE_MAGIC_VAL	core/types_c.h	1187;"	d
CV_STORAGE_MEMORY	core/types_c.h	1667;"	d
CV_STORAGE_READ	core/types_c.h	1662;"	d
CV_STORAGE_WRITE	core/types_c.h	1663;"	d
CV_STORAGE_WRITE_BINARY	core/types_c.h	1665;"	d
CV_STORAGE_WRITE_TEXT	core/types_c.h	1664;"	d
CV_STYLE_ITALIC	highgui/highgui_c.h	/^        CV_STYLE_ITALIC         = 1,\/\/QFont::StyleItalic,$/;"	e	enum:__anon443
CV_STYLE_NORMAL	highgui/highgui_c.h	/^enum {  CV_STYLE_NORMAL         = 0,\/\/QFont::StyleNormal,$/;"	e	enum:__anon443
CV_STYLE_OBLIQUE	highgui/highgui_c.h	/^        CV_STYLE_OBLIQUE        = 2 \/\/QFont::StyleOblique$/;"	e	enum:__anon443
CV_SUBMAT_FLAG	core/cvdef.h	167;"	d
CV_SUBMAT_FLAG_SHIFT	core/cvdef.h	166;"	d
CV_SUBMINOR_VERSION	core/version.hpp	69;"	d
CV_SUPPRESS_DEPRECATED_END	core/base.hpp	298;"	d
CV_SUPPRESS_DEPRECATED_END	core/base.hpp	303;"	d
CV_SUPPRESS_DEPRECATED_END	core/base.hpp	306;"	d
CV_SUPPRESS_DEPRECATED_START	core/base.hpp	295;"	d
CV_SUPPRESS_DEPRECATED_START	core/base.hpp	300;"	d
CV_SUPPRESS_DEPRECATED_START	core/base.hpp	305;"	d
CV_SVD	core/core_c.h	1342;"	d
CV_SVD_MODIFY_A	core/core_c.h	1327;"	d
CV_SVD_SYM	core/core_c.h	1343;"	d
CV_SVD_U_T	core/core_c.h	1328;"	d
CV_SVD_V_T	core/core_c.h	1329;"	d
CV_SWAP	core/types_c.h	181;"	d
CV_StaticAssert	core/base.hpp	262;"	d
CV_StaticAssert	core/base.hpp	266;"	d
CV_StaticAssert	core/base.hpp	270;"	d
CV_StaticAssert	core/base.hpp	275;"	d
CV_StaticAssert	core/base.hpp	280;"	d
CV_StaticAssert_failed	core/base.hpp	/^     template <> struct CV_StaticAssert_failed<true> { enum { val = 1 }; };$/;"	s	namespace:cv
CV_StaticAssert_test	core/base.hpp	/^     template<int x> struct CV_StaticAssert_test {};$/;"	s	namespace:cv
CV_StsAssert	core/types_c.h	/^ CV_StsAssert=                 -215, \/**< assertion failed *\/$/;"	e	enum:__anon143
CV_StsAutoTrace	core/types_c.h	/^ CV_StsAutoTrace=               -8,  \/**< tracing                         *\/$/;"	e	enum:__anon143
CV_StsBackTrace	core/types_c.h	/^ CV_StsBackTrace=               -1,  \/**< pseudo error for back trace     *\/$/;"	e	enum:__anon143
CV_StsBadArg	core/types_c.h	/^ CV_StsBadArg=                  -5,  \/**< function arg\/param is bad       *\/$/;"	e	enum:__anon143
CV_StsBadFlag	core/types_c.h	/^ CV_StsBadFlag=                -206, \/**< flag is wrong or not supported *\/$/;"	e	enum:__anon143
CV_StsBadFunc	core/types_c.h	/^ CV_StsBadFunc=                 -6,  \/**< unsupported function            *\/$/;"	e	enum:__anon143
CV_StsBadMask	core/types_c.h	/^ CV_StsBadMask=                -208, \/**< bad format of mask (neither 8uC1 nor 8sC1)*\/$/;"	e	enum:__anon143
CV_StsBadMemBlock	core/types_c.h	/^ CV_StsBadMemBlock=            -214, \/**< an allocated block has been corrupted *\/$/;"	e	enum:__anon143
CV_StsBadPoint	core/types_c.h	/^ CV_StsBadPoint=               -207, \/**< bad CvPoint *\/$/;"	e	enum:__anon143
CV_StsBadSize	core/types_c.h	/^ CV_StsBadSize=                -201, \/**< the input\/output structure size is incorrect  *\/$/;"	e	enum:__anon143
CV_StsDivByZero	core/types_c.h	/^ CV_StsDivByZero=              -202, \/**< division by zero *\/$/;"	e	enum:__anon143
CV_StsError	core/types_c.h	/^ CV_StsError=                   -2,  \/**< unknown \/unspecified error      *\/$/;"	e	enum:__anon143
CV_StsFilterOffsetErr	core/types_c.h	/^ CV_StsFilterOffsetErr=        -31,  \/**< incorrect filter offset value *\/$/;"	e	enum:__anon143
CV_StsFilterStructContentErr	core/types_c.h	/^ CV_StsFilterStructContentErr= -29,  \/**< incorr. filter structure content *\/$/;"	e	enum:__anon143
CV_StsInplaceNotSupported	core/types_c.h	/^ CV_StsInplaceNotSupported=    -203, \/**< in-place operation is not supported *\/$/;"	e	enum:__anon143
CV_StsInternal	core/types_c.h	/^ CV_StsInternal=                -3,  \/**< internal error (bad state)      *\/$/;"	e	enum:__anon143
CV_StsKernelStructContentErr	core/types_c.h	/^ CV_StsKernelStructContentErr= -30,  \/**< incorr. transform kernel content *\/$/;"	e	enum:__anon143
CV_StsNoConv	core/types_c.h	/^ CV_StsNoConv=                  -7,  \/**< iter. didn't converge           *\/$/;"	e	enum:__anon143
CV_StsNoMem	core/types_c.h	/^ CV_StsNoMem=                   -4,  \/**< insufficient memory             *\/$/;"	e	enum:__anon143
CV_StsNotImplemented	core/types_c.h	/^ CV_StsNotImplemented=         -213, \/**< the requested function\/feature is not implemented *\/$/;"	e	enum:__anon143
CV_StsNullPtr	core/types_c.h	/^ CV_StsNullPtr=                -27,  \/**< null pointer *\/$/;"	e	enum:__anon143
CV_StsObjectNotFound	core/types_c.h	/^ CV_StsObjectNotFound=         -204, \/**< request can't be completed *\/$/;"	e	enum:__anon143
CV_StsOk	core/types_c.h	/^ CV_StsOk=                       0,  \/**< everything is ok                *\/$/;"	e	enum:__anon143
CV_StsOutOfRange	core/types_c.h	/^ CV_StsOutOfRange=             -211, \/**< some of parameters are out of range *\/$/;"	e	enum:__anon143
CV_StsParseError	core/types_c.h	/^ CV_StsParseError=             -212, \/**< invalid syntax\/structure of the parsed file *\/$/;"	e	enum:__anon143
CV_StsUnmatchedFormats	core/types_c.h	/^ CV_StsUnmatchedFormats=       -205, \/**< formats of input\/output arrays differ *\/$/;"	e	enum:__anon143
CV_StsUnmatchedSizes	core/types_c.h	/^ CV_StsUnmatchedSizes=         -209, \/**< sizes of input\/output structures do not match *\/$/;"	e	enum:__anon143
CV_StsUnsupportedFormat	core/types_c.h	/^ CV_StsUnsupportedFormat=      -210, \/**< the data format\/type is not supported by the function*\/$/;"	e	enum:__anon143
CV_StsVecLengthErr	core/types_c.h	/^ CV_StsVecLengthErr=           -28,  \/**< incorrect vector length *\/$/;"	e	enum:__anon143
CV_TERMCRIT_EPS	core/types_c.h	831;"	d
CV_TERMCRIT_ITER	core/types_c.h	829;"	d
CV_TERMCRIT_NUMBER	core/types_c.h	830;"	d
CV_TEST_FAIL_NO_IMPL	ts.hpp	583;"	d
CV_TEST_MAIN	ts.hpp	569;"	d
CV_THRESH_BINARY	imgproc/types_c.h	/^    CV_THRESH_BINARY      =0,  \/**< value = value > threshold ? max_value : 0       *\/$/;"	e	enum:__anon20
CV_THRESH_BINARY_INV	imgproc/types_c.h	/^    CV_THRESH_BINARY_INV  =1,  \/**< value = value > threshold ? 0 : max_value       *\/$/;"	e	enum:__anon20
CV_THRESH_MASK	imgproc/types_c.h	/^    CV_THRESH_MASK        =7,$/;"	e	enum:__anon20
CV_THRESH_OTSU	imgproc/types_c.h	/^    CV_THRESH_OTSU        =8, \/**< use Otsu algorithm to choose the optimal threshold value;$/;"	e	enum:__anon20
CV_THRESH_TOZERO	imgproc/types_c.h	/^    CV_THRESH_TOZERO      =3,  \/**< value = value > threshold ? value : 0           *\/$/;"	e	enum:__anon20
CV_THRESH_TOZERO_INV	imgproc/types_c.h	/^    CV_THRESH_TOZERO_INV  =4,  \/**< value = value > threshold ? 0 : value           *\/$/;"	e	enum:__anon20
CV_THRESH_TRIANGLE	imgproc/types_c.h	/^    CV_THRESH_TRIANGLE    =16  \/**< use Triangle algorithm to choose the optimal threshold value;$/;"	e	enum:__anon20
CV_THRESH_TRUNC	imgproc/types_c.h	/^    CV_THRESH_TRUNC       =2,  \/**< value = value > threshold ? threshold : value   *\/$/;"	e	enum:__anon20
CV_TM_CCOEFF	imgproc/types_c.h	/^    CV_TM_CCOEFF        =4,$/;"	e	enum:__anon11
CV_TM_CCOEFF_NORMED	imgproc/types_c.h	/^    CV_TM_CCOEFF_NORMED =5$/;"	e	enum:__anon11
CV_TM_CCORR	imgproc/types_c.h	/^    CV_TM_CCORR         =2,$/;"	e	enum:__anon11
CV_TM_CCORR_NORMED	imgproc/types_c.h	/^    CV_TM_CCORR_NORMED  =3,$/;"	e	enum:__anon11
CV_TM_SQDIFF	imgproc/types_c.h	/^    CV_TM_SQDIFF        =0,$/;"	e	enum:__anon11
CV_TM_SQDIFF_NORMED	imgproc/types_c.h	/^    CV_TM_SQDIFF_NORMED =1,$/;"	e	enum:__anon11
CV_TOGGLE_DBL	core/private.hpp	141;"	d
CV_TOGGLE_FLT	core/private.hpp	140;"	d
CV_TREE_NODE_FIELDS	core/types_c.h	1227;"	d
CV_TURN_ON_IPL_COMPATIBILITY	core/core_c.h	1965;"	d
CV_TYPE_NAME_GRAPH	core/types_c.h	1360;"	d
CV_TYPE_NAME_HAAR	objdetect/objdetect_c.h	65;"	d
CV_TYPE_NAME_IMAGE	core/types_c.h	384;"	d
CV_TYPE_NAME_MAT	core/types_c.h	410;"	d
CV_TYPE_NAME_MATND	core/types_c.h	614;"	d
CV_TYPE_NAME_SEQ	core/types_c.h	1256;"	d
CV_TYPE_NAME_SEQ_TREE	core/types_c.h	1257;"	d
CV_TYPE_NAME_SPARSE_MAT	core/types_c.h	669;"	d
CV_TYZX_COLOR	videoio/videoio_c.h	/^    CV_TYZX_COLOR   =402,$/;"	e	enum:__anon63
CV_TYZX_LEFT	videoio/videoio_c.h	/^    CV_TYZX_LEFT    =400,$/;"	e	enum:__anon63
CV_TYZX_RIGHT	videoio/videoio_c.h	/^    CV_TYZX_RIGHT   =401,$/;"	e	enum:__anon63
CV_TYZX_Z	videoio/videoio_c.h	/^    CV_TYZX_Z       =403,$/;"	e	enum:__anon63
CV_UNMATCHED_FORMATS_ERR	core/private.hpp	/^    CV_UNMATCHED_FORMATS_ERR    = -104,$/;"	e	enum:CvStatus
CV_UNMATCHED_ROI_ERR	core/private.hpp	/^    CV_UNMATCHED_ROI_ERR        = -111,$/;"	e	enum:CvStatus
CV_UNSUPPORTED_CHANNELS_ERR	core/private.hpp	/^    CV_UNSUPPORTED_CHANNELS_ERR = -102,$/;"	e	enum:CvStatus
CV_UNSUPPORTED_COI_ERR	core/private.hpp	/^    CV_UNSUPPORTED_COI_ERR      = -103,$/;"	e	enum:CvStatus
CV_UNSUPPORTED_DEPTH_ERR	core/private.hpp	/^    CV_UNSUPPORTED_DEPTH_ERR    = -101,$/;"	e	enum:CvStatus
CV_UNSUPPORTED_FORMAT_ERR	core/private.hpp	/^    CV_UNSUPPORTED_FORMAT_ERR   = -100,$/;"	e	enum:CvStatus
CV_USRTYPE1	core/cvdef.h	108;"	d
CV_VERSION	core/version.hpp	64;"	d
CV_VERSION_MAJOR	core/version.hpp	53;"	d
CV_VERSION_MINOR	core/version.hpp	54;"	d
CV_VERSION_REVISION	core/version.hpp	55;"	d
CV_VERSION_STATUS	core/version.hpp	56;"	d
CV_VFP	hal/defs.h	183;"	d
CV_VFP	hal/defs.h	254;"	d
CV_WARP_FILL_OUTLIERS	imgproc/types_c.h	/^    CV_WARP_FILL_OUTLIERS =8,$/;"	e	enum:__anon9
CV_WARP_INVERSE_MAP	imgproc/types_c.h	/^    CV_WARP_INVERSE_MAP  =16$/;"	e	enum:__anon9
CV_WHOLE_ARR	core/types_c.h	406;"	d
CV_WHOLE_SEQ	core/types_c.h	1096;"	d
CV_WHOLE_SEQ_END_INDEX	core/types_c.h	1095;"	d
CV_WINDOW_AUTOSIZE	highgui/highgui_c.h	/^    CV_WINDOW_AUTOSIZE     = 0x00000001, \/\/the user cannot resize the window, the size is constrainted by the image displayed$/;"	e	enum:__anon445
CV_WINDOW_FREERATIO	highgui/highgui_c.h	/^    CV_WINDOW_FREERATIO    = 0x00000100,\/\/the image expends as much as it can (no ratio constraint)$/;"	e	enum:__anon445
CV_WINDOW_FULLSCREEN	highgui/highgui_c.h	/^    CV_WINDOW_FULLSCREEN   = 1,\/\/change the window to fullscreen$/;"	e	enum:__anon445
CV_WINDOW_KEEPRATIO	highgui/highgui_c.h	/^    CV_WINDOW_KEEPRATIO    = 0x00000000\/\/the ration image is respected.$/;"	e	enum:__anon445
CV_WINDOW_NORMAL	highgui/highgui_c.h	/^    CV_WINDOW_NORMAL       = 0x00000000, \/\/the user can resize the window (no constraint)  \/ also use to switch a fullscreen window to a normal size$/;"	e	enum:__anon445
CV_WINDOW_OPENGL	highgui/highgui_c.h	/^    CV_WINDOW_OPENGL       = 0x00001000, \/\/window with opengl support$/;"	e	enum:__anon445
CV_WND_PROP_ASPECTRATIO	highgui/highgui_c.h	/^    CV_WND_PROP_ASPECTRATIO= 2, \/\/to change\/get window's aspectratio property$/;"	e	enum:__anon445
CV_WND_PROP_AUTOSIZE	highgui/highgui_c.h	/^    CV_WND_PROP_AUTOSIZE   = 1, \/\/to change\/get window's autosize property$/;"	e	enum:__anon445
CV_WND_PROP_FULLSCREEN	highgui/highgui_c.h	/^    CV_WND_PROP_FULLSCREEN = 0, \/\/to change\/get window's fullscreen property$/;"	e	enum:__anon445
CV_WND_PROP_OPENGL	highgui/highgui_c.h	/^    CV_WND_PROP_OPENGL     = 3, \/\/to change\/get window's opengl support$/;"	e	enum:__anon445
CV_WRAP	core/cvdef.h	90;"	d
CV_WRAP_AS	core/cvdef.h	91;"	d
CV_WRAP_PROPERTY	core/private.hpp	183;"	d
CV_WRAP_PROPERTY_S	core/private.hpp	184;"	d
CV_WRAP_SAME_PROPERTY	core/private.hpp	186;"	d
CV_WRAP_SAME_PROPERTY_S	core/private.hpp	187;"	d
CV_WRITE_SEQ_ELEM	core/types_c.h	1570;"	d
CV_WRITE_SEQ_ELEM_VAR	core/types_c.h	1560;"	d
CV_XADD	core/cvdef.h	/^   CV_INLINE CV_XADD(int* addr, int delta) { int tmp = *addr; *addr += delta; return tmp; }$/;"	f
CV_XADD	core/cvdef.h	193;"	d
CV_XADD	core/cvdef.h	197;"	d
CV_XADD	core/cvdef.h	199;"	d
CV_XADD	core/cvdef.h	204;"	d
CV_XADD	core/cvdef.h	206;"	d
CV_XADD	core/cvdef.h	211;"	d
CV_XYZ2BGR	imgproc/types_c.h	/^    CV_XYZ2BGR     =34,$/;"	e	enum:__anon7
CV_XYZ2RGB	imgproc/types_c.h	/^    CV_XYZ2RGB     =35,$/;"	e	enum:__anon7
CV_YCrCb2BGR	imgproc/types_c.h	/^    CV_YCrCb2BGR   =38,$/;"	e	enum:__anon7
CV_YCrCb2RGB	imgproc/types_c.h	/^    CV_YCrCb2RGB   =39,$/;"	e	enum:__anon7
CV_YUV2BGR	imgproc/types_c.h	/^    CV_YUV2BGR      = 84,$/;"	e	enum:__anon7
CV_YUV2BGRA_I420	imgproc/types_c.h	/^    CV_YUV2BGRA_I420 = CV_YUV2BGRA_IYUV,$/;"	e	enum:__anon7
CV_YUV2BGRA_IYUV	imgproc/types_c.h	/^    CV_YUV2BGRA_IYUV = 105,$/;"	e	enum:__anon7
CV_YUV2BGRA_NV12	imgproc/types_c.h	/^    CV_YUV2BGRA_NV12 = 95,$/;"	e	enum:__anon7
CV_YUV2BGRA_NV21	imgproc/types_c.h	/^    CV_YUV2BGRA_NV21 = 97,$/;"	e	enum:__anon7
CV_YUV2BGRA_UYNV	imgproc/types_c.h	/^    CV_YUV2BGRA_UYNV = CV_YUV2BGRA_UYVY,$/;"	e	enum:__anon7
CV_YUV2BGRA_UYVY	imgproc/types_c.h	/^    CV_YUV2BGRA_UYVY = 112,$/;"	e	enum:__anon7
CV_YUV2BGRA_Y422	imgproc/types_c.h	/^    CV_YUV2BGRA_Y422 = CV_YUV2BGRA_UYVY,$/;"	e	enum:__anon7
CV_YUV2BGRA_YUNV	imgproc/types_c.h	/^    CV_YUV2BGRA_YUNV = CV_YUV2BGRA_YUY2,$/;"	e	enum:__anon7
CV_YUV2BGRA_YUY2	imgproc/types_c.h	/^    CV_YUV2BGRA_YUY2 = 120,$/;"	e	enum:__anon7
CV_YUV2BGRA_YUYV	imgproc/types_c.h	/^    CV_YUV2BGRA_YUYV = CV_YUV2BGRA_YUY2,$/;"	e	enum:__anon7
CV_YUV2BGRA_YV12	imgproc/types_c.h	/^    CV_YUV2BGRA_YV12 = 103,$/;"	e	enum:__anon7
CV_YUV2BGRA_YVYU	imgproc/types_c.h	/^    CV_YUV2BGRA_YVYU = 122,$/;"	e	enum:__anon7
CV_YUV2BGR_I420	imgproc/types_c.h	/^    CV_YUV2BGR_I420 = CV_YUV2BGR_IYUV,$/;"	e	enum:__anon7
CV_YUV2BGR_IYUV	imgproc/types_c.h	/^    CV_YUV2BGR_IYUV = 101,$/;"	e	enum:__anon7
CV_YUV2BGR_NV12	imgproc/types_c.h	/^    CV_YUV2BGR_NV12 = 91,$/;"	e	enum:__anon7
CV_YUV2BGR_NV21	imgproc/types_c.h	/^    CV_YUV2BGR_NV21 = 93,$/;"	e	enum:__anon7
CV_YUV2BGR_UYNV	imgproc/types_c.h	/^    CV_YUV2BGR_UYNV = CV_YUV2BGR_UYVY,$/;"	e	enum:__anon7
CV_YUV2BGR_UYVY	imgproc/types_c.h	/^    CV_YUV2BGR_UYVY = 108,$/;"	e	enum:__anon7
CV_YUV2BGR_Y422	imgproc/types_c.h	/^    CV_YUV2BGR_Y422 = CV_YUV2BGR_UYVY,$/;"	e	enum:__anon7
CV_YUV2BGR_YUNV	imgproc/types_c.h	/^    CV_YUV2BGR_YUNV = CV_YUV2BGR_YUY2,$/;"	e	enum:__anon7
CV_YUV2BGR_YUY2	imgproc/types_c.h	/^    CV_YUV2BGR_YUY2 = 116,$/;"	e	enum:__anon7
CV_YUV2BGR_YUYV	imgproc/types_c.h	/^    CV_YUV2BGR_YUYV = CV_YUV2BGR_YUY2,$/;"	e	enum:__anon7
CV_YUV2BGR_YV12	imgproc/types_c.h	/^    CV_YUV2BGR_YV12 = 99,$/;"	e	enum:__anon7
CV_YUV2BGR_YVYU	imgproc/types_c.h	/^    CV_YUV2BGR_YVYU = 118,$/;"	e	enum:__anon7
CV_YUV2GRAY_420	imgproc/types_c.h	/^    CV_YUV2GRAY_420 = 106,$/;"	e	enum:__anon7
CV_YUV2GRAY_I420	imgproc/types_c.h	/^    CV_YUV2GRAY_I420 = CV_YUV2GRAY_420,$/;"	e	enum:__anon7
CV_YUV2GRAY_IYUV	imgproc/types_c.h	/^    CV_YUV2GRAY_IYUV = CV_YUV2GRAY_420,$/;"	e	enum:__anon7
CV_YUV2GRAY_NV12	imgproc/types_c.h	/^    CV_YUV2GRAY_NV12 = CV_YUV2GRAY_420,$/;"	e	enum:__anon7
CV_YUV2GRAY_NV21	imgproc/types_c.h	/^    CV_YUV2GRAY_NV21 = CV_YUV2GRAY_420,$/;"	e	enum:__anon7
CV_YUV2GRAY_UYNV	imgproc/types_c.h	/^    CV_YUV2GRAY_UYNV = CV_YUV2GRAY_UYVY,$/;"	e	enum:__anon7
CV_YUV2GRAY_UYVY	imgproc/types_c.h	/^    CV_YUV2GRAY_UYVY = 123,$/;"	e	enum:__anon7
CV_YUV2GRAY_Y422	imgproc/types_c.h	/^    CV_YUV2GRAY_Y422 = CV_YUV2GRAY_UYVY,$/;"	e	enum:__anon7
CV_YUV2GRAY_YUNV	imgproc/types_c.h	/^    CV_YUV2GRAY_YUNV = CV_YUV2GRAY_YUY2,$/;"	e	enum:__anon7
CV_YUV2GRAY_YUY2	imgproc/types_c.h	/^    CV_YUV2GRAY_YUY2 = 124,$/;"	e	enum:__anon7
CV_YUV2GRAY_YUYV	imgproc/types_c.h	/^    CV_YUV2GRAY_YUYV = CV_YUV2GRAY_YUY2,$/;"	e	enum:__anon7
CV_YUV2GRAY_YV12	imgproc/types_c.h	/^    CV_YUV2GRAY_YV12 = CV_YUV2GRAY_420,$/;"	e	enum:__anon7
CV_YUV2GRAY_YVYU	imgproc/types_c.h	/^    CV_YUV2GRAY_YVYU = CV_YUV2GRAY_YUY2,$/;"	e	enum:__anon7
CV_YUV2RGB	imgproc/types_c.h	/^    CV_YUV2RGB      = 85,$/;"	e	enum:__anon7
CV_YUV2RGBA_I420	imgproc/types_c.h	/^    CV_YUV2RGBA_I420 = CV_YUV2RGBA_IYUV,$/;"	e	enum:__anon7
CV_YUV2RGBA_IYUV	imgproc/types_c.h	/^    CV_YUV2RGBA_IYUV = 104,$/;"	e	enum:__anon7
CV_YUV2RGBA_NV12	imgproc/types_c.h	/^    CV_YUV2RGBA_NV12 = 94,$/;"	e	enum:__anon7
CV_YUV2RGBA_NV21	imgproc/types_c.h	/^    CV_YUV2RGBA_NV21 = 96,$/;"	e	enum:__anon7
CV_YUV2RGBA_UYNV	imgproc/types_c.h	/^    CV_YUV2RGBA_UYNV = CV_YUV2RGBA_UYVY,$/;"	e	enum:__anon7
CV_YUV2RGBA_UYVY	imgproc/types_c.h	/^    CV_YUV2RGBA_UYVY = 111,$/;"	e	enum:__anon7
CV_YUV2RGBA_Y422	imgproc/types_c.h	/^    CV_YUV2RGBA_Y422 = CV_YUV2RGBA_UYVY,$/;"	e	enum:__anon7
CV_YUV2RGBA_YUNV	imgproc/types_c.h	/^    CV_YUV2RGBA_YUNV = CV_YUV2RGBA_YUY2,$/;"	e	enum:__anon7
CV_YUV2RGBA_YUY2	imgproc/types_c.h	/^    CV_YUV2RGBA_YUY2 = 119,$/;"	e	enum:__anon7
CV_YUV2RGBA_YUYV	imgproc/types_c.h	/^    CV_YUV2RGBA_YUYV = CV_YUV2RGBA_YUY2,$/;"	e	enum:__anon7
CV_YUV2RGBA_YV12	imgproc/types_c.h	/^    CV_YUV2RGBA_YV12 = 102,$/;"	e	enum:__anon7
CV_YUV2RGBA_YVYU	imgproc/types_c.h	/^    CV_YUV2RGBA_YVYU = 121,$/;"	e	enum:__anon7
CV_YUV2RGB_I420	imgproc/types_c.h	/^    CV_YUV2RGB_I420 = CV_YUV2RGB_IYUV,$/;"	e	enum:__anon7
CV_YUV2RGB_IYUV	imgproc/types_c.h	/^    CV_YUV2RGB_IYUV = 100,$/;"	e	enum:__anon7
CV_YUV2RGB_NV12	imgproc/types_c.h	/^    CV_YUV2RGB_NV12 = 90,$/;"	e	enum:__anon7
CV_YUV2RGB_NV21	imgproc/types_c.h	/^    CV_YUV2RGB_NV21 = 92,$/;"	e	enum:__anon7
CV_YUV2RGB_UYNV	imgproc/types_c.h	/^    CV_YUV2RGB_UYNV = CV_YUV2RGB_UYVY,$/;"	e	enum:__anon7
CV_YUV2RGB_UYVY	imgproc/types_c.h	/^    CV_YUV2RGB_UYVY = 107,$/;"	e	enum:__anon7
CV_YUV2RGB_Y422	imgproc/types_c.h	/^    CV_YUV2RGB_Y422 = CV_YUV2RGB_UYVY,$/;"	e	enum:__anon7
CV_YUV2RGB_YUNV	imgproc/types_c.h	/^    CV_YUV2RGB_YUNV = CV_YUV2RGB_YUY2,$/;"	e	enum:__anon7
CV_YUV2RGB_YUY2	imgproc/types_c.h	/^    CV_YUV2RGB_YUY2 = 115,$/;"	e	enum:__anon7
CV_YUV2RGB_YUYV	imgproc/types_c.h	/^    CV_YUV2RGB_YUYV = CV_YUV2RGB_YUY2,$/;"	e	enum:__anon7
CV_YUV2RGB_YV12	imgproc/types_c.h	/^    CV_YUV2RGB_YV12 = 98,$/;"	e	enum:__anon7
CV_YUV2RGB_YVYU	imgproc/types_c.h	/^    CV_YUV2RGB_YVYU = 117,$/;"	e	enum:__anon7
CV_YUV420p2BGR	imgproc/types_c.h	/^    CV_YUV420p2BGR = CV_YUV2BGR_YV12,$/;"	e	enum:__anon7
CV_YUV420p2BGRA	imgproc/types_c.h	/^    CV_YUV420p2BGRA = CV_YUV2BGRA_YV12,$/;"	e	enum:__anon7
CV_YUV420p2GRAY	imgproc/types_c.h	/^    CV_YUV420p2GRAY = CV_YUV2GRAY_420,$/;"	e	enum:__anon7
CV_YUV420p2RGB	imgproc/types_c.h	/^    CV_YUV420p2RGB = CV_YUV2RGB_YV12,$/;"	e	enum:__anon7
CV_YUV420p2RGBA	imgproc/types_c.h	/^    CV_YUV420p2RGBA = CV_YUV2RGBA_YV12,$/;"	e	enum:__anon7
CV_YUV420sp2BGR	imgproc/types_c.h	/^    CV_YUV420sp2BGR = CV_YUV2BGR_NV21,$/;"	e	enum:__anon7
CV_YUV420sp2BGRA	imgproc/types_c.h	/^    CV_YUV420sp2BGRA = CV_YUV2BGRA_NV21,$/;"	e	enum:__anon7
CV_YUV420sp2GRAY	imgproc/types_c.h	/^    CV_YUV420sp2GRAY = CV_YUV2GRAY_420,$/;"	e	enum:__anon7
CV_YUV420sp2RGB	imgproc/types_c.h	/^    CV_YUV420sp2RGB = CV_YUV2RGB_NV21,$/;"	e	enum:__anon7
CV_YUV420sp2RGBA	imgproc/types_c.h	/^    CV_YUV420sp2RGBA = CV_YUV2RGBA_NV21,$/;"	e	enum:__anon7
CV_mRGBA2RGBA	imgproc/types_c.h	/^    CV_mRGBA2RGBA = 126,$/;"	e	enum:__anon7
C_SVC	ml.hpp	/^        C_SVC=100,$/;"	e	enum:cv::ml::SVM::Types
CalculateEndIndex	ts/ts_gtest.h	/^  static int CalculateEndIndex(const T& begin,$/;"	f	class:testing::internal::RangeGenerator
CalibrateCRF	photo.hpp	/^class CV_EXPORTS_W CalibrateCRF : public Algorithm$/;"	c	namespace:cv
CalibrateDebevec	photo.hpp	/^class CV_EXPORTS_W CalibrateDebevec : public CalibrateCRF$/;"	c	namespace:cv
CalibrateRobertson	photo.hpp	/^class CV_EXPORTS_W CalibrateRobertson : public CalibrateCRF$/;"	c	namespace:cv
Camera	viz/types.hpp	/^        class CV_EXPORTS Camera$/;"	c	namespace:cv::viz
CameraParams	stitching/detail/camera.hpp	/^struct CV_EXPORTS CameraParams$/;"	s	namespace:cv::detail
CannyEdgeDetector	cudaimgproc.hpp	/^class CV_EXPORTS CannyEdgeDetector : public Algorithm$/;"	c	namespace:cv::cuda
CartesianProductGenerator10	ts/ts_gtest.h	/^  CartesianProductGenerator10(const ParamGenerator<T1>& g1,$/;"	f	class:testing::internal::CartesianProductGenerator10
CartesianProductGenerator10	ts/ts_gtest.h	/^class CartesianProductGenerator10$/;"	c	namespace:testing::internal
CartesianProductGenerator2	ts/ts_gtest.h	/^  CartesianProductGenerator2(const ParamGenerator<T1>& g1,$/;"	f	class:testing::internal::CartesianProductGenerator2
CartesianProductGenerator2	ts/ts_gtest.h	/^class CartesianProductGenerator2$/;"	c	namespace:testing::internal
CartesianProductGenerator3	ts/ts_gtest.h	/^  CartesianProductGenerator3(const ParamGenerator<T1>& g1,$/;"	f	class:testing::internal::CartesianProductGenerator3
CartesianProductGenerator3	ts/ts_gtest.h	/^class CartesianProductGenerator3$/;"	c	namespace:testing::internal
CartesianProductGenerator4	ts/ts_gtest.h	/^  CartesianProductGenerator4(const ParamGenerator<T1>& g1,$/;"	f	class:testing::internal::CartesianProductGenerator4
CartesianProductGenerator4	ts/ts_gtest.h	/^class CartesianProductGenerator4$/;"	c	namespace:testing::internal
CartesianProductGenerator5	ts/ts_gtest.h	/^  CartesianProductGenerator5(const ParamGenerator<T1>& g1,$/;"	f	class:testing::internal::CartesianProductGenerator5
CartesianProductGenerator5	ts/ts_gtest.h	/^class CartesianProductGenerator5$/;"	c	namespace:testing::internal
CartesianProductGenerator6	ts/ts_gtest.h	/^  CartesianProductGenerator6(const ParamGenerator<T1>& g1,$/;"	f	class:testing::internal::CartesianProductGenerator6
CartesianProductGenerator6	ts/ts_gtest.h	/^class CartesianProductGenerator6$/;"	c	namespace:testing::internal
CartesianProductGenerator7	ts/ts_gtest.h	/^  CartesianProductGenerator7(const ParamGenerator<T1>& g1,$/;"	f	class:testing::internal::CartesianProductGenerator7
CartesianProductGenerator7	ts/ts_gtest.h	/^class CartesianProductGenerator7$/;"	c	namespace:testing::internal
CartesianProductGenerator8	ts/ts_gtest.h	/^  CartesianProductGenerator8(const ParamGenerator<T1>& g1,$/;"	f	class:testing::internal::CartesianProductGenerator8
CartesianProductGenerator8	ts/ts_gtest.h	/^class CartesianProductGenerator8$/;"	c	namespace:testing::internal
CartesianProductGenerator9	ts/ts_gtest.h	/^  CartesianProductGenerator9(const ParamGenerator<T1>& g1,$/;"	f	class:testing::internal::CartesianProductGenerator9
CartesianProductGenerator9	ts/ts_gtest.h	/^class CartesianProductGenerator9$/;"	c	namespace:testing::internal
CartesianProductHolder10	ts/ts_gtest.h	/^CartesianProductHolder10(const Generator1& g1, const Generator2& g2,$/;"	f	class:testing::internal::CartesianProductHolder10
CartesianProductHolder10	ts/ts_gtest.h	/^class CartesianProductHolder10 {$/;"	c	namespace:testing::internal
CartesianProductHolder2	ts/ts_gtest.h	/^CartesianProductHolder2(const Generator1& g1, const Generator2& g2)$/;"	f	class:testing::internal::CartesianProductHolder2
CartesianProductHolder2	ts/ts_gtest.h	/^class CartesianProductHolder2 {$/;"	c	namespace:testing::internal
CartesianProductHolder3	ts/ts_gtest.h	/^CartesianProductHolder3(const Generator1& g1, const Generator2& g2,$/;"	f	class:testing::internal::CartesianProductHolder3
CartesianProductHolder3	ts/ts_gtest.h	/^class CartesianProductHolder3 {$/;"	c	namespace:testing::internal
CartesianProductHolder4	ts/ts_gtest.h	/^CartesianProductHolder4(const Generator1& g1, const Generator2& g2,$/;"	f	class:testing::internal::CartesianProductHolder4
CartesianProductHolder4	ts/ts_gtest.h	/^class CartesianProductHolder4 {$/;"	c	namespace:testing::internal
CartesianProductHolder5	ts/ts_gtest.h	/^CartesianProductHolder5(const Generator1& g1, const Generator2& g2,$/;"	f	class:testing::internal::CartesianProductHolder5
CartesianProductHolder5	ts/ts_gtest.h	/^class CartesianProductHolder5 {$/;"	c	namespace:testing::internal
CartesianProductHolder6	ts/ts_gtest.h	/^CartesianProductHolder6(const Generator1& g1, const Generator2& g2,$/;"	f	class:testing::internal::CartesianProductHolder6
CartesianProductHolder6	ts/ts_gtest.h	/^class CartesianProductHolder6 {$/;"	c	namespace:testing::internal
CartesianProductHolder7	ts/ts_gtest.h	/^CartesianProductHolder7(const Generator1& g1, const Generator2& g2,$/;"	f	class:testing::internal::CartesianProductHolder7
CartesianProductHolder7	ts/ts_gtest.h	/^class CartesianProductHolder7 {$/;"	c	namespace:testing::internal
CartesianProductHolder8	ts/ts_gtest.h	/^CartesianProductHolder8(const Generator1& g1, const Generator2& g2,$/;"	f	class:testing::internal::CartesianProductHolder8
CartesianProductHolder8	ts/ts_gtest.h	/^class CartesianProductHolder8 {$/;"	c	namespace:testing::internal
CartesianProductHolder9	ts/ts_gtest.h	/^CartesianProductHolder9(const Generator1& g1, const Generator2& g2,$/;"	f	class:testing::internal::CartesianProductHolder9
CartesianProductHolder9	ts/ts_gtest.h	/^class CartesianProductHolder9 {$/;"	c	namespace:testing::internal
CascadeClassifier	cudaobjdetect.hpp	/^class CV_EXPORTS CascadeClassifier : public Algorithm$/;"	c	namespace:cv::cuda
CascadeClassifier	objdetect.hpp	/^class CV_EXPORTS_W CascadeClassifier$/;"	c	namespace:cv
Cell	videostab/outlier_rejection.hpp	/^    typedef std::vector<int> Cell;$/;"	t	class:cv::videostab::TranslationBasedLocalOutlierRejector
ChDir	ts/ts_gtest.h	/^inline int ChDir(const char* dir) { return chdir(dir); }$/;"	f	namespace:std::tr1::posix
ChannelSize	core/wimage.hpp	/^    int ChannelSize() const {return sizeof(T); }  \/\/ number of bytes per channel$/;"	f	class:cv::WImage
Channels	core/wimage.hpp	/^    int Channels() const {return C; }$/;"	f	class:cv::WImageC
Channels	core/wimage.hpp	/^    int Channels() const {return image_->nChannels; }$/;"	f	class:cv::WImage
CheckedDowncastToActualType	ts/ts_gtest.h	/^Derived* CheckedDowncastToActualType(Base* base) {$/;"	f	namespace:std::tr1
ChiHistogramCostExtractor	shape/hist_cost.hpp	/^class CV_EXPORTS_W ChiHistogramCostExtractor : public HistogramCostExtractor$/;"	c	namespace:cv
ChiSquareDistance	flann/dist.h	/^struct ChiSquareDistance$/;"	s	namespace:cvflann
ChromaFormat	cudacodec.hpp	/^enum ChromaFormat$/;"	g	namespace:cv::cudacodec
ClassifierSize	cudalegacy/NCVHaarObjectDetection.hpp	/^    NcvSize32u ClassifierSize;$/;"	m	struct:HaarClassifierCascadeDescriptor
ClearStat	cudacodec.hpp	/^    int ClearStat;       \/\/!< NVVE_CLEAR_STAT,$/;"	m	struct:cv::cudacodec::EncoderParams
ClearTestCaseResult	ts/ts_gtest.h	/^  static void ClearTestCaseResult(TestCase* test_case) {$/;"	f	class:testing::TestCase
ClearTestResult	ts/ts_gtest.h	/^  static void ClearTestResult(TestInfo* test_info) {$/;"	f	class:testing::TestInfo
Clone	ts/ts_gtest.h	/^    virtual ParamIteratorInterface<ParamType>* Clone() const {$/;"	f	class:testing::internal::CartesianProductGenerator10::Iterator
Clone	ts/ts_gtest.h	/^    virtual ParamIteratorInterface<ParamType>* Clone() const {$/;"	f	class:testing::internal::CartesianProductGenerator2::Iterator
Clone	ts/ts_gtest.h	/^    virtual ParamIteratorInterface<ParamType>* Clone() const {$/;"	f	class:testing::internal::CartesianProductGenerator3::Iterator
Clone	ts/ts_gtest.h	/^    virtual ParamIteratorInterface<ParamType>* Clone() const {$/;"	f	class:testing::internal::CartesianProductGenerator4::Iterator
Clone	ts/ts_gtest.h	/^    virtual ParamIteratorInterface<ParamType>* Clone() const {$/;"	f	class:testing::internal::CartesianProductGenerator5::Iterator
Clone	ts/ts_gtest.h	/^    virtual ParamIteratorInterface<ParamType>* Clone() const {$/;"	f	class:testing::internal::CartesianProductGenerator6::Iterator
Clone	ts/ts_gtest.h	/^    virtual ParamIteratorInterface<ParamType>* Clone() const {$/;"	f	class:testing::internal::CartesianProductGenerator7::Iterator
Clone	ts/ts_gtest.h	/^    virtual ParamIteratorInterface<ParamType>* Clone() const {$/;"	f	class:testing::internal::CartesianProductGenerator8::Iterator
Clone	ts/ts_gtest.h	/^    virtual ParamIteratorInterface<ParamType>* Clone() const {$/;"	f	class:testing::internal::CartesianProductGenerator9::Iterator
Clone	ts/ts_gtest.h	/^    virtual ParamIteratorInterface<T>* Clone() const {$/;"	f	class:testing::internal::RangeGenerator::Iterator
Clone	ts/ts_gtest.h	/^    virtual ParamIteratorInterface<T>* Clone() const {$/;"	f	class:testing::internal::ValuesInIteratorRangeGenerator::Iterator
CloneFrom	core/wimage.hpp	/^    void CloneFrom(const WImage<T>& src) {$/;"	f	class:cv::WImageBuffer
CloneFrom	core/wimage.hpp	/^    void CloneFrom(const WImageC<T, C>& src) {$/;"	f	class:cv::WImageBufferC
Close	ts/ts_gtest.h	/^inline int Close(int fd) { return close(fd); }$/;"	f	namespace:std::tr1::posix
ClosePoints	stitching/detail/seam_finders.hpp	/^        ClosePoints(int minDist) : minDist_(minDist) {}$/;"	f	class:cv::detail::DpSeamFinder::ClosePoints
ClosePoints	stitching/detail/seam_finders.hpp	/^    class ClosePoints$/;"	c	class:cv::detail::DpSeamFinder
CmpHelperEQ	ts/ts_gtest.h	/^AssertionResult CmpHelperEQ(const char* expected_expression,$/;"	f	namespace:testing::internal
CmpHelperFloatingPointEQ	ts/ts_gtest.h	/^AssertionResult CmpHelperFloatingPointEQ(const char* expected_expression,$/;"	f	namespace:testing::internal
CmpTypes	core/base.hpp	/^enum CmpTypes { CMP_EQ = 0, \/\/!< src1 is equal to src2.$/;"	g	namespace:cv
Code	core/base.hpp	/^enum Code {$/;"	g	namespace:cv::Error
Codec	cudacodec.hpp	/^enum Codec$/;"	g	namespace:cv::cudacodec
Color	viz/types.hpp	/^        class Color : public Scalar$/;"	c	namespace:cv::viz
Color	viz/types.hpp	/^inline cv::viz::Color::Color() : Scalar(0, 0, 0) {}$/;"	f	class:cv::viz::Color
Color	viz/types.hpp	/^inline cv::viz::Color::Color(const Scalar& color) : Scalar(color) {}$/;"	f	class:cv::viz::Color
Color	viz/types.hpp	/^inline cv::viz::Color::Color(double _blue, double _green, double _red) : Scalar(_blue, _green, _red) {}$/;"	f	class:cv::viz::Color
Color	viz/types.hpp	/^inline cv::viz::Color::Color(double _gray) : Scalar(_gray, _gray, _gray) {}$/;"	f	class:cv::viz::Color
Color	viz/viz3d.hpp	/^            typedef cv::viz::Color Color;$/;"	t	class:cv::viz::Viz3d
ColorAverageInpainter	videostab/inpainting.hpp	/^class CV_EXPORTS ColorAverageInpainter : public InpainterBase$/;"	c	namespace:cv::videostab
ColorChannel	core/cuda/detail/color_detail.hpp	/^        template<> struct ColorChannel<float>$/;"	s	namespace:cv::cuda::device::color_detail
ColorChannel	core/cuda/detail/color_detail.hpp	/^        template<typename T> struct ColorChannel$/;"	s	namespace:cv::cuda::device::color_detail
ColorChannel	cudev/functional/detail/color_cvt.hpp	/^    template <> struct ColorChannel<float>$/;"	s	namespace:cv::cudev::color_cvt_detail
ColorChannel	cudev/functional/detail/color_cvt.hpp	/^    template <typename T> struct ColorChannel$/;"	s	namespace:cv::cudev::color_cvt_detail
ColorConversionCodes	imgproc.hpp	/^enum ColorConversionCodes {$/;"	g	namespace:cv
ColorInpainter	videostab/inpainting.hpp	/^class CV_EXPORTS ColorInpainter : public InpainterBase$/;"	c	namespace:cv::videostab
ColorInpainter	videostab/inpainting.hpp	/^inline ColorInpainter::ColorInpainter(int _method, double _radius)$/;"	f	class:cv::videostab::ColorInpainter
ColormapTypes	imgproc.hpp	/^enum ColormapTypes$/;"	g	namespace:cv
Combine	ts/ts_gtest.h	/^    Generator10> Combine($/;"	f	namespace:testing
Combine	ts/ts_gtest.h	/^    Generator4, Generator5, Generator6, Generator7, Generator8> Combine($/;"	f	namespace:testing
Combine	ts/ts_gtest.h	/^    Generator4, Generator5, Generator6, Generator7> Combine($/;"	f	namespace:testing
Combine	ts/ts_gtest.h	/^    Generator4, Generator5, Generator6> Combine($/;"	f	namespace:testing
Combine	ts/ts_gtest.h	/^    Generator4, Generator5> Combine($/;"	f	namespace:testing
Combine	ts/ts_gtest.h	/^    Generator4> Combine($/;"	f	namespace:testing
Combine	ts/ts_gtest.h	/^    Generator9> Combine($/;"	f	namespace:testing
Combine	ts/ts_gtest.h	/^internal::CartesianProductHolder2<Generator1, Generator2> Combine($/;"	f	namespace:testing
Combine	ts/ts_gtest.h	/^internal::CartesianProductHolder3<Generator1, Generator2, Generator3> Combine($/;"	f	namespace:testing
CommandLineParser	core/utility.hpp	/^class CV_EXPORTS CommandLineParser$/;"	c	namespace:cv
CommonAreaInterPtr	cudev/ptr2d/interpolation.hpp	/^template <typename SrcPtr> struct CommonAreaInterPtr$/;"	s	namespace:cv::cudev
CommonAreaInterPtrSz	cudev/ptr2d/interpolation.hpp	/^template <class SrcPtr> struct CommonAreaInterPtrSz : CommonAreaInterPtr<SrcPtr>$/;"	s	namespace:cv::cudev
Compare	ts/ts_gtest.h	/^  static AssertionResult Compare($/;"	f	class:testing::internal::EqHelper
Compare	ts/ts_gtest.h	/^  static AssertionResult Compare(const char* expected_expression,$/;"	f	class:testing::internal::EqHelper
CompareT	flann/heap.h	/^    struct CompareT$/;"	s	class:cvflann::Heap
CompileAssertTypesEqual	ts/ts_gtest.h	/^struct CompileAssertTypesEqual<T, T> {$/;"	s	namespace:testing::internal
Complex	core/cvdef.h	57;"	d
Complex	core/types.hpp	/^Complex<_Tp>::Complex( _Tp _re, _Tp _im )$/;"	f	class:cv::Complex
Complex	core/types.hpp	/^Complex<_Tp>::Complex()$/;"	f	class:cv::Complex
Complex	core/types.hpp	/^template<typename _Tp> class Complex$/;"	c	namespace:cv
Complexd	core/types.hpp	/^typedef Complex<double> Complexd;$/;"	t	namespace:cv
Complexf	core/types.hpp	/^typedef Complex<float> Complexf;$/;"	t	namespace:cv
ComponentState	stitching/detail/seam_finders.hpp	/^    enum ComponentState$/;"	g	class:cv::detail::DpSeamFinder
CompositeIndex	flann/composite_index.h	/^    CompositeIndex(const Matrix<ElementType>& inputData, const IndexParams& params = CompositeIndexParams(),$/;"	f	class:cvflann::CompositeIndex
CompositeIndex	flann/composite_index.h	/^class CompositeIndex : public NNIndex<Distance>$/;"	c	namespace:cvflann
CompositeIndexParams	flann/composite_index.h	/^    CompositeIndexParams(int trees = 4, int branching = 32, int iterations = 11,$/;"	f	struct:cvflann::CompositeIndexParams
CompositeIndexParams	flann/composite_index.h	/^struct CompositeIndexParams : public IndexParams$/;"	s	namespace:cvflann
CompositeIndexParams	flann/miniflann.hpp	/^struct CV_EXPORTS CompositeIndexParams : public IndexParams$/;"	s	namespace:cv::flann
CompressedRectilinearPortraitProjector	stitching/detail/warpers.hpp	/^struct CV_EXPORTS CompressedRectilinearPortraitProjector : ProjectorBase$/;"	s	namespace:cv::detail
CompressedRectilinearPortraitWarper	stitching/detail/warpers.hpp	/^   CompressedRectilinearPortraitWarper(float scale, float A = 1, float B = 1)$/;"	f	class:cv::detail::CompressedRectilinearPortraitWarper
CompressedRectilinearPortraitWarper	stitching/detail/warpers.hpp	/^class CV_EXPORTS CompressedRectilinearPortraitWarper : public RotationWarperBase<CompressedRectilinearPortraitProjector>$/;"	c	namespace:cv::detail
CompressedRectilinearPortraitWarper	stitching/warpers.hpp	/^    CompressedRectilinearPortraitWarper(float A = 1, float B = 1)$/;"	f	class:cv::CompressedRectilinearPortraitWarper
CompressedRectilinearPortraitWarper	stitching/warpers.hpp	/^class CompressedRectilinearPortraitWarper: public WarperCreator$/;"	c	namespace:cv
CompressedRectilinearProjector	stitching/detail/warpers.hpp	/^struct CV_EXPORTS CompressedRectilinearProjector : ProjectorBase$/;"	s	namespace:cv::detail
CompressedRectilinearWarper	stitching/detail/warpers.hpp	/^    CompressedRectilinearWarper(float scale, float A = 1, float B = 1)$/;"	f	class:cv::detail::CompressedRectilinearWarper
CompressedRectilinearWarper	stitching/detail/warpers.hpp	/^class CV_EXPORTS CompressedRectilinearWarper : public RotationWarperBase<CompressedRectilinearProjector>$/;"	c	namespace:cv::detail
CompressedRectilinearWarper	stitching/warpers.hpp	/^    CompressedRectilinearWarper(float A = 1, float B = 1)$/;"	f	class:cv::CompressedRectilinearWarper
CompressedRectilinearWarper	stitching/warpers.hpp	/^class CompressedRectilinearWarper: public WarperCreator$/;"	c	namespace:cv
ComputeCurrentValue	ts/ts_gtest.h	/^    void ComputeCurrentValue() {$/;"	f	class:testing::internal::CartesianProductGenerator10::Iterator
ComputeCurrentValue	ts/ts_gtest.h	/^    void ComputeCurrentValue() {$/;"	f	class:testing::internal::CartesianProductGenerator2::Iterator
ComputeCurrentValue	ts/ts_gtest.h	/^    void ComputeCurrentValue() {$/;"	f	class:testing::internal::CartesianProductGenerator3::Iterator
ComputeCurrentValue	ts/ts_gtest.h	/^    void ComputeCurrentValue() {$/;"	f	class:testing::internal::CartesianProductGenerator4::Iterator
ComputeCurrentValue	ts/ts_gtest.h	/^    void ComputeCurrentValue() {$/;"	f	class:testing::internal::CartesianProductGenerator5::Iterator
ComputeCurrentValue	ts/ts_gtest.h	/^    void ComputeCurrentValue() {$/;"	f	class:testing::internal::CartesianProductGenerator6::Iterator
ComputeCurrentValue	ts/ts_gtest.h	/^    void ComputeCurrentValue() {$/;"	f	class:testing::internal::CartesianProductGenerator7::Iterator
ComputeCurrentValue	ts/ts_gtest.h	/^    void ComputeCurrentValue() {$/;"	f	class:testing::internal::CartesianProductGenerator8::Iterator
ComputeCurrentValue	ts/ts_gtest.h	/^    void ComputeCurrentValue() {$/;"	f	class:testing::internal::CartesianProductGenerator9::Iterator
ComputeMode	core/cuda.hpp	/^    enum ComputeMode$/;"	g	class:cv::cuda::DeviceInfo
ComputeModeDefault	core/cuda.hpp	/^        ComputeModeDefault,         \/**< default compute mode (Multiple threads can use cudaSetDevice with this device) *\/$/;"	e	enum:cv::cuda::DeviceInfo::ComputeMode
ComputeModeExclusive	core/cuda.hpp	/^        ComputeModeExclusive,       \/**< compute-exclusive-thread mode (Only one thread in one process will be able to use cudaSetDevice with this device) *\/$/;"	e	enum:cv::cuda::DeviceInfo::ComputeMode
ComputeModeExclusiveProcess	core/cuda.hpp	/^        ComputeModeExclusiveProcess \/**< compute-exclusive-process mode (Many threads in one process will be able to use cudaSetDevice with this device) *\/$/;"	e	enum:cv::cuda::DeviceInfo::ComputeMode
ComputeModeProhibited	core/cuda.hpp	/^        ComputeModeProhibited,      \/**< compute-prohibited mode (No threads can use cudaSetDevice with this device) *\/$/;"	e	enum:cv::cuda::DeviceInfo::ComputeMode
ConcurrentRectVector	core/private.hpp	/^    typedef tbb::concurrent_vector<Rect> ConcurrentRectVector;$/;"	t	namespace:cv
ConjGradSolver	core/optim.hpp	/^class CV_EXPORTS ConjGradSolver : public MinProblemSolver$/;"	c	namespace:cv
ConnectedComponentsTypes	imgproc.hpp	/^enum ConnectedComponentsTypes {$/;"	g	namespace:cv
ConsistentMosaicInpainter	videostab/inpainting.hpp	/^class CV_EXPORTS ConsistentMosaicInpainter : public InpainterBase$/;"	c	namespace:cv::videostab
ConstCharPtr	ts/ts_gtest.h	/^  ConstCharPtr(const char* str) : value(str) {}$/;"	f	struct:testing::internal::ConstCharPtr
ConstCharPtr	ts/ts_gtest.h	/^struct GTEST_API_ ConstCharPtr {$/;"	s	namespace:testing::internal
Constant	core/ocl.hpp	/^    template<typename _Tp> static KernelArg Constant(const _Tp* arr, size_t n)$/;"	f	class:cv::ocl::KernelArg
ConstantPtr	cudev/ptr2d/constant.hpp	/^template <typename T> struct ConstantPtr$/;"	s	namespace:cv::cudev
ConstantPtrSz	cudev/ptr2d/constant.hpp	/^template <typename T> struct ConstantPtrSz : ConstantPtr<T>$/;"	s	namespace:cv::cudev
ContainerType	ts/ts_gtest.h	/^  typedef typename ::std::vector<T> ContainerType;$/;"	t	class:testing::internal::ValuesInIteratorRangeGenerator
Context	core/ocl.hpp	/^class CV_EXPORTS Context$/;"	c	namespace:cv::ocl
Context	core/ocl.hpp	/^class CV_EXPORTS Context;$/;"	m	namespace:cv::ocl	typeref:class:cv::ocl::CV_EXPORTS
ContourApproximationModes	imgproc.hpp	/^enum ContourApproximationModes {$/;"	g	namespace:cv
ConvertTuple	cudev/util/detail/tuple.hpp	/^    template <class Tuple, template <typename T> class CvtOp> struct ConvertTuple<Tuple, 10, CvtOp>$/;"	s	namespace:cv::cudev::tuple_detail
ConvertTuple	cudev/util/detail/tuple.hpp	/^    template <class Tuple, template <typename T> class CvtOp> struct ConvertTuple<Tuple, 2, CvtOp>$/;"	s	namespace:cv::cudev::tuple_detail
ConvertTuple	cudev/util/detail/tuple.hpp	/^    template <class Tuple, template <typename T> class CvtOp> struct ConvertTuple<Tuple, 3, CvtOp>$/;"	s	namespace:cv::cudev::tuple_detail
ConvertTuple	cudev/util/detail/tuple.hpp	/^    template <class Tuple, template <typename T> class CvtOp> struct ConvertTuple<Tuple, 4, CvtOp>$/;"	s	namespace:cv::cudev::tuple_detail
ConvertTuple	cudev/util/detail/tuple.hpp	/^    template <class Tuple, template <typename T> class CvtOp> struct ConvertTuple<Tuple, 5, CvtOp>$/;"	s	namespace:cv::cudev::tuple_detail
ConvertTuple	cudev/util/detail/tuple.hpp	/^    template <class Tuple, template <typename T> class CvtOp> struct ConvertTuple<Tuple, 6, CvtOp>$/;"	s	namespace:cv::cudev::tuple_detail
ConvertTuple	cudev/util/detail/tuple.hpp	/^    template <class Tuple, template <typename T> class CvtOp> struct ConvertTuple<Tuple, 7, CvtOp>$/;"	s	namespace:cv::cudev::tuple_detail
ConvertTuple	cudev/util/detail/tuple.hpp	/^    template <class Tuple, template <typename T> class CvtOp> struct ConvertTuple<Tuple, 8, CvtOp>$/;"	s	namespace:cv::cudev::tuple_detail
ConvertTuple	cudev/util/detail/tuple.hpp	/^    template <class Tuple, template <typename T> class CvtOp> struct ConvertTuple<Tuple, 9, CvtOp>$/;"	s	namespace:cv::cudev::tuple_detail
ConvertTuple	cudev/util/tuple.hpp	/^template <class Tuple, template <typename T> class CvtOp> struct ConvertTuple$/;"	s	namespace:cv::cudev
Convolution	cudaarithm.hpp	/^class CV_EXPORTS Convolution : public Algorithm$/;"	c	namespace:cv::cuda
CopyArray	ts/ts_gtest.h	/^inline void CopyArray(const T& from, U* to) { *to = from; }$/;"	f	namespace:testing::internal
CopyArray	ts/ts_gtest.h	/^void CopyArray(const T* from, size_t size, U* to) {$/;"	f	namespace:testing::internal
CopyFrom	core/wimage.hpp	/^    void CopyFrom(const WImage<T>& src) { cvCopy(src.Ipl(), image_); }$/;"	f	class:cv::WImage
CopyFrom	core/wimage.hpp	/^    void CopyFrom(const WImageC<T, C>& src) {$/;"	f	class:cv::WImageC
CornernessCriteria	cudaimgproc.hpp	/^class CV_EXPORTS CornernessCriteria : public Algorithm$/;"	c	namespace:cv::cuda
CornersDetector	cudaimgproc.hpp	/^class CV_EXPORTS CornersDetector : public Algorithm$/;"	c	namespace:cv::cuda
CostData	flann/autotuned_index.h	/^    struct CostData$/;"	s	class:cvflann::AutotunedIndex
CostFunction	stitching/detail/seam_finders.hpp	/^    enum CostFunction { COLOR, COLOR_GRAD };$/;"	g	class:cv::detail::DpSeamFinder
CostType	stitching/detail/seam_finders.hpp	/^    enum CostType { COST_COLOR, COST_COLOR_GRAD };$/;"	g	class:cv::detail::GraphCutSeamFinderBase
CountNonZeroExprBody	cudev/expr/reduction.hpp	/^template <class SrcPtr> struct CountNonZeroExprBody$/;"	s	namespace:cv::cudev
CovarFlags	core.hpp	/^enum CovarFlags {$/;"	g	namespace:cv
CpuFeatures	core/utility.hpp	/^enum CpuFeatures {$/;"	g	namespace:cv
CreateFlags	core/cuda.hpp	/^    enum CreateFlags$/;"	g	class:cv::cuda::Event
CreateKey	ts/ts_gtest.h	/^  static pthread_key_t CreateKey() {$/;"	f	class:std::tr1::ThreadLocal
CreateTest	ts/ts_gtest.h	/^  virtual Test* CreateTest() { return new TestClass; }$/;"	f	class:testing::internal::TestFactoryImpl
CreateTest	ts/ts_gtest.h	/^  virtual Test* CreateTest() {$/;"	f	class:testing::internal::ParameterizedTestFactory
CreateTestFactory	ts/ts_gtest.h	/^  virtual TestFactoryBase* CreateTestFactory(ParamType parameter) {$/;"	f	class:testing::internal::TestMetaFactory
CreatorNotFound	flann/object_factory.h	/^class CreatorNotFound$/;"	c	namespace:cvflann
CubicFilter	core/cuda/filters.hpp	/^        explicit __host__ __device__ __forceinline__ CubicFilter(const Ptr2D& src_, float fx = 0.f, float fy = 0.f)$/;"	f	struct:cv::cuda::device::CubicFilter
CubicFilter	core/cuda/filters.hpp	/^    template <typename Ptr2D> struct CubicFilter$/;"	s	namespace:cv::cuda::device
CubicInterPtr	cudev/ptr2d/interpolation.hpp	/^template <typename SrcPtr> struct CubicInterPtr$/;"	s	namespace:cv::cudev
CubicInterPtrSz	cudev/ptr2d/interpolation.hpp	/^template <class SrcPtr> struct CubicInterPtrSz : CubicInterPtr<SrcPtr>$/;"	s	namespace:cv::cudev
Current	ts/ts_gtest.h	/^    virtual const ParamType* Current() const { return &current_value_; }$/;"	f	class:testing::internal::CartesianProductGenerator10::Iterator
Current	ts/ts_gtest.h	/^    virtual const ParamType* Current() const { return &current_value_; }$/;"	f	class:testing::internal::CartesianProductGenerator2::Iterator
Current	ts/ts_gtest.h	/^    virtual const ParamType* Current() const { return &current_value_; }$/;"	f	class:testing::internal::CartesianProductGenerator3::Iterator
Current	ts/ts_gtest.h	/^    virtual const ParamType* Current() const { return &current_value_; }$/;"	f	class:testing::internal::CartesianProductGenerator4::Iterator
Current	ts/ts_gtest.h	/^    virtual const ParamType* Current() const { return &current_value_; }$/;"	f	class:testing::internal::CartesianProductGenerator5::Iterator
Current	ts/ts_gtest.h	/^    virtual const ParamType* Current() const { return &current_value_; }$/;"	f	class:testing::internal::CartesianProductGenerator6::Iterator
Current	ts/ts_gtest.h	/^    virtual const ParamType* Current() const { return &current_value_; }$/;"	f	class:testing::internal::CartesianProductGenerator7::Iterator
Current	ts/ts_gtest.h	/^    virtual const ParamType* Current() const { return &current_value_; }$/;"	f	class:testing::internal::CartesianProductGenerator8::Iterator
Current	ts/ts_gtest.h	/^    virtual const ParamType* Current() const { return &current_value_; }$/;"	f	class:testing::internal::CartesianProductGenerator9::Iterator
Current	ts/ts_gtest.h	/^    virtual const T* Current() const { return &value_; }$/;"	f	class:testing::internal::RangeGenerator::Iterator
Current	ts/ts_gtest.h	/^    virtual const T* Current() const {$/;"	f	class:testing::internal::ValuesInIteratorRangeGenerator::Iterator
Cv32suf	hal/defs.h	/^Cv32suf;$/;"	t	typeref:union:Cv32suf
Cv32suf	hal/defs.h	/^typedef union Cv32suf$/;"	u
Cv64suf	hal/defs.h	/^Cv64suf;$/;"	t	typeref:union:Cv64suf
Cv64suf	hal/defs.h	/^typedef union Cv64suf$/;"	u
CvArr	core/types_c.h	/^typedef void CvArr;$/;"	t
CvAttrList	core/types_c.h	/^CvAttrList;$/;"	t	typeref:struct:CvAttrList
CvAttrList	core/types_c.h	/^typedef struct CvAttrList$/;"	s
CvAvgComp	objdetect/objdetect_c.h	/^typedef struct CvAvgComp$/;"	s
CvAvgComp	objdetect/objdetect_c.h	/^} CvAvgComp;$/;"	t	typeref:struct:CvAvgComp
CvBox2D	core/types_c.h	/^    CvBox2D(CvPoint2D32f c = CvPoint2D32f(), CvSize2D32f s = CvSize2D32f(), float a = 0) : center(c), size(s), angle(a) {}$/;"	f	struct:CvBox2D
CvBox2D	core/types_c.h	/^    CvBox2D(const cv::RotatedRect& rr) : center(rr.center), size(rr.size), angle(rr.angle) {}$/;"	f	struct:CvBox2D
CvBox2D	core/types_c.h	/^CvBox2D;$/;"	t	typeref:struct:CvBox2D
CvBox2D	core/types_c.h	/^typedef struct CvBox2D$/;"	s
CvButtonCallback	highgui/highgui_c.h	/^typedef void (CV_CDECL *CvButtonCallback)(int state, void* userdata);$/;"	t
CvCapture	videoio.hpp	/^typedef struct CvCapture CvCapture;$/;"	t	typeref:struct:CvCapture
CvCapture	videoio/videoio_c.h	/^typedef struct CvCapture CvCapture;$/;"	t	typeref:struct:CvCapture
CvChain	core/types_c.h	/^CvChain;$/;"	t	typeref:struct:CvChain
CvChain	core/types_c.h	/^typedef struct CvChain$/;"	s
CvChainPtReader	imgproc/types_c.h	/^CvChainPtReader;$/;"	t	typeref:struct:CvChainPtReader
CvChainPtReader	imgproc/types_c.h	/^typedef struct CvChainPtReader$/;"	s
CvCloneFunc	core/types_c.h	/^typedef void* (CV_CDECL *CvCloneFunc)( const void* struct_ptr );$/;"	t
CvCmpFunc	core/core_c.h	/^typedef int (CV_CDECL* CvCmpFunc)(const void* a, const void* b, void* userdata );$/;"	t
CvConnectedComp	imgproc/types_c.h	/^CvConnectedComp;$/;"	t	typeref:struct:CvConnectedComp
CvConnectedComp	imgproc/types_c.h	/^typedef struct CvConnectedComp$/;"	s
CvContour	core/types_c.h	/^CvContour;$/;"	t	typeref:struct:CvContour
CvContour	core/types_c.h	/^typedef struct CvContour$/;"	s
CvContourScanner	imgproc/types_c.h	/^typedef struct _CvContourScanner* CvContourScanner;$/;"	t	typeref:struct:_CvContourScanner
CvConvexityDefect	imgproc/types_c.h	/^typedef struct CvConvexityDefect$/;"	s
CvConvexityDefect	imgproc/types_c.h	/^} CvConvexityDefect;$/;"	t	typeref:struct:CvConvexityDefect
CvCudevTextureRef	cudev/ptr2d/texture.hpp	/^    template <typename T> struct CvCudevTextureRef$/;"	s	namespace:__anon393
CvDistanceFunction	imgproc/types_c.h	/^typedef float (CV_CDECL * CvDistanceFunction)( const float* a, const float* b, void* user_param );$/;"	t
CvErrorCallback	core/core_c.h	/^typedef int (CV_CDECL *CvErrorCallback)( int status, const char* func_name,$/;"	t
CvFileNode	core/persistence.hpp	/^typedef struct CvFileNode CvFileNode;$/;"	t	typeref:struct:CvFileNode
CvFileNode	core/types_c.h	/^CvFileNode;$/;"	t	typeref:struct:CvFileNode
CvFileNode	core/types_c.h	/^typedef struct CvFileNode$/;"	s
CvFileNodeHash	core/types_c.h	/^typedef struct CvGenericHash CvFileNodeHash;$/;"	t	typeref:struct:CvGenericHash
CvFileStorage	core/persistence.hpp	/^typedef struct CvFileStorage CvFileStorage;$/;"	t	typeref:struct:CvFileStorage
CvFileStorage	core/types_c.h	/^typedef struct CvFileStorage CvFileStorage;$/;"	t	typeref:struct:CvFileStorage
CvFont	imgproc/imgproc_c.h	/^CvFont;$/;"	t	typeref:struct:CvFont
CvFont	imgproc/imgproc_c.h	/^typedef struct CvFont$/;"	s
CvGraph	core/types_c.h	/^CvGraph;$/;"	t	typeref:struct:CvGraph
CvGraph	core/types_c.h	/^typedef struct CvGraph$/;"	s
CvGraphEdge	core/types_c.h	/^CvGraphEdge;$/;"	t	typeref:struct:CvGraphEdge
CvGraphEdge	core/types_c.h	/^typedef struct CvGraphEdge$/;"	s
CvGraphScanner	core/core_c.h	/^CvGraphScanner;$/;"	t	typeref:struct:CvGraphScanner
CvGraphScanner	core/core_c.h	/^typedef struct CvGraphScanner$/;"	s
CvGraphVtx	core/types_c.h	/^CvGraphVtx;$/;"	t	typeref:struct:CvGraphVtx
CvGraphVtx	core/types_c.h	/^typedef struct CvGraphVtx$/;"	s
CvGraphVtx2D	core/types_c.h	/^CvGraphVtx2D;$/;"	t	typeref:struct:CvGraphVtx2D
CvGraphVtx2D	core/types_c.h	/^typedef struct CvGraphVtx2D$/;"	s
CvHaarClassifier	objdetect/objdetect_c.h	/^typedef struct CvHaarClassifier$/;"	s
CvHaarClassifier	objdetect/objdetect_c.h	/^} CvHaarClassifier;$/;"	t	typeref:struct:CvHaarClassifier
CvHaarClassifierCascade	objdetect.hpp	/^typedef struct CvHaarClassifierCascade CvHaarClassifierCascade;$/;"	t	typeref:struct:CvHaarClassifierCascade
CvHaarClassifierCascade	objdetect/objdetect_c.h	/^typedef struct CvHaarClassifierCascade$/;"	s
CvHaarClassifierCascade	objdetect/objdetect_c.h	/^} CvHaarClassifierCascade;$/;"	t	typeref:struct:CvHaarClassifierCascade
CvHaarFeature	objdetect/objdetect_c.h	/^typedef struct CvHaarFeature$/;"	s
CvHaarFeature	objdetect/objdetect_c.h	/^} CvHaarFeature;$/;"	t	typeref:struct:CvHaarFeature
CvHaarStageClassifier	objdetect/objdetect_c.h	/^typedef struct CvHaarStageClassifier$/;"	s
CvHaarStageClassifier	objdetect/objdetect_c.h	/^} CvHaarStageClassifier;$/;"	t	typeref:struct:CvHaarStageClassifier
CvHidHaarClassifierCascade	objdetect/objdetect_c.h	/^typedef struct CvHidHaarClassifierCascade CvHidHaarClassifierCascade;$/;"	t	typeref:struct:CvHidHaarClassifierCascade
CvHistType	core/types_c.h	/^typedef int CvHistType;$/;"	t
CvHistogram	core/types_c.h	/^CvHistogram;$/;"	t	typeref:struct:CvHistogram
CvHistogram	core/types_c.h	/^typedef struct CvHistogram$/;"	s
CvHuMoments	imgproc/types_c.h	/^CvHuMoments;$/;"	t	typeref:struct:CvHuMoments
CvHuMoments	imgproc/types_c.h	/^typedef struct CvHuMoments$/;"	s
CvIsInstanceFunc	core/types_c.h	/^typedef int (CV_CDECL *CvIsInstanceFunc)( const void* struct_ptr );$/;"	t
CvKalman	video/tracking_c.h	/^typedef struct CvKalman$/;"	s
CvKalman	video/tracking_c.h	/^} CvKalman;$/;"	t	typeref:struct:CvKalman
CvLevMarq	calib3d/calib3d_c.h	/^class CV_EXPORTS CvLevMarq$/;"	c
CvLineIterator	core/types_c.h	/^CvLineIterator;$/;"	t	typeref:struct:CvLineIterator
CvLineIterator	core/types_c.h	/^typedef struct CvLineIterator$/;"	s
CvMat	core/types_c.h	/^    CvMat() {}$/;"	f	struct:CvMat
CvMat	core/types_c.h	/^    CvMat(const CvMat& m) { memcpy(this, &m, sizeof(CvMat));}$/;"	f	struct:CvMat
CvMat	core/types_c.h	/^CvMat;$/;"	t	typeref:struct:CvMat
CvMat	core/types_c.h	/^inline CvMat::CvMat(const cv::Mat& m)$/;"	f	class:CvMat
CvMat	core/types_c.h	/^typedef struct CvMat$/;"	s
CvMatND	core/types_c.h	/^    CvMatND() {}$/;"	f	struct:CvMatND
CvMatND	core/types_c.h	/^CvMatND$/;"	s
CvMatND	core/types_c.h	/^CvMatND;$/;"	t	typeref:struct:CvMatND
CvMemBlock	core/types_c.h	/^CvMemBlock;$/;"	t	typeref:struct:CvMemBlock
CvMemBlock	core/types_c.h	/^typedef struct CvMemBlock$/;"	s
CvMemStorage	core/types_c.h	/^CvMemStorage;$/;"	t	typeref:struct:CvMemStorage
CvMemStorage	core/types_c.h	/^typedef struct CvMemStorage$/;"	s
CvMemStoragePos	core/types_c.h	/^CvMemStoragePos;$/;"	t	typeref:struct:CvMemStoragePos
CvMemStoragePos	core/types_c.h	/^typedef struct CvMemStoragePos$/;"	s
CvModuleInfo	core/types_c.h	/^CvModuleInfo;$/;"	t	typeref:struct:CvModuleInfo
CvModuleInfo	core/types_c.h	/^typedef struct CvModuleInfo$/;"	s
CvMoments	imgproc/types_c.h	/^    CvMoments(){}$/;"	f	struct:CvMoments
CvMoments	imgproc/types_c.h	/^    CvMoments(const cv::Moments& m)$/;"	f	struct:CvMoments
CvMoments	imgproc/types_c.h	/^CvMoments;$/;"	t	typeref:struct:CvMoments
CvMoments	imgproc/types_c.h	/^typedef struct CvMoments$/;"	s
CvMouseCallback	highgui/highgui_c.h	/^typedef void (CV_CDECL *CvMouseCallback )(int event, int x, int y, int flags, void* param);$/;"	t
CvNArrayIterator	core/core_c.h	/^CvNArrayIterator;$/;"	t	typeref:struct:CvNArrayIterator
CvNArrayIterator	core/core_c.h	/^typedef struct CvNArrayIterator$/;"	s
CvOpenGlDrawCallback	highgui/highgui_c.h	/^typedef void (CV_CDECL *CvOpenGlDrawCallback)(void* userdata);$/;"	t
CvPOSITObject	calib3d/calib3d_c.h	/^typedef struct CvPOSITObject CvPOSITObject;$/;"	t	typeref:struct:CvPOSITObject
CvPluginFuncInfo	core/types_c.h	/^CvPluginFuncInfo;$/;"	t	typeref:struct:CvPluginFuncInfo
CvPluginFuncInfo	core/types_c.h	/^typedef struct CvPluginFuncInfo$/;"	s
CvPoint	core/types_c.h	/^    CvPoint(const cv::Point_<_Tp>& pt): x((int)pt.x), y((int)pt.y) {}$/;"	f	struct:CvPoint
CvPoint	core/types_c.h	/^    CvPoint(int _x = 0, int _y = 0): x(_x), y(_y) {}$/;"	f	struct:CvPoint
CvPoint	core/types_c.h	/^CvPoint;$/;"	t	typeref:struct:CvPoint
CvPoint	core/types_c.h	/^typedef struct CvPoint$/;"	s
CvPoint2D32f	core/types_c.h	/^    CvPoint2D32f(const cv::Point_<_Tp>& pt): x((float)pt.x), y((float)pt.y) {}$/;"	f	struct:CvPoint2D32f
CvPoint2D32f	core/types_c.h	/^    CvPoint2D32f(float _x = 0, float _y = 0): x(_x), y(_y) {}$/;"	f	struct:CvPoint2D32f
CvPoint2D32f	core/types_c.h	/^CvPoint2D32f;$/;"	t	typeref:struct:CvPoint2D32f
CvPoint2D32f	core/types_c.h	/^typedef struct CvPoint2D32f$/;"	s
CvPoint2D64f	core/types_c.h	/^CvPoint2D64f;$/;"	t	typeref:struct:CvPoint2D64f
CvPoint2D64f	core/types_c.h	/^typedef struct CvPoint2D64f$/;"	s
CvPoint2DSeq	core/types_c.h	/^typedef CvContour CvPoint2DSeq;$/;"	t
CvPoint3D32f	core/types_c.h	/^    CvPoint3D32f(const cv::Point3_<_Tp>& pt): x((float)pt.x), y((float)pt.y), z((float)pt.z) {}$/;"	f	struct:CvPoint3D32f
CvPoint3D32f	core/types_c.h	/^    CvPoint3D32f(float _x = 0, float _y = 0, float _z = 0): x(_x), y(_y), z(_z) {}$/;"	f	struct:CvPoint3D32f
CvPoint3D32f	core/types_c.h	/^CvPoint3D32f;$/;"	t	typeref:struct:CvPoint3D32f
CvPoint3D32f	core/types_c.h	/^typedef struct CvPoint3D32f$/;"	s
CvPoint3D64f	core/types_c.h	/^CvPoint3D64f;$/;"	t	typeref:struct:CvPoint3D64f
CvPoint3D64f	core/types_c.h	/^typedef struct CvPoint3D64f$/;"	s
CvRNG	core/types_c.h	/^typedef uint64 CvRNG;$/;"	t
CvReadFunc	core/types_c.h	/^typedef void* (CV_CDECL *CvReadFunc)( CvFileStorage* storage, CvFileNode* node );$/;"	t
CvRect	core/types_c.h	/^    CvRect(const cv::Rect_<_Tp>& r): x(cv::saturate_cast<int>(r.x)), y(cv::saturate_cast<int>(r.y)), width(cv::saturate_cast<int>(r.width)), height(cv::saturate_cast<int>(r.height)) {}$/;"	f	struct:CvRect
CvRect	core/types_c.h	/^    CvRect(int _x = 0, int _y = 0, int w = 0, int h = 0): x(_x), y(_y), width(w), height(h) {}$/;"	f	struct:CvRect
CvRect	core/types_c.h	/^CvRect;$/;"	t	typeref:struct:CvRect
CvRect	core/types_c.h	/^typedef struct CvRect$/;"	s
CvReleaseFunc	core/types_c.h	/^typedef void (CV_CDECL *CvReleaseFunc)( void** struct_dblptr );$/;"	t
CvScalar	core/types_c.h	/^    CvScalar() {}$/;"	f	struct:CvScalar
CvScalar	core/types_c.h	/^    CvScalar(const cv::Scalar_<_Tp>& s) { val[0] = s.val[0]; val[1] = s.val[1]; val[2] = s.val[2]; val[3] = s.val[3]; }$/;"	f	struct:CvScalar
CvScalar	core/types_c.h	/^    CvScalar(const cv::Vec<_Tp, cn>& v)$/;"	f	struct:CvScalar
CvScalar	core/types_c.h	/^    CvScalar(double d0, double d1 = 0, double d2 = 0, double d3 = 0) { val[0] = d0; val[1] = d1; val[2] = d2; val[3] = d3; }$/;"	f	struct:CvScalar
CvScalar	core/types_c.h	/^CvScalar;$/;"	t	typeref:struct:CvScalar
CvScalar	core/types_c.h	/^typedef struct CvScalar$/;"	s
CvSeq	core/types_c.h	/^CvSeq;$/;"	t	typeref:struct:CvSeq
CvSeq	core/types_c.h	/^typedef struct CvSeq$/;"	s
CvSeqBlock	core/types_c.h	/^CvSeqBlock;$/;"	t	typeref:struct:CvSeqBlock
CvSeqBlock	core/types_c.h	/^typedef struct CvSeqBlock$/;"	s
CvSeqReader	core/types_c.h	/^CvSeqReader;$/;"	t	typeref:struct:CvSeqReader
CvSeqReader	core/types_c.h	/^typedef struct CvSeqReader$/;"	s
CvSeqWriter	core/types_c.h	/^CvSeqWriter;$/;"	t	typeref:struct:CvSeqWriter
CvSeqWriter	core/types_c.h	/^typedef struct CvSeqWriter$/;"	s
CvSet	core/types_c.h	/^CvSet;$/;"	t	typeref:struct:CvSet
CvSet	core/types_c.h	/^typedef struct CvSet$/;"	s
CvSetElem	core/types_c.h	/^CvSetElem;$/;"	t	typeref:struct:CvSetElem
CvSetElem	core/types_c.h	/^typedef struct CvSetElem$/;"	s
CvSize	core/types_c.h	/^    CvSize(const cv::Size_<_Tp>& sz): width(cv::saturate_cast<int>(sz.width)), height(cv::saturate_cast<int>(sz.height)) {}$/;"	f	struct:CvSize
CvSize	core/types_c.h	/^    CvSize(int w = 0, int h = 0): width(w), height(h) {}$/;"	f	struct:CvSize
CvSize	core/types_c.h	/^CvSize;$/;"	t	typeref:struct:CvSize
CvSize	core/types_c.h	/^typedef struct CvSize$/;"	s
CvSize2D32f	core/types_c.h	/^    CvSize2D32f(const cv::Size_<_Tp>& sz): width(cv::saturate_cast<float>(sz.width)), height(cv::saturate_cast<float>(sz.height)) {}$/;"	f	struct:CvSize2D32f
CvSize2D32f	core/types_c.h	/^    CvSize2D32f(float w = 0, float h = 0): width(w), height(h) {}$/;"	f	struct:CvSize2D32f
CvSize2D32f	core/types_c.h	/^CvSize2D32f;$/;"	t	typeref:struct:CvSize2D32f
CvSize2D32f	core/types_c.h	/^typedef struct CvSize2D32f$/;"	s
CvSlice	core/types_c.h	/^    CvSlice(const cv::Range& r) { *this = (r.start != INT_MIN && r.end != INT_MAX) ? CvSlice(r.start, r.end) : CvSlice(0, CV_WHOLE_SEQ_END_INDEX); }$/;"	f	struct:CvSlice
CvSlice	core/types_c.h	/^    CvSlice(int start = 0, int end = 0) : start_index(start), end_index(end) {}$/;"	f	struct:CvSlice
CvSlice	core/types_c.h	/^CvSlice;$/;"	t	typeref:struct:CvSlice
CvSlice	core/types_c.h	/^typedef struct CvSlice$/;"	s
CvSparseMat	core/types_c.h	/^CvSparseMat$/;"	s
CvSparseMat	core/types_c.h	/^CvSparseMat;$/;"	t	typeref:struct:CvSparseMat
CvSparseMatIterator	core/types_c.h	/^CvSparseMatIterator;$/;"	t	typeref:struct:CvSparseMatIterator
CvSparseMatIterator	core/types_c.h	/^typedef struct CvSparseMatIterator$/;"	s
CvSparseNode	core/types_c.h	/^CvSparseNode;$/;"	t	typeref:struct:CvSparseNode
CvSparseNode	core/types_c.h	/^typedef struct CvSparseNode$/;"	s
CvStatus	core/private.hpp	/^CvStatus;$/;"	t	typeref:enum:CvStatus
CvStatus	core/private.hpp	/^typedef enum CvStatus$/;"	g
CvStereoBMState	calib3d/calib3d_c.h	/^typedef struct CvStereoBMState$/;"	s
CvStereoBMState	calib3d/calib3d_c.h	/^} CvStereoBMState;$/;"	t	typeref:struct:CvStereoBMState
CvString	core/types_c.h	/^CvString;$/;"	t	typeref:struct:CvString
CvString	core/types_c.h	/^typedef struct CvString$/;"	s
CvStringHashNode	core/types_c.h	/^CvStringHashNode;$/;"	t	typeref:struct:CvStringHashNode
CvStringHashNode	core/types_c.h	/^typedef struct CvStringHashNode$/;"	s
CvTermCriteria	core/types_c.h	/^    CvTermCriteria(const cv::TermCriteria& t) : type(t.type), max_iter(t.maxCount), epsilon(t.epsilon)  {}$/;"	f	struct:CvTermCriteria
CvTermCriteria	core/types_c.h	/^    CvTermCriteria(int _type = 0, int _iter = 0, double _eps = 0) : type(_type), max_iter(_iter), epsilon(_eps)  {}$/;"	f	struct:CvTermCriteria
CvTermCriteria	core/types_c.h	/^CvTermCriteria;$/;"	t	typeref:struct:CvTermCriteria
CvTermCriteria	core/types_c.h	/^typedef struct CvTermCriteria$/;"	s
CvTrackbarCallback	highgui/highgui_c.h	/^typedef void (CV_CDECL *CvTrackbarCallback)(int pos);$/;"	t
CvTrackbarCallback2	highgui/highgui_c.h	/^typedef void (CV_CDECL *CvTrackbarCallback2)(int pos, void* userdata);$/;"	t
CvTreeNodeIterator	core/core_c.h	/^CvTreeNodeIterator;$/;"	t	typeref:struct:CvTreeNodeIterator
CvTreeNodeIterator	core/core_c.h	/^typedef struct CvTreeNodeIterator$/;"	s
CvType	core/core_c.h	/^struct CV_EXPORTS CvType$/;"	s
CvType	flann.hpp	/^template <> struct CvType<char> { static int type() { return CV_8S; } };$/;"	s	namespace:cv::flann
CvType	flann.hpp	/^template <> struct CvType<double> { static int type() { return CV_64F; } };$/;"	s	namespace:cv::flann
CvType	flann.hpp	/^template <> struct CvType<float> { static int type() { return CV_32F; } };$/;"	s	namespace:cv::flann
CvType	flann.hpp	/^template <> struct CvType<int> { static int type() { return CV_32S; } };$/;"	s	namespace:cv::flann
CvType	flann.hpp	/^template <> struct CvType<short> { static int type() { return CV_16S; } };$/;"	s	namespace:cv::flann
CvType	flann.hpp	/^template <> struct CvType<unsigned char> { static int type() { return CV_8U; } };$/;"	s	namespace:cv::flann
CvType	flann.hpp	/^template <> struct CvType<unsigned short> { static int type() { return CV_16U; } };$/;"	s	namespace:cv::flann
CvType	flann.hpp	/^template <typename T> struct CvType {};$/;"	s	namespace:cv::flann
CvTypeInfo	core/types_c.h	/^CvTypeInfo;$/;"	t	typeref:struct:CvTypeInfo
CvTypeInfo	core/types_c.h	/^typedef struct CvTypeInfo$/;"	s
CvVideoWriter	videoio.hpp	/^typedef struct CvVideoWriter CvVideoWriter;$/;"	t	typeref:struct:CvVideoWriter
CvVideoWriter	videoio/videoio_c.h	/^typedef struct CvVideoWriter CvVideoWriter;$/;"	t	typeref:struct:CvVideoWriter
CvWriteFunc	core/types_c.h	/^typedef void (CV_CDECL *CvWriteFunc)( CvFileStorage* storage, const char* name,$/;"	t
Cv_iplAllocateImageData	core/core_c.h	/^typedef void (CV_STDCALL* Cv_iplAllocateImageData)(IplImage*,int,int);$/;"	t
Cv_iplCloneImage	core/core_c.h	/^typedef IplImage* (CV_STDCALL* Cv_iplCloneImage)(const IplImage*);$/;"	t
Cv_iplCreateImageHeader	core/core_c.h	/^typedef IplImage* (CV_STDCALL* Cv_iplCreateImageHeader)$/;"	t
Cv_iplCreateROI	core/core_c.h	/^typedef IplROI* (CV_STDCALL* Cv_iplCreateROI)(int,int,int,int,int);$/;"	t
Cv_iplDeallocate	core/core_c.h	/^typedef void (CV_STDCALL* Cv_iplDeallocate)(IplImage*,int);$/;"	t
CvtColorInfo	ts/cuda_perf.hpp	/^        CvtColorInfo() {}$/;"	f	struct:perf::CvtColorInfo
CvtColorInfo	ts/cuda_perf.hpp	/^        explicit CvtColorInfo(int scn_, int dcn_, int code_) : scn(scn_), dcn(dcn_), code(code_) {}$/;"	f	struct:perf::CvtColorInfo
CvtColorInfo	ts/cuda_perf.hpp	/^    struct CvtColorInfo$/;"	s	namespace:perf
CylindricalPortraitProjector	stitching/detail/warpers.hpp	/^struct CylindricalPortraitProjector : ProjectorBase$/;"	s	namespace:cv::detail
CylindricalPortraitWarper	stitching/detail/warpers.hpp	/^    CylindricalPortraitWarper(float scale) { projector_.scale = scale; }$/;"	f	class:cv::detail::CylindricalPortraitWarper
CylindricalPortraitWarper	stitching/detail/warpers.hpp	/^class CV_EXPORTS CylindricalPortraitWarper : public RotationWarperBase<CylindricalPortraitProjector>$/;"	c	namespace:cv::detail
CylindricalProjector	stitching/detail/warpers.hpp	/^struct CV_EXPORTS CylindricalProjector : ProjectorBase$/;"	s	namespace:cv::detail
CylindricalWarper	stitching/detail/warpers.hpp	/^    CylindricalWarper(float scale) { projector_.scale = scale; }$/;"	f	class:cv::detail::CylindricalWarper
CylindricalWarper	stitching/detail/warpers.hpp	/^class CV_EXPORTS CylindricalWarper : public RotationWarperBase<CylindricalProjector>$/;"	c	namespace:cv::detail
CylindricalWarper	stitching/warpers.hpp	/^class CylindricalWarper: public WarperCreator$/;"	c	namespace:cv
CylindricalWarperGpu	stitching/detail/warpers.hpp	/^    CylindricalWarperGpu(float scale) : CylindricalWarper(scale) {}$/;"	f	class:cv::detail::CylindricalWarperGpu
CylindricalWarperGpu	stitching/detail/warpers.hpp	/^class CV_EXPORTS CylindricalWarperGpu : public CylindricalWarper$/;"	c	namespace:cv::detail
CylindricalWarperGpu	stitching/warpers.hpp	/^class CylindricalWarperGpu: public WarperCreator$/;"	c	namespace:cv
DATA_AS_COL	core.hpp	/^                 DATA_AS_COL = 1, \/\/!< indicates that the input samples are stored as matrix columns$/;"	e	enum:cv::PCA::Flags
DATA_AS_ROW	core.hpp	/^    enum Flags { DATA_AS_ROW = 0, \/\/!< indicates that the input samples are stored as matrix rows$/;"	e	enum:cv::PCA::Flags
DCT_INVERSE	core/base.hpp	/^    DCT_INVERSE        = DFT_INVERSE,$/;"	e	enum:cv::DftFlags
DCT_ROWS	core/base.hpp	/^    DCT_ROWS           = DFT_ROWS$/;"	e	enum:cv::DftFlags
DECOMP_CHOLESKY	core/base.hpp	/^    DECOMP_CHOLESKY = 3,$/;"	e	enum:cv::DecompTypes
DECOMP_EIG	core/base.hpp	/^    DECOMP_EIG      = 2,$/;"	e	enum:cv::DecompTypes
DECOMP_LU	core/base.hpp	/^    DECOMP_LU       = 0,$/;"	e	enum:cv::DecompTypes
DECOMP_NORMAL	core/base.hpp	/^    DECOMP_NORMAL   = 16$/;"	e	enum:cv::DecompTypes
DECOMP_QR	core/base.hpp	/^    DECOMP_QR       = 4,$/;"	e	enum:cv::DecompTypes
DECOMP_SVD	core/base.hpp	/^    DECOMP_SVD      = 1,$/;"	e	enum:cv::DecompTypes
DEFAULT	core/cuda.hpp	/^        DEFAULT        = 0x00,  \/**< Default event flag *\/$/;"	e	enum:cv::cuda::Event::CreateFlags
DEFAULT	features2d.hpp	/^    enum{ DEFAULT = 0, \/\/!< Output image matrix will be created (Mat::create),$/;"	e	enum:cv::DrawMatchesFlags::__anon290
DEFAULT_MAX_ITERS	ml.hpp	/^    enum {DEFAULT_NCLUSTERS=5, DEFAULT_MAX_ITERS=100};$/;"	e	enum:cv::ml::EM::__anon293
DEFAULT_NCLUSTERS	ml.hpp	/^    enum {DEFAULT_NCLUSTERS=5, DEFAULT_MAX_ITERS=100};$/;"	e	enum:cv::ml::EM::__anon293
DEFAULT_NLEVELS	objdetect.hpp	/^    enum { DEFAULT_NLEVELS = 64$/;"	e	enum:cv::HOGDescriptor::__anon42
DEF_PARAM_TEST	ts/cuda_perf.hpp	70;"	d
DEF_PARAM_TEST_1	ts/cuda_perf.hpp	71;"	d
DEGREE	ml.hpp	/^        DEGREE=5$/;"	e	enum:cv::ml::SVM::ParamTypes
DEPTH_COMPONENT	core/opengl.hpp	/^        DEPTH_COMPONENT = 0x1902, \/\/!< Depth$/;"	e	enum:cv::ogl::Texture2D::Format
DEPTH_MASK	core/mat.hpp	/^    enum { MAGIC_MASK = 0xFFFF0000, TYPE_MASK = 0x00000FFF, DEPTH_MASK = 7 };$/;"	e	enum:cv::Mat::__anon139
DEPTH_MASK	core/mat.hpp	/^    enum { MAGIC_MASK = 0xFFFF0000, TYPE_MASK = 0x00000FFF, DEPTH_MASK = 7 };$/;"	e	enum:cv::UMat::__anon141
DEPTH_MASK_16S	core/mat.hpp	/^        DEPTH_MASK_16S = 1 << CV_16S,$/;"	e	enum:cv::_OutputArray::__anon136
DEPTH_MASK_16U	core/mat.hpp	/^        DEPTH_MASK_16U = 1 << CV_16U,$/;"	e	enum:cv::_OutputArray::__anon136
DEPTH_MASK_32F	core/mat.hpp	/^        DEPTH_MASK_32F = 1 << CV_32F,$/;"	e	enum:cv::_OutputArray::__anon136
DEPTH_MASK_32S	core/mat.hpp	/^        DEPTH_MASK_32S = 1 << CV_32S,$/;"	e	enum:cv::_OutputArray::__anon136
DEPTH_MASK_64F	core/mat.hpp	/^        DEPTH_MASK_64F = 1 << CV_64F,$/;"	e	enum:cv::_OutputArray::__anon136
DEPTH_MASK_8S	core/mat.hpp	/^        DEPTH_MASK_8S = 1 << CV_8S,$/;"	e	enum:cv::_OutputArray::__anon136
DEPTH_MASK_8U	core/mat.hpp	/^        DEPTH_MASK_8U = 1 << CV_8U,$/;"	e	enum:cv::_OutputArray::__anon136
DEPTH_MASK_ALL	core/mat.hpp	/^        DEPTH_MASK_ALL = (DEPTH_MASK_64F<<1)-1,$/;"	e	enum:cv::_OutputArray::__anon136
DEPTH_MASK_ALL_BUT_8S	core/mat.hpp	/^        DEPTH_MASK_ALL_BUT_8S = DEPTH_MASK_ALL & ~DEPTH_MASK_8S,$/;"	e	enum:cv::_OutputArray::__anon136
DEPTH_MASK_FLT	core/mat.hpp	/^        DEPTH_MASK_FLT = DEPTH_MASK_32F + DEPTH_MASK_64F$/;"	e	enum:cv::_OutputArray::__anon136
DEPTH_PAIRS	ts/cuda_test.hpp	222;"	d
DESCRIPTOR_KAZE	features2d.hpp	/^        DESCRIPTOR_KAZE = 3,$/;"	e	enum:cv::AKAZE::__anon286
DESCRIPTOR_KAZE_UPRIGHT	features2d.hpp	/^        DESCRIPTOR_KAZE_UPRIGHT = 2, \/\/\/< Upright descriptors, not invariant to rotation$/;"	e	enum:cv::AKAZE::__anon286
DESCRIPTOR_MLDB	features2d.hpp	/^        DESCRIPTOR_MLDB = 5$/;"	e	enum:cv::AKAZE::__anon286
DESCRIPTOR_MLDB_UPRIGHT	features2d.hpp	/^        DESCRIPTOR_MLDB_UPRIGHT = 4, \/\/\/< Upright descriptors, not invariant to rotation$/;"	e	enum:cv::AKAZE::__anon286
DESCR_FORMAT_COL_BY_COL	cudaobjdetect.hpp	/^        DESCR_FORMAT_COL_BY_COL$/;"	e	enum:cv::cuda::HOG::__anon53
DESCR_FORMAT_ROW_BY_ROW	cudaobjdetect.hpp	/^        DESCR_FORMAT_ROW_BY_ROW,$/;"	e	enum:cv::cuda::HOG::__anon53
DETECTED	objdetect/detection_based_tracker.hpp	/^            DETECTED,$/;"	e	enum:cv::DetectionBasedTracker::ObjectStatus
DETECTED_NOT_SHOWN_YET	objdetect/detection_based_tracker.hpp	/^            DETECTED_NOT_SHOWN_YET,$/;"	e	enum:cv::DetectionBasedTracker::ObjectStatus
DETECTED_TEMPORARY_LOST	objdetect/detection_based_tracker.hpp	/^            DETECTED_TEMPORARY_LOST,$/;"	e	enum:cv::DetectionBasedTracker::ObjectStatus
DEVICE_COPY_OBSOLETE	core/mat.hpp	/^        DEVICE_COPY_OBSOLETE=4, TEMP_UMAT=8, TEMP_COPIED_UMAT=24,$/;"	e	enum:cv::UMatData::__anon137
DEVICE_MEM_MAPPED	core/mat.hpp	/^        USER_ALLOCATED=32, DEVICE_MEM_MAPPED=64};$/;"	e	enum:cv::UMatData::__anon137
DFT_COMPLEX_OUTPUT	core/base.hpp	/^    DFT_COMPLEX_OUTPUT = 16,$/;"	e	enum:cv::DftFlags
DFT_INVERSE	core/base.hpp	/^    DFT_INVERSE        = 1,$/;"	e	enum:cv::DftFlags
DFT_REAL_OUTPUT	core/base.hpp	/^    DFT_REAL_OUTPUT    = 32,$/;"	e	enum:cv::DftFlags
DFT_ROWS	core/base.hpp	/^    DFT_ROWS           = 4,$/;"	e	enum:cv::DftFlags
DFT_SCALE	core/base.hpp	/^    DFT_SCALE          = 2,$/;"	e	enum:cv::DftFlags
DIFFERENT_SIZES	ts/cuda_test.hpp	214;"	d
DIFF_CHARBONNIER	features2d.hpp	/^        DIFF_CHARBONNIER = 3$/;"	e	enum:cv::KAZE::__anon285
DIFF_PM_G1	features2d.hpp	/^        DIFF_PM_G1 = 0,$/;"	e	enum:cv::KAZE::__anon285
DIFF_PM_G2	features2d.hpp	/^        DIFF_PM_G2 = 1,$/;"	e	enum:cv::KAZE::__anon285
DIFF_WEICKERT	features2d.hpp	/^        DIFF_WEICKERT = 2,$/;"	e	enum:cv::KAZE::__anon285
DIMode	cudacodec.hpp	/^    int DIMode;          \/\/!< NVVE_SET_DEINTERLACE,$/;"	m	struct:cv::cudacodec::EncoderParams
DIRECT_INVERSE	ts/cuda_test.hpp	293;"	d
DISABLE_OPENCV_24_COMPATIBILITY	core/cvdef.h	62;"	d
DISABLE_TIMING	core/cuda.hpp	/^        DISABLE_TIMING = 0x02,  \/**< Event will not record timing data *\/$/;"	e	enum:cv::cuda::Event::CreateFlags
DISCRETE	ml.hpp	/^        DISCRETE=0, \/\/!< Discrete AdaBoost.$/;"	e	enum:cv::ml::Boost::Types
DISP_SCALE	calib3d.hpp	/^           DISP_SCALE = (1 << DISP_SHIFT)$/;"	e	enum:cv::StereoMatcher::__anon49
DISP_SHIFT	calib3d.hpp	/^    enum { DISP_SHIFT = 4,$/;"	e	enum:cv::StereoMatcher::__anon49
DIST_C	imgproc.hpp	/^    DIST_C       = 3,   \/\/!< distance = max(|x1-x2|,|y1-y2|)$/;"	e	enum:cv::DistanceTypes
DIST_FAIR	imgproc.hpp	/^    DIST_FAIR    = 5,   \/\/!< distance = c^2(|x|\/c-log(1+|x|\/c)), c = 1.3998$/;"	e	enum:cv::DistanceTypes
DIST_HUBER	imgproc.hpp	/^    DIST_HUBER   = 7    \/\/!< distance = |x|<c ? x^2\/2 : c(|x|-c\/2), c=1.345$/;"	e	enum:cv::DistanceTypes
DIST_L1	imgproc.hpp	/^    DIST_L1      = 1,   \/\/!< distance = |x1-x2| + |y1-y2|$/;"	e	enum:cv::DistanceTypes
DIST_L12	imgproc.hpp	/^    DIST_L12     = 4,   \/\/!< L1-L2 metric: distance = 2(sqrt(1+x*x\/2) - 1))$/;"	e	enum:cv::DistanceTypes
DIST_L2	imgproc.hpp	/^    DIST_L2      = 2,   \/\/!< the simple euclidean distance$/;"	e	enum:cv::DistanceTypes
DIST_LABEL_CCOMP	imgproc.hpp	/^    DIST_LABEL_CCOMP = 0,$/;"	e	enum:cv::DistanceTransformLabelTypes
DIST_LABEL_PIXEL	imgproc.hpp	/^    DIST_LABEL_PIXEL = 1$/;"	e	enum:cv::DistanceTransformLabelTypes
DIST_MASK_3	imgproc.hpp	/^    DIST_MASK_3       = 3, \/\/!< mask=3$/;"	e	enum:cv::DistanceTransformMasks
DIST_MASK_5	imgproc.hpp	/^    DIST_MASK_5       = 5, \/\/!< mask=5$/;"	e	enum:cv::DistanceTransformMasks
DIST_MASK_PRECISE	imgproc.hpp	/^    DIST_MASK_PRECISE = 0  \/\/!<$/;"	e	enum:cv::DistanceTransformMasks
DIST_USER	imgproc.hpp	/^    DIST_USER    = -1,  \/\/!< User defined distance$/;"	e	enum:cv::DistanceTypes
DIST_WELSCH	imgproc.hpp	/^    DIST_WELSCH  = 6,   \/\/!< distance = c^2\/2(1-exp(-(x\/c)^2)), c = 2.9846$/;"	e	enum:cv::DistanceTypes
DMatch	core/base.hpp	/^class CV_EXPORTS DMatch;$/;"	m	namespace:cv	typeref:class:cv::CV_EXPORTS
DMatch	core/types.hpp	/^DMatch::DMatch()$/;"	f	class:cv::DMatch
DMatch	core/types.hpp	/^DMatch::DMatch(int _queryIdx, int _trainIdx, float _distance)$/;"	f	class:cv::DMatch
DMatch	core/types.hpp	/^DMatch::DMatch(int _queryIdx, int _trainIdx, int _imgIdx, float _distance)$/;"	f	class:cv::DMatch
DMatch	core/types.hpp	/^class CV_EXPORTS_W_SIMPLE DMatch$/;"	c	namespace:cv
DONE	calib3d/calib3d_c.h	/^    enum { DONE=0, STARTED=1, CALC_J=2, CHECK_ERR=3 };$/;"	e	enum:CvLevMarq::__anon55
DP	video/tracking_c.h	/^    int DP;                     \/* number of state vector dimensions *\/$/;"	m	struct:CvKalman
DRAW_OVER_OUTIMG	features2d.hpp	/^          DRAW_OVER_OUTIMG = 1, \/\/!< Output image matrix will not be created (Mat::create).$/;"	e	enum:cv::DrawMatchesFlags::__anon290
DRAW_RICH_KEYPOINTS	features2d.hpp	/^          DRAW_RICH_KEYPOINTS = 4 \/\/!< For each keypoint the circle around keypoint with keypoint size and$/;"	e	enum:cv::DrawMatchesFlags::__anon290
DTrees	ml.hpp	/^class CV_EXPORTS_W DTrees : public StatModel$/;"	c	namespace:cv::ml
DXY	videostab/fast_marching.hpp	/^        DXY() : dist(0), x(0), y(0) {}$/;"	f	struct:cv::videostab::FastMarchingMethod::DXY
DXY	videostab/fast_marching.hpp	/^        DXY(float _dist, int _x, int _y) : dist(_dist), x(_x), y(_y) {}$/;"	f	struct:cv::videostab::FastMarchingMethod::DXY
DXY	videostab/fast_marching.hpp	/^    struct DXY$/;"	s	class:cv::videostab::FastMarchingMethod
DYNAMIC_PARALLELISM	core/cuda.hpp	/^    DYNAMIC_PARALLELISM = FEATURE_SET_COMPUTE_35$/;"	e	enum:cv::cuda::FeatureSet
DataDepth	core/traits.hpp	/^template<typename _Tp> class DataDepth$/;"	c	namespace:cv
DataType	core/affine.hpp	/^    template<typename _Tp> class DataType< Affine3<_Tp> >$/;"	c	namespace:cv
DataType	core/cvstd.inl.hpp	/^template<typename _Tp> class DataType< std::complex<_Tp> >$/;"	c	namespace:cv
DataType	core/matx.hpp	/^template<typename _Tp, int cn> class DataType< Vec<_Tp, cn> >$/;"	c	namespace:cv
DataType	core/matx.hpp	/^template<typename _Tp, int m, int n> class DataType< Matx<_Tp, m, n> >$/;"	c	namespace:cv
DataType	core/traits.hpp	/^template<> class DataType<bool>$/;"	c	namespace:cv
DataType	core/traits.hpp	/^template<> class DataType<char>$/;"	c	namespace:cv
DataType	core/traits.hpp	/^template<> class DataType<double>$/;"	c	namespace:cv
DataType	core/traits.hpp	/^template<> class DataType<float>$/;"	c	namespace:cv
DataType	core/traits.hpp	/^template<> class DataType<int>$/;"	c	namespace:cv
DataType	core/traits.hpp	/^template<> class DataType<schar>$/;"	c	namespace:cv
DataType	core/traits.hpp	/^template<> class DataType<short>$/;"	c	namespace:cv
DataType	core/traits.hpp	/^template<> class DataType<uchar>$/;"	c	namespace:cv
DataType	core/traits.hpp	/^template<> class DataType<ushort>$/;"	c	namespace:cv
DataType	core/traits.hpp	/^template<typename _Tp> class DataType$/;"	c	namespace:cv
DataType	core/types.hpp	/^template<> class DataType< RotatedRect >$/;"	c	namespace:cv
DataType	core/types.hpp	/^template<> class DataType<DMatch>$/;"	c	namespace:cv
DataType	core/types.hpp	/^template<> class DataType<KeyPoint>$/;"	c	namespace:cv
DataType	core/types.hpp	/^template<> class DataType<Moments>$/;"	c	namespace:cv
DataType	core/types.hpp	/^template<> class DataType<Range>$/;"	c	namespace:cv
DataType	core/types.hpp	/^template<typename _Tp> class DataType< Complex<_Tp> >$/;"	c	namespace:cv
DataType	core/types.hpp	/^template<typename _Tp> class DataType< Point3_<_Tp> >$/;"	c	namespace:cv
DataType	core/types.hpp	/^template<typename _Tp> class DataType< Point_<_Tp> >$/;"	c	namespace:cv
DataType	core/types.hpp	/^template<typename _Tp> class DataType< Rect_<_Tp> >$/;"	c	namespace:cv
DataType	core/types.hpp	/^template<typename _Tp> class DataType< Scalar_<_Tp> >$/;"	c	namespace:cv
DataType	core/types.hpp	/^template<typename _Tp> class DataType< Size_<_Tp> >$/;"	c	namespace:cv
DataType	cudev/util/vec_traits.hpp	/^template <> class DataType<uint>$/;"	c	namespace:cv
DataType	cudev/util/vec_traits.hpp	/^template<> class DataType<char1>$/;"	c	namespace:cv
DataType	cudev/util/vec_traits.hpp	/^template<> class DataType<char2>$/;"	c	namespace:cv
DataType	cudev/util/vec_traits.hpp	/^template<> class DataType<char3>$/;"	c	namespace:cv
DataType	cudev/util/vec_traits.hpp	/^template<> class DataType<char4>$/;"	c	namespace:cv
Datatype	flann/saving.h	/^struct Datatype {};$/;"	s	namespace:cvflann
Datatype	flann/saving.h	/^struct Datatype<char> { static flann_datatype_t type() { return FLANN_INT8; } };$/;"	s	namespace:cvflann
Datatype	flann/saving.h	/^struct Datatype<double> { static flann_datatype_t type() { return FLANN_FLOAT64; } };$/;"	s	namespace:cvflann
Datatype	flann/saving.h	/^struct Datatype<float> { static flann_datatype_t type() { return FLANN_FLOAT32; } };$/;"	s	namespace:cvflann
Datatype	flann/saving.h	/^struct Datatype<int> { static flann_datatype_t type() { return FLANN_INT32; } };$/;"	s	namespace:cvflann
Datatype	flann/saving.h	/^struct Datatype<short> { static flann_datatype_t type() { return FLANN_INT16; } };$/;"	s	namespace:cvflann
Datatype	flann/saving.h	/^struct Datatype<unsigned char> { static flann_datatype_t type() { return FLANN_UINT8; } };$/;"	s	namespace:cvflann
Datatype	flann/saving.h	/^struct Datatype<unsigned int> { static flann_datatype_t type() { return FLANN_UINT32; } };$/;"	s	namespace:cvflann
Datatype	flann/saving.h	/^struct Datatype<unsigned short> { static flann_datatype_t type() { return FLANN_UINT16; } };$/;"	s	namespace:cvflann
DeathTest	ts/ts_gtest.h	/^class GTEST_API_ DeathTest {$/;"	c	namespace:testing::internal
DeathTestFactory	ts/ts_gtest.h	/^class DeathTestFactory {$/;"	c	namespace:testing::internal
DeblockMode	cudacodec.hpp	/^    int DeblockMode;     \/\/!< NVVE_DEBLOCK_MODE,$/;"	m	struct:cv::cudacodec::EncoderParams
DeblurerBase	videostab/deblurring.hpp	/^    DeblurerBase() : radius_(0), frames_(0), motions_(0), blurrinessRates_(0) {}$/;"	f	class:cv::videostab::DeblurerBase
DeblurerBase	videostab/deblurring.hpp	/^class CV_EXPORTS DeblurerBase$/;"	c	namespace:cv::videostab
DecompTypes	core/base.hpp	/^enum DecompTypes {$/;"	g	namespace:cv
DefaultBinaryShift	core/cuda/functional.hpp	/^        template <typename T1, typename T2, typename D> struct DefaultBinaryShift$/;"	s	namespace:cv::cuda::device::functional_detail
DefaultCopyPolicy	cudev/grid/copy.hpp	/^struct DefaultCopyPolicy$/;"	s	namespace:cv::cudev
DefaultDeathTestFactory	ts/ts_gtest.h	/^class DefaultDeathTestFactory : public DeathTestFactory {$/;"	c	namespace:testing::internal
DefaultDeleter	core/cvstd.hpp	/^struct DefaultDeleter$/;"	s	namespace:cv
DefaultGlobReducePolicy	cudev/grid/reduce.hpp	/^struct DefaultGlobReducePolicy$/;"	s	namespace:cv::cudev
DefaultHistogramPolicy	cudev/grid/histogram.hpp	/^struct DefaultHistogramPolicy$/;"	s	namespace:cv::cudev
DefaultPrintNonContainerTo	ts/ts_gtest.h	/^void DefaultPrintNonContainerTo(const T& value, ::std::ostream* os) {$/;"	f	namespace:testing_internal
DefaultPrintTo	ts/ts_gtest.h	/^void DefaultPrintTo(IsContainer \/* dummy *\/,$/;"	f	namespace:testing::internal
DefaultPrintTo	ts/ts_gtest.h	/^void DefaultPrintTo(IsNotContainer \/* dummy *\/,$/;"	f	namespace:testing::internal
DefaultReduceToVecPolicy	cudev/grid/reduce_to_vec.hpp	/^struct DefaultReduceToVecPolicy$/;"	s	namespace:cv::cudev
DefaultRngAuto	ts.hpp	/^    DefaultRngAuto() : old_state(cv::theRNG().state) { cv::theRNG().state = (uint64)-1; }$/;"	f	struct:cvtest::DefaultRngAuto
DefaultRngAuto	ts.hpp	/^struct CV_EXPORTS DefaultRngAuto$/;"	s	namespace:cvtest
DefaultSplitMergePolicy	cudev/grid/split_merge.hpp	/^struct DefaultSplitMergePolicy$/;"	s	namespace:cv::cudev
DefaultTransformFunctorTraits	core/cuda/functional.hpp	/^    template <typename Func> struct DefaultTransformFunctorTraits$/;"	s	namespace:cv::cuda::device
DefaultTransformPolicy	cudev/grid/transform.hpp	/^struct DefaultTransformPolicy$/;"	s	namespace:cv::cudev
DefaultTransformShift	core/cuda/functional.hpp	/^    template <typename Func> struct DefaultTransformShift$/;"	s	namespace:cv::cuda::device
DefaultTransposePolicy	cudev/grid/transpose.hpp	/^struct DefaultTransposePolicy$/;"	s	namespace:cv::cudev
DefaultUnaryShift	core/cuda/functional.hpp	/^        template <typename T, typename D> struct DefaultUnaryShift$/;"	s	namespace:cv::cuda::device::functional_detail
DeleteSelf_	ts/ts_gtest.h	/^  void DeleteSelf_() { delete this; }$/;"	f	class:testing::Test
DeleteThreadLocalValue	ts/ts_gtest.h	/^extern "C" inline void DeleteThreadLocalValue(void* value_holder) {$/;"	f	namespace:std::tr1
DemosaicTypes	cudaimgproc.hpp	/^enum DemosaicTypes$/;"	g	namespace:cv::cuda
DenseOpticalFlow	cudaoptflow.hpp	/^class CV_EXPORTS DenseOpticalFlow : public Algorithm$/;"	c	namespace:cv::cuda
DenseOpticalFlow	video/tracking.hpp	/^class CV_EXPORTS_W DenseOpticalFlow : public Algorithm$/;"	c	namespace:cv
DenseOpticalFlowExt	superres/optical_flow.hpp	/^        class CV_EXPORTS DenseOpticalFlowExt : public cv::Algorithm$/;"	c	namespace:cv::superres
DensePyrLKOpticalFlow	cudaoptflow.hpp	/^class CV_EXPORTS DensePyrLKOpticalFlow : public DenseOpticalFlow$/;"	c	namespace:cv::cuda
DensePyrLkOptFlowEstimatorGpu	videostab/optical_flow.hpp	/^class CV_EXPORTS DensePyrLkOptFlowEstimatorGpu$/;"	c	namespace:cv::videostab
Depth	core/wimage.hpp	/^inline int WImage<double>::Depth() const {return IPL_DEPTH_64F; }$/;"	f	class:cv::WImage
Depth	core/wimage.hpp	/^inline int WImage<float>::Depth() const {return IPL_DEPTH_32F; }$/;"	f	class:cv::WImage
Depth	core/wimage.hpp	/^inline int WImage<int>::Depth() const {return IPL_DEPTH_32S; }$/;"	f	class:cv::WImage
Depth	core/wimage.hpp	/^inline int WImage<short>::Depth() const {return IPL_DEPTH_16S; }$/;"	f	class:cv::WImage
Depth	core/wimage.hpp	/^inline int WImage<signed char>::Depth() const {return IPL_DEPTH_8S; }$/;"	f	class:cv::WImage
Depth	core/wimage.hpp	/^inline int WImage<uchar>::Depth() const {return IPL_DEPTH_8U; }$/;"	f	class:cv::WImage
Depth	core/wimage.hpp	/^inline int WImage<ushort>::Depth() const {return IPL_DEPTH_16U; }$/;"	f	class:cv::WImage
DerivXPtr	cudev/ptr2d/deriv.hpp	/^template <class SrcPtr> struct DerivXPtr$/;"	s	namespace:cv::cudev
DerivXPtrSz	cudev/ptr2d/deriv.hpp	/^template <class SrcPtr> struct DerivXPtrSz : DerivXPtr<SrcPtr>$/;"	s	namespace:cv::cudev
DerivYPtr	cudev/ptr2d/deriv.hpp	/^template <class SrcPtr> struct DerivYPtr$/;"	s	namespace:cv::cudev
DerivYPtrSz	cudev/ptr2d/deriv.hpp	/^template <class SrcPtr> struct DerivYPtrSz : DerivYPtr<SrcPtr>$/;"	s	namespace:cv::cudev
DescriptorCollection	features2d.hpp	/^    class CV_EXPORTS DescriptorCollection$/;"	c	class:cv::DescriptorMatcher
DescriptorExtractor	features2d.hpp	/^typedef Feature2D DescriptorExtractor;$/;"	t	namespace:cv
DescriptorMatcher	cudafeatures2d.hpp	/^class CV_EXPORTS DescriptorMatcher : public cv::Algorithm$/;"	c	namespace:cv::cuda
DescriptorMatcher	features2d.hpp	/^class CV_EXPORTS_W DescriptorMatcher : public Algorithm$/;"	c	namespace:cv
DetectionBasedTracker	objdetect/detection_based_tracker.hpp	/^class CV_EXPORTS DetectionBasedTracker$/;"	c	namespace:cv
DetectionROI	objdetect.hpp	/^struct DetectionROI$/;"	s	namespace:cv
DevPtr	core/cuda_types.hpp	/^            __CV_CUDA_HOST_DEVICE__ DevPtr() : data(0) {}$/;"	f	struct:cv::cuda::DevPtr
DevPtr	core/cuda_types.hpp	/^            __CV_CUDA_HOST_DEVICE__ DevPtr(T* data_) : data(data_) {}$/;"	f	struct:cv::cuda::DevPtr
DevPtr	core/cuda_types.hpp	/^        template <typename T> struct DevPtr$/;"	s	namespace:cv::cuda
Device	core/ocl.hpp	/^class CV_EXPORTS Device$/;"	c	namespace:cv::ocl
Device	core/ocl.hpp	/^class CV_EXPORTS Device;$/;"	m	namespace:cv::ocl	typeref:class:cv::ocl::CV_EXPORTS
DeviceInfo	core/cuda.hpp	/^class CV_EXPORTS DeviceInfo$/;"	c	namespace:cv::cuda
DeviceInfo	core/cuda.inl.hpp	/^DeviceInfo::DeviceInfo()$/;"	f	class:cv::cuda::DeviceInfo
DeviceInfo	core/cuda.inl.hpp	/^DeviceInfo::DeviceInfo(int device_id)$/;"	f	class:cv::cuda::DeviceInfo
DeviceManager	ts/cuda_test.hpp	/^    class CV_EXPORTS DeviceManager$/;"	c	namespace:cvtest
DftFlags	core/base.hpp	/^enum DftFlags {$/;"	g	namespace:cv
DisableCabac	cudacodec.hpp	/^    int DisableCabac;    \/\/!< NVVE_DISABLE_CABAC,$/;"	m	struct:cv::cudacodec::EncoderParams
DisableIf	cudev/util/type_traits.hpp	/^template <bool, typename T = void> struct DisableIf {};$/;"	s	namespace:cv::cudev
DisableIf	cudev/util/type_traits.hpp	/^template <typename T> struct DisableIf<false, T> { typedef T type; };$/;"	s	namespace:cv::cudev
DisableSPSPPS	cudacodec.hpp	/^    int DisableSPSPPS;   \/\/!< NVVE_DISABLE_SPS_PPS$/;"	m	struct:cv::cudacodec::EncoderParams
DisjointSets	stitching/detail/util.hpp	/^    DisjointSets(int elem_count = 0) { createOneElemSets(elem_count); }$/;"	f	class:cv::detail::DisjointSets
DisjointSets	stitching/detail/util.hpp	/^class CV_EXPORTS DisjointSets$/;"	c	namespace:cv::detail
DisparityBilateralFilter	cudastereo.hpp	/^class CV_EXPORTS DisparityBilateralFilter : public cv::Algorithm$/;"	c	namespace:cv::cuda
Dispatcher	core/cuda/detail/reduce.hpp	/^        template <unsigned int N> struct Dispatcher$/;"	s	namespace:cv::cuda::device::reduce_detail
Dispatcher	core/cuda/detail/reduce_key_val.hpp	/^        template <unsigned int N> struct Dispatcher$/;"	s	namespace:cv::cuda::device::reduce_key_val_detail
Dispatcher	cudev/block/detail/reduce.hpp	/^    template <int N> struct Dispatcher$/;"	s	namespace:cv::cudev::block_reduce_detail
Dispatcher	cudev/block/detail/reduce_key_val.hpp	/^    template <int N> struct Dispatcher$/;"	s	namespace:cv::cudev::block_reduce_key_val_detail
DistIndex	flann/result_set.h	/^        DistIndex(DistanceType dist, unsigned int index) :$/;"	f	struct:cvflann::UniqueResultSet::DistIndex
DistIndex	flann/result_set.h	/^    struct DistIndex$/;"	s	class:cvflann::UniqueResultSet
DistIndex	flann/result_set.h	/^    typedef typename UniqueResultSet<DistanceType>::DistIndex DistIndex;$/;"	t	class:cvflann::KNNUniqueResultSet
DistIndex	flann/result_set.h	/^    typedef typename UniqueResultSet<DistanceType>::DistIndex DistIndex;$/;"	t	class:cvflann::RadiusUniqueResultSet
DistanceBetweenSignAndMagnitudeNumbers	ts/ts_gtest.h	/^  static Bits DistanceBetweenSignAndMagnitudeNumbers(const Bits &sam1,$/;"	f	class:testing::internal::FloatingPoint
DistanceTransformLabelTypes	imgproc.hpp	/^enum DistanceTransformLabelTypes {$/;"	g	namespace:cv
DistanceTransformMasks	imgproc.hpp	/^enum DistanceTransformMasks {$/;"	g	namespace:cv
DistanceType	flann.hpp	/^        typedef typename Distance::ResultType DistanceType;$/;"	t	class:cv::flann::GenericIndex
DistanceType	flann.hpp	/^        typedef typename L2<T>::ResultType DistanceType;$/;"	t	class:cv::flann::Index_
DistanceType	flann/autotuned_index.h	/^    typedef typename Distance::ResultType DistanceType;$/;"	t	class:cvflann::AutotunedIndex
DistanceType	flann/composite_index.h	/^    typedef typename Distance::ResultType DistanceType;$/;"	t	class:cvflann::CompositeIndex
DistanceType	flann/flann_base.hpp	/^    typedef typename Distance::ResultType DistanceType;$/;"	t	class:cvflann::Index
DistanceType	flann/hierarchical_clustering_index.h	/^    typedef typename Distance::ResultType DistanceType;$/;"	t	class:cvflann::HierarchicalClusteringIndex
DistanceType	flann/kdtree_index.h	/^    typedef typename Distance::ResultType DistanceType;$/;"	t	class:cvflann::KDTreeIndex
DistanceType	flann/kdtree_single_index.h	/^    typedef typename Distance::ResultType DistanceType;$/;"	t	class:cvflann::KDTreeSingleIndex
DistanceType	flann/kmeans_index.h	/^    typedef typename Distance::ResultType DistanceType;$/;"	t	class:cvflann::KMeansIndex
DistanceType	flann/linear_index.h	/^    typedef typename Distance::ResultType DistanceType;$/;"	t	class:cvflann::LinearIndex
DistanceType	flann/lsh_index.h	/^    typedef typename Distance::ResultType DistanceType;$/;"	t	class:cvflann::LshIndex
DistanceType	flann/nn_index.h	/^    typedef typename Distance::ResultType DistanceType;$/;"	t	class:cvflann::NNIndex
DistanceTypes	imgproc.hpp	/^enum DistanceTypes {$/;"	g	namespace:cv
Double	ts/ts_gtest.h	/^typedef FloatingPoint<double> Double;$/;"	t	namespace:testing::internal
DownCast_	ts/ts_gtest.h	/^inline To DownCast_(From* f) {  \/\/ so we only accept pointers$/;"	f	namespace:std::tr1
DownhillSolver	core/optim.hpp	/^class CV_EXPORTS DownhillSolver : public MinProblemSolver$/;"	c	namespace:cv
DpSeamFinder	stitching/detail/seam_finders.hpp	/^class CV_EXPORTS DpSeamFinder : public SeamFinder$/;"	c	namespace:cv::detail
DrawMatchesFlags	features2d.hpp	/^struct CV_EXPORTS DrawMatchesFlags$/;"	s	namespace:cv
DualTVL1OpticalFlow	superres/optical_flow.hpp	/^        class CV_EXPORTS DualTVL1OpticalFlow : public virtual DenseOpticalFlowExt$/;"	c	namespace:cv::superres
DualTVL1OpticalFlow	video/tracking.hpp	/^class CV_EXPORTS_W DualTVL1OpticalFlow : public DenseOpticalFlow$/;"	c	namespace:cv
DynamMatr	video/tracking_c.h	/^    float* DynamMatr;           \/* =transition_matrix->data.fl *\/$/;"	m	struct:CvKalman
DynamicBitset	flann/dynamic_bitset.h	/^    DynamicBitset()$/;"	f	class:cvflann::DynamicBitset
DynamicBitset	flann/dynamic_bitset.h	/^    DynamicBitset(size_t sz)$/;"	f	class:cvflann::DynamicBitset
DynamicBitset	flann/dynamic_bitset.h	/^class DynamicBitset$/;"	c	namespace:cvflann
DynamicBitset	flann/dynamic_bitset.h	/^typedef boost::dynamic_bitset<> DynamicBitset;$/;"	t
DynamicGOP	cudacodec.hpp	/^    int DynamicGOP;      \/\/!< NVVE_DYNAMIC_GOP,$/;"	m	struct:cv::cudacodec::EncoderParams
DynamicSharedMem	core/cuda/dynamic_smem.hpp	/^    template<> struct DynamicSharedMem<double>$/;"	s	namespace:cv::cuda::device
DynamicSharedMem	core/cuda/dynamic_smem.hpp	/^    template<class T> struct DynamicSharedMem$/;"	s	namespace:cv::cuda::device
DynamicSharedMem	cudev/block/dynamic_smem.hpp	/^template <> struct DynamicSharedMem<double>$/;"	s	namespace:cv::cudev
DynamicSharedMem	cudev/block/dynamic_smem.hpp	/^template <class T> struct DynamicSharedMem$/;"	s	namespace:cv::cudev
ELEMENT_ARRAY_BUFFER	core/opengl.hpp	/^        ELEMENT_ARRAY_BUFFER = 0x8893, \/\/!< The buffer will be used for indices (in glDrawElements, for example)$/;"	e	enum:cv::ogl::Buffer::Target
EM	ml.hpp	/^class CV_EXPORTS_W EM : public StatModel$/;"	c	namespace:cv::ml
EMDHistogramCostExtractor	shape/hist_cost.hpp	/^class CV_EXPORTS_W EMDHistogramCostExtractor : public HistogramCostExtractor$/;"	c	namespace:cv
EMDL1HistogramCostExtractor	shape/hist_cost.hpp	/^class CV_EXPORTS_W EMDL1HistogramCostExtractor : public HistogramCostExtractor$/;"	c	namespace:cv
EMPTY	core/persistence.hpp	/^        EMPTY     = 32, \/\/!< empty structure (sequence or mapping)$/;"	e	enum:cv::FileNode::Type
ENABLE_LOG	stitching/detail/util.hpp	50;"	d
EPS	core/types.hpp	/^        EPS=2 \/\/!< the desired accuracy or change in parameters at which the iterative algorithm stops$/;"	e	enum:cv::TermCriteria::Type
EPS_SVR	ml.hpp	/^        EPS_SVR=103,$/;"	e	enum:cv::ml::SVM::Types
ERROR_ABSOLUTE	ts/ts_perf.hpp	/^    ERROR_ABSOLUTE = 0,$/;"	e	enum:perf::ERROR_TYPE
ERROR_RELATIVE	ts/ts_perf.hpp	/^    ERROR_RELATIVE = 1$/;"	e	enum:perf::ERROR_TYPE
ERROR_TYPE	ts/ts_perf.hpp	/^enum ERROR_TYPE$/;"	g	namespace:perf
ERR_CAMERA_PARAMS_ADJUST_FAIL	stitching.hpp	/^        ERR_CAMERA_PARAMS_ADJUST_FAIL = 3$/;"	e	enum:cv::Stitcher::Status
ERR_HOMOGRAPHY_EST_FAIL	stitching.hpp	/^        ERR_HOMOGRAPHY_EST_FAIL = 2,$/;"	e	enum:cv::Stitcher::Status
ERR_NEED_MORE_IMGS	stitching.hpp	/^        ERR_NEED_MORE_IMGS = 1,$/;"	e	enum:cv::Stitcher::Status
EUCLIDEAN	flann/defines.h	/^    EUCLIDEAN = 1,$/;"	e	enum:cvflann::flann_distance_t
EVENT_FLAG_ALTKEY	highgui.hpp	/^       EVENT_FLAG_ALTKEY    = 32$/;"	e	enum:cv::__anon59
EVENT_FLAG_CTRLKEY	highgui.hpp	/^       EVENT_FLAG_CTRLKEY   = 8,$/;"	e	enum:cv::__anon59
EVENT_FLAG_LBUTTON	highgui.hpp	/^enum { EVENT_FLAG_LBUTTON   = 1,$/;"	e	enum:cv::__anon59
EVENT_FLAG_MBUTTON	highgui.hpp	/^       EVENT_FLAG_MBUTTON   = 4,$/;"	e	enum:cv::__anon59
EVENT_FLAG_RBUTTON	highgui.hpp	/^       EVENT_FLAG_RBUTTON   = 2,$/;"	e	enum:cv::__anon59
EVENT_FLAG_SHIFTKEY	highgui.hpp	/^       EVENT_FLAG_SHIFTKEY  = 16,$/;"	e	enum:cv::__anon59
EVENT_LBUTTONDBLCLK	highgui.hpp	/^       EVENT_LBUTTONDBLCLK  = 7,$/;"	e	enum:cv::__anon58
EVENT_LBUTTONDOWN	highgui.hpp	/^       EVENT_LBUTTONDOWN    = 1,$/;"	e	enum:cv::__anon58
EVENT_LBUTTONUP	highgui.hpp	/^       EVENT_LBUTTONUP      = 4,$/;"	e	enum:cv::__anon58
EVENT_MBUTTONDBLCLK	highgui.hpp	/^       EVENT_MBUTTONDBLCLK  = 9,$/;"	e	enum:cv::__anon58
EVENT_MBUTTONDOWN	highgui.hpp	/^       EVENT_MBUTTONDOWN    = 3,$/;"	e	enum:cv::__anon58
EVENT_MBUTTONUP	highgui.hpp	/^       EVENT_MBUTTONUP      = 6,$/;"	e	enum:cv::__anon58
EVENT_MOUSEHWHEEL	highgui.hpp	/^       EVENT_MOUSEHWHEEL    = 11$/;"	e	enum:cv::__anon58
EVENT_MOUSEMOVE	highgui.hpp	/^enum { EVENT_MOUSEMOVE      = 0,$/;"	e	enum:cv::__anon58
EVENT_MOUSEWHEEL	highgui.hpp	/^       EVENT_MOUSEWHEEL     = 10,$/;"	e	enum:cv::__anon58
EVENT_RBUTTONDBLCLK	highgui.hpp	/^       EVENT_RBUTTONDBLCLK  = 8,$/;"	e	enum:cv::__anon58
EVENT_RBUTTONDOWN	highgui.hpp	/^       EVENT_RBUTTONDOWN    = 2,$/;"	e	enum:cv::__anon58
EVENT_RBUTTONUP	highgui.hpp	/^       EVENT_RBUTTONUP      = 5,$/;"	e	enum:cv::__anon58
EXCLUSIVE	core/cuda/scan.hpp	/^    enum ScanKind { EXCLUSIVE = 0,  INCLUSIVE = 1 };$/;"	e	enum:cv::cuda::device::ScanKind
EXECUTE_TEST	ts/ts_gtest.h	/^  enum TestRole { OVERSEE_TEST, EXECUTE_TEST };$/;"	e	enum:testing::internal::DeathTest::TestRole
EXEC_KERNEL	core/ocl.hpp	/^        EXEC_KERNEL=(1 << 0),$/;"	e	enum:cv::ocl::Device::__anon156
EXEC_NATIVE_KERNEL	core/ocl.hpp	/^        EXEC_NATIVE_KERNEL=(1 << 1)$/;"	e	enum:cv::ocl::Device::__anon156
EXPECT_ANY_THROW	ts/ts_gtest.h	19379;"	d
EXPECT_DEATH	ts/ts_gtest.h	8680;"	d
EXPECT_DEATH_IF_SUPPORTED	ts/ts_gtest.h	8777;"	d
EXPECT_DEATH_IF_SUPPORTED	ts/ts_gtest.h	8782;"	d
EXPECT_DEBUG_DEATH	ts/ts_gtest.h	8754;"	d
EXPECT_DEBUG_DEATH	ts/ts_gtest.h	8762;"	d
EXPECT_DOUBLE_EQ	ts/ts_gtest.h	19920;"	d
EXPECT_EQ	ts/ts_gtest.h	19811;"	d
EXPECT_EXIT	ts/ts_gtest.h	8669;"	d
EXPECT_FALSE	ts/ts_gtest.h	19394;"	d
EXPECT_FLOAT_EQ	ts/ts_gtest.h	19916;"	d
EXPECT_GE	ts/ts_gtest.h	19821;"	d
EXPECT_GT	ts/ts_gtest.h	19823;"	d
EXPECT_HRESULT_FAILED	ts/ts_gtest.h	19970;"	d
EXPECT_HRESULT_SUCCEEDED	ts/ts_gtest.h	19964;"	d
EXPECT_LE	ts/ts_gtest.h	19817;"	d
EXPECT_LT	ts/ts_gtest.h	19819;"	d
EXPECT_MAT_NEAR	ts/cuda_test.hpp	112;"	d
EXPECT_MAT_NEAR	ts/ocl_test.hpp	97;"	d
EXPECT_MAT_NEAR_RELATIVE	ts/ocl_test.hpp	106;"	d
EXPECT_MAT_NORM	ts/ocl_test.hpp	91;"	d
EXPECT_MAT_N_DIFF	ts/ocl_test.hpp	115;"	d
EXPECT_MAT_SIMILAR	ts/cuda_test.hpp	156;"	d
EXPECT_MAT_SIMILAR	ts/ocl_test.hpp	181;"	d
EXPECT_NE	ts/ts_gtest.h	19815;"	d
EXPECT_NEAR	ts/ts_gtest.h	19932;"	d
EXPECT_NO_FATAL_FAILURE	ts/ts_gtest.h	19990;"	d
EXPECT_NO_THROW	ts/ts_gtest.h	19377;"	d
EXPECT_POINT2_NEAR	ts/cuda_test.hpp	130;"	d
EXPECT_POINT3_NEAR	ts/cuda_test.hpp	141;"	d
EXPECT_PRED1	ts/ts_gtest.h	19520;"	d
EXPECT_PRED2	ts/ts_gtest.h	19568;"	d
EXPECT_PRED3	ts/ts_gtest.h	19623;"	d
EXPECT_PRED4	ts/ts_gtest.h	19685;"	d
EXPECT_PRED5	ts/ts_gtest.h	19754;"	d
EXPECT_PRED_FORMAT1	ts/ts_gtest.h	19518;"	d
EXPECT_PRED_FORMAT2	ts/ts_gtest.h	19566;"	d
EXPECT_PRED_FORMAT3	ts/ts_gtest.h	19621;"	d
EXPECT_PRED_FORMAT4	ts/ts_gtest.h	19683;"	d
EXPECT_PRED_FORMAT5	ts/ts_gtest.h	19752;"	d
EXPECT_SCALAR_NEAR	ts/cuda_test.hpp	115;"	d
EXPECT_STRCASEEQ	ts/ts_gtest.h	19888;"	d
EXPECT_STRCASENE	ts/ts_gtest.h	19890;"	d
EXPECT_STREQ	ts/ts_gtest.h	19884;"	d
EXPECT_STRNE	ts/ts_gtest.h	19886;"	d
EXPECT_THROW	ts/ts_gtest.h	19375;"	d
EXPECT_TRUE	ts/ts_gtest.h	19391;"	d
EXPR	core/mat.hpp	/^        EXPR              = 6 << KIND_SHIFT,$/;"	e	enum:cv::_InputArray::__anon135
ElementType	flann.hpp	/^        typedef typename Distance::ElementType ElementType;$/;"	t	class:cv::flann::GenericIndex
ElementType	flann.hpp	/^        typedef typename L2<T>::ElementType ElementType;$/;"	t	class:cv::flann::Index_
ElementType	flann/autotuned_index.h	/^    typedef typename Distance::ElementType ElementType;$/;"	t	class:cvflann::AutotunedIndex
ElementType	flann/composite_index.h	/^    typedef typename Distance::ElementType ElementType;$/;"	t	class:cvflann::CompositeIndex
ElementType	flann/dist.h	/^    typedef T ElementType;$/;"	t	struct:cvflann::ChiSquareDistance
ElementType	flann/dist.h	/^    typedef T ElementType;$/;"	t	struct:cvflann::Hamming
ElementType	flann/dist.h	/^    typedef T ElementType;$/;"	t	struct:cvflann::Hamming2
ElementType	flann/dist.h	/^    typedef T ElementType;$/;"	t	struct:cvflann::HellingerDistance
ElementType	flann/dist.h	/^    typedef T ElementType;$/;"	t	struct:cvflann::HistIntersectionDistance
ElementType	flann/dist.h	/^    typedef T ElementType;$/;"	t	struct:cvflann::KL_Divergence
ElementType	flann/dist.h	/^    typedef T ElementType;$/;"	t	struct:cvflann::L1
ElementType	flann/dist.h	/^    typedef T ElementType;$/;"	t	struct:cvflann::L2
ElementType	flann/dist.h	/^    typedef T ElementType;$/;"	t	struct:cvflann::L2_Simple
ElementType	flann/dist.h	/^    typedef T ElementType;$/;"	t	struct:cvflann::MaxDistance
ElementType	flann/dist.h	/^    typedef T ElementType;$/;"	t	struct:cvflann::MinkowskiDistance
ElementType	flann/dist.h	/^    typedef unsigned char ElementType;$/;"	t	struct:cvflann::HammingLUT
ElementType	flann/flann_base.hpp	/^    typedef typename Distance::ElementType ElementType;$/;"	t	class:cvflann::Index
ElementType	flann/hierarchical_clustering_index.h	/^    typedef typename Distance::ElementType ElementType;$/;"	t	class:cvflann::HierarchicalClusteringIndex
ElementType	flann/kdtree_index.h	/^    typedef typename Distance::ElementType ElementType;$/;"	t	class:cvflann::KDTreeIndex
ElementType	flann/kdtree_single_index.h	/^    typedef typename Distance::ElementType ElementType;$/;"	t	class:cvflann::KDTreeSingleIndex
ElementType	flann/kmeans_index.h	/^    typedef typename Distance::ElementType ElementType;$/;"	t	class:cvflann::KMeansIndex
ElementType	flann/linear_index.h	/^    typedef typename Distance::ElementType ElementType;$/;"	t	class:cvflann::LinearIndex
ElementType	flann/lsh_index.h	/^    typedef typename Distance::ElementType ElementType;$/;"	t	class:cvflann::LshIndex
ElementType	flann/nn_index.h	/^    typedef typename Distance::ElementType ElementType;$/;"	t	class:cvflann::NNIndex
EmptyTestEventListener	ts/ts_gtest.h	/^class EmptyTestEventListener : public TestEventListener {$/;"	c	namespace:testing
Emulation	core/cuda/emulation.hpp	/^    struct Emulation$/;"	s	namespace:cv::cuda::device
EnableIf	cudev/util/type_traits.hpp	/^template <bool, typename T = void> struct EnableIf {};$/;"	s	namespace:cv::cudev
EnableIf	cudev/util/type_traits.hpp	/^template <typename T> struct EnableIf<true, T> { typedef T type; };$/;"	s	namespace:cv::cudev
EnableIf	ts/ts_gtest.h	/^template<> struct EnableIf<true> { typedef void type; };  \/\/ NOLINT$/;"	s	namespace:testing::internal
EncoderCallBack	cudacodec.hpp	/^class CV_EXPORTS EncoderCallBack$/;"	c	namespace:cv::cudacodec
EncoderParams	cudacodec.hpp	/^struct CV_EXPORTS EncoderParams$/;"	s	namespace:cv::cudacodec
End	ts/ts_gtest.h	/^  virtual ParamIteratorInterface<ParamType>* End() const {$/;"	f	class:testing::internal::CartesianProductGenerator10
End	ts/ts_gtest.h	/^  virtual ParamIteratorInterface<ParamType>* End() const {$/;"	f	class:testing::internal::CartesianProductGenerator2
End	ts/ts_gtest.h	/^  virtual ParamIteratorInterface<ParamType>* End() const {$/;"	f	class:testing::internal::CartesianProductGenerator3
End	ts/ts_gtest.h	/^  virtual ParamIteratorInterface<ParamType>* End() const {$/;"	f	class:testing::internal::CartesianProductGenerator4
End	ts/ts_gtest.h	/^  virtual ParamIteratorInterface<ParamType>* End() const {$/;"	f	class:testing::internal::CartesianProductGenerator5
End	ts/ts_gtest.h	/^  virtual ParamIteratorInterface<ParamType>* End() const {$/;"	f	class:testing::internal::CartesianProductGenerator6
End	ts/ts_gtest.h	/^  virtual ParamIteratorInterface<ParamType>* End() const {$/;"	f	class:testing::internal::CartesianProductGenerator7
End	ts/ts_gtest.h	/^  virtual ParamIteratorInterface<ParamType>* End() const {$/;"	f	class:testing::internal::CartesianProductGenerator8
End	ts/ts_gtest.h	/^  virtual ParamIteratorInterface<ParamType>* End() const {$/;"	f	class:testing::internal::CartesianProductGenerator9
End	ts/ts_gtest.h	/^  virtual ParamIteratorInterface<T>* End() const {$/;"	f	class:testing::internal::RangeGenerator
End	ts/ts_gtest.h	/^  virtual ParamIteratorInterface<T>* End() const {$/;"	f	class:testing::internal::ValuesInIteratorRangeGenerator
Environment	ts/ts_gtest.h	/^class Environment {$/;"	c	namespace:testing
EqHelper	ts/ts_gtest.h	/^class EqHelper {$/;"	c	namespace:testing::internal
EqHelper	ts/ts_gtest.h	/^class EqHelper<true> {$/;"	c	namespace:testing::internal
Equals	ts/ts_gtest.h	/^    virtual bool Equals(const ParamIteratorInterface<ParamType>& other) const {$/;"	f	class:testing::internal::CartesianProductGenerator10::Iterator
Equals	ts/ts_gtest.h	/^    virtual bool Equals(const ParamIteratorInterface<ParamType>& other) const {$/;"	f	class:testing::internal::CartesianProductGenerator2::Iterator
Equals	ts/ts_gtest.h	/^    virtual bool Equals(const ParamIteratorInterface<ParamType>& other) const {$/;"	f	class:testing::internal::CartesianProductGenerator3::Iterator
Equals	ts/ts_gtest.h	/^    virtual bool Equals(const ParamIteratorInterface<ParamType>& other) const {$/;"	f	class:testing::internal::CartesianProductGenerator4::Iterator
Equals	ts/ts_gtest.h	/^    virtual bool Equals(const ParamIteratorInterface<ParamType>& other) const {$/;"	f	class:testing::internal::CartesianProductGenerator5::Iterator
Equals	ts/ts_gtest.h	/^    virtual bool Equals(const ParamIteratorInterface<ParamType>& other) const {$/;"	f	class:testing::internal::CartesianProductGenerator6::Iterator
Equals	ts/ts_gtest.h	/^    virtual bool Equals(const ParamIteratorInterface<ParamType>& other) const {$/;"	f	class:testing::internal::CartesianProductGenerator7::Iterator
Equals	ts/ts_gtest.h	/^    virtual bool Equals(const ParamIteratorInterface<ParamType>& other) const {$/;"	f	class:testing::internal::CartesianProductGenerator8::Iterator
Equals	ts/ts_gtest.h	/^    virtual bool Equals(const ParamIteratorInterface<ParamType>& other) const {$/;"	f	class:testing::internal::CartesianProductGenerator9::Iterator
Equals	ts/ts_gtest.h	/^    virtual bool Equals(const ParamIteratorInterface<T>& other) const {$/;"	f	class:testing::internal::RangeGenerator::Iterator
Equals	ts/ts_gtest.h	/^    virtual bool Equals(const ParamIteratorInterface<T>& other) const {$/;"	f	class:testing::internal::ValuesInIteratorRangeGenerator::Iterator
Error	core/base.hpp	/^namespace Error {$/;"	n	namespace:cv
Error	hal.hpp	/^namespace Error {$/;"	n	namespace:cv::hal
ErrorCallback	core/utility.hpp	/^extern "C" typedef int (*ErrorCallback)( int status, const char* func_name,$/;"	t	namespace:cv
ErrorTypes	ml.hpp	/^enum ErrorTypes$/;"	g	namespace:cv::ml
Estimator	stitching/detail/motion_estimators.hpp	/^class CV_EXPORTS Estimator$/;"	c	namespace:cv::detail
Event	core/base.hpp	/^    class CV_EXPORTS Event;$/;"	m	namespace:cv::cuda	typeref:class:cv::cuda::CV_EXPORTS
Event	core/cuda.hpp	/^class CV_EXPORTS Event$/;"	c	namespace:cv::cuda
EventAccessor	core/cuda_stream_accessor.hpp	/^        struct EventAccessor$/;"	s	namespace:cv::cuda
Exception	core.hpp	/^class CV_EXPORTS Exception : public std::exception$/;"	c	namespace:cv
ExitedWithCode	ts/ts_gtest.h	/^class GTEST_API_ ExitedWithCode {$/;"	c	namespace:testing
ExposureCompensator	stitching/detail/exposure_compensate.hpp	/^class CV_EXPORTS ExposureCompensator$/;"	c	namespace:cv::detail
Expr	cudev/expr/expr.hpp	/^template <class Body> struct Expr$/;"	s	namespace:cv::cudev
ExtObject	objdetect/detection_based_tracker.hpp	/^            ExtObject(int _id, cv::Rect _location, ObjectStatus _status)$/;"	f	struct:cv::DetectionBasedTracker::ExtObject
ExtObject	objdetect/detection_based_tracker.hpp	/^        struct ExtObject$/;"	s	class:cv::DetectionBasedTracker
FAIL	ts/ts_gtest.h	19354;"	d
FAIL_ARITHM_EXCEPTION	ts.hpp	/^        FAIL_ARITHM_EXCEPTION=-6,$/;"	e	enum:cvtest::TS::FailureCode
FAIL_BAD_ACCURACY	ts.hpp	/^        FAIL_BAD_ACCURACY=-12,$/;"	e	enum:cvtest::TS::FailureCode
FAIL_BAD_ARG_CHECK	ts.hpp	/^        FAIL_BAD_ARG_CHECK=-14,$/;"	e	enum:cvtest::TS::FailureCode
FAIL_ERROR_IN_CALLED_FUNC	ts.hpp	/^        FAIL_ERROR_IN_CALLED_FUNC=-3,$/;"	e	enum:cvtest::TS::FailureCode
FAIL_EXCEPTION	ts.hpp	/^        FAIL_EXCEPTION=-4,$/;"	e	enum:cvtest::TS::FailureCode
FAIL_GENERIC	ts.hpp	/^        FAIL_GENERIC=-1,$/;"	e	enum:cvtest::TS::FailureCode
FAIL_HANG	ts.hpp	/^        FAIL_HANG=-13,$/;"	e	enum:cvtest::TS::FailureCode
FAIL_INVALID_OUTPUT	ts.hpp	/^        FAIL_INVALID_OUTPUT=-10,$/;"	e	enum:cvtest::TS::FailureCode
FAIL_INVALID_TEST_DATA	ts.hpp	/^        FAIL_INVALID_TEST_DATA=-15,$/;"	e	enum:cvtest::TS::FailureCode
FAIL_MEMORY_CORRUPTION_BEGIN	ts.hpp	/^        FAIL_MEMORY_CORRUPTION_BEGIN=-7,$/;"	e	enum:cvtest::TS::FailureCode
FAIL_MEMORY_CORRUPTION_END	ts.hpp	/^        FAIL_MEMORY_CORRUPTION_END=-8,$/;"	e	enum:cvtest::TS::FailureCode
FAIL_MEMORY_EXCEPTION	ts.hpp	/^        FAIL_MEMORY_EXCEPTION=-5,$/;"	e	enum:cvtest::TS::FailureCode
FAIL_MEMORY_LEAK	ts.hpp	/^        FAIL_MEMORY_LEAK=-9,$/;"	e	enum:cvtest::TS::FailureCode
FAIL_MISMATCH	ts.hpp	/^        FAIL_MISMATCH=-11,$/;"	e	enum:cvtest::TS::FailureCode
FAIL_MISSING_TEST_DATA	ts.hpp	/^        FAIL_MISSING_TEST_DATA=-2,$/;"	e	enum:cvtest::TS::FailureCode
FAIL_NO_CPU	ts/cuda_perf.hpp	80;"	d
FAST_N	features2d.hpp	/^        THRESHOLD = 10000, NONMAX_SUPPRESSION=10001, FAST_N=10002,$/;"	e	enum:cv::FastFeatureDetector::__anon283
FAST_SCORE	features2d.hpp	/^    enum { kBytes = 32, HARRIS_SCORE=0, FAST_SCORE=1 };$/;"	e	enum:cv::ORB::__anon282
FClose	ts/ts_gtest.h	/^inline int FClose(FILE* fp) { return fclose(fp); }$/;"	f	namespace:std::tr1::posix
FDOpen	ts/ts_gtest.h	/^inline FILE* FDOpen(int fd, const char* mode) { return fdopen(fd, mode); }$/;"	f	namespace:std::tr1::posix
FEATHER	stitching/detail/blenders.hpp	/^    enum { NO, FEATHER, MULTI_BAND };$/;"	e	enum:cv::detail::Blender::__anon416
FEATURE_SET_COMPUTE_10	core/cuda.hpp	/^    FEATURE_SET_COMPUTE_10 = 10,$/;"	e	enum:cv::cuda::FeatureSet
FEATURE_SET_COMPUTE_11	core/cuda.hpp	/^    FEATURE_SET_COMPUTE_11 = 11,$/;"	e	enum:cv::cuda::FeatureSet
FEATURE_SET_COMPUTE_12	core/cuda.hpp	/^    FEATURE_SET_COMPUTE_12 = 12,$/;"	e	enum:cv::cuda::FeatureSet
FEATURE_SET_COMPUTE_13	core/cuda.hpp	/^    FEATURE_SET_COMPUTE_13 = 13,$/;"	e	enum:cv::cuda::FeatureSet
FEATURE_SET_COMPUTE_20	core/cuda.hpp	/^    FEATURE_SET_COMPUTE_20 = 20,$/;"	e	enum:cv::cuda::FeatureSet
FEATURE_SET_COMPUTE_21	core/cuda.hpp	/^    FEATURE_SET_COMPUTE_21 = 21,$/;"	e	enum:cv::cuda::FeatureSet
FEATURE_SET_COMPUTE_30	core/cuda.hpp	/^    FEATURE_SET_COMPUTE_30 = 30,$/;"	e	enum:cv::cuda::FeatureSet
FEATURE_SET_COMPUTE_32	core/cuda.hpp	/^    FEATURE_SET_COMPUTE_32 = 32,$/;"	e	enum:cv::cuda::FeatureSet
FEATURE_SET_COMPUTE_35	core/cuda.hpp	/^    FEATURE_SET_COMPUTE_35 = 35,$/;"	e	enum:cv::cuda::FeatureSet
FEATURE_SET_COMPUTE_50	core/cuda.hpp	/^    FEATURE_SET_COMPUTE_50 = 50,$/;"	e	enum:cv::cuda::FeatureSet
FEATURE_SIZE	cudafeatures2d.hpp	/^        FEATURE_SIZE = 7$/;"	e	enum:cv::cuda::FastFeatureDetector::__anon291
FGDParams	cudalegacy.hpp	/^struct CV_EXPORTS FGDParams$/;"	s	namespace:cv::cuda
FILLED	core.hpp	/^    FILLED  = -1,$/;"	e	enum:cv::LineTypes
FIRST	stitching/detail/seam_finders.hpp	/^        FIRST = 1, SECOND = 2, INTERS = 4,$/;"	e	enum:cv::detail::DpSeamFinder::ComponentState
FIXED_SIZE	core/mat.hpp	/^        FIXED_SIZE = 0x4000 << KIND_SHIFT,$/;"	e	enum:cv::_InputArray::__anon135
FIXED_TYPE	core/mat.hpp	/^        FIXED_TYPE = 0x8000 << KIND_SHIFT,$/;"	e	enum:cv::_InputArray::__anon135
FLANNException	flann/general.h	/^    FLANNException(const char* message) : cv::Exception(0, message, "", __FILE__, __LINE__) { }$/;"	f	class:cvflann::FLANNException
FLANNException	flann/general.h	/^    FLANNException(const cv::String& message) : cv::Exception(0, message, "", __FILE__, __LINE__) { }$/;"	f	class:cvflann::FLANNException
FLANNException	flann/general.h	/^class FLANNException : public cv::Exception$/;"	c	namespace:cvflann
FLANN_ARRAY_LEN	flann/defines.h	75;"	d
FLANN_ARRAY_LEN	flann/defines.h	76;"	d
FLANN_CENTERS_GONZALES	flann/defines.h	/^    FLANN_CENTERS_GONZALES = 1,$/;"	e	enum:cvflann::flann_centers_init_t
FLANN_CENTERS_GROUPWISE	flann/defines.h	/^    FLANN_CENTERS_GROUPWISE = 3,$/;"	e	enum:cvflann::flann_centers_init_t
FLANN_CENTERS_KMEANSPP	flann/defines.h	/^    FLANN_CENTERS_KMEANSPP = 2,$/;"	e	enum:cvflann::flann_centers_init_t
FLANN_CENTERS_RANDOM	flann/defines.h	/^    FLANN_CENTERS_RANDOM = 0,$/;"	e	enum:cvflann::flann_centers_init_t
FLANN_CHECKS_AUTOTUNED	flann/defines.h	/^    FLANN_CHECKS_AUTOTUNED = -2$/;"	e	enum:cvflann::__anon29
FLANN_CHECKS_UNLIMITED	flann/defines.h	/^    FLANN_CHECKS_UNLIMITED = -1,$/;"	e	enum:cvflann::__anon29
FLANN_DEPRECATED	flann/defines.h	54;"	d
FLANN_DEPRECATED	flann/defines.h	57;"	d
FLANN_DEPRECATED	flann/defines.h	59;"	d
FLANN_DEPRECATED	flann/defines.h	62;"	d
FLANN_DISTANCE_CHECK	flann.hpp	241;"	d
FLANN_DIST_CHI_SQUARE	flann/defines.h	/^    FLANN_DIST_CHI_SQUARE = 7,$/;"	e	enum:cvflann::flann_distance_t
FLANN_DIST_CS	flann/defines.h	/^    FLANN_DIST_CS         = 7,$/;"	e	enum:cvflann::flann_distance_t
FLANN_DIST_EUCLIDEAN	flann/defines.h	/^    FLANN_DIST_EUCLIDEAN = 1,$/;"	e	enum:cvflann::flann_distance_t
FLANN_DIST_HAMMING	flann/defines.h	/^    FLANN_DIST_HAMMING          = 9,$/;"	e	enum:cvflann::flann_distance_t
FLANN_DIST_HELLINGER	flann/defines.h	/^    FLANN_DIST_HELLINGER = 6,$/;"	e	enum:cvflann::flann_distance_t
FLANN_DIST_HIST_INTERSECT	flann/defines.h	/^    FLANN_DIST_HIST_INTERSECT   = 5,$/;"	e	enum:cvflann::flann_distance_t
FLANN_DIST_KL	flann/defines.h	/^    FLANN_DIST_KL                = 8,$/;"	e	enum:cvflann::flann_distance_t
FLANN_DIST_KULLBACK_LEIBLER	flann/defines.h	/^    FLANN_DIST_KULLBACK_LEIBLER  = 8,$/;"	e	enum:cvflann::flann_distance_t
FLANN_DIST_L1	flann/defines.h	/^    FLANN_DIST_L1 = 2,$/;"	e	enum:cvflann::flann_distance_t
FLANN_DIST_L2	flann/defines.h	/^    FLANN_DIST_L2 = 1,$/;"	e	enum:cvflann::flann_distance_t
FLANN_DIST_MANHATTAN	flann/defines.h	/^    FLANN_DIST_MANHATTAN = 2,$/;"	e	enum:cvflann::flann_distance_t
FLANN_DIST_MAX	flann/defines.h	/^    FLANN_DIST_MAX   = 4,$/;"	e	enum:cvflann::flann_distance_t
FLANN_DIST_MINKOWSKI	flann/defines.h	/^    FLANN_DIST_MINKOWSKI = 3,$/;"	e	enum:cvflann::flann_distance_t
FLANN_EXPORT	flann/defines.h	36;"	d
FLANN_EXPORT	flann/defines.h	41;"	d
FLANN_EXPORT	flann/defines.h	43;"	d
FLANN_EXPORT	flann/defines.h	45;"	d
FLANN_EXPORT	flann/defines.h	49;"	d
FLANN_FLOAT32	flann/defines.h	/^    FLANN_FLOAT32 = 8,$/;"	e	enum:cvflann::flann_datatype_t
FLANN_FLOAT64	flann/defines.h	/^    FLANN_FLOAT64 = 9$/;"	e	enum:cvflann::flann_datatype_t
FLANN_INDEX_AUTOTUNED	flann/defines.h	/^    FLANN_INDEX_AUTOTUNED = 255,$/;"	e	enum:cvflann::flann_algorithm_t
FLANN_INDEX_COMPOSITE	flann/defines.h	/^    FLANN_INDEX_COMPOSITE = 3,$/;"	e	enum:cvflann::flann_algorithm_t
FLANN_INDEX_HIERARCHICAL	flann/defines.h	/^    FLANN_INDEX_HIERARCHICAL = 5,$/;"	e	enum:cvflann::flann_algorithm_t
FLANN_INDEX_KDTREE	flann/defines.h	/^    FLANN_INDEX_KDTREE = 1,$/;"	e	enum:cvflann::flann_algorithm_t
FLANN_INDEX_KDTREE_SINGLE	flann/defines.h	/^    FLANN_INDEX_KDTREE_SINGLE = 4,$/;"	e	enum:cvflann::flann_algorithm_t
FLANN_INDEX_KMEANS	flann/defines.h	/^    FLANN_INDEX_KMEANS = 2,$/;"	e	enum:cvflann::flann_algorithm_t
FLANN_INDEX_LINEAR	flann/defines.h	/^    FLANN_INDEX_LINEAR = 0,$/;"	e	enum:cvflann::flann_algorithm_t
FLANN_INDEX_LSH	flann/defines.h	/^    FLANN_INDEX_LSH = 6,$/;"	e	enum:cvflann::flann_algorithm_t
FLANN_INDEX_SAVED	flann/defines.h	/^    FLANN_INDEX_SAVED = 254,$/;"	e	enum:cvflann::flann_algorithm_t
FLANN_INT16	flann/defines.h	/^    FLANN_INT16 = 1,$/;"	e	enum:cvflann::flann_datatype_t
FLANN_INT32	flann/defines.h	/^    FLANN_INT32 = 2,$/;"	e	enum:cvflann::flann_datatype_t
FLANN_INT64	flann/defines.h	/^    FLANN_INT64 = 3,$/;"	e	enum:cvflann::flann_datatype_t
FLANN_INT8	flann/defines.h	/^    FLANN_INT8 = 0,$/;"	e	enum:cvflann::flann_datatype_t
FLANN_LOG_ERROR	flann/defines.h	/^    FLANN_LOG_ERROR = 2,$/;"	e	enum:cvflann::flann_log_level_t
FLANN_LOG_FATAL	flann/defines.h	/^    FLANN_LOG_FATAL = 1,$/;"	e	enum:cvflann::flann_log_level_t
FLANN_LOG_INFO	flann/defines.h	/^    FLANN_LOG_INFO = 4$/;"	e	enum:cvflann::flann_log_level_t
FLANN_LOG_NONE	flann/defines.h	/^    FLANN_LOG_NONE = 0,$/;"	e	enum:cvflann::flann_log_level_t
FLANN_LOG_WARN	flann/defines.h	/^    FLANN_LOG_WARN = 3,$/;"	e	enum:cvflann::flann_log_level_t
FLANN_PLATFORM_32_BIT	flann/defines.h	66;"	d
FLANN_PLATFORM_32_BIT	flann/defines.h	71;"	d
FLANN_PLATFORM_64_BIT	flann/defines.h	67;"	d
FLANN_PLATFORM_64_BIT	flann/defines.h	69;"	d
FLANN_SIGNATURE_	flann/saving.h	39;"	d
FLANN_SIGNATURE_	flann/saving.h	41;"	d
FLANN_UINT16	flann/defines.h	/^    FLANN_UINT16 = 5,$/;"	e	enum:cvflann::flann_datatype_t
FLANN_UINT32	flann/defines.h	/^    FLANN_UINT32 = 6,$/;"	e	enum:cvflann::flann_datatype_t
FLANN_UINT64	flann/defines.h	/^    FLANN_UINT64 = 7,$/;"	e	enum:cvflann::flann_datatype_t
FLANN_UINT8	flann/defines.h	/^    FLANN_UINT8 = 4,$/;"	e	enum:cvflann::flann_datatype_t
FLANN_USE_BOOST	flann/dynamic_bitset.h	39;"	d
FLANN_VERSION_	flann/config.h	34;"	d
FLANN_VERSION_	flann/config.h	36;"	d
FLOAT	core.hpp	/^    enum { INT=0, BOOLEAN=1, REAL=2, STRING=3, MAT=4, MAT_VECTOR=5, ALGORITHM=6, FLOAT=7,$/;"	e	enum:cv::Param::__anon404
FLOAT	core/persistence.hpp	/^        FLOAT     = REAL, \/\/!< synonym or REAL$/;"	e	enum:cv::FileNode::Type
FLOODFILL_FIXED_RANGE	imgproc.hpp	/^    FLOODFILL_FIXED_RANGE = 1 << 16,$/;"	e	enum:cv::FloodFillFlags
FLOODFILL_MASK_ONLY	imgproc.hpp	/^    FLOODFILL_MASK_ONLY   = 1 << 17$/;"	e	enum:cv::FloodFillFlags
FLOW	core/persistence.hpp	/^        FLOW      = 8,  \/\/!< compact representation of a sequence or mapping. Used only by YAML writer$/;"	e	enum:cv::FileNode::Type
FMT_C	core.hpp	/^           FMT_C       = 5$/;"	e	enum:cv::Formatter::__anon403
FMT_CSV	core.hpp	/^           FMT_CSV     = 2,$/;"	e	enum:cv::Formatter::__anon403
FMT_DEFAULT	core.hpp	/^    enum { FMT_DEFAULT = 0,$/;"	e	enum:cv::Formatter::__anon403
FMT_MATLAB	core.hpp	/^           FMT_MATLAB  = 1,$/;"	e	enum:cv::Formatter::__anon403
FMT_NUMPY	core.hpp	/^           FMT_NUMPY   = 4,$/;"	e	enum:cv::Formatter::__anon403
FMT_PYTHON	core.hpp	/^           FMT_PYTHON  = 3,$/;"	e	enum:cv::Formatter::__anon403
FM_7POINT	calib3d.hpp	/^enum { FM_7POINT = 1, \/\/!< 7-point algorithm$/;"	e	enum:cv::__anon48
FM_8POINT	calib3d.hpp	/^       FM_8POINT = 2, \/\/!< 8-point algorithm$/;"	e	enum:cv::__anon48
FM_LMEDS	calib3d.hpp	/^       FM_LMEDS  = 4, \/\/!< least-median algorithm$/;"	e	enum:cv::__anon48
FM_RANSAC	calib3d.hpp	/^       FM_RANSAC = 8  \/\/!< RANSAC algorithm$/;"	e	enum:cv::__anon48
FONT_HERSHEY_COMPLEX	core.hpp	/^    FONT_HERSHEY_COMPLEX        = 3, \/\/!< normal size serif font$/;"	e	enum:cv::HersheyFonts
FONT_HERSHEY_COMPLEX_SMALL	core.hpp	/^    FONT_HERSHEY_COMPLEX_SMALL  = 5, \/\/!< smaller version of FONT_HERSHEY_COMPLEX$/;"	e	enum:cv::HersheyFonts
FONT_HERSHEY_DUPLEX	core.hpp	/^    FONT_HERSHEY_DUPLEX         = 2, \/\/!< normal size sans-serif font (more complex than FONT_HERSHEY_SIMPLEX)$/;"	e	enum:cv::HersheyFonts
FONT_HERSHEY_PLAIN	core.hpp	/^    FONT_HERSHEY_PLAIN          = 1, \/\/!< small size sans-serif font$/;"	e	enum:cv::HersheyFonts
FONT_HERSHEY_SCRIPT_COMPLEX	core.hpp	/^    FONT_HERSHEY_SCRIPT_COMPLEX = 7, \/\/!< more complex variant of FONT_HERSHEY_SCRIPT_SIMPLEX$/;"	e	enum:cv::HersheyFonts
FONT_HERSHEY_SCRIPT_SIMPLEX	core.hpp	/^    FONT_HERSHEY_SCRIPT_SIMPLEX = 6, \/\/!< hand-writing style font$/;"	e	enum:cv::HersheyFonts
FONT_HERSHEY_SIMPLEX	core.hpp	/^    FONT_HERSHEY_SIMPLEX        = 0, \/\/!< normal size sans-serif font$/;"	e	enum:cv::HersheyFonts
FONT_HERSHEY_TRIPLEX	core.hpp	/^    FONT_HERSHEY_TRIPLEX        = 4, \/\/!< normal size serif font (more complex than FONT_HERSHEY_COMPLEX)$/;"	e	enum:cv::HersheyFonts
FONT_ITALIC	core.hpp	/^    FONT_ITALIC                 = 16 \/\/!< flag for italic font$/;"	e	enum:cv::HersheyFonts
FONT_SIZE	viz/widgets.hpp	/^            FONT_SIZE,$/;"	e	enum:cv::viz::RenderingProperties
FORMAT_AUTO	core/persistence.hpp	/^        FORMAT_AUTO = 0,      \/\/!< flag, auto format$/;"	e	enum:cv::FileStorage::Mode
FORMAT_MASK	core/persistence.hpp	/^        FORMAT_MASK = (7<<3), \/\/!< mask for format flags$/;"	e	enum:cv::FileStorage::Mode
FORMAT_XML	core/persistence.hpp	/^        FORMAT_XML  = (1<<3), \/\/!< flag, XML format$/;"	e	enum:cv::FileStorage::Mode
FORMAT_YAML	core/persistence.hpp	/^        FORMAT_YAML = (2<<3)  \/\/!< flag, YAML format$/;"	e	enum:cv::FileStorage::Mode
FOpen	ts/ts_gtest.h	/^inline FILE* FOpen(const char* path, const char* mode) {$/;"	f	namespace:std::tr1::posix
FP_CORRECTLY_ROUNDED_DIVIDE_SQRT	core/ocl.hpp	/^        FP_CORRECTLY_ROUNDED_DIVIDE_SQRT=(1 << 7)$/;"	e	enum:cv::ocl::Device::__anon155
FP_DENORM	core/ocl.hpp	/^        FP_DENORM=(1 << 0),$/;"	e	enum:cv::ocl::Device::__anon155
FP_FMA	core/ocl.hpp	/^        FP_FMA=(1 << 5),$/;"	e	enum:cv::ocl::Device::__anon155
FP_INF_NAN	core/ocl.hpp	/^        FP_INF_NAN=(1 << 1),$/;"	e	enum:cv::ocl::Device::__anon155
FP_ROUND_TO_INF	core/ocl.hpp	/^        FP_ROUND_TO_INF=(1 << 4),$/;"	e	enum:cv::ocl::Device::__anon155
FP_ROUND_TO_NEAREST	core/ocl.hpp	/^        FP_ROUND_TO_NEAREST=(1 << 2),$/;"	e	enum:cv::ocl::Device::__anon155
FP_ROUND_TO_ZERO	core/ocl.hpp	/^        FP_ROUND_TO_ZERO=(1 << 3),$/;"	e	enum:cv::ocl::Device::__anon155
FP_SOFT_FLOAT	core/ocl.hpp	/^        FP_SOFT_FLOAT=(1 << 6),$/;"	e	enum:cv::ocl::Device::__anon155
FRAMES	viz/widgets.hpp	/^            enum {FRAMES = 1, PATH = 2, BOTH = FRAMES + PATH };$/;"	e	enum:cv::viz::WTrajectory::__anon74
FRIEND_TEST	ts/ts_gtest.h	17103;"	d
FReopen	ts/ts_gtest.h	/^inline FILE *FReopen(const char* path, const char* mode, FILE* stream) {$/;"	f	namespace:std::tr1::posix
FULL_UV	core.hpp	/^        FULL_UV  = 4$/;"	e	enum:cv::SVD::Flags
Failed	ts/ts_gtest.h	/^  bool Failed() const { return failed_test_count() > 0; }$/;"	f	class:testing::TestCase
FailureCode	ts.hpp	/^    enum FailureCode$/;"	g	class:cvtest::TS
False	flann/dist.h	/^class False$/;"	c	namespace:cvflann
False	flann/dist.h	85;"	d
FarnebackOpticalFlow	cudaoptflow.hpp	/^class CV_EXPORTS FarnebackOpticalFlow : public DenseOpticalFlow$/;"	c	namespace:cv::cuda
FarnebackOpticalFlow	superres/optical_flow.hpp	/^        class CV_EXPORTS FarnebackOpticalFlow : public virtual DenseOpticalFlowExt$/;"	c	namespace:cv::superres
FastFeatureDetector	cudafeatures2d.hpp	/^class CV_EXPORTS FastFeatureDetector : public cv::FastFeatureDetector, public Feature2DAsync$/;"	c	namespace:cv::cuda
FastFeatureDetector	features2d.hpp	/^class CV_EXPORTS_W FastFeatureDetector : public Feature2D$/;"	c	namespace:cv
FastMarchingMethod	videostab/fast_marching.hpp	/^    FastMarchingMethod() : inf_(1e6f) {}$/;"	f	class:cv::videostab::FastMarchingMethod
FastMarchingMethod	videostab/fast_marching.hpp	/^class CV_EXPORTS FastMarchingMethod$/;"	c	namespace:cv::videostab
FastOpticalFlowBM	cudalegacy.hpp	/^class CV_EXPORTS FastOpticalFlowBM$/;"	c	namespace:cv::cuda
FeatherBlender	stitching/detail/blenders.hpp	/^class CV_EXPORTS FeatherBlender : public Blender$/;"	c	namespace:cv::detail
FeatherBlender	stitching/detail/blenders.hpp	/^inline FeatherBlender::FeatherBlender(float _sharpness) { setSharpness(_sharpness); }$/;"	f	class:cv::detail::FeatherBlender
Feature2D	features2d.hpp	/^class CV_EXPORTS_W Feature2D : public virtual Algorithm$/;"	c	namespace:cv
Feature2DAsync	cudafeatures2d.hpp	/^class CV_EXPORTS Feature2DAsync$/;"	c	namespace:cv::cuda
FeatureDetector	features2d.hpp	/^typedef Feature2D FeatureDetector;$/;"	t	namespace:cv
FeatureIndex	flann/lsh_table.h	/^typedef uint32_t FeatureIndex;$/;"	t	namespace:cvflann::lsh
FeatureSet	core/cuda.hpp	/^enum FeatureSet$/;"	g	namespace:cv::cuda
FeaturesFinder	stitching/detail/matchers.hpp	/^class CV_EXPORTS FeaturesFinder$/;"	c	namespace:cv::detail
FeaturesMatcher	stitching/detail/matchers.hpp	/^    FeaturesMatcher(bool is_thread_safe = false) : is_thread_safe_(is_thread_safe) {}$/;"	f	class:cv::detail::FeaturesMatcher
FeaturesMatcher	stitching/detail/matchers.hpp	/^class CV_EXPORTS FeaturesMatcher$/;"	c	namespace:cv::detail
FileNo	ts/ts_gtest.h	/^inline int FileNo(FILE* file) { return _fileno(file); }$/;"	f	namespace:std::tr1::posix
FileNo	ts/ts_gtest.h	/^inline int FileNo(FILE* file) { return reinterpret_cast<int>(_fileno(file)); }$/;"	f	namespace:std::tr1::posix
FileNode	core/cvstd.hpp	/^class CV_EXPORTS FileNode; \/\/for string constructor from FileNode$/;"	m	namespace:cv	typeref:class:cv::CV_EXPORTS
FileNode	core/persistence.hpp	/^class CV_EXPORTS FileNode;$/;"	m	namespace:cv	typeref:class:cv::CV_EXPORTS
FileNode	core/persistence.hpp	/^class CV_EXPORTS_W_SIMPLE FileNode$/;"	c	namespace:cv
FileNode	core/persistence.hpp	/^inline FileNode::FileNode() : fs(0), node(0) {}$/;"	f	class:cv::FileNode
FileNode	core/persistence.hpp	/^inline FileNode::FileNode(const CvFileStorage* _fs, const CvFileNode* _node) : fs(_fs), node(_node) {}$/;"	f	class:cv::FileNode
FileNode	core/persistence.hpp	/^inline FileNode::FileNode(const FileNode& _node) : fs(_node.fs), node(_node.node) {}$/;"	f	class:cv::FileNode
FileNodeIterator	core/persistence.hpp	/^class CV_EXPORTS FileNodeIterator$/;"	c	namespace:cv
FileNodeIterator	core/persistence.hpp	/^class CV_EXPORTS FileNodeIterator;$/;"	m	namespace:cv	typeref:class:cv::CV_EXPORTS
FilePath	ts/ts_gtest.h	/^  FilePath() : pathname_("") { }$/;"	f	class:testing::internal::FilePath
FilePath	ts/ts_gtest.h	/^  FilePath(const FilePath& rhs) : pathname_(rhs.pathname_) { }$/;"	f	class:testing::internal::FilePath
FilePath	ts/ts_gtest.h	/^  explicit FilePath(const std::string& pathname) : pathname_(pathname) {$/;"	f	class:testing::internal::FilePath
FilePath	ts/ts_gtest.h	/^class GTEST_API_ FilePath {$/;"	c	namespace:testing::internal
FileStorage	core/persistence.hpp	/^class CV_EXPORTS_W FileStorage$/;"	c	namespace:cv
Filter	cudafilters.hpp	/^class CV_EXPORTS Filter : public Algorithm$/;"	c	namespace:cv::cuda
FindMaxValExprBody	cudev/expr/reduction.hpp	/^template <class SrcPtr> struct FindMaxValExprBody$/;"	s	namespace:cv::cudev
FindMinMaxValExprBody	cudev/expr/reduction.hpp	/^template <class SrcPtr> struct FindMinMaxValExprBody$/;"	s	namespace:cv::cudev
FindMinValExprBody	cudev/expr/reduction.hpp	/^template <class SrcPtr> struct FindMinValExprBody$/;"	s	namespace:cv::cudev
FisheyeProjector	stitching/detail/warpers.hpp	/^struct CV_EXPORTS FisheyeProjector : ProjectorBase$/;"	s	namespace:cv::detail
FisheyeWarper	stitching/detail/warpers.hpp	/^    FisheyeWarper(float scale) { projector_.scale = scale; }$/;"	f	class:cv::detail::FisheyeWarper
FisheyeWarper	stitching/detail/warpers.hpp	/^class CV_EXPORTS FisheyeWarper : public RotationWarperBase<FisheyeProjector>$/;"	c	namespace:cv::detail
FisheyeWarper	stitching/warpers.hpp	/^class FisheyeWarper : public WarperCreator$/;"	c	namespace:cv
Flags	core.hpp	/^    enum Flags { DATA_AS_ROW = 0, \/\/!< indicates that the input samples are stored as matrix rows$/;"	g	class:cv::PCA
Flags	core.hpp	/^    enum Flags {$/;"	g	class:cv::SVD
Flags	ml.hpp	/^    enum Flags { PREDICT_AUTO=0, PREDICT_SUM=(1<<8), PREDICT_MAX_VOTE=(2<<8), PREDICT_MASK=(3<<8) };$/;"	g	class:cv::ml::DTrees
Flags	ml.hpp	/^    enum Flags {$/;"	g	class:cv::ml::StatModel
FlannBasedMatcher	features2d.hpp	/^class CV_EXPORTS_W FlannBasedMatcher : public DescriptorMatcher$/;"	c	namespace:cv
Float	ts/ts_gtest.h	/^typedef FloatingPoint<float> Float;$/;"	t	namespace:testing::internal
FloatType	cudev/functional/functional.hpp	/^    template <typename T> struct FloatType$/;"	s	namespace:cv::cudev::functional_detail
FloatingPoint	ts/ts_gtest.h	/^  explicit FloatingPoint(const RawType& x) { u_.value_ = x; }$/;"	f	class:testing::internal::FloatingPoint
FloatingPoint	ts/ts_gtest.h	/^class FloatingPoint {$/;"	c	namespace:testing::internal
FloatingPointUnion	ts/ts_gtest.h	/^  union FloatingPointUnion {$/;"	u	class:testing::internal::FloatingPoint
FloodFillFlags	imgproc.hpp	/^enum FloodFillFlags {$/;"	g	namespace:cv
FlushInfoLog	ts/ts_gtest.h	/^inline void FlushInfoLog() { fflush(NULL); }$/;"	f	namespace:std::tr1
For	core/cuda/detail/reduce.hpp	/^        struct For$/;"	s	namespace:cv::cuda::device::reduce_detail
For	core/cuda/detail/reduce.hpp	/^        struct For<N, N>$/;"	s	namespace:cv::cuda::device::reduce_detail
For	core/cuda/detail/reduce_key_val.hpp	/^        struct For$/;"	s	namespace:cv::cuda::device::reduce_key_val_detail
For	core/cuda/detail/reduce_key_val.hpp	/^        struct For<N, N>$/;"	s	namespace:cv::cuda::device::reduce_key_val_detail
For	cudev/block/detail/reduce.hpp	/^    template <int I, int N> struct For$/;"	s	namespace:cv::cudev::block_reduce_detail
For	cudev/block/detail/reduce.hpp	/^    template <int N> struct For<N, N>$/;"	s	namespace:cv::cudev::block_reduce_detail
For	cudev/block/detail/reduce_key_val.hpp	/^    template <int I, int N> struct For$/;"	s	namespace:cv::cudev::block_reduce_key_val_detail
For	cudev/block/detail/reduce_key_val.hpp	/^    template <int N> struct For<N, N>$/;"	s	namespace:cv::cudev::block_reduce_key_val_detail
For	cudev/warp/detail/reduce.hpp	/^    template <int I, int N> struct For$/;"	s	namespace:cv::cudev::warp_reduce_detail
For	cudev/warp/detail/reduce.hpp	/^    template <int N> struct For<N, N>$/;"	s	namespace:cv::cudev::warp_reduce_detail
For	cudev/warp/detail/reduce_key_val.hpp	/^    template <int I, int N> struct For$/;"	s	namespace:cv::cudev::warp_reduce_key_val_detail
For	cudev/warp/detail/reduce_key_val.hpp	/^    template <int N> struct For<N, N>$/;"	s	namespace:cv::cudev::warp_reduce_key_val_detail
ForceGlob	core/cuda/datamov_utils.hpp	/^        template <typename T> struct ForceGlob$/;"	s	namespace:cv::cuda::device
ForceIDR	cudacodec.hpp	/^    int ForceIDR;        \/\/!< NVVE_FORCE_IDR,$/;"	m	struct:cv::cudacodec::EncoderParams
ForceIntra	cudacodec.hpp	/^    int ForceIntra;      \/\/!< NVVE_FORCE_INTRA,$/;"	m	struct:cv::cudacodec::EncoderParams
Format	core/opengl.hpp	/^    enum Format$/;"	g	class:cv::ogl::Texture2D
Format	ts/ts_gtest.h	/^  static ::std::string Format(const ToPrint& value) {$/;"	f	class:testing::internal::FormatForComparison
Format	ts/ts_gtest.h	/^  static ::std::string Format(const ToPrint* value) {$/;"	f	class:testing::internal::FormatForComparison
FormatForComparison	ts/ts_gtest.h	/^class FormatForComparison {$/;"	c	namespace:testing::internal
FormatForComparison	ts/ts_gtest.h	/^class FormatForComparison<ToPrint[N], OtherOperand> {$/;"	c	namespace:testing::internal
FormatForComparisonFailureMessage	ts/ts_gtest.h	/^std::string FormatForComparisonFailureMessage($/;"	f	namespace:testing::internal
FormatInfo	cudacodec.hpp	/^struct FormatInfo$/;"	s	namespace:cv::cudacodec
Formatted	core.hpp	/^class CV_EXPORTS Formatted$/;"	c	namespace:cv
Formatter	core.hpp	/^class CV_EXPORTS Formatter$/;"	c	namespace:cv
FrameSource	superres.hpp	/^        class CV_EXPORTS FrameSource$/;"	c	namespace:cv::superres
FromFileMotionReader	videostab/global_motion.hpp	/^class CV_EXPORTS FromFileMotionReader : public ImageMotionEstimatorBase$/;"	c	namespace:cv::videostab
FullMatch	ts/ts_gtest.h	/^  static bool FullMatch(const ::std::string& str, const RE& re) {$/;"	f	class:std::tr1::RE
FullMatch	ts/ts_gtest.h	/^  static bool FullMatch(const ::string& str, const RE& re) {$/;"	f	class:std::tr1::RE
Function	core/optim.hpp	/^    class CV_EXPORTS Function$/;"	c	class:cv::MinProblemSolver
G2Y	core/cuda/detail/color_detail.hpp	/^            G2Y        = 9617,$/;"	e	enum:cv::cuda::device::color_detail::__anon240
G2Y	cudev/functional/detail/color_cvt.hpp	/^        G2Y        = 9617,$/;"	e	enum:cv::cudev::color_cvt_detail::__anon396
GAIN	stitching/detail/exposure_compensate.hpp	/^    enum { NO, GAIN, GAIN_BLOCKS };$/;"	e	enum:cv::detail::ExposureCompensator::__anon418
GAIN_BLOCKS	stitching/detail/exposure_compensate.hpp	/^    enum { NO, GAIN, GAIN_BLOCKS };$/;"	e	enum:cv::detail::ExposureCompensator::__anon418
GAMMA	ml.hpp	/^        GAMMA=1,$/;"	e	enum:cv::ml::SVM::ParamTypes
GAMMA_TAB_SIZE	core/cuda/detail/color_detail.hpp	/^            GAMMA_TAB_SIZE = 1024,$/;"	e	enum:cv::cuda::device::color_detail::__anon241
GAMMA_TAB_SIZE	cudev/functional/detail/color_cvt.hpp	/^        GAMMA_TAB_SIZE = 1024,$/;"	e	enum:cv::cudev::color_cvt_detail::__anon397
GAUSSIAN	ml.hpp	/^        GAUSSIAN = 2$/;"	e	enum:cv::ml::ANN_MLP::ActivationFunctions
GC_BGD	imgproc.hpp	/^    GC_BGD    = 0,  \/\/!< an obvious background pixels$/;"	e	enum:cv::GrabCutClasses
GC_EVAL	imgproc.hpp	/^    GC_EVAL            = 2$/;"	e	enum:cv::GrabCutModes
GC_FGD	imgproc.hpp	/^    GC_FGD    = 1,  \/\/!< an obvious foreground (object) pixel$/;"	e	enum:cv::GrabCutClasses
GC_INIT_WITH_MASK	imgproc.hpp	/^    GC_INIT_WITH_MASK  = 1,$/;"	e	enum:cv::GrabCutModes
GC_INIT_WITH_RECT	imgproc.hpp	/^    GC_INIT_WITH_RECT  = 0,$/;"	e	enum:cv::GrabCutModes
GC_PR_BGD	imgproc.hpp	/^    GC_PR_BGD = 2,  \/\/!< a possible background pixel$/;"	e	enum:cv::GrabCutClasses
GC_PR_FGD	imgproc.hpp	/^    GC_PR_FGD = 3   \/\/!< a possible foreground pixel$/;"	e	enum:cv::GrabCutClasses
GEMM_1_T	core/base.hpp	/^enum GemmFlags { GEMM_1_T = 1, \/\/!< transposes src1$/;"	e	enum:cv::GemmFlags
GEMM_2_T	core/base.hpp	/^                 GEMM_2_T = 2, \/\/!< transposes src2$/;"	e	enum:cv::GemmFlags
GEMM_3_T	core/base.hpp	/^                 GEMM_3_T = 4 \/\/!< transposes src3$/;"	e	enum:cv::GemmFlags
GENTLE	ml.hpp	/^        GENTLE=3 \/\/!< Gentle AdaBoost. It puts less weight on outlier data points and for that$/;"	e	enum:cv::ml::Boost::Types
GET_PARAM	ts/cuda_perf.hpp	68;"	d
GET_PARAM	ts/cuda_test.hpp	212;"	d
GET_PARAM	ts/ocl_test.hpp	329;"	d
GFTTDetector	features2d.hpp	/^class CV_EXPORTS_W GFTTDetector : public Feature2D$/;"	c	namespace:cv
GLOBAL_ATOMICS	core/cuda.hpp	/^    GLOBAL_ATOMICS = FEATURE_SET_COMPUTE_11,$/;"	e	enum:cv::cuda::FeatureSet
GTEST_0_TUPLE_	ts/ts_gtest.h	1671;"	d
GTEST_0_TUPLE_	ts/ts_gtest.h	745;"	d
GTEST_0_TYPENAMES_	ts/ts_gtest.h	1683;"	d
GTEST_0_TYPENAMES_	ts/ts_gtest.h	768;"	d
GTEST_10_TUPLE_	ts/ts_gtest.h	1681;"	d
GTEST_10_TUPLE_	ts/ts_gtest.h	764;"	d
GTEST_10_TYPENAMES_	ts/ts_gtest.h	1693;"	d
GTEST_10_TYPENAMES_	ts/ts_gtest.h	785;"	d
GTEST_1_TUPLE_	ts/ts_gtest.h	/^class GTEST_1_TUPLE_(T) {$/;"	f	namespace:std::tr1
GTEST_1_TUPLE_	ts/ts_gtest.h	1672;"	d
GTEST_1_TUPLE_	ts/ts_gtest.h	746;"	d
GTEST_1_TYPENAMES_	ts/ts_gtest.h	1684;"	d
GTEST_1_TYPENAMES_	ts/ts_gtest.h	769;"	d
GTEST_2_TUPLE_	ts/ts_gtest.h	/^class GTEST_2_TUPLE_(T) {$/;"	f	namespace:std::tr1
GTEST_2_TUPLE_	ts/ts_gtest.h	1673;"	d
GTEST_2_TUPLE_	ts/ts_gtest.h	748;"	d
GTEST_2_TYPENAMES_	ts/ts_gtest.h	1685;"	d
GTEST_2_TYPENAMES_	ts/ts_gtest.h	770;"	d
GTEST_3_TUPLE_	ts/ts_gtest.h	/^class GTEST_3_TUPLE_(T) {$/;"	f	namespace:std::tr1
GTEST_3_TUPLE_	ts/ts_gtest.h	1674;"	d
GTEST_3_TUPLE_	ts/ts_gtest.h	750;"	d
GTEST_3_TYPENAMES_	ts/ts_gtest.h	1686;"	d
GTEST_3_TYPENAMES_	ts/ts_gtest.h	771;"	d
GTEST_4_TUPLE_	ts/ts_gtest.h	/^class GTEST_4_TUPLE_(T) {$/;"	f	namespace:std::tr1
GTEST_4_TUPLE_	ts/ts_gtest.h	1675;"	d
GTEST_4_TUPLE_	ts/ts_gtest.h	752;"	d
GTEST_4_TYPENAMES_	ts/ts_gtest.h	1687;"	d
GTEST_4_TYPENAMES_	ts/ts_gtest.h	772;"	d
GTEST_5_TUPLE_	ts/ts_gtest.h	/^class GTEST_5_TUPLE_(T) {$/;"	f	namespace:std::tr1
GTEST_5_TUPLE_	ts/ts_gtest.h	1676;"	d
GTEST_5_TUPLE_	ts/ts_gtest.h	754;"	d
GTEST_5_TYPENAMES_	ts/ts_gtest.h	1688;"	d
GTEST_5_TYPENAMES_	ts/ts_gtest.h	774;"	d
GTEST_6_TUPLE_	ts/ts_gtest.h	/^class GTEST_6_TUPLE_(T) {$/;"	f	namespace:std::tr1
GTEST_6_TUPLE_	ts/ts_gtest.h	1677;"	d
GTEST_6_TUPLE_	ts/ts_gtest.h	756;"	d
GTEST_6_TYPENAMES_	ts/ts_gtest.h	1689;"	d
GTEST_6_TYPENAMES_	ts/ts_gtest.h	776;"	d
GTEST_7_TUPLE_	ts/ts_gtest.h	/^class GTEST_7_TUPLE_(T) {$/;"	f	namespace:std::tr1
GTEST_7_TUPLE_	ts/ts_gtest.h	1678;"	d
GTEST_7_TUPLE_	ts/ts_gtest.h	758;"	d
GTEST_7_TYPENAMES_	ts/ts_gtest.h	1690;"	d
GTEST_7_TYPENAMES_	ts/ts_gtest.h	778;"	d
GTEST_8_TUPLE_	ts/ts_gtest.h	/^class GTEST_8_TUPLE_(T) {$/;"	f	namespace:std::tr1
GTEST_8_TUPLE_	ts/ts_gtest.h	1679;"	d
GTEST_8_TUPLE_	ts/ts_gtest.h	760;"	d
GTEST_8_TYPENAMES_	ts/ts_gtest.h	1691;"	d
GTEST_8_TYPENAMES_	ts/ts_gtest.h	780;"	d
GTEST_9_TUPLE_	ts/ts_gtest.h	/^class GTEST_9_TUPLE_(T) {$/;"	f	namespace:std::tr1
GTEST_9_TUPLE_	ts/ts_gtest.h	1680;"	d
GTEST_9_TUPLE_	ts/ts_gtest.h	762;"	d
GTEST_9_TYPENAMES_	ts/ts_gtest.h	1692;"	d
GTEST_9_TYPENAMES_	ts/ts_gtest.h	782;"	d
GTEST_ADD_REFERENCE_	ts/ts_gtest.h	7781;"	d
GTEST_ADD_REF_	ts/ts_gtest.h	1697;"	d
GTEST_ADD_REF_	ts/ts_gtest.h	822;"	d
GTEST_AMBIGUOUS_ELSE_BLOCKER_	ts/ts_gtest.h	1855;"	d
GTEST_API_	ts/ts_gtest.h	1918;"	d
GTEST_API_	ts/ts_gtest.h	1926;"	d
GTEST_ASSERT_	ts/ts_gtest.h	19480;"	d
GTEST_ASSERT_EQ	ts/ts_gtest.h	19826;"	d
GTEST_ASSERT_GE	ts/ts_gtest.h	19836;"	d
GTEST_ASSERT_GT	ts/ts_gtest.h	19838;"	d
GTEST_ASSERT_LE	ts/ts_gtest.h	19832;"	d
GTEST_ASSERT_LT	ts/ts_gtest.h	19834;"	d
GTEST_ASSERT_NE	ts/ts_gtest.h	19830;"	d
GTEST_ATTRIBUTE_UNUSED_	ts/ts_gtest.h	/^  } GTEST_ATTRIBUTE_UNUSED_;$/;"	m	class:testing::internal::DeathTest	typeref:class:testing::internal::DeathTest::ReturnSentinel
GTEST_ATTRIBUTE_UNUSED_	ts/ts_gtest.h	/^} GTEST_ATTRIBUTE_UNUSED_;  \/\/ A ScopedTrace object does its job in its$/;"	m	namespace:testing::internal	typeref:class:testing::internal::ScopedTrace
GTEST_ATTRIBUTE_UNUSED_	ts/ts_gtest.h	1872;"	d
GTEST_BIND_	ts/ts_gtest.h	5383;"	d
GTEST_BY_REF_	ts/ts_gtest.h	1696;"	d
GTEST_BY_REF_	ts/ts_gtest.h	812;"	d
GTEST_CAN_COMPARE_NULL	ts/ts_gtest.h	2757;"	d
GTEST_CAN_STREAM_RESULTS_	ts/ts_gtest.h	1839;"	d
GTEST_CASE_NAMESPACE_	ts/ts_gtest.h	17480;"	d
GTEST_CHECK_	ts/ts_gtest.h	2218;"	d
GTEST_CHECK_POSIX_SUCCESS_	ts/ts_gtest.h	2230;"	d
GTEST_COMPILE_ASSERT_	ts/ts_gtest.h	1973;"	d
GTEST_CONCAT_TOKEN_	ts/ts_gtest.h	7084;"	d
GTEST_CONCAT_TOKEN_IMPL_	ts/ts_gtest.h	7085;"	d
GTEST_DEATH_TEST_	ts/ts_gtest.h	8403;"	d
GTEST_DECLARE_STATIC_MUTEX_	ts/ts_gtest.h	2538;"	d
GTEST_DECLARE_STATIC_MUTEX_	ts/ts_gtest.h	2711;"	d
GTEST_DECLARE_TUPLE_AS_FRIEND_	ts/ts_gtest.h	1695;"	d
GTEST_DECLARE_TUPLE_AS_FRIEND_	ts/ts_gtest.h	737;"	d
GTEST_DECLARE_TUPLE_AS_FRIEND_	ts/ts_gtest.h	739;"	d
GTEST_DECLARE_bool_	ts/ts_gtest.h	3070;"	d
GTEST_DECLARE_int32_	ts/ts_gtest.h	3071;"	d
GTEST_DECLARE_string_	ts/ts_gtest.h	3073;"	d
GTEST_DEFINE_STATIC_MUTEX_	ts/ts_gtest.h	2547;"	d
GTEST_DEFINE_STATIC_MUTEX_	ts/ts_gtest.h	2714;"	d
GTEST_DEFINE_bool_	ts/ts_gtest.h	3077;"	d
GTEST_DEFINE_int32_	ts/ts_gtest.h	3079;"	d
GTEST_DEFINE_string_	ts/ts_gtest.h	3081;"	d
GTEST_DEV_EMAIL_	ts/ts_gtest.h	311;"	d
GTEST_DISALLOW_ASSIGN_	ts/ts_gtest.h	1879;"	d
GTEST_DISALLOW_COPY_AND_ASSIGN_	ts/ts_gtest.h	1884;"	d
GTEST_DONT_DEFINE_ASSERT_EQ	ts.hpp	20;"	d
GTEST_DONT_DEFINE_ASSERT_GE	ts.hpp	24;"	d
GTEST_DONT_DEFINE_ASSERT_GT	ts.hpp	25;"	d
GTEST_DONT_DEFINE_ASSERT_LE	ts.hpp	22;"	d
GTEST_DONT_DEFINE_ASSERT_LT	ts.hpp	23;"	d
GTEST_DONT_DEFINE_ASSERT_NE	ts.hpp	21;"	d
GTEST_DONT_DEFINE_FAIL	ts.hpp	18;"	d
GTEST_DONT_DEFINE_SUCCEED	ts.hpp	19;"	d
GTEST_DONT_DEFINE_TEST	ts.hpp	26;"	d
GTEST_ELLIPSIS_NEEDS_POD_	ts/ts_gtest.h	2755;"	d
GTEST_ENV_HAS_STD_TUPLE_	ts/ts_gtest.h	668;"	d
GTEST_ENV_HAS_STD_TUPLE_	ts/ts_gtest.h	670;"	d
GTEST_ENV_HAS_TR1_TUPLE_	ts/ts_gtest.h	659;"	d
GTEST_ENV_HAS_TR1_TUPLE_	ts/ts_gtest.h	661;"	d
GTEST_ERROR	ts/ts_gtest.h	/^  GTEST_ERROR,$/;"	e	enum:std::tr1::GTestLogSeverity
GTEST_EXCLUSIVE_LOCK_REQUIRED_	ts/ts_gtest.h	3085;"	d
GTEST_EXECUTE_DEATH_TEST_STATEMENT_	ts/ts_gtest.h	8379;"	d
GTEST_EXECUTE_DEATH_TEST_STATEMENT_	ts/ts_gtest.h	8396;"	d
GTEST_EXECUTE_STATEMENT_	ts/ts_gtest.h	8442;"	d
GTEST_FAIL	ts/ts_gtest.h	19349;"	d
GTEST_FATAL	ts/ts_gtest.h	/^  GTEST_FATAL$/;"	e	enum:std::tr1::GTestLogSeverity
GTEST_FATAL_FAILURE_	ts/ts_gtest.h	8052;"	d
GTEST_FLAG	ts/ts_gtest.h	3067;"	d
GTEST_FLAG_PREFIX_	ts/ts_gtest.h	312;"	d
GTEST_FLAG_PREFIX_DASH_	ts/ts_gtest.h	313;"	d
GTEST_FLAG_PREFIX_UPPER_	ts/ts_gtest.h	314;"	d
GTEST_GCC_VER_	ts/ts_gtest.h	321;"	d
GTEST_HAS_ALT_PATH_SEP_	ts/ts_gtest.h	2801;"	d
GTEST_HAS_ALT_PATH_SEP_	ts/ts_gtest.h	2806;"	d
GTEST_HAS_CLONE	ts/ts_gtest.h	1770;"	d
GTEST_HAS_COMBINE	ts/ts_gtest.h	1830;"	d
GTEST_HAS_CXXABI_H_	ts/ts_gtest.h	1938;"	d
GTEST_HAS_DEATH_TEST	ts/ts_gtest.h	1804;"	d
GTEST_HAS_EXCEPTIONS	ts/ts_gtest.h	484;"	d
GTEST_HAS_EXCEPTIONS	ts/ts_gtest.h	487;"	d
GTEST_HAS_EXCEPTIONS	ts/ts_gtest.h	492;"	d
GTEST_HAS_EXCEPTIONS	ts/ts_gtest.h	495;"	d
GTEST_HAS_EXCEPTIONS	ts/ts_gtest.h	499;"	d
GTEST_HAS_EXCEPTIONS	ts/ts_gtest.h	503;"	d
GTEST_HAS_GLOBAL_STRING	ts/ts_gtest.h	520;"	d
GTEST_HAS_GLOBAL_WSTRING	ts/ts_gtest.h	541;"	d
GTEST_HAS_PARAM_TEST	ts/ts_gtest.h	1813;"	d
GTEST_HAS_POSIX_RE	ts/ts_gtest.h	441;"	d
GTEST_HAS_POSIX_RE	ts/ts_gtest.h	443;"	d
GTEST_HAS_PTHREAD	ts/ts_gtest.h	615;"	d
GTEST_HAS_RTTI	ts/ts_gtest.h	553;"	d
GTEST_HAS_RTTI	ts/ts_gtest.h	555;"	d
GTEST_HAS_RTTI	ts/ts_gtest.h	568;"	d
GTEST_HAS_RTTI	ts/ts_gtest.h	570;"	d
GTEST_HAS_RTTI	ts/ts_gtest.h	573;"	d
GTEST_HAS_RTTI	ts/ts_gtest.h	581;"	d
GTEST_HAS_RTTI	ts/ts_gtest.h	588;"	d
GTEST_HAS_RTTI	ts/ts_gtest.h	590;"	d
GTEST_HAS_RTTI	ts/ts_gtest.h	596;"	d
GTEST_HAS_SEH	ts/ts_gtest.h	1907;"	d
GTEST_HAS_STD_STRING	ts/ts_gtest.h	510;"	d
GTEST_HAS_STD_WSTRING	ts/ts_gtest.h	533;"	d
GTEST_HAS_STREAM_REDIRECTION	ts/ts_gtest.h	1789;"	d
GTEST_HAS_TR1_TUPLE	ts/ts_gtest.h	634;"	d
GTEST_HAS_TR1_TUPLE	ts/ts_gtest.h	637;"	d
GTEST_HAS_TR1_TUPLE	ts/ts_gtest.h	677;"	d
GTEST_HAS_TR1_TUPLE	ts/ts_gtest.h	678;"	d
GTEST_HAS_TYPED_TEST	ts/ts_gtest.h	1821;"	d
GTEST_HAS_TYPED_TEST_P	ts/ts_gtest.h	1822;"	d
GTEST_IMPL_CMP_HELPER_	ts/ts_gtest.h	19035;"	d
GTEST_IMPL_CMP_HELPER_	ts/ts_gtest.h	19064;"	d
GTEST_IMPL_FORMAT_C_STRING_AS_POINTER_	ts/ts_gtest.h	18851;"	d
GTEST_IMPL_FORMAT_C_STRING_AS_POINTER_	ts/ts_gtest.h	18865;"	d
GTEST_IMPL_FORMAT_C_STRING_AS_STRING_	ts/ts_gtest.h	18870;"	d
GTEST_IMPL_FORMAT_C_STRING_AS_STRING_	ts/ts_gtest.h	18897;"	d
GTEST_INCLUDE_GTEST_GTEST_DEATH_TEST_H_	ts/ts_gtest.h	8218;"	d
GTEST_INCLUDE_GTEST_GTEST_H_	ts/ts_gtest.h	52;"	d
GTEST_INCLUDE_GTEST_GTEST_MESSAGE_H_	ts/ts_gtest.h	3171;"	d
GTEST_INCLUDE_GTEST_GTEST_PARAM_TEST_H_	ts/ts_gtest.h	8832;"	d
GTEST_INCLUDE_GTEST_GTEST_PRED_IMPL_H_	ts/ts_gtest.h	19441;"	d
GTEST_INCLUDE_GTEST_GTEST_PRINTERS_H_	ts/ts_gtest.h	9350;"	d
GTEST_INCLUDE_GTEST_GTEST_PROD_H_	ts/ts_gtest.h	17083;"	d
GTEST_INCLUDE_GTEST_GTEST_TEST_PART_H_	ts/ts_gtest.h	17140;"	d
GTEST_INCLUDE_GTEST_GTEST_TYPED_TEST_H_	ts/ts_gtest.h	17316;"	d
GTEST_INCLUDE_GTEST_INTERNAL_GTEST_DEATH_TEST_INTERNAL_H_	ts/ts_gtest.h	8257;"	d
GTEST_INCLUDE_GTEST_INTERNAL_GTEST_FILEPATH_H_	ts/ts_gtest.h	3580;"	d
GTEST_INCLUDE_GTEST_INTERNAL_GTEST_INTERNAL_H_	ts/ts_gtest.h	95;"	d
GTEST_INCLUDE_GTEST_INTERNAL_GTEST_LINKED_PTR_H_	ts/ts_gtest.h	9091;"	d
GTEST_INCLUDE_GTEST_INTERNAL_GTEST_PARAM_UTIL_GENERATED_H_	ts/ts_gtest.h	10726;"	d
GTEST_INCLUDE_GTEST_INTERNAL_GTEST_PARAM_UTIL_H_	ts/ts_gtest.h	9014;"	d
GTEST_INCLUDE_GTEST_INTERNAL_GTEST_PORT_H_	ts/ts_gtest.h	137;"	d
GTEST_INCLUDE_GTEST_INTERNAL_GTEST_STRING_H_	ts/ts_gtest.h	3415;"	d
GTEST_INCLUDE_GTEST_INTERNAL_GTEST_TUPLE_H_	ts/ts_gtest.h	727;"	d
GTEST_INCLUDE_GTEST_INTERNAL_GTEST_TYPE_UTIL_H_	ts/ts_gtest.h	3789;"	d
GTEST_INFO	ts/ts_gtest.h	/^  GTEST_INFO,$/;"	e	enum:std::tr1::GTestLogSeverity
GTEST_IS_NULL_LITERAL_	ts/ts_gtest.h	7141;"	d
GTEST_IS_NULL_LITERAL_	ts/ts_gtest.h	7143;"	d
GTEST_IS_THREADSAFE	ts/ts_gtest.h	2694;"	d
GTEST_IS_THREADSAFE	ts/ts_gtest.h	2738;"	d
GTEST_LANG_CXX11	ts/ts_gtest.h	412;"	d
GTEST_LANG_CXX11	ts/ts_gtest.h	414;"	d
GTEST_LOCK_EXCLUDED_	ts/ts_gtest.h	/^      GTEST_LOCK_EXCLUDED_(g_linked_ptr_mutex) {$/;"	f	class:testing::internal::linked_ptr_internal
GTEST_LOCK_EXCLUDED_	ts/ts_gtest.h	3086;"	d
GTEST_LOG_	ts/ts_gtest.h	2197;"	d
GTEST_MESSAGE_	ts/ts_gtest.h	8049;"	d
GTEST_MESSAGE_AT_	ts/ts_gtest.h	8045;"	d
GTEST_MUST_USE_RESULT_	ts/ts_gtest.h	/^  int Run() GTEST_MUST_USE_RESULT_;$/;"	m	class:testing::UnitTest
GTEST_MUST_USE_RESULT_	ts/ts_gtest.h	1894;"	d
GTEST_NAME_	ts/ts_gtest.h	315;"	d
GTEST_NEEDS_IS_POINTER_	ts/ts_gtest.h	2765;"	d
GTEST_NONFATAL_FAILURE_	ts/ts_gtest.h	8055;"	d
GTEST_NO_INLINE_	ts/ts_gtest.h	1931;"	d
GTEST_OS_AIX	ts/ts_gtest.h	337;"	d
GTEST_OS_AIX	ts/ts_gtest.h	389;"	d
GTEST_OS_AIX	ts/ts_gtest.h	390;"	d
GTEST_OS_CYGWIN	ts/ts_gtest.h	326;"	d
GTEST_OS_CYGWIN	ts/ts_gtest.h	346;"	d
GTEST_OS_CYGWIN	ts/ts_gtest.h	347;"	d
GTEST_OS_HPUX	ts/ts_gtest.h	338;"	d
GTEST_OS_HPUX	ts/ts_gtest.h	392;"	d
GTEST_OS_HPUX	ts/ts_gtest.h	393;"	d
GTEST_OS_IOS	ts/ts_gtest.h	342;"	d
GTEST_OS_IOS	ts/ts_gtest.h	368;"	d
GTEST_OS_IOS	ts/ts_gtest.h	369;"	d
GTEST_OS_IOS_SIMULATOR	ts/ts_gtest.h	343;"	d
GTEST_OS_IOS_SIMULATOR	ts/ts_gtest.h	371;"	d
GTEST_OS_IOS_SIMULATOR	ts/ts_gtest.h	372;"	d
GTEST_OS_LINUX	ts/ts_gtest.h	333;"	d
GTEST_OS_LINUX	ts/ts_gtest.h	376;"	d
GTEST_OS_LINUX	ts/ts_gtest.h	377;"	d
GTEST_OS_LINUX_ANDROID	ts/ts_gtest.h	334;"	d
GTEST_OS_LINUX_ANDROID	ts/ts_gtest.h	379;"	d
GTEST_OS_LINUX_ANDROID	ts/ts_gtest.h	380;"	d
GTEST_OS_MAC	ts/ts_gtest.h	332;"	d
GTEST_OS_MAC	ts/ts_gtest.h	365;"	d
GTEST_OS_MAC	ts/ts_gtest.h	366;"	d
GTEST_OS_NACL	ts/ts_gtest.h	339;"	d
GTEST_OS_NACL	ts/ts_gtest.h	395;"	d
GTEST_OS_NACL	ts/ts_gtest.h	396;"	d
GTEST_OS_OPENBSD	ts/ts_gtest.h	340;"	d
GTEST_OS_OPENBSD	ts/ts_gtest.h	398;"	d
GTEST_OS_OPENBSD	ts/ts_gtest.h	399;"	d
GTEST_OS_QNX	ts/ts_gtest.h	341;"	d
GTEST_OS_QNX	ts/ts_gtest.h	401;"	d
GTEST_OS_QNX	ts/ts_gtest.h	402;"	d
GTEST_OS_SOLARIS	ts/ts_gtest.h	336;"	d
GTEST_OS_SOLARIS	ts/ts_gtest.h	386;"	d
GTEST_OS_SOLARIS	ts/ts_gtest.h	387;"	d
GTEST_OS_SYMBIAN	ts/ts_gtest.h	327;"	d
GTEST_OS_SYMBIAN	ts/ts_gtest.h	349;"	d
GTEST_OS_SYMBIAN	ts/ts_gtest.h	350;"	d
GTEST_OS_WINDOWS	ts/ts_gtest.h	328;"	d
GTEST_OS_WINDOWS	ts/ts_gtest.h	352;"	d
GTEST_OS_WINDOWS	ts/ts_gtest.h	353;"	d
GTEST_OS_WINDOWS_DESKTOP	ts/ts_gtest.h	331;"	d
GTEST_OS_WINDOWS_DESKTOP	ts/ts_gtest.h	361;"	d
GTEST_OS_WINDOWS_DESKTOP	ts/ts_gtest.h	362;"	d
GTEST_OS_WINDOWS_MINGW	ts/ts_gtest.h	330;"	d
GTEST_OS_WINDOWS_MINGW	ts/ts_gtest.h	358;"	d
GTEST_OS_WINDOWS_MINGW	ts/ts_gtest.h	359;"	d
GTEST_OS_WINDOWS_MOBILE	ts/ts_gtest.h	329;"	d
GTEST_OS_WINDOWS_MOBILE	ts/ts_gtest.h	355;"	d
GTEST_OS_WINDOWS_MOBILE	ts/ts_gtest.h	356;"	d
GTEST_OS_ZOS	ts/ts_gtest.h	335;"	d
GTEST_OS_ZOS	ts/ts_gtest.h	383;"	d
GTEST_OS_ZOS	ts/ts_gtest.h	384;"	d
GTEST_PATH_SEP_	ts/ts_gtest.h	2800;"	d
GTEST_PATH_SEP_	ts/ts_gtest.h	2805;"	d
GTEST_PRED1_	ts/ts_gtest.h	19511;"	d
GTEST_PRED2_	ts/ts_gtest.h	19557;"	d
GTEST_PRED3_	ts/ts_gtest.h	19610;"	d
GTEST_PRED4_	ts/ts_gtest.h	19670;"	d
GTEST_PRED5_	ts/ts_gtest.h	19737;"	d
GTEST_PRED_FORMAT1_	ts/ts_gtest.h	19505;"	d
GTEST_PRED_FORMAT2_	ts/ts_gtest.h	19551;"	d
GTEST_PRED_FORMAT3_	ts/ts_gtest.h	19604;"	d
GTEST_PRED_FORMAT4_	ts/ts_gtest.h	19664;"	d
GTEST_PRED_FORMAT5_	ts/ts_gtest.h	19731;"	d
GTEST_PROJECT_URL_	ts/ts_gtest.h	316;"	d
GTEST_REFERENCE_TO_CONST_	ts/ts_gtest.h	7793;"	d
GTEST_REGISTERED_TEST_NAMES_	ts/ts_gtest.h	17494;"	d
GTEST_REMOVE_CONST_	ts/ts_gtest.h	7764;"	d
GTEST_REMOVE_REFERENCE_	ts/ts_gtest.h	7733;"	d
GTEST_REMOVE_REFERENCE_AND_CONST_	ts/ts_gtest.h	7768;"	d
GTEST_SNPRINTF_	ts/ts_gtest.h	2986;"	d
GTEST_SUCCEED	ts/ts_gtest.h	19358;"	d
GTEST_SUCCESS_	ts/ts_gtest.h	8058;"	d
GTEST_SUPPRESS_UNREACHABLE_CODE_WARNING_BELOW_	ts/ts_gtest.h	8064;"	d
GTEST_TEMPLATE_	ts/ts_gtest.h	5365;"	d
GTEST_TEST	ts/ts_gtest.h	20069;"	d
GTEST_TEST_	ts/ts_gtest.h	8157;"	d
GTEST_TEST_ANY_THROW_	ts/ts_gtest.h	8107;"	d
GTEST_TEST_BOOLEAN_	ts/ts_gtest.h	8129;"	d
GTEST_TEST_CLASS_NAME_	ts/ts_gtest.h	8153;"	d
GTEST_TEST_NO_FATAL_FAILURE_	ts/ts_gtest.h	8138;"	d
GTEST_TEST_NO_THROW_	ts/ts_gtest.h	8093;"	d
GTEST_TEST_THROW_	ts/ts_gtest.h	8067;"	d
GTEST_TUPLE_ELEMENT_	ts/ts_gtest.h	1481;"	d
GTEST_TUPLE_ELEMENT_	ts/ts_gtest.h	1698;"	d
GTEST_TYPED_TEST_CASE_P_STATE_	ts/ts_gtest.h	17487;"	d
GTEST_TYPE_PARAMS_	ts/ts_gtest.h	17441;"	d
GTEST_UNSUPPORTED_DEATH_TEST_	ts/ts_gtest.h	8519;"	d
GTEST_USES_POSIX_RE	ts.hpp	35;"	d
GTEST_USES_POSIX_RE	ts/ts_gtest.h	455;"	d
GTEST_USES_POSIX_RE	ts/ts_gtest.h	463;"	d
GTEST_USES_POSIX_RE	ts/ts_gtest.h	470;"	d
GTEST_USES_SIMPLE_RE	ts.hpp	32;"	d
GTEST_USES_SIMPLE_RE	ts/ts_gtest.h	456;"	d
GTEST_USES_SIMPLE_RE	ts/ts_gtest.h	462;"	d
GTEST_USES_SIMPLE_RE	ts/ts_gtest.h	469;"	d
GTEST_USE_OWN_TR1_TUPLE	ts/ts_gtest.h	674;"	d
GTEST_USE_OWN_TR1_TUPLE	ts/ts_gtest.h	676;"	d
GTEST_WARNING	ts/ts_gtest.h	/^  GTEST_WARNING,$/;"	e	enum:std::tr1::GTestLogSeverity
GTEST_WIDE_STRING_USES_UTF16_	ts/ts_gtest.h	1834;"	d
GTestLog	ts/ts_gtest.h	/^class GTEST_API_ GTestLog {$/;"	c	namespace:std::tr1
GTestLogSeverity	ts/ts_gtest.h	/^enum GTestLogSeverity {$/;"	g	namespace:std::tr1
GTestMutexLock	ts/ts_gtest.h	/^  explicit GTestMutexLock(Mutex*) {}  \/\/ NOLINT$/;"	f	class:std::tr1::GTestMutexLock
GTestMutexLock	ts/ts_gtest.h	/^  explicit GTestMutexLock(MutexBase* mutex)$/;"	f	class:std::tr1::GTestMutexLock
GTestMutexLock	ts/ts_gtest.h	/^class GTestMutexLock {$/;"	c	namespace:std::tr1
GainCompensator	stitching/detail/exposure_compensate.hpp	/^class CV_EXPORTS GainCompensator : public ExposureCompensator$/;"	c	namespace:cv::detail
GaussianMotionFilter	videostab/motion_stabilizing.hpp	/^class CV_EXPORTS GaussianMotionFilter : public MotionFilterBase$/;"	c	namespace:cv::videostab
GaussianMotionFilter	videostab/motion_stabilizing.hpp	/^inline GaussianMotionFilter::GaussianMotionFilter(int _radius, float _stdev) { setParams(_radius, _stdev); }$/;"	f	class:cv::videostab::GaussianMotionFilter
GemmFlags	core/base.hpp	/^enum GemmFlags { GEMM_1_T = 1, \/\/!< transposes src1$/;"	g	namespace:cv
GeneralizedHough	imgproc.hpp	/^class CV_EXPORTS GeneralizedHough : public Algorithm$/;"	c	namespace:cv
GeneralizedHoughBallard	imgproc.hpp	/^class CV_EXPORTS GeneralizedHoughBallard : public GeneralizedHough$/;"	c	namespace:cv
GeneralizedHoughGuil	imgproc.hpp	/^class CV_EXPORTS GeneralizedHoughGuil : public GeneralizedHough$/;"	c	namespace:cv
GeneratorCreationFunc	ts/ts_gtest.h	/^  typedef ParamGenerator<ParamType>(GeneratorCreationFunc)();$/;"	t	class:testing::internal::ParameterizedTestCaseInfo
Generic	core/cuda/detail/reduce.hpp	/^        template <unsigned int N> struct Generic$/;"	s	namespace:cv::cuda::device::reduce_detail
Generic	core/cuda/detail/reduce_key_val.hpp	/^        template <unsigned int N> struct Generic$/;"	s	namespace:cv::cuda::device::reduce_key_val_detail
Generic	cudev/block/detail/reduce.hpp	/^    template <int N> struct Generic$/;"	s	namespace:cv::cudev::block_reduce_detail
Generic	cudev/block/detail/reduce_key_val.hpp	/^    template <int N> struct Generic$/;"	s	namespace:cv::cudev::block_reduce_key_val_detail
GenericIndex	flann.hpp	/^GenericIndex<Distance>::GenericIndex(const Mat& dataset, const ::cvflann::IndexParams& params, Distance distance)$/;"	f	class:cv::flann::GenericIndex
GenericIndex	flann.hpp	/^class GenericIndex$/;"	c	namespace:cv::flann
GenericOptimized32	core/cuda/detail/reduce.hpp	/^        template <unsigned int N> struct GenericOptimized32$/;"	s	namespace:cv::cuda::device::reduce_detail
GenericOptimized32	core/cuda/detail/reduce_key_val.hpp	/^        template <unsigned int N> struct GenericOptimized32$/;"	s	namespace:cv::cuda::device::reduce_key_val_detail
GenericOptimized32	cudev/block/detail/reduce.hpp	/^    template <int N> struct GenericOptimized32$/;"	s	namespace:cv::cudev::block_reduce_detail
GenericOptimized32	cudev/block/detail/reduce_key_val.hpp	/^    template <uint N> struct GenericOptimized32$/;"	s	namespace:cv::cudev::block_reduce_key_val_detail
GetCallsForImpl	ts/ts_perf.hpp	/^    std::vector<cv::String> GetCallsForImpl(int impl)$/;"	f	struct:perf::ImplData
GetEnv	ts/ts_gtest.h	/^inline const char* GetEnv(const char* name) {$/;"	f	namespace:std::tr1::posix
GetImpl	ts/ts_perf.hpp	/^    void GetImpl()$/;"	f	struct:perf::ImplData
GetOrCreateValue	ts/ts_gtest.h	/^  T* GetOrCreateValue() const {$/;"	f	class:std::tr1::ThreadLocal
GetParam	ts/ts_gtest.h	/^  const ParamType& GetParam() const {$/;"	f	class:testing::WithParamInterface
GetPrefixUntilComma	ts/ts_gtest.h	/^inline std::string GetPrefixUntilComma(const char* str) {$/;"	f	namespace:testing::internal
GetStream	ts/ts_gtest.h	/^  ::std::ostream& GetStream() { return ::std::cerr; }$/;"	f	class:std::tr1::GTestLog
GetTestCaseName	ts/ts_gtest.h	/^  virtual const string& GetTestCaseName() const { return test_case_name_; }$/;"	f	class:testing::internal::ParameterizedTestCaseInfo
GetTestCasePatternHolder	ts/ts_gtest.h	/^  ParameterizedTestCaseInfo<TestCase>* GetTestCasePatternHolder($/;"	f	class:testing::internal::ParameterizedTestCaseRegistry
GetTestCaseTypeId	ts/ts_gtest.h	/^  virtual TypeId GetTestCaseTypeId() const { return GetTypeId<TestCase>(); }$/;"	f	class:testing::internal::ParameterizedTestCaseInfo
GetType	core/cuda/detail/reduce.hpp	/^        template <typename T> struct GetType<T&>$/;"	s	namespace:cv::cuda::device::reduce_detail
GetType	core/cuda/detail/reduce.hpp	/^        template <typename T> struct GetType<T*>$/;"	s	namespace:cv::cuda::device::reduce_detail
GetType	core/cuda/detail/reduce.hpp	/^        template <typename T> struct GetType<volatile T*>$/;"	s	namespace:cv::cuda::device::reduce_detail
GetType	core/cuda/detail/reduce_key_val.hpp	/^        template <typename T> struct GetType<T&>$/;"	s	namespace:cv::cuda::device::reduce_key_val_detail
GetType	core/cuda/detail/reduce_key_val.hpp	/^        template <typename T> struct GetType<T*>$/;"	s	namespace:cv::cuda::device::reduce_key_val_detail
GetType	core/cuda/detail/reduce_key_val.hpp	/^        template <typename T> struct GetType<volatile T*>$/;"	s	namespace:cv::cuda::device::reduce_key_val_detail
GetType	cudev/block/detail/reduce.hpp	/^    template <typename T> struct GetType<T&>$/;"	s	namespace:cv::cudev::block_reduce_detail
GetType	cudev/block/detail/reduce.hpp	/^    template <typename T> struct GetType<T*>$/;"	s	namespace:cv::cudev::block_reduce_detail
GetType	cudev/block/detail/reduce.hpp	/^    template <typename T> struct GetType<volatile T*>$/;"	s	namespace:cv::cudev::block_reduce_detail
GetType	cudev/block/detail/reduce_key_val.hpp	/^    template <typename T> struct GetType<T&>$/;"	s	namespace:cv::cudev::block_reduce_key_val_detail
GetType	cudev/block/detail/reduce_key_val.hpp	/^    template <typename T> struct GetType<T*>$/;"	s	namespace:cv::cudev::block_reduce_key_val_detail
GetType	cudev/block/detail/reduce_key_val.hpp	/^    template <typename T> struct GetType<volatile T*>$/;"	s	namespace:cv::cudev::block_reduce_key_val_detail
GetType	cudev/warp/detail/reduce.hpp	/^    template <typename T> struct GetType<T&>$/;"	s	namespace:cv::cudev::warp_reduce_detail
GetType	cudev/warp/detail/reduce.hpp	/^    template <typename T> struct GetType<T*>$/;"	s	namespace:cv::cudev::warp_reduce_detail
GetType	cudev/warp/detail/reduce.hpp	/^    template <typename T> struct GetType<volatile T*>$/;"	s	namespace:cv::cudev::warp_reduce_detail
GetType	cudev/warp/detail/reduce_key_val.hpp	/^    template <typename T> struct GetType<T&>$/;"	s	namespace:cv::cudev::warp_reduce_key_val_detail
GetType	cudev/warp/detail/reduce_key_val.hpp	/^    template <typename T> struct GetType<T*>$/;"	s	namespace:cv::cudev::warp_reduce_key_val_detail
GetType	cudev/warp/detail/reduce_key_val.hpp	/^    template <typename T> struct GetType<volatile T*>$/;"	s	namespace:cv::cudev::warp_reduce_key_val_detail
GetTypeId	ts/ts_gtest.h	/^TypeId GetTypeId() {$/;"	f	namespace:testing::internal
GetTypeName	ts/ts_gtest.h	/^std::string GetTypeName() {$/;"	f	namespace:testing::internal
GlobPtr	cudev/ptr2d/glob.hpp	/^template <typename T> struct GlobPtr$/;"	s	namespace:cv::cudev
GlobPtrSz	cudev/ptr2d/glob.hpp	/^template <typename T> struct GlobPtrSz : GlobPtr<T>$/;"	s	namespace:cv::cudev
GoogleTestFailureException	ts/ts_gtest.h	/^class GTEST_API_ GoogleTestFailureException : public ::std::runtime_error {$/;"	c	namespace:testing::internal
GpuApiCallError	core/base.hpp	/^    GpuApiCallError=           -217,$/;"	e	enum:cv::Error::Code
GpuMat	core/base.hpp	/^    class CV_EXPORTS GpuMat;$/;"	m	namespace:cv::cuda	typeref:class:cv::cuda::CV_EXPORTS
GpuMat	core/cuda.hpp	/^class CV_EXPORTS GpuMat$/;"	c	namespace:cv::cuda
GpuMat	core/cuda.inl.hpp	/^GpuMat::GpuMat(Allocator* allocator_)$/;"	f	class:cv::cuda::GpuMat
GpuMat	core/cuda.inl.hpp	/^GpuMat::GpuMat(InputArray arr, Allocator* allocator_) :$/;"	f	class:cv::cuda::GpuMat
GpuMat	core/cuda.inl.hpp	/^GpuMat::GpuMat(Size size_, int type_, Allocator* allocator_)$/;"	f	class:cv::cuda::GpuMat
GpuMat	core/cuda.inl.hpp	/^GpuMat::GpuMat(Size size_, int type_, Scalar s_, Allocator* allocator_)$/;"	f	class:cv::cuda::GpuMat
GpuMat	core/cuda.inl.hpp	/^GpuMat::GpuMat(const GpuMat& m)$/;"	f	class:cv::cuda::GpuMat
GpuMat	core/cuda.inl.hpp	/^GpuMat::GpuMat(int rows_, int cols_, int type_, Allocator* allocator_)$/;"	f	class:cv::cuda::GpuMat
GpuMat	core/cuda.inl.hpp	/^GpuMat::GpuMat(int rows_, int cols_, int type_, Scalar s_, Allocator* allocator_)$/;"	f	class:cv::cuda::GpuMat
GpuMat_	cudev/ptr2d/detail/gpumat.hpp	/^__host__ GpuMat_<T>::GpuMat_(Allocator* allocator)$/;"	f	class:cv::cudev::GpuMat_
GpuMat_	cudev/ptr2d/detail/gpumat.hpp	/^__host__ GpuMat_<T>::GpuMat_(InputArray arr, Allocator* allocator)$/;"	f	class:cv::cudev::GpuMat_
GpuMat_	cudev/ptr2d/detail/gpumat.hpp	/^__host__ GpuMat_<T>::GpuMat_(Size asize, Allocator* allocator)$/;"	f	class:cv::cudev::GpuMat_
GpuMat_	cudev/ptr2d/detail/gpumat.hpp	/^__host__ GpuMat_<T>::GpuMat_(Size asize, Scalar val, Allocator* allocator)$/;"	f	class:cv::cudev::GpuMat_
GpuMat_	cudev/ptr2d/detail/gpumat.hpp	/^__host__ GpuMat_<T>::GpuMat_(Size asize, T* adata, size_t astep)$/;"	f	class:cv::cudev::GpuMat_
GpuMat_	cudev/ptr2d/detail/gpumat.hpp	/^__host__ GpuMat_<T>::GpuMat_(const Expr<Body>& expr)$/;"	f	class:cv::cudev::GpuMat_
GpuMat_	cudev/ptr2d/detail/gpumat.hpp	/^__host__ GpuMat_<T>::GpuMat_(const GpuMat& m, Allocator* allocator)$/;"	f	class:cv::cudev::GpuMat_
GpuMat_	cudev/ptr2d/detail/gpumat.hpp	/^__host__ GpuMat_<T>::GpuMat_(const GpuMat_& m)$/;"	f	class:cv::cudev::GpuMat_
GpuMat_	cudev/ptr2d/detail/gpumat.hpp	/^__host__ GpuMat_<T>::GpuMat_(const GpuMat_& m, Range arowRange, Range acolRange)$/;"	f	class:cv::cudev::GpuMat_
GpuMat_	cudev/ptr2d/detail/gpumat.hpp	/^__host__ GpuMat_<T>::GpuMat_(const GpuMat_& m, Rect roi)$/;"	f	class:cv::cudev::GpuMat_
GpuMat_	cudev/ptr2d/detail/gpumat.hpp	/^__host__ GpuMat_<T>::GpuMat_(int arows, int acols, Allocator* allocator)$/;"	f	class:cv::cudev::GpuMat_
GpuMat_	cudev/ptr2d/detail/gpumat.hpp	/^__host__ GpuMat_<T>::GpuMat_(int arows, int acols, Scalar val, Allocator* allocator)$/;"	f	class:cv::cudev::GpuMat_
GpuMat_	cudev/ptr2d/detail/gpumat.hpp	/^__host__ GpuMat_<T>::GpuMat_(int arows, int acols, T* adata, size_t astep)$/;"	f	class:cv::cudev::GpuMat_
GpuMat_	cudev/ptr2d/gpumat.hpp	/^class GpuMat_ : public GpuMat$/;"	c	namespace:cv::cudev
GpuNotSupported	core/base.hpp	/^    GpuNotSupported=           -216,$/;"	e	enum:cv::Error::Code
GpuPerf	ts/ts_perf.hpp	/^class CV_EXPORTS GpuPerf$/;"	c	namespace:perf
GrabCutClasses	imgproc.hpp	/^enum GrabCutClasses {$/;"	g	namespace:cv
GrabCutModes	imgproc.hpp	/^enum GrabCutModes {$/;"	g	namespace:cv
Graph	stitching/detail/util.hpp	/^    Graph(int num_vertices = 0) { create(num_vertices); }$/;"	f	class:cv::detail::Graph
Graph	stitching/detail/util.hpp	/^class CV_EXPORTS Graph$/;"	c	namespace:cv::detail
GraphCutSeamFinder	stitching/detail/seam_finders.hpp	/^class CV_EXPORTS GraphCutSeamFinder : public GraphCutSeamFinderBase, public SeamFinder$/;"	c	namespace:cv::detail
GraphCutSeamFinderBase	stitching/detail/seam_finders.hpp	/^class CV_EXPORTS GraphCutSeamFinderBase$/;"	c	namespace:cv::detail
GraphCutSeamFinderGpu	stitching/detail/seam_finders.hpp	/^    GraphCutSeamFinderGpu(int cost_type = COST_COLOR_GRAD, float terminal_cost = 10000.f,$/;"	f	class:cv::detail::GraphCutSeamFinderGpu
GraphCutSeamFinderGpu	stitching/detail/seam_finders.hpp	/^class CV_EXPORTS GraphCutSeamFinderGpu : public GraphCutSeamFinderBase, public PairwiseSeamFinder$/;"	c	namespace:cv::detail
GraphEdge	stitching/detail/util.hpp	/^inline GraphEdge::GraphEdge(int _from, int _to, float _weight) : from(_from), to(_to), weight(_weight) {}$/;"	f	class:cv::detail::GraphEdge
GraphEdge	stitching/detail/util.hpp	/^struct CV_EXPORTS GraphEdge$/;"	s	namespace:cv::detail
Gray	ts/cuda_perf.hpp	/^    enum { Gray = 1, TwoChannel = 2, BGR = 3, BGRA = 4 };$/;"	e	enum:perf::__anon37
Gray2RGB	core/cuda/detail/color_detail.hpp	/^            __host__ __device__ __forceinline__ Gray2RGB() {}$/;"	f	struct:cv::cuda::device::color_detail::Gray2RGB
Gray2RGB	core/cuda/detail/color_detail.hpp	/^            __host__ __device__ __forceinline__ Gray2RGB(const Gray2RGB&) {}$/;"	f	struct:cv::cuda::device::color_detail::Gray2RGB
Gray2RGB	core/cuda/detail/color_detail.hpp	/^        template <> struct Gray2RGB<uchar, 4> : unary_function<uchar, uint>$/;"	s	namespace:cv::cuda::device::color_detail
Gray2RGB	core/cuda/detail/color_detail.hpp	/^        template <typename T, int dcn> struct Gray2RGB : unary_function<T, typename TypeVec<T, dcn>::vec_type>$/;"	s	namespace:cv::cuda::device::color_detail
Gray2RGB	cudev/functional/detail/color_cvt.hpp	/^    template <typename T, int dcn> struct Gray2RGB$/;"	s	namespace:cv::cudev::color_cvt_detail
Gray2RGB5x5	core/cuda/detail/color_detail.hpp	/^            __host__ __device__ __forceinline__ Gray2RGB5x5() {}$/;"	f	struct:cv::cuda::device::color_detail::Gray2RGB5x5
Gray2RGB5x5	core/cuda/detail/color_detail.hpp	/^            __host__ __device__ __forceinline__ Gray2RGB5x5(const Gray2RGB5x5&) {}$/;"	f	struct:cv::cuda::device::color_detail::Gray2RGB5x5
Gray2RGB5x5	core/cuda/detail/color_detail.hpp	/^        template<int green_bits> struct Gray2RGB5x5 : unary_function<uchar, ushort>$/;"	s	namespace:cv::cuda::device::color_detail
Gray2RGB5x5	cudev/functional/detail/color_cvt.hpp	/^    template <> struct Gray2RGB5x5<5>$/;"	s	namespace:cv::cudev::color_cvt_detail
Gray2RGB5x5	cudev/functional/detail/color_cvt.hpp	/^    template <> struct Gray2RGB5x5<6>$/;"	s	namespace:cv::cudev::color_cvt_detail
Gray2RGB5x5Converter	core/cuda/detail/color_detail.hpp	/^        template<> struct Gray2RGB5x5Converter<5>$/;"	s	namespace:cv::cuda::device::color_detail
Gray2RGB5x5Converter	core/cuda/detail/color_detail.hpp	/^        template<> struct Gray2RGB5x5Converter<6>$/;"	s	namespace:cv::cuda::device::color_detail
GroupWiseCenterChooser	flann/hierarchical_clustering_index.h	/^    void GroupWiseCenterChooser(int k, int* dsindices, int indices_length, int* centers, int& centers_length)$/;"	f	class:cvflann::HierarchicalClusteringIndex
H	stitching/detail/matchers.hpp	/^    Mat H;                              \/\/!< Estimated homography$/;"	m	struct:cv::detail::MatchesInfo
H264	cudacodec.hpp	/^    H264,$/;"	e	enum:cv::cudacodec::Codec
H264_MVC	cudacodec.hpp	/^    H264_MVC,$/;"	e	enum:cv::cudacodec::Codec
H264_SVC	cudacodec.hpp	/^    H264_SVC,$/;"	e	enum:cv::cudacodec::Codec
HAAR_STDDEV_BORDER	cudalegacy/NCVHaarObjectDetection.hpp	384;"	d
HARRIS_SCORE	features2d.hpp	/^    enum { kBytes = 32, HARRIS_SCORE=0, FAST_SCORE=1 };$/;"	e	enum:cv::ORB::__anon282
HASH_BIT	core/mat.hpp	/^    enum { MAGIC_VAL=0x42FD0000, MAX_DIM=32, HASH_SCALE=0x5bd1e995, HASH_BIT=0x80000000 };$/;"	e	enum:cv::SparseMat::__anon142
HASH_SCALE	core/mat.hpp	/^    enum { MAGIC_VAL=0x42FD0000, MAX_DIM=32, HASH_SCALE=0x5bd1e995, HASH_BIT=0x80000000 };$/;"	e	enum:cv::SparseMat::__anon142
HAVE_IPL	core/types_c.h	56;"	d
HAVE_TBB	core/private.hpp	70;"	d
HELLINGER	flann/defines.h	/^    HELLINGER = 6,$/;"	e	enum:cvflann::flann_distance_t
HG_AUTOSIZE	highgui/highgui_c.h	232;"	d
HISTCMP_BHATTACHARYYA	imgproc.hpp	/^    HISTCMP_BHATTACHARYYA = 3,$/;"	e	enum:cv::HistCompMethods
HISTCMP_CHISQR	imgproc.hpp	/^    HISTCMP_CHISQR        = 1,$/;"	e	enum:cv::HistCompMethods
HISTCMP_CHISQR_ALT	imgproc.hpp	/^    HISTCMP_CHISQR_ALT    = 4,$/;"	e	enum:cv::HistCompMethods
HISTCMP_CORREL	imgproc.hpp	/^    HISTCMP_CORREL        = 0,$/;"	e	enum:cv::HistCompMethods
HISTCMP_HELLINGER	imgproc.hpp	/^    HISTCMP_HELLINGER     = HISTCMP_BHATTACHARYYA, \/\/!< Synonym for HISTCMP_BHATTACHARYYA$/;"	e	enum:cv::HistCompMethods
HISTCMP_INTERSECT	imgproc.hpp	/^    HISTCMP_INTERSECT     = 2,$/;"	e	enum:cv::HistCompMethods
HISTCMP_KL_DIV	imgproc.hpp	/^    HISTCMP_KL_DIV        = 5$/;"	e	enum:cv::HistCompMethods
HIST_INTERSECT	flann/defines.h	/^    HIST_INTERSECT   = 5,$/;"	e	enum:cvflann::flann_distance_t
HLS2RGB	core/cuda/detail/color_detail.hpp	/^            __host__ __device__ __forceinline__ HLS2RGB() {}$/;"	f	struct:cv::cuda::device::color_detail::HLS2RGB
HLS2RGB	core/cuda/detail/color_detail.hpp	/^            __host__ __device__ __forceinline__ HLS2RGB(const HLS2RGB&) {}$/;"	f	struct:cv::cuda::device::color_detail::HLS2RGB
HLS2RGB	core/cuda/detail/color_detail.hpp	/^        template <int bidx, int hr> struct HLS2RGB<uchar, 4, 4, bidx, hr> : unary_function<uint, uint>$/;"	s	namespace:cv::cuda::device::color_detail
HLS2RGB	core/cuda/detail/color_detail.hpp	/^        template <typename T, int scn, int dcn, int bidx, int hr> struct HLS2RGB$/;"	s	namespace:cv::cuda::device::color_detail
HLS2RGB	cudev/functional/detail/color_cvt.hpp	/^    template <int scn, int dcn, int bidx, int hr> struct HLS2RGB<float, scn, dcn, bidx, hr>$/;"	s	namespace:cv::cudev::color_cvt_detail
HLS2RGB	cudev/functional/detail/color_cvt.hpp	/^    template <int scn, int dcn, int bidx, int hr> struct HLS2RGB<uchar, scn, dcn, bidx, hr>$/;"	s	namespace:cv::cudev::color_cvt_detail
HLS2RGBConvert	core/cuda/detail/color_detail.hpp	/^        template <int bidx, int hr, typename T> static __device__ void HLS2RGBConvert(const T& src, float* dst)$/;"	f	namespace:cv::cuda::device::color_detail
HLS2RGBConvert	core/cuda/detail/color_detail.hpp	/^        template <int bidx, int hr, typename T> static __device__ void HLS2RGBConvert(const T& src, uchar* dst)$/;"	f	namespace:cv::cuda::device::color_detail
HLS2RGBConvert	core/cuda/detail/color_detail.hpp	/^        template <int bidx, int hr> static __device__ uint HLS2RGBConvert(uint src)$/;"	f	namespace:cv::cuda::device::color_detail
HOG	cudaobjdetect.hpp	/^class CV_EXPORTS HOG : public Algorithm$/;"	c	namespace:cv::cuda
HOGDescriptor	objdetect.hpp	/^    CV_WRAP HOGDescriptor() : winSize(64,128), blockSize(16,16), blockStride(8,8),$/;"	f	struct:cv::HOGDescriptor
HOGDescriptor	objdetect.hpp	/^    CV_WRAP HOGDescriptor(Size _winSize, Size _blockSize, Size _blockStride,$/;"	f	struct:cv::HOGDescriptor
HOGDescriptor	objdetect.hpp	/^    CV_WRAP HOGDescriptor(const String& filename)$/;"	f	struct:cv::HOGDescriptor
HOGDescriptor	objdetect.hpp	/^    HOGDescriptor(const HOGDescriptor& d)$/;"	f	struct:cv::HOGDescriptor
HOGDescriptor	objdetect.hpp	/^struct CV_EXPORTS_W HOGDescriptor$/;"	s	namespace:cv
HOST_COPY_OBSOLETE	core/mat.hpp	/^    enum { COPY_ON_MAP=1, HOST_COPY_OBSOLETE=2,$/;"	e	enum:cv::UMatData::__anon137
HOUGH_GRADIENT	imgproc.hpp	/^    HOUGH_GRADIENT      = 3 \/\/!< basically *21HT*, described in @cite Yuen90$/;"	e	enum:cv::HoughModes
HOUGH_MULTI_SCALE	imgproc.hpp	/^    HOUGH_MULTI_SCALE   = 2,$/;"	e	enum:cv::HoughModes
HOUGH_PROBABILISTIC	imgproc.hpp	/^    HOUGH_PROBABILISTIC = 1,$/;"	e	enum:cv::HoughModes
HOUGH_STANDARD	imgproc.hpp	/^    HOUGH_STANDARD      = 0,$/;"	e	enum:cv::HoughModes
HSV2RGB	core/cuda/detail/color_detail.hpp	/^            __host__ __device__ __forceinline__ HSV2RGB() {}$/;"	f	struct:cv::cuda::device::color_detail::HSV2RGB
HSV2RGB	core/cuda/detail/color_detail.hpp	/^            __host__ __device__ __forceinline__ HSV2RGB(const HSV2RGB&) {}$/;"	f	struct:cv::cuda::device::color_detail::HSV2RGB
HSV2RGB	core/cuda/detail/color_detail.hpp	/^        template <int bidx, int hr> struct HSV2RGB<uchar, 4, 4, bidx, hr> : unary_function<uint, uint>$/;"	s	namespace:cv::cuda::device::color_detail
HSV2RGB	core/cuda/detail/color_detail.hpp	/^        template <typename T, int scn, int dcn, int bidx, int hr> struct HSV2RGB$/;"	s	namespace:cv::cuda::device::color_detail
HSV2RGB	cudev/functional/detail/color_cvt.hpp	/^    template <int scn, int dcn, int bidx, int hr> struct HSV2RGB<float, scn, dcn, bidx, hr>$/;"	s	namespace:cv::cudev::color_cvt_detail
HSV2RGB	cudev/functional/detail/color_cvt.hpp	/^    template <int scn, int dcn, int bidx, int hr> struct HSV2RGB<uchar, scn, dcn, bidx, hr>$/;"	s	namespace:cv::cudev::color_cvt_detail
HSV2RGBConvert	core/cuda/detail/color_detail.hpp	/^        template <int bidx, int HR, typename T> static __device__ void HSV2RGBConvert(const T& src, uchar* dst)$/;"	f	namespace:cv::cuda::device::color_detail
HSV2RGBConvert	core/cuda/detail/color_detail.hpp	/^        template <int bidx, int hr, typename T> static __device__ void HSV2RGBConvert(const T& src, float* dst)$/;"	f	namespace:cv::cuda::device::color_detail
HSV2RGBConvert	core/cuda/detail/color_detail.hpp	/^        template <int bidx, int hr> static __device__ uint HSV2RGBConvert(uint src)$/;"	f	namespace:cv::cuda::device::color_detail
HaarClassifierCascadeDescriptor	cudalegacy/NCVHaarObjectDetection.hpp	/^struct HaarClassifierCascadeDescriptor$/;"	s
HaarClassifierNode128	cudalegacy/NCVHaarObjectDetection.hpp	/^struct HaarClassifierNode128$/;"	s
HaarClassifierNodeDescriptor32	cudalegacy/NCVHaarObjectDetection.hpp	/^struct HaarClassifierNodeDescriptor32$/;"	s
HaarFeature64	cudalegacy/NCVHaarObjectDetection.hpp	/^struct HaarFeature64$/;"	s
HaarFeature64_CreateCheck_MaxRectField	cudalegacy/NCVHaarObjectDetection.hpp	82;"	d
HaarFeatureDescriptor32	cudalegacy/NCVHaarObjectDetection.hpp	/^struct HaarFeatureDescriptor32$/;"	s
HaarFeatureDescriptor32_CreateCheck_MaxFeatureOffset	cudalegacy/NCVHaarObjectDetection.hpp	125;"	d
HaarFeatureDescriptor32_CreateCheck_MaxNumFeatures	cudalegacy/NCVHaarObjectDetection.hpp	123;"	d
HaarFeatureDescriptor32_Interpret_MaskFlagLeftNodeLeaf	cudalegacy/NCVHaarObjectDetection.hpp	121;"	d
HaarFeatureDescriptor32_Interpret_MaskFlagRightNodeLeaf	cudalegacy/NCVHaarObjectDetection.hpp	122;"	d
HaarFeatureDescriptor32_Interpret_MaskFlagTilted	cudalegacy/NCVHaarObjectDetection.hpp	120;"	d
HaarFeatureDescriptor32_NumFeatures_Shift	cudalegacy/NCVHaarObjectDetection.hpp	124;"	d
HaarStage64	cudalegacy/NCVHaarObjectDetection.hpp	/^struct HaarStage64$/;"	s
HaarStage64_Interpret_MaskRootNodeOffset	cudalegacy/NCVHaarObjectDetection.hpp	270;"	d
HaarStage64_Interpret_MaskRootNodes	cudalegacy/NCVHaarObjectDetection.hpp	269;"	d
HaarStage64_Interpret_ShiftRootNodeOffset	cudalegacy/NCVHaarObjectDetection.hpp	271;"	d
Hamming	core/base.hpp	/^struct CV_EXPORTS Hamming$/;"	s	namespace:cv
Hamming	flann/dist.h	/^struct Hamming$/;"	s	namespace:cvflann
Hamming2	flann/dist.h	/^struct Hamming2$/;"	s	namespace:cvflann
HammingDist	core/cuda/vec_distance.hpp	/^        __device__ __forceinline__ HammingDist() : mySum(0) {}$/;"	f	struct:cv::cuda::device::HammingDist
HammingDist	core/cuda/vec_distance.hpp	/^    struct HammingDist$/;"	s	namespace:cv::cuda::device
HammingLUT	core/base.hpp	/^typedef Hamming HammingLUT;$/;"	t	namespace:cv
HammingLUT	flann/dist.h	/^struct HammingLUT$/;"	s	namespace:cvflann
HasFailure	ts/ts_gtest.h	/^  static bool HasFailure() { return HasFatalFailure() || HasNonfatalFailure(); }$/;"	f	class:testing::Test
HasNewFatalFailureHelper	ts/ts_gtest.h	/^class GTEST_API_ HasNewFatalFailureHelper$/;"	c	namespace:testing::internal
HausdorffDistanceExtractor	shape/shape_distance.hpp	/^class CV_EXPORTS_W HausdorffDistanceExtractor : public ShapeDistanceExtractor$/;"	c	namespace:cv
Hdr	core/mat.hpp	/^    struct CV_EXPORTS Hdr$/;"	s	class:cv::SparseMat
Head	ts/ts_gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types1
Head	ts/ts_gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types10
Head	ts/ts_gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types11
Head	ts/ts_gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types12
Head	ts/ts_gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types13
Head	ts/ts_gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types14
Head	ts/ts_gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types15
Head	ts/ts_gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types16
Head	ts/ts_gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types17
Head	ts/ts_gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types18
Head	ts/ts_gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types19
Head	ts/ts_gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types2
Head	ts/ts_gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types20
Head	ts/ts_gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types21
Head	ts/ts_gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types22
Head	ts/ts_gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types23
Head	ts/ts_gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types24
Head	ts/ts_gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types25
Head	ts/ts_gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types26
Head	ts/ts_gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types27
Head	ts/ts_gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types28
Head	ts/ts_gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types29
Head	ts/ts_gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types3
Head	ts/ts_gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types30
Head	ts/ts_gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types31
Head	ts/ts_gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types32
Head	ts/ts_gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types33
Head	ts/ts_gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types34
Head	ts/ts_gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types35
Head	ts/ts_gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types36
Head	ts/ts_gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types37
Head	ts/ts_gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types38
Head	ts/ts_gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types39
Head	ts/ts_gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types4
Head	ts/ts_gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types40
Head	ts/ts_gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types41
Head	ts/ts_gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types42
Head	ts/ts_gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types43
Head	ts/ts_gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types44
Head	ts/ts_gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types45
Head	ts/ts_gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types46
Head	ts/ts_gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types47
Head	ts/ts_gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types48
Head	ts/ts_gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types49
Head	ts/ts_gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types5
Head	ts/ts_gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types50
Head	ts/ts_gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types6
Head	ts/ts_gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types7
Head	ts/ts_gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types8
Head	ts/ts_gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types9
Head	ts/ts_gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates1
Head	ts/ts_gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates10
Head	ts/ts_gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates11
Head	ts/ts_gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates12
Head	ts/ts_gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates13
Head	ts/ts_gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates14
Head	ts/ts_gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates15
Head	ts/ts_gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates16
Head	ts/ts_gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates17
Head	ts/ts_gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates18
Head	ts/ts_gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates19
Head	ts/ts_gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates2
Head	ts/ts_gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates20
Head	ts/ts_gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates21
Head	ts/ts_gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates22
Head	ts/ts_gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates23
Head	ts/ts_gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates24
Head	ts/ts_gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates25
Head	ts/ts_gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates26
Head	ts/ts_gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates27
Head	ts/ts_gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates28
Head	ts/ts_gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates29
Head	ts/ts_gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates3
Head	ts/ts_gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates30
Head	ts/ts_gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates31
Head	ts/ts_gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates32
Head	ts/ts_gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates33
Head	ts/ts_gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates34
Head	ts/ts_gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates35
Head	ts/ts_gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates36
Head	ts/ts_gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates37
Head	ts/ts_gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates38
Head	ts/ts_gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates39
Head	ts/ts_gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates4
Head	ts/ts_gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates40
Head	ts/ts_gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates41
Head	ts/ts_gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates42
Head	ts/ts_gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates43
Head	ts/ts_gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates44
Head	ts/ts_gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates45
Head	ts/ts_gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates46
Head	ts/ts_gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates47
Head	ts/ts_gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates48
Head	ts/ts_gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates49
Head	ts/ts_gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates5
Head	ts/ts_gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates50
Head	ts/ts_gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates6
Head	ts/ts_gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates7
Head	ts/ts_gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates8
Head	ts/ts_gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates9
HeaderIsNull	core/base.hpp	/^    HeaderIsNull=               -9,  \/\/!< image header is NULL$/;"	e	enum:cv::Error::Code
Heap	flann/heap.h	/^    Heap(int sz)$/;"	f	class:cvflann::Heap
Heap	flann/heap.h	/^class Heap$/;"	c	namespace:cvflann
Height	core/wimage.hpp	/^    int Height() const {return image_->height; }$/;"	f	class:cv::WImage
HellingerDistance	flann/dist.h	/^struct HellingerDistance$/;"	s	namespace:cvflann
HersheyFonts	core.hpp	/^enum HersheyFonts {$/;"	g	namespace:cv
HierarchicalClusteringIndex	flann/hierarchical_clustering_index.h	/^    HierarchicalClusteringIndex(const Matrix<ElementType>& inputData, const IndexParams& index_params = HierarchicalClusteringIndexParams(),$/;"	f	class:cvflann::HierarchicalClusteringIndex
HierarchicalClusteringIndex	flann/hierarchical_clustering_index.h	/^class HierarchicalClusteringIndex : public NNIndex<Distance>$/;"	c	namespace:cvflann
HierarchicalClusteringIndexParams	flann/hierarchical_clustering_index.h	/^    HierarchicalClusteringIndexParams(int branching = 32,$/;"	f	struct:cvflann::HierarchicalClusteringIndexParams
HierarchicalClusteringIndexParams	flann/hierarchical_clustering_index.h	/^struct HierarchicalClusteringIndexParams : public IndexParams$/;"	s	namespace:cvflann
HierarchicalClusteringIndexParams	flann/miniflann.hpp	/^struct CV_EXPORTS HierarchicalClusteringIndexParams : public IndexParams$/;"	s	namespace:cv::flann
HistCompMethods	imgproc.hpp	/^enum HistCompMethods {$/;"	g	namespace:cv
HistIntersectionDistance	flann/dist.h	/^struct HistIntersectionDistance$/;"	s	namespace:cvflann
HistogramBody	cudev/expr/reduction.hpp	/^template <int BIN_COUNT, class SrcPtr> struct HistogramBody$/;"	s	namespace:cv::cudev
HistogramCostExtractor	shape/hist_cost.hpp	/^class CV_EXPORTS_W HistogramCostExtractor : public Algorithm$/;"	c	namespace:cv
HomographyBasedEstimator	stitching/detail/motion_estimators.hpp	/^    HomographyBasedEstimator(bool is_focals_estimated = false)$/;"	f	class:cv::detail::HomographyBasedEstimator
HomographyBasedEstimator	stitching/detail/motion_estimators.hpp	/^class CV_EXPORTS HomographyBasedEstimator : public Estimator$/;"	c	namespace:cv::detail
HostMem	core/base.hpp	/^    class CV_EXPORTS HostMem;$/;"	m	namespace:cv::cuda	typeref:class:cv::cuda::CV_EXPORTS
HostMem	core/cuda.hpp	/^class CV_EXPORTS HostMem$/;"	c	namespace:cv::cuda
HostMem	core/cuda.inl.hpp	/^HostMem::HostMem(AllocType alloc_type_)$/;"	f	class:cv::cuda::HostMem
HostMem	core/cuda.inl.hpp	/^HostMem::HostMem(InputArray arr, AllocType alloc_type_)$/;"	f	class:cv::cuda::HostMem
HostMem	core/cuda.inl.hpp	/^HostMem::HostMem(Size size_, int type_, AllocType alloc_type_)$/;"	f	class:cv::cuda::HostMem
HostMem	core/cuda.inl.hpp	/^HostMem::HostMem(const HostMem& m)$/;"	f	class:cv::cuda::HostMem
HostMem	core/cuda.inl.hpp	/^HostMem::HostMem(int rows_, int cols_, int type_, AllocType alloc_type_)$/;"	f	class:cv::cuda::HostMem
HoughCirclesDetector	cudaimgproc.hpp	/^class CV_EXPORTS HoughCirclesDetector : public Algorithm$/;"	c	namespace:cv::cuda
HoughLinesDetector	cudaimgproc.hpp	/^class CV_EXPORTS HoughLinesDetector : public Algorithm$/;"	c	namespace:cv::cuda
HoughModes	imgproc.hpp	/^enum HoughModes {$/;"	g	namespace:cv
HoughSegmentDetector	cudaimgproc.hpp	/^class CV_EXPORTS HoughSegmentDetector : public Algorithm$/;"	c	namespace:cv::cuda
ID	core/types_c.h	/^    int  ID;                \/**< version (=0)*\/$/;"	m	struct:_IplImage
IDENTITY	ml.hpp	/^        IDENTITY = 0,$/;"	e	enum:cv::ml::ANN_MLP::ActivationFunctions
IDR_Period	cudacodec.hpp	/^    int IDR_Period;      \/\/!< NVVE_IDR_PERIOD,$/;"	m	struct:cv::cudacodec::EncoderParams
IDenseOptFlowEstimator	videostab/optical_flow.hpp	/^class CV_EXPORTS IDenseOptFlowEstimator$/;"	c	namespace:cv::videostab
IDetector	objdetect/detection_based_tracker.hpp	/^                IDetector():$/;"	f	class:cv::DetectionBasedTracker::IDetector
IDetector	objdetect/detection_based_tracker.hpp	/^        class IDetector$/;"	c	class:cv::DetectionBasedTracker
IFRAME	cudacodec.hpp	/^        IFRAME = 1,$/;"	e	enum:cv::cudacodec::EncoderCallBack::PicType
IFrameSource	videostab/frame_source.hpp	/^class CV_EXPORTS IFrameSource$/;"	c	namespace:cv::videostab
ILog	videostab/log.hpp	/^class CV_EXPORTS ILog$/;"	c	namespace:cv::videostab
IMAGE_CHANNELS	ts/cuda_test.hpp	314;"	d
IMMEDIATE_RENDERING	viz/widgets.hpp	/^            IMMEDIATE_RENDERING,$/;"	e	enum:cv::viz::RenderingProperties
IMPLEMENT_PARAM_CLASS	ts/cuda_test.hpp	297;"	d
IMPLEMENT_PARAM_CLASS	ts/ocl_test.hpp	332;"	d
IMREAD_ANYCOLOR	imgcodecs.hpp	/^       IMREAD_ANYCOLOR   = 4,  \/\/!< If set, the image is read in any possible color format.$/;"	e	enum:cv::ImreadModes
IMREAD_ANYDEPTH	imgcodecs.hpp	/^       IMREAD_ANYDEPTH   = 2,  \/\/!< If set, return 16-bit\/32-bit image when the input has the corresponding depth, otherwise convert it to 8-bit.$/;"	e	enum:cv::ImreadModes
IMREAD_COLOR	imgcodecs.hpp	/^       IMREAD_COLOR      = 1,  \/\/!< If set, always convert image to the 3 channel BGR color image.$/;"	e	enum:cv::ImreadModes
IMREAD_GRAYSCALE	imgcodecs.hpp	/^       IMREAD_GRAYSCALE  = 0,  \/\/!< If set, always convert image to the single channel grayscale image.$/;"	e	enum:cv::ImreadModes
IMREAD_LOAD_GDAL	imgcodecs.hpp	/^       IMREAD_LOAD_GDAL  = 8   \/\/!< If set, use the gdal driver for loading the image.$/;"	e	enum:cv::ImreadModes
IMREAD_UNCHANGED	imgcodecs.hpp	/^       IMREAD_UNCHANGED  = -1, \/\/!< If set, return the loaded image as is (with alpha channel, otherwise it gets cropped).$/;"	e	enum:cv::ImreadModes
IMWRITE_JPEG_CHROMA_QUALITY	imgcodecs.hpp	/^       IMWRITE_JPEG_CHROMA_QUALITY = 6,  \/\/!< Separate chroma quality level, 0 - 100, default is 0 - don't use.$/;"	e	enum:cv::ImwriteFlags
IMWRITE_JPEG_LUMA_QUALITY	imgcodecs.hpp	/^       IMWRITE_JPEG_LUMA_QUALITY   = 5,  \/\/!< Separate luma quality level, 0 - 100, default is 0 - don't use.$/;"	e	enum:cv::ImwriteFlags
IMWRITE_JPEG_OPTIMIZE	imgcodecs.hpp	/^       IMWRITE_JPEG_OPTIMIZE       = 3,  \/\/!< Enable JPEG features, 0 or 1, default is False.$/;"	e	enum:cv::ImwriteFlags
IMWRITE_JPEG_PROGRESSIVE	imgcodecs.hpp	/^       IMWRITE_JPEG_PROGRESSIVE    = 2,  \/\/!< Enable JPEG features, 0 or 1, default is False.$/;"	e	enum:cv::ImwriteFlags
IMWRITE_JPEG_QUALITY	imgcodecs.hpp	/^       IMWRITE_JPEG_QUALITY        = 1,  \/\/!< For JPEG, it can be a quality from 0 to 100 (the higher is the better). Default value is 95.$/;"	e	enum:cv::ImwriteFlags
IMWRITE_JPEG_RST_INTERVAL	imgcodecs.hpp	/^       IMWRITE_JPEG_RST_INTERVAL   = 4,  \/\/!< JPEG restart interval, 0 - 65535, default is 0 - no restart.$/;"	e	enum:cv::ImwriteFlags
IMWRITE_PNG_BILEVEL	imgcodecs.hpp	/^       IMWRITE_PNG_BILEVEL         = 18, \/\/!< Binary level PNG, 0 or 1, default is 0.$/;"	e	enum:cv::ImwriteFlags
IMWRITE_PNG_COMPRESSION	imgcodecs.hpp	/^       IMWRITE_PNG_COMPRESSION     = 16, \/\/!< For PNG, it can be the compression level from 0 to 9. A higher value means a smaller size and longer compression time. Default value is 3.$/;"	e	enum:cv::ImwriteFlags
IMWRITE_PNG_STRATEGY	imgcodecs.hpp	/^       IMWRITE_PNG_STRATEGY        = 17, \/\/!< One of cv::ImwritePNGFlags, default is IMWRITE_PNG_STRATEGY_DEFAULT.$/;"	e	enum:cv::ImwriteFlags
IMWRITE_PNG_STRATEGY_DEFAULT	imgcodecs.hpp	/^       IMWRITE_PNG_STRATEGY_DEFAULT      = 0,$/;"	e	enum:cv::ImwritePNGFlags
IMWRITE_PNG_STRATEGY_FILTERED	imgcodecs.hpp	/^       IMWRITE_PNG_STRATEGY_FILTERED     = 1,$/;"	e	enum:cv::ImwritePNGFlags
IMWRITE_PNG_STRATEGY_FIXED	imgcodecs.hpp	/^       IMWRITE_PNG_STRATEGY_FIXED        = 4$/;"	e	enum:cv::ImwritePNGFlags
IMWRITE_PNG_STRATEGY_HUFFMAN_ONLY	imgcodecs.hpp	/^       IMWRITE_PNG_STRATEGY_HUFFMAN_ONLY = 2,$/;"	e	enum:cv::ImwritePNGFlags
IMWRITE_PNG_STRATEGY_RLE	imgcodecs.hpp	/^       IMWRITE_PNG_STRATEGY_RLE          = 3,$/;"	e	enum:cv::ImwritePNGFlags
IMWRITE_PXM_BINARY	imgcodecs.hpp	/^       IMWRITE_PXM_BINARY          = 32, \/\/!< For PPM, PGM, or PBM, it can be a binary format flag, 0 or 1. Default value is 1.$/;"	e	enum:cv::ImwriteFlags
IMWRITE_WEBP_QUALITY	imgcodecs.hpp	/^       IMWRITE_WEBP_QUALITY        = 64  \/\/!< For WEBP, it can be a quality from 1 to 100 (the higher is the better). By default (without any parameter) and for quality above 100 the lossless compression is used.$/;"	e	enum:cv::ImwriteFlags
IMotionStabilizer	videostab/motion_stabilizing.hpp	/^class CV_EXPORTS IMotionStabilizer$/;"	c	namespace:cv::videostab
INCLUSIVE	core/cuda/scan.hpp	/^    enum ScanKind { EXCLUSIVE = 0,  INCLUSIVE = 1 };$/;"	e	enum:cv::cuda::device::ScanKind
INCVMemAllocator	cudalegacy/NCV.hpp	/^class CV_EXPORTS INCVMemAllocator$/;"	c
INPAINT_NS	photo.hpp	/^    INPAINT_NS    = 0, \/\/ Navier-Stokes algorithm$/;"	e	enum:cv::__anon1
INPAINT_TELEA	photo.hpp	/^    INPAINT_TELEA = 1 \/\/ A. Telea algorithm$/;"	e	enum:cv::__anon1
INPUT	ts.hpp	/^    enum { INPUT, INPUT_OUTPUT, OUTPUT, REF_INPUT_OUTPUT, REF_OUTPUT, TEMP, MASK, MAX_ARR };$/;"	e	enum:cvtest::ArrayTest::__anon26
INPUT_OUTPUT	ts.hpp	/^    enum { INPUT, INPUT_OUTPUT, OUTPUT, REF_INPUT_OUTPUT, REF_OUTPUT, TEMP, MASK, MAX_ARR };$/;"	e	enum:cvtest::ArrayTest::__anon26
INSIDE	videostab/fast_marching.hpp	/^    enum { INSIDE = 0, BAND = 1, KNOWN = 255 };$/;"	e	enum:cv::videostab::FastMarchingMethod::__anon71
INSIDE_MAP	core/persistence.hpp	/^        INSIDE_MAP     = 4$/;"	e	enum:cv::FileStorage::__anon100
INSTANTIATE_TEST_CASE_P	ts/ts_gtest.h	17033;"	d
INSTANTIATE_TYPED_TEST_CASE_P	ts/ts_gtest.h	17531;"	d
INT	core.hpp	/^    enum { INT=0, BOOLEAN=1, REAL=2, STRING=3, MAT=4, MAT_VECTOR=5, ALGORITHM=6, FLOAT=7,$/;"	e	enum:cv::Param::__anon404
INT	core/persistence.hpp	/^        INT       = 1, \/\/!< an integer$/;"	e	enum:cv::FileNode::Type
INTER	ml.hpp	/^        INTER=5$/;"	e	enum:cv::ml::SVM::KernelTypes
INTERPROCESS	core/cuda.hpp	/^        INTERPROCESS   = 0x04   \/**< Event is suitable for interprocess use. DisableTiming must be set *\/$/;"	e	enum:cv::cuda::Event::CreateFlags
INTERS	stitching/detail/seam_finders.hpp	/^        FIRST = 1, SECOND = 2, INTERS = 4,$/;"	e	enum:cv::detail::DpSeamFinder::ComponentState
INTERSECT_FULL	imgproc.hpp	/^    INTERSECT_FULL  = 2 \/\/!< One of the rectangle is fully enclosed in the other$/;"	e	enum:cv::RectanglesIntersectTypes
INTERSECT_NONE	imgproc.hpp	/^    INTERSECT_NONE = 0, \/\/!< No intersection$/;"	e	enum:cv::RectanglesIntersectTypes
INTERSECT_PARTIAL	imgproc.hpp	/^    INTERSECT_PARTIAL  = 1, \/\/!< There is a partial intersection$/;"	e	enum:cv::RectanglesIntersectTypes
INTERS_FIRST	stitching/detail/seam_finders.hpp	/^        INTERS_FIRST = INTERS | FIRST,$/;"	e	enum:cv::detail::DpSeamFinder::ComponentState
INTERS_SECOND	stitching/detail/seam_finders.hpp	/^        INTERS_SECOND = INTERS | SECOND$/;"	e	enum:cv::detail::DpSeamFinder::ComponentState
INTER_AREA	imgproc.hpp	/^    INTER_AREA           = 3,$/;"	e	enum:cv::InterpolationFlags
INTER_BITS	imgproc.hpp	/^       INTER_BITS      = 5,$/;"	e	enum:cv::InterpolationMasks
INTER_BITS2	imgproc.hpp	/^       INTER_BITS2     = INTER_BITS * 2,$/;"	e	enum:cv::InterpolationMasks
INTER_CUBIC	imgproc.hpp	/^    INTER_CUBIC          = 2,$/;"	e	enum:cv::InterpolationFlags
INTER_LANCZOS4	imgproc.hpp	/^    INTER_LANCZOS4       = 4,$/;"	e	enum:cv::InterpolationFlags
INTER_LINEAR	imgproc.hpp	/^    INTER_LINEAR         = 1,$/;"	e	enum:cv::InterpolationFlags
INTER_MAX	imgproc.hpp	/^    INTER_MAX            = 7,$/;"	e	enum:cv::InterpolationFlags
INTER_NEAREST	imgproc.hpp	/^    INTER_NEAREST        = 0,$/;"	e	enum:cv::InterpolationFlags
INTER_TAB_SIZE	imgproc.hpp	/^       INTER_TAB_SIZE  = 1 << INTER_BITS,$/;"	e	enum:cv::InterpolationMasks
INTER_TAB_SIZE2	imgproc.hpp	/^       INTER_TAB_SIZE2 = INTER_TAB_SIZE * INTER_TAB_SIZE$/;"	e	enum:cv::InterpolationMasks
IOutlierRejector	videostab/outlier_rejection.hpp	/^class CV_EXPORTS IOutlierRejector$/;"	c	namespace:cv::videostab
IPL2CV_DEPTH	core/types_c.h	500;"	d
IPL_ALIGN_16BYTES	core/types_c.h	277;"	d
IPL_ALIGN_32BYTES	core/types_c.h	278;"	d
IPL_ALIGN_4BYTES	core/types_c.h	275;"	d
IPL_ALIGN_8BYTES	core/types_c.h	276;"	d
IPL_ALIGN_DWORD	core/types_c.h	280;"	d
IPL_ALIGN_QWORD	core/types_c.h	281;"	d
IPL_BORDER_CONSTANT	core/types_c.h	283;"	d
IPL_BORDER_REFLECT	core/types_c.h	285;"	d
IPL_BORDER_REFLECT_101	core/types_c.h	380;"	d
IPL_BORDER_REPLICATE	core/types_c.h	284;"	d
IPL_BORDER_TRANSPARENT	core/types_c.h	381;"	d
IPL_BORDER_WRAP	core/types_c.h	286;"	d
IPL_DATA_ORDER_PIXEL	core/types_c.h	269;"	d
IPL_DATA_ORDER_PLANE	core/types_c.h	270;"	d
IPL_DEPTH_16S	core/types_c.h	266;"	d
IPL_DEPTH_16U	core/types_c.h	262;"	d
IPL_DEPTH_1U	core/types_c.h	260;"	d
IPL_DEPTH_32F	core/types_c.h	263;"	d
IPL_DEPTH_32S	core/types_c.h	267;"	d
IPL_DEPTH_64F	core/types_c.h	394;"	d
IPL_DEPTH_8S	core/types_c.h	265;"	d
IPL_DEPTH_8U	core/types_c.h	261;"	d
IPL_DEPTH_SIGN	core/types_c.h	258;"	d
IPL_IMAGE_DATA	core/types_c.h	374;"	d
IPL_IMAGE_HEADER	core/types_c.h	373;"	d
IPL_IMAGE_MAGIC_VAL	core/types_c.h	383;"	d
IPL_IMAGE_ROI	core/types_c.h	375;"	d
IPL_ORIGIN_BL	core/types_c.h	273;"	d
IPL_ORIGIN_TL	core/types_c.h	272;"	d
IPPI_CALL	core/private.hpp	242;"	d
IPP_ALIGN	core/private.hpp	198;"	d
IPP_VERSION_X100	core/private.hpp	196;"	d
ISparseOptFlowEstimator	videostab/optical_flow.hpp	/^class CV_EXPORTS ISparseOptFlowEstimator$/;"	c	namespace:cv::videostab
Identity	core/affine.hpp	/^cv::Affine3<T> cv::Affine3<T>::Identity()$/;"	f	class:cv::Affine3
Image2D	core/ocl.hpp	/^class CV_EXPORTS Image2D$/;"	c	namespace:cv::ocl
Image2D	core/ocl.hpp	/^class CV_EXPORTS Image2D;$/;"	m	namespace:cv::ocl	typeref:class:cv::ocl::CV_EXPORTS
ImageData	core/wimage.hpp	/^    T* ImageData() { return reinterpret_cast<T*>(image_->imageData); }$/;"	f	class:cv::WImage
ImageData	core/wimage.hpp	/^    const T* ImageData() const {$/;"	f	class:cv::WImage
ImageFeatures	stitching/detail/matchers.hpp	/^struct CV_EXPORTS ImageFeatures$/;"	s	namespace:cv::detail
ImageMotionEstimatorBase	videostab/global_motion.hpp	/^    ImageMotionEstimatorBase(MotionModel model) { setMotionModel(model); }$/;"	f	class:cv::videostab::ImageMotionEstimatorBase
ImageMotionEstimatorBase	videostab/global_motion.hpp	/^class CV_EXPORTS ImageMotionEstimatorBase$/;"	c	namespace:cv::videostab
ImagePairLess	stitching/detail/seam_finders.hpp	/^        ImagePairLess(const std::vector<Mat> &images, const std::vector<Point> &corners)$/;"	f	class:cv::detail::DpSeamFinder::ImagePairLess
ImagePairLess	stitching/detail/seam_finders.hpp	/^    class ImagePairLess$/;"	c	class:cv::detail::DpSeamFinder
ImagePyramid	cudalegacy.hpp	/^class CV_EXPORTS ImagePyramid : public Algorithm$/;"	c	namespace:cv::cuda
ImplData	ts/ts_perf.hpp	/^    ImplData()$/;"	f	struct:perf::ImplData
ImplData	ts/ts_perf.hpp	/^typedef struct ImplData$/;"	s	namespace:perf
ImplData	ts/ts_perf.hpp	/^} ImplData;$/;"	t	namespace:perf	typeref:struct:perf::ImplData
ImplicitCast_	ts/ts_gtest.h	/^inline To ImplicitCast_(To x) { return x; }$/;"	f	namespace:std::tr1
ImplicitlyConvertible	ts/ts_gtest.h	/^class ImplicitlyConvertible {$/;"	c	namespace:testing::internal
ImreadModes	imgcodecs.hpp	/^enum ImreadModes {$/;"	g	namespace:cv
ImwriteFlags	imgcodecs.hpp	/^enum ImwriteFlags {$/;"	g	namespace:cv
ImwritePNGFlags	imgcodecs.hpp	/^enum ImwritePNGFlags {$/;"	g	namespace:cv
Index	flann/flann_base.hpp	/^    Index(const Matrix<ElementType>& features, const IndexParams& params, Distance distance = Distance() )$/;"	f	class:cvflann::Index
Index	flann/flann_base.hpp	/^class Index : public NNIndex<Distance>$/;"	c	namespace:cvflann
Index	flann/miniflann.hpp	/^class CV_EXPORTS_W Index$/;"	c	namespace:cv::flann
IndexHeader	flann/saving.h	/^struct IndexHeader$/;"	s	namespace:cvflann
IndexParams	flann/miniflann.hpp	/^struct CV_EXPORTS IndexParams$/;"	s	namespace:cv::flann
IndexParams	flann/params.h	/^typedef std::map<cv::String, any> IndexParams;$/;"	t	namespace:cvflann
Index_	flann.hpp	/^ Index_ {$/;"	c	namespace:cv::flann
Index_	flann.hpp	/^Index_<T>::Index_(const Mat& dataset, const ::cvflann::IndexParams& params)$/;"	f	class:cv::flann::Index_
Index_	flann.hpp	/^class FLANN_DEPRECATED Index_;$/;"	m	namespace:cv::flann	typeref:class:cv::flann::FLANN_DEPRECATED
Infinity	ts/ts_gtest.h	/^  static RawType Infinity() {$/;"	f	class:testing::internal::FloatingPoint
Init	ts/ts_gtest.h	/^  void Init(const Element* array, size_t a_size, RelationToSource relation) {$/;"	f	class:testing::internal::NativeArray
InnerParameters	objdetect/detection_based_tracker.hpp	/^        struct InnerParameters$/;"	s	class:cv::DetectionBasedTracker
InpainterBase	videostab/inpainting.hpp	/^    InpainterBase()$/;"	f	class:cv::videostab::InpainterBase
InpainterBase	videostab/inpainting.hpp	/^class CV_EXPORTS InpainterBase$/;"	c	namespace:cv::videostab
InpaintingModes	photo/photo_c.h	/^enum InpaintingModes$/;"	g
InpaintingPipeline	videostab/inpainting.hpp	/^class CV_EXPORTS InpaintingPipeline : public InpainterBase$/;"	c	namespace:cv::videostab
InputArray	core/mat.hpp	/^typedef const _InputArray& InputArray;$/;"	t	namespace:cv
InputArrayOfArrays	core/mat.hpp	/^typedef InputArray InputArrayOfArrays;$/;"	t	namespace:cv
InputOutputArray	core/mat.hpp	/^typedef const _InputOutputArray& InputOutputArray;$/;"	t	namespace:cv
InputOutputArrayOfArrays	core/mat.hpp	/^typedef InputOutputArray InputOutputArrayOfArrays;$/;"	t	namespace:cv
InstantiationContainer	ts/ts_gtest.h	/^      InstantiationContainer;$/;"	t	class:testing::internal::ParameterizedTestCaseInfo
Int	ts/ts_gtest.h	/^  typedef __int64 Int;$/;"	t	class:std::tr1::TypeWithSize
Int	ts/ts_gtest.h	/^  typedef int Int;$/;"	t	class:std::tr1::TypeWithSize
Int2Type	cudev/util/type_traits.hpp	/^template <int A> struct Int2Type$/;"	s	namespace:cv::cudev
Int32	ts/ts_gtest.h	/^typedef TypeWithSize<4>::Int Int32;$/;"	t	namespace:std::tr1
Int64	ts/ts_gtest.h	/^typedef TypeWithSize<8>::Int Int64;$/;"	t	namespace:std::tr1
IntegerAreaFilter	core/cuda/filters.hpp	/^        explicit __host__ __device__ __forceinline__ IntegerAreaFilter(const Ptr2D& src_, float scale_x_, float scale_y_)$/;"	f	struct:cv::cuda::device::IntegerAreaFilter
IntegerAreaFilter	core/cuda/filters.hpp	/^    template <typename Ptr2D> struct IntegerAreaFilter$/;"	s	namespace:cv::cuda::device
IntegerAreaInterPtr	cudev/ptr2d/interpolation.hpp	/^template <typename SrcPtr> struct IntegerAreaInterPtr$/;"	s	namespace:cv::cudev
IntegerAreaInterPtrSz	cudev/ptr2d/interpolation.hpp	/^template <class SrcPtr> struct IntegerAreaInterPtrSz : IntegerAreaInterPtr<SrcPtr>$/;"	s	namespace:cv::cudev
IntegralBody	cudev/expr/reduction.hpp	/^template <class SrcPtr> struct IntegralBody$/;"	s	namespace:cv::cudev
InternalRunDeathTestFlag	ts/ts_gtest.h	/^  InternalRunDeathTestFlag(const std::string& a_file,$/;"	f	class:testing::internal::InternalRunDeathTestFlag
InternalRunDeathTestFlag	ts/ts_gtest.h	/^class InternalRunDeathTestFlag {$/;"	c	namespace:testing::internal
InterpolationFlags	imgproc.hpp	/^enum InterpolationFlags{$/;"	g	namespace:cv
InterpolationMasks	imgproc.hpp	/^enum InterpolationMasks {$/;"	g	namespace:cv
Interval	flann/kdtree_single_index.h	/^    struct Interval$/;"	s	class:cvflann::KDTreeSingleIndex
Inverse	ts/cuda_test.hpp	/^        inline Inverse(bool val = false) : val_(val) {}$/;"	f	class:cvtest::Inverse
Inverse	ts/cuda_test.hpp	/^    class Inverse$/;"	c	namespace:cvtest
Ipl	core/wimage.hpp	/^    IplImage* Ipl() {return image_; }$/;"	f	class:cv::WImage
Ipl	core/wimage.hpp	/^    const IplImage* Ipl() const {return image_; }$/;"	f	class:cv::WImage
IplConvKernel	core/types_c.h	/^IplConvKernel;$/;"	t	typeref:struct:_IplConvKernel
IplConvKernelFP	core/types_c.h	/^IplConvKernelFP;$/;"	t	typeref:struct:_IplConvKernelFP
IplImage	core/types_c.h	/^IplImage;$/;"	t	typeref:struct:_IplImage
IplROI	core/types_c.h	/^IplROI;$/;"	t	typeref:struct:_IplROI
IplTileInfo	core/types_c.h	/^typedef struct _IplTileInfo IplTileInfo;$/;"	t	typeref:struct:_IplTileInfo
IsAProtocolMessage	ts/ts_gtest.h	/^struct IsAProtocolMessage$/;"	s	namespace:testing::internal
IsATTY	ts/ts_gtest.h	/^inline int IsATTY(int \/* fd *\/) { return 0; }$/;"	f	namespace:std::tr1::posix
IsATTY	ts/ts_gtest.h	/^inline int IsATTY(int fd) { return _isatty(fd); }$/;"	f	namespace:std::tr1::posix
IsATTY	ts/ts_gtest.h	/^inline int IsATTY(int fd) { return isatty(fd); }$/;"	f	namespace:std::tr1::posix
IsAlNum	ts/ts_gtest.h	/^inline bool IsAlNum(char ch) {$/;"	f	namespace:std::tr1
IsAlpha	ts/ts_gtest.h	/^inline bool IsAlpha(char ch) {$/;"	f	namespace:std::tr1
IsBinaryFunction	core/cuda/functional.hpp	/^    template <typename F> struct IsBinaryFunction$/;"	s	namespace:cv::cuda::device
IsBinaryFunction	cudev/functional/functional.hpp	/^template <typename F> struct IsBinaryFunction$/;"	s	namespace:cv::cudev
IsContainer	ts/ts_gtest.h	/^typedef int IsContainer;$/;"	t	namespace:testing::internal
IsContainerTest	ts/ts_gtest.h	/^IsContainer IsContainerTest(int \/* dummy *\/,$/;"	f	namespace:testing::internal
IsContainerTest	ts/ts_gtest.h	/^IsNotContainer IsContainerTest(long \/* dummy *\/) { return '\\0'; }$/;"	f	namespace:testing::internal
IsDigit	ts/ts_gtest.h	/^inline bool IsDigit(char ch) {$/;"	f	namespace:std::tr1
IsDir	ts/ts_gtest.h	/^inline bool IsDir(const StatStruct& st) {$/;"	f	namespace:std::tr1::posix
IsEmpty	ts/ts_gtest.h	/^  bool IsEmpty() const { return pathname_.empty(); }$/;"	f	class:testing::internal::FilePath
IsFloat	core/cuda/detail/type_traits_detail.hpp	/^        template <> struct IsFloat<double> { enum {value = 1}; };$/;"	s	namespace:cv::cuda::device::type_traits_detail
IsFloat	core/cuda/detail/type_traits_detail.hpp	/^        template <> struct IsFloat<float> { enum {value = 1}; };$/;"	s	namespace:cv::cuda::device::type_traits_detail
IsFloat	core/cuda/detail/type_traits_detail.hpp	/^        template <typename T> struct IsFloat { enum {value = 0}; };$/;"	s	namespace:cv::cuda::device::type_traits_detail
IsFloat	cudev/util/detail/type_traits.hpp	/^    template <> struct IsFloat<double> { enum {value = 1}; };$/;"	s	namespace:cv::cudev::type_traits_detail
IsFloat	cudev/util/detail/type_traits.hpp	/^    template <> struct IsFloat<float> { enum {value = 1}; };$/;"	s	namespace:cv::cudev::type_traits_detail
IsFloat	cudev/util/detail/type_traits.hpp	/^    template <typename T> struct IsFloat { enum {value = 0}; };$/;"	s	namespace:cv::cudev::type_traits_detail
IsIntegral	core/cuda/detail/type_traits_detail.hpp	/^        template <> struct IsIntegral<bool> { enum {value = 1}; };$/;"	s	namespace:cv::cuda::device::type_traits_detail
IsIntegral	core/cuda/detail/type_traits_detail.hpp	/^        template <> struct IsIntegral<char> { enum {value = 1}; };$/;"	s	namespace:cv::cuda::device::type_traits_detail
IsIntegral	core/cuda/detail/type_traits_detail.hpp	/^        template <typename T> struct IsIntegral { enum {value = IsSignedIntergral<T>::value || IsUnsignedIntegral<T>::value}; };$/;"	s	namespace:cv::cuda::device::type_traits_detail
IsIntegral	cudev/util/detail/type_traits.hpp	/^    template <> struct IsIntegral<bool> { enum {value = 1}; };$/;"	s	namespace:cv::cudev::type_traits_detail
IsIntegral	cudev/util/detail/type_traits.hpp	/^    template <> struct IsIntegral<char> { enum {value = 1}; };$/;"	s	namespace:cv::cudev::type_traits_detail
IsIntegral	cudev/util/detail/type_traits.hpp	/^    template <typename T> struct IsIntegral { enum {value = IsSignedIntergral<T>::value || IsUnsignedIntegral<T>::value}; };$/;"	s	namespace:cv::cudev::type_traits_detail
IsLower	ts/ts_gtest.h	/^inline bool IsLower(char ch) {$/;"	f	namespace:std::tr1
IsNotContainer	ts/ts_gtest.h	/^typedef char IsNotContainer;$/;"	t	namespace:testing::internal
IsNull	core/wimage.hpp	/^    bool IsNull() const {return WImage<T>::image_ == NULL; }$/;"	f	class:cv::WImageBuffer
IsNull	core/wimage.hpp	/^    bool IsNull() const {return WImage<T>::image_ == NULL; }$/;"	f	class:cv::WImageBufferC
IsPowerOf2	core/cuda/detail/reduce.hpp	/^        template <unsigned int N> struct IsPowerOf2$/;"	s	namespace:cv::cuda::device::reduce_detail
IsPowerOf2	core/cuda/detail/reduce_key_val.hpp	/^        template <unsigned int N> struct IsPowerOf2$/;"	s	namespace:cv::cuda::device::reduce_key_val_detail
IsPowerOf2	cudev/util/type_traits.hpp	/^template <int N> struct IsPowerOf2$/;"	s	namespace:cv::cudev
IsSignedIntergral	core/cuda/detail/type_traits_detail.hpp	/^        template <> struct IsSignedIntergral<char1> { enum {value = 1}; };$/;"	s	namespace:cv::cuda::device::type_traits_detail
IsSignedIntergral	core/cuda/detail/type_traits_detail.hpp	/^        template <> struct IsSignedIntergral<int1> { enum {value = 1}; };$/;"	s	namespace:cv::cuda::device::type_traits_detail
IsSignedIntergral	core/cuda/detail/type_traits_detail.hpp	/^        template <> struct IsSignedIntergral<int> { enum {value = 1}; };$/;"	s	namespace:cv::cuda::device::type_traits_detail
IsSignedIntergral	core/cuda/detail/type_traits_detail.hpp	/^        template <> struct IsSignedIntergral<schar> { enum {value = 1}; };$/;"	s	namespace:cv::cuda::device::type_traits_detail
IsSignedIntergral	core/cuda/detail/type_traits_detail.hpp	/^        template <> struct IsSignedIntergral<short1> { enum {value = 1}; };$/;"	s	namespace:cv::cuda::device::type_traits_detail
IsSignedIntergral	core/cuda/detail/type_traits_detail.hpp	/^        template <> struct IsSignedIntergral<short> { enum {value = 1}; };$/;"	s	namespace:cv::cuda::device::type_traits_detail
IsSignedIntergral	core/cuda/detail/type_traits_detail.hpp	/^        template <typename T> struct IsSignedIntergral { enum {value = 0}; };$/;"	s	namespace:cv::cuda::device::type_traits_detail
IsSignedIntergral	cudev/util/detail/type_traits.hpp	/^    template <> struct IsSignedIntergral<int> { enum {value = 1}; };$/;"	s	namespace:cv::cudev::type_traits_detail
IsSignedIntergral	cudev/util/detail/type_traits.hpp	/^    template <> struct IsSignedIntergral<schar> { enum {value = 1}; };$/;"	s	namespace:cv::cudev::type_traits_detail
IsSignedIntergral	cudev/util/detail/type_traits.hpp	/^    template <> struct IsSignedIntergral<short> { enum {value = 1}; };$/;"	s	namespace:cv::cudev::type_traits_detail
IsSignedIntergral	cudev/util/detail/type_traits.hpp	/^    template <typename T> struct IsSignedIntergral { enum {value = 0}; };$/;"	s	namespace:cv::cudev::type_traits_detail
IsSimpleParameter	core/cuda/type_traits.hpp	/^    template <typename T> struct IsSimpleParameter$/;"	s	namespace:cv::cuda::device
IsSimpleParameter	cudev/util/detail/type_traits.hpp	/^    template <typename T> struct IsSimpleParameter$/;"	s	namespace:cv::cudev::type_traits_detail
IsSpace	ts/ts_gtest.h	/^inline bool IsSpace(char ch) {$/;"	f	namespace:std::tr1
IsUnaryFunction	core/cuda/functional.hpp	/^    template <typename F> struct IsUnaryFunction$/;"	s	namespace:cv::cuda::device
IsUnaryFunction	cudev/functional/functional.hpp	/^template <typename F> struct IsUnaryFunction$/;"	s	namespace:cv::cudev
IsUnsignedIntegral	core/cuda/detail/type_traits_detail.hpp	/^        template <> struct IsUnsignedIntegral<uchar1> { enum {value = 1}; };$/;"	s	namespace:cv::cuda::device::type_traits_detail
IsUnsignedIntegral	core/cuda/detail/type_traits_detail.hpp	/^        template <> struct IsUnsignedIntegral<uchar> { enum {value = 1}; };$/;"	s	namespace:cv::cuda::device::type_traits_detail
IsUnsignedIntegral	core/cuda/detail/type_traits_detail.hpp	/^        template <> struct IsUnsignedIntegral<uint1> { enum {value = 1}; };$/;"	s	namespace:cv::cuda::device::type_traits_detail
IsUnsignedIntegral	core/cuda/detail/type_traits_detail.hpp	/^        template <> struct IsUnsignedIntegral<uint> { enum {value = 1}; };$/;"	s	namespace:cv::cuda::device::type_traits_detail
IsUnsignedIntegral	core/cuda/detail/type_traits_detail.hpp	/^        template <> struct IsUnsignedIntegral<ushort1> { enum {value = 1}; };$/;"	s	namespace:cv::cuda::device::type_traits_detail
IsUnsignedIntegral	core/cuda/detail/type_traits_detail.hpp	/^        template <> struct IsUnsignedIntegral<ushort> { enum {value = 1}; };$/;"	s	namespace:cv::cuda::device::type_traits_detail
IsUnsignedIntegral	core/cuda/detail/type_traits_detail.hpp	/^        template <typename T> struct IsUnsignedIntegral { enum {value = 0}; };$/;"	s	namespace:cv::cuda::device::type_traits_detail
IsUnsignedIntegral	cudev/util/detail/type_traits.hpp	/^    template <> struct IsUnsignedIntegral<uchar> { enum {value = 1}; };$/;"	s	namespace:cv::cudev::type_traits_detail
IsUnsignedIntegral	cudev/util/detail/type_traits.hpp	/^    template <> struct IsUnsignedIntegral<uint> { enum {value = 1}; };$/;"	s	namespace:cv::cudev::type_traits_detail
IsUnsignedIntegral	cudev/util/detail/type_traits.hpp	/^    template <> struct IsUnsignedIntegral<ushort> { enum {value = 1}; };$/;"	s	namespace:cv::cudev::type_traits_detail
IsUnsignedIntegral	cudev/util/detail/type_traits.hpp	/^    template <typename T> struct IsUnsignedIntegral { enum {value = 0}; };$/;"	s	namespace:cv::cudev::type_traits_detail
IsUpper	ts/ts_gtest.h	/^inline bool IsUpper(char ch) {$/;"	f	namespace:std::tr1
IsVec	core/cuda/detail/type_traits_detail.hpp	/^        template <> struct IsVec<char1> { enum {value = 1}; };$/;"	s	namespace:cv::cuda::device::type_traits_detail
IsVec	core/cuda/detail/type_traits_detail.hpp	/^        template <> struct IsVec<char2> { enum {value = 1}; };$/;"	s	namespace:cv::cuda::device::type_traits_detail
IsVec	core/cuda/detail/type_traits_detail.hpp	/^        template <> struct IsVec<char3> { enum {value = 1}; };$/;"	s	namespace:cv::cuda::device::type_traits_detail
IsVec	core/cuda/detail/type_traits_detail.hpp	/^        template <> struct IsVec<char4> { enum {value = 1}; };$/;"	s	namespace:cv::cuda::device::type_traits_detail
IsVec	core/cuda/detail/type_traits_detail.hpp	/^        template <> struct IsVec<char8> { enum {value = 1}; };$/;"	s	namespace:cv::cuda::device::type_traits_detail
IsVec	core/cuda/detail/type_traits_detail.hpp	/^        template <> struct IsVec<double1> { enum {value = 1}; };$/;"	s	namespace:cv::cuda::device::type_traits_detail
IsVec	core/cuda/detail/type_traits_detail.hpp	/^        template <> struct IsVec<double2> { enum {value = 1}; };$/;"	s	namespace:cv::cuda::device::type_traits_detail
IsVec	core/cuda/detail/type_traits_detail.hpp	/^        template <> struct IsVec<double3> { enum {value = 1}; };$/;"	s	namespace:cv::cuda::device::type_traits_detail
IsVec	core/cuda/detail/type_traits_detail.hpp	/^        template <> struct IsVec<double4> { enum {value = 1}; };$/;"	s	namespace:cv::cuda::device::type_traits_detail
IsVec	core/cuda/detail/type_traits_detail.hpp	/^        template <> struct IsVec<double8> { enum {value = 1}; };$/;"	s	namespace:cv::cuda::device::type_traits_detail
IsVec	core/cuda/detail/type_traits_detail.hpp	/^        template <> struct IsVec<float1> { enum {value = 1}; };$/;"	s	namespace:cv::cuda::device::type_traits_detail
IsVec	core/cuda/detail/type_traits_detail.hpp	/^        template <> struct IsVec<float2> { enum {value = 1}; };$/;"	s	namespace:cv::cuda::device::type_traits_detail
IsVec	core/cuda/detail/type_traits_detail.hpp	/^        template <> struct IsVec<float3> { enum {value = 1}; };$/;"	s	namespace:cv::cuda::device::type_traits_detail
IsVec	core/cuda/detail/type_traits_detail.hpp	/^        template <> struct IsVec<float4> { enum {value = 1}; };$/;"	s	namespace:cv::cuda::device::type_traits_detail
IsVec	core/cuda/detail/type_traits_detail.hpp	/^        template <> struct IsVec<float8> { enum {value = 1}; };$/;"	s	namespace:cv::cuda::device::type_traits_detail
IsVec	core/cuda/detail/type_traits_detail.hpp	/^        template <> struct IsVec<int1> { enum {value = 1}; };$/;"	s	namespace:cv::cuda::device::type_traits_detail
IsVec	core/cuda/detail/type_traits_detail.hpp	/^        template <> struct IsVec<int2> { enum {value = 1}; };$/;"	s	namespace:cv::cuda::device::type_traits_detail
IsVec	core/cuda/detail/type_traits_detail.hpp	/^        template <> struct IsVec<int3> { enum {value = 1}; };$/;"	s	namespace:cv::cuda::device::type_traits_detail
IsVec	core/cuda/detail/type_traits_detail.hpp	/^        template <> struct IsVec<int4> { enum {value = 1}; };$/;"	s	namespace:cv::cuda::device::type_traits_detail
IsVec	core/cuda/detail/type_traits_detail.hpp	/^        template <> struct IsVec<int8> { enum {value = 1}; };$/;"	s	namespace:cv::cuda::device::type_traits_detail
IsVec	core/cuda/detail/type_traits_detail.hpp	/^        template <> struct IsVec<short1> { enum {value = 1}; };$/;"	s	namespace:cv::cuda::device::type_traits_detail
IsVec	core/cuda/detail/type_traits_detail.hpp	/^        template <> struct IsVec<short2> { enum {value = 1}; };$/;"	s	namespace:cv::cuda::device::type_traits_detail
IsVec	core/cuda/detail/type_traits_detail.hpp	/^        template <> struct IsVec<short3> { enum {value = 1}; };$/;"	s	namespace:cv::cuda::device::type_traits_detail
IsVec	core/cuda/detail/type_traits_detail.hpp	/^        template <> struct IsVec<short4> { enum {value = 1}; };$/;"	s	namespace:cv::cuda::device::type_traits_detail
IsVec	core/cuda/detail/type_traits_detail.hpp	/^        template <> struct IsVec<short8> { enum {value = 1}; };$/;"	s	namespace:cv::cuda::device::type_traits_detail
IsVec	core/cuda/detail/type_traits_detail.hpp	/^        template <> struct IsVec<uchar1> { enum {value = 1}; };$/;"	s	namespace:cv::cuda::device::type_traits_detail
IsVec	core/cuda/detail/type_traits_detail.hpp	/^        template <> struct IsVec<uchar2> { enum {value = 1}; };$/;"	s	namespace:cv::cuda::device::type_traits_detail
IsVec	core/cuda/detail/type_traits_detail.hpp	/^        template <> struct IsVec<uchar3> { enum {value = 1}; };$/;"	s	namespace:cv::cuda::device::type_traits_detail
IsVec	core/cuda/detail/type_traits_detail.hpp	/^        template <> struct IsVec<uchar4> { enum {value = 1}; };$/;"	s	namespace:cv::cuda::device::type_traits_detail
IsVec	core/cuda/detail/type_traits_detail.hpp	/^        template <> struct IsVec<uchar8> { enum {value = 1}; };$/;"	s	namespace:cv::cuda::device::type_traits_detail
IsVec	core/cuda/detail/type_traits_detail.hpp	/^        template <> struct IsVec<uint1> { enum {value = 1}; };$/;"	s	namespace:cv::cuda::device::type_traits_detail
IsVec	core/cuda/detail/type_traits_detail.hpp	/^        template <> struct IsVec<uint2> { enum {value = 1}; };$/;"	s	namespace:cv::cuda::device::type_traits_detail
IsVec	core/cuda/detail/type_traits_detail.hpp	/^        template <> struct IsVec<uint3> { enum {value = 1}; };$/;"	s	namespace:cv::cuda::device::type_traits_detail
IsVec	core/cuda/detail/type_traits_detail.hpp	/^        template <> struct IsVec<uint4> { enum {value = 1}; };$/;"	s	namespace:cv::cuda::device::type_traits_detail
IsVec	core/cuda/detail/type_traits_detail.hpp	/^        template <> struct IsVec<uint8> { enum {value = 1}; };$/;"	s	namespace:cv::cuda::device::type_traits_detail
IsVec	core/cuda/detail/type_traits_detail.hpp	/^        template <> struct IsVec<ushort1> { enum {value = 1}; };$/;"	s	namespace:cv::cuda::device::type_traits_detail
IsVec	core/cuda/detail/type_traits_detail.hpp	/^        template <> struct IsVec<ushort2> { enum {value = 1}; };$/;"	s	namespace:cv::cuda::device::type_traits_detail
IsVec	core/cuda/detail/type_traits_detail.hpp	/^        template <> struct IsVec<ushort3> { enum {value = 1}; };$/;"	s	namespace:cv::cuda::device::type_traits_detail
IsVec	core/cuda/detail/type_traits_detail.hpp	/^        template <> struct IsVec<ushort4> { enum {value = 1}; };$/;"	s	namespace:cv::cuda::device::type_traits_detail
IsVec	core/cuda/detail/type_traits_detail.hpp	/^        template <> struct IsVec<ushort8> { enum {value = 1}; };$/;"	s	namespace:cv::cuda::device::type_traits_detail
IsVec	core/cuda/detail/type_traits_detail.hpp	/^        template <typename T> struct IsVec { enum {value = 0}; };$/;"	s	namespace:cv::cuda::device::type_traits_detail
IsVec	cudev/util/detail/type_traits.hpp	/^    template <> struct IsVec<char1> { enum {value = 1}; };$/;"	s	namespace:cv::cudev::type_traits_detail
IsVec	cudev/util/detail/type_traits.hpp	/^    template <> struct IsVec<char2> { enum {value = 1}; };$/;"	s	namespace:cv::cudev::type_traits_detail
IsVec	cudev/util/detail/type_traits.hpp	/^    template <> struct IsVec<char3> { enum {value = 1}; };$/;"	s	namespace:cv::cudev::type_traits_detail
IsVec	cudev/util/detail/type_traits.hpp	/^    template <> struct IsVec<char4> { enum {value = 1}; };$/;"	s	namespace:cv::cudev::type_traits_detail
IsVec	cudev/util/detail/type_traits.hpp	/^    template <> struct IsVec<double1> { enum {value = 1}; };$/;"	s	namespace:cv::cudev::type_traits_detail
IsVec	cudev/util/detail/type_traits.hpp	/^    template <> struct IsVec<double2> { enum {value = 1}; };$/;"	s	namespace:cv::cudev::type_traits_detail
IsVec	cudev/util/detail/type_traits.hpp	/^    template <> struct IsVec<double3> { enum {value = 1}; };$/;"	s	namespace:cv::cudev::type_traits_detail
IsVec	cudev/util/detail/type_traits.hpp	/^    template <> struct IsVec<double4> { enum {value = 1}; };$/;"	s	namespace:cv::cudev::type_traits_detail
IsVec	cudev/util/detail/type_traits.hpp	/^    template <> struct IsVec<float1> { enum {value = 1}; };$/;"	s	namespace:cv::cudev::type_traits_detail
IsVec	cudev/util/detail/type_traits.hpp	/^    template <> struct IsVec<float2> { enum {value = 1}; };$/;"	s	namespace:cv::cudev::type_traits_detail
IsVec	cudev/util/detail/type_traits.hpp	/^    template <> struct IsVec<float3> { enum {value = 1}; };$/;"	s	namespace:cv::cudev::type_traits_detail
IsVec	cudev/util/detail/type_traits.hpp	/^    template <> struct IsVec<float4> { enum {value = 1}; };$/;"	s	namespace:cv::cudev::type_traits_detail
IsVec	cudev/util/detail/type_traits.hpp	/^    template <> struct IsVec<int1> { enum {value = 1}; };$/;"	s	namespace:cv::cudev::type_traits_detail
IsVec	cudev/util/detail/type_traits.hpp	/^    template <> struct IsVec<int2> { enum {value = 1}; };$/;"	s	namespace:cv::cudev::type_traits_detail
IsVec	cudev/util/detail/type_traits.hpp	/^    template <> struct IsVec<int3> { enum {value = 1}; };$/;"	s	namespace:cv::cudev::type_traits_detail
IsVec	cudev/util/detail/type_traits.hpp	/^    template <> struct IsVec<int4> { enum {value = 1}; };$/;"	s	namespace:cv::cudev::type_traits_detail
IsVec	cudev/util/detail/type_traits.hpp	/^    template <> struct IsVec<short1> { enum {value = 1}; };$/;"	s	namespace:cv::cudev::type_traits_detail
IsVec	cudev/util/detail/type_traits.hpp	/^    template <> struct IsVec<short2> { enum {value = 1}; };$/;"	s	namespace:cv::cudev::type_traits_detail
IsVec	cudev/util/detail/type_traits.hpp	/^    template <> struct IsVec<short3> { enum {value = 1}; };$/;"	s	namespace:cv::cudev::type_traits_detail
IsVec	cudev/util/detail/type_traits.hpp	/^    template <> struct IsVec<short4> { enum {value = 1}; };$/;"	s	namespace:cv::cudev::type_traits_detail
IsVec	cudev/util/detail/type_traits.hpp	/^    template <> struct IsVec<uchar1> { enum {value = 1}; };$/;"	s	namespace:cv::cudev::type_traits_detail
IsVec	cudev/util/detail/type_traits.hpp	/^    template <> struct IsVec<uchar2> { enum {value = 1}; };$/;"	s	namespace:cv::cudev::type_traits_detail
IsVec	cudev/util/detail/type_traits.hpp	/^    template <> struct IsVec<uchar3> { enum {value = 1}; };$/;"	s	namespace:cv::cudev::type_traits_detail
IsVec	cudev/util/detail/type_traits.hpp	/^    template <> struct IsVec<uchar4> { enum {value = 1}; };$/;"	s	namespace:cv::cudev::type_traits_detail
IsVec	cudev/util/detail/type_traits.hpp	/^    template <> struct IsVec<uint1> { enum {value = 1}; };$/;"	s	namespace:cv::cudev::type_traits_detail
IsVec	cudev/util/detail/type_traits.hpp	/^    template <> struct IsVec<uint2> { enum {value = 1}; };$/;"	s	namespace:cv::cudev::type_traits_detail
IsVec	cudev/util/detail/type_traits.hpp	/^    template <> struct IsVec<uint3> { enum {value = 1}; };$/;"	s	namespace:cv::cudev::type_traits_detail
IsVec	cudev/util/detail/type_traits.hpp	/^    template <> struct IsVec<uint4> { enum {value = 1}; };$/;"	s	namespace:cv::cudev::type_traits_detail
IsVec	cudev/util/detail/type_traits.hpp	/^    template <> struct IsVec<ushort1> { enum {value = 1}; };$/;"	s	namespace:cv::cudev::type_traits_detail
IsVec	cudev/util/detail/type_traits.hpp	/^    template <> struct IsVec<ushort2> { enum {value = 1}; };$/;"	s	namespace:cv::cudev::type_traits_detail
IsVec	cudev/util/detail/type_traits.hpp	/^    template <> struct IsVec<ushort3> { enum {value = 1}; };$/;"	s	namespace:cv::cudev::type_traits_detail
IsVec	cudev/util/detail/type_traits.hpp	/^    template <> struct IsVec<ushort4> { enum {value = 1}; };$/;"	s	namespace:cv::cudev::type_traits_detail
IsVec	cudev/util/detail/type_traits.hpp	/^    template <typename T> struct IsVec { enum {value = 0}; };$/;"	s	namespace:cv::cudev::type_traits_detail
IsXDigit	ts/ts_gtest.h	/^inline bool IsXDigit(char ch) {$/;"	f	namespace:std::tr1
IsXDigit	ts/ts_gtest.h	/^inline bool IsXDigit(wchar_t ch) {$/;"	f	namespace:std::tr1
Iterator	ts/ts_gtest.h	/^    Iterator(const Iterator& other)$/;"	f	class:testing::internal::CartesianProductGenerator10::Iterator
Iterator	ts/ts_gtest.h	/^    Iterator(const Iterator& other)$/;"	f	class:testing::internal::CartesianProductGenerator2::Iterator
Iterator	ts/ts_gtest.h	/^    Iterator(const Iterator& other)$/;"	f	class:testing::internal::CartesianProductGenerator3::Iterator
Iterator	ts/ts_gtest.h	/^    Iterator(const Iterator& other)$/;"	f	class:testing::internal::CartesianProductGenerator4::Iterator
Iterator	ts/ts_gtest.h	/^    Iterator(const Iterator& other)$/;"	f	class:testing::internal::CartesianProductGenerator5::Iterator
Iterator	ts/ts_gtest.h	/^    Iterator(const Iterator& other)$/;"	f	class:testing::internal::CartesianProductGenerator6::Iterator
Iterator	ts/ts_gtest.h	/^    Iterator(const Iterator& other)$/;"	f	class:testing::internal::CartesianProductGenerator7::Iterator
Iterator	ts/ts_gtest.h	/^    Iterator(const Iterator& other)$/;"	f	class:testing::internal::CartesianProductGenerator8::Iterator
Iterator	ts/ts_gtest.h	/^    Iterator(const Iterator& other)$/;"	f	class:testing::internal::CartesianProductGenerator9::Iterator
Iterator	ts/ts_gtest.h	/^    Iterator(const Iterator& other)$/;"	f	class:testing::internal::RangeGenerator::Iterator
Iterator	ts/ts_gtest.h	/^    Iterator(const Iterator& other)$/;"	f	class:testing::internal::ValuesInIteratorRangeGenerator::Iterator
Iterator	ts/ts_gtest.h	/^    Iterator(const ParamGeneratorInterface<ParamType>* base,$/;"	f	class:testing::internal::CartesianProductGenerator10::Iterator
Iterator	ts/ts_gtest.h	/^    Iterator(const ParamGeneratorInterface<ParamType>* base,$/;"	f	class:testing::internal::CartesianProductGenerator2::Iterator
Iterator	ts/ts_gtest.h	/^    Iterator(const ParamGeneratorInterface<ParamType>* base,$/;"	f	class:testing::internal::CartesianProductGenerator3::Iterator
Iterator	ts/ts_gtest.h	/^    Iterator(const ParamGeneratorInterface<ParamType>* base,$/;"	f	class:testing::internal::CartesianProductGenerator4::Iterator
Iterator	ts/ts_gtest.h	/^    Iterator(const ParamGeneratorInterface<ParamType>* base,$/;"	f	class:testing::internal::CartesianProductGenerator5::Iterator
Iterator	ts/ts_gtest.h	/^    Iterator(const ParamGeneratorInterface<ParamType>* base,$/;"	f	class:testing::internal::CartesianProductGenerator6::Iterator
Iterator	ts/ts_gtest.h	/^    Iterator(const ParamGeneratorInterface<ParamType>* base,$/;"	f	class:testing::internal::CartesianProductGenerator7::Iterator
Iterator	ts/ts_gtest.h	/^    Iterator(const ParamGeneratorInterface<ParamType>* base,$/;"	f	class:testing::internal::CartesianProductGenerator8::Iterator
Iterator	ts/ts_gtest.h	/^    Iterator(const ParamGeneratorInterface<ParamType>* base,$/;"	f	class:testing::internal::CartesianProductGenerator9::Iterator
Iterator	ts/ts_gtest.h	/^    Iterator(const ParamGeneratorInterface<T>* base, T value, int index,$/;"	f	class:testing::internal::RangeGenerator::Iterator
Iterator	ts/ts_gtest.h	/^    Iterator(const ParamGeneratorInterface<T>* base,$/;"	f	class:testing::internal::ValuesInIteratorRangeGenerator::Iterator
Iterator	ts/ts_gtest.h	/^  class Iterator : public ParamIteratorInterface<ParamType> {$/;"	c	class:testing::internal::CartesianProductGenerator10
Iterator	ts/ts_gtest.h	/^  class Iterator : public ParamIteratorInterface<ParamType> {$/;"	c	class:testing::internal::CartesianProductGenerator2
Iterator	ts/ts_gtest.h	/^  class Iterator : public ParamIteratorInterface<ParamType> {$/;"	c	class:testing::internal::CartesianProductGenerator3
Iterator	ts/ts_gtest.h	/^  class Iterator : public ParamIteratorInterface<ParamType> {$/;"	c	class:testing::internal::CartesianProductGenerator4
Iterator	ts/ts_gtest.h	/^  class Iterator : public ParamIteratorInterface<ParamType> {$/;"	c	class:testing::internal::CartesianProductGenerator5
Iterator	ts/ts_gtest.h	/^  class Iterator : public ParamIteratorInterface<ParamType> {$/;"	c	class:testing::internal::CartesianProductGenerator6
Iterator	ts/ts_gtest.h	/^  class Iterator : public ParamIteratorInterface<ParamType> {$/;"	c	class:testing::internal::CartesianProductGenerator7
Iterator	ts/ts_gtest.h	/^  class Iterator : public ParamIteratorInterface<ParamType> {$/;"	c	class:testing::internal::CartesianProductGenerator8
Iterator	ts/ts_gtest.h	/^  class Iterator : public ParamIteratorInterface<ParamType> {$/;"	c	class:testing::internal::CartesianProductGenerator9
Iterator	ts/ts_gtest.h	/^  class Iterator : public ParamIteratorInterface<T> {$/;"	c	class:testing::internal::RangeGenerator
Iterator	ts/ts_gtest.h	/^  class Iterator : public ParamIteratorInterface<T> {$/;"	c	class:testing::internal::ValuesInIteratorRangeGenerator
IteratorTraits	ts/ts_gtest.h	/^struct IteratorTraits {$/;"	s	namespace:std::tr1
IteratorTraits	ts/ts_gtest.h	/^struct IteratorTraits<T*> {$/;"	s	namespace:std::tr1
IteratorTraits	ts/ts_gtest.h	/^struct IteratorTraits<const T*> {$/;"	s	namespace:std::tr1
J	calib3d/calib3d_c.h	/^    cv::Ptr<CvMat> J;$/;"	m	class:CvLevMarq
JPEG	cudacodec.hpp	/^    JPEG,$/;"	e	enum:cv::cudacodec::Codec
Join	ts/ts_gtest.h	/^  void Join() {$/;"	f	class:std::tr1::ThreadWithParam
JtErr	calib3d/calib3d_c.h	/^    cv::Ptr<CvMat> JtErr;$/;"	m	class:CvLevMarq
JtJ	calib3d/calib3d_c.h	/^    cv::Ptr<CvMat> JtJ;$/;"	m	class:CvLevMarq
JtJN	calib3d/calib3d_c.h	/^    cv::Ptr<CvMat> JtJN;$/;"	m	class:CvLevMarq
JtJV	calib3d/calib3d_c.h	/^    cv::Ptr<CvMat> JtJV;$/;"	m	class:CvLevMarq
JtJW	calib3d/calib3d_c.h	/^    cv::Ptr<CvMat> JtJW;$/;"	m	class:CvLevMarq
KAZE	features2d.hpp	/^class CV_EXPORTS_W KAZE : public Feature2D$/;"	c	namespace:cv
KDTREE	flann/defines.h	/^    KDTREE = 1,$/;"	e	enum:cvflann::flann_algorithm_t
KDTREE	ml.hpp	/^        KDTREE=2$/;"	e	enum:cv::ml::KNearest::Types
KDTREE_SINGLE	flann/defines.h	/^    KDTREE_SINGLE = 4,$/;"	e	enum:cvflann::flann_algorithm_t
KDTreeIndex	flann/kdtree_index.h	/^    KDTreeIndex(const Matrix<ElementType>& inputData, const IndexParams& params = KDTreeIndexParams(),$/;"	f	class:cvflann::KDTreeIndex
KDTreeIndex	flann/kdtree_index.h	/^class KDTreeIndex : public NNIndex<Distance>$/;"	c	namespace:cvflann
KDTreeIndexParams	flann/kdtree_index.h	/^    KDTreeIndexParams(int trees = 4)$/;"	f	struct:cvflann::KDTreeIndexParams
KDTreeIndexParams	flann/kdtree_index.h	/^struct KDTreeIndexParams : public IndexParams$/;"	s	namespace:cvflann
KDTreeIndexParams	flann/miniflann.hpp	/^struct CV_EXPORTS KDTreeIndexParams : public IndexParams$/;"	s	namespace:cv::flann
KDTreeSingleIndex	flann/kdtree_single_index.h	/^    KDTreeSingleIndex(const Matrix<ElementType>& inputData, const IndexParams& params = KDTreeSingleIndexParams(),$/;"	f	class:cvflann::KDTreeSingleIndex
KDTreeSingleIndex	flann/kdtree_single_index.h	/^class KDTreeSingleIndex : public NNIndex<Distance>$/;"	c	namespace:cvflann
KDTreeSingleIndexParams	flann/kdtree_single_index.h	/^    KDTreeSingleIndexParams(int leaf_max_size = 10, bool reorder = true, int dim = -1)$/;"	f	struct:cvflann::KDTreeSingleIndexParams
KDTreeSingleIndexParams	flann/kdtree_single_index.h	/^struct KDTreeSingleIndexParams : public IndexParams$/;"	s	namespace:cvflann
KEY_DOWN	viz/types.hpp	/^            enum Action { KEY_UP = 0, KEY_DOWN = 1 };$/;"	e	enum:cv::viz::KeyboardEvent::Action
KEY_UP	viz/types.hpp	/^            enum Action { KEY_UP = 0, KEY_DOWN = 1 };$/;"	e	enum:cv::viz::KeyboardEvent::Action
KIND_MASK	core/mat.hpp	/^        KIND_MASK = 31 << KIND_SHIFT,$/;"	e	enum:cv::_InputArray::__anon135
KIND_SHIFT	core/mat.hpp	/^        KIND_SHIFT = 16,$/;"	e	enum:cv::_InputArray::__anon135
KL	flann/defines.h	/^    KL         = 8,$/;"	e	enum:cvflann::flann_distance_t
KL_Divergence	flann/dist.h	/^struct KL_Divergence$/;"	s	namespace:cvflann
KMEANS	flann/defines.h	/^    KMEANS = 2,$/;"	e	enum:cvflann::flann_algorithm_t
KMEANS_PP_CENTERS	core.hpp	/^    KMEANS_PP_CENTERS         = 2,$/;"	e	enum:cv::KmeansFlags
KMEANS_RANDOM_CENTERS	core.hpp	/^    KMEANS_RANDOM_CENTERS     = 0,$/;"	e	enum:cv::KmeansFlags
KMEANS_USE_INITIAL_LABELS	core.hpp	/^    KMEANS_USE_INITIAL_LABELS = 1$/;"	e	enum:cv::KmeansFlags
KMeansDistanceComputer	flann/kmeans_index.h	/^        KMeansDistanceComputer(Distance _distance, const Matrix<ElementType>& _dataset,$/;"	f	class:cvflann::KMeansIndex::KMeansDistanceComputer
KMeansDistanceComputer	flann/kmeans_index.h	/^    class KMeansDistanceComputer : public cv::ParallelLoopBody$/;"	c	class:cvflann::KMeansIndex
KMeansIndex	flann/kmeans_index.h	/^    KMeansIndex(const Matrix<ElementType>& inputData, const IndexParams& params = KMeansIndexParams(),$/;"	f	class:cvflann::KMeansIndex
KMeansIndex	flann/kmeans_index.h	/^class KMeansIndex : public NNIndex<Distance>$/;"	c	namespace:cvflann
KMeansIndexParams	flann/kmeans_index.h	/^    KMeansIndexParams(int branching = 32, int iterations = 11,$/;"	f	struct:cvflann::KMeansIndexParams
KMeansIndexParams	flann/kmeans_index.h	/^struct KMeansIndexParams : public IndexParams$/;"	s	namespace:cvflann
KMeansIndexParams	flann/miniflann.hpp	/^struct CV_EXPORTS KMeansIndexParams : public IndexParams$/;"	s	namespace:cv::flann
KMeansNode	flann/kmeans_index.h	/^    struct KMeansNode$/;"	s	class:cvflann::KMeansIndex
KMeansNodePtr	flann/kmeans_index.h	/^    typedef KMeansNode* KMeansNodePtr;$/;"	t	class:cvflann::KMeansIndex
KNNRadiusUniqueResultSet	flann/result_set.h	/^    KNNRadiusUniqueResultSet(unsigned int capacity, DistanceType radius)$/;"	f	class:cvflann::KNNRadiusUniqueResultSet
KNNRadiusUniqueResultSet	flann/result_set.h	/^class KNNRadiusUniqueResultSet : public KNNUniqueResultSet<DistanceType>$/;"	c	namespace:cvflann
KNNResultSet	flann/result_set.h	/^    KNNResultSet(int capacity_) : capacity(capacity_), count(0)$/;"	f	class:cvflann::KNNResultSet
KNNResultSet	flann/result_set.h	/^class KNNResultSet : public ResultSet<DistanceType>$/;"	c	namespace:cvflann
KNNSimpleResultSet	flann/result_set.h	/^    KNNSimpleResultSet(int capacity_) : capacity(capacity_), count(0)$/;"	f	class:cvflann::KNNSimpleResultSet
KNNSimpleResultSet	flann/result_set.h	/^class KNNSimpleResultSet : public ResultSet<DistanceType>$/;"	c	namespace:cvflann
KNNUniqueResultSet	flann/result_set.h	/^    KNNUniqueResultSet(unsigned int capacity) : capacity_(capacity)$/;"	f	class:cvflann::KNNUniqueResultSet
KNNUniqueResultSet	flann/result_set.h	/^class KNNUniqueResultSet : public UniqueResultSet<DistanceType>$/;"	c	namespace:cvflann
KNOWN	videostab/fast_marching.hpp	/^    enum { INSIDE = 0, BAND = 1, KNOWN = 255 };$/;"	e	enum:cv::videostab::FastMarchingMethod::__anon71
KNearest	ml.hpp	/^class CV_EXPORTS_W KNearest : public StatModel$/;"	c	namespace:cv::ml
KULLBACK_LEIBLER	flann/defines.h	/^    KULLBACK_LEIBLER  = 8$/;"	e	enum:cvflann::flann_distance_t
K_LOG2_WARP_SIZE	cudalegacy/NCV.hpp	/^const Ncv32u K_LOG2_WARP_SIZE = 5;$/;"	v
K_WARP_SIZE	cudalegacy/NCV.hpp	/^const Ncv32u K_WARP_SIZE = 32;$/;"	v
KalmGainMatr	video/tracking_c.h	/^    float* KalmGainMatr;        \/* =gain->data.fl *\/$/;"	m	struct:CvKalman
KalmanFilter	video/tracking.hpp	/^class CV_EXPORTS_W KalmanFilter$/;"	c	namespace:cv
Kernel	core/ocl.hpp	/^class CV_EXPORTS Kernel$/;"	c	namespace:cv::ocl
Kernel	core/ocl.hpp	/^class CV_EXPORTS Kernel;$/;"	m	namespace:cv::ocl	typeref:class:cv::ocl::CV_EXPORTS
Kernel	ml.hpp	/^    class CV_EXPORTS Kernel : public Algorithm$/;"	c	class:cv::ml::SVM
KernelArg	core/ocl.hpp	/^class CV_EXPORTS KernelArg$/;"	c	namespace:cv::ocl
KernelTypes	ml.hpp	/^    enum KernelTypes {$/;"	g	class:cv::ml::SVM
KeyPoint	core/base.hpp	/^class CV_EXPORTS KeyPoint;$/;"	m	namespace:cv	typeref:class:cv::CV_EXPORTS
KeyPoint	core/types.hpp	/^KeyPoint::KeyPoint()$/;"	f	class:cv::KeyPoint
KeyPoint	core/types.hpp	/^KeyPoint::KeyPoint(Point2f _pt, float _size, float _angle, float _response, int _octave, int _class_id)$/;"	f	class:cv::KeyPoint
KeyPoint	core/types.hpp	/^KeyPoint::KeyPoint(float x, float y, float _size, float _angle, float _response, int _octave, int _class_id)$/;"	f	class:cv::KeyPoint
KeyPoint	core/types.hpp	/^class CV_EXPORTS_W_SIMPLE KeyPoint$/;"	c	namespace:cv
KeyPointsFilter	features2d.hpp	/^    KeyPointsFilter(){}$/;"	f	class:cv::KeyPointsFilter
KeyPointsFilter	features2d.hpp	/^class CV_EXPORTS KeyPointsFilter$/;"	c	namespace:cv
KeyboardCallback	viz/viz3d.hpp	/^            typedef void (*KeyboardCallback)(const KeyboardEvent&, void*);$/;"	t	class:cv::viz::Viz3d
KeyboardEvent	viz/types.hpp	/^        class CV_EXPORTS KeyboardEvent$/;"	c	namespace:cv::viz
KeypointBasedMotionEstimator	videostab/global_motion.hpp	/^class CV_EXPORTS KeypointBasedMotionEstimator : public ImageMotionEstimatorBase$/;"	c	namespace:cv::videostab
KeypointBasedMotionEstimatorGpu	videostab/global_motion.hpp	/^class CV_EXPORTS KeypointBasedMotionEstimatorGpu : public ImageMotionEstimatorBase$/;"	c	namespace:cv::videostab
KeypointGreater	ts/ts_perf.hpp	/^struct CV_EXPORTS KeypointGreater :$/;"	s	namespace:perf::comparators
KilledBySignal	ts/ts_gtest.h	/^class GTEST_API_ KilledBySignal {$/;"	c	namespace:testing
KmeansFlags	core.hpp	/^enum KmeansFlags {$/;"	g	namespace:cv
L1	features2d.hpp	/^struct CV_EXPORTS L1$/;"	s	namespace:cv
L1	flann/dist.h	/^struct L1$/;"	s	namespace:cvflann
L1Dist	core/cuda/vec_distance.hpp	/^        __device__ __forceinline__ L1Dist() : mySum(0) {}$/;"	f	struct:cv::cuda::device::L1Dist
L1Dist	core/cuda/vec_distance.hpp	/^        __device__ __forceinline__ L1Dist() : mySum(0.0f) {}$/;"	f	struct:cv::cuda::device::L1Dist
L1Dist	core/cuda/vec_distance.hpp	/^    template <> struct L1Dist<float>$/;"	s	namespace:cv::cuda::device
L1Dist	core/cuda/vec_distance.hpp	/^    template <typename T> struct L1Dist$/;"	s	namespace:cv::cuda::device
L2	features2d.hpp	/^struct CV_EXPORTS L2$/;"	s	namespace:cv
L2	flann/dist.h	/^struct L2$/;"	s	namespace:cvflann
L2Dist	core/cuda/vec_distance.hpp	/^        __device__ __forceinline__ L2Dist() : mySum(0.0f) {}$/;"	f	struct:cv::cuda::device::L2Dist
L2Dist	core/cuda/vec_distance.hpp	/^    struct L2Dist$/;"	s	namespace:cv::cuda::device
L2Hys	objdetect.hpp	/^    enum { L2Hys = 0$/;"	e	enum:cv::HOGDescriptor::__anon41
L2HysThreshold	objdetect.hpp	/^    CV_PROP double L2HysThreshold;$/;"	m	struct:cv::HOGDescriptor
L2_Simple	flann/dist.h	/^struct L2_Simple$/;"	s	namespace:cvflann
LAB_CBRT_TAB_SIZE	core/cuda/detail/color_detail.hpp	/^            LAB_CBRT_TAB_SIZE = 1024,$/;"	e	enum:cv::cuda::device::color_detail::__anon241
LAB_CBRT_TAB_SIZE	cudev/functional/detail/color_cvt.hpp	/^        LAB_CBRT_TAB_SIZE = 1024,$/;"	e	enum:cv::cudev::color_cvt_detail::__anon397
LAB_CBRT_TAB_SIZE_B	core/cuda/detail/color_detail.hpp	/^            LAB_CBRT_TAB_SIZE_B = (256 * 3 \/ 2 * (1 << gamma_shift))$/;"	e	enum:cv::cuda::device::color_detail::__anon241
LAB_CBRT_TAB_SIZE_B	cudev/functional/detail/color_cvt.hpp	/^        LAB_CBRT_TAB_SIZE_B = (256 * 3 \/ 2 * (1 << gamma_shift))$/;"	e	enum:cv::cudev::color_cvt_detail::__anon397
LDA	core.hpp	/^class CV_EXPORTS LDA$/;"	c	namespace:cv
LDR_SIZE	photo.hpp	/^enum { LDR_SIZE = 256 };$/;"	e	enum:cv::__anon4
LINEAR	flann/defines.h	/^    LINEAR = 0,$/;"	e	enum:cvflann::flann_algorithm_t
LINEAR	ml.hpp	/^        LINEAR=0,$/;"	e	enum:cv::ml::SVM::KernelTypes
LINES	core/opengl.hpp	/^    LINES          = 0x0001,$/;"	e	enum:cv::ogl::RenderModes
LINE_4	core.hpp	/^    LINE_4  = 4, \/\/!< 4-connected line$/;"	e	enum:cv::LineTypes
LINE_8	core.hpp	/^    LINE_8  = 8, \/\/!< 8-connected line$/;"	e	enum:cv::LineTypes
LINE_AA	core.hpp	/^    LINE_AA = 16 \/\/!< antialiased line$/;"	e	enum:cv::LineTypes
LINE_LOOP	core/opengl.hpp	/^    LINE_LOOP      = 0x0002,$/;"	e	enum:cv::ogl::RenderModes
LINE_STRIP	core/opengl.hpp	/^    LINE_STRIP     = 0x0003,$/;"	e	enum:cv::ogl::RenderModes
LINE_WIDTH	viz/widgets.hpp	/^            LINE_WIDTH,$/;"	e	enum:cv::viz::RenderingProperties
LMEDS	calib3d.hpp	/^enum { LMEDS  = 4, \/\/!< least-median algorithm$/;"	e	enum:cv::__anon43
LOCAL	core/ocl.hpp	/^    enum { LOCAL=1, READ_ONLY=2, WRITE_ONLY=4, READ_WRITE=6, CONSTANT=8, PTR_ONLY = 16, NO_SIZE=256 };$/;"	e	enum:cv::ocl::KernelArg::__anon160
LOCAL_IS_GLOBAL	core/ocl.hpp	/^        LOCAL_IS_GLOBAL=2$/;"	e	enum:cv::ocl::Device::__anon158
LOCAL_IS_LOCAL	core/ocl.hpp	/^        LOCAL_IS_LOCAL=1,$/;"	e	enum:cv::ocl::Device::__anon158
LOCATION_ROW	cudafeatures2d.hpp	/^        LOCATION_ROW = 0,$/;"	e	enum:cv::cuda::FastFeatureDetector::__anon291
LOG	stitching/detail/util.hpp	85;"	d
LOG	ts.hpp	/^        LOG=1 << LOG_IDX,$/;"	e	enum:cvtest::TS::__anon25
LOGD	ts/ts_perf.hpp	15;"	d
LOGD	ts/ts_perf.hpp	20;"	d
LOGE	ts/ts_perf.hpp	18;"	d
LOGE	ts/ts_perf.hpp	23;"	d
LOGI	ts/ts_perf.hpp	16;"	d
LOGI	ts/ts_perf.hpp	21;"	d
LOGIT	ml.hpp	/^        LOGIT=2, \/\/!< LogitBoost. It can produce good regression fits.$/;"	e	enum:cv::ml::Boost::Types
LOGLN	stitching/detail/util.hpp	88;"	d
LOGLN_CHAT	stitching/detail/util.hpp	89;"	d
LOGW	ts/ts_perf.hpp	17;"	d
LOGW	ts/ts_perf.hpp	22;"	d
LOG_	stitching/detail/util.hpp	73;"	d
LOG_CHAT	stitching/detail/util.hpp	86;"	d
LOG_IDX	ts.hpp	/^        LOG_IDX=1,$/;"	e	enum:cvtest::TS::__anon25
LOG_METHOD	flann/logger.h	108;"	d
LOG_STITCHING_MSG	stitching/detail/util.hpp	59;"	d
LOG_STITCHING_MSG	stitching/detail/util.hpp	67;"	d
LOG_STITCHING_MSG	stitching/detail/util.hpp	70;"	d
LOG_WARP_SIZE	core/cuda/warp.hpp	/^            LOG_WARP_SIZE = 5,$/;"	e	enum:cv::cuda::device::Warp::__anon244
LOG_WARP_SIZE	cudev/warp/warp.hpp	/^    LOG_WARP_SIZE = 5,$/;"	e	enum:cv::cudev::__anon384
LSD_REFINE_ADV	imgproc.hpp	/^    LSD_REFINE_ADV  = 2  \/\/!< Advanced refinement. Number of false alarms is calculated, lines are$/;"	e	enum:cv::LineSegmentDetectorModes
LSD_REFINE_NONE	imgproc.hpp	/^    LSD_REFINE_NONE = 0, \/\/!< No refinement applied$/;"	e	enum:cv::LineSegmentDetectorModes
LSD_REFINE_STD	imgproc.hpp	/^    LSD_REFINE_STD  = 1, \/\/!< Standard refinement is applied. E.g. breaking arches into smaller straighter line approximations.$/;"	e	enum:cv::LineSegmentDetectorModes
Lab2RGB	core/cuda/detail/color_detail.hpp	/^            __host__ __device__ __forceinline__ Lab2RGB() {}$/;"	f	struct:cv::cuda::device::color_detail::Lab2RGB
Lab2RGB	core/cuda/detail/color_detail.hpp	/^            __host__ __device__ __forceinline__ Lab2RGB(const Lab2RGB&) {}$/;"	f	struct:cv::cuda::device::color_detail::Lab2RGB
Lab2RGB	core/cuda/detail/color_detail.hpp	/^        struct Lab2RGB<float, scn, dcn, srgb, blueIdx>$/;"	s	namespace:cv::cuda::device::color_detail
Lab2RGB	core/cuda/detail/color_detail.hpp	/^        struct Lab2RGB<uchar, scn, dcn, srgb, blueIdx>$/;"	s	namespace:cv::cuda::device::color_detail
Lab2RGB	cudev/functional/detail/color_cvt.hpp	/^    template <int scn, int dcn, bool srgb, int blueIdx> struct Lab2RGB<float, scn, dcn, srgb, blueIdx>$/;"	s	namespace:cv::cudev::color_cvt_detail
Lab2RGB	cudev/functional/detail/color_cvt.hpp	/^    template <int scn, int dcn, bool srgb, int blueIdx> struct Lab2RGB<uchar, scn, dcn, srgb, blueIdx>$/;"	s	namespace:cv::cudev::color_cvt_detail
Lab2RGBConvert_b	core/cuda/detail/color_detail.hpp	/^        __device__ __forceinline__ void Lab2RGBConvert_b(const T& src, D& dst)$/;"	f	namespace:cv::cuda::device::color_detail
Lab2RGBConvert_f	core/cuda/detail/color_detail.hpp	/^        __device__ __forceinline__ void Lab2RGBConvert_f(const T& src, D& dst)$/;"	f	namespace:cv::cuda::device::color_detail
LabCbrt_b	core/cuda/detail/color_detail.hpp	/^        __device__ __forceinline__ int LabCbrt_b(int i)$/;"	f	namespace:cv::cuda::device::color_detail
LabCbrt_b	cudev/functional/detail/color_cvt.hpp	/^    __device__ static int LabCbrt_b(int i)$/;"	f	namespace:cv::cudev::color_cvt_detail
LaplacianPtr	cudev/ptr2d/deriv.hpp	/^template <class SrcPtr> struct LaplacianPtr<1, SrcPtr>$/;"	s	namespace:cv::cudev
LaplacianPtr	cudev/ptr2d/deriv.hpp	/^template <class SrcPtr> struct LaplacianPtr<3, SrcPtr>$/;"	s	namespace:cv::cudev
LaplacianPtrSz	cudev/ptr2d/deriv.hpp	/^template <int ksize, class SrcPtr> struct LaplacianPtrSz : LaplacianPtr<ksize, SrcPtr>$/;"	s	namespace:cv::cudev
LargerDepth	cudev/util/detail/type_traits.hpp	/^    template <> struct LargerDepth<double, double>$/;"	s	namespace:cv::cudev::type_traits_detail
LargerDepth	cudev/util/detail/type_traits.hpp	/^    template <> struct LargerDepth<double, float>$/;"	s	namespace:cv::cudev::type_traits_detail
LargerDepth	cudev/util/detail/type_traits.hpp	/^    template <> struct LargerDepth<float, double>$/;"	s	namespace:cv::cudev::type_traits_detail
LargerDepth	cudev/util/detail/type_traits.hpp	/^    template <> struct LargerDepth<float, float>$/;"	s	namespace:cv::cudev::type_traits_detail
LargerDepth	cudev/util/detail/type_traits.hpp	/^    template <typename A, typename B> struct LargerDepth$/;"	s	namespace:cv::cudev::type_traits_detail
LargerDepth	cudev/util/detail/type_traits.hpp	/^    template <typename A> struct LargerDepth<A, double>$/;"	s	namespace:cv::cudev::type_traits_detail
LargerDepth	cudev/util/detail/type_traits.hpp	/^    template <typename A> struct LargerDepth<A, float>$/;"	s	namespace:cv::cudev::type_traits_detail
LargerDepth	cudev/util/detail/type_traits.hpp	/^    template <typename A> struct LargerDepth<double, A>$/;"	s	namespace:cv::cudev::type_traits_detail
LargerDepth	cudev/util/detail/type_traits.hpp	/^    template <typename A> struct LargerDepth<float, A>$/;"	s	namespace:cv::cudev::type_traits_detail
LargerType	cudev/util/type_traits.hpp	/^template <typename A, typename B> struct LargerType$/;"	s	namespace:cv::cudev
Lc	cudalegacy.hpp	/^    int Lc;  \/\/!< Quantized levels per 'color' component. Power of two, typically 32, 64 or 128.$/;"	m	struct:cv::cuda::FGDParams
Lcc	cudalegacy.hpp	/^    int Lcc;  \/\/!< Quantized levels per 'color co-occurrence' component.  Power of two, typically 16, 32 or 64.$/;"	m	struct:cv::cuda::FGDParams
LeftButton	viz/types.hpp	/^            enum MouseButton { NoButton = 0, LeftButton, MiddleButton, RightButton, VScroll } ;$/;"	e	enum:cv::viz::MouseEvent::MouseButton
LineIterator	imgproc.hpp	/^class CV_EXPORTS LineIterator$/;"	c	namespace:cv
LineSegmentDetector	imgproc.hpp	/^class CV_EXPORTS_W LineSegmentDetector : public Algorithm$/;"	c	namespace:cv
LineSegmentDetectorModes	imgproc.hpp	/^enum LineSegmentDetectorModes {$/;"	g	namespace:cv
LineTypes	core.hpp	/^enum LineTypes {$/;"	g	namespace:cv
LinearFilter	core/cuda/filters.hpp	/^        explicit __host__ __device__ __forceinline__ LinearFilter(const Ptr2D& src_, float fx = 0.f, float fy = 0.f)$/;"	f	struct:cv::cuda::device::LinearFilter
LinearFilter	core/cuda/filters.hpp	/^    template <typename Ptr2D> struct LinearFilter$/;"	s	namespace:cv::cuda::device
LinearIndex	flann/linear_index.h	/^    LinearIndex(const Matrix<ElementType>& inputData, const IndexParams& params = LinearIndexParams(),$/;"	f	class:cvflann::LinearIndex
LinearIndex	flann/linear_index.h	/^class LinearIndex : public NNIndex<Distance>$/;"	c	namespace:cvflann
LinearIndexParams	flann/linear_index.h	/^    LinearIndexParams()$/;"	f	struct:cvflann::LinearIndexParams
LinearIndexParams	flann/linear_index.h	/^struct LinearIndexParams : public IndexParams$/;"	s	namespace:cvflann
LinearIndexParams	flann/miniflann.hpp	/^struct CV_EXPORTS LinearIndexParams : public IndexParams$/;"	s	namespace:cv::flann
LinearInterPtr	cudev/ptr2d/interpolation.hpp	/^template <typename SrcPtr> struct LinearInterPtr$/;"	s	namespace:cv::cudev
LinearInterPtrSz	cudev/ptr2d/interpolation.hpp	/^template <class SrcPtr> struct LinearInterPtrSz : LinearInterPtr<SrcPtr>$/;"	s	namespace:cv::cudev
Load	core/cuda/datamov_utils.hpp	/^            __device__ __forceinline__ static void Load(const T* ptr, int offset, T& val)  { val = ptr[offset];  }$/;"	f	struct:cv::cuda::device::ForceGlob
Local	core/ocl.hpp	/^    static KernelArg Local() { return KernelArg(LOCAL, 0); }$/;"	f	class:cv::ocl::KernelArg
Lock	ts/ts_gtest.h	/^  void Lock() {$/;"	f	class:std::tr1::MutexBase
Lock	ts/ts_gtest.h	/^  void Lock() {}$/;"	f	class:std::tr1::Mutex
Log2	cudev/util/type_traits.hpp	/^template <int N, int COUNT> struct Log2<N, 0, COUNT>$/;"	s	namespace:cv::cudev
Log2	cudev/util/type_traits.hpp	/^template <int N, int CURRENT_VAL = N, int COUNT = 0> struct Log2$/;"	s	namespace:cv::cudev
LogToStderr	ts/ts_gtest.h	/^inline void LogToStderr() {}$/;"	f	namespace:std::tr1
LogToStdout	videostab/log.hpp	/^class CV_EXPORTS LogToStdout : public ILog$/;"	c	namespace:cv::videostab
Logger	flann/logger.h	/^    Logger() : stream(stdout), logLevel(FLANN_LOG_WARN) {}$/;"	f	class:cvflann::Logger
Logger	flann/logger.h	/^class Logger$/;"	c	namespace:cvflann
LogisticRegression	ml.hpp	/^class CV_EXPORTS_W LogisticRegression : public StatModel$/;"	c	namespace:cv::ml
LookUpTable	cudaarithm.hpp	/^class CV_EXPORTS LookUpTable : public Algorithm$/;"	c	namespace:cv::cuda
LpMotionStabilizer	videostab/motion_stabilizing.hpp	/^class CV_EXPORTS LpMotionStabilizer : public IMotionStabilizer$/;"	c	namespace:cv::videostab
LshIndex	flann/lsh_index.h	/^    LshIndex(const Matrix<ElementType>& input_data, const IndexParams& params = LshIndexParams(),$/;"	f	class:cvflann::LshIndex
LshIndex	flann/lsh_index.h	/^class LshIndex : public NNIndex<Distance>$/;"	c	namespace:cvflann
LshIndexParams	flann/lsh_index.h	/^    LshIndexParams(unsigned int table_number = 12, unsigned int key_size = 20, unsigned int multi_probe_level = 2)$/;"	f	struct:cvflann::LshIndexParams
LshIndexParams	flann/lsh_index.h	/^struct LshIndexParams : public IndexParams$/;"	s	namespace:cvflann
LshIndexParams	flann/miniflann.hpp	/^struct CV_EXPORTS LshIndexParams : public IndexParams$/;"	s	namespace:cv::flann
LshStats	flann/lsh_table.h	/^struct LshStats$/;"	s	namespace:cvflann::lsh
LshTable	flann/lsh_table.h	/^    LshTable()$/;"	f	class:cvflann::lsh::LshTable
LshTable	flann/lsh_table.h	/^    LshTable(unsigned int feature_size, unsigned int key_size)$/;"	f	class:cvflann::lsh::LshTable
LshTable	flann/lsh_table.h	/^class LshTable$/;"	c	namespace:cvflann::lsh
LshTable	flann/lsh_table.h	/^inline LshTable<unsigned char>::LshTable(unsigned int feature_size, unsigned int subsignature_size)$/;"	f	class:cvflann::lsh::LshTable
LutPtr	cudev/ptr2d/lut.hpp	/^template <class SrcPtr, class TablePtr> struct LutPtr$/;"	s	namespace:cv::cudev
LutPtrSz	cudev/ptr2d/lut.hpp	/^template <class SrcPtr, class TablePtr> struct LutPtrSz : LutPtr<SrcPtr, TablePtr>$/;"	s	namespace:cv::cudev
Luv2RGB	core/cuda/detail/color_detail.hpp	/^            __host__ __device__ __forceinline__ Luv2RGB() {}$/;"	f	struct:cv::cuda::device::color_detail::Luv2RGB
Luv2RGB	core/cuda/detail/color_detail.hpp	/^            __host__ __device__ __forceinline__ Luv2RGB(const Luv2RGB&) {}$/;"	f	struct:cv::cuda::device::color_detail::Luv2RGB
Luv2RGB	core/cuda/detail/color_detail.hpp	/^        struct Luv2RGB<float, scn, dcn, srgb, blueIdx>$/;"	s	namespace:cv::cuda::device::color_detail
Luv2RGB	core/cuda/detail/color_detail.hpp	/^        struct Luv2RGB<uchar, scn, dcn, srgb, blueIdx>$/;"	s	namespace:cv::cuda::device::color_detail
Luv2RGB	cudev/functional/detail/color_cvt.hpp	/^    template <int scn, int dcn, bool srgb, int blueIdx> struct Luv2RGB<float, scn, dcn, srgb, blueIdx>$/;"	s	namespace:cv::cudev::color_cvt_detail
Luv2RGB	cudev/functional/detail/color_cvt.hpp	/^    template <int scn, int dcn, bool srgb, int blueIdx> struct Luv2RGB<uchar, scn, dcn, srgb, blueIdx>$/;"	s	namespace:cv::cudev::color_cvt_detail
Luv2RGBConvert_b	core/cuda/detail/color_detail.hpp	/^        __device__ __forceinline__ void Luv2RGBConvert_b(const T& src, D& dst)$/;"	f	namespace:cv::cuda::device::color_detail
Luv2RGBConvert_f	core/cuda/detail/color_detail.hpp	/^        __device__ __forceinline__ void Luv2RGBConvert_f(const T& src, D& dst)$/;"	f	namespace:cv::cuda::device::color_detail
M	core.hpp	/^    enum PeriodParameters {N = 624, M = 397};$/;"	e	enum:cv::RNG_MT19937::PeriodParameters
M	core/cuda/detail/reduce.hpp	/^            enum { M = N \/ 32 };$/;"	e	enum:cv::cuda::device::reduce_detail::GenericOptimized32::__anon242
M	core/cuda/detail/reduce_key_val.hpp	/^            enum { M = N \/ 32 };$/;"	e	enum:cv::cuda::device::reduce_key_val_detail::GenericOptimized32::__anon238
M	cudev/block/detail/reduce.hpp	/^        enum { M = N \/ 32 };$/;"	e	enum:cv::cudev::block_reduce_detail::GenericOptimized32::__anon395
M	cudev/block/detail/reduce_key_val.hpp	/^        enum { M = N \/ 32 };$/;"	e	enum:cv::cudev::block_reduce_key_val_detail::GenericOptimized32::__anon394
MAGIC_MASK	core/mat.hpp	/^    enum { MAGIC_MASK = 0xFFFF0000, TYPE_MASK = 0x00000FFF, DEPTH_MASK = 7 };$/;"	e	enum:cv::Mat::__anon139
MAGIC_MASK	core/mat.hpp	/^    enum { MAGIC_MASK = 0xFFFF0000, TYPE_MASK = 0x00000FFF, DEPTH_MASK = 7 };$/;"	e	enum:cv::UMat::__anon141
MAGIC_VAL	core/mat.hpp	/^    enum { MAGIC_VAL  = 0x42FF0000, AUTO_STEP = 0, CONTINUOUS_FLAG = CV_MAT_CONT_FLAG, SUBMATRIX_FLAG = CV_SUBMAT_FLAG };$/;"	e	enum:cv::Mat::__anon138
MAGIC_VAL	core/mat.hpp	/^    enum { MAGIC_VAL  = 0x42FF0000, AUTO_STEP = 0, CONTINUOUS_FLAG = CV_MAT_CONT_FLAG, SUBMATRIX_FLAG = CV_SUBMAT_FLAG };$/;"	e	enum:cv::UMat::__anon140
MAGIC_VAL	core/mat.hpp	/^    enum { MAGIC_VAL=0x42FD0000, MAX_DIM=32, HASH_SCALE=0x5bd1e995, HASH_BIT=0x80000000 };$/;"	e	enum:cv::SparseMat::__anon142
MANHATTAN	flann/defines.h	/^    MANHATTAN = 2,$/;"	e	enum:cvflann::flann_distance_t
MAP	core/persistence.hpp	/^        MAP       = 6, \/\/!< mapping$/;"	e	enum:cv::FileNode::Type
MASK	ts.hpp	/^    enum { INPUT, INPUT_OUTPUT, OUTPUT, REF_INPUT_OUTPUT, REF_OUTPUT, TEMP, MASK, MAX_ARR };$/;"	e	enum:cvtest::ArrayTest::__anon26
MAT	core.hpp	/^    enum { INT=0, BOOLEAN=1, REAL=2, STRING=3, MAT=4, MAT_VECTOR=5, ALGORITHM=6, FLOAT=7,$/;"	e	enum:cv::Param::__anon404
MAT	core/mat.hpp	/^        MAT               = 1 << KIND_SHIFT,$/;"	e	enum:cv::_InputArray::__anon135
MATX	core/mat.hpp	/^        MATX              = 2 << KIND_SHIFT,$/;"	e	enum:cv::_InputArray::__anon135
MAT_VECTOR	core.hpp	/^    enum { INT=0, BOOLEAN=1, REAL=2, STRING=3, MAT=4, MAT_VECTOR=5, ALGORITHM=6, FLOAT=7,$/;"	e	enum:cv::Param::__anon404
MAX	core/cvdef.h	184;"	d
MAX_ARR	ts.hpp	/^    enum { INPUT, INPUT_OUTPUT, OUTPUT, REF_INPUT_OUTPUT, REF_OUTPUT, TEMP, MASK, MAX_ARR };$/;"	e	enum:cvtest::ArrayTest::__anon26
MAX_DIM	core/mat.hpp	/^    enum { MAGIC_VAL=0x42FD0000, MAX_DIM=32, HASH_SCALE=0x5bd1e995, HASH_BIT=0x80000000 };$/;"	e	enum:cv::SparseMat::__anon142
MAX_DIST	flann/defines.h	/^    MAX_DIST   = 4,$/;"	e	enum:cvflann::flann_distance_t
MAX_IDX	ts.hpp	/^        MAX_IDX=4$/;"	e	enum:cvtest::TS::__anon25
MAX_ITER	core/types.hpp	/^        MAX_ITER=COUNT, \/\/!< ditto$/;"	e	enum:cv::TermCriteria::Type
MAX_VALUE	ts/ocl_test.hpp	89;"	d
MEMORY	core/persistence.hpp	/^        MEMORY      = 4, \/\/!< flag, read data from source or write data to the internal buffer (which is$/;"	e	enum:cv::FileStorage::Mode
MIN	core/cvdef.h	180;"	d
MINI_BATCH	ml.hpp	/^        MINI_BATCH = 1 \/\/!< Set MiniBatchSize to a positive integer when using this method.$/;"	e	enum:cv::ml::LogisticRegression::Methods
MINKOWSKI	flann/defines.h	/^    MINKOWSKI = 3,$/;"	e	enum:cvflann::flann_distance_t
MIXED_CLONE	photo.hpp	/^    MIXED_CLONE  = 2,$/;"	e	enum:cv::__anon2
MM_AFFINE	videostab/motion_core.hpp	/^    MM_AFFINE = 5,$/;"	e	enum:cv::videostab::MotionModel
MM_HOMOGRAPHY	videostab/motion_core.hpp	/^    MM_HOMOGRAPHY = 6,$/;"	e	enum:cv::videostab::MotionModel
MM_RIGID	videostab/motion_core.hpp	/^    MM_RIGID = 3,$/;"	e	enum:cv::videostab::MotionModel
MM_ROTATION	videostab/motion_core.hpp	/^    MM_ROTATION = 2,$/;"	e	enum:cv::videostab::MotionModel
MM_SIMILARITY	videostab/motion_core.hpp	/^    MM_SIMILARITY = 4,$/;"	e	enum:cv::videostab::MotionModel
MM_TRANSLATION	videostab/motion_core.hpp	/^    MM_TRANSLATION = 0,$/;"	e	enum:cv::videostab::MotionModel
MM_TRANSLATION_AND_SCALE	videostab/motion_core.hpp	/^    MM_TRANSLATION_AND_SCALE = 1,$/;"	e	enum:cv::videostab::MotionModel
MM_UNKNOWN	videostab/motion_core.hpp	/^    MM_UNKNOWN = 7$/;"	e	enum:cv::videostab::MotionModel
MNCovariance	video/tracking_c.h	/^    float* MNCovariance;        \/* =measurement_noise_cov->data.fl *\/$/;"	m	struct:CvKalman
MODE_HH	calib3d.hpp	/^        MODE_HH   = 1$/;"	e	enum:cv::StereoSGBM::__anon51
MODE_SGBM	calib3d.hpp	/^        MODE_SGBM = 0,$/;"	e	enum:cv::StereoSGBM::__anon51
MODIFY_A	core.hpp	/^        MODIFY_A = 1,$/;"	e	enum:cv::SVD::Flags
MONOCHROME_TRANSFER	photo.hpp	/^    MONOCHROME_TRANSFER = 3$/;"	e	enum:cv::__anon2
MORPH_BLACKHAT	imgproc.hpp	/^    MORPH_BLACKHAT = 6  \/\/!< "black hat"$/;"	e	enum:cv::MorphTypes
MORPH_CLOSE	imgproc.hpp	/^    MORPH_CLOSE    = 3, \/\/!< a closing operation$/;"	e	enum:cv::MorphTypes
MORPH_CROSS	imgproc.hpp	/^    MORPH_CROSS   = 1, \/\/!< a cross-shaped structuring element:$/;"	e	enum:cv::MorphShapes
MORPH_DILATE	imgproc.hpp	/^    MORPH_DILATE   = 1, \/\/!< see cv::dilate$/;"	e	enum:cv::MorphTypes
MORPH_ELLIPSE	imgproc.hpp	/^    MORPH_ELLIPSE = 2 \/\/!< an elliptic structuring element, that is, a filled ellipse inscribed$/;"	e	enum:cv::MorphShapes
MORPH_ERODE	imgproc.hpp	/^    MORPH_ERODE    = 0, \/\/!< see cv::erode$/;"	e	enum:cv::MorphTypes
MORPH_GRADIENT	imgproc.hpp	/^    MORPH_GRADIENT = 4, \/\/!< a morphological gradient$/;"	e	enum:cv::MorphTypes
MORPH_OPEN	imgproc.hpp	/^    MORPH_OPEN     = 2, \/\/!< an opening operation$/;"	e	enum:cv::MorphTypes
MORPH_RECT	imgproc.hpp	/^    MORPH_RECT    = 0, \/\/!< a rectangular structuring element:  \\f[E_{ij}=1\\f]$/;"	e	enum:cv::MorphShapes
MORPH_TOPHAT	imgproc.hpp	/^    MORPH_TOPHAT   = 5, \/\/!< "top hat"$/;"	e	enum:cv::MorphTypes
MOTION_AFFINE	video/tracking.hpp	/^    MOTION_AFFINE      = 2,$/;"	e	enum:cv::__anon401
MOTION_EUCLIDEAN	video/tracking.hpp	/^    MOTION_EUCLIDEAN   = 1,$/;"	e	enum:cv::__anon401
MOTION_HOMOGRAPHY	video/tracking.hpp	/^    MOTION_HOMOGRAPHY  = 3$/;"	e	enum:cv::__anon401
MOTION_TRANSLATION	video/tracking.hpp	/^    MOTION_TRANSLATION = 0,$/;"	e	enum:cv::__anon401
MP	video/tracking_c.h	/^    int MP;                     \/* number of measurement vector dimensions *\/$/;"	m	struct:CvKalman
MPEG1	cudacodec.hpp	/^    MPEG1 = 0,$/;"	e	enum:cv::cudacodec::Codec
MPEG2	cudacodec.hpp	/^    MPEG2,$/;"	e	enum:cv::cudacodec::Codec
MPEG4	cudacodec.hpp	/^    MPEG4,$/;"	e	enum:cv::cudacodec::Codec
MSER	features2d.hpp	/^class CV_EXPORTS_W MSER : public Feature2D$/;"	c	namespace:cv
MULTI_BAND	stitching/detail/blenders.hpp	/^    enum { NO, FEATHER, MULTI_BAND };$/;"	e	enum:cv::detail::Blender::__anon416
MakeVec	cudev/util/vec_traits.hpp	/^template<> struct MakeVec<bool, 1> { typedef uchar  type; };$/;"	s	namespace:cv::cudev
MakeVec	cudev/util/vec_traits.hpp	/^template<> struct MakeVec<bool, 2> { typedef uchar2 type; };$/;"	s	namespace:cv::cudev
MakeVec	cudev/util/vec_traits.hpp	/^template<> struct MakeVec<bool, 3> { typedef uchar3 type; };$/;"	s	namespace:cv::cudev
MakeVec	cudev/util/vec_traits.hpp	/^template<> struct MakeVec<bool, 4> { typedef uchar4 type; };$/;"	s	namespace:cv::cudev
MakeVec	cudev/util/vec_traits.hpp	/^template<> struct MakeVec<schar, 1> { typedef schar type; };$/;"	s	namespace:cv::cudev
MakeVec	cudev/util/vec_traits.hpp	/^template<> struct MakeVec<schar, 2> { typedef char2 type; };$/;"	s	namespace:cv::cudev
MakeVec	cudev/util/vec_traits.hpp	/^template<> struct MakeVec<schar, 3> { typedef char3 type; };$/;"	s	namespace:cv::cudev
MakeVec	cudev/util/vec_traits.hpp	/^template<> struct MakeVec<schar, 4> { typedef char4 type; };$/;"	s	namespace:cv::cudev
MaskCollection	core/cuda/utility.hpp	/^        __device__ __forceinline__ MaskCollection(const MaskCollection& masks_)$/;"	f	struct:cv::cuda::device::MaskCollection
MaskCollection	core/cuda/utility.hpp	/^        explicit __host__ __device__ __forceinline__ MaskCollection(PtrStepb* maskCollection_)$/;"	f	struct:cv::cuda::device::MaskCollection
MaskCollection	core/cuda/utility.hpp	/^    struct MaskCollection$/;"	s	namespace:cv::cuda::device
MaskGenerator	objdetect.hpp	/^    class CV_EXPORTS MaskGenerator$/;"	c	class:cv::BaseCascadeClassifier
MaskIsTiled	core/base.hpp	/^    MaskIsTiled=               -26,  \/\/!<$/;"	e	enum:cv::Error::Code
Mat	core/base.hpp	/^class CV_EXPORTS Mat;$/;"	m	namespace:cv	typeref:class:cv::CV_EXPORTS
Mat	core/cuda.inl.hpp	/^Mat::Mat(const cuda::GpuMat& m)$/;"	f	class:cv::Mat
Mat	core/mat.hpp	/^class CV_EXPORTS Mat$/;"	c	namespace:cv
Mat	core/mat.inl.hpp	/^Mat::Mat()$/;"	f	class:cv::Mat
Mat	core/mat.inl.hpp	/^Mat::Mat(Size _sz, int _type)$/;"	f	class:cv::Mat
Mat	core/mat.inl.hpp	/^Mat::Mat(Size _sz, int _type, const Scalar& _s)$/;"	f	class:cv::Mat
Mat	core/mat.inl.hpp	/^Mat::Mat(Size _sz, int _type, void* _data, size_t _step)$/;"	f	class:cv::Mat
Mat	core/mat.inl.hpp	/^Mat::Mat(const Mat& m)$/;"	f	class:cv::Mat
Mat	core/mat.inl.hpp	/^Mat::Mat(const MatCommaInitializer_<_Tp>& commaInitializer)$/;"	f	class:cv::Mat
Mat	core/mat.inl.hpp	/^Mat::Mat(const Matx<_Tp,m,n>& M, bool copyData)$/;"	f	class:cv::Mat
Mat	core/mat.inl.hpp	/^Mat::Mat(const Point3_<_Tp>& pt, bool copyData)$/;"	f	class:cv::Mat
Mat	core/mat.inl.hpp	/^Mat::Mat(const Point_<_Tp>& pt, bool copyData)$/;"	f	class:cv::Mat
Mat	core/mat.inl.hpp	/^Mat::Mat(const Vec<_Tp, n>& vec, bool copyData)$/;"	f	class:cv::Mat
Mat	core/mat.inl.hpp	/^Mat::Mat(const std::vector<_Tp>& vec, bool copyData)$/;"	f	class:cv::Mat
Mat	core/mat.inl.hpp	/^Mat::Mat(int _dims, const int* _sz, int _type)$/;"	f	class:cv::Mat
Mat	core/mat.inl.hpp	/^Mat::Mat(int _dims, const int* _sz, int _type, const Scalar& _s)$/;"	f	class:cv::Mat
Mat	core/mat.inl.hpp	/^Mat::Mat(int _rows, int _cols, int _type)$/;"	f	class:cv::Mat
Mat	core/mat.inl.hpp	/^Mat::Mat(int _rows, int _cols, int _type, const Scalar& _s)$/;"	f	class:cv::Mat
Mat	core/mat.inl.hpp	/^Mat::Mat(int _rows, int _cols, int _type, void* _data, size_t _step)$/;"	f	class:cv::Mat
Mat1b	core/mat.hpp	/^typedef Mat_<uchar> Mat1b;$/;"	t	namespace:cv
Mat1d	core/mat.hpp	/^typedef Mat_<double> Mat1d;$/;"	t	namespace:cv
Mat1f	core/mat.hpp	/^typedef Mat_<float> Mat1f;$/;"	t	namespace:cv
Mat1i	core/mat.hpp	/^typedef Mat_<int>   Mat1i;$/;"	t	namespace:cv
Mat1s	core/mat.hpp	/^typedef Mat_<short> Mat1s;$/;"	t	namespace:cv
Mat1w	core/mat.hpp	/^typedef Mat_<ushort> Mat1w;$/;"	t	namespace:cv
Mat2b	core/mat.hpp	/^typedef Mat_<Vec2b> Mat2b;$/;"	t	namespace:cv
Mat2d	core/mat.hpp	/^typedef Mat_<Vec2d> Mat2d;$/;"	t	namespace:cv
Mat2f	core/mat.hpp	/^typedef Mat_<Vec2f> Mat2f;$/;"	t	namespace:cv
Mat2i	core/mat.hpp	/^typedef Mat_<Vec2i> Mat2i;$/;"	t	namespace:cv
Mat2s	core/mat.hpp	/^typedef Mat_<Vec2s> Mat2s;$/;"	t	namespace:cv
Mat2w	core/mat.hpp	/^typedef Mat_<Vec2w> Mat2w;$/;"	t	namespace:cv
Mat3	core/affine.hpp	/^        typedef Matx<float_type, 3, 3> Mat3;$/;"	t	class:cv::Affine3
Mat3b	core/mat.hpp	/^typedef Mat_<Vec3b> Mat3b;$/;"	t	namespace:cv
Mat3d	core/mat.hpp	/^typedef Mat_<Vec3d> Mat3d;$/;"	t	namespace:cv
Mat3f	core/mat.hpp	/^typedef Mat_<Vec3f> Mat3f;$/;"	t	namespace:cv
Mat3i	core/mat.hpp	/^typedef Mat_<Vec3i> Mat3i;$/;"	t	namespace:cv
Mat3s	core/mat.hpp	/^typedef Mat_<Vec3s> Mat3s;$/;"	t	namespace:cv
Mat3w	core/mat.hpp	/^typedef Mat_<Vec3w> Mat3w;$/;"	t	namespace:cv
Mat4	core/affine.hpp	/^        typedef Matx<float_type, 4, 4> Mat4;$/;"	t	class:cv::Affine3
Mat4b	core/mat.hpp	/^typedef Mat_<Vec4b> Mat4b;$/;"	t	namespace:cv
Mat4d	core/mat.hpp	/^typedef Mat_<Vec4d> Mat4d;$/;"	t	namespace:cv
Mat4f	core/mat.hpp	/^typedef Mat_<Vec4f> Mat4f;$/;"	t	namespace:cv
Mat4i	core/mat.hpp	/^typedef Mat_<Vec4i> Mat4i;$/;"	t	namespace:cv
Mat4s	core/mat.hpp	/^typedef Mat_<Vec4s> Mat4s;$/;"	t	namespace:cv
Mat4w	core/mat.hpp	/^typedef Mat_<Vec4w> Mat4w;$/;"	t	namespace:cv
MatAllocator	core/mat.hpp	/^    MatAllocator() {}$/;"	f	class:cv::MatAllocator
MatAllocator	core/mat.hpp	/^class CV_EXPORTS MatAllocator$/;"	c	namespace:cv
MatCommaInitializer_	core/mat.hpp	/^template<typename _Tp> class MatCommaInitializer_$/;"	c	namespace:cv
MatCommaInitializer_	core/mat.inl.hpp	/^MatCommaInitializer_<_Tp>::MatCommaInitializer_(Mat_<_Tp>* _m)$/;"	f	class:cv::MatCommaInitializer_
MatComparator	ts.hpp	/^struct CV_EXPORTS MatComparator$/;"	s	namespace:cvtest
MatConstIterator	core/base.hpp	/^class CV_EXPORTS MatConstIterator;$/;"	m	namespace:cv	typeref:class:cv::CV_EXPORTS
MatConstIterator	core/mat.hpp	/^class CV_EXPORTS MatConstIterator$/;"	c	namespace:cv
MatConstIterator	core/mat.inl.hpp	/^MatConstIterator::MatConstIterator()$/;"	f	class:cv::MatConstIterator
MatConstIterator	core/mat.inl.hpp	/^MatConstIterator::MatConstIterator(const Mat* _m)$/;"	f	class:cv::MatConstIterator
MatConstIterator	core/mat.inl.hpp	/^MatConstIterator::MatConstIterator(const Mat* _m, Point _pt)$/;"	f	class:cv::MatConstIterator
MatConstIterator	core/mat.inl.hpp	/^MatConstIterator::MatConstIterator(const Mat* _m, int _row, int _col)$/;"	f	class:cv::MatConstIterator
MatConstIterator	core/mat.inl.hpp	/^MatConstIterator::MatConstIterator(const MatConstIterator& it)$/;"	f	class:cv::MatConstIterator
MatConstIterator_	core/mat.hpp	/^class MatConstIterator_ : public MatConstIterator$/;"	c	namespace:cv
MatConstIterator_	core/mat.inl.hpp	/^MatConstIterator_<_Tp>::MatConstIterator_()$/;"	f	class:cv::MatConstIterator_
MatConstIterator_	core/mat.inl.hpp	/^MatConstIterator_<_Tp>::MatConstIterator_(const MatConstIterator_& it)$/;"	f	class:cv::MatConstIterator_
MatConstIterator_	core/mat.inl.hpp	/^MatConstIterator_<_Tp>::MatConstIterator_(const Mat_<_Tp>* _m)$/;"	f	class:cv::MatConstIterator_
MatConstIterator_	core/mat.inl.hpp	/^MatConstIterator_<_Tp>::MatConstIterator_(const Mat_<_Tp>* _m, Point _pt)$/;"	f	class:cv::MatConstIterator_
MatConstIterator_	core/mat.inl.hpp	/^MatConstIterator_<_Tp>::MatConstIterator_(const Mat_<_Tp>* _m, int _row, int _col)$/;"	f	class:cv::MatConstIterator_
MatExpr	core/base.hpp	/^class CV_EXPORTS MatExpr;$/;"	m	namespace:cv	typeref:class:cv::CV_EXPORTS
MatExpr	core/mat.hpp	/^class CV_EXPORTS MatExpr$/;"	c	namespace:cv
MatExpr	core/mat.inl.hpp	/^MatExpr::MatExpr()$/;"	f	class:cv::MatExpr
MatExpr	core/mat.inl.hpp	/^MatExpr::MatExpr(const MatOp* _op, int _flags, const Mat& _a, const Mat& _b,$/;"	f	class:cv::MatExpr
MatInfo	ts.hpp	/^    MatInfo(const Mat& _m) : m(&_m) {}$/;"	f	struct:cvtest::MatInfo
MatInfo	ts.hpp	/^struct CV_EXPORTS MatInfo$/;"	s	namespace:cvtest
MatIterator_	core/mat.hpp	/^class MatIterator_ : public MatConstIterator_<_Tp>$/;"	c	namespace:cv
MatIterator_	core/mat.inl.hpp	/^MatIterator_<_Tp>::MatIterator_()$/;"	f	class:cv::MatIterator_
MatIterator_	core/mat.inl.hpp	/^MatIterator_<_Tp>::MatIterator_(Mat_<_Tp>* _m)$/;"	f	class:cv::MatIterator_
MatIterator_	core/mat.inl.hpp	/^MatIterator_<_Tp>::MatIterator_(Mat_<_Tp>* _m, Point _pt)$/;"	f	class:cv::MatIterator_
MatIterator_	core/mat.inl.hpp	/^MatIterator_<_Tp>::MatIterator_(Mat_<_Tp>* _m, const int* _idx)$/;"	f	class:cv::MatIterator_
MatIterator_	core/mat.inl.hpp	/^MatIterator_<_Tp>::MatIterator_(Mat_<_Tp>* _m, int _row, int _col)$/;"	f	class:cv::MatIterator_
MatIterator_	core/mat.inl.hpp	/^MatIterator_<_Tp>::MatIterator_(const MatIterator_& it)$/;"	f	class:cv::MatIterator_
MatND	core/base.hpp	/^typedef Mat MatND;$/;"	t	namespace:cv
MatOp	core/mat.hpp	/^class CV_EXPORTS MatOp$/;"	c	namespace:cv
MatSize	core/mat.hpp	/^struct CV_EXPORTS MatSize$/;"	s	namespace:cv
MatSize	core/mat.inl.hpp	/^MatSize::MatSize(int* _p)$/;"	f	class:cv::MatSize
MatStep	core/mat.hpp	/^struct CV_EXPORTS MatStep$/;"	s	namespace:cv
MatStep	core/mat.inl.hpp	/^MatStep::MatStep()$/;"	f	class:cv::MatStep
MatStep	core/mat.inl.hpp	/^MatStep::MatStep(size_t s)$/;"	f	class:cv::MatStep
MatType	ts/ts_perf.hpp	/^    MatType(int val=0) : _type(val) {}$/;"	f	class:perf::MatType
MatType	ts/ts_perf.hpp	/^class MatType$/;"	c	namespace:perf
Mat_	core/mat.hpp	/^template<typename _Tp> class Mat_ : public Mat$/;"	c	namespace:cv
Mat_	core/mat.inl.hpp	/^Mat_<_Tp>::Mat_()$/;"	f	class:cv::Mat_
Mat_	core/mat.inl.hpp	/^Mat_<_Tp>::Mat_(Size _sz)$/;"	f	class:cv::Mat_
Mat_	core/mat.inl.hpp	/^Mat_<_Tp>::Mat_(Size _sz, const _Tp& value)$/;"	f	class:cv::Mat_
Mat_	core/mat.inl.hpp	/^Mat_<_Tp>::Mat_(const Mat& m)$/;"	f	class:cv::Mat_
Mat_	core/mat.inl.hpp	/^Mat_<_Tp>::Mat_(const MatCommaInitializer_<_Tp>& commaInitializer)$/;"	f	class:cv::Mat_
Mat_	core/mat.inl.hpp	/^Mat_<_Tp>::Mat_(const MatExpr& e)$/;"	f	class:cv::Mat_
Mat_	core/mat.inl.hpp	/^Mat_<_Tp>::Mat_(const Mat_& m)$/;"	f	class:cv::Mat_
Mat_	core/mat.inl.hpp	/^Mat_<_Tp>::Mat_(const Mat_& m, const Range& _rowRange, const Range& _colRange)$/;"	f	class:cv::Mat_
Mat_	core/mat.inl.hpp	/^Mat_<_Tp>::Mat_(const Mat_& m, const Rect& roi)$/;"	f	class:cv::Mat_
Mat_	core/mat.inl.hpp	/^Mat_<_Tp>::Mat_(const Mat_<_Tp>& m, const Range* ranges)$/;"	f	class:cv::Mat_
Mat_	core/mat.inl.hpp	/^Mat_<_Tp>::Mat_(const Matx<typename DataType<_Tp>::channel_type, m, n>& M, bool copyData)$/;"	f	class:cv::Mat_
Mat_	core/mat.inl.hpp	/^Mat_<_Tp>::Mat_(const Point3_<typename DataType<_Tp>::channel_type>& pt, bool copyData)$/;"	f	class:cv::Mat_
Mat_	core/mat.inl.hpp	/^Mat_<_Tp>::Mat_(const Point_<typename DataType<_Tp>::channel_type>& pt, bool copyData)$/;"	f	class:cv::Mat_
Mat_	core/mat.inl.hpp	/^Mat_<_Tp>::Mat_(const Vec<typename DataType<_Tp>::channel_type, n>& vec, bool copyData)$/;"	f	class:cv::Mat_
Mat_	core/mat.inl.hpp	/^Mat_<_Tp>::Mat_(const std::vector<_Tp>& vec, bool copyData)$/;"	f	class:cv::Mat_
Mat_	core/mat.inl.hpp	/^Mat_<_Tp>::Mat_(int _dims, const int* _sz)$/;"	f	class:cv::Mat_
Mat_	core/mat.inl.hpp	/^Mat_<_Tp>::Mat_(int _dims, const int* _sz, const _Tp& _s)$/;"	f	class:cv::Mat_
Mat_	core/mat.inl.hpp	/^Mat_<_Tp>::Mat_(int _rows, int _cols)$/;"	f	class:cv::Mat_
Mat_	core/mat.inl.hpp	/^Mat_<_Tp>::Mat_(int _rows, int _cols, _Tp* _data, size_t steps)$/;"	f	class:cv::Mat_
Mat_	core/mat.inl.hpp	/^Mat_<_Tp>::Mat_(int _rows, int _cols, const _Tp& value)$/;"	f	class:cv::Mat_
MatchesInfo	stitching/detail/matchers.hpp	/^struct CV_EXPORTS MatchesInfo$/;"	s	namespace:cv::detail
Matrix	flann/matrix.h	/^    Matrix() : rows(0), cols(0), stride(0), data(NULL)$/;"	f	class:cvflann::Matrix
Matrix	flann/matrix.h	/^    Matrix(T* data_, size_t rows_, size_t cols_, size_t stride_ = 0) :$/;"	f	class:cvflann::Matrix
Matrix	flann/matrix.h	/^class Matrix$/;"	c	namespace:cvflann
Matx	core/matx.hpp	/^Matx<_Tp, m, n>::Matx()$/;"	f	class:cv::Matx
Matx	core/matx.hpp	/^Matx<_Tp, m, n>::Matx(_Tp v0)$/;"	f	class:cv::Matx
Matx	core/matx.hpp	/^Matx<_Tp, m, n>::Matx(_Tp v0, _Tp v1)$/;"	f	class:cv::Matx
Matx	core/matx.hpp	/^Matx<_Tp, m, n>::Matx(_Tp v0, _Tp v1, _Tp v2)$/;"	f	class:cv::Matx
Matx	core/matx.hpp	/^Matx<_Tp, m, n>::Matx(_Tp v0, _Tp v1, _Tp v2, _Tp v3)$/;"	f	class:cv::Matx
Matx	core/matx.hpp	/^Matx<_Tp, m, n>::Matx(_Tp v0, _Tp v1, _Tp v2, _Tp v3, _Tp v4)$/;"	f	class:cv::Matx
Matx	core/matx.hpp	/^Matx<_Tp, m, n>::Matx(_Tp v0, _Tp v1, _Tp v2, _Tp v3, _Tp v4, _Tp v5)$/;"	f	class:cv::Matx
Matx	core/matx.hpp	/^Matx<_Tp, m, n>::Matx(_Tp v0, _Tp v1, _Tp v2, _Tp v3, _Tp v4, _Tp v5, _Tp v6)$/;"	f	class:cv::Matx
Matx	core/matx.hpp	/^Matx<_Tp, m, n>::Matx(_Tp v0, _Tp v1, _Tp v2, _Tp v3, _Tp v4, _Tp v5, _Tp v6, _Tp v7)$/;"	f	class:cv::Matx
Matx	core/matx.hpp	/^Matx<_Tp, m, n>::Matx(_Tp v0, _Tp v1, _Tp v2, _Tp v3, _Tp v4, _Tp v5, _Tp v6, _Tp v7, _Tp v8)$/;"	f	class:cv::Matx
Matx	core/matx.hpp	/^Matx<_Tp, m, n>::Matx(_Tp v0, _Tp v1, _Tp v2, _Tp v3, _Tp v4, _Tp v5, _Tp v6, _Tp v7, _Tp v8, _Tp v9)$/;"	f	class:cv::Matx
Matx	core/matx.hpp	/^Matx<_Tp, m, n>::Matx(const _Tp* values)$/;"	f	class:cv::Matx
Matx	core/matx.hpp	/^Matx<_Tp,m,n>::Matx(_Tp v0, _Tp v1, _Tp v2, _Tp v3, _Tp v4, _Tp v5, _Tp v6, _Tp v7, _Tp v8, _Tp v9, _Tp v10, _Tp v11)$/;"	f	class:cv::Matx
Matx	core/matx.hpp	/^Matx<_Tp,m,n>::Matx(_Tp v0, _Tp v1, _Tp v2, _Tp v3, _Tp v4, _Tp v5, _Tp v6, _Tp v7, _Tp v8, _Tp v9, _Tp v10, _Tp v11, _Tp v12, _Tp v13, _Tp v14, _Tp v15)$/;"	f	class:cv::Matx
Matx	core/matx.hpp	/^Matx<_Tp,m,n>::Matx(const Matx<_Tp, m, l>& a, const Matx<_Tp, l, n>& b, Matx_MatMulOp)$/;"	f	class:cv::Matx
Matx	core/matx.hpp	/^Matx<_Tp,m,n>::Matx(const Matx<_Tp, m, n>& a, _T2 alpha, Matx_ScaleOp)$/;"	f	class:cv::Matx
Matx	core/matx.hpp	/^Matx<_Tp,m,n>::Matx(const Matx<_Tp, m, n>& a, const Matx<_Tp, m, n>& b, Matx_AddOp)$/;"	f	class:cv::Matx
Matx	core/matx.hpp	/^Matx<_Tp,m,n>::Matx(const Matx<_Tp, m, n>& a, const Matx<_Tp, m, n>& b, Matx_DivOp)$/;"	f	class:cv::Matx
Matx	core/matx.hpp	/^Matx<_Tp,m,n>::Matx(const Matx<_Tp, m, n>& a, const Matx<_Tp, m, n>& b, Matx_MulOp)$/;"	f	class:cv::Matx
Matx	core/matx.hpp	/^Matx<_Tp,m,n>::Matx(const Matx<_Tp, m, n>& a, const Matx<_Tp, m, n>& b, Matx_SubOp)$/;"	f	class:cv::Matx
Matx	core/matx.hpp	/^Matx<_Tp,m,n>::Matx(const Matx<_Tp, n, m>& a, Matx_TOp)$/;"	f	class:cv::Matx
Matx	core/matx.hpp	/^template<typename _Tp, int m, int n> class Matx$/;"	c	namespace:cv
Matx12d	core/matx.hpp	/^typedef Matx<double, 1, 2> Matx12d;$/;"	t	namespace:cv
Matx12f	core/matx.hpp	/^typedef Matx<float, 1, 2> Matx12f;$/;"	t	namespace:cv
Matx13d	core/matx.hpp	/^typedef Matx<double, 1, 3> Matx13d;$/;"	t	namespace:cv
Matx13f	core/matx.hpp	/^typedef Matx<float, 1, 3> Matx13f;$/;"	t	namespace:cv
Matx14d	core/matx.hpp	/^typedef Matx<double, 1, 4> Matx14d;$/;"	t	namespace:cv
Matx14f	core/matx.hpp	/^typedef Matx<float, 1, 4> Matx14f;$/;"	t	namespace:cv
Matx16d	core/matx.hpp	/^typedef Matx<double, 1, 6> Matx16d;$/;"	t	namespace:cv
Matx16f	core/matx.hpp	/^typedef Matx<float, 1, 6> Matx16f;$/;"	t	namespace:cv
Matx21d	core/matx.hpp	/^typedef Matx<double, 2, 1> Matx21d;$/;"	t	namespace:cv
Matx21f	core/matx.hpp	/^typedef Matx<float, 2, 1> Matx21f;$/;"	t	namespace:cv
Matx22d	core/matx.hpp	/^typedef Matx<double, 2, 2> Matx22d;$/;"	t	namespace:cv
Matx22f	core/matx.hpp	/^typedef Matx<float, 2, 2> Matx22f;$/;"	t	namespace:cv
Matx23d	core/matx.hpp	/^typedef Matx<double, 2, 3> Matx23d;$/;"	t	namespace:cv
Matx23f	core/matx.hpp	/^typedef Matx<float, 2, 3> Matx23f;$/;"	t	namespace:cv
Matx31d	core/matx.hpp	/^typedef Matx<double, 3, 1> Matx31d;$/;"	t	namespace:cv
Matx31f	core/matx.hpp	/^typedef Matx<float, 3, 1> Matx31f;$/;"	t	namespace:cv
Matx32d	core/matx.hpp	/^typedef Matx<double, 3, 2> Matx32d;$/;"	t	namespace:cv
Matx32f	core/matx.hpp	/^typedef Matx<float, 3, 2> Matx32f;$/;"	t	namespace:cv
Matx33d	core/matx.hpp	/^typedef Matx<double, 3, 3> Matx33d;$/;"	t	namespace:cv
Matx33f	core/matx.hpp	/^typedef Matx<float, 3, 3> Matx33f;$/;"	t	namespace:cv
Matx34d	core/matx.hpp	/^typedef Matx<double, 3, 4> Matx34d;$/;"	t	namespace:cv
Matx34f	core/matx.hpp	/^typedef Matx<float, 3, 4> Matx34f;$/;"	t	namespace:cv
Matx41d	core/matx.hpp	/^typedef Matx<double, 4, 1> Matx41d;$/;"	t	namespace:cv
Matx41f	core/matx.hpp	/^typedef Matx<float, 4, 1> Matx41f;$/;"	t	namespace:cv
Matx43d	core/matx.hpp	/^typedef Matx<double, 4, 3> Matx43d;$/;"	t	namespace:cv
Matx43f	core/matx.hpp	/^typedef Matx<float, 4, 3> Matx43f;$/;"	t	namespace:cv
Matx44d	core/matx.hpp	/^typedef Matx<double, 4, 4> Matx44d;$/;"	t	namespace:cv
Matx44f	core/matx.hpp	/^typedef Matx<float, 4, 4> Matx44f;$/;"	t	namespace:cv
Matx61d	core/matx.hpp	/^typedef Matx<double, 6, 1> Matx61d;$/;"	t	namespace:cv
Matx61f	core/matx.hpp	/^typedef Matx<float, 6, 1> Matx61f;$/;"	t	namespace:cv
Matx66d	core/matx.hpp	/^typedef Matx<double, 6, 6> Matx66d;$/;"	t	namespace:cv
Matx66f	core/matx.hpp	/^typedef Matx<float, 6, 6> Matx66f;$/;"	t	namespace:cv
MatxCommaInitializer	core/matx.hpp	/^MatxCommaInitializer<_Tp, m, n>::MatxCommaInitializer(Matx<_Tp, m, n>* _mtx)$/;"	f	class:cv::MatxCommaInitializer
MatxCommaInitializer	core/matx.hpp	/^template<typename _Tp, int m, int n> class MatxCommaInitializer$/;"	c	namespace:cv
Matx_AddOp	core/matx.hpp	/^struct CV_EXPORTS Matx_AddOp {};$/;"	s	namespace:cv
Matx_DetOp	core/matx.hpp	/^template<typename _Tp, int m> struct Matx_DetOp$/;"	s	namespace:cv::internal
Matx_DetOp	core/matx.hpp	/^template<typename _Tp> struct Matx_DetOp<_Tp, 1>$/;"	s	namespace:cv::internal
Matx_DetOp	core/matx.hpp	/^template<typename _Tp> struct Matx_DetOp<_Tp, 2>$/;"	s	namespace:cv::internal
Matx_DetOp	core/matx.hpp	/^template<typename _Tp> struct Matx_DetOp<_Tp, 3>$/;"	s	namespace:cv::internal
Matx_DivOp	core/matx.hpp	/^struct CV_EXPORTS Matx_DivOp {};$/;"	s	namespace:cv
Matx_FastInvOp	core/operations.hpp	/^template<typename _Tp, int m> struct Matx_FastInvOp$/;"	s	namespace:cv::internal
Matx_FastInvOp	core/operations.hpp	/^template<typename _Tp> struct Matx_FastInvOp<_Tp, 2>$/;"	s	namespace:cv::internal
Matx_FastInvOp	core/operations.hpp	/^template<typename _Tp> struct Matx_FastInvOp<_Tp, 3>$/;"	s	namespace:cv::internal
Matx_FastSolveOp	core/operations.hpp	/^template<typename _Tp, int m, int n> struct Matx_FastSolveOp$/;"	s	namespace:cv::internal
Matx_FastSolveOp	core/operations.hpp	/^template<typename _Tp> struct Matx_FastSolveOp<_Tp, 2, 1>$/;"	s	namespace:cv::internal
Matx_FastSolveOp	core/operations.hpp	/^template<typename _Tp> struct Matx_FastSolveOp<_Tp, 3, 1>$/;"	s	namespace:cv::internal
Matx_MatMulOp	core/matx.hpp	/^struct CV_EXPORTS Matx_MatMulOp {};$/;"	s	namespace:cv
Matx_MulOp	core/matx.hpp	/^struct CV_EXPORTS Matx_MulOp {};$/;"	s	namespace:cv
Matx_ScaleOp	core/matx.hpp	/^struct CV_EXPORTS Matx_ScaleOp {};$/;"	s	namespace:cv
Matx_SubOp	core/matx.hpp	/^struct CV_EXPORTS Matx_SubOp {};$/;"	s	namespace:cv
Matx_TOp	core/matx.hpp	/^struct CV_EXPORTS Matx_TOp {};$/;"	s	namespace:cv
Max	cudev/grid/reduce_to_vec.hpp	/^template <typename T> struct Max : maximum<T>$/;"	s	namespace:cv::cudev
Max	ts/ts_gtest.h	/^inline double FloatingPoint<double>::Max() { return DBL_MAX; }$/;"	f	class:testing::internal::FloatingPoint
Max	ts/ts_gtest.h	/^inline float FloatingPoint<float>::Max() { return FLT_MAX; }$/;"	f	class:testing::internal::FloatingPoint
MaxDistance	flann/dist.h	/^struct MaxDistance$/;"	s	namespace:cvflann
MeasurementMatr	video/tracking_c.h	/^    float* MeasurementMatr;     \/* =measurement_matrix->data.fl *\/$/;"	m	struct:CvKalman
MemStorage	core/core_c.h	/^typedef Ptr<CvMemStorage> MemStorage;$/;"	t	namespace:cv
MercatorProjector	stitching/detail/warpers.hpp	/^struct CV_EXPORTS MercatorProjector : ProjectorBase$/;"	s	namespace:cv::detail
MercatorWarper	stitching/detail/warpers.hpp	/^    MercatorWarper(float scale) { projector_.scale = scale; }$/;"	f	class:cv::detail::MercatorWarper
MercatorWarper	stitching/detail/warpers.hpp	/^class CV_EXPORTS MercatorWarper : public RotationWarperBase<MercatorProjector>$/;"	c	namespace:cv::detail
MercatorWarper	stitching/warpers.hpp	/^class MercatorWarper: public WarperCreator$/;"	c	namespace:cv
MergeDebevec	photo.hpp	/^class CV_EXPORTS_W MergeDebevec : public MergeExposures$/;"	c	namespace:cv
MergeExposures	photo.hpp	/^class CV_EXPORTS_W MergeExposures : public Algorithm$/;"	c	namespace:cv
MergeImpl	cudev/grid/detail/split_merge.hpp	/^    template <class Policy> struct MergeImpl<2, Policy>$/;"	s	namespace:cv::cudev::grid_split_merge_detail
MergeImpl	cudev/grid/detail/split_merge.hpp	/^    template <class Policy> struct MergeImpl<3, Policy>$/;"	s	namespace:cv::cudev::grid_split_merge_detail
MergeImpl	cudev/grid/detail/split_merge.hpp	/^    template <class Policy> struct MergeImpl<4, Policy>$/;"	s	namespace:cv::cudev::grid_split_merge_detail
MergeMertens	photo.hpp	/^class CV_EXPORTS_W MergeMertens : public MergeExposures$/;"	c	namespace:cv
MergeRobertson	photo.hpp	/^class CV_EXPORTS_W MergeRobertson : public MergeExposures$/;"	c	namespace:cv
Mesh	viz/types.hpp	/^        class CV_EXPORTS Mesh$/;"	c	namespace:cv::viz
Message	ts/ts_gtest.h	/^  Message(const Message& msg) : ss_(new ::std::stringstream) {  \/\/ NOLINT$/;"	f	class:testing::Message
Message	ts/ts_gtest.h	/^  explicit Message(const char* str) : ss_(new ::std::stringstream) {$/;"	f	class:testing::Message
Message	ts/ts_gtest.h	/^class GTEST_API_ Message {$/;"	c	namespace:testing
Methods	ml.hpp	/^    enum Methods {$/;"	g	class:cv::ml::LogisticRegression
MiddleButton	viz/types.hpp	/^            enum MouseButton { NoButton = 0, LeftButton, MiddleButton, RightButton, VScroll } ;$/;"	e	enum:cv::viz::MouseEvent::MouseButton
Min	cudev/grid/reduce_to_vec.hpp	/^template <typename T> struct Min : minimum<T>$/;"	s	namespace:cv::cudev
MinMaxReductor	cudev/grid/detail/reduce.hpp	/^        __device__ __forceinline__ MinMaxReductor()$/;"	f	struct:cv::cudev::grid_reduce_detail::MinMaxReductor
MinMaxReductor	cudev/grid/detail/reduce.hpp	/^    template <class Op, typename src_type, typename work_type> struct MinMaxReductor$/;"	s	namespace:cv::cudev::grid_reduce_detail
MinMaxReductor	cudev/grid/detail/reduce.hpp	/^    template <typename src_type, typename work_type> struct MinMaxReductor<both, src_type, work_type>$/;"	s	namespace:cv::cudev::grid_reduce_detail
MinProblemSolver	core/optim.hpp	/^class CV_EXPORTS MinProblemSolver : public Algorithm$/;"	c	namespace:cv
MinkowskiDistance	flann/dist.h	/^    MinkowskiDistance(int order_) : order(order_) {}$/;"	f	struct:cvflann::MinkowskiDistance
MinkowskiDistance	flann/dist.h	/^struct MinkowskiDistance$/;"	s	namespace:cvflann
Mode	core/persistence.hpp	/^    enum Mode$/;"	g	class:cv::FileStorage
Moments	core/types.hpp	/^class CV_EXPORTS_W_MAP Moments$/;"	c	namespace:cv
Monochrome	cudacodec.hpp	/^    Monochrome = 0,$/;"	e	enum:cv::cudacodec::ChromaFormat
MoreAccurateMotionWobbleSuppressor	videostab/wobble_suppression.hpp	/^class CV_EXPORTS MoreAccurateMotionWobbleSuppressor : public MoreAccurateMotionWobbleSuppressorBase$/;"	c	namespace:cv::videostab
MoreAccurateMotionWobbleSuppressorBase	videostab/wobble_suppression.hpp	/^    MoreAccurateMotionWobbleSuppressorBase() { setPeriod(30); }$/;"	f	class:cv::videostab::MoreAccurateMotionWobbleSuppressorBase
MoreAccurateMotionWobbleSuppressorBase	videostab/wobble_suppression.hpp	/^class CV_EXPORTS MoreAccurateMotionWobbleSuppressorBase : public WobbleSuppressorBase$/;"	c	namespace:cv::videostab
MoreAccurateMotionWobbleSuppressorGpu	videostab/wobble_suppression.hpp	/^class CV_EXPORTS MoreAccurateMotionWobbleSuppressorGpu : public MoreAccurateMotionWobbleSuppressorBase$/;"	c	namespace:cv::videostab
MorphShapes	imgproc.hpp	/^enum MorphShapes {$/;"	g	namespace:cv
MorphShapes_c	imgproc/types_c.h	/^enum MorphShapes_c$/;"	g
MorphTypes	imgproc.hpp	/^enum MorphTypes{$/;"	g	namespace:cv
MotionEstimatorBase	videostab/global_motion.hpp	/^    MotionEstimatorBase(MotionModel model) { setMotionModel(model); }$/;"	f	class:cv::videostab::MotionEstimatorBase
MotionEstimatorBase	videostab/global_motion.hpp	/^class CV_EXPORTS MotionEstimatorBase$/;"	c	namespace:cv::videostab
MotionEstimatorL1	videostab/global_motion.hpp	/^class CV_EXPORTS MotionEstimatorL1 : public MotionEstimatorBase$/;"	c	namespace:cv::videostab
MotionEstimatorRansacL2	videostab/global_motion.hpp	/^class CV_EXPORTS MotionEstimatorRansacL2 : public MotionEstimatorBase$/;"	c	namespace:cv::videostab
MotionFilterBase	videostab/motion_stabilizing.hpp	/^class CV_EXPORTS MotionFilterBase : public IMotionStabilizer$/;"	c	namespace:cv::videostab
MotionInpainter	videostab/inpainting.hpp	/^class CV_EXPORTS MotionInpainter : public InpainterBase$/;"	c	namespace:cv::videostab
MotionModel	videostab/motion_core.hpp	/^enum MotionModel$/;"	g	namespace:cv::videostab
MotionStabilizationPipeline	videostab/motion_stabilizing.hpp	/^class CV_EXPORTS MotionStabilizationPipeline : public IMotionStabilizer$/;"	c	namespace:cv::videostab
MouseButton	viz/types.hpp	/^            enum MouseButton { NoButton = 0, LeftButton, MiddleButton, RightButton, VScroll } ;$/;"	g	class:cv::viz::MouseEvent
MouseButtonPress	viz/types.hpp	/^            enum Type { MouseMove = 1, MouseButtonPress, MouseButtonRelease, MouseScrollDown, MouseScrollUp, MouseDblClick } ;$/;"	e	enum:cv::viz::MouseEvent::Type
MouseButtonRelease	viz/types.hpp	/^            enum Type { MouseMove = 1, MouseButtonPress, MouseButtonRelease, MouseScrollDown, MouseScrollUp, MouseDblClick } ;$/;"	e	enum:cv::viz::MouseEvent::Type
MouseCallback	highgui.hpp	/^typedef void (*MouseCallback)(int event, int x, int y, int flags, void* userdata);$/;"	t	namespace:cv
MouseCallback	viz/viz3d.hpp	/^            typedef void (*MouseCallback)(const MouseEvent&, void*);$/;"	t	class:cv::viz::Viz3d
MouseDblClick	viz/types.hpp	/^            enum Type { MouseMove = 1, MouseButtonPress, MouseButtonRelease, MouseScrollDown, MouseScrollUp, MouseDblClick } ;$/;"	e	enum:cv::viz::MouseEvent::Type
MouseEvent	viz/types.hpp	/^        class CV_EXPORTS MouseEvent$/;"	c	namespace:cv::viz
MouseMove	viz/types.hpp	/^            enum Type { MouseMove = 1, MouseButtonPress, MouseButtonRelease, MouseScrollDown, MouseScrollUp, MouseDblClick } ;$/;"	e	enum:cv::viz::MouseEvent::Type
MouseScrollDown	viz/types.hpp	/^            enum Type { MouseMove = 1, MouseButtonPress, MouseButtonRelease, MouseScrollDown, MouseScrollUp, MouseDblClick } ;$/;"	e	enum:cv::viz::MouseEvent::Type
MouseScrollUp	viz/types.hpp	/^            enum Type { MouseMove = 1, MouseButtonPress, MouseButtonRelease, MouseScrollDown, MouseScrollUp, MouseDblClick } ;$/;"	e	enum:cv::viz::MouseEvent::Type
MultiBandBlender	stitching/detail/blenders.hpp	/^class CV_EXPORTS MultiBandBlender : public Blender$/;"	c	namespace:cv::detail
Mutex	core/utility.hpp	/^class CV_EXPORTS Mutex$/;"	c	namespace:cv
Mutex	ts/ts_gtest.h	/^  Mutex() {$/;"	f	class:std::tr1::Mutex
Mutex	ts/ts_gtest.h	/^  Mutex() {}$/;"	f	class:std::tr1::Mutex
Mutex	ts/ts_gtest.h	/^class Mutex : public MutexBase {$/;"	c	namespace:std::tr1
Mutex	ts/ts_gtest.h	/^class Mutex {$/;"	c	namespace:std::tr1
MutexBase	ts/ts_gtest.h	/^class MutexBase {$/;"	c	namespace:std::tr1
MutexLock	ts/ts_gtest.h	/^typedef GTestMutexLock MutexLock;$/;"	t	namespace:std::tr1
N	core.hpp	/^    enum PeriodParameters {N = 624, M = 397};$/;"	e	enum:cv::RNG_MT19937::PeriodParameters
N1c	cudalegacy.hpp	/^    int N1c; \/\/!< Number of color vectors used to model normal background color variation at a given pixel.$/;"	m	struct:cv::cuda::FGDParams
N1cc	cudalegacy.hpp	/^    int N1cc; \/\/!< Number of color co-occurrence vectors used to model normal background color variation at a given pixel.$/;"	m	struct:cv::cuda::FGDParams
N2c	cudalegacy.hpp	/^    int N2c; \/\/!< Number of color vectors retained at given pixel.  Must be > N1c, typically ~ 5\/3 of N1c.$/;"	m	struct:cv::cuda::FGDParams
N2cc	cudalegacy.hpp	/^    int N2cc; \/\/!< Number of color co-occurrence vectors retained at given pixel.  Must be > N1cc, typically ~ 5\/3 of N1cc.$/;"	m	struct:cv::cuda::FGDParams
NAMED	core/persistence.hpp	/^        NAMED     = 64  \/\/!< the node has a name (i.e. it is element of a mapping)$/;"	e	enum:cv::FileNode::Type
NAME_EXPECTED	core/persistence.hpp	/^        NAME_EXPECTED  = 2,$/;"	e	enum:cv::FileStorage::__anon100
NATIVE_DOUBLE	core/cuda.hpp	/^    NATIVE_DOUBLE = FEATURE_SET_COMPUTE_13,$/;"	e	enum:cv::cuda::FeatureSet
NAryMatIterator	core/mat.hpp	/^class CV_EXPORTS NAryMatIterator$/;"	c	namespace:cv
NCVBroxOpticalFlowDescriptor	cudalegacy/NCVBroxOpticalFlow.hpp	/^struct NCVBroxOpticalFlowDescriptor$/;"	s
NCVDebugOutputHandler	cudalegacy/NCV.hpp	/^typedef void NCVDebugOutputHandler(const cv::String &msg);$/;"	t
NCVMatrix	cudalegacy/NCV.hpp	/^    NCVMatrix()$/;"	f	class:NCVMatrix
NCVMatrix	cudalegacy/NCV.hpp	/^class NCVMatrix$/;"	c
NCVMatrixAlloc	cudalegacy/NCV.hpp	/^    NCVMatrixAlloc(INCVMemAllocator &allocator_, Ncv32u width_, Ncv32u height_, Ncv32u pitch_=0)$/;"	f	class:NCVMatrixAlloc
NCVMatrixAlloc	cudalegacy/NCV.hpp	/^class NCVMatrixAlloc : public NCVMatrix<T>$/;"	c
NCVMatrixReuse	cudalegacy/NCV.hpp	/^    NCVMatrixReuse(const NCVMatrix<T> &mat, NcvRect32u roi)$/;"	f	class:NCVMatrixReuse
NCVMatrixReuse	cudalegacy/NCV.hpp	/^    NCVMatrixReuse(const NCVMemSegment &memSegment, Ncv32u alignment, Ncv32u width_, Ncv32u height_, Ncv32u pitch_=0, NcvBool bSkipPitchCheck=false)$/;"	f	class:NCVMatrixReuse
NCVMatrixReuse	cudalegacy/NCV.hpp	/^class NCVMatrixReuse : public NCVMatrix<T>$/;"	c
NCVMemNativeAllocator	cudalegacy/NCV.hpp	/^class CV_EXPORTS NCVMemNativeAllocator : public INCVMemAllocator$/;"	c
NCVMemPtr	cudalegacy/NCV.hpp	/^struct CV_EXPORTS NCVMemPtr$/;"	s
NCVMemSegment	cudalegacy/NCV.hpp	/^struct CV_EXPORTS NCVMemSegment$/;"	s
NCVMemStackAllocator	cudalegacy/NCV.hpp	/^class CV_EXPORTS NCVMemStackAllocator : public INCVMemAllocator$/;"	c
NCVMemoryType	cudalegacy/NCV.hpp	/^enum NCVMemoryType$/;"	g
NCVMemoryTypeDevice	cudalegacy/NCV.hpp	/^    NCVMemoryTypeDevice$/;"	e	enum:NCVMemoryType
NCVMemoryTypeHostPageable	cudalegacy/NCV.hpp	/^    NCVMemoryTypeHostPageable,$/;"	e	enum:NCVMemoryType
NCVMemoryTypeHostPinned	cudalegacy/NCV.hpp	/^    NCVMemoryTypeHostPinned,$/;"	e	enum:NCVMemoryType
NCVMemoryTypeNone	cudalegacy/NCV.hpp	/^    NCVMemoryTypeNone,$/;"	e	enum:NCVMemoryType
NCVPipeObjDet_Default	cudalegacy/NCVHaarObjectDetection.hpp	/^    NCVPipeObjDet_Default               = 0x000,$/;"	e	enum:__anon30
NCVPipeObjDet_FindLargestObject	cudalegacy/NCVHaarObjectDetection.hpp	/^    NCVPipeObjDet_FindLargestObject     = 0x002,$/;"	e	enum:__anon30
NCVPipeObjDet_UseFairImageScaling	cudalegacy/NCVHaarObjectDetection.hpp	/^    NCVPipeObjDet_UseFairImageScaling   = 0x001,$/;"	e	enum:__anon30
NCVPipeObjDet_VisualizeInPlace	cudalegacy/NCVHaarObjectDetection.hpp	/^    NCVPipeObjDet_VisualizeInPlace      = 0x004,$/;"	e	enum:__anon30
NCVStatus	cudalegacy/NCV.hpp	/^typedef Ncv32u NCVStatus;$/;"	t
NCVVector	cudalegacy/NCV.hpp	/^    NCVVector()$/;"	f	class:NCVVector
NCVVector	cudalegacy/NCV.hpp	/^class NCVVector$/;"	c
NCVVectorAlloc	cudalegacy/NCV.hpp	/^    NCVVectorAlloc(INCVMemAllocator &allocator_, Ncv32u length_)$/;"	f	class:NCVVectorAlloc
NCVVectorAlloc	cudalegacy/NCV.hpp	/^class NCVVectorAlloc : public NCVVector<T>$/;"	c
NCVVectorReuse	cudalegacy/NCV.hpp	/^    NCVVectorReuse(const NCVMemSegment &memSegment, Ncv32u length_)$/;"	f	class:NCVVectorReuse
NCVVectorReuse	cudalegacy/NCV.hpp	/^    explicit NCVVectorReuse(const NCVMemSegment &memSegment)$/;"	f	class:NCVVectorReuse
NCVVectorReuse	cudalegacy/NCV.hpp	/^class NCVVectorReuse : public NCVVector<T>$/;"	c
NCV_ALLOCATOR_BAD_ALLOC	cudalegacy/NCV.hpp	/^    NCV_ALLOCATOR_BAD_ALLOC,$/;"	e	enum:__anon31
NCV_ALLOCATOR_BAD_DEALLOC	cudalegacy/NCV.hpp	/^    NCV_ALLOCATOR_BAD_DEALLOC,$/;"	e	enum:__anon31
NCV_ALLOCATOR_BAD_REUSE	cudalegacy/NCV.hpp	/^    NCV_ALLOCATOR_BAD_REUSE,$/;"	e	enum:__anon31
NCV_ALLOCATOR_DEALLOC_ORDER	cudalegacy/NCV.hpp	/^    NCV_ALLOCATOR_DEALLOC_ORDER,$/;"	e	enum:__anon31
NCV_ALLOCATOR_INSUFFICIENT_CAPACITY	cudalegacy/NCV.hpp	/^    NCV_ALLOCATOR_INSUFFICIENT_CAPACITY,$/;"	e	enum:__anon31
NCV_ALLOCATOR_NOT_INITIALIZED	cudalegacy/NCV.hpp	/^    NCV_ALLOCATOR_NOT_INITIALIZED,$/;"	e	enum:__anon31
NCV_CT_ASSERT	cudalegacy/NCV.hpp	89;"	d
NCV_CT_PREP_PASTE	cudalegacy/NCV.hpp	83;"	d
NCV_CT_PREP_PASTE_AUX	cudalegacy/NCV.hpp	82;"	d
NCV_CUDA_ERROR	cudalegacy/NCV.hpp	/^    NCV_CUDA_ERROR,$/;"	e	enum:__anon31
NCV_DIMENSIONS_INVALID	cudalegacy/NCV.hpp	/^    NCV_DIMENSIONS_INVALID,$/;"	e	enum:__anon31
NCV_FILE_ERROR	cudalegacy/NCV.hpp	/^    NCV_FILE_ERROR,$/;"	e	enum:__anon31
NCV_HAAR_INVALID_PIXEL_STEP	cudalegacy/NCV.hpp	/^    NCV_HAAR_INVALID_PIXEL_STEP,$/;"	e	enum:__anon31
NCV_HAAR_TOO_LARGE_FEATURES	cudalegacy/NCV.hpp	/^    NCV_HAAR_TOO_LARGE_FEATURES,$/;"	e	enum:__anon31
NCV_HAAR_TOO_MANY_FEATURES_IN_CASCADE	cudalegacy/NCV.hpp	/^    NCV_HAAR_TOO_MANY_FEATURES_IN_CASCADE,$/;"	e	enum:__anon31
NCV_HAAR_TOO_MANY_FEATURES_IN_CLASSIFIER	cudalegacy/NCV.hpp	/^    NCV_HAAR_TOO_MANY_FEATURES_IN_CLASSIFIER,$/;"	e	enum:__anon31
NCV_HAAR_XML_LOADING_EXCEPTION	cudalegacy/NCV.hpp	/^    NCV_HAAR_XML_LOADING_EXCEPTION,$/;"	e	enum:__anon31
NCV_INCONSISTENT_INPUT	cudalegacy/NCV.hpp	/^    NCV_INCONSISTENT_INPUT,$/;"	e	enum:__anon31
NCV_INVALID_ROI	cudalegacy/NCV.hpp	/^    NCV_INVALID_ROI,$/;"	e	enum:__anon31
NCV_INVALID_SCALE	cudalegacy/NCV.hpp	/^    NCV_INVALID_SCALE,$/;"	e	enum:__anon31
NCV_INVALID_STEP	cudalegacy/NCV.hpp	/^    NCV_INVALID_STEP,$/;"	e	enum:__anon31
NCV_LAST_STATUS	cudalegacy/NCV.hpp	/^    NCV_LAST_STATUS                           \/\/\/< Marker to continue error numeration in other files$/;"	e	enum:__anon31
NCV_MEM_COPY_ERROR	cudalegacy/NCV.hpp	/^    NCV_MEM_COPY_ERROR,$/;"	e	enum:__anon31
NCV_MEM_INSUFFICIENT_CAPACITY	cudalegacy/NCV.hpp	/^    NCV_MEM_INSUFFICIENT_CAPACITY,$/;"	e	enum:__anon31
NCV_MEM_RESIDENCE_ERROR	cudalegacy/NCV.hpp	/^    NCV_MEM_RESIDENCE_ERROR,$/;"	e	enum:__anon31
NCV_NOIMPL_HAAR_TILTED_FEATURES	cudalegacy/NCV.hpp	/^    NCV_NOIMPL_HAAR_TILTED_FEATURES,$/;"	e	enum:__anon31
NCV_NOT_IMPLEMENTED	cudalegacy/NCV.hpp	/^    NCV_NOT_IMPLEMENTED,$/;"	e	enum:__anon31
NCV_NPP_ERROR	cudalegacy/NCV.hpp	/^    NCV_NPP_ERROR,$/;"	e	enum:__anon31
NCV_NULL_PTR	cudalegacy/NCV.hpp	/^    NCV_NULL_PTR,$/;"	e	enum:__anon31
NCV_RESET_SKIP_COND	cudalegacy/NCV.hpp	383;"	d
NCV_SET_SKIP_COND	cudalegacy/NCV.hpp	379;"	d
NCV_SKIP_COND_BEGIN	cudalegacy/NCV.hpp	387;"	d
NCV_SKIP_COND_END	cudalegacy/NCV.hpp	391;"	d
NCV_SUCCESS	cudalegacy/NCV.hpp	/^    NCV_SUCCESS,$/;"	e	enum:__anon31
NCV_TEXTURE_BIND_ERROR	cudalegacy/NCV.hpp	/^    NCV_TEXTURE_BIND_ERROR,$/;"	e	enum:__anon31
NCV_UNKNOWN_ERROR	cudalegacy/NCV.hpp	/^    NCV_UNKNOWN_ERROR,$/;"	e	enum:__anon31
NCV_WARNING_HAAR_DETECTIONS_VECTOR_OVERFLOW	cudalegacy/NCV.hpp	/^    NCV_WARNING_HAAR_DETECTIONS_VECTOR_OVERFLOW,$/;"	e	enum:__anon31
NEXT_AROUND_DST	imgproc.hpp	/^           NEXT_AROUND_DST   = 0x22,$/;"	e	enum:cv::Subdiv2D::__anon39
NEXT_AROUND_LEFT	imgproc.hpp	/^           NEXT_AROUND_LEFT  = 0x13,$/;"	e	enum:cv::Subdiv2D::__anon39
NEXT_AROUND_ORG	imgproc.hpp	/^    enum { NEXT_AROUND_ORG   = 0x00,$/;"	e	enum:cv::Subdiv2D::__anon39
NEXT_AROUND_RIGHT	imgproc.hpp	/^           NEXT_AROUND_RIGHT = 0x31,$/;"	e	enum:cv::Subdiv2D::__anon39
NNIndex	flann/nn_index.h	/^class NNIndex$/;"	c	namespace:cvflann
NO	stitching/detail/blenders.hpp	/^    enum { NO, FEATHER, MULTI_BAND };$/;"	e	enum:cv::detail::Blender::__anon416
NO	stitching/detail/exposure_compensate.hpp	/^    enum { NO, GAIN, GAIN_BLOCKS };$/;"	e	enum:cv::detail::ExposureCompensator::__anon418
NONE	core/mat.hpp	/^        NONE              = 0 << KIND_SHIFT,$/;"	e	enum:cv::_InputArray::__anon135
NONE	core/opengl.hpp	/^        NONE            = 0,$/;"	e	enum:cv::ogl::Texture2D::Format
NONE	core/persistence.hpp	/^        NONE      = 0, \/\/!< empty node$/;"	e	enum:cv::FileNode::Type
NONE	viz/types.hpp	/^            enum { NONE = 0, ALT = 1, CTRL = 2, SHIFT = 4 };$/;"	e	enum:cv::viz::KeyboardEvent::__anon73
NONMAX_SUPPRESSION	features2d.hpp	/^        THRESHOLD = 10000, NONMAX_SUPPRESSION = 10001,$/;"	e	enum:cv::AgastFeatureDetector::__anon284
NONMAX_SUPPRESSION	features2d.hpp	/^        THRESHOLD = 10000, NONMAX_SUPPRESSION=10001, FAST_N=10002,$/;"	e	enum:cv::FastFeatureDetector::__anon283
NORMAL	core.hpp	/^           NORMAL  = 1$/;"	e	enum:cv::RNG::__anon402
NORMAL_CLONE	photo.hpp	/^    NORMAL_CLONE = 1,$/;"	e	enum:cv::__anon2
NORMCONV_FILTER	photo.hpp	/^    NORMCONV_FILTER = 2$/;"	e	enum:cv::__anon3
NORM_HAMMING	core/base.hpp	/^                 NORM_HAMMING   = 6,$/;"	e	enum:cv::NormTypes
NORM_HAMMING2	core/base.hpp	/^                 NORM_HAMMING2  = 7,$/;"	e	enum:cv::NormTypes
NORM_INF	core/base.hpp	/^enum NormTypes { NORM_INF       = 1,$/;"	e	enum:cv::NormTypes
NORM_L1	core/base.hpp	/^                 NORM_L1        = 2,$/;"	e	enum:cv::NormTypes
NORM_L2	core/base.hpp	/^                 NORM_L2        = 4,$/;"	e	enum:cv::NormTypes
NORM_L2SQR	core/base.hpp	/^                 NORM_L2SQR     = 5,$/;"	e	enum:cv::NormTypes
NORM_MINMAX	core/base.hpp	/^                 NORM_MINMAX    = 32 \/\/!< flag$/;"	e	enum:cv::NormTypes
NORM_RELATIVE	core/base.hpp	/^                 NORM_RELATIVE  = 8, \/\/!< flag$/;"	e	enum:cv::NormTypes
NORM_TYPE_MASK	core/base.hpp	/^                 NORM_TYPE_MASK = 7,$/;"	e	enum:cv::NormTypes
NOT_DRAW_SINGLE_POINTS	features2d.hpp	/^          NOT_DRAW_SINGLE_POINTS = 2, \/\/!< Single keypoints will not be drawn.$/;"	e	enum:cv::DrawMatchesFlags::__anon290
NO_CACHE	core/ocl.hpp	/^        NO_CACHE=0,$/;"	e	enum:cv::ocl::Device::__anon157
NO_INPUT_SCALE	ml.hpp	/^        NO_INPUT_SCALE = 2,$/;"	e	enum:cv::ml::ANN_MLP::TrainFlags
NO_LOCAL_MEM	core/ocl.hpp	/^        NO_LOCAL_MEM=0,$/;"	e	enum:cv::ocl::Device::__anon158
NO_OUTPUT_SCALE	ml.hpp	/^        NO_OUTPUT_SCALE = 4$/;"	e	enum:cv::ml::ANN_MLP::TrainFlags
NO_SIZE	core/ocl.hpp	/^    enum { LOCAL=1, READ_ONLY=2, WRITE_ONLY=4, READ_WRITE=6, CONSTANT=8, PTR_ONLY = 16, NO_SIZE=256 };$/;"	e	enum:cv::ocl::KernelArg::__anon160
NO_UV	core.hpp	/^        NO_UV    = 2,$/;"	e	enum:cv::SVD::Flags
NPPST_CUDA_KERNEL_EXECUTION_ERROR	cudalegacy/NCV.hpp	/^    NPPST_CUDA_KERNEL_EXECUTION_ERROR,        \/\/\/< CUDA kernel execution error$/;"	e	enum:__anon31
NPPST_ERROR	cudalegacy/NCV.hpp	/^    NPPST_ERROR,                              \/\/\/< Unknown error$/;"	e	enum:__anon31
NPPST_INVALID_ROI	cudalegacy/NCV.hpp	/^    NPPST_INVALID_ROI,                        \/\/\/< Invalid region of interest argument$/;"	e	enum:__anon31
NPPST_INVALID_SCALE	cudalegacy/NCV.hpp	/^    NPPST_INVALID_SCALE,                      \/\/\/< Invalid scale parameter passed$/;"	e	enum:__anon31
NPPST_INVALID_STEP	cudalegacy/NCV.hpp	/^    NPPST_INVALID_STEP,                       \/\/\/< Invalid image lines step argument (check sign, alignment, relation to image width)$/;"	e	enum:__anon31
NPPST_MEMCPY_ERROR	cudalegacy/NCV.hpp	/^    NPPST_MEMCPY_ERROR,                       \/\/\/< CUDA memory copy error$/;"	e	enum:__anon31
NPPST_MEMFREE_ERR	cudalegacy/NCV.hpp	/^    NPPST_MEMFREE_ERR,                        \/\/\/< CUDA memory deallocation error$/;"	e	enum:__anon31
NPPST_MEM_ALLOC_ERR	cudalegacy/NCV.hpp	/^    NPPST_MEM_ALLOC_ERR,                      \/\/\/< CUDA memory allocation error$/;"	e	enum:__anon31
NPPST_MEM_INSUFFICIENT_BUFFER	cudalegacy/NCV.hpp	/^    NPPST_MEM_INSUFFICIENT_BUFFER,            \/\/\/< Insufficient user-allocated buffer$/;"	e	enum:__anon31
NPPST_MEM_INTERNAL_ERROR	cudalegacy/NCV.hpp	/^    NPPST_MEM_INTERNAL_ERROR,                 \/\/\/< Internal memory management error$/;"	e	enum:__anon31
NPPST_MEM_RESIDENCE_ERROR	cudalegacy/NCV.hpp	/^    NPPST_MEM_RESIDENCE_ERROR,                \/\/\/< Memory residence error detected (check if pointers should be device or pinned)$/;"	e	enum:__anon31
NPPST_NULL_POINTER_ERROR	cudalegacy/NCV.hpp	/^    NPPST_NULL_POINTER_ERROR,                 \/\/\/< NULL pointer argument error$/;"	e	enum:__anon31
NPPST_SUCCESS	cudalegacy/NCV.hpp	/^    NPPST_SUCCESS = NCV_SUCCESS,              \/\/\/< Successful operation (same as NPP_NO_ERROR)$/;"	e	enum:__anon31
NPPST_TEXTURE_BIND_ERROR	cudalegacy/NCV.hpp	/^    NPPST_TEXTURE_BIND_ERROR,                 \/\/\/< CUDA texture binding error or non-zero offset returned$/;"	e	enum:__anon31
NPP_VERSION	core/private.cuda.hpp	65;"	d
NU	ml.hpp	/^        NU=3,$/;"	e	enum:cv::ml::SVM::ParamTypes
NUL	ts.hpp	/^        NUL=0,$/;"	e	enum:cvtest::TS::__anon25
NU_SVC	ml.hpp	/^        NU_SVC=101,$/;"	e	enum:cv::ml::SVM::Types
NU_SVR	ml.hpp	/^        NU_SVR=104$/;"	e	enum:cv::ml::SVM::Types
NaluFramingType	cudacodec.hpp	/^    int NaluFramingType; \/\/!< NVVE_CONFIGURE_NALU_FRAMING_TYPE$/;"	m	struct:cv::cudacodec::EncoderParams
NativeArray	ts/ts_gtest.h	/^  NativeArray(const Element* array, size_t count, RelationToSource relation) {$/;"	f	class:testing::internal::NativeArray
NativeArray	ts/ts_gtest.h	/^  NativeArray(const NativeArray& rhs) {$/;"	f	class:testing::internal::NativeArray
NativeArray	ts/ts_gtest.h	/^class NativeArray {$/;"	c	namespace:testing::internal
Ncv16s	cudalegacy/NCV.hpp	/^typedef              short Ncv16s;$/;"	t
Ncv16u	cudalegacy/NCV.hpp	/^typedef     unsigned short Ncv16u;$/;"	t
Ncv32f	cudalegacy/NCV.hpp	/^typedef              float Ncv32f;$/;"	t
Ncv32f_a	cudalegacy/NCVHaarObjectDetection.hpp	/^typedef Ncv32f Ncv32f_a;$/;"	t
Ncv32f_a	cudalegacy/NCVHaarObjectDetection.hpp	/^typedef Ncv32f __attribute__((__may_alias__)) Ncv32f_a;$/;"	t
Ncv32s	cudalegacy/NCV.hpp	/^typedef                int Ncv32s;$/;"	t
Ncv32u	cudalegacy/NCV.hpp	/^typedef       unsigned int Ncv32u;$/;"	t
Ncv32u_a	cudalegacy/NCVHaarObjectDetection.hpp	/^typedef Ncv32u Ncv32u_a;$/;"	t
Ncv32u_a	cudalegacy/NCVHaarObjectDetection.hpp	/^typedef Ncv32u __attribute__((__may_alias__)) Ncv32u_a;$/;"	t
Ncv64f	cudalegacy/NCV.hpp	/^typedef             double Ncv64f;$/;"	t
Ncv64s	cudalegacy/NCV.hpp	/^typedef          long long Ncv64s;$/;"	t
Ncv64u	cudalegacy/NCV.hpp	/^    typedef uint64_t Ncv64u;$/;"	t
Ncv64u	cudalegacy/NCV.hpp	/^    typedef unsigned long long Ncv64u;$/;"	t
Ncv8s	cudalegacy/NCV.hpp	/^typedef        signed char Ncv8s;$/;"	t
Ncv8u	cudalegacy/NCV.hpp	/^typedef      unsigned char Ncv8u;$/;"	t
NcvBool	cudalegacy/NCV.hpp	/^typedef               bool NcvBool;$/;"	t
NcvCTprep	cudalegacy/NCV.hpp	/^namespace NcvCTprep$/;"	n
NcvPoint2D32s	cudalegacy/NCV.hpp	/^    __host__ __device__ NcvPoint2D32s() : x(0), y(0) {};$/;"	f	struct:NcvPoint2D32s
NcvPoint2D32s	cudalegacy/NCV.hpp	/^    __host__ __device__ NcvPoint2D32s(Ncv32s x_, Ncv32s y_) : x(x_), y(y_) {}$/;"	f	struct:NcvPoint2D32s
NcvPoint2D32s	cudalegacy/NCV.hpp	/^struct NcvPoint2D32s$/;"	s
NcvPoint2D32u	cudalegacy/NCV.hpp	/^    __host__ __device__ NcvPoint2D32u() : x(0), y(0) {};$/;"	f	struct:NcvPoint2D32u
NcvPoint2D32u	cudalegacy/NCV.hpp	/^    __host__ __device__ NcvPoint2D32u(Ncv32u x_, Ncv32u y_) : x(x_), y(y_) {}$/;"	f	struct:NcvPoint2D32u
NcvPoint2D32u	cudalegacy/NCV.hpp	/^struct NcvPoint2D32u$/;"	s
NcvRect32s	cudalegacy/NCV.hpp	/^    __host__ __device__ NcvRect32s() : x(0), y(0), width(0), height(0) {};$/;"	f	struct:NcvRect32s
NcvRect32s	cudalegacy/NCV.hpp	/^    __host__ __device__ NcvRect32s(Ncv32s x_, Ncv32s y_, Ncv32s width_, Ncv32s height_)$/;"	f	struct:NcvRect32s
NcvRect32s	cudalegacy/NCV.hpp	/^struct NcvRect32s$/;"	s
NcvRect32u	cudalegacy/NCV.hpp	/^    __host__ __device__ NcvRect32u() : x(0), y(0), width(0), height(0) {};$/;"	f	struct:NcvRect32u
NcvRect32u	cudalegacy/NCV.hpp	/^    __host__ __device__ NcvRect32u(Ncv32u x_, Ncv32u y_, Ncv32u width_, Ncv32u height_)$/;"	f	struct:NcvRect32u
NcvRect32u	cudalegacy/NCV.hpp	/^struct NcvRect32u$/;"	s
NcvRect8u	cudalegacy/NCV.hpp	/^    __host__ __device__ NcvRect8u() : x(0), y(0), width(0), height(0) {};$/;"	f	struct:NcvRect8u
NcvRect8u	cudalegacy/NCV.hpp	/^    __host__ __device__ NcvRect8u(Ncv8u x_, Ncv8u y_, Ncv8u width_, Ncv8u height_) : x(x_), y(y_), width(width_), height(height_) {}$/;"	f	struct:NcvRect8u
NcvRect8u	cudalegacy/NCV.hpp	/^struct NcvRect8u$/;"	s
NcvSize32s	cudalegacy/NCV.hpp	/^    __host__ __device__ NcvSize32s() : width(0), height(0) {};$/;"	f	struct:NcvSize32s
NcvSize32s	cudalegacy/NCV.hpp	/^    __host__ __device__ NcvSize32s(Ncv32s width_, Ncv32s height_) : width(width_), height(height_) {}$/;"	f	struct:NcvSize32s
NcvSize32s	cudalegacy/NCV.hpp	/^struct NcvSize32s$/;"	s
NcvSize32u	cudalegacy/NCV.hpp	/^    __host__ __device__ NcvSize32u() : width(0), height(0) {};$/;"	f	struct:NcvSize32u
NcvSize32u	cudalegacy/NCV.hpp	/^    __host__ __device__ NcvSize32u(Ncv32u width_, Ncv32u height_) : width(width_), height(height_) {}$/;"	f	struct:NcvSize32u
NcvSize32u	cudalegacy/NCV.hpp	/^struct NcvSize32u$/;"	s
NcvTimer	cudalegacy/NCV.hpp	/^typedef struct _NcvTimer *NcvTimer;$/;"	t	typeref:struct:_NcvTimer
NearestInterPtr	cudev/ptr2d/interpolation.hpp	/^template <class SrcPtr> struct NearestInterPtr$/;"	s	namespace:cv::cudev
NearestInterPtrSz	cudev/ptr2d/interpolation.hpp	/^template <class SrcPtr> struct NearestInterPtrSz : NearestInterPtr<SrcPtr>$/;"	s	namespace:cv::cudev
No	core/cuda/functional.hpp	/^        struct No {Yes a[2];};$/;"	s	struct:cv::cuda::device::IsBinaryFunction
No	core/cuda/functional.hpp	/^        struct No {Yes a[2];};$/;"	s	struct:cv::cuda::device::IsUnaryFunction
No	cudev/functional/functional.hpp	/^    struct No {Yes a[2];};$/;"	s	struct:cv::cudev::IsBinaryFunction
No	cudev/functional/functional.hpp	/^    struct No {Yes a[2];};$/;"	s	struct:cv::cudev::IsUnaryFunction
NoButton	viz/types.hpp	/^            enum MouseButton { NoButton = 0, LeftButton, MiddleButton, RightButton, VScroll } ;$/;"	e	enum:cv::viz::MouseEvent::MouseButton
NoExposureCompensator	stitching/detail/exposure_compensate.hpp	/^class CV_EXPORTS NoExposureCompensator : public ExposureCompensator$/;"	c	namespace:cv::detail
NoSeamFinder	stitching/detail/seam_finders.hpp	/^class CV_EXPORTS NoSeamFinder : public SeamFinder$/;"	c	namespace:cv::detail
Node	core/mat.hpp	/^    struct CV_EXPORTS Node$/;"	s	class:cv::SparseMat
Node	flann/hierarchical_clustering_index.h	/^    struct Node$/;"	s	class:cvflann::HierarchicalClusteringIndex
Node	flann/kdtree_index.h	/^    struct Node$/;"	s	class:cvflann::KDTreeIndex
Node	flann/kdtree_single_index.h	/^    struct Node$/;"	s	class:cvflann::KDTreeSingleIndex
Node	ml.hpp	/^    class CV_EXPORTS Node$/;"	c	class:cv::ml::DTrees
NodePtr	flann/hierarchical_clustering_index.h	/^    typedef Node* NodePtr;$/;"	t	class:cvflann::HierarchicalClusteringIndex
NodePtr	flann/kdtree_index.h	/^    typedef Node* NodePtr;$/;"	t	class:cvflann::KDTreeIndex
NodePtr	flann/kdtree_single_index.h	/^    typedef Node* NodePtr;$/;"	t	class:cvflann::KDTreeSingleIndex
NonConstType	core/cuda/type_traits.hpp	/^        typedef typename type_traits_detail::UnConst<T>::type                                                NonConstType;$/;"	t	struct:cv::cuda::device::TypeTraits
NonVolatileType	core/cuda/type_traits.hpp	/^        typedef typename type_traits_detail::UnVolatile<T>::type                                             NonVolatileType;$/;"	t	struct:cv::cuda::device::TypeTraits
None	ts/ts_gtest.h	/^struct None {};$/;"	s	namespace:testing::internal
NoneT	ts/ts_gtest.h	/^struct NoneT {};$/;"	s	namespace:testing::internal
NormHamming	cudev/block/vec_distance.hpp	/^    __device__ __forceinline__ NormHamming() : mySum(0) {}$/;"	f	struct:cv::cudev::NormHamming
NormHamming	cudev/block/vec_distance.hpp	/^struct NormHamming$/;"	s	namespace:cv::cudev
NormHistogramCostExtractor	shape/hist_cost.hpp	/^class CV_EXPORTS_W NormHistogramCostExtractor : public HistogramCostExtractor$/;"	c	namespace:cv
NormL1	cudev/block/vec_distance.hpp	/^    __device__ __forceinline__ NormL1() : mySum(0) {}$/;"	f	struct:cv::cudev::NormL1
NormL1	cudev/block/vec_distance.hpp	/^    __device__ __forceinline__ NormL1() : mySum(0.0f) {}$/;"	f	struct:cv::cudev::NormL1
NormL1	cudev/block/vec_distance.hpp	/^template <> struct NormL1<float>$/;"	s	namespace:cv::cudev
NormL1	cudev/block/vec_distance.hpp	/^template <typename T> struct NormL1$/;"	s	namespace:cv::cudev
NormL2	cudev/block/vec_distance.hpp	/^    __device__ __forceinline__ NormL2() : mySum(0.0f) {}$/;"	f	struct:cv::cudev::NormL2
NormL2	cudev/block/vec_distance.hpp	/^struct NormL2$/;"	s	namespace:cv::cudev
NormTypes	core/base.hpp	/^enum NormTypes { NORM_INF       = 1,$/;"	g	namespace:cv
NormalBayesClassifier	ml.hpp	/^class CV_EXPORTS_W NormalBayesClassifier : public StatModel$/;"	c	namespace:cv::ml
Notification	ts/ts_gtest.h	/^  Notification() : notified_(false) {$/;"	f	class:std::tr1::Notification
Notification	ts/ts_gtest.h	/^class Notification {$/;"	c	namespace:std::tr1
Notify	ts/ts_gtest.h	/^  void Notify() {$/;"	f	class:std::tr1::Notification
NppStBorderType	cudalegacy/NPP_staging.hpp	/^enum NppStBorderType$/;"	g
NppStInterpMode	cudalegacy/NPP_staging.hpp	/^enum NppStInterpMode$/;"	g
NppStInterpolationState	cudalegacy/NPP_staging.hpp	/^ struct NppStInterpolationState$/;"	s
NppStStreamHandler	cudalegacy/private.hpp	/^        inline explicit NppStStreamHandler(cudaStream_t newStream = 0)$/;"	f	class:cv::cuda::NppStStreamHandler
NppStStreamHandler	cudalegacy/private.hpp	/^    class NppStStreamHandler$/;"	c	namespace:cv::cuda
NullDeblurer	videostab/deblurring.hpp	/^class CV_EXPORTS NullDeblurer : public DeblurerBase$/;"	c	namespace:cv::videostab
NullFrameSource	videostab/frame_source.hpp	/^class CV_EXPORTS NullFrameSource : public IFrameSource$/;"	c	namespace:cv::videostab
NullInpainter	videostab/inpainting.hpp	/^class CV_EXPORTS NullInpainter : public InpainterBase$/;"	c	namespace:cv::videostab
NullLog	videostab/log.hpp	/^class CV_EXPORTS NullLog : public ILog$/;"	c	namespace:cv::videostab
NullOutlierRejector	videostab/outlier_rejection.hpp	/^class CV_EXPORTS NullOutlierRejector : public IOutlierRejector$/;"	c	namespace:cv::videostab
NullType	cudev/util/type_traits.hpp	/^struct NullType {};$/;"	s	namespace:cv::cudev
NullWobbleSuppressor	videostab/wobble_suppression.hpp	/^class CV_EXPORTS NullWobbleSuppressor : public WobbleSuppressorBase$/;"	c	namespace:cv::videostab
NumClassifierRootNodes	cudalegacy/NCVHaarObjectDetection.hpp	/^    Ncv32u NumClassifierRootNodes;$/;"	m	struct:HaarClassifierCascadeDescriptor
NumClassifierTotalNodes	cudalegacy/NCVHaarObjectDetection.hpp	/^    Ncv32u NumClassifierTotalNodes;$/;"	m	struct:HaarClassifierCascadeDescriptor
NumFeatures	cudalegacy/NCVHaarObjectDetection.hpp	/^    Ncv32u NumFeatures;$/;"	m	struct:HaarClassifierCascadeDescriptor
NumStages	cudalegacy/NCVHaarObjectDetection.hpp	/^    Ncv32u NumStages;$/;"	m	struct:HaarClassifierCascadeDescriptor
OAST_9_16	features2d.hpp	/^        AGAST_5_8 = 0, AGAST_7_12d = 1, AGAST_7_12s = 2, OAST_9_16 = 3,$/;"	e	enum:cv::AgastFeatureDetector::__anon284
OBJDET_MASK_ELEMENT_INVALID_32U	cudalegacy/NCVHaarObjectDetection.hpp	383;"	d
OCL_ALL_CHANNELS	ts/ocl_test.hpp	357;"	d
OCL_ALL_DEPTHS	ts/ocl_test.hpp	356;"	d
OCL_EXPECT_MATS_NEAR	ts/ocl_test.hpp	126;"	d
OCL_EXPECT_MATS_NEAR_RELATIVE	ts/ocl_test.hpp	144;"	d
OCL_EXPECT_MATS_NEAR_RELATIVE_SPARSE	ts/ocl_test.hpp	163;"	d
OCL_INSTANTIATE_TEST_CASE_P	ts/ocl_test.hpp	363;"	d
OCL_OFF	ts/ocl_test.hpp	353;"	d
OCL_ON	ts/ocl_test.hpp	354;"	d
OCL_PERFORMANCE_CHECK	core/ocl.hpp	680;"	d
OCL_PERF_ENUM	ts/ocl_perf.hpp	96;"	d
OCL_PERF_STRATEGY	ts/ocl_perf.hpp	56;"	d
OCL_PERF_TEST	ts/ocl_perf.hpp	58;"	d
OCL_PERF_TEST_P	ts/ocl_perf.hpp	59;"	d
OCL_RNG_SEED	ts/ocl_test.hpp	193;"	d
OCL_SIZE_1	ts/ocl_perf.hpp	86;"	d
OCL_SIZE_2	ts/ocl_perf.hpp	87;"	d
OCL_SIZE_3	ts/ocl_perf.hpp	88;"	d
OCL_SIZE_4	ts/ocl_perf.hpp	89;"	d
OCL_TEST	ts/ocl_test.hpp	351;"	d
OCL_TEST_CYCLE	ts/ocl_perf.hpp	99;"	d
OCL_TEST_CYCLE_MULTIRUN	ts/ocl_perf.hpp	105;"	d
OCL_TEST_CYCLE_N	ts/ocl_perf.hpp	102;"	d
OCL_TEST_F	ts/ocl_test.hpp	350;"	d
OCL_TEST_P	ts/ocl_test.hpp	349;"	d
OCL_TEST_SIZES	ts/ocl_perf.hpp	91;"	d
OCL_TEST_TYPES	ts/ocl_perf.hpp	92;"	d
OCL_TEST_TYPES_134	ts/ocl_perf.hpp	94;"	d
OCL_TEST_TYPES_14	ts/ocl_perf.hpp	93;"	d
OCL_VECTOR_DEFAULT	core/ocl.hpp	/^    OCL_VECTOR_DEFAULT = OCL_VECTOR_OWN$/;"	e	enum:cv::ocl::OclVectorStrategy
OCL_VECTOR_MAX	core/ocl.hpp	/^    OCL_VECTOR_MAX = 1,$/;"	e	enum:cv::ocl::OclVectorStrategy
OCL_VECTOR_OWN	core/ocl.hpp	/^    OCL_VECTOR_OWN = 0,$/;"	e	enum:cv::ocl::OclVectorStrategy
OCTAVE_ROW	cudafeatures2d.hpp	/^        OCTAVE_ROW,$/;"	e	enum:cv::cuda::ORB::__anon292
OK	stitching.hpp	/^        OK = 0,$/;"	e	enum:cv::Stitcher::Status
OK	ts.hpp	/^        OK=0,$/;"	e	enum:cvtest::TS::FailureCode
ONE_CLASS	ml.hpp	/^        ONE_CLASS=102,$/;"	e	enum:cv::ml::SVM::Types
OPACITY	viz/widgets.hpp	/^            OPACITY,$/;"	e	enum:cv::viz::RenderingProperties
OPENCV_ASSERT	core/core_c.h	2664;"	d
OPENCV_CALL	core/core_c.h	2668;"	d
OPENCV_CUDA_EMULATION_HPP_	core/cuda/emulation.hpp	44;"	d
OPENCV_CUDA_IMPLEMENT_BIN_FUNCTOR	core/cuda/functional.hpp	480;"	d
OPENCV_CUDA_IMPLEMENT_BIN_FUNCTOR	core/cuda/functional.hpp	526;"	d
OPENCV_CUDA_IMPLEMENT_GRAY2RGB5x5_TRAITS	core/cuda/color.hpp	102;"	d
OPENCV_CUDA_IMPLEMENT_GRAY2RGB5x5_TRAITS	core/cuda/detail/color_detail.hpp	390;"	d
OPENCV_CUDA_IMPLEMENT_GRAY2RGB_TRAITS	core/cuda/color.hpp	97;"	d
OPENCV_CUDA_IMPLEMENT_GRAY2RGB_TRAITS	core/cuda/detail/color_detail.hpp	348;"	d
OPENCV_CUDA_IMPLEMENT_HLS2RGB_TRAITS	core/cuda/color.hpp	224;"	d
OPENCV_CUDA_IMPLEMENT_HLS2RGB_TRAITS	core/cuda/detail/color_detail.hpp	1482;"	d
OPENCV_CUDA_IMPLEMENT_HSV2RGB_TRAITS	core/cuda/color.hpp	202;"	d
OPENCV_CUDA_IMPLEMENT_HSV2RGB_TRAITS	core/cuda/detail/color_detail.hpp	1209;"	d
OPENCV_CUDA_IMPLEMENT_Lab2RGB_TRAITS	core/cuda/color.hpp	264;"	d
OPENCV_CUDA_IMPLEMENT_Lab2RGB_TRAITS	core/cuda/detail/color_detail.hpp	1764;"	d
OPENCV_CUDA_IMPLEMENT_Luv2RGB_TRAITS	core/cuda/color.hpp	304;"	d
OPENCV_CUDA_IMPLEMENT_Luv2RGB_TRAITS	core/cuda/detail/color_detail.hpp	1964;"	d
OPENCV_CUDA_IMPLEMENT_MINMAX	core/cuda/functional.hpp	307;"	d
OPENCV_CUDA_IMPLEMENT_MINMAX	core/cuda/functional.hpp	355;"	d
OPENCV_CUDA_IMPLEMENT_RGB2GRAY_TRAITS	core/cuda/color.hpp	114;"	d
OPENCV_CUDA_IMPLEMENT_RGB2GRAY_TRAITS	core/cuda/detail/color_detail.hpp	483;"	d
OPENCV_CUDA_IMPLEMENT_RGB2HLS_TRAITS	core/cuda/color.hpp	213;"	d
OPENCV_CUDA_IMPLEMENT_RGB2HLS_TRAITS	core/cuda/detail/color_detail.hpp	1342;"	d
OPENCV_CUDA_IMPLEMENT_RGB2HSV_TRAITS	core/cuda/color.hpp	191;"	d
OPENCV_CUDA_IMPLEMENT_RGB2HSV_TRAITS	core/cuda/detail/color_detail.hpp	1069;"	d
OPENCV_CUDA_IMPLEMENT_RGB2Lab_TRAITS	core/cuda/color.hpp	244;"	d
OPENCV_CUDA_IMPLEMENT_RGB2Lab_TRAITS	core/cuda/detail/color_detail.hpp	1651;"	d
OPENCV_CUDA_IMPLEMENT_RGB2Luv_TRAITS	core/cuda/color.hpp	284;"	d
OPENCV_CUDA_IMPLEMENT_RGB2Luv_TRAITS	core/cuda/detail/color_detail.hpp	1863;"	d
OPENCV_CUDA_IMPLEMENT_RGB2RGB5x5_TRAITS	core/cuda/color.hpp	81;"	d
OPENCV_CUDA_IMPLEMENT_RGB2RGB5x5_TRAITS	core/cuda/detail/color_detail.hpp	221;"	d
OPENCV_CUDA_IMPLEMENT_RGB2RGB_TRAITS	core/cuda/color.hpp	70;"	d
OPENCV_CUDA_IMPLEMENT_RGB2RGB_TRAITS	core/cuda/detail/color_detail.hpp	148;"	d
OPENCV_CUDA_IMPLEMENT_RGB2XYZ_TRAITS	core/cuda/color.hpp	169;"	d
OPENCV_CUDA_IMPLEMENT_RGB2XYZ_TRAITS	core/cuda/detail/color_detail.hpp	856;"	d
OPENCV_CUDA_IMPLEMENT_RGB2YCrCb_TRAITS	core/cuda/color.hpp	147;"	d
OPENCV_CUDA_IMPLEMENT_RGB2YCrCb_TRAITS	core/cuda/detail/color_detail.hpp	701;"	d
OPENCV_CUDA_IMPLEMENT_RGB2YUV_TRAITS	core/cuda/color.hpp	125;"	d
OPENCV_CUDA_IMPLEMENT_RGB2YUV_TRAITS	core/cuda/detail/color_detail.hpp	534;"	d
OPENCV_CUDA_IMPLEMENT_RGB5x52GRAY_TRAITS	core/cuda/color.hpp	107;"	d
OPENCV_CUDA_IMPLEMENT_RGB5x52GRAY_TRAITS	core/cuda/detail/color_detail.hpp	432;"	d
OPENCV_CUDA_IMPLEMENT_RGB5x52RGB_TRAITS	core/cuda/color.hpp	92;"	d
OPENCV_CUDA_IMPLEMENT_RGB5x52RGB_TRAITS	core/cuda/detail/color_detail.hpp	302;"	d
OPENCV_CUDA_IMPLEMENT_TYPE_VEC	core/cuda/vec_traits.hpp	131;"	d
OPENCV_CUDA_IMPLEMENT_TYPE_VEC	core/cuda/vec_traits.hpp	152;"	d
OPENCV_CUDA_IMPLEMENT_UN_FUNCTOR	core/cuda/functional.hpp	460;"	d
OPENCV_CUDA_IMPLEMENT_UN_FUNCTOR	core/cuda/functional.hpp	524;"	d
OPENCV_CUDA_IMPLEMENT_UN_FUNCTOR_NO_DOUBLE	core/cuda/functional.hpp	525;"	d
OPENCV_CUDA_IMPLEMENT_VEC_TRAITS	core/cuda/vec_traits.hpp	168;"	d
OPENCV_CUDA_IMPLEMENT_VEC_TRAITS	core/cuda/vec_traits.hpp	226;"	d
OPENCV_CUDA_IMPLEMENT_XYZ2RGB_TRAITS	core/cuda/color.hpp	180;"	d
OPENCV_CUDA_IMPLEMENT_XYZ2RGB_TRAITS	core/cuda/detail/color_detail.hpp	931;"	d
OPENCV_CUDA_IMPLEMENT_YCrCb2RGB_TRAITS	core/cuda/color.hpp	158;"	d
OPENCV_CUDA_IMPLEMENT_YCrCb2RGB_TRAITS	core/cuda/detail/color_detail.hpp	780;"	d
OPENCV_CUDA_IMPLEMENT_YUV2RGB_TRAITS	core/cuda/color.hpp	136;"	d
OPENCV_CUDA_IMPLEMENT_YUV2RGB_TRAITS	core/cuda/detail/color_detail.hpp	622;"	d
OPENCV_CUDA_LOG_MEM_BANKS	core/cuda/utility.hpp	59;"	d
OPENCV_CUDA_LOG_WARP_SIZE	core/cuda/utility.hpp	57;"	d
OPENCV_CUDA_MEM_BANKS	core/cuda/utility.hpp	60;"	d
OPENCV_CUDA_TRANSFORM_FUNCTOR_TRAITS	core/cuda/functional.hpp	791;"	d
OPENCV_CUDA_WARP_REDUCE_HPP__	core/cuda/warp_reduce.hpp	44;"	d
OPENCV_CUDA_WARP_SIZE	core/cuda/utility.hpp	58;"	d
OPENCV_ERROR	core/core_c.h	2661;"	d
OPENCV_FLANN_ALLOCATOR_H_	flann/allocator.h	32;"	d
OPENCV_FLANN_ALL_INDICES_H_	flann/all_indices.h	31;"	d
OPENCV_FLANN_ANY_H_	flann/any.h	2;"	d
OPENCV_FLANN_AUTOTUNED_INDEX_H_	flann/autotuned_index.h	31;"	d
OPENCV_FLANN_BASE_HPP_	flann/flann_base.hpp	32;"	d
OPENCV_FLANN_COMPOSITE_INDEX_H_	flann/composite_index.h	32;"	d
OPENCV_FLANN_CONFIG_H_	flann/config.h	31;"	d
OPENCV_FLANN_DATASET_H_	flann/matrix.h	32;"	d
OPENCV_FLANN_DEFINES_H_	flann/defines.h	31;"	d
OPENCV_FLANN_DIST_H_	flann/dist.h	32;"	d
OPENCV_FLANN_DUMMY_H_	flann/dummy.h	3;"	d
OPENCV_FLANN_DYNAMIC_BITSET_H_	flann/dynamic_bitset.h	36;"	d
OPENCV_FLANN_GENERAL_H_	flann/general.h	32;"	d
OPENCV_FLANN_GROUND_TRUTH_H_	flann/ground_truth.h	32;"	d
OPENCV_FLANN_HDF5_H_	flann/hdf5.h	31;"	d
OPENCV_FLANN_HEAP_H_	flann/heap.h	32;"	d
OPENCV_FLANN_HIERARCHICAL_CLUSTERING_INDEX_H_	flann/hierarchical_clustering_index.h	32;"	d
OPENCV_FLANN_INDEX_TESTING_H_	flann/index_testing.h	32;"	d
OPENCV_FLANN_KDTREE_INDEX_H_	flann/kdtree_index.h	32;"	d
OPENCV_FLANN_KDTREE_SINGLE_INDEX_H_	flann/kdtree_single_index.h	32;"	d
OPENCV_FLANN_KMEANS_INDEX_H_	flann/kmeans_index.h	32;"	d
OPENCV_FLANN_LINEAR_INDEX_H_	flann/linear_index.h	32;"	d
OPENCV_FLANN_LOGGER_H	flann/logger.h	32;"	d
OPENCV_FLANN_LSH_INDEX_H_	flann/lsh_index.h	36;"	d
OPENCV_FLANN_LSH_TABLE_H_	flann/lsh_table.h	36;"	d
OPENCV_FLANN_NNINDEX_H	flann/nn_index.h	32;"	d
OPENCV_FLANN_OBJECT_FACTORY_H_	flann/object_factory.h	32;"	d
OPENCV_FLANN_PARAMS_H_	flann/params.h	31;"	d
OPENCV_FLANN_RANDOM_H	flann/random.h	32;"	d
OPENCV_FLANN_RESULTSET_H	flann/result_set.h	32;"	d
OPENCV_FLANN_SAMPLING_H_	flann/sampling.h	31;"	d
OPENCV_FLANN_SAVING_H_	flann/saving.h	30;"	d
OPENCV_FLANN_SIMPLEX_DOWNHILL_H_	flann/simplex_downhill.h	32;"	d
OPENCV_FLANN_TIMER_H	flann/timer.h	32;"	d
OPENCV_HAL_1ST	hal/intrin.hpp	55;"	d
OPENCV_HAL_ADD	hal/intrin.hpp	52;"	d
OPENCV_HAL_AND	hal/intrin.hpp	53;"	d
OPENCV_HAL_IMPL_ADD_SUB_OP	hal/intrin_cpp.hpp	251;"	d
OPENCV_HAL_IMPL_BIN_OP	hal/intrin_cpp.hpp	126;"	d
OPENCV_HAL_IMPL_BIT_OP	hal/intrin_cpp.hpp	148;"	d
OPENCV_HAL_IMPL_CMP_OP	hal/intrin_cpp.hpp	233;"	d
OPENCV_HAL_IMPL_C_INIT	hal/intrin_cpp.hpp	719;"	d
OPENCV_HAL_IMPL_C_PACK	hal/intrin_cpp.hpp	758;"	d
OPENCV_HAL_IMPL_C_SHIFT	hal/intrin_cpp.hpp	737;"	d
OPENCV_HAL_IMPL_MATH_FUNC	hal/intrin_cpp.hpp	181;"	d
OPENCV_HAL_IMPL_MINMAX_FUNC	hal/intrin_cpp.hpp	202;"	d
OPENCV_HAL_IMPL_NEON_BIN_FUNC	hal/intrin_neon.hpp	441;"	d
OPENCV_HAL_IMPL_NEON_BIN_OP	hal/intrin_neon.hpp	301;"	d
OPENCV_HAL_IMPL_NEON_CHECK_ALLANY	hal/intrin_neon.hpp	614;"	d
OPENCV_HAL_IMPL_NEON_EXPAND	hal/intrin_neon.hpp	664;"	d
OPENCV_HAL_IMPL_NEON_FLT_BIT_OP	hal/intrin_neon.hpp	399;"	d
OPENCV_HAL_IMPL_NEON_INIT	hal/intrin_neon.hpp	231;"	d
OPENCV_HAL_IMPL_NEON_INTERLEAVED	hal/intrin_neon.hpp	775;"	d
OPENCV_HAL_IMPL_NEON_INT_CMP_OP	hal/intrin_neon.hpp	463;"	d
OPENCV_HAL_IMPL_NEON_LOADSTORE_OP	hal/intrin_neon.hpp	538;"	d
OPENCV_HAL_IMPL_NEON_LOGIC_OP	hal/intrin_neon.hpp	381;"	d
OPENCV_HAL_IMPL_NEON_PACK	hal/intrin_neon.hpp	255;"	d
OPENCV_HAL_IMPL_NEON_REDUCE_OP_4	hal/intrin_neon.hpp	562;"	d
OPENCV_HAL_IMPL_NEON_SELECT	hal/intrin_neon.hpp	650;"	d
OPENCV_HAL_IMPL_NEON_SHIFT_OP	hal/intrin_neon.hpp	517;"	d
OPENCV_HAL_IMPL_NEON_TRANSPOSE4x4	hal/intrin_neon.hpp	749;"	d
OPENCV_HAL_IMPL_NEON_UNPACKS	hal/intrin_neon.hpp	694;"	d
OPENCV_HAL_IMPL_SHIFT_OP	hal/intrin_cpp.hpp	336;"	d
OPENCV_HAL_IMPL_SSE_ABSDIFF_8_16	hal/intrin_sse.hpp	856;"	d
OPENCV_HAL_IMPL_SSE_BIN_FUNC	hal/intrin_sse.hpp	712;"	d
OPENCV_HAL_IMPL_SSE_BIN_OP	hal/intrin_sse.hpp	563;"	d
OPENCV_HAL_IMPL_SSE_CHECK_SIGNS	hal/intrin_sse.hpp	1012;"	d
OPENCV_HAL_IMPL_SSE_EXPAND	hal/intrin_sse.hpp	1055;"	d
OPENCV_HAL_IMPL_SSE_FLT_CMP_OP	hal/intrin_sse.hpp	830;"	d
OPENCV_HAL_IMPL_SSE_INITVEC	hal/intrin_sse.hpp	251;"	d
OPENCV_HAL_IMPL_SSE_INIT_FROM_FLT	hal/intrin_sse.hpp	284;"	d
OPENCV_HAL_IMPL_SSE_INT_CMP_OP	hal/intrin_sse.hpp	768;"	d
OPENCV_HAL_IMPL_SSE_LOADSTORE_FLT_OP	hal/intrin_sse.hpp	966;"	d
OPENCV_HAL_IMPL_SSE_LOADSTORE_INTERLEAVE	hal/intrin_sse.hpp	1489;"	d
OPENCV_HAL_IMPL_SSE_LOADSTORE_INT_OP	hal/intrin_sse.hpp	938;"	d
OPENCV_HAL_IMPL_SSE_LOGIC_OP	hal/intrin_sse.hpp	660;"	d
OPENCV_HAL_IMPL_SSE_MISC_FLT_OP	hal/intrin_sse.hpp	872;"	d
OPENCV_HAL_IMPL_SSE_REDUCE_OP_4	hal/intrin_sse.hpp	992;"	d
OPENCV_HAL_IMPL_SSE_SELECT	hal/intrin_sse.hpp	1038;"	d
OPENCV_HAL_IMPL_SSE_SHIFT_OP	hal/intrin_sse.hpp	896;"	d
OPENCV_HAL_IMPL_SSE_TRANSPOSE4x4	hal/intrin_sse.hpp	1194;"	d
OPENCV_HAL_IMPL_SSE_UNPACKS	hal/intrin_sse.hpp	1120;"	d
OPENCV_HAL_NOP	hal/intrin.hpp	54;"	d
OPENCV_HAL_PACKS	hal/intrin_sse.hpp	1022;"	d
OPENGL_BUFFER	core/mat.hpp	/^        OPENGL_BUFFER     = 7 << KIND_SHIFT,$/;"	e	enum:cv::_InputArray::__anon135
OPEN_CAMERA	videoio/cap_winrt.hpp	/^    OPEN_CAMERA = 300,$/;"	e	enum:cv::__anon70
OPTFLOW_FARNEBACK_GAUSSIAN	video/tracking.hpp	/^       OPTFLOW_FARNEBACK_GAUSSIAN   = 256$/;"	e	enum:cv::__anon400
OPTFLOW_LK_GET_MIN_EIGENVALS	video/tracking.hpp	/^       OPTFLOW_LK_GET_MIN_EIGENVALS = 8,$/;"	e	enum:cv::__anon400
OPTFLOW_USE_INITIAL_FLOW	video/tracking.hpp	/^enum { OPTFLOW_USE_INITIAL_FLOW     = 4,$/;"	e	enum:cv::__anon400
ORB	cudafeatures2d.hpp	/^class CV_EXPORTS ORB : public cv::ORB, public Feature2DAsync$/;"	c	namespace:cv::cuda
ORB	features2d.hpp	/^class CV_EXPORTS_W ORB : public Feature2D$/;"	c	namespace:cv
ORIG_RESOL	stitching.hpp	/^    enum { ORIG_RESOL = -1 };$/;"	e	enum:cv::Stitcher::__anon72
OUTPUT	ts.hpp	/^    enum { INPUT, INPUT_OUTPUT, OUTPUT, REF_INPUT_OUTPUT, REF_OUTPUT, TEMP, MASK, MAX_ARR };$/;"	e	enum:cvtest::ArrayTest::__anon26
OVERSEE_TEST	ts/ts_gtest.h	/^  enum TestRole { OVERSEE_TEST, EXECUTE_TEST };$/;"	e	enum:testing::internal::DeathTest::TestRole
Object	objdetect/detection_based_tracker.hpp	/^        typedef std::pair<cv::Rect, int> Object;$/;"	t	class:cv::DetectionBasedTracker
ObjectFactory	flann/object_factory.h	/^    ObjectFactory() {}$/;"	f	class:cvflann::ObjectFactory
ObjectFactory	flann/object_factory.h	/^class ObjectFactory$/;"	c	namespace:cvflann
ObjectRegistry	flann/object_factory.h	/^    typedef std::map<UniqueIdType, ObjectCreator> ObjectRegistry;$/;"	t	class:cvflann::ObjectFactory
ObjectStatus	objdetect/detection_based_tracker.hpp	/^        enum ObjectStatus$/;"	g	class:cv::DetectionBasedTracker
OclVectorStrategy	core/ocl.hpp	/^enum OclVectorStrategy$/;"	g	namespace:cv::ocl
Ok	hal.hpp	/^    Ok = 0,$/;"	e	enum:cv::hal::Error::__anon419
OnEnvironmentsSetUpEnd	ts/ts_gtest.h	/^  virtual void OnEnvironmentsSetUpEnd(const UnitTest& \/*unit_test*\/) {}$/;"	f	class:testing::EmptyTestEventListener
OnEnvironmentsSetUpStart	ts/ts_gtest.h	/^  virtual void OnEnvironmentsSetUpStart(const UnitTest& \/*unit_test*\/) {}$/;"	f	class:testing::EmptyTestEventListener
OnEnvironmentsTearDownEnd	ts/ts_gtest.h	/^  virtual void OnEnvironmentsTearDownEnd(const UnitTest& \/*unit_test*\/) {}$/;"	f	class:testing::EmptyTestEventListener
OnEnvironmentsTearDownStart	ts/ts_gtest.h	/^  virtual void OnEnvironmentsTearDownStart(const UnitTest& \/*unit_test*\/) {}$/;"	f	class:testing::EmptyTestEventListener
OnTestCaseEnd	ts/ts_gtest.h	/^  virtual void OnTestCaseEnd(const TestCase& \/*test_case*\/) {}$/;"	f	class:testing::EmptyTestEventListener
OnTestCaseStart	ts/ts_gtest.h	/^  virtual void OnTestCaseStart(const TestCase& \/*test_case*\/) {}$/;"	f	class:testing::EmptyTestEventListener
OnTestEnd	ts/ts_gtest.h	/^  virtual void OnTestEnd(const TestInfo& \/*test_info*\/) {}$/;"	f	class:testing::EmptyTestEventListener
OnTestIterationEnd	ts/ts_gtest.h	/^  virtual void OnTestIterationEnd(const UnitTest& \/*unit_test*\/,$/;"	f	class:testing::EmptyTestEventListener
OnTestIterationStart	ts/ts_gtest.h	/^  virtual void OnTestIterationStart(const UnitTest& \/*unit_test*\/,$/;"	f	class:testing::EmptyTestEventListener
OnTestPartResult	ts/ts_gtest.h	/^  virtual void OnTestPartResult(const TestPartResult& \/*test_part_result*\/) {}$/;"	f	class:testing::EmptyTestEventListener
OnTestProgramEnd	ts/ts_gtest.h	/^  virtual void OnTestProgramEnd(const UnitTest& \/*unit_test*\/) {}$/;"	f	class:testing::EmptyTestEventListener
OnTestProgramStart	ts/ts_gtest.h	/^  virtual void OnTestProgramStart(const UnitTest& \/*unit_test*\/) {}$/;"	f	class:testing::EmptyTestEventListener
OnTestStart	ts/ts_gtest.h	/^  virtual void OnTestStart(const TestInfo& \/*test_info*\/) {}$/;"	f	class:testing::EmptyTestEventListener
OnePassStabilizer	videostab/stabilizer.hpp	/^class CV_EXPORTS OnePassStabilizer : public StabilizerBase, public IFrameSource$/;"	c	namespace:cv::videostab
OpUnroller	core/cuda/detail/transform_detail.hpp	/^        template <> struct OpUnroller<1>$/;"	s	namespace:cv::cuda::device::transform_detail
OpUnroller	core/cuda/detail/transform_detail.hpp	/^        template <> struct OpUnroller<2>$/;"	s	namespace:cv::cuda::device::transform_detail
OpUnroller	core/cuda/detail/transform_detail.hpp	/^        template <> struct OpUnroller<3>$/;"	s	namespace:cv::cuda::device::transform_detail
OpUnroller	core/cuda/detail/transform_detail.hpp	/^        template <> struct OpUnroller<4>$/;"	s	namespace:cv::cuda::device::transform_detail
OpUnroller	core/cuda/detail/transform_detail.hpp	/^        template <> struct OpUnroller<8>$/;"	s	namespace:cv::cuda::device::transform_detail
OpUnroller	cudev/grid/detail/transform.hpp	/^    template <> struct OpUnroller<1>$/;"	s	namespace:cv::cudev::grid_transform_detail
OpUnroller	cudev/grid/detail/transform.hpp	/^    template <> struct OpUnroller<2>$/;"	s	namespace:cv::cudev::grid_transform_detail
OpUnroller	cudev/grid/detail/transform.hpp	/^    template <> struct OpUnroller<3>$/;"	s	namespace:cv::cudev::grid_transform_detail
OpUnroller	cudev/grid/detail/transform.hpp	/^    template <> struct OpUnroller<4>$/;"	s	namespace:cv::cudev::grid_transform_detail
OpenCLApiCallError	core/base.hpp	/^    OpenCLApiCallError=        -220,$/;"	e	enum:cv::Error::Code
OpenCLDoubleNotSupported	core/base.hpp	/^    OpenCLDoubleNotSupported=  -221,$/;"	e	enum:cv::Error::Code
OpenCLInitError	core/base.hpp	/^    OpenCLInitError=           -222,$/;"	e	enum:cv::Error::Code
OpenCLNoAMDBlasFft	core/base.hpp	/^    OpenCLNoAMDBlasFft=        -223$/;"	e	enum:cv::Error::Code
OpenGlApiCallError	core/base.hpp	/^    OpenGlApiCallError=        -219,$/;"	e	enum:cv::Error::Code
OpenGlDrawCallback	highgui.hpp	/^typedef void (*OpenGlDrawCallback)(void* userdata);$/;"	t	namespace:cv
OpenGlNotSupported	core/base.hpp	/^    OpenGlNotSupported=        -218,$/;"	e	enum:cv::Error::Code
OpticalFlowDual_TVL1	cudaoptflow.hpp	/^class CV_EXPORTS OpticalFlowDual_TVL1 : public DenseOpticalFlow$/;"	c	namespace:cv::cuda
OrbFeaturesFinder	stitching/detail/matchers.hpp	/^class CV_EXPORTS OrbFeaturesFinder : public FeaturesFinder$/;"	c	namespace:cv::detail
OutputArray	core/mat.hpp	/^typedef const _OutputArray& OutputArray;$/;"	t	namespace:cv
OutputArrayOfArrays	core/mat.hpp	/^typedef OutputArray OutputArrayOfArrays;$/;"	t	namespace:cv
P	ml.hpp	/^        P=2,$/;"	e	enum:cv::ml::SVM::ParamTypes
PAGE_LOCKED	core/cuda.hpp	/^    enum AllocType { PAGE_LOCKED = 1, SHARED = 2, WRITE_COMBINED = 4 };$/;"	e	enum:cv::cuda::HostMem::AllocType
PARAM_TEST_CASE	ts/cuda_test.hpp	211;"	d
PARAM_TEST_CASE	ts/ocl_test.hpp	327;"	d
PATH	viz/widgets.hpp	/^            enum {FRAMES = 1, PATH = 2, BOTH = FRAMES + PATH };$/;"	e	enum:cv::viz::WTrajectory::__anon74
PCA	core.hpp	/^class CV_EXPORTS PCA$/;"	c	namespace:cv
PERF_PROXY_NAMESPACE_NAME_	ts/ts_perf.hpp	502;"	d
PERF_RUN_CUDA	ts/ts_perf.hpp	219;"	d
PERF_STRATEGY	ts/ts_perf.hpp	/^enum PERF_STRATEGY$/;"	g	namespace:perf
PERF_STRATEGY_BASE	ts/ts_perf.hpp	/^    PERF_STRATEGY_BASE = 0,$/;"	e	enum:perf::PERF_STRATEGY
PERF_STRATEGY_DEFAULT	ts/ts_perf.hpp	/^    PERF_STRATEGY_DEFAULT = -1,$/;"	e	enum:perf::PERF_STRATEGY
PERF_STRATEGY_SIMPLE	ts/ts_perf.hpp	/^    PERF_STRATEGY_SIMPLE = 1$/;"	e	enum:perf::PERF_STRATEGY
PERF_TEST	ts/ts_perf.hpp	517;"	d
PERF_TESTS_LOG_TAG	ts/ts_perf.hpp	14;"	d
PERF_TEST_F	ts/ts_perf.hpp	555;"	d
PERF_TEST_P	ts/ts_perf.hpp	590;"	d
PFRAME	cudacodec.hpp	/^        PFRAME = 2,$/;"	e	enum:cv::cudacodec::EncoderCallBack::PicType
PIXEL_PACK_BUFFER	core/opengl.hpp	/^        PIXEL_PACK_BUFFER    = 0x88EB, \/\/!< The buffer will be used for reading from OpenGL textures$/;"	e	enum:cv::ogl::Buffer::Target
PIXEL_UNPACK_BUFFER	core/opengl.hpp	/^        PIXEL_UNPACK_BUFFER  = 0x88EC  \/\/!< The buffer will be used for writing to OpenGL textures$/;"	e	enum:cv::ogl::Buffer::Target
PNCovariance	video/tracking_c.h	/^    float* PNCovariance;        \/* =process_noise_cov->data.fl *\/$/;"	m	struct:CvKalman
POINTS	core/opengl.hpp	/^    POINTS         = 0x0000,$/;"	e	enum:cv::ogl::RenderModes
POINT_SIZE	viz/widgets.hpp	/^            POINT_SIZE,$/;"	e	enum:cv::viz::RenderingProperties
POLY	ml.hpp	/^        POLY=1,$/;"	e	enum:cv::ml::SVM::KernelTypes
POLYGON	core/opengl.hpp	/^    POLYGON        = 0x0009$/;"	e	enum:cv::ogl::RenderModes
PREDICT_AUTO	ml.hpp	/^    enum Flags { PREDICT_AUTO=0, PREDICT_SUM=(1<<8), PREDICT_MAX_VOTE=(2<<8), PREDICT_MASK=(3<<8) };$/;"	e	enum:cv::ml::DTrees::Flags
PREDICT_MASK	ml.hpp	/^    enum Flags { PREDICT_AUTO=0, PREDICT_SUM=(1<<8), PREDICT_MAX_VOTE=(2<<8), PREDICT_MASK=(3<<8) };$/;"	e	enum:cv::ml::DTrees::Flags
PREDICT_MAX_VOTE	ml.hpp	/^    enum Flags { PREDICT_AUTO=0, PREDICT_SUM=(1<<8), PREDICT_MAX_VOTE=(2<<8), PREDICT_MASK=(3<<8) };$/;"	e	enum:cv::ml::DTrees::Flags
PREDICT_SUM	ml.hpp	/^    enum Flags { PREDICT_AUTO=0, PREDICT_SUM=(1<<8), PREDICT_MAX_VOTE=(2<<8), PREDICT_MASK=(3<<8) };$/;"	e	enum:cv::ml::DTrees::Flags
PREFILTER_NORMALIZED_RESPONSE	calib3d.hpp	/^    enum { PREFILTER_NORMALIZED_RESPONSE = 0,$/;"	e	enum:cv::StereoBM::__anon50
PREFILTER_XSOBEL	calib3d.hpp	/^           PREFILTER_XSOBEL              = 1$/;"	e	enum:cv::StereoBM::__anon50
PREPROCESSED_INPUT	ml.hpp	/^        PREPROCESSED_INPUT=4$/;"	e	enum:cv::ml::StatModel::Flags
PREV_AROUND_DST	imgproc.hpp	/^           PREV_AROUND_DST   = 0x33,$/;"	e	enum:cv::Subdiv2D::__anon39
PREV_AROUND_LEFT	imgproc.hpp	/^           PREV_AROUND_LEFT  = 0x20,$/;"	e	enum:cv::Subdiv2D::__anon39
PREV_AROUND_ORG	imgproc.hpp	/^           PREV_AROUND_ORG   = 0x11,$/;"	e	enum:cv::Subdiv2D::__anon39
PREV_AROUND_RIGHT	imgproc.hpp	/^           PREV_AROUND_RIGHT = 0x02$/;"	e	enum:cv::Subdiv2D::__anon39
PROJ_SPHERICAL_EQRECT	imgproc.hpp	/^       PROJ_SPHERICAL_EQRECT = 1$/;"	e	enum:cv::UndistortTypes
PROJ_SPHERICAL_ORTHO	imgproc.hpp	/^       PROJ_SPHERICAL_ORTHO  = 0,$/;"	e	enum:cv::UndistortTypes
PTLOC_ERROR	imgproc.hpp	/^    enum { PTLOC_ERROR        = -2,$/;"	e	enum:cv::Subdiv2D::__anon38
PTLOC_INSIDE	imgproc.hpp	/^           PTLOC_INSIDE       = 0,$/;"	e	enum:cv::Subdiv2D::__anon38
PTLOC_ON_EDGE	imgproc.hpp	/^           PTLOC_ON_EDGE      = 2$/;"	e	enum:cv::Subdiv2D::__anon38
PTLOC_OUTSIDE_RECT	imgproc.hpp	/^           PTLOC_OUTSIDE_RECT = -1,$/;"	e	enum:cv::Subdiv2D::__anon38
PTLOC_VERTEX	imgproc.hpp	/^           PTLOC_VERTEX       = 1,$/;"	e	enum:cv::Subdiv2D::__anon38
PTR_ONLY	core/ocl.hpp	/^    enum { LOCAL=1, READ_ONLY=2, WRITE_ONLY=4, READ_WRITE=6, CONSTANT=8, PTR_ONLY = 16, NO_SIZE=256 };$/;"	e	enum:cv::ocl::KernelArg::__anon160
P_Interval	cudacodec.hpp	/^    int P_Interval;      \/\/!< NVVE_P_INTERVAL,$/;"	m	struct:cv::cudacodec::EncoderParams
PairwiseSeamFinder	stitching/detail/seam_finders.hpp	/^class CV_EXPORTS PairwiseSeamFinder : public SeamFinder$/;"	c	namespace:cv::detail
PaniniPortraitProjector	stitching/detail/warpers.hpp	/^struct CV_EXPORTS PaniniPortraitProjector : ProjectorBase$/;"	s	namespace:cv::detail
PaniniPortraitWarper	stitching/detail/warpers.hpp	/^   PaniniPortraitWarper(float scale, float A = 1, float B = 1)$/;"	f	class:cv::detail::PaniniPortraitWarper
PaniniPortraitWarper	stitching/detail/warpers.hpp	/^class CV_EXPORTS PaniniPortraitWarper : public RotationWarperBase<PaniniPortraitProjector>$/;"	c	namespace:cv::detail
PaniniPortraitWarper	stitching/warpers.hpp	/^    PaniniPortraitWarper(float A = 1, float B = 1)$/;"	f	class:cv::PaniniPortraitWarper
PaniniPortraitWarper	stitching/warpers.hpp	/^class PaniniPortraitWarper: public WarperCreator$/;"	c	namespace:cv
PaniniProjector	stitching/detail/warpers.hpp	/^struct CV_EXPORTS PaniniProjector : ProjectorBase$/;"	s	namespace:cv::detail
PaniniWarper	stitching/detail/warpers.hpp	/^   PaniniWarper(float scale, float A = 1, float B = 1)$/;"	f	class:cv::detail::PaniniWarper
PaniniWarper	stitching/detail/warpers.hpp	/^class CV_EXPORTS PaniniWarper : public RotationWarperBase<PaniniProjector>$/;"	c	namespace:cv::detail
PaniniWarper	stitching/warpers.hpp	/^    PaniniWarper(float A = 1, float B = 1)$/;"	f	class:cv::PaniniWarper
PaniniWarper	stitching/warpers.hpp	/^class PaniniWarper: public WarperCreator$/;"	c	namespace:cv
ParallelLoopBody	core/utility.hpp	/^class CV_EXPORTS ParallelLoopBody$/;"	c	namespace:cv
Param	core.hpp	/^struct Param {$/;"	s	namespace:cv
ParamGenerator	ts/ts_gtest.h	/^  ParamGenerator(const ParamGenerator& other) : impl_(other.impl_) {}$/;"	f	class:testing::internal::ParamGenerator
ParamGenerator	ts/ts_gtest.h	/^  explicit ParamGenerator(ParamGeneratorInterface<T>* impl) : impl_(impl) {}$/;"	f	class:testing::internal::ParamGenerator
ParamGenerator	ts/ts_gtest.h	/^class ParamGenerator {$/;"	c	namespace:testing::internal
ParamGeneratorInterface	ts/ts_gtest.h	/^class ParamGeneratorInterface {$/;"	c	namespace:testing::internal
ParamGrid	ml.hpp	/^class CV_EXPORTS ParamGrid$/;"	c	namespace:cv::ml
ParamIterator	ts/ts_gtest.h	/^  ParamIterator(const ParamIterator& other) : impl_(other.impl_->Clone()) {}$/;"	f	class:testing::internal::ParamIterator
ParamIterator	ts/ts_gtest.h	/^  explicit ParamIterator(ParamIteratorInterface<T>* impl) : impl_(impl) {}$/;"	f	class:testing::internal::ParamIterator
ParamIterator	ts/ts_gtest.h	/^class ParamIterator {$/;"	c	namespace:testing::internal
ParamIteratorInterface	ts/ts_gtest.h	/^class ParamIteratorInterface {$/;"	c	namespace:testing::internal
ParamType	core.hpp	/^template<> struct ParamType<Algorithm>$/;"	s	namespace:cv
ParamType	core.hpp	/^template<> struct ParamType<Mat>$/;"	s	namespace:cv
ParamType	core.hpp	/^template<> struct ParamType<String>$/;"	s	namespace:cv
ParamType	core.hpp	/^template<> struct ParamType<bool>$/;"	s	namespace:cv
ParamType	core.hpp	/^template<> struct ParamType<double>$/;"	s	namespace:cv
ParamType	core.hpp	/^template<> struct ParamType<float>$/;"	s	namespace:cv
ParamType	core.hpp	/^template<> struct ParamType<int>$/;"	s	namespace:cv
ParamType	core.hpp	/^template<> struct ParamType<std::vector<Mat> >$/;"	s	namespace:cv
ParamType	core.hpp	/^template<> struct ParamType<uchar>$/;"	s	namespace:cv
ParamType	core.hpp	/^template<> struct ParamType<uint64>$/;"	s	namespace:cv
ParamType	core.hpp	/^template<> struct ParamType<unsigned>$/;"	s	namespace:cv
ParamType	core.hpp	/^template<typename _Tp> struct ParamType {};$/;"	s	namespace:cv
ParamType	ts/ts_gtest.h	/^  typedef ::std::tr1::tuple<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> ParamType;$/;"	t	class:testing::internal::CartesianProductGenerator10
ParamType	ts/ts_gtest.h	/^  typedef ::std::tr1::tuple<T1, T2, T3, T4, T5, T6, T7, T8, T9> ParamType;$/;"	t	class:testing::internal::CartesianProductGenerator9
ParamType	ts/ts_gtest.h	/^  typedef ::std::tr1::tuple<T1, T2, T3, T4, T5, T6, T7, T8> ParamType;$/;"	t	class:testing::internal::CartesianProductGenerator8
ParamType	ts/ts_gtest.h	/^  typedef ::std::tr1::tuple<T1, T2, T3, T4, T5, T6, T7> ParamType;$/;"	t	class:testing::internal::CartesianProductGenerator7
ParamType	ts/ts_gtest.h	/^  typedef ::std::tr1::tuple<T1, T2, T3, T4, T5, T6> ParamType;$/;"	t	class:testing::internal::CartesianProductGenerator6
ParamType	ts/ts_gtest.h	/^  typedef ::std::tr1::tuple<T1, T2, T3, T4, T5> ParamType;$/;"	t	class:testing::internal::CartesianProductGenerator5
ParamType	ts/ts_gtest.h	/^  typedef ::std::tr1::tuple<T1, T2, T3, T4> ParamType;$/;"	t	class:testing::internal::CartesianProductGenerator4
ParamType	ts/ts_gtest.h	/^  typedef ::std::tr1::tuple<T1, T2, T3> ParamType;$/;"	t	class:testing::internal::CartesianProductGenerator3
ParamType	ts/ts_gtest.h	/^  typedef ::std::tr1::tuple<T1, T2> ParamType;$/;"	t	class:testing::internal::CartesianProductGenerator2
ParamType	ts/ts_gtest.h	/^  typedef T ParamType;$/;"	t	class:testing::WithParamInterface
ParamType	ts/ts_gtest.h	/^  typedef T ParamType;$/;"	t	class:testing::internal::ParamGeneratorInterface
ParamType	ts/ts_gtest.h	/^  typedef typename TestCase::ParamType ParamType;$/;"	t	class:testing::internal::ParameterizedTestCaseInfo
ParamType	ts/ts_gtest.h	/^  typedef typename TestCase::ParamType ParamType;$/;"	t	class:testing::internal::TestMetaFactory
ParamType	ts/ts_gtest.h	/^  typedef typename TestClass::ParamType ParamType;$/;"	t	class:testing::internal::ParameterizedTestFactory
ParamTypes	ml.hpp	/^    enum ParamTypes {$/;"	g	class:cv::ml::SVM
ParameterType	core/cuda/type_traits.hpp	/^            T, typename type_traits_detail::AddParameterType<T>::type>::type ParameterType;$/;"	t	struct:cv::cuda::device::TypeTraits
ParameterizedTestCaseInfo	ts/ts_gtest.h	/^  explicit ParameterizedTestCaseInfo(const char* name)$/;"	f	class:testing::internal::ParameterizedTestCaseInfo
ParameterizedTestCaseInfo	ts/ts_gtest.h	/^class ParameterizedTestCaseInfo : public ParameterizedTestCaseInfoBase {$/;"	c	namespace:testing::internal
ParameterizedTestCaseInfoBase	ts/ts_gtest.h	/^  ParameterizedTestCaseInfoBase() {}$/;"	f	class:testing::internal::ParameterizedTestCaseInfoBase
ParameterizedTestCaseInfoBase	ts/ts_gtest.h	/^class ParameterizedTestCaseInfoBase {$/;"	c	namespace:testing::internal
ParameterizedTestCaseRegistry	ts/ts_gtest.h	/^  ParameterizedTestCaseRegistry() {}$/;"	f	class:testing::internal::ParameterizedTestCaseRegistry
ParameterizedTestCaseRegistry	ts/ts_gtest.h	/^class ParameterizedTestCaseRegistry {$/;"	c	namespace:testing::internal
ParameterizedTestFactory	ts/ts_gtest.h	/^  explicit ParameterizedTestFactory(ParamType parameter) :$/;"	f	class:testing::internal::ParameterizedTestFactory
ParameterizedTestFactory	ts/ts_gtest.h	/^class ParameterizedTestFactory : public TestFactoryBase {$/;"	c	namespace:testing::internal
Parameters	objdetect/detection_based_tracker.hpp	/^        struct Parameters$/;"	s	class:cv::DetectionBasedTracker
Params	features2d.hpp	/^  struct CV_EXPORTS_W_SIMPLE Params$/;"	s	class:cv::SimpleBlobDetector
PartialMatch	ts/ts_gtest.h	/^  static bool PartialMatch(const ::std::string& str, const RE& re) {$/;"	f	class:std::tr1::RE
PartialMatch	ts/ts_gtest.h	/^  static bool PartialMatch(const ::string& str, const RE& re) {$/;"	f	class:std::tr1::RE
Passed	ts/ts_gtest.h	/^  bool Passed() const { return !Failed(); }$/;"	f	class:testing::TestCase
Passed	ts/ts_gtest.h	/^  bool Passed() const { return !Failed(); }$/;"	f	class:testing::TestResult
PeakBitrate	cudacodec.hpp	/^    int PeakBitrate;     \/\/!< NVVE_PEAK_BITRATE,$/;"	m	struct:cv::cudacodec::EncoderParams
PerfSkipTestException	ts/ts_perf.hpp	/^    class PerfSkipTestException: public cv::Exception {};$/;"	c	class:perf::TestBase
PeriodParameters	core.hpp	/^    enum PeriodParameters {N = 624, M = 397};$/;"	g	class:cv::RNG_MT19937
PerspectiveMapPtr	cudev/ptr2d/warping.hpp	/^struct PerspectiveMapPtr$/;"	s	namespace:cv::cudev
PerspectiveMapPtrSz	cudev/ptr2d/warping.hpp	/^struct PerspectiveMapPtrSz : PerspectiveMapPtr$/;"	s	namespace:cv::cudev
PicType	cudacodec.hpp	/^    enum PicType$/;"	g	class:cv::cudacodec::EncoderCallBack
PixelSize	core/wimage.hpp	/^    int PixelSize() const {return Channels() * ChannelSize(); }$/;"	f	class:cv::WImage
PlanePortraitProjector	stitching/detail/warpers.hpp	/^struct PlanePortraitProjector : ProjectorBase$/;"	s	namespace:cv::detail
PlanePortraitWarper	stitching/detail/warpers.hpp	/^    PlanePortraitWarper(float scale) { projector_.scale = scale; }$/;"	f	class:cv::detail::PlanePortraitWarper
PlanePortraitWarper	stitching/detail/warpers.hpp	/^class CV_EXPORTS PlanePortraitWarper : public RotationWarperBase<PlanePortraitProjector>$/;"	c	namespace:cv::detail
PlaneProjector	stitching/detail/warpers.hpp	/^struct CV_EXPORTS PlaneProjector : ProjectorBase$/;"	s	namespace:cv::detail
PlaneWarper	stitching/detail/warpers.hpp	/^    PlaneWarper(float scale = 1.f) { projector_.scale = scale; }$/;"	f	class:cv::detail::PlaneWarper
PlaneWarper	stitching/detail/warpers.hpp	/^class CV_EXPORTS PlaneWarper : public RotationWarperBase<PlaneProjector>$/;"	c	namespace:cv::detail
PlaneWarper	stitching/warpers.hpp	/^class PlaneWarper : public WarperCreator$/;"	c	namespace:cv
PlaneWarperGpu	stitching/detail/warpers.hpp	/^    PlaneWarperGpu(float scale = 1.f) : PlaneWarper(scale) {}$/;"	f	class:cv::detail::PlaneWarperGpu
PlaneWarperGpu	stitching/detail/warpers.hpp	/^class CV_EXPORTS PlaneWarperGpu : public PlaneWarper$/;"	c	namespace:cv::detail
PlaneWarperGpu	stitching/warpers.hpp	/^class PlaneWarperGpu: public WarperCreator$/;"	c	namespace:cv
Platform	core/ocl.hpp	/^class CV_EXPORTS Platform$/;"	c	namespace:cv::ocl
PlatformInfo	core/ocl.hpp	/^class CV_EXPORTS PlatformInfo$/;"	c	namespace:cv::ocl
PlatformInfo	core/ocl.hpp	/^class CV_EXPORTS PlatformInfo;$/;"	m	namespace:cv::ocl	typeref:class:cv::ocl::CV_EXPORTS
Point	core/types.hpp	/^typedef Point2i Point;$/;"	t	namespace:cv
Point2d	core/types.hpp	/^typedef Point_<double> Point2d;$/;"	t	namespace:cv
Point2f	core/types.hpp	/^typedef Point_<float> Point2f;$/;"	t	namespace:cv
Point2i	core/types.hpp	/^typedef Point_<int> Point2i;$/;"	t	namespace:cv
Point3_	core/types.hpp	/^Point3_<_Tp>::Point3_()$/;"	f	class:cv::Point3_
Point3_	core/types.hpp	/^Point3_<_Tp>::Point3_(_Tp _x, _Tp _y, _Tp _z)$/;"	f	class:cv::Point3_
Point3_	core/types.hpp	/^Point3_<_Tp>::Point3_(const Point3_& pt)$/;"	f	class:cv::Point3_
Point3_	core/types.hpp	/^Point3_<_Tp>::Point3_(const Point_<_Tp>& pt)$/;"	f	class:cv::Point3_
Point3_	core/types.hpp	/^Point3_<_Tp>::Point3_(const Vec<_Tp, 3>& v)$/;"	f	class:cv::Point3_
Point3_	core/types.hpp	/^template<typename _Tp> class Point3_$/;"	c	namespace:cv
Point3d	core/types.hpp	/^typedef Point3_<double> Point3d;$/;"	t	namespace:cv
Point3f	core/types.hpp	/^typedef Point3_<float> Point3f;$/;"	t	namespace:cv
Point3i	core/types.hpp	/^typedef Point3_<int> Point3i;$/;"	t	namespace:cv
PointFilter	core/cuda/filters.hpp	/^        explicit __host__ __device__ __forceinline__ PointFilter(const Ptr2D& src_, float fx = 0.f, float fy = 0.f)$/;"	f	struct:cv::cuda::device::PointFilter
PointFilter	core/cuda/filters.hpp	/^    template <typename Ptr2D> struct PointFilter$/;"	s	namespace:cv::cuda::device
Point_	core/types.hpp	/^Point_<_Tp>::Point_()$/;"	f	class:cv::Point_
Point_	core/types.hpp	/^Point_<_Tp>::Point_(_Tp _x, _Tp _y)$/;"	f	class:cv::Point_
Point_	core/types.hpp	/^Point_<_Tp>::Point_(const Point_& pt)$/;"	f	class:cv::Point_
Point_	core/types.hpp	/^Point_<_Tp>::Point_(const Size_<_Tp>& sz)$/;"	f	class:cv::Point_
Point_	core/types.hpp	/^Point_<_Tp>::Point_(const Vec<_Tp,2>& v)$/;"	f	class:cv::Point_
Point_	core/types.hpp	/^template<typename _Tp> class Point_$/;"	c	namespace:cv
PointeeType	core/cuda/type_traits.hpp	/^        typedef typename type_traits_detail::PointerTraits<UnqualifiedType>::type                            PointeeType;$/;"	t	struct:cv::cuda::device::TypeTraits
PointerTraits	core/cuda/detail/type_traits_detail.hpp	/^        template <class U> struct PointerTraits$/;"	s	namespace:cv::cuda::device::type_traits_detail
PointerTraits	core/cuda/detail/type_traits_detail.hpp	/^        template <class U> struct PointerTraits<U*&>$/;"	s	namespace:cv::cuda::device::type_traits_detail
PointerTraits	core/cuda/detail/type_traits_detail.hpp	/^        template <class U> struct PointerTraits<U*>$/;"	s	namespace:cv::cuda::device::type_traits_detail
PointerTraits	cudev/util/detail/type_traits.hpp	/^    template <class U> struct PointerTraits$/;"	s	namespace:cv::cudev::type_traits_detail
PointerTraits	cudev/util/detail/type_traits.hpp	/^    template <class U> struct PointerTraits<U*&>$/;"	s	namespace:cv::cudev::type_traits_detail
PointerTraits	cudev/util/detail/type_traits.hpp	/^    template <class U> struct PointerTraits<U*>$/;"	s	namespace:cv::cudev::type_traits_detail
PooledAllocator	flann/allocator.h	/^    PooledAllocator(int blockSize = BLOCKSIZE)$/;"	f	class:cvflann::PooledAllocator
PooledAllocator	flann/allocator.h	/^class PooledAllocator$/;"	c	namespace:cvflann
PositionsVector	objdetect/detection_based_tracker.hpp	/^            typedef std::vector<cv::Rect> PositionsVector;$/;"	t	struct:cv::DetectionBasedTracker::TrackedObject
PosterErrorCovariance	video/tracking_c.h	/^    float* PosterErrorCovariance;\/* =error_cov_post->data.fl *\/$/;"	m	struct:CvKalman
PosterState	video/tracking_c.h	/^    float* PosterState;         \/* =state_pre->data.fl *\/$/;"	m	struct:CvKalman
Presets	cudacodec.hpp	/^    int Presets;         \/\/!< NVVE_PRESETS,$/;"	m	struct:cv::cudacodec::EncoderParams
Print	ts/ts_gtest.h	/^  static void Print(char* str, ::std::ostream* os) {$/;"	f	class:testing::internal::UniversalTersePrinter
Print	ts/ts_gtest.h	/^  static void Print(const T& value, ::std::ostream* os) {$/;"	f	class:testing::internal::UniversalPrinter
Print	ts/ts_gtest.h	/^  static void Print(const T& value, ::std::ostream* os) {$/;"	f	class:testing::internal::UniversalTersePrinter
Print	ts/ts_gtest.h	/^  static void Print(const char* str, ::std::ostream* os) {$/;"	f	class:testing::internal::UniversalTersePrinter
Print	ts/ts_gtest.h	/^  static void Print(const wchar_t* str, ::std::ostream* os) {$/;"	f	class:testing::internal::UniversalTersePrinter
Print	ts/ts_gtest.h	/^  static void Print(wchar_t* str, ::std::ostream* os) {$/;"	f	class:testing::internal::UniversalTersePrinter
PrintPrefixTo	ts/ts_gtest.h	/^  static void PrintPrefixTo(const Tuple& t, ::std::ostream* os) {$/;"	f	struct:testing::internal::TuplePrefixPrinter
PrintPrefixTo	ts/ts_gtest.h	/^  static void PrintPrefixTo(const Tuple&, ::std::ostream*) {}$/;"	f	struct:testing::internal::TuplePrefixPrinter
PrintRawArrayTo	ts/ts_gtest.h	/^void PrintRawArrayTo(const T a[], size_t count, ::std::ostream* os) {$/;"	f	namespace:testing::internal
PrintTo	ts/ts_gtest.h	/^inline void PrintTo(bool x, ::std::ostream* os) {$/;"	f	namespace:testing::internal
PrintTo	ts/ts_gtest.h	/^inline void PrintTo(char c, ::std::ostream* os) {$/;"	f	namespace:testing::internal
PrintTo	ts/ts_gtest.h	/^inline void PrintTo(char* s, ::std::ostream* os) {$/;"	f	namespace:testing::internal
PrintTo	ts/ts_gtest.h	/^inline void PrintTo(const ::std::string& s, ::std::ostream* os) {$/;"	f	namespace:testing::internal
PrintTo	ts/ts_gtest.h	/^inline void PrintTo(const ::std::tr1::tuple<>& t, ::std::ostream* os) {$/;"	f	namespace:testing::internal
PrintTo	ts/ts_gtest.h	/^inline void PrintTo(const ::std::wstring& s, ::std::ostream* os) {$/;"	f	namespace:testing::internal
PrintTo	ts/ts_gtest.h	/^inline void PrintTo(const ::string& s, ::std::ostream* os) {$/;"	f	namespace:testing::internal
PrintTo	ts/ts_gtest.h	/^inline void PrintTo(const ::wstring& s, ::std::ostream* os) {$/;"	f	namespace:testing::internal
PrintTo	ts/ts_gtest.h	/^inline void PrintTo(const signed char* s, ::std::ostream* os) {$/;"	f	namespace:testing::internal
PrintTo	ts/ts_gtest.h	/^inline void PrintTo(const unsigned char* s, ::std::ostream* os) {$/;"	f	namespace:testing::internal
PrintTo	ts/ts_gtest.h	/^inline void PrintTo(signed char* s, ::std::ostream* os) {$/;"	f	namespace:testing::internal
PrintTo	ts/ts_gtest.h	/^inline void PrintTo(unsigned char* s, ::std::ostream* os) {$/;"	f	namespace:testing::internal
PrintTo	ts/ts_gtest.h	/^inline void PrintTo(wchar_t* s, ::std::ostream* os) {$/;"	f	namespace:testing::internal
PrintTo	ts/ts_gtest.h	/^void PrintTo($/;"	f	namespace:testing::internal
PrintTo	ts/ts_gtest.h	/^void PrintTo(const ::std::pair<T1, T2>& value, ::std::ostream* os) {$/;"	f	namespace:testing::internal
PrintTo	ts/ts_gtest.h	/^void PrintTo(const ::std::tr1::tuple<T1, T2, T3, T4, T5, T6, T7, T8, T9>& t,$/;"	f	namespace:testing::internal
PrintTo	ts/ts_gtest.h	/^void PrintTo(const ::std::tr1::tuple<T1, T2, T3, T4, T5, T6, T7, T8>& t,$/;"	f	namespace:testing::internal
PrintTo	ts/ts_gtest.h	/^void PrintTo(const ::std::tr1::tuple<T1, T2, T3, T4, T5, T6, T7>& t,$/;"	f	namespace:testing::internal
PrintTo	ts/ts_gtest.h	/^void PrintTo(const ::std::tr1::tuple<T1, T2, T3, T4, T5, T6>& t,$/;"	f	namespace:testing::internal
PrintTo	ts/ts_gtest.h	/^void PrintTo(const ::std::tr1::tuple<T1, T2, T3, T4, T5>& t,$/;"	f	namespace:testing::internal
PrintTo	ts/ts_gtest.h	/^void PrintTo(const ::std::tr1::tuple<T1, T2, T3, T4>& t, ::std::ostream* os) {$/;"	f	namespace:testing::internal
PrintTo	ts/ts_gtest.h	/^void PrintTo(const ::std::tr1::tuple<T1, T2, T3>& t, ::std::ostream* os) {$/;"	f	namespace:testing::internal
PrintTo	ts/ts_gtest.h	/^void PrintTo(const ::std::tr1::tuple<T1, T2>& t, ::std::ostream* os) {$/;"	f	namespace:testing::internal
PrintTo	ts/ts_gtest.h	/^void PrintTo(const ::std::tr1::tuple<T1>& t, ::std::ostream* os) {$/;"	f	namespace:testing::internal
PrintTo	ts/ts_gtest.h	/^void PrintTo(const T& value, ::std::ostream* os) {$/;"	f	namespace:testing::internal
PrintToString	ts/ts_gtest.h	/^::std::string PrintToString(const T& value) {$/;"	f	namespace:testing
PrintTupleTo	ts/ts_gtest.h	/^void PrintTupleTo(const T& t, ::std::ostream* os) {$/;"	f	namespace:testing::internal
PrintValue	ts/ts_gtest.h	/^  static void PrintValue(const T& value, ::std::ostream* os) {$/;"	f	class:testing::internal2::TypeWithoutFormatter
PriorErrorCovariance	video/tracking_c.h	/^    float* PriorErrorCovariance;\/* =error_cov_pre->data.fl *\/$/;"	m	struct:CvKalman
PriorState	video/tracking_c.h	/^    float* PriorState;          \/* =state_post->data.fl *\/$/;"	m	struct:CvKalman
ProfileLevel	cudacodec.hpp	/^    int ProfileLevel;    \/\/!< NVVE_PROFILE_LEVEL,$/;"	m	struct:cv::cudacodec::EncoderParams
Program	core/ocl.hpp	/^class CV_EXPORTS Program$/;"	c	namespace:cv::ocl
Program	core/ocl.hpp	/^class CV_EXPORTS Program;$/;"	m	namespace:cv::ocl	typeref:class:cv::ocl::CV_EXPORTS
ProgramEntry	core/ocl_genbase.hpp	/^struct ProgramEntry$/;"	s	namespace:cv::ocl
ProgramSource	core/ocl.hpp	/^class CV_EXPORTS ProgramSource$/;"	c	namespace:cv::ocl
ProgramSource	core/ocl.hpp	/^class CV_EXPORTS ProgramSource;$/;"	m	namespace:cv::ocl	typeref:class:cv::ocl::CV_EXPORTS
ProjectorBase	stitching/detail/warpers.hpp	/^struct CV_EXPORTS ProjectorBase$/;"	s	namespace:cv::detail
Ptr	core/cvstd.hpp	/^struct Ptr$/;"	s	namespace:cv
Ptr	core/ptr.inl.hpp	/^Ptr<T>::Ptr() : owner(NULL), stored(NULL)$/;"	f	class:cv::Ptr
Ptr	core/ptr.inl.hpp	/^Ptr<T>::Ptr(Y* p)$/;"	f	class:cv::Ptr
Ptr	core/ptr.inl.hpp	/^Ptr<T>::Ptr(Y* p, D d)$/;"	f	class:cv::Ptr
Ptr	core/ptr.inl.hpp	/^Ptr<T>::Ptr(const Ptr& o) : owner(o.owner), stored(o.stored)$/;"	f	class:cv::Ptr
Ptr	core/ptr.inl.hpp	/^Ptr<T>::Ptr(const Ptr<Y>& o) : owner(o.owner), stored(o.stored)$/;"	f	class:cv::Ptr
Ptr	core/ptr.inl.hpp	/^Ptr<T>::Ptr(const Ptr<Y>& o, T* p) : owner(o.owner), stored(p)$/;"	f	class:cv::Ptr
PtrOwner	core/ptr.inl.hpp	/^    PtrOwner() : refCount(1)$/;"	f	struct:cv::detail::PtrOwner
PtrOwner	core/ptr.inl.hpp	/^struct PtrOwner$/;"	s	namespace:cv::detail
PtrOwnerImpl	core/ptr.inl.hpp	/^    PtrOwnerImpl(Y* p, D d) : owned(p), deleter(d)$/;"	f	struct:cv::detail::PtrOwnerImpl
PtrOwnerImpl	core/ptr.inl.hpp	/^struct PtrOwnerImpl : PtrOwner$/;"	s	namespace:cv::detail
PtrReadOnly	core/ocl.hpp	/^    static KernelArg PtrReadOnly(const UMat& m)$/;"	f	class:cv::ocl::KernelArg
PtrReadWrite	core/ocl.hpp	/^    static KernelArg PtrReadWrite(const UMat& m)$/;"	f	class:cv::ocl::KernelArg
PtrStep	core/cuda_types.hpp	/^            __CV_CUDA_HOST_DEVICE__ PtrStep() : step(0) {}$/;"	f	struct:cv::cuda::PtrStep
PtrStep	core/cuda_types.hpp	/^            __CV_CUDA_HOST_DEVICE__ PtrStep(T* data_, size_t step_) : DevPtr<T>(data_), step(step_) {}$/;"	f	struct:cv::cuda::PtrStep
PtrStep	core/cuda_types.hpp	/^        template <typename T> struct PtrStep : public DevPtr<T>$/;"	s	namespace:cv::cuda
PtrStepSz	core/cuda_types.hpp	/^            __CV_CUDA_HOST_DEVICE__ PtrStepSz() : cols(0), rows(0) {}$/;"	f	struct:cv::cuda::PtrStepSz
PtrStepSz	core/cuda_types.hpp	/^            __CV_CUDA_HOST_DEVICE__ PtrStepSz(int rows_, int cols_, T* data_, size_t step_)$/;"	f	struct:cv::cuda::PtrStepSz
PtrStepSz	core/cuda_types.hpp	/^            explicit PtrStepSz(const PtrStepSz<U>& d) : PtrStep<T>((T*)d.data, d.step), cols(d.cols), rows(d.rows){}$/;"	f	struct:cv::cuda::PtrStepSz
PtrStepSz	core/cuda_types.hpp	/^        template <typename T> struct PtrStepSz : public PtrStep<T>$/;"	s	namespace:cv::cuda
PtrStepSzb	core/cuda_types.hpp	/^        typedef PtrStepSz<unsigned char> PtrStepSzb;$/;"	t	namespace:cv::cuda
PtrStepSzf	core/cuda_types.hpp	/^        typedef PtrStepSz<float> PtrStepSzf;$/;"	t	namespace:cv::cuda
PtrStepSzi	core/cuda_types.hpp	/^        typedef PtrStepSz<int> PtrStepSzi;$/;"	t	namespace:cv::cuda
PtrStepb	core/cuda_types.hpp	/^        typedef PtrStep<unsigned char> PtrStepb;$/;"	t	namespace:cv::cuda
PtrStepf	core/cuda_types.hpp	/^        typedef PtrStep<float> PtrStepf;$/;"	t	namespace:cv::cuda
PtrStepi	core/cuda_types.hpp	/^        typedef PtrStep<int> PtrStepi;$/;"	t	namespace:cv::cuda
PtrSz	core/cuda_types.hpp	/^            __CV_CUDA_HOST_DEVICE__ PtrSz() : size(0) {}$/;"	f	struct:cv::cuda::PtrSz
PtrSz	core/cuda_types.hpp	/^            __CV_CUDA_HOST_DEVICE__ PtrSz(T* data_, size_t size_) : DevPtr<T>(data_), size(size_) {}$/;"	f	struct:cv::cuda::PtrSz
PtrSz	core/cuda_types.hpp	/^        template <typename T> struct PtrSz : public DevPtr<T>$/;"	s	namespace:cv::cuda
PtrTraits	cudev/expr/expr.hpp	/^template <class Body> struct PtrTraits< Expr<Body> >$/;"	s	namespace:cv::cudev
PtrTraits	cudev/ptr2d/constant.hpp	/^template <typename T> struct PtrTraits< ConstantPtrSz<T> > : PtrTraitsBase< ConstantPtrSz<T>, ConstantPtr<T> >$/;"	s	namespace:cv::cudev
PtrTraits	cudev/ptr2d/deriv.hpp	/^template <class SrcPtr> struct PtrTraits< DerivXPtrSz<SrcPtr> > : PtrTraitsBase<DerivXPtrSz<SrcPtr>, DerivXPtr<SrcPtr> >$/;"	s	namespace:cv::cudev
PtrTraits	cudev/ptr2d/deriv.hpp	/^template <class SrcPtr> struct PtrTraits< DerivYPtrSz<SrcPtr> > : PtrTraitsBase<DerivYPtrSz<SrcPtr>, DerivYPtr<SrcPtr> >$/;"	s	namespace:cv::cudev
PtrTraits	cudev/ptr2d/deriv.hpp	/^template <class SrcPtr> struct PtrTraits< ScharrXPtrSz<SrcPtr> > : PtrTraitsBase<ScharrXPtrSz<SrcPtr>, ScharrXPtr<SrcPtr> >$/;"	s	namespace:cv::cudev
PtrTraits	cudev/ptr2d/deriv.hpp	/^template <class SrcPtr> struct PtrTraits< ScharrYPtrSz<SrcPtr> > : PtrTraitsBase<ScharrYPtrSz<SrcPtr>, ScharrYPtr<SrcPtr> >$/;"	s	namespace:cv::cudev
PtrTraits	cudev/ptr2d/deriv.hpp	/^template <class SrcPtr> struct PtrTraits< SobelXPtrSz<SrcPtr> > : PtrTraitsBase<SobelXPtrSz<SrcPtr>, SobelXPtr<SrcPtr> >$/;"	s	namespace:cv::cudev
PtrTraits	cudev/ptr2d/deriv.hpp	/^template <class SrcPtr> struct PtrTraits< SobelYPtrSz<SrcPtr> > : PtrTraitsBase<SobelYPtrSz<SrcPtr>, SobelYPtr<SrcPtr> >$/;"	s	namespace:cv::cudev
PtrTraits	cudev/ptr2d/deriv.hpp	/^template <int ksize, class SrcPtr> struct PtrTraits< LaplacianPtrSz<ksize, SrcPtr> > : PtrTraitsBase<LaplacianPtrSz<ksize, SrcPtr>, LaplacianPtr<ksize, SrcPtr> >$/;"	s	namespace:cv::cudev
PtrTraits	cudev/ptr2d/glob.hpp	/^template <typename T> struct PtrTraits< GlobPtrSz<T> > : PtrTraitsBase<GlobPtrSz<T>, GlobPtr<T> >$/;"	s	namespace:cv::cudev
PtrTraits	cudev/ptr2d/gpumat.hpp	/^template <typename T> struct PtrTraits< GpuMat_<T> > : PtrTraitsBase<GpuMat_<T>, GlobPtr<T> >$/;"	s	namespace:cv::cudev
PtrTraits	cudev/ptr2d/interpolation.hpp	/^template <class SrcPtr> struct PtrTraits< CommonAreaInterPtrSz<SrcPtr> > : PtrTraitsBase<CommonAreaInterPtrSz<SrcPtr>, CommonAreaInterPtr<SrcPtr> >$/;"	s	namespace:cv::cudev
PtrTraits	cudev/ptr2d/interpolation.hpp	/^template <class SrcPtr> struct PtrTraits< CubicInterPtrSz<SrcPtr> > : PtrTraitsBase<CubicInterPtrSz<SrcPtr>, CubicInterPtr<SrcPtr> >$/;"	s	namespace:cv::cudev
PtrTraits	cudev/ptr2d/interpolation.hpp	/^template <class SrcPtr> struct PtrTraits< IntegerAreaInterPtrSz<SrcPtr> > : PtrTraitsBase<IntegerAreaInterPtrSz<SrcPtr>, IntegerAreaInterPtr<SrcPtr> >$/;"	s	namespace:cv::cudev
PtrTraits	cudev/ptr2d/interpolation.hpp	/^template <class SrcPtr> struct PtrTraits< LinearInterPtrSz<SrcPtr> > : PtrTraitsBase<LinearInterPtrSz<SrcPtr>, LinearInterPtr<SrcPtr> >$/;"	s	namespace:cv::cudev
PtrTraits	cudev/ptr2d/interpolation.hpp	/^template <class SrcPtr> struct PtrTraits< NearestInterPtrSz<SrcPtr> > : PtrTraitsBase<NearestInterPtrSz<SrcPtr>, NearestInterPtr<SrcPtr> >$/;"	s	namespace:cv::cudev
PtrTraits	cudev/ptr2d/lut.hpp	/^template <class SrcPtr, class TablePtr> struct PtrTraits< LutPtrSz<SrcPtr, TablePtr> > : PtrTraitsBase<LutPtrSz<SrcPtr, TablePtr>, LutPtr<SrcPtr, TablePtr> >$/;"	s	namespace:cv::cudev
PtrTraits	cudev/ptr2d/mask.hpp	/^template <class MaskPtr> struct PtrTraits< SingleMaskChannelsSz<MaskPtr> > : PtrTraitsBase<SingleMaskChannelsSz<MaskPtr>, SingleMaskChannels<MaskPtr> >$/;"	s	namespace:cv::cudev
PtrTraits	cudev/ptr2d/remap.hpp	/^template <class SrcPtr, class MapPtr> struct PtrTraits< RemapPtr1Sz<SrcPtr, MapPtr> > : PtrTraitsBase<RemapPtr1Sz<SrcPtr, MapPtr>, RemapPtr1<SrcPtr, MapPtr> >$/;"	s	namespace:cv::cudev
PtrTraits	cudev/ptr2d/remap.hpp	/^template <class SrcPtr, class MapXPtr, class MapYPtr> struct PtrTraits< RemapPtr2Sz<SrcPtr, MapXPtr, MapYPtr> > : PtrTraitsBase<RemapPtr2Sz<SrcPtr, MapXPtr, MapYPtr>, RemapPtr2<SrcPtr, MapXPtr, MapYPtr> >$/;"	s	namespace:cv::cudev
PtrTraits	cudev/ptr2d/resize.hpp	/^template <class SrcPtr> struct PtrTraits< ResizePtrSz<SrcPtr> > : PtrTraitsBase<ResizePtrSz<SrcPtr>, ResizePtr<SrcPtr> >$/;"	s	namespace:cv::cudev
PtrTraits	cudev/ptr2d/texture.hpp	/^template <typename T> struct PtrTraits< Texture<T> > : PtrTraitsBase<Texture<T>, TexturePtr<T> >$/;"	s	namespace:cv::cudev
PtrTraits	cudev/ptr2d/traits.hpp	/^template <class Ptr2DSz> struct PtrTraits : PtrTraitsBase<Ptr2DSz, Ptr2DSz>$/;"	s	namespace:cv::cudev
PtrTraits	cudev/ptr2d/transform.hpp	/^template <class Src1Ptr, class Src2Ptr, class Op> struct PtrTraits< BinaryTransformPtrSz<Src1Ptr, Src2Ptr, Op> > : PtrTraitsBase<BinaryTransformPtrSz<Src1Ptr, Src2Ptr, Op>, BinaryTransformPtr<Src1Ptr, Src2Ptr, Op> >$/;"	s	namespace:cv::cudev
PtrTraits	cudev/ptr2d/transform.hpp	/^template <class SrcPtr, class Op> struct PtrTraits< UnaryTransformPtrSz<SrcPtr, Op> > : PtrTraitsBase<UnaryTransformPtrSz<SrcPtr, Op>, UnaryTransformPtr<SrcPtr, Op> >$/;"	s	namespace:cv::cudev
PtrTraits	cudev/ptr2d/warping.hpp	/^template <> struct PtrTraits<AffineMapPtrSz> : PtrTraitsBase<AffineMapPtrSz, AffineMapPtr>$/;"	s	namespace:cv::cudev
PtrTraits	cudev/ptr2d/warping.hpp	/^template <> struct PtrTraits<PerspectiveMapPtrSz> : PtrTraitsBase<PerspectiveMapPtrSz, PerspectiveMapPtr>$/;"	s	namespace:cv::cudev
PtrTraits	cudev/ptr2d/zip.hpp	/^template <class PtrTuple> struct PtrTraits< ZipPtrSz<PtrTuple> > : PtrTraitsBase<ZipPtrSz<PtrTuple>, ZipPtr<PtrTuple> >$/;"	s	namespace:cv::cudev
PtrTraitsBase	cudev/ptr2d/traits.hpp	/^template <class Ptr2DSz, class Ptr2D> struct PtrTraitsBase$/;"	s	namespace:cv::cudev
PtrWriteOnly	core/ocl.hpp	/^    static KernelArg PtrWriteOnly(const UMat& m)$/;"	f	class:cv::ocl::KernelArg
PyrDownBody	cudev/expr/warping.hpp	/^template <class SrcPtr> struct PyrDownBody$/;"	s	namespace:cv::cudev
PyrLKOpticalFlow	superres/optical_flow.hpp	/^        class PyrLKOpticalFlow : public virtual DenseOpticalFlowExt$/;"	c	namespace:cv::superres
PyrLkOptFlowEstimatorBase	videostab/optical_flow.hpp	/^    PyrLkOptFlowEstimatorBase() { setWinSize(Size(21, 21)); setMaxLevel(3); }$/;"	f	class:cv::videostab::PyrLkOptFlowEstimatorBase
PyrLkOptFlowEstimatorBase	videostab/optical_flow.hpp	/^class CV_EXPORTS PyrLkOptFlowEstimatorBase$/;"	c	namespace:cv::videostab
PyrUpBody	cudev/expr/warping.hpp	/^template <class SrcPtr> struct PyrUpBody$/;"	s	namespace:cv::cudev
QP_Level_InterB	cudacodec.hpp	/^    int QP_Level_InterB; \/\/!< NVVE_QP_LEVEL_INTER_B,$/;"	m	struct:cv::cudacodec::EncoderParams
QP_Level_InterP	cudacodec.hpp	/^    int QP_Level_InterP; \/\/!< NVVE_QP_LEVEL_INTER_P,$/;"	m	struct:cv::cudacodec::EncoderParams
QP_Level_Intra	cudacodec.hpp	/^    int QP_Level_Intra;  \/\/!< NVVE_QP_LEVEL_INTRA,$/;"	m	struct:cv::cudacodec::EncoderParams
QT_CHECKBOX	highgui.hpp	/^       QT_CHECKBOX    = 1,$/;"	e	enum:cv::__anon62
QT_FONT_BLACK	highgui.hpp	/^        QT_FONT_BLACK           = 87  \/\/QFont::Black$/;"	e	enum:cv::__anon60
QT_FONT_BOLD	highgui.hpp	/^        QT_FONT_BOLD            = 75, \/\/QFont::Bold,$/;"	e	enum:cv::__anon60
QT_FONT_DEMIBOLD	highgui.hpp	/^        QT_FONT_DEMIBOLD        = 63, \/\/QFont::DemiBold,$/;"	e	enum:cv::__anon60
QT_FONT_LIGHT	highgui.hpp	/^enum {  QT_FONT_LIGHT           = 25, \/\/QFont::Light,$/;"	e	enum:cv::__anon60
QT_FONT_NORMAL	highgui.hpp	/^        QT_FONT_NORMAL          = 50, \/\/QFont::Normal,$/;"	e	enum:cv::__anon60
QT_PUSH_BUTTON	highgui.hpp	/^enum { QT_PUSH_BUTTON = 0,$/;"	e	enum:cv::__anon62
QT_RADIOBOX	highgui.hpp	/^       QT_RADIOBOX    = 2$/;"	e	enum:cv::__anon62
QT_STYLE_ITALIC	highgui.hpp	/^        QT_STYLE_ITALIC         = 1, \/\/QFont::StyleItalic,$/;"	e	enum:cv::__anon61
QT_STYLE_NORMAL	highgui.hpp	/^enum {  QT_STYLE_NORMAL         = 0, \/\/QFont::StyleNormal,$/;"	e	enum:cv::__anon61
QT_STYLE_OBLIQUE	highgui.hpp	/^        QT_STYLE_OBLIQUE        = 2  \/\/QFont::StyleOblique$/;"	e	enum:cv::__anon61
QUADS	core/opengl.hpp	/^    QUADS          = 0x0007,$/;"	e	enum:cv::ogl::RenderModes
QUAD_STRIP	core/opengl.hpp	/^    QUAD_STRIP     = 0x0008,$/;"	e	enum:cv::ogl::RenderModes
QtFont	highgui.hpp	/^struct QtFont$/;"	s	namespace:cv
QuadEdge	imgproc.hpp	/^    struct CV_EXPORTS QuadEdge$/;"	s	class:cv::Subdiv2D
Queue	core/ocl.hpp	/^class CV_EXPORTS Queue$/;"	c	namespace:cv::ocl
Queue	core/ocl.hpp	/^class CV_EXPORTS Queue;$/;"	m	namespace:cv::ocl	typeref:class:cv::ocl::CV_EXPORTS
R	stitching/detail/camera.hpp	/^    Mat R; \/\/ Rotation$/;"	m	struct:cv::detail::CameraParams
R2Y	core/cuda/detail/color_detail.hpp	/^            R2Y        = 4899,$/;"	e	enum:cv::cuda::device::color_detail::__anon240
R2Y	cudev/functional/detail/color_cvt.hpp	/^        R2Y        = 4899,$/;"	e	enum:cv::cudev::color_cvt_detail::__anon396
RAND_DIM	flann/kdtree_index.h	/^        RAND_DIM=5$/;"	e	enum:cvflann::KDTreeIndex::__anon27
RANSAC	calib3d.hpp	/^       RANSAC = 8, \/\/!< RANSAC algorithm$/;"	e	enum:cv::__anon43
RAW_OUTPUT	ml.hpp	/^        RAW_OUTPUT=1, \/\/!< makes the method return the raw results (the sum), not the class label$/;"	e	enum:cv::ml::StatModel::Flags
RBF	ml.hpp	/^        RBF=2,$/;"	e	enum:cv::ml::SVM::KernelTypes
RCType	cudacodec.hpp	/^    int RCType;          \/\/!< NVVE_RC_TYPE,$/;"	m	struct:cv::cudacodec::EncoderParams
RE	ts/ts_gtest.h	/^  RE(const ::std::string& regex) { Init(regex.c_str()); }  \/\/ NOLINT$/;"	f	class:std::tr1::RE
RE	ts/ts_gtest.h	/^  RE(const ::string& regex) { Init(regex.c_str()); }  \/\/ NOLINT$/;"	f	class:std::tr1::RE
RE	ts/ts_gtest.h	/^  RE(const RE& other) { Init(other.pattern()); }$/;"	f	class:std::tr1::RE
RE	ts/ts_gtest.h	/^  RE(const char* regex) { Init(regex); }  \/\/ NOLINT$/;"	f	class:std::tr1::RE
RE	ts/ts_gtest.h	/^class GTEST_API_ RE {$/;"	c	namespace:std::tr1
READ	core/persistence.hpp	/^        READ        = 0, \/\/!< value, open the file for reading$/;"	e	enum:cv::FileStorage::Mode
READ_ONLY	core/ocl.hpp	/^    enum { LOCAL=1, READ_ONLY=2, WRITE_ONLY=4, READ_WRITE=6, CONSTANT=8, PTR_ONLY = 16, NO_SIZE=256 };$/;"	e	enum:cv::ocl::KernelArg::__anon160
READ_ONLY	core/opengl.hpp	/^        READ_ONLY  = 0x88B8,$/;"	e	enum:cv::ogl::Buffer::Access
READ_ONLY_CACHE	core/ocl.hpp	/^        READ_ONLY_CACHE=1,$/;"	e	enum:cv::ocl::Device::__anon157
READ_WRITE	core/ocl.hpp	/^    enum { LOCAL=1, READ_ONLY=2, WRITE_ONLY=4, READ_WRITE=6, CONSTANT=8, PTR_ONLY = 16, NO_SIZE=256 };$/;"	e	enum:cv::ocl::KernelArg::__anon160
READ_WRITE	core/opengl.hpp	/^        READ_WRITE = 0x88BA$/;"	e	enum:cv::ogl::Buffer::Access
READ_WRITE_CACHE	core/ocl.hpp	/^        READ_WRITE_CACHE=2$/;"	e	enum:cv::ocl::Device::__anon157
REAL	core.hpp	/^    enum { INT=0, BOOLEAN=1, REAL=2, STRING=3, MAT=4, MAT_VECTOR=5, ALGORITHM=6, FLOAT=7,$/;"	e	enum:cv::Param::__anon404
REAL	core/persistence.hpp	/^        REAL      = 2, \/\/!< floating-point number$/;"	e	enum:cv::FileNode::Type
REAL	ml.hpp	/^        REAL=1, \/\/!< Real AdaBoost. It is a technique that utilizes confidence-rated predictions$/;"	e	enum:cv::ml::Boost::Types
RECT_SIMILARITY_PROPORTION	cudalegacy/NCVHaarObjectDetection.hpp	420;"	d
RECURS_FILTER	photo.hpp	/^    RECURS_FILTER = 1,$/;"	e	enum:cv::__anon3
REDUCE_AVG	core.hpp	/^                   REDUCE_AVG = 1, \/\/!< the output is the mean vector of all rows\/columns of the matrix.$/;"	e	enum:cv::ReduceTypes
REDUCE_MAX	core.hpp	/^                   REDUCE_MAX = 2, \/\/!< the output is the maximum (column\/row-wise) of all rows\/columns of the matrix.$/;"	e	enum:cv::ReduceTypes
REDUCE_MIN	core.hpp	/^                   REDUCE_MIN = 3  \/\/!< the output is the minimum (column\/row-wise) of all rows\/columns of the matrix.$/;"	e	enum:cv::ReduceTypes
REDUCE_SUM	core.hpp	/^enum ReduceTypes { REDUCE_SUM = 0, \/\/!< the output is the sum of all rows\/columns of the matrix.$/;"	e	enum:cv::ReduceTypes
REF	core/persistence.hpp	/^        REF       = 4, \/\/!< integer of size size_t. Typically used for storing complex dynamic structures where some elements reference the others$/;"	e	enum:cv::FileNode::Type
REF_INPUT_OUTPUT	ts.hpp	/^    enum { INPUT, INPUT_OUTPUT, OUTPUT, REF_INPUT_OUTPUT, REF_OUTPUT, TEMP, MASK, MAX_ARR };$/;"	e	enum:cvtest::ArrayTest::__anon26
REF_OUTPUT	ts.hpp	/^    enum { INPUT, INPUT_OUTPUT, OUTPUT, REF_INPUT_OUTPUT, REF_OUTPUT, TEMP, MASK, MAX_ARR };$/;"	e	enum:cvtest::ArrayTest::__anon26
REGISTER_TYPED_TEST_CASE_P	ts/ts_gtest.h	17520;"	d
REG_DISABLE	ml.hpp	/^        REG_DISABLE = -1, \/\/!< Regularization disabled$/;"	e	enum:cv::ml::LogisticRegression::RegKinds
REG_L1	ml.hpp	/^        REG_L1 = 0, \/\/!< %L1 norm$/;"	e	enum:cv::ml::LogisticRegression::RegKinds
REG_L2	ml.hpp	/^        REG_L2 = 1 \/\/!< %L2 norm$/;"	e	enum:cv::ml::LogisticRegression::RegKinds
REPRESENTATION	viz/widgets.hpp	/^            REPRESENTATION,$/;"	e	enum:cv::viz::RenderingProperties
REPRESENTATION_POINTS	viz/widgets.hpp	/^            REPRESENTATION_POINTS,$/;"	e	enum:cv::viz::RepresentationValues
REPRESENTATION_SURFACE	viz/widgets.hpp	/^            REPRESENTATION_SURFACE$/;"	e	enum:cv::viz::RepresentationValues
REPRESENTATION_WIREFRAME	viz/widgets.hpp	/^            REPRESENTATION_WIREFRAME,$/;"	e	enum:cv::viz::RepresentationValues
RESPONSE_ROW	cudafeatures2d.hpp	/^        RESPONSE_ROW,$/;"	e	enum:cv::cuda::FastFeatureDetector::__anon291
RESPONSE_ROW	cudafeatures2d.hpp	/^        RESPONSE_ROW,$/;"	e	enum:cv::cuda::ORB::__anon292
RETR_CCOMP	imgproc.hpp	/^    RETR_CCOMP     = 2,$/;"	e	enum:cv::RetrievalModes
RETR_EXTERNAL	imgproc.hpp	/^    RETR_EXTERNAL  = 0,$/;"	e	enum:cv::RetrievalModes
RETR_FLOODFILL	imgproc.hpp	/^    RETR_FLOODFILL = 4 \/\/!<$/;"	e	enum:cv::RetrievalModes
RETR_LIST	imgproc.hpp	/^    RETR_LIST      = 1,$/;"	e	enum:cv::RetrievalModes
RETR_TREE	imgproc.hpp	/^    RETR_TREE      = 3,$/;"	e	enum:cv::RetrievalModes
RGB	core/opengl.hpp	/^        RGB             = 0x1907, \/\/!< Red, Green, Blue$/;"	e	enum:cv::ogl::Texture2D::Format
RGB2Gray	core/cuda/detail/color_detail.hpp	/^            __host__ __device__ __forceinline__ RGB2Gray() {}$/;"	f	struct:cv::cuda::device::color_detail::RGB2Gray
RGB2Gray	core/cuda/detail/color_detail.hpp	/^            __host__ __device__ __forceinline__ RGB2Gray(const RGB2Gray&) {}$/;"	f	struct:cv::cuda::device::color_detail::RGB2Gray
RGB2Gray	core/cuda/detail/color_detail.hpp	/^        template <int bidx> struct RGB2Gray<uchar, 4, bidx> : unary_function<uint, uchar>$/;"	s	namespace:cv::cuda::device::color_detail
RGB2Gray	core/cuda/detail/color_detail.hpp	/^        template <typename T, int scn, int bidx> struct RGB2Gray : unary_function<typename TypeVec<T, scn>::vec_type, T>$/;"	s	namespace:cv::cuda::device::color_detail
RGB2Gray	cudev/functional/detail/color_cvt.hpp	/^    template <int scn, int bidx> struct RGB2Gray<float, scn, bidx>$/;"	s	namespace:cv::cudev::color_cvt_detail
RGB2Gray	cudev/functional/detail/color_cvt.hpp	/^    template <typename T, int scn, int bidx> struct RGB2Gray$/;"	s	namespace:cv::cudev::color_cvt_detail
RGB2GrayConvert	core/cuda/detail/color_detail.hpp	/^        template <int bidx, typename T> static __device__ __forceinline__ T RGB2GrayConvert(const T* src)$/;"	f	namespace:cv::cuda::device::color_detail
RGB2GrayConvert	core/cuda/detail/color_detail.hpp	/^        template <int bidx> static __device__ __forceinline__ float RGB2GrayConvert(const float* src)$/;"	f	namespace:cv::cuda::device::color_detail
RGB2GrayConvert	core/cuda/detail/color_detail.hpp	/^        template <int bidx> static __device__ __forceinline__ uchar RGB2GrayConvert(uint src)$/;"	f	namespace:cv::cuda::device::color_detail
RGB2HLS	core/cuda/detail/color_detail.hpp	/^            __host__ __device__ __forceinline__ RGB2HLS() {}$/;"	f	struct:cv::cuda::device::color_detail::RGB2HLS
RGB2HLS	core/cuda/detail/color_detail.hpp	/^            __host__ __device__ __forceinline__ RGB2HLS(const RGB2HLS&) {}$/;"	f	struct:cv::cuda::device::color_detail::RGB2HLS
RGB2HLS	core/cuda/detail/color_detail.hpp	/^        template <int bidx, int hr> struct RGB2HLS<uchar, 4, 4, bidx, hr> : unary_function<uint, uint>$/;"	s	namespace:cv::cuda::device::color_detail
RGB2HLS	core/cuda/detail/color_detail.hpp	/^        template <typename T, int scn, int dcn, int bidx, int hr> struct RGB2HLS$/;"	s	namespace:cv::cuda::device::color_detail
RGB2HLS	cudev/functional/detail/color_cvt.hpp	/^    template <int scn, int dcn, int bidx, int hr> struct RGB2HLS<float, scn, dcn, bidx, hr>$/;"	s	namespace:cv::cudev::color_cvt_detail
RGB2HLS	cudev/functional/detail/color_cvt.hpp	/^    template <int scn, int dcn, int bidx, int hr> struct RGB2HLS<uchar, scn, dcn, bidx, hr>$/;"	s	namespace:cv::cudev::color_cvt_detail
RGB2HLSConvert	core/cuda/detail/color_detail.hpp	/^        template <int bidx, int hr, typename D> static __device__ void RGB2HLSConvert(const float* src, D& dst)$/;"	f	namespace:cv::cuda::device::color_detail
RGB2HLSConvert	core/cuda/detail/color_detail.hpp	/^        template <int bidx, int hr, typename D> static __device__ void RGB2HLSConvert(const uchar* src, D& dst)$/;"	f	namespace:cv::cuda::device::color_detail
RGB2HLSConvert	core/cuda/detail/color_detail.hpp	/^        template <int bidx, int hr> static __device__ uint RGB2HLSConvert(uint src)$/;"	f	namespace:cv::cuda::device::color_detail
RGB2HSV	core/cuda/detail/color_detail.hpp	/^            __host__ __device__ __forceinline__ RGB2HSV() {}$/;"	f	struct:cv::cuda::device::color_detail::RGB2HSV
RGB2HSV	core/cuda/detail/color_detail.hpp	/^            __host__ __device__ __forceinline__ RGB2HSV(const RGB2HSV&) {}$/;"	f	struct:cv::cuda::device::color_detail::RGB2HSV
RGB2HSV	core/cuda/detail/color_detail.hpp	/^        template <int bidx, int hr> struct RGB2HSV<uchar, 4, 4, bidx, hr> : unary_function<uint, uint>$/;"	s	namespace:cv::cuda::device::color_detail
RGB2HSV	core/cuda/detail/color_detail.hpp	/^        template <typename T, int scn, int dcn, int bidx, int hr> struct RGB2HSV$/;"	s	namespace:cv::cuda::device::color_detail
RGB2HSV	cudev/functional/detail/color_cvt.hpp	/^    template <int scn, int dcn, int bidx, int hr> struct RGB2HSV<float, scn, dcn, bidx, hr>$/;"	s	namespace:cv::cudev::color_cvt_detail
RGB2HSV	cudev/functional/detail/color_cvt.hpp	/^    template <int scn, int dcn, int bidx, int hr> struct RGB2HSV<uchar, scn, dcn, bidx, hr>$/;"	s	namespace:cv::cudev::color_cvt_detail
RGB2HSVConvert	core/cuda/detail/color_detail.hpp	/^        template <int bidx, int hr, typename D> static __device__ void RGB2HSVConvert(const float* src, D& dst)$/;"	f	namespace:cv::cuda::device::color_detail
RGB2HSVConvert	core/cuda/detail/color_detail.hpp	/^        template <int bidx, int hr, typename D> static __device__ void RGB2HSVConvert(const uchar* src, D& dst)$/;"	f	namespace:cv::cuda::device::color_detail
RGB2HSVConvert	core/cuda/detail/color_detail.hpp	/^        template <int bidx, int hr> static __device__ uint RGB2HSVConvert(uint src)$/;"	f	namespace:cv::cuda::device::color_detail
RGB2Lab	core/cuda/detail/color_detail.hpp	/^            __host__ __device__ __forceinline__ RGB2Lab() {}$/;"	f	struct:cv::cuda::device::color_detail::RGB2Lab
RGB2Lab	core/cuda/detail/color_detail.hpp	/^            __host__ __device__ __forceinline__ RGB2Lab(const RGB2Lab&) {}$/;"	f	struct:cv::cuda::device::color_detail::RGB2Lab
RGB2Lab	core/cuda/detail/color_detail.hpp	/^        struct RGB2Lab<float, scn, dcn, srgb, blueIdx>$/;"	s	namespace:cv::cuda::device::color_detail
RGB2Lab	core/cuda/detail/color_detail.hpp	/^        struct RGB2Lab<uchar, scn, dcn, srgb, blueIdx>$/;"	s	namespace:cv::cuda::device::color_detail
RGB2Lab	cudev/functional/detail/color_cvt.hpp	/^    template <int scn, int dcn, bool srgb, int blueIdx> struct RGB2Lab<float, scn, dcn, srgb, blueIdx>$/;"	s	namespace:cv::cudev::color_cvt_detail
RGB2Lab	cudev/functional/detail/color_cvt.hpp	/^    template <int scn, int dcn, bool srgb, int blueIdx> struct RGB2Lab<uchar, scn, dcn, srgb, blueIdx>$/;"	s	namespace:cv::cudev::color_cvt_detail
RGB2LabConvert_b	core/cuda/detail/color_detail.hpp	/^        __device__ __forceinline__ void RGB2LabConvert_b(const T& src, D& dst)$/;"	f	namespace:cv::cuda::device::color_detail
RGB2LabConvert_f	core/cuda/detail/color_detail.hpp	/^        __device__ __forceinline__ void RGB2LabConvert_f(const T& src, D& dst)$/;"	f	namespace:cv::cuda::device::color_detail
RGB2Luv	core/cuda/detail/color_detail.hpp	/^            __host__ __device__ __forceinline__ RGB2Luv() {}$/;"	f	struct:cv::cuda::device::color_detail::RGB2Luv
RGB2Luv	core/cuda/detail/color_detail.hpp	/^            __host__ __device__ __forceinline__ RGB2Luv(const RGB2Luv&) {}$/;"	f	struct:cv::cuda::device::color_detail::RGB2Luv
RGB2Luv	core/cuda/detail/color_detail.hpp	/^        struct RGB2Luv<float, scn, dcn, srgb, blueIdx>$/;"	s	namespace:cv::cuda::device::color_detail
RGB2Luv	core/cuda/detail/color_detail.hpp	/^        struct RGB2Luv<uchar, scn, dcn, srgb, blueIdx>$/;"	s	namespace:cv::cuda::device::color_detail
RGB2Luv	cudev/functional/detail/color_cvt.hpp	/^    template <int scn, int dcn, bool srgb, int blueIdx> struct RGB2Luv<float, scn, dcn, srgb, blueIdx>$/;"	s	namespace:cv::cudev::color_cvt_detail
RGB2Luv	cudev/functional/detail/color_cvt.hpp	/^    template <int scn, int dcn, bool srgb, int blueIdx> struct RGB2Luv<uchar, scn, dcn, srgb, blueIdx>$/;"	s	namespace:cv::cudev::color_cvt_detail
RGB2LuvConvert_b	core/cuda/detail/color_detail.hpp	/^        __device__ __forceinline__ void RGB2LuvConvert_b(const T& src, D& dst)$/;"	f	namespace:cv::cuda::device::color_detail
RGB2LuvConvert_f	core/cuda/detail/color_detail.hpp	/^        __device__ __forceinline__ void RGB2LuvConvert_f(const T& src, D& dst)$/;"	f	namespace:cv::cuda::device::color_detail
RGB2RGB	core/cuda/detail/color_detail.hpp	/^            __host__ __device__ __forceinline__ RGB2RGB() {}$/;"	f	struct:cv::cuda::device::color_detail::RGB2RGB
RGB2RGB	core/cuda/detail/color_detail.hpp	/^            __host__ __device__ __forceinline__ RGB2RGB(const RGB2RGB&) {}$/;"	f	struct:cv::cuda::device::color_detail::RGB2RGB
RGB2RGB	core/cuda/detail/color_detail.hpp	/^        template <> struct RGB2RGB<uchar, 4, 4, 2> : unary_function<uint, uint>$/;"	s	namespace:cv::cuda::device::color_detail
RGB2RGB	core/cuda/detail/color_detail.hpp	/^        template <typename T, int scn, int dcn, int bidx> struct RGB2RGB$/;"	s	namespace:cv::cuda::device::color_detail
RGB2RGB	cudev/functional/detail/color_cvt.hpp	/^    template <typename T, int scn, int dcn, int bidx> struct RGB2RGB$/;"	s	namespace:cv::cudev::color_cvt_detail
RGB2RGB5x5	core/cuda/detail/color_detail.hpp	/^            __host__ __device__ __forceinline__ RGB2RGB5x5() {}$/;"	f	struct:cv::cuda::device::color_detail::RGB2RGB5x5
RGB2RGB5x5	core/cuda/detail/color_detail.hpp	/^            __host__ __device__ __forceinline__ RGB2RGB5x5(const RGB2RGB5x5&) {}$/;"	f	struct:cv::cuda::device::color_detail::RGB2RGB5x5
RGB2RGB5x5	core/cuda/detail/color_detail.hpp	/^        template<int bidx, int green_bits> struct RGB2RGB5x5<3, bidx,green_bits> : unary_function<uchar3, ushort>$/;"	s	namespace:cv::cuda::device::color_detail
RGB2RGB5x5	core/cuda/detail/color_detail.hpp	/^        template<int bidx, int green_bits> struct RGB2RGB5x5<4, bidx,green_bits> : unary_function<uint, ushort>$/;"	s	namespace:cv::cuda::device::color_detail
RGB2RGB5x5	cudev/functional/detail/color_cvt.hpp	/^    template <int bidx> struct RGB2RGB5x5<3, bidx, 5>$/;"	s	namespace:cv::cudev::color_cvt_detail
RGB2RGB5x5	cudev/functional/detail/color_cvt.hpp	/^    template <int bidx> struct RGB2RGB5x5<4, bidx, 5>$/;"	s	namespace:cv::cudev::color_cvt_detail
RGB2RGB5x5	cudev/functional/detail/color_cvt.hpp	/^    template <int scn, int bidx> struct RGB2RGB5x5<scn, bidx, 6>$/;"	s	namespace:cv::cudev::color_cvt_detail
RGB2RGB5x5Converter	core/cuda/detail/color_detail.hpp	/^        template<int bidx> struct RGB2RGB5x5Converter<5, bidx>$/;"	s	namespace:cv::cuda::device::color_detail
RGB2RGB5x5Converter	core/cuda/detail/color_detail.hpp	/^        template<int bidx> struct RGB2RGB5x5Converter<6, bidx>$/;"	s	namespace:cv::cuda::device::color_detail
RGB2XYZ	core/cuda/detail/color_detail.hpp	/^            __host__ __device__ __forceinline__ RGB2XYZ() {}$/;"	f	struct:cv::cuda::device::color_detail::RGB2XYZ
RGB2XYZ	core/cuda/detail/color_detail.hpp	/^            __host__ __device__ __forceinline__ RGB2XYZ(const RGB2XYZ&) {}$/;"	f	struct:cv::cuda::device::color_detail::RGB2XYZ
RGB2XYZ	core/cuda/detail/color_detail.hpp	/^        template <int bidx> struct RGB2XYZ<uchar, 4, 4, bidx> : unary_function<uint, uint>$/;"	s	namespace:cv::cuda::device::color_detail
RGB2XYZ	core/cuda/detail/color_detail.hpp	/^        template <typename T, int scn, int dcn, int bidx> struct RGB2XYZ$/;"	s	namespace:cv::cuda::device::color_detail
RGB2XYZ	cudev/functional/detail/color_cvt.hpp	/^    template <int scn, int dcn, int bidx> struct RGB2XYZ<float, scn, dcn, bidx>$/;"	s	namespace:cv::cudev::color_cvt_detail
RGB2XYZ	cudev/functional/detail/color_cvt.hpp	/^    template <typename T, int scn, int dcn, int bidx> struct RGB2XYZ$/;"	s	namespace:cv::cudev::color_cvt_detail
RGB2XYZConvert	core/cuda/detail/color_detail.hpp	/^        template <int bidx, typename D> static __device__ __forceinline__ void RGB2XYZConvert(const float* src, D& dst)$/;"	f	namespace:cv::cuda::device::color_detail
RGB2XYZConvert	core/cuda/detail/color_detail.hpp	/^        template <int bidx, typename T, typename D> static __device__ __forceinline__ void RGB2XYZConvert(const T* src, D& dst)$/;"	f	namespace:cv::cuda::device::color_detail
RGB2XYZConvert	core/cuda/detail/color_detail.hpp	/^        template <int bidx> static __device__ __forceinline__ uint RGB2XYZConvert(uint src)$/;"	f	namespace:cv::cuda::device::color_detail
RGB2YCrCb	core/cuda/detail/color_detail.hpp	/^            __host__ __device__ __forceinline__ RGB2YCrCb() {}$/;"	f	struct:cv::cuda::device::color_detail::RGB2YCrCb
RGB2YCrCb	core/cuda/detail/color_detail.hpp	/^            __host__ __device__ __forceinline__ RGB2YCrCb(const RGB2YCrCb&) {}$/;"	f	struct:cv::cuda::device::color_detail::RGB2YCrCb
RGB2YCrCb	core/cuda/detail/color_detail.hpp	/^        template <int bidx> struct RGB2YCrCb<uchar, 4, 4, bidx> : unary_function<uint, uint>$/;"	s	namespace:cv::cuda::device::color_detail
RGB2YCrCb	core/cuda/detail/color_detail.hpp	/^        template <typename T, int scn, int dcn, int bidx> struct RGB2YCrCb$/;"	s	namespace:cv::cuda::device::color_detail
RGB2YCrCb	cudev/functional/detail/color_cvt.hpp	/^    template <int scn, int dcn, int bidx> struct RGB2YCrCb<float, scn, dcn, bidx>$/;"	s	namespace:cv::cudev::color_cvt_detail
RGB2YCrCb	cudev/functional/detail/color_cvt.hpp	/^    template <typename T, int scn, int dcn, int bidx> struct RGB2YCrCb$/;"	s	namespace:cv::cudev::color_cvt_detail
RGB2YCrCbConvert	core/cuda/detail/color_detail.hpp	/^        template <int bidx, typename D> static __device__ __forceinline__ void RGB2YCrCbConvert(const float* src, D& dst)$/;"	f	namespace:cv::cuda::device::color_detail
RGB2YCrCbConvert	core/cuda/detail/color_detail.hpp	/^        template <int bidx, typename T, typename D> static __device__ void RGB2YCrCbConvert(const T* src, D& dst)$/;"	f	namespace:cv::cuda::device::color_detail
RGB2YCrCbConvert	core/cuda/detail/color_detail.hpp	/^        template <int bidx> static __device__ uint RGB2YCrCbConvert(uint src)$/;"	f	namespace:cv::cuda::device::color_detail
RGB2YUV	core/cuda/detail/color_detail.hpp	/^            __host__ __device__ __forceinline__ RGB2YUV() {}$/;"	f	struct:cv::cuda::device::color_detail::RGB2YUV
RGB2YUV	core/cuda/detail/color_detail.hpp	/^            __host__ __device__ __forceinline__ RGB2YUV(const RGB2YUV&) {}$/;"	f	struct:cv::cuda::device::color_detail::RGB2YUV
RGB2YUV	core/cuda/detail/color_detail.hpp	/^        template <typename T, int scn, int dcn, int bidx> struct RGB2YUV$/;"	s	namespace:cv::cuda::device::color_detail
RGB2YUV	cudev/functional/detail/color_cvt.hpp	/^    template <int scn, int dcn, int bidx> struct RGB2YUV<float, scn, dcn, bidx>$/;"	s	namespace:cv::cudev::color_cvt_detail
RGB2YUV	cudev/functional/detail/color_cvt.hpp	/^    template <typename T, int scn, int dcn, int bidx> struct RGB2YUV$/;"	s	namespace:cv::cudev::color_cvt_detail
RGB2YUVConvert	core/cuda/detail/color_detail.hpp	/^        template <int bidx, typename D> static __device__ __forceinline__ void RGB2YUVConvert(const float* src, D& dst)$/;"	f	namespace:cv::cuda::device::color_detail
RGB2YUVConvert	core/cuda/detail/color_detail.hpp	/^        template <int bidx, typename T, typename D> static __device__ void RGB2YUVConvert(const T* src, D& dst)$/;"	f	namespace:cv::cuda::device::color_detail
RGB5x52Gray	core/cuda/detail/color_detail.hpp	/^            __host__ __device__ __forceinline__ RGB5x52Gray() {}$/;"	f	struct:cv::cuda::device::color_detail::RGB5x52Gray
RGB5x52Gray	core/cuda/detail/color_detail.hpp	/^            __host__ __device__ __forceinline__ RGB5x52Gray(const RGB5x52Gray&) {}$/;"	f	struct:cv::cuda::device::color_detail::RGB5x52Gray
RGB5x52Gray	core/cuda/detail/color_detail.hpp	/^        template<int green_bits> struct RGB5x52Gray : unary_function<ushort, uchar>$/;"	s	namespace:cv::cuda::device::color_detail
RGB5x52Gray	cudev/functional/detail/color_cvt.hpp	/^    template <> struct RGB5x52Gray<5>$/;"	s	namespace:cv::cudev::color_cvt_detail
RGB5x52Gray	cudev/functional/detail/color_cvt.hpp	/^    template <> struct RGB5x52Gray<6>$/;"	s	namespace:cv::cudev::color_cvt_detail
RGB5x52GrayConverter	core/cuda/detail/color_detail.hpp	/^        template <> struct RGB5x52GrayConverter<5>$/;"	s	namespace:cv::cuda::device::color_detail
RGB5x52GrayConverter	core/cuda/detail/color_detail.hpp	/^        template <> struct RGB5x52GrayConverter<6>$/;"	s	namespace:cv::cuda::device::color_detail
RGB5x52RGB	core/cuda/detail/color_detail.hpp	/^            __host__ __device__ __forceinline__ RGB5x52RGB() {}$/;"	f	struct:cv::cuda::device::color_detail::RGB5x52RGB
RGB5x52RGB	core/cuda/detail/color_detail.hpp	/^            __host__ __device__ __forceinline__ RGB5x52RGB(const RGB5x52RGB&) {}$/;"	f	struct:cv::cuda::device::color_detail::RGB5x52RGB
RGB5x52RGB	core/cuda/detail/color_detail.hpp	/^        template <int bidx, int green_bits> struct RGB5x52RGB<3, bidx, green_bits> : unary_function<ushort, uchar3>$/;"	s	namespace:cv::cuda::device::color_detail
RGB5x52RGB	core/cuda/detail/color_detail.hpp	/^        template <int bidx, int green_bits> struct RGB5x52RGB<4, bidx, green_bits> : unary_function<ushort, uint>$/;"	s	namespace:cv::cuda::device::color_detail
RGB5x52RGB	cudev/functional/detail/color_cvt.hpp	/^    template <int bidx> struct RGB5x52RGB<3, bidx, 5>$/;"	s	namespace:cv::cudev::color_cvt_detail
RGB5x52RGB	cudev/functional/detail/color_cvt.hpp	/^    template <int bidx> struct RGB5x52RGB<3, bidx, 6>$/;"	s	namespace:cv::cudev::color_cvt_detail
RGB5x52RGB	cudev/functional/detail/color_cvt.hpp	/^    template <int bidx> struct RGB5x52RGB<4, bidx, 5>$/;"	s	namespace:cv::cudev::color_cvt_detail
RGB5x52RGB	cudev/functional/detail/color_cvt.hpp	/^    template <int bidx> struct RGB5x52RGB<4, bidx, 6>$/;"	s	namespace:cv::cudev::color_cvt_detail
RGB5x52RGBConverter	core/cuda/detail/color_detail.hpp	/^        template <int bidx> struct RGB5x52RGBConverter<5, bidx>$/;"	s	namespace:cv::cuda::device::color_detail
RGB5x52RGBConverter	core/cuda/detail/color_detail.hpp	/^        template <int bidx> struct RGB5x52RGBConverter<6, bidx>$/;"	s	namespace:cv::cuda::device::color_detail
RGBA	core/opengl.hpp	/^        RGBA            = 0x1908  \/\/!< Red, Green, Blue, Alpha$/;"	e	enum:cv::ogl::Texture2D::Format
RHO	calib3d.hpp	/^       RHO    = 16 \/\/!< RHO algorithm$/;"	e	enum:cv::__anon43
RNG	core.hpp	/^class CV_EXPORTS RNG$/;"	c	namespace:cv
RNG	core/base.hpp	/^class CV_EXPORTS RNG;$/;"	m	namespace:cv	typeref:class:cv::CV_EXPORTS
RNG	core/operations.hpp	/^inline RNG::RNG()              { state = 0xffffffff; }$/;"	f	class:cv::RNG
RNG	core/operations.hpp	/^inline RNG::RNG(uint64 _state) { state = _state ? _state : 0xffffffff; }$/;"	f	class:cv::RNG
RNG_MT19937	core.hpp	/^class CV_EXPORTS RNG_MT19937$/;"	c	namespace:cv
ROWS_COUNT	cudafeatures2d.hpp	/^        ROWS_COUNT$/;"	e	enum:cv::cuda::ORB::__anon292
ROWS_COUNT	cudafeatures2d.hpp	/^        ROWS_COUNT,$/;"	e	enum:cv::cuda::FastFeatureDetector::__anon291
ROW_SAMPLE	ml.hpp	/^    ROW_SAMPLE = 0, \/\/!< each training sample is a row of samples$/;"	e	enum:cv::ml::SampleTypes
RPROP	ml.hpp	/^        RPROP=1 \/\/!< The RPROP algorithm. See @cite RPROP93 for details.$/;"	e	enum:cv::ml::ANN_MLP::TrainingMethods
RTrees	ml.hpp	/^class CV_EXPORTS_W RTrees : public DTrees$/;"	c	namespace:cv::ml
RUN_ALL_TESTS	ts/ts_gtest.h	/^inline int RUN_ALL_TESTS() {$/;"	f
RadiusResultSet	flann/result_set.h	/^    RadiusResultSet(DistanceType radius_, int* indices_, DistanceType* dists_, int capacity_) :$/;"	f	class:cvflann::RadiusResultSet
RadiusResultSet	flann/result_set.h	/^class RadiusResultSet : public ResultSet<DistanceType>$/;"	c	namespace:cvflann
RadiusUniqueResultSet	flann/result_set.h	/^    RadiusUniqueResultSet(DistanceType radius) :$/;"	f	class:cvflann::RadiusUniqueResultSet
RadiusUniqueResultSet	flann/result_set.h	/^class RadiusUniqueResultSet : public UniqueResultSet<DistanceType>$/;"	c	namespace:cvflann
Random	ts/ts_gtest.h	/^  explicit Random(UInt32 seed) : state_(seed) {}$/;"	f	class:testing::internal::Random
Random	ts/ts_gtest.h	/^class GTEST_API_ Random {$/;"	c	namespace:testing::internal
Range	core/base.hpp	/^class CV_EXPORTS Range;$/;"	m	namespace:cv	typeref:class:cv::CV_EXPORTS
Range	core/types.hpp	/^Range::Range()$/;"	f	class:cv::Range
Range	core/types.hpp	/^Range::Range(int _start, int _end)$/;"	f	class:cv::Range
Range	core/types.hpp	/^class CV_EXPORTS Range$/;"	c	namespace:cv
Range	ts/ts_gtest.h	/^internal::ParamGenerator<T> Range(T start, T end) {$/;"	f	namespace:testing
Range	ts/ts_gtest.h	/^internal::ParamGenerator<T> Range(T start, T end, IncrementT step) {$/;"	f	namespace:testing
RangeGenerator	ts/ts_gtest.h	/^  RangeGenerator(T begin, T end, IncrementT step)$/;"	f	class:testing::internal::RangeGenerator
RangeGenerator	ts/ts_gtest.h	/^class RangeGenerator : public ParamGeneratorInterface<T> {$/;"	c	namespace:testing::internal
RansacParams	videostab/motion_core.hpp	/^    RansacParams() : size(0), thresh(0), eps(0), prob(0) {}$/;"	f	struct:cv::videostab::RansacParams
RansacParams	videostab/motion_core.hpp	/^inline RansacParams::RansacParams(int _size, float _thresh, float _eps, float _prob)$/;"	f	class:cv::videostab::RansacParams
RansacParams	videostab/motion_core.hpp	/^struct CV_EXPORTS RansacParams$/;"	s	namespace:cv::videostab
RawVideoSource	cudacodec.hpp	/^class CV_EXPORTS RawVideoSource$/;"	c	namespace:cv::cudacodec
Read	ts/ts_gtest.h	/^inline int Read(int fd, void* buf, unsigned int count) {$/;"	f	namespace:std::tr1::posix
ReadOnly	core/ocl.hpp	/^    static KernelArg ReadOnly(const UMat& m, int wscale=1, int iwscale=1)$/;"	f	class:cv::ocl::KernelArg
ReadOnlyNoSize	core/ocl.hpp	/^    static KernelArg ReadOnlyNoSize(const UMat& m, int wscale=1, int iwscale=1)$/;"	f	class:cv::ocl::KernelArg
ReadWrite	core/ocl.hpp	/^    static KernelArg ReadWrite(const UMat& m, int wscale=1, int iwscale=1)$/;"	f	class:cv::ocl::KernelArg
ReadWriteNoSize	core/ocl.hpp	/^    static KernelArg ReadWriteNoSize(const UMat& m, int wscale=1, int iwscale=1)$/;"	f	class:cv::ocl::KernelArg
Rect	core/types.hpp	/^typedef Rect2i Rect;$/;"	t	namespace:cv
Rect2d	core/types.hpp	/^typedef Rect_<double> Rect2d;$/;"	t	namespace:cv
Rect2f	core/types.hpp	/^typedef Rect_<float> Rect2f;$/;"	t	namespace:cv
Rect2i	core/types.hpp	/^typedef Rect_<int> Rect2i;$/;"	t	namespace:cv
RectLess	ts/ts_perf.hpp	/^typedef RectLess_<int> RectLess;$/;"	t	namespace:perf::comparators
RectLess_	ts/ts_perf.hpp	/^struct CV_EXPORTS RectLess_ :$/;"	s	namespace:perf::comparators
Rect_	core/types.hpp	/^Rect_<_Tp>::Rect_()$/;"	f	class:cv::Rect_
Rect_	core/types.hpp	/^Rect_<_Tp>::Rect_(_Tp _x, _Tp _y, _Tp _width, _Tp _height)$/;"	f	class:cv::Rect_
Rect_	core/types.hpp	/^Rect_<_Tp>::Rect_(const Point_<_Tp>& org, const Size_<_Tp>& sz)$/;"	f	class:cv::Rect_
Rect_	core/types.hpp	/^Rect_<_Tp>::Rect_(const Point_<_Tp>& pt1, const Point_<_Tp>& pt2)$/;"	f	class:cv::Rect_
Rect_	core/types.hpp	/^Rect_<_Tp>::Rect_(const Rect_<_Tp>& r)$/;"	f	class:cv::Rect_
Rect_	core/types.hpp	/^template<typename _Tp> class Rect_$/;"	c	namespace:cv
RectanglesIntersectTypes	imgproc.hpp	/^enum RectanglesIntersectTypes {$/;"	g	namespace:cv
Reduce	cudev/grid/detail/reduce_to_column.hpp	/^    template <int BLOCK_SIZE, typename work_type, typename work_elem_type, class Reductor> struct Reduce<BLOCK_SIZE, work_type, work_elem_type, Reductor, 1>$/;"	s	namespace:cv::cudev::grid_reduce_to_vec_detail
Reduce	cudev/grid/detail/reduce_to_column.hpp	/^    template <int BLOCK_SIZE, typename work_type, typename work_elem_type, class Reductor> struct Reduce<BLOCK_SIZE, work_type, work_elem_type, Reductor, 2>$/;"	s	namespace:cv::cudev::grid_reduce_to_vec_detail
Reduce	cudev/grid/detail/reduce_to_column.hpp	/^    template <int BLOCK_SIZE, typename work_type, typename work_elem_type, class Reductor> struct Reduce<BLOCK_SIZE, work_type, work_elem_type, Reductor, 3>$/;"	s	namespace:cv::cudev::grid_reduce_to_vec_detail
Reduce	cudev/grid/detail/reduce_to_column.hpp	/^    template <int BLOCK_SIZE, typename work_type, typename work_elem_type, class Reductor> struct Reduce<BLOCK_SIZE, work_type, work_elem_type, Reductor, 4>$/;"	s	namespace:cv::cudev::grid_reduce_to_vec_detail
ReduceToColumnBody	cudev/expr/reduction.hpp	/^template <class Reductor, class SrcPtr> struct ReduceToColumnBody$/;"	s	namespace:cv::cudev
ReduceToRowBody	cudev/expr/reduction.hpp	/^template <class Reductor, class SrcPtr> struct ReduceToRowBody$/;"	s	namespace:cv::cudev
ReduceTypes	core.hpp	/^enum ReduceTypes { REDUCE_SUM = 0, \/\/!< the output is the sum of all rows\/columns of the matrix.$/;"	g	namespace:cv
RefOrVoid	core/cvstd.hpp	/^struct RefOrVoid { typedef T& type; };$/;"	s	namespace:cv::detail
RefOrVoid	core/cvstd.hpp	/^struct RefOrVoid<const void>{ typedef const void type; };$/;"	s	namespace:cv::detail
RefOrVoid	core/cvstd.hpp	/^struct RefOrVoid<const volatile void>{ typedef const volatile void type; };$/;"	s	namespace:cv::detail
RefOrVoid	core/cvstd.hpp	/^struct RefOrVoid<void>{ typedef void type; };$/;"	s	namespace:cv::detail
RefOrVoid	core/cvstd.hpp	/^struct RefOrVoid<volatile void>{ typedef volatile void type; };$/;"	s	namespace:cv::detail
ReferenceTraits	core/cuda/detail/type_traits_detail.hpp	/^        template <class U> struct ReferenceTraits$/;"	s	namespace:cv::cuda::device::type_traits_detail
ReferenceTraits	core/cuda/detail/type_traits_detail.hpp	/^        template <class U> struct ReferenceTraits<U&>$/;"	s	namespace:cv::cuda::device::type_traits_detail
ReferenceTraits	cudev/util/detail/type_traits.hpp	/^    template <class U> struct ReferenceTraits$/;"	s	namespace:cv::cudev::type_traits_detail
ReferenceTraits	cudev/util/detail/type_traits.hpp	/^    template <class U> struct ReferenceTraits<U&>$/;"	s	namespace:cv::cudev::type_traits_detail
ReferredType	core/cuda/type_traits.hpp	/^        typedef typename type_traits_detail::ReferenceTraits<T>::type                                        ReferredType;$/;"	t	struct:cv::cuda::device::TypeTraits
RegKinds	ml.hpp	/^    enum RegKinds {$/;"	g	class:cv::ml::LogisticRegression
Register	ts/ts_gtest.h	/^  static bool Register(const char* \/*prefix*\/, const char* \/*case_name*\/,$/;"	f	class:testing::internal::TypeParameterizedTest
Register	ts/ts_gtest.h	/^  static bool Register(const char* \/*prefix*\/, const char* \/*case_name*\/,$/;"	f	class:testing::internal::TypeParameterizedTestCase
Register	ts/ts_gtest.h	/^  static bool Register(const char* prefix, const char* case_name,$/;"	f	class:testing::internal::TypeParameterizedTest
Register	ts/ts_gtest.h	/^  static bool Register(const char* prefix, const char* case_name,$/;"	f	class:testing::internal::TypeParameterizedTestCase
RegisterTests	ts/ts_gtest.h	/^  virtual void RegisterTests() {$/;"	f	class:testing::internal::ParameterizedTestCaseInfo
RegisterTests	ts/ts_gtest.h	/^  void RegisterTests() {$/;"	f	class:testing::internal::ParameterizedTestCaseRegistry
Regression	ts/ts_perf.hpp	/^class CV_EXPORTS Regression$/;"	c	namespace:perf
ReinterpretBits	ts/ts_gtest.h	/^  static RawType ReinterpretBits(const Bits bits) {$/;"	f	class:testing::internal::FloatingPoint
RelationToSource	ts/ts_gtest.h	/^enum RelationToSource {$/;"	g	namespace:testing::internal
ReleaseImage	core/wimage.hpp	/^    void ReleaseImage() {$/;"	f	class:cv::WImageBuffer
ReleaseImage	core/wimage.hpp	/^    void ReleaseImage() {$/;"	f	class:cv::WImageBufferC
RemapPtr1	cudev/ptr2d/remap.hpp	/^template <class SrcPtr, class MapPtr> struct RemapPtr1$/;"	s	namespace:cv::cudev
RemapPtr1Sz	cudev/ptr2d/remap.hpp	/^template <class SrcPtr, class MapPtr> struct RemapPtr1Sz : RemapPtr1<SrcPtr, MapPtr>$/;"	s	namespace:cv::cudev
RemapPtr2	cudev/ptr2d/remap.hpp	/^template <class SrcPtr, class MapXPtr, class MapYPtr> struct RemapPtr2$/;"	s	namespace:cv::cudev
RemapPtr2Sz	cudev/ptr2d/remap.hpp	/^template <class SrcPtr, class MapXPtr, class MapYPtr> struct RemapPtr2Sz : RemapPtr2<SrcPtr, MapXPtr, MapYPtr>$/;"	s	namespace:cv::cudev
RemoveConst	ts/ts_gtest.h	/^struct RemoveConst { typedef T type; };  \/\/ NOLINT$/;"	s	namespace:testing::internal
RemoveConst	ts/ts_gtest.h	/^struct RemoveConst<T[N]> {$/;"	s	namespace:testing::internal
RemoveConst	ts/ts_gtest.h	/^struct RemoveConst<const T> { typedef T type; };  \/\/ NOLINT$/;"	s	namespace:testing::internal
RemoveConst	ts/ts_gtest.h	/^struct RemoveConst<const T[N]> {$/;"	s	namespace:testing::internal
RemoveReference	ts/ts_gtest.h	/^struct RemoveReference { typedef T type; };  \/\/ NOLINT$/;"	s	namespace:testing::internal
RemoveReference	ts/ts_gtest.h	/^struct RemoveReference<T&> { typedef T type; };  \/\/ NOLINT$/;"	s	namespace:testing::internal
RenderModes	core/opengl.hpp	/^enum RenderModes {$/;"	g	namespace:cv::ogl
RenderingProperties	viz/widgets.hpp	/^        enum RenderingProperties$/;"	g	namespace:cv::viz
RepresentationValues	viz/widgets.hpp	/^        enum RepresentationValues$/;"	g	namespace:cv::viz
Reseed	ts/ts_gtest.h	/^  void Reseed(UInt32 seed) { state_ = seed; }$/;"	f	class:testing::internal::Random
Reset	ts/ts_perf.hpp	/^    void Reset()$/;"	f	struct:perf::ImplData
ResizePtr	cudev/ptr2d/resize.hpp	/^template <class SrcPtr> struct ResizePtr$/;"	s	namespace:cv::cudev
ResizePtrSz	cudev/ptr2d/resize.hpp	/^template <class SrcPtr> struct ResizePtrSz : ResizePtr<SrcPtr>$/;"	s	namespace:cv::cudev
ResultSet	flann/result_set.h	/^class ResultSet$/;"	c	namespace:cvflann
ResultType	core/base.hpp	/^    typedef int ResultType;$/;"	t	struct:cv::Hamming
ResultType	features2d.hpp	/^    typedef typename Accumulator<T>::Type ResultType;$/;"	t	struct:cv::L1
ResultType	features2d.hpp	/^    typedef typename Accumulator<T>::Type ResultType;$/;"	t	struct:cv::L2
ResultType	features2d.hpp	/^    typedef typename Accumulator<T>::Type ResultType;$/;"	t	struct:cv::SL2
ResultType	flann/dist.h	/^    typedef int ResultType;$/;"	t	struct:cvflann::Hamming
ResultType	flann/dist.h	/^    typedef int ResultType;$/;"	t	struct:cvflann::Hamming2
ResultType	flann/dist.h	/^    typedef int ResultType;$/;"	t	struct:cvflann::HammingLUT
ResultType	flann/dist.h	/^    typedef typename Accumulator<T>::Type ResultType;$/;"	t	struct:cvflann::ChiSquareDistance
ResultType	flann/dist.h	/^    typedef typename Accumulator<T>::Type ResultType;$/;"	t	struct:cvflann::HellingerDistance
ResultType	flann/dist.h	/^    typedef typename Accumulator<T>::Type ResultType;$/;"	t	struct:cvflann::HistIntersectionDistance
ResultType	flann/dist.h	/^    typedef typename Accumulator<T>::Type ResultType;$/;"	t	struct:cvflann::KL_Divergence
ResultType	flann/dist.h	/^    typedef typename Accumulator<T>::Type ResultType;$/;"	t	struct:cvflann::L1
ResultType	flann/dist.h	/^    typedef typename Accumulator<T>::Type ResultType;$/;"	t	struct:cvflann::L2
ResultType	flann/dist.h	/^    typedef typename Accumulator<T>::Type ResultType;$/;"	t	struct:cvflann::L2_Simple
ResultType	flann/dist.h	/^    typedef typename Accumulator<T>::Type ResultType;$/;"	t	struct:cvflann::MaxDistance
ResultType	flann/dist.h	/^    typedef typename Accumulator<T>::Type ResultType;$/;"	t	struct:cvflann::MinkowskiDistance
ResultType	flann/dist.h	/^    typedef typename ChiSquareDistance<ElementType>::ResultType ResultType;$/;"	t	struct:cvflann::simpleDistance
ResultType	flann/dist.h	/^    typedef typename ChiSquareDistance<ElementType>::ResultType ResultType;$/;"	t	struct:cvflann::squareDistance
ResultType	flann/dist.h	/^    typedef typename Distance::ResultType ResultType;$/;"	t	struct:cvflann::simpleDistance
ResultType	flann/dist.h	/^    typedef typename Distance::ResultType ResultType;$/;"	t	struct:cvflann::squareDistance
ResultType	flann/dist.h	/^    typedef typename HellingerDistance<ElementType>::ResultType ResultType;$/;"	t	struct:cvflann::simpleDistance
ResultType	flann/dist.h	/^    typedef typename HellingerDistance<ElementType>::ResultType ResultType;$/;"	t	struct:cvflann::squareDistance
ResultType	flann/dist.h	/^    typedef typename L2<ElementType>::ResultType ResultType;$/;"	t	struct:cvflann::simpleDistance
ResultType	flann/dist.h	/^    typedef typename L2<ElementType>::ResultType ResultType;$/;"	t	struct:cvflann::squareDistance
ResultType	flann/dist.h	/^    typedef typename L2_Simple<ElementType>::ResultType ResultType;$/;"	t	struct:cvflann::simpleDistance
ResultType	flann/dist.h	/^    typedef typename L2_Simple<ElementType>::ResultType ResultType;$/;"	t	struct:cvflann::squareDistance
ResultType	flann/dist.h	/^    typedef typename MinkowskiDistance<ElementType>::ResultType ResultType;$/;"	t	struct:cvflann::simpleDistance
ResultType	flann/dist.h	/^    typedef typename MinkowskiDistance<ElementType>::ResultType ResultType;$/;"	t	struct:cvflann::squareDistance
RetrievalModes	imgproc.hpp	/^enum RetrievalModes {$/;"	g	namespace:cv
ReturnSentinel	ts/ts_gtest.h	/^    explicit ReturnSentinel(DeathTest* test) : test_(test) { }$/;"	f	class:testing::internal::DeathTest::ReturnSentinel
ReturnSentinel	ts/ts_gtest.h	/^  class ReturnSentinel {$/;"	c	class:testing::internal::DeathTest
RightButton	viz/types.hpp	/^            enum MouseButton { NoButton = 0, LeftButton, MiddleButton, RightButton, VScroll } ;$/;"	e	enum:cv::viz::MouseEvent::MouseButton
RmDir	ts/ts_gtest.h	/^inline int RmDir(const char* dir) { return _rmdir(dir); }$/;"	f	namespace:std::tr1::posix
RotatedRect	core/base.hpp	/^class CV_EXPORTS RotatedRect;$/;"	m	namespace:cv	typeref:class:cv::CV_EXPORTS
RotatedRect	core/types.hpp	/^RotatedRect::RotatedRect()$/;"	f	class:cv::RotatedRect
RotatedRect	core/types.hpp	/^RotatedRect::RotatedRect(const Point2f& _center, const Size2f& _size, float _angle)$/;"	f	class:cv::RotatedRect
RotatedRect	core/types.hpp	/^class CV_EXPORTS RotatedRect$/;"	c	namespace:cv
RotationWarper	stitching/detail/warpers.hpp	/^class CV_EXPORTS RotationWarper$/;"	c	namespace:cv::detail
RotationWarperBase	stitching/detail/warpers.hpp	/^class CV_EXPORTS RotationWarperBase : public RotationWarper$/;"	c	namespace:cv::detail
Row	core/wimage.hpp	/^    inline T* Row(int r) {$/;"	f	class:cv::WImage
Row	core/wimage.hpp	/^    inline const T* Row(int r) const {$/;"	f	class:cv::WImage
Run	ts/ts_gtest.h	/^  virtual void Run() {$/;"	f	class:std::tr1::ThreadWithParam
RunSetUpTestCase	ts/ts_gtest.h	/^  void RunSetUpTestCase() { (*set_up_tc_)(); }$/;"	f	class:testing::TestCase
RunTearDownTestCase	ts/ts_gtest.h	/^  void RunTearDownTestCase() { (*tear_down_tc_)(); }$/;"	f	class:testing::TestCase
SADWindowSize	calib3d/calib3d_c.h	/^    int SADWindowSize; \/\/ ~5x5..21x21$/;"	m	struct:CvStereoBMState
SAMPLE_MEAN	flann/kdtree_index.h	/^        SAMPLE_MEAN = 100,$/;"	e	enum:cvflann::KDTreeIndex::__anon27
SANITY_CHECK	ts/ts_perf.hpp	207;"	d
SANITY_CHECK_KEYPOINTS	ts/ts_perf.hpp	209;"	d
SANITY_CHECK_MATCHES	ts/ts_perf.hpp	210;"	d
SANITY_CHECK_MOMENTS	ts/ts_perf.hpp	208;"	d
SANITY_CHECK_NOTHING	ts/ts_perf.hpp	211;"	d
SAVED	flann/defines.h	/^    SAVED = 254,$/;"	e	enum:cvflann::flann_algorithm_t
SCOPED_TRACE	ts/ts_gtest.h	20004;"	d
SECOND	stitching/detail/seam_finders.hpp	/^        FIRST = 1, SECOND = 2, INTERS = 4,$/;"	e	enum:cv::detail::DpSeamFinder::ComponentState
SEQ	core/persistence.hpp	/^        SEQ       = 5, \/\/!< sequence$/;"	e	enum:cv::FileNode::Type
SF_BGR	cudacodec.hpp	/^    SF_BGR,$/;"	e	enum:cv::cudacodec::SurfaceFormat
SF_GRAY	cudacodec.hpp	/^    SF_GRAY = SF_BGR$/;"	e	enum:cv::cudacodec::SurfaceFormat
SF_IYUV	cudacodec.hpp	/^    SF_IYUV,$/;"	e	enum:cv::cudacodec::SurfaceFormat
SF_NV12	cudacodec.hpp	/^    SF_NV12,$/;"	e	enum:cv::cudacodec::SurfaceFormat
SF_UYVY	cudacodec.hpp	/^    SF_UYVY = 0,$/;"	e	enum:cv::cudacodec::SurfaceFormat
SF_YUY2	cudacodec.hpp	/^    SF_YUY2,$/;"	e	enum:cv::cudacodec::SurfaceFormat
SF_YV12	cudacodec.hpp	/^    SF_YV12,$/;"	e	enum:cv::cudacodec::SurfaceFormat
SHADING	viz/widgets.hpp	/^            SHADING$/;"	e	enum:cv::viz::RenderingProperties
SHADING_FLAT	viz/widgets.hpp	/^            SHADING_FLAT,$/;"	e	enum:cv::viz::ShadingValues
SHADING_GOURAUD	viz/widgets.hpp	/^            SHADING_GOURAUD,$/;"	e	enum:cv::viz::ShadingValues
SHADING_PHONG	viz/widgets.hpp	/^            SHADING_PHONG$/;"	e	enum:cv::viz::ShadingValues
SHARED	core/cuda.hpp	/^    enum AllocType { PAGE_LOCKED = 1, SHARED = 2, WRITE_COMBINED = 4 };$/;"	e	enum:cv::cuda::HostMem::AllocType
SHARED_ATOMICS	core/cuda.hpp	/^    SHARED_ATOMICS = FEATURE_SET_COMPUTE_12,$/;"	e	enum:cv::cuda::FeatureSet
SHIFT	viz/types.hpp	/^            enum { NONE = 0, ALT = 1, CTRL = 2, SHIFT = 4 };$/;"	e	enum:cv::viz::KeyboardEvent::__anon73
SHOW_TRACKBAR	videoio/cap_winrt.hpp	/^    SHOW_TRACKBAR$/;"	e	enum:cv::__anon70
SIGMOID	ml.hpp	/^        SIGMOID=3,$/;"	e	enum:cv::ml::SVM::KernelTypes
SIGMOID_SYM	ml.hpp	/^        SIGMOID_SYM = 1,$/;"	e	enum:cv::ml::ANN_MLP::ActivationFunctions
SIMPLE_PERF_TEST	ts/ocl_perf.hpp	61;"	d
SIMPLE_PERF_TEST_P	ts/ocl_perf.hpp	73;"	d
SIZE_ROW	cudafeatures2d.hpp	/^        SIZE_ROW,$/;"	e	enum:cv::cuda::ORB::__anon292
SKIPPED	ts.hpp	/^        SKIPPED=1$/;"	e	enum:cvtest::TS::FailureCode
SL2	features2d.hpp	/^struct CV_EXPORTS SL2$/;"	s	namespace:cv
SMALL_POLICY	flann/any.h	140;"	d
SMALL_POLICY	flann/any.h	156;"	d
SOLVELP_MULTI	core/optim.hpp	/^    SOLVELP_MULTI    = 1 \/\/!< there are multiple maxima for target function - the arbitrary one is returned$/;"	e	enum:cv::SolveLPResult
SOLVELP_SINGLE	core/optim.hpp	/^    SOLVELP_SINGLE    = 0, \/\/!< there is only one maximum for target function$/;"	e	enum:cv::SolveLPResult
SOLVELP_UNBOUNDED	core/optim.hpp	/^    SOLVELP_UNBOUNDED    = -2, \/\/!< problem is unbounded (target function can achieve arbitrary high values)$/;"	e	enum:cv::SolveLPResult
SOLVELP_UNFEASIBLE	core/optim.hpp	/^    SOLVELP_UNFEASIBLE    = -1, \/\/!< problem is unfeasible (there are no points that satisfy all the constraints imposed)$/;"	e	enum:cv::SolveLPResult
SOLVEPNP_DLS	calib3d.hpp	/^       SOLVEPNP_DLS       = 3, \/\/ Joel A. Hesch and Stergios I. Roumeliotis. "A Direct Least-Squares (DLS) Method for PnP"$/;"	e	enum:cv::__anon44
SOLVEPNP_EPNP	calib3d.hpp	/^       SOLVEPNP_EPNP      = 1, \/\/ F.Moreno-Noguer, V.Lepetit and P.Fua "EPnP: Efficient Perspective-n-Point Camera Pose Estimation"$/;"	e	enum:cv::__anon44
SOLVEPNP_ITERATIVE	calib3d.hpp	/^enum { SOLVEPNP_ITERATIVE = 0,$/;"	e	enum:cv::__anon44
SOLVEPNP_P3P	calib3d.hpp	/^       SOLVEPNP_P3P       = 2, \/\/ X.S. Gao, X.-R. Hou, J. Tang, H.-F. Chang; "Complete Solution Classification for the Perspective-Three-Point Problem"$/;"	e	enum:cv::__anon44
SOLVEPNP_UPNP	calib3d.hpp	/^       SOLVEPNP_UPNP      = 4  \/\/ A.Penate-Sanchez, J.Andrade-Cetto, F.Moreno-Noguer. "Exhaustive Linearization for Robust Camera Pose and Focal Length Estimation"$/;"	e	enum:cv::__anon44
SORT_ASCENDING	core.hpp	/^                 SORT_ASCENDING    = 0, \/\/!< each matrix row is sorted in the ascending$/;"	e	enum:cv::SortFlags
SORT_DESCENDING	core.hpp	/^                 SORT_DESCENDING   = 16 \/\/!< each matrix row is sorted in the$/;"	e	enum:cv::SortFlags
SORT_EVERY_COLUMN	core.hpp	/^                 SORT_EVERY_COLUMN = 1, \/\/!< each matrix column is sorted$/;"	e	enum:cv::SortFlags
SORT_EVERY_ROW	core.hpp	/^enum SortFlags { SORT_EVERY_ROW    = 0, \/\/!< each matrix row is sorted independently$/;"	e	enum:cv::SortFlags
SQR	cudalegacy/NCV.hpp	1023;"	d
STARTED	calib3d/calib3d_c.h	/^    enum { DONE=0, STARTED=1, CALC_J=2, CHECK_ERR=3 };$/;"	e	enum:CvLevMarq::__anon55
START_AUTO_STEP	ml.hpp	/^    enum {START_E_STEP=1, START_M_STEP=2, START_AUTO_STEP=0};$/;"	e	enum:cv::ml::EM::__anon294
START_E_STEP	ml.hpp	/^    enum {START_E_STEP=1, START_M_STEP=2, START_AUTO_STEP=0};$/;"	e	enum:cv::ml::EM::__anon294
START_M_STEP	ml.hpp	/^    enum {START_E_STEP=1, START_M_STEP=2, START_AUTO_STEP=0};$/;"	e	enum:cv::ml::EM::__anon294
STD_BOOL_VECTOR	core/mat.hpp	/^        STD_BOOL_VECTOR   =12 << KIND_SHIFT$/;"	e	enum:cv::_InputArray::__anon135
STD_VECTOR	core/mat.hpp	/^        STD_VECTOR        = 3 << KIND_SHIFT,$/;"	e	enum:cv::_InputArray::__anon135
STD_VECTOR_MAT	core/mat.hpp	/^        STD_VECTOR_MAT    = 5 << KIND_SHIFT,$/;"	e	enum:cv::_InputArray::__anon135
STD_VECTOR_UMAT	core/mat.hpp	/^        STD_VECTOR_UMAT   =11 << KIND_SHIFT,$/;"	e	enum:cv::_InputArray::__anon135
STD_VECTOR_VECTOR	core/mat.hpp	/^        STD_VECTOR_VECTOR = 4 << KIND_SHIFT,$/;"	e	enum:cv::_InputArray::__anon135
STR	core/persistence.hpp	/^        STR       = 3, \/\/!< text string in UTF-8 encoding$/;"	e	enum:cv::FileNode::Type
STRIDE	core/cuda/warp.hpp	/^            STRIDE        = WARP_SIZE$/;"	e	enum:cv::cuda::device::Warp::__anon244
STRING	core.hpp	/^    enum { INT=0, BOOLEAN=1, REAL=2, STRING=3, MAT=4, MAT_VECTOR=5, ALGORITHM=6, FLOAT=7,$/;"	e	enum:cv::Param::__anon404
STRING	core/persistence.hpp	/^        STRING    = STR, \/\/!< synonym for STR$/;"	e	enum:cv::FileNode::Type
SUBMATRIX_FLAG	core/mat.hpp	/^    enum { MAGIC_VAL  = 0x42FF0000, AUTO_STEP = 0, CONTINUOUS_FLAG = CV_MAT_CONT_FLAG, SUBMATRIX_FLAG = CV_SUBMAT_FLAG };$/;"	e	enum:cv::Mat::__anon138
SUBMATRIX_FLAG	core/mat.hpp	/^    enum { MAGIC_VAL  = 0x42FF0000, AUTO_STEP = 0, CONTINUOUS_FLAG = CV_MAT_CONT_FLAG, SUBMATRIX_FLAG = CV_SUBMAT_FLAG };$/;"	e	enum:cv::UMat::__anon140
SUB_BEGIN	cudalegacy/NCV.hpp	1019;"	d
SUB_CALL	cudalegacy/NCV.hpp	1021;"	d
SUB_END	cudalegacy/NCV.hpp	1020;"	d
SUCCEED	ts/ts_gtest.h	19363;"	d
SUMMARY	ts.hpp	/^        SUMMARY=1 << SUMMARY_IDX,$/;"	e	enum:cvtest::TS::__anon25
SUMMARY_IDX	ts.hpp	/^        SUMMARY_IDX=0,$/;"	e	enum:cvtest::TS::__anon25
SVD	core.hpp	/^class CV_EXPORTS SVD$/;"	c	namespace:cv
SVD	core/operations.hpp	/^inline SVD::SVD( InputArray m, int flags ) { operator ()(m, flags); }$/;"	f	class:cv::SVD
SVD	core/operations.hpp	/^inline SVD::SVD() {}$/;"	f	class:cv::SVD
SVM	ml.hpp	/^class CV_EXPORTS_W SVM : public StatModel$/;"	c	namespace:cv::ml
SVMCapabilities	core/opencl/opencl_svm.hpp	/^    SVMCapabilities(int capabilities = 0) : value_(capabilities) { }$/;"	f	struct:cv::ocl::svm::SVMCapabilities
SVMCapabilities	core/opencl/opencl_svm.hpp	/^struct SVMCapabilities$/;"	s	namespace:cv::ocl::svm
SVMFunctions	core/opencl/opencl_svm.hpp	/^    inline SVMFunctions()$/;"	f	struct:cv::ocl::svm::SVMFunctions
SVMFunctions	core/opencl/opencl_svm.hpp	/^struct SVMFunctions$/;"	s	namespace:cv::ocl::svm
SVM_ATOMICS	core/opencl/opencl_svm.hpp	/^        SVM_ATOMICS = (1 << 3),$/;"	e	enum:cv::ocl::svm::SVMCapabilities::Value
SVM_COARSE_GRAIN_BUFFER	core/opencl/opencl_svm.hpp	/^        SVM_COARSE_GRAIN_BUFFER = (1 << 0),$/;"	e	enum:cv::ocl::svm::SVMCapabilities::Value
SVM_FINE_GRAIN_BUFFER	core/opencl/opencl_svm.hpp	/^        SVM_FINE_GRAIN_BUFFER = (1 << 1),$/;"	e	enum:cv::ocl::svm::SVMCapabilities::Value
SVM_FINE_GRAIN_SYSTEM	core/opencl/opencl_svm.hpp	/^        SVM_FINE_GRAIN_SYSTEM = (1 << 2),$/;"	e	enum:cv::ocl::svm::SVMCapabilities::Value
SZ_ALL	ts/ts_perf.hpp	68;"	d
SZ_ALL_GA	ts/ts_perf.hpp	65;"	d
SZ_ALL_HD	ts/ts_perf.hpp	66;"	d
SZ_ALL_SMALL	ts/ts_perf.hpp	67;"	d
SZ_ALL_VGA	ts/ts_perf.hpp	64;"	d
SZ_TYPICAL	ts/ts_perf.hpp	69;"	d
SampleTypes	ml.hpp	/^enum SampleTypes$/;"	g	namespace:cv::ml
SatCastHelper	core/cuda/vec_math.hpp	/^    template <typename VecD> struct SatCastHelper<1, VecD>$/;"	s	namespace:cv::cuda::device::vec_math_detail
SatCastHelper	core/cuda/vec_math.hpp	/^    template <typename VecD> struct SatCastHelper<2, VecD>$/;"	s	namespace:cv::cuda::device::vec_math_detail
SatCastHelper	core/cuda/vec_math.hpp	/^    template <typename VecD> struct SatCastHelper<3, VecD>$/;"	s	namespace:cv::cuda::device::vec_math_detail
SatCastHelper	core/cuda/vec_math.hpp	/^    template <typename VecD> struct SatCastHelper<4, VecD>$/;"	s	namespace:cv::cuda::device::vec_math_detail
SatCastHelper	cudev/util/vec_math.hpp	/^    template <typename VecD> struct SatCastHelper<1, VecD>$/;"	s	namespace:cv::cudev::vec_math_detail
SatCastHelper	cudev/util/vec_math.hpp	/^    template <typename VecD> struct SatCastHelper<2, VecD>$/;"	s	namespace:cv::cudev::vec_math_detail
SatCastHelper	cudev/util/vec_math.hpp	/^    template <typename VecD> struct SatCastHelper<3, VecD>$/;"	s	namespace:cv::cudev::vec_math_detail
SatCastHelper	cudev/util/vec_math.hpp	/^    template <typename VecD> struct SatCastHelper<4, VecD>$/;"	s	namespace:cv::cudev::vec_math_detail
SavedIndexParams	flann/flann_base.hpp	/^    SavedIndexParams(cv::String filename)$/;"	f	struct:cvflann::SavedIndexParams
SavedIndexParams	flann/flann_base.hpp	/^struct SavedIndexParams : public IndexParams$/;"	s	namespace:cvflann
SavedIndexParams	flann/miniflann.hpp	/^struct CV_EXPORTS SavedIndexParams : public IndexParams$/;"	s	namespace:cv::flann
Scalar	core/types.hpp	/^typedef Scalar_<double> Scalar;$/;"	t	namespace:cv
Scalar_	core/types.hpp	/^Scalar_<_Tp>::Scalar_()$/;"	f	class:cv::Scalar_
Scalar_	core/types.hpp	/^Scalar_<_Tp>::Scalar_(_Tp v0)$/;"	f	class:cv::Scalar_
Scalar_	core/types.hpp	/^Scalar_<_Tp>::Scalar_(_Tp v0, _Tp v1, _Tp v2, _Tp v3)$/;"	f	class:cv::Scalar_
Scalar_	core/types.hpp	/^Scalar_<_Tp>::Scalar_(const Vec<_Tp2, cn>& v)$/;"	f	class:cv::Scalar_
Scalar_	core/types.hpp	/^template<typename _Tp> class Scalar_ : public Vec<_Tp, 4>$/;"	c	namespace:cv
ScanKind	core/cuda/scan.hpp	/^    enum ScanKind { EXCLUSIVE = 0,  INCLUSIVE = 1 };$/;"	g	namespace:cv::cuda::device
ScharrXPtr	cudev/ptr2d/deriv.hpp	/^template <class SrcPtr> struct ScharrXPtr$/;"	s	namespace:cv::cudev
ScharrXPtrSz	cudev/ptr2d/deriv.hpp	/^template <class SrcPtr> struct ScharrXPtrSz : ScharrXPtr<SrcPtr>$/;"	s	namespace:cv::cudev
ScharrYPtr	cudev/ptr2d/deriv.hpp	/^template <class SrcPtr> struct ScharrYPtr$/;"	s	namespace:cv::cudev
ScharrYPtrSz	cudev/ptr2d/deriv.hpp	/^template <class SrcPtr> struct ScharrYPtrSz : ScharrYPtr<SrcPtr>$/;"	s	namespace:cv::cudev
ScopedTrace	ts/ts_gtest.h	/^class GTEST_API_ ScopedTrace {$/;"	c	namespace:testing::internal
ScoreIndexPair	flann/lsh_index.h	/^    typedef std::pair<float, unsigned int> ScoreIndexPair;$/;"	t	class:cvflann::LshIndex
SeamFinder	stitching/detail/seam_finders.hpp	/^class CV_EXPORTS SeamFinder$/;"	c	namespace:cv::detail
SearchParams	flann/miniflann.hpp	/^struct CV_EXPORTS SearchParams : public IndexParams$/;"	s	namespace:cv::flann
SearchParams	flann/params.h	/^    SearchParams(int checks = 32, float eps = 0, bool sorted = true )$/;"	f	struct:cvflann::SearchParams
SearchParams	flann/params.h	/^struct SearchParams : public IndexParams$/;"	s	namespace:cvflann
Select	core/cuda/detail/type_traits_detail.hpp	/^        template <bool, typename T1, typename T2> struct Select { typedef T1 type; };$/;"	s	namespace:cv::cuda::device::type_traits_detail
Select	core/cuda/detail/type_traits_detail.hpp	/^        template <typename T1, typename T2> struct Select<false, T1, T2> { typedef T2 type; };$/;"	s	namespace:cv::cuda::device::type_traits_detail
SelectIf	cudev/util/detail/type_traits.hpp	/^        typedef typename SelectIf<sizeof(A) >= sizeof(B), A, B>::type type;$/;"	t	struct:cv::cudev::type_traits_detail::LargerDepth
SelectIf	cudev/util/detail/type_traits.hpp	/^    template <bool, typename ThenType, typename ElseType> struct SelectIf$/;"	s	namespace:cv::cudev::type_traits_detail
SelectIf	cudev/util/detail/type_traits.hpp	/^    template <typename ThenType, typename ElseType> struct SelectIf<false, ThenType, ElseType>$/;"	s	namespace:cv::cudev::type_traits_detail
SelectIf	cudev/util/type_traits.hpp	/^template <bool, typename ThenType, typename ElseType> struct SelectIf$/;"	s	namespace:cv::cudev
SelectIf	cudev/util/type_traits.hpp	/^template <typename ThenType, typename ElseType> struct SelectIf<false, ThenType, ElseType>$/;"	s	namespace:cv::cudev
Seq	core/core_c.h	/^template<typename _Tp> class Seq$/;"	c	namespace:cv
Seq	core/core_c.h	/^template<typename _Tp> inline Seq<_Tp>::Seq( MemStorage& storage,$/;"	f	class:cv::Seq
Seq	core/core_c.h	/^template<typename _Tp> inline Seq<_Tp>::Seq( const CvSeq* _seq ) : seq((CvSeq*)_seq)$/;"	f	class:cv::Seq
Seq	core/core_c.h	/^template<typename _Tp> inline Seq<_Tp>::Seq() : seq(0) {}$/;"	f	class:cv::Seq
SeqIterator	core/core_c.h	/^template<typename _Tp> class SeqIterator : public CvSeqReader$/;"	c	namespace:cv
SeqIterator	core/core_c.h	/^template<typename _Tp> inline SeqIterator<_Tp>::SeqIterator()$/;"	f	class:cv::SeqIterator
SeqIterator	core/core_c.h	/^template<typename _Tp> inline SeqIterator<_Tp>::SeqIterator(const Seq<_Tp>& _seq, bool seekEnd)$/;"	f	class:cv::SeqIterator
SeqReader	core/persistence.hpp	/^    struct SeqReader$/;"	s	class:cv::FileNodeIterator
Set	ts/ts_gtest.h	/^  void Set(const FilePath& rhs) {$/;"	f	class:testing::internal::FilePath
SetIpl	core/wimage.hpp	/^    void SetIpl(IplImage* image) {$/;"	f	class:cv::WImage
SetIpl	core/wimage.hpp	/^    void SetIpl(IplImage* image) {$/;"	f	class:cv::WImageC
SetIpl	core/wimage.hpp	/^    void SetIpl(IplImage* img) {$/;"	f	class:cv::WImageBuffer
SetIpl	core/wimage.hpp	/^    void SetIpl(IplImage* img) {$/;"	f	class:cv::WImageBufferC
SetParam	ts/ts_gtest.h	/^  static void SetParam(const ParamType* parameter) {$/;"	f	class:testing::WithParamInterface
SetUp	ts/ts_gtest.h	/^  virtual void SetUp() {}$/;"	f	class:testing::Environment
SetUpTestCase	ts/ts_gtest.h	/^  static void SetUpTestCase() {}$/;"	f	class:testing::Test
SetUpTestCaseFunc	ts/ts_gtest.h	/^  typedef internal::SetUpTestCaseFunc SetUpTestCaseFunc;$/;"	t	class:testing::Test
SetUpTestCaseFunc	ts/ts_gtest.h	/^typedef void (*SetUpTestCaseFunc)();$/;"	t	namespace:testing::internal
SetValue	ts/ts_gtest.h	/^  void SetValue(const std::string& new_value) {$/;"	f	class:testing::TestProperty
SetZero	core/wimage.hpp	/^    void SetZero() { cvSetZero(image_); }$/;"	f	class:cv::WImage
Setup	ts/ts_gtest.h	/^  virtual Setup_should_be_spelled_SetUp* Setup() { return NULL; }$/;"	f	class:testing::Environment
Setup	ts/ts_gtest.h	/^  virtual Setup_should_be_spelled_SetUp* Setup() { return NULL; }$/;"	f	class:testing::Test
Setup_should_be_spelled_SetUp	ts/ts_gtest.h	/^  struct Setup_should_be_spelled_SetUp {};$/;"	s	class:testing::Environment
Setup_should_be_spelled_SetUp	ts/ts_gtest.h	/^  struct Setup_should_be_spelled_SetUp {};$/;"	s	class:testing::Test
ShadingValues	viz/widgets.hpp	/^        enum ShadingValues$/;"	g	namespace:cv::viz
ShapeContextDistanceExtractor	shape/shape_distance.hpp	/^class CV_EXPORTS_W ShapeContextDistanceExtractor : public ShapeDistanceExtractor$/;"	c	namespace:cv
ShapeDistanceExtractor	shape/shape_distance.hpp	/^class CV_EXPORTS_W ShapeDistanceExtractor : public Algorithm$/;"	c	namespace:cv
ShapeMatchModes	imgproc/types_c.h	/^enum ShapeMatchModes$/;"	g
ShapeTransformer	shape/shape_transformer.hpp	/^class CV_EXPORTS_W ShapeTransformer : public Algorithm$/;"	c	namespace:cv
ShapeUp	ts/ts_perf.hpp	/^    void ShapeUp()$/;"	f	struct:perf::ImplData
ShiftDispatcher	core/cuda/functional.hpp	/^        template <typename Func> struct ShiftDispatcher<Func, false>$/;"	s	namespace:cv::cuda::device::functional_detail
ShiftDispatcher	core/cuda/functional.hpp	/^        template <typename Func> struct ShiftDispatcher<Func, true>$/;"	s	namespace:cv::cuda::device::functional_detail
ShouldRunTest	ts/ts_gtest.h	/^  static bool ShouldRunTest(const TestInfo* test_info) {$/;"	f	class:testing::TestCase
SignAndMagnitudeToBiased	ts/ts_gtest.h	/^  static Bits SignAndMagnitudeToBiased(const Bits &sam) {$/;"	f	class:testing::internal::FloatingPoint
SimilarRects	objdetect.hpp	/^    SimilarRects(double _eps) : eps(_eps) {}$/;"	f	class:cv::SimilarRects
SimilarRects	objdetect.hpp	/^class CV_EXPORTS SimilarRects$/;"	c	namespace:cv
SimpleBlobDetector	features2d.hpp	/^class CV_EXPORTS_W SimpleBlobDetector : public Feature2D$/;"	c	namespace:cv
SingleMask	core/cuda/utility.hpp	/^        __host__ __device__ __forceinline__ SingleMask(const SingleMask& mask_): mask(mask_.mask){}$/;"	f	struct:cv::cuda::device::SingleMask
SingleMask	core/cuda/utility.hpp	/^        explicit __host__ __device__ __forceinline__ SingleMask(PtrStepb mask_) : mask(mask_) {}$/;"	f	struct:cv::cuda::device::SingleMask
SingleMask	core/cuda/utility.hpp	/^    struct SingleMask$/;"	s	namespace:cv::cuda::device
SingleMaskChannels	core/cuda/utility.hpp	/^        __host__ __device__ __forceinline__ SingleMaskChannels(PtrStepb mask_, int channels_)$/;"	f	struct:cv::cuda::device::SingleMaskChannels
SingleMaskChannels	core/cuda/utility.hpp	/^        __host__ __device__ __forceinline__ SingleMaskChannels(const SingleMaskChannels& mask_)$/;"	f	struct:cv::cuda::device::SingleMaskChannels
SingleMaskChannels	core/cuda/utility.hpp	/^    struct SingleMaskChannels$/;"	s	namespace:cv::cuda::device
SingleMaskChannels	cudev/ptr2d/mask.hpp	/^template <class MaskPtr> struct SingleMaskChannels$/;"	s	namespace:cv::cudev
SingleMaskChannelsSz	cudev/ptr2d/mask.hpp	/^template <class MaskPtr> struct SingleMaskChannelsSz : SingleMaskChannels<MaskPtr>$/;"	s	namespace:cv::cudev
SinglePolicy	flann/any.h	/^class SinglePolicy$/;"	c	namespace:cvflann::anyimpl
Size	core/types.hpp	/^typedef Size2i Size;$/;"	t	namespace:cv
Size2d	core/types.hpp	/^typedef Size_<double> Size2d;$/;"	t	namespace:cv
Size2f	core/types.hpp	/^typedef Size_<float> Size2f;$/;"	t	namespace:cv
Size2i	core/types.hpp	/^typedef Size_<int> Size2i;$/;"	t	namespace:cv
SizeVector	ts/ts_perf.hpp	/^    typedef std::vector<std::pair<int, cv::Size> > SizeVector;$/;"	t	class:perf::TestBase
Size_	core/types.hpp	/^Size_<_Tp>::Size_()$/;"	f	class:cv::Size_
Size_	core/types.hpp	/^Size_<_Tp>::Size_(_Tp _width, _Tp _height)$/;"	f	class:cv::Size_
Size_	core/types.hpp	/^Size_<_Tp>::Size_(const Point_<_Tp>& pt)$/;"	f	class:cv::Size_
Size_	core/types.hpp	/^Size_<_Tp>::Size_(const Size_& sz)$/;"	f	class:cv::Size_
Size_	core/types.hpp	/^template<typename _Tp> class Size_$/;"	c	namespace:cv
Size_MatDepth	ts/ts_perf.hpp	/^typedef TestBaseWithParam<Size_MatDepth_t> Size_MatDepth;$/;"	t	namespace:perf
Size_MatDepth_t	ts/ts_perf.hpp	/^typedef std::tr1::tuple<cv::Size, MatDepth> Size_MatDepth_t;$/;"	t	namespace:perf
Size_MatType	ts/ts_perf.hpp	/^typedef TestBaseWithParam<Size_MatType_t> Size_MatType;$/;"	t	namespace:perf
Size_MatType_t	ts/ts_perf.hpp	/^typedef std::tr1::tuple<cv::Size, MatType> Size_MatType_t;$/;"	t	namespace:perf
SkipComma	ts/ts_gtest.h	/^inline const char* SkipComma(const char* str) {$/;"	f	namespace:testing::internal
SleepMilliseconds	ts/ts_gtest.h	/^inline void SleepMilliseconds(int n) {$/;"	f	namespace:std::tr1
SmoothMethod_c	imgproc/types_c.h	/^enum SmoothMethod_c$/;"	g
SobelXPtr	cudev/ptr2d/deriv.hpp	/^template <class SrcPtr> struct SobelXPtr$/;"	s	namespace:cv::cudev
SobelXPtrSz	cudev/ptr2d/deriv.hpp	/^template <class SrcPtr> struct SobelXPtrSz : SobelXPtr<SrcPtr>$/;"	s	namespace:cv::cudev
SobelYPtr	cudev/ptr2d/deriv.hpp	/^template <class SrcPtr> struct SobelYPtr$/;"	s	namespace:cv::cudev
SobelYPtrSz	cudev/ptr2d/deriv.hpp	/^template <class SrcPtr> struct SobelYPtrSz : SobelYPtr<SrcPtr>$/;"	s	namespace:cv::cudev
SolveLPResult	core/optim.hpp	/^enum SolveLPResult$/;"	g	namespace:cv
SortFlags	core.hpp	/^enum SortFlags { SORT_EVERY_ROW    = 0, \/\/!< each matrix row is sorted independently$/;"	g	namespace:cv
SortScoreIndexPairOnSecond	flann/lsh_index.h	/^    struct SortScoreIndexPairOnSecond$/;"	s	class:cvflann::LshIndex
SparseMat	core/base.hpp	/^class CV_EXPORTS SparseMat;$/;"	m	namespace:cv	typeref:class:cv::CV_EXPORTS
SparseMat	core/mat.hpp	/^class CV_EXPORTS SparseMat$/;"	c	namespace:cv
SparseMat	core/mat.inl.hpp	/^SparseMat::SparseMat()$/;"	f	class:cv::SparseMat
SparseMat	core/mat.inl.hpp	/^SparseMat::SparseMat(const SparseMat& m)$/;"	f	class:cv::SparseMat
SparseMat	core/mat.inl.hpp	/^SparseMat::SparseMat(int _dims, const int* _sizes, int _type)$/;"	f	class:cv::SparseMat
SparseMatConstIterator	core/base.hpp	/^class CV_EXPORTS SparseMatConstIterator;$/;"	m	namespace:cv	typeref:class:cv::CV_EXPORTS
SparseMatConstIterator	core/mat.hpp	/^class CV_EXPORTS SparseMatConstIterator$/;"	c	namespace:cv
SparseMatConstIterator	core/mat.inl.hpp	/^SparseMatConstIterator::SparseMatConstIterator()$/;"	f	class:cv::SparseMatConstIterator
SparseMatConstIterator	core/mat.inl.hpp	/^SparseMatConstIterator::SparseMatConstIterator(const SparseMatConstIterator& it)$/;"	f	class:cv::SparseMatConstIterator
SparseMatConstIterator_	core/mat.hpp	/^template<typename _Tp> class SparseMatConstIterator_ : public SparseMatConstIterator$/;"	c	namespace:cv
SparseMatConstIterator_	core/mat.inl.hpp	/^SparseMatConstIterator_<_Tp>::SparseMatConstIterator_()$/;"	f	class:cv::SparseMatConstIterator_
SparseMatConstIterator_	core/mat.inl.hpp	/^SparseMatConstIterator_<_Tp>::SparseMatConstIterator_(const SparseMat* _m)$/;"	f	class:cv::SparseMatConstIterator_
SparseMatConstIterator_	core/mat.inl.hpp	/^SparseMatConstIterator_<_Tp>::SparseMatConstIterator_(const SparseMatConstIterator_<_Tp>& it)$/;"	f	class:cv::SparseMatConstIterator_
SparseMatConstIterator_	core/mat.inl.hpp	/^SparseMatConstIterator_<_Tp>::SparseMatConstIterator_(const SparseMat_<_Tp>* _m)$/;"	f	class:cv::SparseMatConstIterator_
SparseMatIterator	core/base.hpp	/^class CV_EXPORTS SparseMatIterator;$/;"	m	namespace:cv	typeref:class:cv::CV_EXPORTS
SparseMatIterator	core/mat.hpp	/^class CV_EXPORTS SparseMatIterator : public SparseMatConstIterator$/;"	c	namespace:cv
SparseMatIterator	core/mat.inl.hpp	/^SparseMatIterator::SparseMatIterator()$/;"	f	class:cv::SparseMatIterator
SparseMatIterator	core/mat.inl.hpp	/^SparseMatIterator::SparseMatIterator(SparseMat* _m)$/;"	f	class:cv::SparseMatIterator
SparseMatIterator	core/mat.inl.hpp	/^SparseMatIterator::SparseMatIterator(const SparseMatIterator& it)$/;"	f	class:cv::SparseMatIterator
SparseMatIterator_	core/mat.hpp	/^template<typename _Tp> class SparseMatIterator_ : public SparseMatConstIterator_<_Tp>$/;"	c	namespace:cv
SparseMatIterator_	core/mat.inl.hpp	/^SparseMatIterator_<_Tp>::SparseMatIterator_()$/;"	f	class:cv::SparseMatIterator_
SparseMatIterator_	core/mat.inl.hpp	/^SparseMatIterator_<_Tp>::SparseMatIterator_(SparseMat* _m)$/;"	f	class:cv::SparseMatIterator_
SparseMatIterator_	core/mat.inl.hpp	/^SparseMatIterator_<_Tp>::SparseMatIterator_(SparseMat_<_Tp>* _m)$/;"	f	class:cv::SparseMatIterator_
SparseMatIterator_	core/mat.inl.hpp	/^SparseMatIterator_<_Tp>::SparseMatIterator_(const SparseMatIterator_<_Tp>& it)$/;"	f	class:cv::SparseMatIterator_
SparseMat_	core/mat.hpp	/^template<typename _Tp> class SparseMat_ : public SparseMat$/;"	c	namespace:cv
SparseMat_	core/mat.inl.hpp	/^SparseMat_<_Tp>::SparseMat_()$/;"	f	class:cv::SparseMat_
SparseMat_	core/mat.inl.hpp	/^SparseMat_<_Tp>::SparseMat_(const Mat& m)$/;"	f	class:cv::SparseMat_
SparseMat_	core/mat.inl.hpp	/^SparseMat_<_Tp>::SparseMat_(const SparseMat& m)$/;"	f	class:cv::SparseMat_
SparseMat_	core/mat.inl.hpp	/^SparseMat_<_Tp>::SparseMat_(const SparseMat_<_Tp>& m)$/;"	f	class:cv::SparseMat_
SparseMat_	core/mat.inl.hpp	/^SparseMat_<_Tp>::SparseMat_(int _dims, const int* _sizes)$/;"	f	class:cv::SparseMat_
SparseOpticalFlow	cudaoptflow.hpp	/^class CV_EXPORTS SparseOpticalFlow : public Algorithm$/;"	c	namespace:cv::cuda
SparsePyrLKOpticalFlow	cudaoptflow.hpp	/^class CV_EXPORTS SparsePyrLKOpticalFlow : public SparseOpticalFlow$/;"	c	namespace:cv::cuda
SparsePyrLkOptFlowEstimator	videostab/optical_flow.hpp	/^class CV_EXPORTS SparsePyrLkOptFlowEstimator$/;"	c	namespace:cv::videostab
SparsePyrLkOptFlowEstimatorGpu	videostab/optical_flow.hpp	/^class CV_EXPORTS SparsePyrLkOptFlowEstimatorGpu$/;"	c	namespace:cv::videostab
SpeedLevel	flann/lsh_table.h	/^    enum SpeedLevel$/;"	g	class:cvflann::lsh::LshTable
SphericalPortraitProjector	stitching/detail/warpers.hpp	/^struct SphericalPortraitProjector : ProjectorBase$/;"	s	namespace:cv::detail
SphericalPortraitWarper	stitching/detail/warpers.hpp	/^    SphericalPortraitWarper(float scale) { projector_.scale = scale; }$/;"	f	class:cv::detail::SphericalPortraitWarper
SphericalPortraitWarper	stitching/detail/warpers.hpp	/^class CV_EXPORTS SphericalPortraitWarper : public RotationWarperBase<SphericalPortraitProjector>$/;"	c	namespace:cv::detail
SphericalProjector	stitching/detail/warpers.hpp	/^struct CV_EXPORTS SphericalProjector : ProjectorBase$/;"	s	namespace:cv::detail
SphericalWarper	stitching/detail/warpers.hpp	/^    SphericalWarper(float scale) { projector_.scale = scale; }$/;"	f	class:cv::detail::SphericalWarper
SphericalWarper	stitching/detail/warpers.hpp	/^class CV_EXPORTS SphericalWarper : public RotationWarperBase<SphericalProjector>$/;"	c	namespace:cv::detail
SphericalWarper	stitching/warpers.hpp	/^class SphericalWarper: public WarperCreator$/;"	c	namespace:cv
SphericalWarperGpu	stitching/detail/warpers.hpp	/^    SphericalWarperGpu(float scale) : SphericalWarper(scale) {}$/;"	f	class:cv::detail::SphericalWarperGpu
SphericalWarperGpu	stitching/detail/warpers.hpp	/^class CV_EXPORTS SphericalWarperGpu : public SphericalWarper$/;"	c	namespace:cv::detail
SphericalWarperGpu	stitching/warpers.hpp	/^class SphericalWarperGpu: public WarperCreator$/;"	c	namespace:cv
Split	core/private.hpp	/^    typedef tbb::split Split;$/;"	t	namespace:cv
Split	ml.hpp	/^    class CV_EXPORTS Split$/;"	c	class:cv::ml::DTrees
StabilizerBase	videostab/stabilizer.hpp	/^class CV_EXPORTS StabilizerBase$/;"	c	namespace:cv::videostab
StartStopTimer	flann/timer.h	/^    StartStopTimer()$/;"	f	class:cvflann::StartStopTimer
StartStopTimer	flann/timer.h	/^class StartStopTimer$/;"	c	namespace:cvflann
Stat	ts/ts_gtest.h	/^inline int Stat(const char* path, StatStruct* buf) { return _stat(path, buf); }$/;"	f	namespace:std::tr1::posix
StatModel	ml.hpp	/^class CV_EXPORTS_W StatModel : public Algorithm$/;"	c	namespace:cv::ml
StatStruct	ts/ts_gtest.h	/^typedef struct _stat StatStruct;$/;"	t	namespace:std::tr1::posix	typeref:struct:std::tr1::posix::_stat
StaticAssertTypeEq	ts/ts_gtest.h	/^bool StaticAssertTypeEq() {$/;"	f	namespace:testing
StaticIf	core/cuda/detail/reduce.hpp	/^        template <class T1, class T2> struct StaticIf<false, T1, T2>$/;"	s	namespace:cv::cuda::device::reduce_detail
StaticIf	core/cuda/detail/reduce.hpp	/^        template <class T1, class T2> struct StaticIf<true, T1, T2>$/;"	s	namespace:cv::cuda::device::reduce_detail
StaticIf	core/cuda/detail/reduce_key_val.hpp	/^        template <class T1, class T2> struct StaticIf<false, T1, T2>$/;"	s	namespace:cv::cuda::device::reduce_key_val_detail
StaticIf	core/cuda/detail/reduce_key_val.hpp	/^        template <class T1, class T2> struct StaticIf<true, T1, T2>$/;"	s	namespace:cv::cuda::device::reduce_key_val_detail
Status	stitching.hpp	/^    enum Status$/;"	g	class:cv::Stitcher
StereoBM	calib3d.hpp	/^class CV_EXPORTS_W StereoBM : public StereoMatcher$/;"	c	namespace:cv
StereoBM	cudastereo.hpp	/^class CV_EXPORTS StereoBM : public cv::StereoBM$/;"	c	namespace:cv::cuda
StereoBeliefPropagation	cudastereo.hpp	/^class CV_EXPORTS StereoBeliefPropagation : public cv::StereoMatcher$/;"	c	namespace:cv::cuda
StereoConstantSpaceBP	cudastereo.hpp	/^class CV_EXPORTS StereoConstantSpaceBP : public cuda::StereoBeliefPropagation$/;"	c	namespace:cv::cuda
StereoMatcher	calib3d.hpp	/^class CV_EXPORTS_W StereoMatcher : public Algorithm$/;"	c	namespace:cv
StereoSGBM	calib3d.hpp	/^class CV_EXPORTS_W StereoSGBM : public StereoMatcher$/;"	c	namespace:cv
StereographicProjector	stitching/detail/warpers.hpp	/^struct CV_EXPORTS StereographicProjector : ProjectorBase$/;"	s	namespace:cv::detail
StereographicWarper	stitching/detail/warpers.hpp	/^    StereographicWarper(float scale) { projector_.scale = scale; }$/;"	f	class:cv::detail::StereographicWarper
StereographicWarper	stitching/detail/warpers.hpp	/^class CV_EXPORTS StereographicWarper : public RotationWarperBase<StereographicProjector>$/;"	c	namespace:cv::detail
StereographicWarper	stitching/warpers.hpp	/^class StereographicWarper: public WarperCreator$/;"	c	namespace:cv
Stitcher	stitching.hpp	/^class CV_EXPORTS_W Stitcher$/;"	c	namespace:cv
StrCaseCmp	ts/ts_gtest.h	/^inline int StrCaseCmp(const char* s1, const char* s2) {$/;"	f	namespace:std::tr1::posix
StrDup	ts/ts_gtest.h	/^inline char* StrDup(const char* src) { return _strdup(src); }$/;"	f	namespace:std::tr1::posix
StrDup	ts/ts_gtest.h	/^inline char* StrDup(const char* src) { return strdup(src); }$/;"	f	namespace:std::tr1::posix
StrError	ts/ts_gtest.h	/^inline const char* StrError(int errnum) { return strerror(errnum); }$/;"	f	namespace:std::tr1::posix
StrNCpy	ts/ts_gtest.h	/^inline const char* StrNCpy(char* dest, const char* src, size_t n) {$/;"	f	namespace:std::tr1::posix
Stream	core/base.hpp	/^    class CV_EXPORTS Stream;$/;"	m	namespace:cv::cuda	typeref:class:cv::cuda::CV_EXPORTS
Stream	core/cuda.hpp	/^class CV_EXPORTS Stream$/;"	c	namespace:cv::cuda
Stream	core/cuda.inl.hpp	/^Stream::Stream(const Ptr<Impl>& impl)$/;"	f	class:cv::cuda::Stream
StreamAccessor	core/cuda_stream_accessor.hpp	/^        struct StreamAccessor$/;"	s	namespace:cv::cuda
StreamCallback	core/cuda.hpp	/^    typedef void (*StreamCallback)(int status, void* userData);$/;"	t	class:cv::cuda::Stream
StreamHelper	ts/ts_gtest.h	/^  inline void StreamHelper(internal::false_type \/*is_pointer*\/,$/;"	f	class:testing::Message
StreamHelper	ts/ts_gtest.h	/^  inline void StreamHelper(internal::true_type \/*is_pointer*\/, T* pointer) {$/;"	f	class:testing::Message
StreamableToString	ts/ts_gtest.h	/^std::string StreamableToString(const T& streamable) {$/;"	f	namespace:testing::internal
String	core/cvstd.hpp	/^String::String()$/;"	f	class:cv::String
String	core/cvstd.hpp	/^String::String(Iterator first, Iterator last)$/;"	f	class:cv::String
String	core/cvstd.hpp	/^String::String(const String& str)$/;"	f	class:cv::String
String	core/cvstd.hpp	/^String::String(const String& str, size_t pos, size_t len)$/;"	f	class:cv::String
String	core/cvstd.hpp	/^String::String(const char* first, const char* last)$/;"	f	class:cv::String
String	core/cvstd.hpp	/^String::String(const char* s)$/;"	f	class:cv::String
String	core/cvstd.hpp	/^String::String(const char* s, size_t n)$/;"	f	class:cv::String
String	core/cvstd.hpp	/^String::String(size_t n, char c)$/;"	f	class:cv::String
String	core/cvstd.hpp	/^class CV_EXPORTS String$/;"	c	namespace:cv
String	core/cvstd.inl.hpp	/^String::String(const std::string& str)$/;"	f	class:cv::String
String	core/cvstd.inl.hpp	/^String::String(const std::string& str, size_t pos, size_t len)$/;"	f	class:cv::String
String	core/persistence.hpp	/^inline String::String(const FileNode& fn): cstr_(0), len_(0) { read(fn, *this, *this); }$/;"	f	class:cv::String
String	ts/ts_gtest.h	/^class GTEST_API_ String {$/;"	c	namespace:testing::internal
Strings	ts/ts_gtest.h	/^typedef ::std::vector<string> Strings;$/;"	t	namespace:testing::internal
StsAssert	core/base.hpp	/^    StsAssert=                 -215, \/\/!< assertion failed$/;"	e	enum:cv::Error::Code
StsAutoTrace	core/base.hpp	/^    StsAutoTrace=               -8,  \/\/!< tracing$/;"	e	enum:cv::Error::Code
StsBackTrace	core/base.hpp	/^    StsBackTrace=               -1,  \/\/!< pseudo error for back trace$/;"	e	enum:cv::Error::Code
StsBadArg	core/base.hpp	/^    StsBadArg=                  -5,  \/\/!< function arg\/param is bad$/;"	e	enum:cv::Error::Code
StsBadFlag	core/base.hpp	/^    StsBadFlag=                -206, \/\/!< flag is wrong or not supported$/;"	e	enum:cv::Error::Code
StsBadFunc	core/base.hpp	/^    StsBadFunc=                 -6,  \/\/!< unsupported function$/;"	e	enum:cv::Error::Code
StsBadMask	core/base.hpp	/^    StsBadMask=                -208, \/\/!< bad format of mask (neither 8uC1 nor 8sC1)$/;"	e	enum:cv::Error::Code
StsBadMemBlock	core/base.hpp	/^    StsBadMemBlock=            -214, \/\/!< an allocated block has been corrupted$/;"	e	enum:cv::Error::Code
StsBadPoint	core/base.hpp	/^    StsBadPoint=               -207, \/\/!< bad CvPoint$/;"	e	enum:cv::Error::Code
StsBadSize	core/base.hpp	/^    StsBadSize=                -201, \/\/!< the input\/output structure size is incorrect$/;"	e	enum:cv::Error::Code
StsDivByZero	core/base.hpp	/^    StsDivByZero=              -202, \/\/!< division by zero$/;"	e	enum:cv::Error::Code
StsError	core/base.hpp	/^    StsError=                   -2,  \/\/!< unknown \/unspecified error$/;"	e	enum:cv::Error::Code
StsFilterOffsetErr	core/base.hpp	/^    StsFilterOffsetErr=        -31,  \/\/!< incorrect filter ofset value$/;"	e	enum:cv::Error::Code
StsFilterStructContentErr	core/base.hpp	/^    StsFilterStructContentErr= -29,  \/\/!< incorr. filter structure content$/;"	e	enum:cv::Error::Code
StsInplaceNotSupported	core/base.hpp	/^    StsInplaceNotSupported=    -203, \/\/!< in-place operation is not supported$/;"	e	enum:cv::Error::Code
StsInternal	core/base.hpp	/^    StsInternal=                -3,  \/\/!< internal error (bad state)$/;"	e	enum:cv::Error::Code
StsKernelStructContentErr	core/base.hpp	/^    StsKernelStructContentErr= -30,  \/\/!< incorr. transform kernel content$/;"	e	enum:cv::Error::Code
StsNoConv	core/base.hpp	/^    StsNoConv=                  -7,  \/\/!< iter. didn't converge$/;"	e	enum:cv::Error::Code
StsNoMem	core/base.hpp	/^    StsNoMem=                   -4,  \/\/!< insufficient memory$/;"	e	enum:cv::Error::Code
StsNotImplemented	core/base.hpp	/^    StsNotImplemented=         -213, \/\/!< the requested function\/feature is not implemented$/;"	e	enum:cv::Error::Code
StsNullPtr	core/base.hpp	/^    StsNullPtr=                -27,  \/\/!< null pointer$/;"	e	enum:cv::Error::Code
StsObjectNotFound	core/base.hpp	/^    StsObjectNotFound=         -204, \/\/!< request can't be completed$/;"	e	enum:cv::Error::Code
StsOk	core/base.hpp	/^    StsOk=                       0,  \/\/!< everithing is ok$/;"	e	enum:cv::Error::Code
StsOutOfRange	core/base.hpp	/^    StsOutOfRange=             -211, \/\/!< some of parameters are out of range$/;"	e	enum:cv::Error::Code
StsParseError	core/base.hpp	/^    StsParseError=             -212, \/\/!< invalid syntax\/structure of the parsed file$/;"	e	enum:cv::Error::Code
StsUnmatchedFormats	core/base.hpp	/^    StsUnmatchedFormats=       -205, \/\/!< formats of input\/output arrays differ$/;"	e	enum:cv::Error::Code
StsUnmatchedSizes	core/base.hpp	/^    StsUnmatchedSizes=         -209, \/\/!< sizes of input\/output structures do not match$/;"	e	enum:cv::Error::Code
StsUnsupportedFormat	core/base.hpp	/^    StsUnsupportedFormat=      -210, \/\/!< the data format\/type is not supported by the function$/;"	e	enum:cv::Error::Code
StsVecLengthErr	core/base.hpp	/^    StsVecLengthErr=           -28,  \/\/!< incorrect vector length$/;"	e	enum:cv::Error::Code
Subdiv2D	imgproc.hpp	/^class CV_EXPORTS_W Subdiv2D$/;"	c	namespace:cv
Sum	cudev/grid/reduce_to_vec.hpp	/^template <typename T> struct Sum : plus<T>$/;"	s	namespace:cv::cudev
SumExprBody	cudev/expr/reduction.hpp	/^template <class SrcPtr> struct SumExprBody$/;"	s	namespace:cv::cudev
SumReductor	cudev/grid/detail/reduce.hpp	/^        __device__ __forceinline__ SumReductor()$/;"	f	struct:cv::cudev::grid_reduce_detail::SumReductor
SumReductor	cudev/grid/detail/reduce.hpp	/^    template <typename src_type, typename work_type> struct SumReductor$/;"	s	namespace:cv::cudev::grid_reduce_detail
SuperResolution	superres.hpp	/^        class CV_EXPORTS SuperResolution : public cv::Algorithm, public FrameSource$/;"	c	namespace:cv::superres
SurfFeaturesFinder	stitching/detail/matchers.hpp	/^class CV_EXPORTS SurfFeaturesFinder : public FeaturesFinder$/;"	c	namespace:cv::detail
SurfFeaturesFinderGpu	stitching/detail/matchers.hpp	/^class CV_EXPORTS SurfFeaturesFinderGpu : public FeaturesFinder$/;"	c	namespace:cv::detail
SurfaceFormat	cudacodec.hpp	/^enum SurfaceFormat$/;"	g	namespace:cv::cudacodec
Sz_Type	ts/cuda_perf.hpp	/^    typedef perf::Size_MatType Sz_Type;$/;"	t	namespace:perf
T	cudalegacy.hpp	/^    float T;       \/\/!< A percentage value which determines when new features can be recognized as new background. (Typically 0.9).$/;"	m	struct:cv::cuda::FGDParams
T	ts/ts_gtest.h	/^  static void Print(const T (&a)[N], ::std::ostream* os) {$/;"	m	class:testing::internal::UniversalPrinter
T	ts/ts_gtest.h	/^  static void Print(const T (&value)[N], ::std::ostream* os) {$/;"	m	class:testing::internal::UniversalTersePrinter
T	ts/ts_gtest.h	/^inline bool ArrayEq(const T(&lhs)[N], const U(&rhs)[N]) {$/;"	m	namespace:testing::internal
T	ts/ts_gtest.h	/^inline void CopyArray(const T(&from)[N], U(*to)[N]) {$/;"	m	namespace:testing::internal
T	ts/ts_gtest.h	/^internal::ParamGenerator<T> ValuesIn(const T (&array)[N]);$/;"	m	namespace:testing
TAG_MASK	core/cuda/emulation.hpp	/^            enum { TAG_MASK = (1U << ( (sizeof(unsigned int) << 3) - 5U)) - 1U };$/;"	e	enum:cv::cuda::device::Emulation::smem::__anon245
TEMP	ts.hpp	/^    enum { INPUT, INPUT_OUTPUT, OUTPUT, REF_INPUT_OUTPUT, REF_OUTPUT, TEMP, MASK, MAX_ARR };$/;"	e	enum:cvtest::ArrayTest::__anon26
TEMP_COPIED_UMAT	core/mat.hpp	/^        DEVICE_COPY_OBSOLETE=4, TEMP_UMAT=8, TEMP_COPIED_UMAT=24,$/;"	e	enum:cv::UMatData::__anon137
TEMP_UMAT	core/mat.hpp	/^        DEVICE_COPY_OBSOLETE=4, TEMP_UMAT=8, TEMP_COPIED_UMAT=24,$/;"	e	enum:cv::UMatData::__anon137
TERM_EXCEPTION	ts/ts_perf.hpp	/^        TERM_EXCEPTION = 3,$/;"	e	enum:perf::performance_metrics::__anon36
TERM_INTERRUPT	ts/ts_perf.hpp	/^        TERM_INTERRUPT = 2,$/;"	e	enum:perf::performance_metrics::__anon36
TERM_ITERATIONS	ts/ts_perf.hpp	/^        TERM_ITERATIONS = 0,$/;"	e	enum:perf::performance_metrics::__anon36
TERM_SKIP_TEST	ts/ts_perf.hpp	/^        TERM_SKIP_TEST = 4, \/\/ there are some limitations and test should be skipped$/;"	e	enum:perf::performance_metrics::__anon36
TERM_TIME	ts/ts_perf.hpp	/^        TERM_TIME = 1,$/;"	e	enum:perf::performance_metrics::__anon36
TERM_UNKNOWN	ts/ts_perf.hpp	/^        TERM_UNKNOWN = -1$/;"	e	enum:perf::performance_metrics::__anon36
TEST	ts/ts_ext.hpp	13;"	d
TEST	ts/ts_ext.hpp	14;"	d
TEST	ts/ts_gtest.h	20076;"	d
TEST_CYCLE	ts/ts_perf.hpp	647;"	d
TEST_CYCLE_MULTIRUN	ts/ts_perf.hpp	648;"	d
TEST_CYCLE_N	ts/ts_perf.hpp	646;"	d
TEST_DECLARE_INPUT_PARAMETER	ts/ocl_test.hpp	308;"	d
TEST_DECLARE_OUTPUT_PARAMETER	ts/ocl_test.hpp	309;"	d
TEST_DID_NOT_DIE	ts/ts_gtest.h	/^    TEST_DID_NOT_DIE$/;"	e	enum:testing::internal::DeathTest::AbortReason
TEST_DUMP_OCL_INFO	ts.hpp	562;"	d
TEST_DUMP_OCL_INFO	ts/ts_perf.hpp	615;"	d
TEST_ENCOUNTERED_RETURN_STATEMENT	ts/ts_gtest.h	/^    TEST_ENCOUNTERED_RETURN_STATEMENT,$/;"	e	enum:testing::internal::DeathTest::AbortReason
TEST_ERROR	ml.hpp	/^    TEST_ERROR = 0,$/;"	e	enum:cv::ml::ErrorTypes
TEST_F	ts/ts_ext.hpp	38;"	d
TEST_F	ts/ts_ext.hpp	39;"	d
TEST_F	ts/ts_gtest.h	20105;"	d
TEST_P	ts/ts_ext.hpp	63;"	d
TEST_P	ts/ts_ext.hpp	64;"	d
TEST_P	ts/ts_gtest.h	17007;"	d
TEST_THREW_EXCEPTION	ts/ts_gtest.h	/^    TEST_THREW_EXCEPTION,$/;"	e	enum:testing::internal::DeathTest::AbortReason
THRESHOLD	features2d.hpp	/^        THRESHOLD = 10000, NONMAX_SUPPRESSION = 10001,$/;"	e	enum:cv::AgastFeatureDetector::__anon284
THRESHOLD	features2d.hpp	/^        THRESHOLD = 10000, NONMAX_SUPPRESSION=10001, FAST_N=10002,$/;"	e	enum:cv::FastFeatureDetector::__anon283
THRESH_BINARY	imgproc.hpp	/^    THRESH_BINARY     = 0, \/\/!< \\f[\\texttt{dst} (x,y) =  \\fork{\\texttt{maxval}}{if \\(\\texttt{src}(x,y) > \\texttt{thresh}\\)}{0}{otherwise}\\f]$/;"	e	enum:cv::ThresholdTypes
THRESH_BINARY_INV	imgproc.hpp	/^    THRESH_BINARY_INV = 1, \/\/!< \\f[\\texttt{dst} (x,y) =  \\fork{0}{if \\(\\texttt{src}(x,y) > \\texttt{thresh}\\)}{\\texttt{maxval}}{otherwise}\\f]$/;"	e	enum:cv::ThresholdTypes
THRESH_MASK	imgproc.hpp	/^    THRESH_MASK       = 7,$/;"	e	enum:cv::ThresholdTypes
THRESH_OTSU	imgproc.hpp	/^    THRESH_OTSU       = 8, \/\/!< flag, use Otsu algorithm to choose the optimal threshold value$/;"	e	enum:cv::ThresholdTypes
THRESH_TOZERO	imgproc.hpp	/^    THRESH_TOZERO     = 3, \/\/!< \\f[\\texttt{dst} (x,y) =  \\fork{\\texttt{src}(x,y)}{if \\(\\texttt{src}(x,y) > \\texttt{thresh}\\)}{0}{otherwise}\\f]$/;"	e	enum:cv::ThresholdTypes
THRESH_TOZERO_INV	imgproc.hpp	/^    THRESH_TOZERO_INV = 4, \/\/!< \\f[\\texttt{dst} (x,y) =  \\fork{0}{if \\(\\texttt{src}(x,y) > \\texttt{thresh}\\)}{\\texttt{src}(x,y)}{otherwise}\\f]$/;"	e	enum:cv::ThresholdTypes
THRESH_TRIANGLE	imgproc.hpp	/^    THRESH_TRIANGLE   = 16 \/\/!< flag, use Triangle algorithm to choose the optimal threshold value$/;"	e	enum:cv::ThresholdTypes
THRESH_TRUNC	imgproc.hpp	/^    THRESH_TRUNC      = 2, \/\/!< \\f[\\texttt{dst} (x,y) =  \\fork{\\texttt{threshold}}{if \\(\\texttt{src}(x,y) > \\texttt{thresh}\\)}{\\texttt{src}(x,y)}{otherwise}\\f]$/;"	e	enum:cv::ThresholdTypes
TLSData	core/utility.hpp	/^    inline TLSData() {}$/;"	f	class:cv::TLSData
TLSData	core/utility.hpp	/^class TLSData : protected TLSDataContainer$/;"	c	namespace:cv
TLSDataContainer	core/utility.hpp	/^class CV_EXPORTS TLSDataContainer$/;"	c	namespace:cv
TM_CCOEFF	imgproc.hpp	/^    TM_CCOEFF        = 4, \/\/!< \\f[R(x,y)= \\sum _{x',y'} (T'(x',y')  \\cdot I'(x+x',y+y'))\\f]$/;"	e	enum:cv::TemplateMatchModes
TM_CCOEFF_NORMED	imgproc.hpp	/^    TM_CCOEFF_NORMED = 5  \/\/!< \\f[R(x,y)= \\frac{ \\sum_{x',y'} (T'(x',y') \\cdot I'(x+x',y+y')) }{ \\sqrt{\\sum_{x',y'}T'(x',y')^2 \\cdot \\sum_{x',y'} I'(x+x',y+y')^2} }\\f]$/;"	e	enum:cv::TemplateMatchModes
TM_CCORR	imgproc.hpp	/^    TM_CCORR         = 2, \/\/!< \\f[R(x,y)= \\sum _{x',y'} (T(x',y')  \\cdot I(x+x',y+y'))\\f]$/;"	e	enum:cv::TemplateMatchModes
TM_CCORR_NORMED	imgproc.hpp	/^    TM_CCORR_NORMED  = 3, \/\/!< \\f[R(x,y)= \\frac{\\sum_{x',y'} (T(x',y') \\cdot I(x+x',y+y'))}{\\sqrt{\\sum_{x',y'}T(x',y')^2 \\cdot \\sum_{x',y'} I(x+x',y+y')^2}}\\f]$/;"	e	enum:cv::TemplateMatchModes
TM_SQDIFF	imgproc.hpp	/^    TM_SQDIFF        = 0, \/\/!< \\f[R(x,y)= \\sum _{x',y'} (T(x',y')-I(x+x',y+y'))^2\\f]$/;"	e	enum:cv::TemplateMatchModes
TM_SQDIFF_NORMED	imgproc.hpp	/^    TM_SQDIFF_NORMED = 1, \/\/!< \\f[R(x,y)= \\frac{\\sum_{x',y'} (T(x',y')-I(x+x',y+y'))^2}{\\sqrt{\\sum_{x',y'}T(x',y')^2 \\cdot \\sum_{x',y'} I(x+x',y+y')^2}}\\f]$/;"	e	enum:cv::TemplateMatchModes
TRAIN_ERROR	ml.hpp	/^    TRAIN_ERROR = 1$/;"	e	enum:cv::ml::ErrorTypes
TRIANGLES	core/opengl.hpp	/^    TRIANGLES      = 0x0004,$/;"	e	enum:cv::ogl::RenderModes
TRIANGLE_FAN	core/opengl.hpp	/^    TRIANGLE_FAN   = 0x0006,$/;"	e	enum:cv::ogl::RenderModes
TRIANGLE_STRIP	core/opengl.hpp	/^    TRIANGLE_STRIP = 0x0005,$/;"	e	enum:cv::ogl::RenderModes
TS	ts.hpp	/^class CV_EXPORTS TS$/;"	c	namespace:cvtest
TS	ts.hpp	/^class CV_EXPORTS TS;$/;"	m	namespace:cvtest	typeref:class:cvtest::CV_EXPORTS
TSParams	ts.hpp	/^struct CV_EXPORTS TSParams$/;"	s	namespace:cvtest
TSTestWithParam	ts/ocl_test.hpp	/^struct CV_EXPORTS TSTestWithParam : public TestUtils, public ::testing::TestWithParam<T>$/;"	s	namespace:cvtest::ocl
TYPED_TEST	ts/ts_gtest.h	17450;"	d
TYPED_TEST_CASE	ts/ts_gtest.h	17446;"	d
TYPED_TEST_CASE_P	ts/ts_gtest.h	17500;"	d
TYPED_TEST_P	ts/ts_gtest.h	17504;"	d
TYPES	ts/cuda_test.hpp	259;"	d
TYPE_5_8	features2d.hpp	/^        TYPE_5_8 = 0, TYPE_7_12 = 1, TYPE_9_16 = 2,$/;"	e	enum:cv::FastFeatureDetector::__anon283
TYPE_7_12	features2d.hpp	/^        TYPE_5_8 = 0, TYPE_7_12 = 1, TYPE_9_16 = 2,$/;"	e	enum:cv::FastFeatureDetector::__anon283
TYPE_9_16	features2d.hpp	/^        TYPE_5_8 = 0, TYPE_7_12 = 1, TYPE_9_16 = 2,$/;"	e	enum:cv::FastFeatureDetector::__anon283
TYPE_ACCELERATOR	core/ocl.hpp	/^        TYPE_ACCELERATOR = (1 << 3),$/;"	e	enum:cv::ocl::Device::__anon154
TYPE_ALL	core/ocl.hpp	/^        TYPE_ALL         = 0xFFFFFFFF$/;"	e	enum:cv::ocl::Device::__anon154
TYPE_CPU	core/ocl.hpp	/^        TYPE_CPU         = (1 << 1),$/;"	e	enum:cv::ocl::Device::__anon154
TYPE_DEFAULT	core/ocl.hpp	/^        TYPE_DEFAULT     = (1 << 0),$/;"	e	enum:cv::ocl::Device::__anon154
TYPE_DGPU	core/ocl.hpp	/^        TYPE_DGPU        = TYPE_GPU + (1 << 16),$/;"	e	enum:cv::ocl::Device::__anon154
TYPE_GPU	core/ocl.hpp	/^        TYPE_GPU         = (1 << 2),$/;"	e	enum:cv::ocl::Device::__anon154
TYPE_IGPU	core/ocl.hpp	/^        TYPE_IGPU        = TYPE_GPU + (1 << 17),$/;"	e	enum:cv::ocl::Device::__anon154
TYPE_MASK	core/mat.hpp	/^    enum { MAGIC_MASK = 0xFFFF0000, TYPE_MASK = 0x00000FFF, DEPTH_MASK = 7 };$/;"	e	enum:cv::Mat::__anon139
TYPE_MASK	core/mat.hpp	/^    enum { MAGIC_MASK = 0xFFFF0000, TYPE_MASK = 0x00000FFF, DEPTH_MASK = 7 };$/;"	e	enum:cv::UMat::__anon141
TYPE_MASK	core/persistence.hpp	/^        TYPE_MASK = 7,$/;"	e	enum:cv::FileNode::Type
TYPICAL_MATS	ts/ts_perf.hpp	74;"	d
TYPICAL_MATS_C1	ts/ts_perf.hpp	75;"	d
TYPICAL_MATS_C4	ts/ts_perf.hpp	76;"	d
TYPICAL_MAT_SIZES	ts/ts_perf.hpp	72;"	d
TYPICAL_MAT_TYPES	ts/ts_perf.hpp	73;"	d
Tail	ts/ts_gtest.h	/^      T14> Tail;$/;"	t	struct:testing::internal::Templates14
Tail	ts/ts_gtest.h	/^      T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27> Tail;$/;"	t	struct:testing::internal::Templates27
Tail	ts/ts_gtest.h	/^      T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26> Tail;$/;"	t	struct:testing::internal::Templates26
Tail	ts/ts_gtest.h	/^      T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25> Tail;$/;"	t	struct:testing::internal::Templates25
Tail	ts/ts_gtest.h	/^      T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> Tail;$/;"	t	struct:testing::internal::Templates24
Tail	ts/ts_gtest.h	/^      T15, T16, T17, T18, T19, T20, T21, T22, T23> Tail;$/;"	t	struct:testing::internal::Templates23
Tail	ts/ts_gtest.h	/^      T15, T16, T17, T18, T19, T20, T21, T22> Tail;$/;"	t	struct:testing::internal::Templates22
Tail	ts/ts_gtest.h	/^      T15, T16, T17, T18, T19, T20, T21> Tail;$/;"	t	struct:testing::internal::Templates21
Tail	ts/ts_gtest.h	/^      T15, T16, T17, T18, T19, T20> Tail;$/;"	t	struct:testing::internal::Templates20
Tail	ts/ts_gtest.h	/^      T15, T16, T17, T18, T19> Tail;$/;"	t	struct:testing::internal::Templates19
Tail	ts/ts_gtest.h	/^      T15, T16, T17, T18> Tail;$/;"	t	struct:testing::internal::Templates18
Tail	ts/ts_gtest.h	/^      T15, T16, T17> Tail;$/;"	t	struct:testing::internal::Templates17
Tail	ts/ts_gtest.h	/^      T15, T16> Tail;$/;"	t	struct:testing::internal::Templates16
Tail	ts/ts_gtest.h	/^      T15> Tail;$/;"	t	struct:testing::internal::Templates15
Tail	ts/ts_gtest.h	/^      T15> Tail;$/;"	t	struct:testing::internal::Types15
Tail	ts/ts_gtest.h	/^      T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28> Tail;$/;"	t	struct:testing::internal::Types28
Tail	ts/ts_gtest.h	/^      T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27> Tail;$/;"	t	struct:testing::internal::Types27
Tail	ts/ts_gtest.h	/^      T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26> Tail;$/;"	t	struct:testing::internal::Types26
Tail	ts/ts_gtest.h	/^      T16, T17, T18, T19, T20, T21, T22, T23, T24, T25> Tail;$/;"	t	struct:testing::internal::Types25
Tail	ts/ts_gtest.h	/^      T16, T17, T18, T19, T20, T21, T22, T23, T24> Tail;$/;"	t	struct:testing::internal::Types24
Tail	ts/ts_gtest.h	/^      T16, T17, T18, T19, T20, T21, T22, T23> Tail;$/;"	t	struct:testing::internal::Types23
Tail	ts/ts_gtest.h	/^      T16, T17, T18, T19, T20, T21, T22> Tail;$/;"	t	struct:testing::internal::Types22
Tail	ts/ts_gtest.h	/^      T16, T17, T18, T19, T20, T21> Tail;$/;"	t	struct:testing::internal::Types21
Tail	ts/ts_gtest.h	/^      T16, T17, T18, T19, T20> Tail;$/;"	t	struct:testing::internal::Types20
Tail	ts/ts_gtest.h	/^      T16, T17, T18, T19> Tail;$/;"	t	struct:testing::internal::Types19
Tail	ts/ts_gtest.h	/^      T16, T17, T18> Tail;$/;"	t	struct:testing::internal::Types18
Tail	ts/ts_gtest.h	/^      T16, T17> Tail;$/;"	t	struct:testing::internal::Types17
Tail	ts/ts_gtest.h	/^      T16> Tail;$/;"	t	struct:testing::internal::Types16
Tail	ts/ts_gtest.h	/^      T28> Tail;$/;"	t	struct:testing::internal::Templates28
Tail	ts/ts_gtest.h	/^      T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41> Tail;$/;"	t	struct:testing::internal::Templates41
Tail	ts/ts_gtest.h	/^      T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40> Tail;$/;"	t	struct:testing::internal::Templates40
Tail	ts/ts_gtest.h	/^      T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39> Tail;$/;"	t	struct:testing::internal::Templates39
Tail	ts/ts_gtest.h	/^      T29, T30, T31, T32, T33, T34, T35, T36, T37, T38> Tail;$/;"	t	struct:testing::internal::Templates38
Tail	ts/ts_gtest.h	/^      T29, T30, T31, T32, T33, T34, T35, T36, T37> Tail;$/;"	t	struct:testing::internal::Templates37
Tail	ts/ts_gtest.h	/^      T29, T30, T31, T32, T33, T34, T35, T36> Tail;$/;"	t	struct:testing::internal::Templates36
Tail	ts/ts_gtest.h	/^      T29, T30, T31, T32, T33, T34, T35> Tail;$/;"	t	struct:testing::internal::Templates35
Tail	ts/ts_gtest.h	/^      T29, T30, T31, T32, T33, T34> Tail;$/;"	t	struct:testing::internal::Templates34
Tail	ts/ts_gtest.h	/^      T29, T30, T31, T32, T33> Tail;$/;"	t	struct:testing::internal::Templates33
Tail	ts/ts_gtest.h	/^      T29, T30, T31, T32> Tail;$/;"	t	struct:testing::internal::Templates32
Tail	ts/ts_gtest.h	/^      T29, T30, T31> Tail;$/;"	t	struct:testing::internal::Templates31
Tail	ts/ts_gtest.h	/^      T29, T30> Tail;$/;"	t	struct:testing::internal::Templates30
Tail	ts/ts_gtest.h	/^      T29> Tail;$/;"	t	struct:testing::internal::Templates29
Tail	ts/ts_gtest.h	/^      T29> Tail;$/;"	t	struct:testing::internal::Types29
Tail	ts/ts_gtest.h	/^      T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42> Tail;$/;"	t	struct:testing::internal::Types42
Tail	ts/ts_gtest.h	/^      T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41> Tail;$/;"	t	struct:testing::internal::Types41
Tail	ts/ts_gtest.h	/^      T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40> Tail;$/;"	t	struct:testing::internal::Types40
Tail	ts/ts_gtest.h	/^      T30, T31, T32, T33, T34, T35, T36, T37, T38, T39> Tail;$/;"	t	struct:testing::internal::Types39
Tail	ts/ts_gtest.h	/^      T30, T31, T32, T33, T34, T35, T36, T37, T38> Tail;$/;"	t	struct:testing::internal::Types38
Tail	ts/ts_gtest.h	/^      T30, T31, T32, T33, T34, T35, T36, T37> Tail;$/;"	t	struct:testing::internal::Types37
Tail	ts/ts_gtest.h	/^      T30, T31, T32, T33, T34, T35, T36> Tail;$/;"	t	struct:testing::internal::Types36
Tail	ts/ts_gtest.h	/^      T30, T31, T32, T33, T34, T35> Tail;$/;"	t	struct:testing::internal::Types35
Tail	ts/ts_gtest.h	/^      T30, T31, T32, T33, T34> Tail;$/;"	t	struct:testing::internal::Types34
Tail	ts/ts_gtest.h	/^      T30, T31, T32, T33> Tail;$/;"	t	struct:testing::internal::Types33
Tail	ts/ts_gtest.h	/^      T30, T31, T32> Tail;$/;"	t	struct:testing::internal::Types32
Tail	ts/ts_gtest.h	/^      T30, T31> Tail;$/;"	t	struct:testing::internal::Types31
Tail	ts/ts_gtest.h	/^      T30> Tail;$/;"	t	struct:testing::internal::Types30
Tail	ts/ts_gtest.h	/^      T42> Tail;$/;"	t	struct:testing::internal::Templates42
Tail	ts/ts_gtest.h	/^      T43, T44, T45, T46, T47, T48, T49, T50> Tail;$/;"	t	struct:testing::internal::Templates50
Tail	ts/ts_gtest.h	/^      T43, T44, T45, T46, T47, T48, T49> Tail;$/;"	t	struct:testing::internal::Templates49
Tail	ts/ts_gtest.h	/^      T43, T44, T45, T46, T47, T48> Tail;$/;"	t	struct:testing::internal::Templates48
Tail	ts/ts_gtest.h	/^      T43, T44, T45, T46, T47> Tail;$/;"	t	struct:testing::internal::Templates47
Tail	ts/ts_gtest.h	/^      T43, T44, T45, T46> Tail;$/;"	t	struct:testing::internal::Templates46
Tail	ts/ts_gtest.h	/^      T43, T44, T45> Tail;$/;"	t	struct:testing::internal::Templates45
Tail	ts/ts_gtest.h	/^      T43, T44> Tail;$/;"	t	struct:testing::internal::Templates44
Tail	ts/ts_gtest.h	/^      T43> Tail;$/;"	t	struct:testing::internal::Templates43
Tail	ts/ts_gtest.h	/^      T43> Tail;$/;"	t	struct:testing::internal::Types43
Tail	ts/ts_gtest.h	/^      T44, T45, T46, T47, T48, T49, T50> Tail;$/;"	t	struct:testing::internal::Types50
Tail	ts/ts_gtest.h	/^      T44, T45, T46, T47, T48, T49> Tail;$/;"	t	struct:testing::internal::Types49
Tail	ts/ts_gtest.h	/^      T44, T45, T46, T47, T48> Tail;$/;"	t	struct:testing::internal::Types48
Tail	ts/ts_gtest.h	/^      T44, T45, T46, T47> Tail;$/;"	t	struct:testing::internal::Types47
Tail	ts/ts_gtest.h	/^      T44, T45, T46> Tail;$/;"	t	struct:testing::internal::Types46
Tail	ts/ts_gtest.h	/^      T44, T45> Tail;$/;"	t	struct:testing::internal::Types45
Tail	ts/ts_gtest.h	/^      T44> Tail;$/;"	t	struct:testing::internal::Types44
Tail	ts/ts_gtest.h	/^  typedef Templates0 Tail;$/;"	t	struct:testing::internal::Templates1
Tail	ts/ts_gtest.h	/^  typedef Templates10<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> Tail;$/;"	t	struct:testing::internal::Templates11
Tail	ts/ts_gtest.h	/^  typedef Templates11<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> Tail;$/;"	t	struct:testing::internal::Templates12
Tail	ts/ts_gtest.h	/^  typedef Templates12<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> Tail;$/;"	t	struct:testing::internal::Templates13
Tail	ts/ts_gtest.h	/^  typedef Templates1<T2> Tail;$/;"	t	struct:testing::internal::Templates2
Tail	ts/ts_gtest.h	/^  typedef Templates2<T2, T3> Tail;$/;"	t	struct:testing::internal::Templates3
Tail	ts/ts_gtest.h	/^  typedef Templates3<T2, T3, T4> Tail;$/;"	t	struct:testing::internal::Templates4
Tail	ts/ts_gtest.h	/^  typedef Templates4<T2, T3, T4, T5> Tail;$/;"	t	struct:testing::internal::Templates5
Tail	ts/ts_gtest.h	/^  typedef Templates5<T2, T3, T4, T5, T6> Tail;$/;"	t	struct:testing::internal::Templates6
Tail	ts/ts_gtest.h	/^  typedef Templates6<T2, T3, T4, T5, T6, T7> Tail;$/;"	t	struct:testing::internal::Templates7
Tail	ts/ts_gtest.h	/^  typedef Templates7<T2, T3, T4, T5, T6, T7, T8> Tail;$/;"	t	struct:testing::internal::Templates8
Tail	ts/ts_gtest.h	/^  typedef Templates8<T2, T3, T4, T5, T6, T7, T8, T9> Tail;$/;"	t	struct:testing::internal::Templates9
Tail	ts/ts_gtest.h	/^  typedef Templates9<T2, T3, T4, T5, T6, T7, T8, T9, T10> Tail;$/;"	t	struct:testing::internal::Templates10
Tail	ts/ts_gtest.h	/^  typedef Types0 Tail;$/;"	t	struct:testing::internal::Types1
Tail	ts/ts_gtest.h	/^  typedef Types10<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> Tail;$/;"	t	struct:testing::internal::Types11
Tail	ts/ts_gtest.h	/^  typedef Types11<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> Tail;$/;"	t	struct:testing::internal::Types12
Tail	ts/ts_gtest.h	/^  typedef Types12<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> Tail;$/;"	t	struct:testing::internal::Types13
Tail	ts/ts_gtest.h	/^  typedef Types13<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> Tail;$/;"	t	struct:testing::internal::Types14
Tail	ts/ts_gtest.h	/^  typedef Types1<T2> Tail;$/;"	t	struct:testing::internal::Types2
Tail	ts/ts_gtest.h	/^  typedef Types2<T2, T3> Tail;$/;"	t	struct:testing::internal::Types3
Tail	ts/ts_gtest.h	/^  typedef Types3<T2, T3, T4> Tail;$/;"	t	struct:testing::internal::Types4
Tail	ts/ts_gtest.h	/^  typedef Types4<T2, T3, T4, T5> Tail;$/;"	t	struct:testing::internal::Types5
Tail	ts/ts_gtest.h	/^  typedef Types5<T2, T3, T4, T5, T6> Tail;$/;"	t	struct:testing::internal::Types6
Tail	ts/ts_gtest.h	/^  typedef Types6<T2, T3, T4, T5, T6, T7> Tail;$/;"	t	struct:testing::internal::Types7
Tail	ts/ts_gtest.h	/^  typedef Types7<T2, T3, T4, T5, T6, T7, T8> Tail;$/;"	t	struct:testing::internal::Types8
Tail	ts/ts_gtest.h	/^  typedef Types8<T2, T3, T4, T5, T6, T7, T8, T9> Tail;$/;"	t	struct:testing::internal::Types9
Tail	ts/ts_gtest.h	/^  typedef Types9<T2, T3, T4, T5, T6, T7, T8, T9, T10> Tail;$/;"	t	struct:testing::internal::Types10
Target	core/opengl.hpp	/^    enum Target$/;"	g	class:cv::ogl::Buffer
TargetArchs	core/cuda.hpp	/^class CV_EXPORTS TargetArchs$/;"	c	namespace:cv::cuda
TearDown	ts/ts_gtest.h	/^  virtual void TearDown() {}$/;"	f	class:testing::Environment
TearDownTestCase	ts/ts_gtest.h	/^  static void TearDownTestCase() {}$/;"	f	class:testing::Test
TearDownTestCaseFunc	ts/ts_gtest.h	/^  typedef internal::TearDownTestCaseFunc TearDownTestCaseFunc;$/;"	t	class:testing::Test
TearDownTestCaseFunc	ts/ts_gtest.h	/^typedef void (*TearDownTestCaseFunc)();$/;"	t	namespace:testing::internal
Temp1	video/tracking_c.h	/^    float* Temp1;               \/* temp1->data.fl *\/$/;"	m	struct:CvKalman
Temp2	video/tracking_c.h	/^    float* Temp2;               \/* temp2->data.fl *\/$/;"	m	struct:CvKalman
TemplateMatchModes	imgproc.hpp	/^enum TemplateMatchModes {$/;"	g	namespace:cv
TemplateMatching	cudaimgproc.hpp	/^class CV_EXPORTS TemplateMatching : public Algorithm$/;"	c	namespace:cv::cuda
TemplateSel	ts/ts_gtest.h	/^struct TemplateSel {$/;"	s	namespace:testing::internal
Templates	ts/ts_gtest.h	/^struct Templates {$/;"	s	namespace:testing::internal
Templates	ts/ts_gtest.h	/^struct Templates<NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT,$/;"	s	namespace:testing::internal
Templates	ts/ts_gtest.h	/^struct Templates<T1, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT,$/;"	s	namespace:testing::internal
Templates	ts/ts_gtest.h	/^struct Templates<T1, T2, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT,$/;"	s	namespace:testing::internal
Templates	ts/ts_gtest.h	/^struct Templates<T1, T2, T3, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT,$/;"	s	namespace:testing::internal
Templates	ts/ts_gtest.h	/^struct Templates<T1, T2, T3, T4, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT,$/;"	s	namespace:testing::internal
Templates	ts/ts_gtest.h	/^struct Templates<T1, T2, T3, T4, T5, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT,$/;"	s	namespace:testing::internal
Templates	ts/ts_gtest.h	/^struct Templates<T1, T2, T3, T4, T5, T6, NoneT, NoneT, NoneT, NoneT, NoneT,$/;"	s	namespace:testing::internal
Templates	ts/ts_gtest.h	/^struct Templates<T1, T2, T3, T4, T5, T6, T7, NoneT, NoneT, NoneT, NoneT, NoneT,$/;"	s	namespace:testing::internal
Templates	ts/ts_gtest.h	/^struct Templates<T1, T2, T3, T4, T5, T6, T7, T8, NoneT, NoneT, NoneT, NoneT,$/;"	s	namespace:testing::internal
Templates	ts/ts_gtest.h	/^struct Templates<T1, T2, T3, T4, T5, T6, T7, T8, T9, NoneT, NoneT, NoneT,$/;"	s	namespace:testing::internal
Templates	ts/ts_gtest.h	/^struct Templates<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, NoneT, NoneT, NoneT,$/;"	s	namespace:testing::internal
Templates	ts/ts_gtest.h	/^struct Templates<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, NoneT, NoneT,$/;"	s	namespace:testing::internal
Templates	ts/ts_gtest.h	/^struct Templates<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, NoneT,$/;"	s	namespace:testing::internal
Templates	ts/ts_gtest.h	/^struct Templates<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, NoneT,$/;"	s	namespace:testing::internal
Templates	ts/ts_gtest.h	/^struct Templates<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14,$/;"	s	namespace:testing::internal
Templates0	ts/ts_gtest.h	/^struct Templates0 {};$/;"	s	namespace:testing::internal
Templates1	ts/ts_gtest.h	/^struct Templates1 {$/;"	s	namespace:testing::internal
Templates10	ts/ts_gtest.h	/^struct Templates10 {$/;"	s	namespace:testing::internal
Templates11	ts/ts_gtest.h	/^struct Templates11 {$/;"	s	namespace:testing::internal
Templates12	ts/ts_gtest.h	/^struct Templates12 {$/;"	s	namespace:testing::internal
Templates13	ts/ts_gtest.h	/^struct Templates13 {$/;"	s	namespace:testing::internal
Templates14	ts/ts_gtest.h	/^struct Templates14 {$/;"	s	namespace:testing::internal
Templates15	ts/ts_gtest.h	/^struct Templates15 {$/;"	s	namespace:testing::internal
Templates16	ts/ts_gtest.h	/^struct Templates16 {$/;"	s	namespace:testing::internal
Templates17	ts/ts_gtest.h	/^struct Templates17 {$/;"	s	namespace:testing::internal
Templates18	ts/ts_gtest.h	/^struct Templates18 {$/;"	s	namespace:testing::internal
Templates19	ts/ts_gtest.h	/^struct Templates19 {$/;"	s	namespace:testing::internal
Templates2	ts/ts_gtest.h	/^struct Templates2 {$/;"	s	namespace:testing::internal
Templates20	ts/ts_gtest.h	/^struct Templates20 {$/;"	s	namespace:testing::internal
Templates21	ts/ts_gtest.h	/^struct Templates21 {$/;"	s	namespace:testing::internal
Templates22	ts/ts_gtest.h	/^struct Templates22 {$/;"	s	namespace:testing::internal
Templates23	ts/ts_gtest.h	/^struct Templates23 {$/;"	s	namespace:testing::internal
Templates24	ts/ts_gtest.h	/^struct Templates24 {$/;"	s	namespace:testing::internal
Templates25	ts/ts_gtest.h	/^struct Templates25 {$/;"	s	namespace:testing::internal
Templates26	ts/ts_gtest.h	/^struct Templates26 {$/;"	s	namespace:testing::internal
Templates27	ts/ts_gtest.h	/^struct Templates27 {$/;"	s	namespace:testing::internal
Templates28	ts/ts_gtest.h	/^struct Templates28 {$/;"	s	namespace:testing::internal
Templates29	ts/ts_gtest.h	/^struct Templates29 {$/;"	s	namespace:testing::internal
Templates3	ts/ts_gtest.h	/^struct Templates3 {$/;"	s	namespace:testing::internal
Templates30	ts/ts_gtest.h	/^struct Templates30 {$/;"	s	namespace:testing::internal
Templates31	ts/ts_gtest.h	/^struct Templates31 {$/;"	s	namespace:testing::internal
Templates32	ts/ts_gtest.h	/^struct Templates32 {$/;"	s	namespace:testing::internal
Templates33	ts/ts_gtest.h	/^struct Templates33 {$/;"	s	namespace:testing::internal
Templates34	ts/ts_gtest.h	/^struct Templates34 {$/;"	s	namespace:testing::internal
Templates35	ts/ts_gtest.h	/^struct Templates35 {$/;"	s	namespace:testing::internal
Templates36	ts/ts_gtest.h	/^struct Templates36 {$/;"	s	namespace:testing::internal
Templates37	ts/ts_gtest.h	/^struct Templates37 {$/;"	s	namespace:testing::internal
Templates38	ts/ts_gtest.h	/^struct Templates38 {$/;"	s	namespace:testing::internal
Templates39	ts/ts_gtest.h	/^struct Templates39 {$/;"	s	namespace:testing::internal
Templates4	ts/ts_gtest.h	/^struct Templates4 {$/;"	s	namespace:testing::internal
Templates40	ts/ts_gtest.h	/^struct Templates40 {$/;"	s	namespace:testing::internal
Templates41	ts/ts_gtest.h	/^struct Templates41 {$/;"	s	namespace:testing::internal
Templates42	ts/ts_gtest.h	/^struct Templates42 {$/;"	s	namespace:testing::internal
Templates43	ts/ts_gtest.h	/^struct Templates43 {$/;"	s	namespace:testing::internal
Templates44	ts/ts_gtest.h	/^struct Templates44 {$/;"	s	namespace:testing::internal
Templates45	ts/ts_gtest.h	/^struct Templates45 {$/;"	s	namespace:testing::internal
Templates46	ts/ts_gtest.h	/^struct Templates46 {$/;"	s	namespace:testing::internal
Templates47	ts/ts_gtest.h	/^struct Templates47 {$/;"	s	namespace:testing::internal
Templates48	ts/ts_gtest.h	/^struct Templates48 {$/;"	s	namespace:testing::internal
Templates49	ts/ts_gtest.h	/^struct Templates49 {$/;"	s	namespace:testing::internal
Templates5	ts/ts_gtest.h	/^struct Templates5 {$/;"	s	namespace:testing::internal
Templates50	ts/ts_gtest.h	/^struct Templates50 {$/;"	s	namespace:testing::internal
Templates6	ts/ts_gtest.h	/^struct Templates6 {$/;"	s	namespace:testing::internal
Templates7	ts/ts_gtest.h	/^struct Templates7 {$/;"	s	namespace:testing::internal
Templates8	ts/ts_gtest.h	/^struct Templates8 {$/;"	s	namespace:testing::internal
Templates9	ts/ts_gtest.h	/^struct Templates9 {$/;"	s	namespace:testing::internal
TermCriteria	core/base.hpp	/^class CV_EXPORTS TermCriteria;$/;"	m	namespace:cv	typeref:class:cv::CV_EXPORTS
TermCriteria	core/types.hpp	/^TermCriteria::TermCriteria()$/;"	f	class:cv::TermCriteria
TermCriteria	core/types.hpp	/^TermCriteria::TermCriteria(int _type, int _maxCount, double _epsilon)$/;"	f	class:cv::TermCriteria
TermCriteria	core/types.hpp	/^class CV_EXPORTS TermCriteria$/;"	c	namespace:cv
TersePrintPrefixToStrings	ts/ts_gtest.h	/^  static void TersePrintPrefixToStrings(const Tuple& t, Strings* strings) {$/;"	f	struct:testing::internal::TuplePrefixPrinter
TersePrintPrefixToStrings	ts/ts_gtest.h	/^  static void TersePrintPrefixToStrings(const Tuple&, Strings*) {}$/;"	f	struct:testing::internal::TuplePrefixPrinter
Test	ts/ts_gtest.h	/^class GTEST_API_ Test {$/;"	c	namespace:testing
TestBase	ts/ts_perf.hpp	/^class CV_EXPORTS TestBase: public ::testing::Test$/;"	c	namespace:perf
TestBaseWithParam	ts/ts_perf.hpp	/^template<typename T> class TestBaseWithParam: public TestBase, public ::testing::WithParamInterface<T> {};$/;"	c	namespace:perf
TestCase	ts/ts_gtest.h	/^class GTEST_API_ TestCase {$/;"	c	namespace:testing
TestCaseInfoContainer	ts/ts_gtest.h	/^  typedef ::std::vector<ParameterizedTestCaseInfoBase*> TestCaseInfoContainer;$/;"	t	class:testing::internal::ParameterizedTestCaseRegistry
TestDisabled	ts/ts_gtest.h	/^  static bool TestDisabled(const TestInfo* test_info) {$/;"	f	class:testing::TestCase
TestEventListener	ts/ts_gtest.h	/^class TestEventListener {$/;"	c	namespace:testing
TestEventListeners	ts/ts_gtest.h	/^class GTEST_API_ TestEventListeners {$/;"	c	namespace:testing
TestFactoryBase	ts/ts_gtest.h	/^  TestFactoryBase() {}$/;"	f	class:testing::internal::TestFactoryBase
TestFactoryBase	ts/ts_gtest.h	/^class TestFactoryBase {$/;"	c	namespace:testing::internal
TestFactoryImpl	ts/ts_gtest.h	/^class TestFactoryImpl : public TestFactoryBase {$/;"	c	namespace:testing::internal
TestFailed	ts/ts_gtest.h	/^  static bool TestFailed(const TestInfo* test_info) {$/;"	f	class:testing::TestCase
TestInfo	ts.hpp	/^struct TestInfo$/;"	s	namespace:cvtest
TestInfo	ts/ts_gtest.h	/^    TestInfo(const char* a_test_case_base_name,$/;"	f	struct:testing::internal::ParameterizedTestCaseInfo::TestInfo
TestInfo	ts/ts_gtest.h	/^  struct TestInfo {$/;"	s	class:testing::internal::ParameterizedTestCaseInfo
TestInfo	ts/ts_gtest.h	/^class GTEST_API_ TestInfo {$/;"	c	namespace:testing
TestInfoContainer	ts/ts_gtest.h	/^  typedef ::std::vector<linked_ptr<TestInfo> > TestInfoContainer;$/;"	t	class:testing::internal::ParameterizedTestCaseInfo
TestMetaFactory	ts/ts_gtest.h	/^  TestMetaFactory() {}$/;"	f	class:testing::internal::TestMetaFactory
TestMetaFactory	ts/ts_gtest.h	/^class TestMetaFactory$/;"	c	namespace:testing::internal
TestMetaFactoryBase	ts/ts_gtest.h	/^class TestMetaFactoryBase {$/;"	c	namespace:testing::internal
TestPartResult	ts/ts_gtest.h	/^  TestPartResult(Type a_type,$/;"	f	class:testing::TestPartResult
TestPartResult	ts/ts_gtest.h	/^class GTEST_API_ TestPartResult {$/;"	c	namespace:testing
TestPartResultArray	ts/ts_gtest.h	/^  TestPartResultArray() {}$/;"	f	class:testing::TestPartResultArray
TestPartResultArray	ts/ts_gtest.h	/^class GTEST_API_ TestPartResultArray {$/;"	c	namespace:testing
TestPartResultReporterInterface	ts/ts_gtest.h	/^class GTEST_API_ TestPartResultReporterInterface {$/;"	c	namespace:testing
TestPassed	ts/ts_gtest.h	/^  static bool TestPassed(const TestInfo* test_info) {$/;"	f	class:testing::TestCase
TestProperty	ts/ts_gtest.h	/^  TestProperty(const std::string& a_key, const std::string& a_value) :$/;"	f	class:testing::TestProperty
TestProperty	ts/ts_gtest.h	/^class TestProperty {$/;"	c	namespace:testing
TestReportable	ts/ts_gtest.h	/^  static bool TestReportable(const TestInfo* test_info) {$/;"	f	class:testing::TestCase
TestReportableDisabled	ts/ts_gtest.h	/^  static bool TestReportableDisabled(const TestInfo* test_info) {$/;"	f	class:testing::TestCase
TestResult	ts/ts_gtest.h	/^class GTEST_API_ TestResult {$/;"	c	namespace:testing
TestRole	ts/ts_gtest.h	/^  enum TestRole { OVERSEE_TEST, EXECUTE_TEST };$/;"	g	class:testing::internal::DeathTest
TestUtils	ts/ocl_test.hpp	/^    TestUtils()$/;"	f	struct:cvtest::ocl::TestUtils
TestUtils	ts/ocl_test.hpp	/^struct CV_EXPORTS TestUtils$/;"	s	namespace:cvtest::ocl
TestWithParam	ts/ts_gtest.h	/^class TestWithParam : public Test, public WithParamInterface<T> {$/;"	c	namespace:testing
TexRef	cudev/ptr2d/texture.hpp	/^        typedef texture<T, cudaTextureType2D, cudaReadModeElementType> TexRef;$/;"	t	struct:__anon393::CvCudevTextureRef
Texture	cudev/ptr2d/texture.hpp	/^    __host__ explicit Texture(const GlobPtrSz<T>& mat,$/;"	f	struct:cv::cudev::Texture
Texture	cudev/ptr2d/texture.hpp	/^template <typename T> struct Texture : TexturePtr<T>$/;"	s	namespace:cv::cudev
Texture2D	core/base.hpp	/^    class CV_EXPORTS Texture2D;$/;"	m	namespace:cv::ogl	typeref:class:cv::ogl::CV_EXPORTS
Texture2D	core/opengl.hpp	/^class CV_EXPORTS Texture2D$/;"	c	namespace:cv::ogl
Texture2D	core/opengl.hpp	/^cv::ogl::Texture2D::Texture2D(Size asize, Format aformat, bool autoRelease) : rows_(0), cols_(0), format_(NONE)$/;"	f	class:cv::ogl::Texture2D
Texture2D	core/opengl.hpp	/^cv::ogl::Texture2D::Texture2D(int arows, int acols, Format aformat, bool autoRelease) : rows_(0), cols_(0), format_(NONE)$/;"	f	class:cv::ogl::Texture2D
TexturePtr	cudev/ptr2d/texture.hpp	/^template <typename T> struct TexturePtr$/;"	s	namespace:cv::cudev
ThinPlateSplineShapeTransformer	shape/shape_transformer.hpp	/^class CV_EXPORTS_W ThinPlateSplineShapeTransformer : public ShapeTransformer$/;"	c	namespace:cv
ThisClass	flann/object_factory.h	/^    typedef ObjectFactory<BaseClass,UniqueIdType,ObjectCreator> ThisClass;$/;"	t	class:cvflann::ObjectFactory
ThreadFuncWithCLinkage	ts/ts_gtest.h	/^extern "C" inline void* ThreadFuncWithCLinkage(void* thread) {$/;"	f	namespace:std::tr1
ThreadLocal	ts/ts_gtest.h	/^  ThreadLocal() : key_(CreateKey()),$/;"	f	class:std::tr1::ThreadLocal
ThreadLocal	ts/ts_gtest.h	/^  ThreadLocal() : value_() {}$/;"	f	class:std::tr1::ThreadLocal
ThreadLocal	ts/ts_gtest.h	/^  explicit ThreadLocal(const T& value) : key_(CreateKey()),$/;"	f	class:std::tr1::ThreadLocal
ThreadLocal	ts/ts_gtest.h	/^  explicit ThreadLocal(const T& value) : value_(value) {}$/;"	f	class:std::tr1::ThreadLocal
ThreadLocal	ts/ts_gtest.h	/^class ThreadLocal {$/;"	c	namespace:std::tr1
ThreadLocalValueHolderBase	ts/ts_gtest.h	/^class ThreadLocalValueHolderBase {$/;"	c	namespace:std::tr1
ThreadWithParam	ts/ts_gtest.h	/^  ThreadWithParam($/;"	f	class:std::tr1::ThreadWithParam
ThreadWithParam	ts/ts_gtest.h	/^class ThreadWithParam : public ThreadWithParamBase {$/;"	c	namespace:std::tr1
ThreadWithParamBase	ts/ts_gtest.h	/^class ThreadWithParamBase {$/;"	c	namespace:std::tr1
ThreshBinaryFunc	cudev/functional/functional.hpp	/^template <typename T> struct ThreshBinaryFunc : unary_function<T, T>$/;"	s	namespace:cv::cudev
ThreshBinaryInvFunc	cudev/functional/functional.hpp	/^template <typename T> struct ThreshBinaryInvFunc : unary_function<T, T>$/;"	s	namespace:cv::cudev
ThreshToZeroFunc	cudev/functional/functional.hpp	/^template <typename T> struct ThreshToZeroFunc : unary_function<T, T>$/;"	s	namespace:cv::cudev
ThreshToZeroInvFunc	cudev/functional/functional.hpp	/^template <typename T> struct ThreshToZeroInvFunc : unary_function<T, T>$/;"	s	namespace:cv::cudev
ThreshTruncFunc	cudev/functional/functional.hpp	/^template <typename T> struct ThreshTruncFunc : unary_function<T, T>$/;"	s	namespace:cv::cudev
ThresholdTypes	imgproc.hpp	/^enum ThresholdTypes {$/;"	g	namespace:cv
TimeInMillis	ts/ts_gtest.h	/^typedef TypeWithSize<8>::Int TimeInMillis;  \/\/ Represents time in milliseconds.$/;"	t	namespace:std::tr1
TimeInMillis	ts/ts_gtest.h	/^typedef internal::TimeInMillis TimeInMillis;$/;"	t	namespace:testing
TimeVector	ts/ts_perf.hpp	/^    typedef std::vector<int64> TimeVector;$/;"	t	class:perf::TestBase
Timelapser	stitching/detail/timelapsers.hpp	/^class CV_EXPORTS Timelapser$/;"	c	namespace:cv::detail
TimelapserCrop	stitching/detail/timelapsers.hpp	/^class CV_EXPORTS TimelapserCrop : public Timelapser$/;"	c	namespace:cv::detail
ToFileMotionWriter	videostab/global_motion.hpp	/^class CV_EXPORTS ToFileMotionWriter : public ImageMotionEstimatorBase$/;"	c	namespace:cv::videostab
ToLower	ts/ts_gtest.h	/^inline char ToLower(char ch) {$/;"	f	namespace:std::tr1
ToUMat	ts/ocl_test.hpp	/^inline UMat ToUMat(InputArray src)$/;"	f	namespace:cvtest::ocl
ToUMat	ts/ocl_test.hpp	/^inline UMat ToUMat(const Mat& src)$/;"	f	namespace:cvtest::ocl
ToUMat	ts/ocl_test.hpp	/^inline std::vector<UMat> ToUMat(const std::vector<Mat>& src)$/;"	f	namespace:cvtest::ocl
ToUpper	ts/ts_gtest.h	/^inline char ToUpper(char ch) {$/;"	f	namespace:std::tr1
Tonemap	photo.hpp	/^class CV_EXPORTS_W Tonemap : public Algorithm$/;"	c	namespace:cv
TonemapDrago	photo.hpp	/^class CV_EXPORTS_W TonemapDrago : public Tonemap$/;"	c	namespace:cv
TonemapDurand	photo.hpp	/^class CV_EXPORTS_W TonemapDurand : public Tonemap$/;"	c	namespace:cv
TonemapMantiuk	photo.hpp	/^class CV_EXPORTS_W TonemapMantiuk : public Tonemap$/;"	c	namespace:cv
TonemapReinhard	photo.hpp	/^class CV_EXPORTS_W TonemapReinhard : public Tonemap$/;"	c	namespace:cv
TrackbarCallback	highgui.hpp	/^typedef void (*TrackbarCallback)(int pos, void* userdata);$/;"	t	namespace:cv
TrackedObject	objdetect/detection_based_tracker.hpp	/^            TrackedObject(const cv::Rect& rect):numDetectedFrames(1), numFramesNotDetected(0)$/;"	f	struct:cv::DetectionBasedTracker::TrackedObject
TrackedObject	objdetect/detection_based_tracker.hpp	/^        struct TrackedObject$/;"	s	class:cv::DetectionBasedTracker
TrainData	ml.hpp	/^class CV_EXPORTS_W TrainData$/;"	c	namespace:cv::ml
TrainFlags	ml.hpp	/^    enum TrainFlags {$/;"	g	class:cv::ml::ANN_MLP
TrainingMethods	ml.hpp	/^    enum TrainingMethods {$/;"	g	class:cv::ml::ANN_MLP
TransformDispatcher	core/cuda/detail/transform_detail.hpp	/^        template<> struct TransformDispatcher<false>$/;"	s	namespace:cv::cuda::device::transform_detail
TransformDispatcher	core/cuda/detail/transform_detail.hpp	/^        template<> struct TransformDispatcher<true>$/;"	s	namespace:cv::cuda::device::transform_detail
TransformDispatcher	cudev/grid/detail/transform.hpp	/^    template <class Policy> struct TransformDispatcher<false, Policy>$/;"	s	namespace:cv::cudev::grid_transform_detail
TransformDispatcher	cudev/grid/detail/transform.hpp	/^    template <class Policy> struct TransformDispatcher<true, Policy>$/;"	s	namespace:cv::cudev::grid_transform_detail
TransformFunctorTraits	core/cuda/functional.hpp	/^    template <typename Func> struct TransformFunctorTraits : DefaultTransformFunctorTraits<Func> {};$/;"	s	namespace:cv::cuda::device
TranslationBasedLocalOutlierRejector	videostab/outlier_rejection.hpp	/^class CV_EXPORTS TranslationBasedLocalOutlierRejector : public IOutlierRejector$/;"	c	namespace:cv::videostab
TransposeBody	cudev/expr/warping.hpp	/^template <class SrcPtr> struct TransposeBody$/;"	s	namespace:cv::cudev
TransverseMercatorProjector	stitching/detail/warpers.hpp	/^struct CV_EXPORTS TransverseMercatorProjector : ProjectorBase$/;"	s	namespace:cv::detail
TransverseMercatorWarper	stitching/detail/warpers.hpp	/^    TransverseMercatorWarper(float scale) { projector_.scale = scale; }$/;"	f	class:cv::detail::TransverseMercatorWarper
TransverseMercatorWarper	stitching/detail/warpers.hpp	/^class CV_EXPORTS TransverseMercatorWarper : public RotationWarperBase<TransverseMercatorProjector>$/;"	c	namespace:cv::detail
TransverseMercatorWarper	stitching/warpers.hpp	/^class TransverseMercatorWarper: public WarperCreator$/;"	c	namespace:cv
True	flann/dist.h	/^class True$/;"	c	namespace:cvflann
True	flann/dist.h	84;"	d
TupleElement	ts/ts_gtest.h	/^struct TupleElement<true, 0, GTEST_10_TUPLE_(T)> {$/;"	s	namespace:std::tr1::gtest_internal
TupleElement	ts/ts_gtest.h	/^struct TupleElement<true, 1, GTEST_10_TUPLE_(T)> {$/;"	s	namespace:std::tr1::gtest_internal
TupleElement	ts/ts_gtest.h	/^struct TupleElement<true, 2, GTEST_10_TUPLE_(T)> {$/;"	s	namespace:std::tr1::gtest_internal
TupleElement	ts/ts_gtest.h	/^struct TupleElement<true, 3, GTEST_10_TUPLE_(T)> {$/;"	s	namespace:std::tr1::gtest_internal
TupleElement	ts/ts_gtest.h	/^struct TupleElement<true, 4, GTEST_10_TUPLE_(T)> {$/;"	s	namespace:std::tr1::gtest_internal
TupleElement	ts/ts_gtest.h	/^struct TupleElement<true, 5, GTEST_10_TUPLE_(T)> {$/;"	s	namespace:std::tr1::gtest_internal
TupleElement	ts/ts_gtest.h	/^struct TupleElement<true, 6, GTEST_10_TUPLE_(T)> {$/;"	s	namespace:std::tr1::gtest_internal
TupleElement	ts/ts_gtest.h	/^struct TupleElement<true, 7, GTEST_10_TUPLE_(T)> {$/;"	s	namespace:std::tr1::gtest_internal
TupleElement	ts/ts_gtest.h	/^struct TupleElement<true, 8, GTEST_10_TUPLE_(T)> {$/;"	s	namespace:std::tr1::gtest_internal
TupleElement	ts/ts_gtest.h	/^struct TupleElement<true, 9, GTEST_10_TUPLE_(T)> {$/;"	s	namespace:std::tr1::gtest_internal
TuplePrefixPrinter	ts/ts_gtest.h	/^struct TuplePrefixPrinter {$/;"	s	namespace:testing::internal
TuplePrefixPrinter	ts/ts_gtest.h	/^struct TuplePrefixPrinter<0> {$/;"	s	namespace:testing::internal
TuplePrefixPrinter	ts/ts_gtest.h	/^struct TuplePrefixPrinter<1> {$/;"	s	namespace:testing::internal
TupleTraits	cudev/util/tuple.hpp	/^struct TupleTraits< tuple<P0, P1, P2, P3, P4, P5, P6, P7, P8, P9> >$/;"	s	namespace:cv::cudev
TupleTraits	cudev/util/tuple.hpp	/^template <typename T> struct TupleTraits$/;"	s	namespace:cv::cudev
TwoChannel	ts/cuda_perf.hpp	/^    enum { Gray = 1, TwoChannel = 2, BGR = 3, BGRA = 4 };$/;"	e	enum:perf::__anon37
TwoPassStabilizer	videostab/stabilizer.hpp	/^class CV_EXPORTS TwoPassStabilizer : public StabilizerBase, public IFrameSource$/;"	c	namespace:cv::videostab
Type	core/persistence.hpp	/^    enum Type$/;"	g	class:cv::FileNode
Type	core/types.hpp	/^    enum Type$/;"	g	class:cv::TermCriteria
Type	features2d.hpp	/^    typedef T Type;$/;"	t	struct:cv::Accumulator
Type	features2d.hpp	/^template<> struct Accumulator<char>   { typedef float Type; };$/;"	t	struct:cv::Accumulator
Type	features2d.hpp	/^template<> struct Accumulator<short>  { typedef float Type; };$/;"	t	struct:cv::Accumulator
Type	features2d.hpp	/^template<> struct Accumulator<unsigned char>  { typedef float Type; };$/;"	t	struct:cv::Accumulator
Type	features2d.hpp	/^template<> struct Accumulator<unsigned short> { typedef float Type; };$/;"	t	struct:cv::Accumulator
Type	flann/dist.h	/^struct Accumulator { typedef T Type; };$/;"	t	struct:cvflann::Accumulator
Type	flann/dist.h	/^struct Accumulator<char>   { typedef float Type; };$/;"	t	struct:cvflann::Accumulator
Type	flann/dist.h	/^struct Accumulator<int> { typedef float Type; };$/;"	t	struct:cvflann::Accumulator
Type	flann/dist.h	/^struct Accumulator<short>  { typedef float Type; };$/;"	t	struct:cvflann::Accumulator
Type	flann/dist.h	/^struct Accumulator<unsigned char>  { typedef float Type; };$/;"	t	struct:cvflann::Accumulator
Type	flann/dist.h	/^struct Accumulator<unsigned int> { typedef float Type; };$/;"	t	struct:cvflann::Accumulator
Type	flann/dist.h	/^struct Accumulator<unsigned short> { typedef float Type; };$/;"	t	struct:cvflann::Accumulator
Type	ts/ts_gtest.h	/^  enum Type {$/;"	g	class:testing::TestPartResult
Type	viz/types.hpp	/^            enum Type { MouseMove = 1, MouseButtonPress, MouseButtonRelease, MouseScrollDown, MouseScrollUp, MouseDblClick } ;$/;"	g	class:cv::viz::MouseEvent
TypeDepth	core/traits.hpp	/^template<> class TypeDepth<CV_16S>$/;"	c	namespace:cv
TypeDepth	core/traits.hpp	/^template<> class TypeDepth<CV_16U>$/;"	c	namespace:cv
TypeDepth	core/traits.hpp	/^template<> class TypeDepth<CV_32F>$/;"	c	namespace:cv
TypeDepth	core/traits.hpp	/^template<> class TypeDepth<CV_32S>$/;"	c	namespace:cv
TypeDepth	core/traits.hpp	/^template<> class TypeDepth<CV_64F>$/;"	c	namespace:cv
TypeDepth	core/traits.hpp	/^template<> class TypeDepth<CV_8S>$/;"	c	namespace:cv
TypeDepth	core/traits.hpp	/^template<> class TypeDepth<CV_8U>$/;"	c	namespace:cv
TypeDepth	core/traits.hpp	/^template<int _depth> class TypeDepth$/;"	c	namespace:cv
TypeId	ts/ts_gtest.h	/^typedef const void* TypeId;$/;"	t	namespace:testing::internal
TypeIdHelper	ts/ts_gtest.h	/^class TypeIdHelper {$/;"	c	namespace:testing::internal
TypeKind	ts/ts_gtest.h	/^enum TypeKind {$/;"	g	namespace:testing::internal2
TypeList	ts/ts_gtest.h	/^struct TypeList {$/;"	s	namespace:testing::internal
TypeList	ts/ts_gtest.h	/^struct TypeList<Types<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13,$/;"	s	namespace:testing::internal
TypeParameterizedTest	ts/ts_gtest.h	/^class TypeParameterizedTest {$/;"	c	namespace:testing::internal
TypeParameterizedTest	ts/ts_gtest.h	/^class TypeParameterizedTest<Fixture, TestSel, Types0> {$/;"	c	namespace:testing::internal
TypeParameterizedTestCase	ts/ts_gtest.h	/^class TypeParameterizedTestCase {$/;"	c	namespace:testing::internal
TypeParameterizedTestCase	ts/ts_gtest.h	/^class TypeParameterizedTestCase<Fixture, Templates0, Types> {$/;"	c	namespace:testing::internal
TypeTraits	core/cuda/type_traits.hpp	/^    template <typename T> struct TypeTraits$/;"	s	namespace:cv::cuda::device
TypeTraits	cudev/util/type_traits.hpp	/^template <typename T> struct TypeTraits$/;"	s	namespace:cv::cudev
TypeVec	core/cuda/vec_traits.hpp	/^    template<> struct TypeVec<bool, 1> { typedef uchar vec_type; };$/;"	s	namespace:cv::cuda::device
TypeVec	core/cuda/vec_traits.hpp	/^    template<> struct TypeVec<bool, 2> { typedef uchar2 vec_type; };$/;"	s	namespace:cv::cuda::device
TypeVec	core/cuda/vec_traits.hpp	/^    template<> struct TypeVec<bool, 3> { typedef uchar3 vec_type; };$/;"	s	namespace:cv::cuda::device
TypeVec	core/cuda/vec_traits.hpp	/^    template<> struct TypeVec<bool, 4> { typedef uchar4 vec_type; };$/;"	s	namespace:cv::cuda::device
TypeVec	core/cuda/vec_traits.hpp	/^    template<> struct TypeVec<bool, 8> { typedef uchar8 vec_type; };$/;"	s	namespace:cv::cuda::device
TypeVec	core/cuda/vec_traits.hpp	/^    template<> struct TypeVec<schar, 1> { typedef schar vec_type; };$/;"	s	namespace:cv::cuda::device
TypeVec	core/cuda/vec_traits.hpp	/^    template<> struct TypeVec<schar, 2> { typedef char2 vec_type; };$/;"	s	namespace:cv::cuda::device
TypeVec	core/cuda/vec_traits.hpp	/^    template<> struct TypeVec<schar, 3> { typedef char3 vec_type; };$/;"	s	namespace:cv::cuda::device
TypeVec	core/cuda/vec_traits.hpp	/^    template<> struct TypeVec<schar, 4> { typedef char4 vec_type; };$/;"	s	namespace:cv::cuda::device
TypeVec	core/cuda/vec_traits.hpp	/^    template<> struct TypeVec<schar, 8> { typedef char8 vec_type; };$/;"	s	namespace:cv::cuda::device
TypeWithSize	ts/ts_gtest.h	/^class TypeWithSize {$/;"	c	namespace:std::tr1
TypeWithSize	ts/ts_gtest.h	/^class TypeWithSize<4> {$/;"	c	namespace:std::tr1
TypeWithSize	ts/ts_gtest.h	/^class TypeWithSize<8> {$/;"	c	namespace:std::tr1
TypeWithoutFormatter	ts/ts_gtest.h	/^class TypeWithoutFormatter {$/;"	c	namespace:testing::internal2
TypeWithoutFormatter	ts/ts_gtest.h	/^class TypeWithoutFormatter<T, kConvertibleToInteger> {$/;"	c	namespace:testing::internal2
TypeWithoutFormatter	ts/ts_gtest.h	/^class TypeWithoutFormatter<T, kProtobuf> {$/;"	c	namespace:testing::internal2
TypedTestCasePState	ts/ts_gtest.h	/^  TypedTestCasePState() : registered_(false) {}$/;"	f	class:testing::internal::TypedTestCasePState
TypedTestCasePState	ts/ts_gtest.h	/^class GTEST_API_ TypedTestCasePState {$/;"	c	namespace:testing::internal
Types	ml.hpp	/^    enum Types {$/;"	g	class:cv::ml::Boost
Types	ml.hpp	/^    enum Types {$/;"	g	class:cv::ml::EM
Types	ml.hpp	/^    enum Types {$/;"	g	class:cv::ml::SVM
Types	ml.hpp	/^    enum Types$/;"	g	class:cv::ml::KNearest
Types	ts/ts_gtest.h	/^struct Types {$/;"	s	namespace:testing
Types	ts/ts_gtest.h	/^struct Types<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15,$/;"	s	namespace:testing
Types	ts/ts_gtest.h	/^struct Types<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14,$/;"	s	namespace:testing
Types	ts/ts_gtest.h	/^struct Types<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13,$/;"	s	namespace:testing
Types	ts/ts_gtest.h	/^struct Types<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, internal::None,$/;"	s	namespace:testing
Types	ts/ts_gtest.h	/^struct Types<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, internal::None,$/;"	s	namespace:testing
Types	ts/ts_gtest.h	/^struct Types<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, internal::None,$/;"	s	namespace:testing
Types	ts/ts_gtest.h	/^struct Types<T1, T2, T3, T4, T5, T6, T7, T8, T9, internal::None,$/;"	s	namespace:testing
Types	ts/ts_gtest.h	/^struct Types<T1, T2, T3, T4, T5, T6, T7, T8, internal::None, internal::None,$/;"	s	namespace:testing
Types	ts/ts_gtest.h	/^struct Types<T1, T2, T3, T4, T5, T6, T7, internal::None, internal::None,$/;"	s	namespace:testing
Types	ts/ts_gtest.h	/^struct Types<T1, T2, T3, T4, T5, T6, internal::None, internal::None,$/;"	s	namespace:testing
Types	ts/ts_gtest.h	/^struct Types<T1, T2, T3, T4, T5, internal::None, internal::None,$/;"	s	namespace:testing
Types	ts/ts_gtest.h	/^struct Types<T1, T2, T3, T4, internal::None, internal::None, internal::None,$/;"	s	namespace:testing
Types	ts/ts_gtest.h	/^struct Types<T1, T2, T3, internal::None, internal::None, internal::None,$/;"	s	namespace:testing
Types	ts/ts_gtest.h	/^struct Types<T1, T2, internal::None, internal::None, internal::None,$/;"	s	namespace:testing
Types	ts/ts_gtest.h	/^struct Types<T1, internal::None, internal::None, internal::None,$/;"	s	namespace:testing
Types	ts/ts_gtest.h	/^struct Types<internal::None, internal::None, internal::None, internal::None,$/;"	s	namespace:testing
Types0	ts/ts_gtest.h	/^struct Types0 {};$/;"	s	namespace:testing::internal
Types1	ts/ts_gtest.h	/^struct Types1 {$/;"	s	namespace:testing::internal
Types10	ts/ts_gtest.h	/^struct Types10 {$/;"	s	namespace:testing::internal
Types11	ts/ts_gtest.h	/^struct Types11 {$/;"	s	namespace:testing::internal
Types12	ts/ts_gtest.h	/^struct Types12 {$/;"	s	namespace:testing::internal
Types13	ts/ts_gtest.h	/^struct Types13 {$/;"	s	namespace:testing::internal
Types14	ts/ts_gtest.h	/^struct Types14 {$/;"	s	namespace:testing::internal
Types15	ts/ts_gtest.h	/^struct Types15 {$/;"	s	namespace:testing::internal
Types16	ts/ts_gtest.h	/^struct Types16 {$/;"	s	namespace:testing::internal
Types17	ts/ts_gtest.h	/^struct Types17 {$/;"	s	namespace:testing::internal
Types18	ts/ts_gtest.h	/^struct Types18 {$/;"	s	namespace:testing::internal
Types19	ts/ts_gtest.h	/^struct Types19 {$/;"	s	namespace:testing::internal
Types2	ts/ts_gtest.h	/^struct Types2 {$/;"	s	namespace:testing::internal
Types20	ts/ts_gtest.h	/^struct Types20 {$/;"	s	namespace:testing::internal
Types21	ts/ts_gtest.h	/^struct Types21 {$/;"	s	namespace:testing::internal
Types22	ts/ts_gtest.h	/^struct Types22 {$/;"	s	namespace:testing::internal
Types23	ts/ts_gtest.h	/^struct Types23 {$/;"	s	namespace:testing::internal
Types24	ts/ts_gtest.h	/^struct Types24 {$/;"	s	namespace:testing::internal
Types25	ts/ts_gtest.h	/^struct Types25 {$/;"	s	namespace:testing::internal
Types26	ts/ts_gtest.h	/^struct Types26 {$/;"	s	namespace:testing::internal
Types27	ts/ts_gtest.h	/^struct Types27 {$/;"	s	namespace:testing::internal
Types28	ts/ts_gtest.h	/^struct Types28 {$/;"	s	namespace:testing::internal
Types29	ts/ts_gtest.h	/^struct Types29 {$/;"	s	namespace:testing::internal
Types3	ts/ts_gtest.h	/^struct Types3 {$/;"	s	namespace:testing::internal
Types30	ts/ts_gtest.h	/^struct Types30 {$/;"	s	namespace:testing::internal
Types31	ts/ts_gtest.h	/^struct Types31 {$/;"	s	namespace:testing::internal
Types32	ts/ts_gtest.h	/^struct Types32 {$/;"	s	namespace:testing::internal
Types33	ts/ts_gtest.h	/^struct Types33 {$/;"	s	namespace:testing::internal
Types34	ts/ts_gtest.h	/^struct Types34 {$/;"	s	namespace:testing::internal
Types35	ts/ts_gtest.h	/^struct Types35 {$/;"	s	namespace:testing::internal
Types36	ts/ts_gtest.h	/^struct Types36 {$/;"	s	namespace:testing::internal
Types37	ts/ts_gtest.h	/^struct Types37 {$/;"	s	namespace:testing::internal
Types38	ts/ts_gtest.h	/^struct Types38 {$/;"	s	namespace:testing::internal
Types39	ts/ts_gtest.h	/^struct Types39 {$/;"	s	namespace:testing::internal
Types4	ts/ts_gtest.h	/^struct Types4 {$/;"	s	namespace:testing::internal
Types40	ts/ts_gtest.h	/^struct Types40 {$/;"	s	namespace:testing::internal
Types41	ts/ts_gtest.h	/^struct Types41 {$/;"	s	namespace:testing::internal
Types42	ts/ts_gtest.h	/^struct Types42 {$/;"	s	namespace:testing::internal
Types43	ts/ts_gtest.h	/^struct Types43 {$/;"	s	namespace:testing::internal
Types44	ts/ts_gtest.h	/^struct Types44 {$/;"	s	namespace:testing::internal
Types45	ts/ts_gtest.h	/^struct Types45 {$/;"	s	namespace:testing::internal
Types46	ts/ts_gtest.h	/^struct Types46 {$/;"	s	namespace:testing::internal
Types47	ts/ts_gtest.h	/^struct Types47 {$/;"	s	namespace:testing::internal
Types48	ts/ts_gtest.h	/^struct Types48 {$/;"	s	namespace:testing::internal
Types49	ts/ts_gtest.h	/^struct Types49 {$/;"	s	namespace:testing::internal
Types5	ts/ts_gtest.h	/^struct Types5 {$/;"	s	namespace:testing::internal
Types50	ts/ts_gtest.h	/^struct Types50 {$/;"	s	namespace:testing::internal
Types6	ts/ts_gtest.h	/^struct Types6 {$/;"	s	namespace:testing::internal
Types7	ts/ts_gtest.h	/^struct Types7 {$/;"	s	namespace:testing::internal
Types8	ts/ts_gtest.h	/^struct Types8 {$/;"	s	namespace:testing::internal
Types9	ts/ts_gtest.h	/^struct Types9 {$/;"	s	namespace:testing::internal
TypesEquals	cudev/util/type_traits.hpp	/^template <typename A, typename B> struct TypesEquals$/;"	s	namespace:cv::cudev
TypesEquals	cudev/util/type_traits.hpp	/^template <typename A> struct TypesEquals<A, A>$/;"	s	namespace:cv::cudev
UCHAR	core.hpp	/^           UNSIGNED_INT=8, UINT64=9, UCHAR=11 };$/;"	e	enum:cv::Param::__anon404
UINT64	core.hpp	/^           UNSIGNED_INT=8, UINT64=9, UCHAR=11 };$/;"	e	enum:cv::Param::__anon404
UInt	ts/ts_gtest.h	/^  typedef unsigned __int64 UInt;$/;"	t	class:std::tr1::TypeWithSize
UInt	ts/ts_gtest.h	/^  typedef unsigned int UInt;$/;"	t	class:std::tr1::TypeWithSize
UInt	ts/ts_gtest.h	/^  typedef void UInt;$/;"	t	class:std::tr1::TypeWithSize
UInt32	ts/ts_gtest.h	/^typedef TypeWithSize<4>::UInt UInt32;$/;"	t	namespace:std::tr1
UInt64	ts/ts_gtest.h	/^typedef TypeWithSize<8>::UInt UInt64;$/;"	t	namespace:std::tr1
UMAT	core/mat.hpp	/^        UMAT              =10 << KIND_SHIFT,$/;"	e	enum:cv::_InputArray::__anon135
UMAT_UPLOAD_INPUT_PARAMETER	ts/ocl_test.hpp	311;"	d
UMAT_UPLOAD_OUTPUT_PARAMETER	ts/ocl_test.hpp	319;"	d
UMat	core/base.hpp	/^class CV_EXPORTS UMat;$/;"	m	namespace:cv	typeref:class:cv::CV_EXPORTS
UMat	core/mat.hpp	/^class CV_EXPORTS UMat$/;"	c	namespace:cv
UMat	core/mat.inl.hpp	/^UMat::UMat(Size _sz, int _type, UMatUsageFlags _usageFlags)$/;"	f	class:cv::UMat
UMat	core/mat.inl.hpp	/^UMat::UMat(Size _sz, int _type, const Scalar& _s, UMatUsageFlags _usageFlags)$/;"	f	class:cv::UMat
UMat	core/mat.inl.hpp	/^UMat::UMat(UMatUsageFlags _usageFlags)$/;"	f	class:cv::UMat
UMat	core/mat.inl.hpp	/^UMat::UMat(const UMat& m)$/;"	f	class:cv::UMat
UMat	core/mat.inl.hpp	/^UMat::UMat(const std::vector<_Tp>& vec, bool copyData)$/;"	f	class:cv::UMat
UMat	core/mat.inl.hpp	/^UMat::UMat(int _dims, const int* _sz, int _type, UMatUsageFlags _usageFlags)$/;"	f	class:cv::UMat
UMat	core/mat.inl.hpp	/^UMat::UMat(int _dims, const int* _sz, int _type, const Scalar& _s, UMatUsageFlags _usageFlags)$/;"	f	class:cv::UMat
UMat	core/mat.inl.hpp	/^UMat::UMat(int _rows, int _cols, int _type, UMatUsageFlags _usageFlags)$/;"	f	class:cv::UMat
UMat	core/mat.inl.hpp	/^UMat::UMat(int _rows, int _cols, int _type, const Scalar& _s, UMatUsageFlags _usageFlags)$/;"	f	class:cv::UMat
UMatData	core/mat.hpp	/^struct CV_EXPORTS UMatData$/;"	s	namespace:cv
UMatData	core/mat.hpp	/^struct CV_EXPORTS UMatData;$/;"	m	namespace:cv	typeref:struct:cv::CV_EXPORTS
UMatDataAutoLock	core/mat.hpp	/^struct CV_EXPORTS UMatDataAutoLock$/;"	s	namespace:cv
UMatDataAutoLock	core/mat.inl.hpp	/^inline UMatDataAutoLock::UMatDataAutoLock(UMatData* _u) : u(_u) { u->lock(); }$/;"	f	class:cv::UMatDataAutoLock
UMatUsageFlags	core/mat.hpp	/^enum UMatUsageFlags$/;"	g	namespace:cv
UNDEFINED	core/persistence.hpp	/^        UNDEFINED      = 0,$/;"	e	enum:cv::FileStorage::__anon100
UNIFORM	core.hpp	/^    enum { UNIFORM = 0,$/;"	e	enum:cv::RNG::__anon402
UNKNOWN_VENDOR	core/ocl.hpp	/^        UNKNOWN_VENDOR=0,$/;"	e	enum:cv::ocl::Device::__anon159
UNSIGNED_INT	core.hpp	/^           UNSIGNED_INT=8, UINT64=9, UCHAR=11 };$/;"	e	enum:cv::Param::__anon404
UPDATE_IMAGE_ELEMENT	videoio/cap_winrt.hpp	/^    UPDATE_IMAGE_ELEMENT,$/;"	e	enum:cv::__anon70
UPDATE_MODEL	ml.hpp	/^        UPDATE_MODEL = 1,$/;"	e	enum:cv::ml::StatModel::Flags
UPDATE_WEIGHTS	ml.hpp	/^        UPDATE_WEIGHTS = 1,$/;"	e	enum:cv::ml::ANN_MLP::TrainFlags
USAGE_ALLOCATE_DEVICE_MEMORY	core/mat.hpp	/^    USAGE_ALLOCATE_DEVICE_MEMORY = 1 << 1,$/;"	e	enum:cv::UMatUsageFlags
USAGE_ALLOCATE_HOST_MEMORY	core/mat.hpp	/^    USAGE_ALLOCATE_HOST_MEMORY = 1 << 0,$/;"	e	enum:cv::UMatUsageFlags
USAGE_ALLOCATE_SHARED_MEMORY	core/mat.hpp	/^    USAGE_ALLOCATE_SHARED_MEMORY = 1 << 2, \/\/ It is not equal to: USAGE_ALLOCATE_HOST_MEMORY | USAGE_ALLOCATE_DEVICE_MEMORY$/;"	e	enum:cv::UMatUsageFlags
USAGE_DEFAULT	core/mat.hpp	/^    USAGE_DEFAULT = 0,$/;"	e	enum:cv::UMatUsageFlags
USER	core/persistence.hpp	/^        USER      = 16, \/\/!< a registered object (e.g. a matrix)$/;"	e	enum:cv::FileNode::Type
USER_ALLOCATED	core/mat.hpp	/^        USER_ALLOCATED=32, DEVICE_MEM_MAPPED=64};$/;"	e	enum:cv::UMatData::__anon137
USE_AVG	core.hpp	/^                 USE_AVG     = 2  \/\/!$/;"	e	enum:cv::PCA::Flags
USE_UNORDERED_MAP	flann/lsh_table.h	44;"	d
USE_UNORDERED_MAP	flann/lsh_table.h	46;"	d
UnConst	core/cuda/detail/type_traits_detail.hpp	/^        template <class U> struct UnConst$/;"	s	namespace:cv::cuda::device::type_traits_detail
UnConst	core/cuda/detail/type_traits_detail.hpp	/^        template <class U> struct UnConst<const U&>$/;"	s	namespace:cv::cuda::device::type_traits_detail
UnConst	core/cuda/detail/type_traits_detail.hpp	/^        template <class U> struct UnConst<const U>$/;"	s	namespace:cv::cuda::device::type_traits_detail
UnConst	cudev/util/detail/type_traits.hpp	/^    template <class U> struct UnConst$/;"	s	namespace:cv::cudev::type_traits_detail
UnConst	cudev/util/detail/type_traits.hpp	/^    template <class U> struct UnConst<const U&>$/;"	s	namespace:cv::cudev::type_traits_detail
UnConst	cudev/util/detail/type_traits.hpp	/^    template <class U> struct UnConst<const U>$/;"	s	namespace:cv::cudev::type_traits_detail
UnOpShift	core/cuda/functional.hpp	/^        template <size_t src_elem_size, size_t dst_elem_size> struct UnOpShift { enum { shift = 1 }; };$/;"	s	namespace:cv::cuda::device::functional_detail
UnOpShift	core/cuda/functional.hpp	/^        template <size_t src_elem_size> struct UnOpShift<src_elem_size, 1> { enum { shift = 4 }; };$/;"	s	namespace:cv::cuda::device::functional_detail
UnOpShift	core/cuda/functional.hpp	/^        template <size_t src_elem_size> struct UnOpShift<src_elem_size, 2> { enum { shift = 2 }; };$/;"	s	namespace:cv::cuda::device::functional_detail
UnVolatile	core/cuda/detail/type_traits_detail.hpp	/^        template <class U> struct UnVolatile$/;"	s	namespace:cv::cuda::device::type_traits_detail
UnVolatile	core/cuda/detail/type_traits_detail.hpp	/^        template <class U> struct UnVolatile<volatile U&>$/;"	s	namespace:cv::cuda::device::type_traits_detail
UnVolatile	core/cuda/detail/type_traits_detail.hpp	/^        template <class U> struct UnVolatile<volatile U>$/;"	s	namespace:cv::cuda::device::type_traits_detail
UnVolatile	cudev/util/detail/type_traits.hpp	/^    template <class U> struct UnVolatile$/;"	s	namespace:cv::cudev::type_traits_detail
UnVolatile	cudev/util/detail/type_traits.hpp	/^    template <class U> struct UnVolatile<volatile U&>$/;"	s	namespace:cv::cudev::type_traits_detail
UnVolatile	cudev/util/detail/type_traits.hpp	/^    template <class U> struct UnVolatile<volatile U>$/;"	s	namespace:cv::cudev::type_traits_detail
UnaryNegate	cudev/functional/functional.hpp	/^template <class Predicate> struct UnaryNegate : unary_function<typename Predicate::argument_type, typename Predicate::result_type>$/;"	s	namespace:cv::cudev
UnaryReadWriteTraits	core/cuda/detail/transform_detail.hpp	/^        template <typename T, typename D, int shift> struct UnaryReadWriteTraits$/;"	s	namespace:cv::cuda::device::transform_detail
UnaryTransformPtr	cudev/ptr2d/transform.hpp	/^template <class SrcPtr, class Op> struct UnaryTransformPtr$/;"	s	namespace:cv::cudev
UnaryTransformPtrSz	cudev/ptr2d/transform.hpp	/^template <class SrcPtr, class Op> struct UnaryTransformPtrSz : UnaryTransformPtr<SrcPtr, Op>$/;"	s	namespace:cv::cudev
UnaryTupleAdapter	cudev/functional/tuple_adapter.hpp	/^template <class Op, int n> struct UnaryTupleAdapter$/;"	s	namespace:cv::cudev
Uncompressed_NV12	cudacodec.hpp	/^    Uncompressed_NV12   = (('N'<<24)|('V'<<16)|('1'<<8)|('2')),   \/\/!< Y,UV  (4:2:0)$/;"	e	enum:cv::cudacodec::Codec
Uncompressed_UYVY	cudacodec.hpp	/^    Uncompressed_UYVY   = (('U'<<24)|('Y'<<16)|('V'<<8)|('Y'))    \/\/!< UYVY (4:2:2)$/;"	e	enum:cv::cudacodec::Codec
Uncompressed_YUV420	cudacodec.hpp	/^    Uncompressed_YUV420 = (('I'<<24)|('Y'<<16)|('U'<<8)|('V')),   \/\/!< Y,U,V (4:2:0)$/;"	e	enum:cv::cudacodec::Codec
Uncompressed_YUYV	cudacodec.hpp	/^    Uncompressed_YUYV   = (('Y'<<24)|('U'<<16)|('Y'<<8)|('V')),   \/\/!< YUYV\/YUY2 (4:2:2)$/;"	e	enum:cv::cudacodec::Codec
Uncompressed_YV12	cudacodec.hpp	/^    Uncompressed_YV12   = (('Y'<<24)|('V'<<16)|('1'<<8)|('2')),   \/\/!< Y,V,U (4:2:0)$/;"	e	enum:cv::cudacodec::Codec
UndistortTypes	imgproc.hpp	/^enum UndistortTypes {$/;"	g	namespace:cv
UniqueRandom	flann/random.h	/^    UniqueRandom(int n)$/;"	f	class:cvflann::UniqueRandom
UniqueRandom	flann/random.h	/^class UniqueRandom$/;"	c	namespace:cvflann
UniqueResultSet	flann/result_set.h	/^    UniqueResultSet() :$/;"	f	class:cvflann::UniqueResultSet
UniqueResultSet	flann/result_set.h	/^class UniqueResultSet : public ResultSet<DistanceType>$/;"	c	namespace:cvflann
UnitTest	ts/ts_gtest.h	/^class GTEST_API_ UnitTest {$/;"	c	namespace:testing
UniversalPrint	ts/ts_gtest.h	/^void UniversalPrint(const T& value, ::std::ostream* os) {$/;"	f	namespace:testing::internal
UniversalPrintArray	ts/ts_gtest.h	/^void UniversalPrintArray(const T* begin, size_t len, ::std::ostream* os) {$/;"	f	namespace:testing::internal
UniversalPrinter	ts/ts_gtest.h	/^class UniversalPrinter {$/;"	c	namespace:testing::internal
UniversalPrinter	ts/ts_gtest.h	/^class UniversalPrinter<T&> {$/;"	c	namespace:testing::internal
UniversalPrinter	ts/ts_gtest.h	/^class UniversalPrinter<T[N]> {$/;"	c	namespace:testing::internal
UniversalTersePrint	ts/ts_gtest.h	/^void UniversalTersePrint(const T& value, ::std::ostream* os) {$/;"	f	namespace:testing::internal
UniversalTersePrintTupleFieldsToStrings	ts/ts_gtest.h	/^Strings UniversalTersePrintTupleFieldsToStrings(const Tuple& value) {$/;"	f	namespace:testing::internal
UniversalTersePrinter	ts/ts_gtest.h	/^class UniversalTersePrinter {$/;"	c	namespace:testing::internal
UniversalTersePrinter	ts/ts_gtest.h	/^class UniversalTersePrinter<T&> {$/;"	c	namespace:testing::internal
UniversalTersePrinter	ts/ts_gtest.h	/^class UniversalTersePrinter<T[N]> {$/;"	c	namespace:testing::internal
UniversalTersePrinter	ts/ts_gtest.h	/^class UniversalTersePrinter<char*> {$/;"	c	namespace:testing::internal
UniversalTersePrinter	ts/ts_gtest.h	/^class UniversalTersePrinter<const char*> {$/;"	c	namespace:testing::internal
UniversalTersePrinter	ts/ts_gtest.h	/^class UniversalTersePrinter<const wchar_t*> {$/;"	c	namespace:testing::internal
UniversalTersePrinter	ts/ts_gtest.h	/^class UniversalTersePrinter<wchar_t*> {$/;"	c	namespace:testing::internal
Unknown	hal.hpp	/^    Unknown = -1$/;"	e	enum:cv::hal::Error::__anon419
Unlock	ts/ts_gtest.h	/^  void Unlock() {$/;"	f	class:std::tr1::MutexBase
Unlock	ts/ts_gtest.h	/^  void Unlock() {}$/;"	f	class:std::tr1::Mutex
UnqualifiedType	core/cuda/type_traits.hpp	/^        typedef typename type_traits_detail::UnVolatile<typename type_traits_detail::UnConst<T>::type>::type UnqualifiedType;$/;"	t	struct:cv::cuda::device::TypeTraits
Unroll	core/cuda/detail/reduce.hpp	/^        struct Unroll$/;"	s	namespace:cv::cuda::device::reduce_detail
Unroll	core/cuda/detail/reduce.hpp	/^        struct Unroll<0, Pointer, Reference, Op>$/;"	s	namespace:cv::cuda::device::reduce_detail
Unroll	core/cuda/detail/reduce_key_val.hpp	/^        struct Unroll$/;"	s	namespace:cv::cuda::device::reduce_key_val_detail
Unroll	core/cuda/detail/reduce_key_val.hpp	/^        struct Unroll<0, KP, KR, VP, VR, Cmp>$/;"	s	namespace:cv::cuda::device::reduce_key_val_detail
Unroll	cudev/block/detail/reduce.hpp	/^    template <int I, typename Pointer, typename Reference, class Op> struct Unroll$/;"	s	namespace:cv::cudev::block_reduce_detail
Unroll	cudev/block/detail/reduce.hpp	/^    template <typename Pointer, typename Reference, class Op> struct Unroll<0, Pointer, Reference, Op>$/;"	s	namespace:cv::cudev::block_reduce_detail
Unroll	cudev/block/detail/reduce_key_val.hpp	/^    template <class KP, class KR, class VP, class VR, class Cmp> struct Unroll<0, KP, KR, VP, VR, Cmp>$/;"	s	namespace:cv::cudev::block_reduce_key_val_detail
Unroll	cudev/block/detail/reduce_key_val.hpp	/^    template <int I, class KP, class KR, class VP, class VR, class Cmp> struct Unroll$/;"	s	namespace:cv::cudev::block_reduce_key_val_detail
Unroll	cudev/grid/detail/copy.hpp	/^    template <> struct Unroll<0>$/;"	s	namespace:cv::cudev::grid_copy_detail
Unroll	cudev/grid/detail/copy.hpp	/^    template <int count> struct Unroll$/;"	s	namespace:cv::cudev::grid_copy_detail
Unroll	cudev/grid/detail/reduce.hpp	/^    template <> struct Unroll<1>$/;"	s	namespace:cv::cudev::grid_reduce_detail
Unroll	cudev/grid/detail/reduce.hpp	/^    template <> struct Unroll<2>$/;"	s	namespace:cv::cudev::grid_reduce_detail
Unroll	cudev/grid/detail/reduce.hpp	/^    template <> struct Unroll<3>$/;"	s	namespace:cv::cudev::grid_reduce_detail
Unroll	cudev/grid/detail/reduce.hpp	/^    template <> struct Unroll<4>$/;"	s	namespace:cv::cudev::grid_reduce_detail
Unroll	cudev/grid/detail/transform.hpp	/^    template <> struct Unroll<0>$/;"	s	namespace:cv::cudev::grid_transform_detail
Unroll	cudev/grid/detail/transform.hpp	/^    template <int count> struct Unroll$/;"	s	namespace:cv::cudev::grid_transform_detail
UnrollVecDiffCached	core/cuda/detail/vec_distance_detail.hpp	/^        template <int THREAD_DIM, int N> struct UnrollVecDiffCached$/;"	s	namespace:cv::cuda::device::vec_distance_detail
UnrollVecDiffCached	core/cuda/detail/vec_distance_detail.hpp	/^        template <int THREAD_DIM> struct UnrollVecDiffCached<THREAD_DIM, 0>$/;"	s	namespace:cv::cuda::device::vec_distance_detail
UntypedMatrix	flann/matrix.h	/^    UntypedMatrix(void* data_, long rows_, long cols_) :$/;"	f	class:cvflann::UntypedMatrix
UntypedMatrix	flann/matrix.h	/^class UntypedMatrix$/;"	c	namespace:cvflann
UseRoi	ts/cuda_test.hpp	/^        inline UseRoi(bool val = false) : val_(val) {}$/;"	f	class:cvtest::UseRoi
UseRoi	ts/cuda_test.hpp	/^    class UseRoi$/;"	c	namespace:cvtest
UserThreadFunc	ts/ts_gtest.h	/^  typedef void (*UserThreadFunc)(T);$/;"	t	class:std::tr1::ThreadWithParam
VALUE	cudev/util/type_traits.hpp	/^    enum { value = Log2<N, (CURRENT_VAL >> 1), COUNT + 1>::VALUE };$/;"	e	class:cv::cudev::Log2::__anon369::COUNT
VALUE_EXPECTED	core/persistence.hpp	/^        VALUE_EXPECTED = 1,$/;"	e	enum:cv::FileStorage::__anon100
VAR_CATEGORICAL	ml.hpp	/^    VAR_CATEGORICAL  =1  \/\/!< categorical variables$/;"	e	enum:cv::ml::VariableTypes
VAR_NUMERICAL	ml.hpp	/^    VAR_NUMERICAL    =0, \/\/!< same as VAR_ORDERED$/;"	e	enum:cv::ml::VariableTypes
VAR_ORDERED	ml.hpp	/^    VAR_ORDERED      =0, \/\/!< ordered variables$/;"	e	enum:cv::ml::VariableTypes
VC1	cudacodec.hpp	/^    VC1,$/;"	e	enum:cv::cudacodec::Codec
VENDOR_AMD	core/ocl.hpp	/^        VENDOR_AMD=1,$/;"	e	enum:cv::ocl::Device::__anon159
VENDOR_INTEL	core/ocl.hpp	/^        VENDOR_INTEL=2,$/;"	e	enum:cv::ocl::Device::__anon159
VENDOR_NVIDIA	core/ocl.hpp	/^        VENDOR_NVIDIA=3$/;"	e	enum:cv::ocl::Device::__anon159
VIDEOWRITER_PROP_FRAMEBYTES	videoio.hpp	/^       VIDEOWRITER_PROP_FRAMEBYTES = 2, \/\/ (Read-only): Size of just encoded video frame$/;"	e	enum:cv::__anon440
VIDEOWRITER_PROP_QUALITY	videoio.hpp	/^enum { VIDEOWRITER_PROP_QUALITY = 1,    \/\/ Quality (0..100%) of the videostream encoded$/;"	e	enum:cv::__anon440
VScroll	viz/types.hpp	/^            enum MouseButton { NoButton = 0, LeftButton, MiddleButton, RightButton, VScroll } ;$/;"	e	enum:cv::viz::MouseEvent::MouseButton
V_TypeTraits	hal/intrin.hpp	/^template<> struct V_TypeTraits<double>$/;"	s	namespace:cv
V_TypeTraits	hal/intrin.hpp	/^template<> struct V_TypeTraits<float>$/;"	s	namespace:cv
V_TypeTraits	hal/intrin.hpp	/^template<> struct V_TypeTraits<int64>$/;"	s	namespace:cv
V_TypeTraits	hal/intrin.hpp	/^template<> struct V_TypeTraits<int>$/;"	s	namespace:cv
V_TypeTraits	hal/intrin.hpp	/^template<> struct V_TypeTraits<schar>$/;"	s	namespace:cv
V_TypeTraits	hal/intrin.hpp	/^template<> struct V_TypeTraits<short>$/;"	s	namespace:cv
V_TypeTraits	hal/intrin.hpp	/^template<> struct V_TypeTraits<uchar>$/;"	s	namespace:cv
V_TypeTraits	hal/intrin.hpp	/^template<> struct V_TypeTraits<uint64>$/;"	s	namespace:cv
V_TypeTraits	hal/intrin.hpp	/^template<> struct V_TypeTraits<unsigned>$/;"	s	namespace:cv
V_TypeTraits	hal/intrin.hpp	/^template<> struct V_TypeTraits<ushort>$/;"	s	namespace:cv
V_TypeTraits	hal/intrin.hpp	/^template<typename _Tp> struct V_TypeTraits$/;"	s	namespace:cv
Value	core/opencl/opencl_svm.hpp	/^    enum Value$/;"	g	struct:cv::ocl::svm::SVMCapabilities
ValueArray1	ts/ts_gtest.h	/^  explicit ValueArray1(T1 v1) : v1_(v1) {}$/;"	f	class:testing::internal::ValueArray1
ValueArray1	ts/ts_gtest.h	/^class ValueArray1 {$/;"	c	namespace:testing::internal
ValueArray10	ts/ts_gtest.h	/^  ValueArray10(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray10
ValueArray10	ts/ts_gtest.h	/^class ValueArray10 {$/;"	c	namespace:testing::internal
ValueArray11	ts/ts_gtest.h	/^  ValueArray11(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray11
ValueArray11	ts/ts_gtest.h	/^class ValueArray11 {$/;"	c	namespace:testing::internal
ValueArray12	ts/ts_gtest.h	/^  ValueArray12(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray12
ValueArray12	ts/ts_gtest.h	/^class ValueArray12 {$/;"	c	namespace:testing::internal
ValueArray13	ts/ts_gtest.h	/^  ValueArray13(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray13
ValueArray13	ts/ts_gtest.h	/^class ValueArray13 {$/;"	c	namespace:testing::internal
ValueArray14	ts/ts_gtest.h	/^  ValueArray14(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray14
ValueArray14	ts/ts_gtest.h	/^class ValueArray14 {$/;"	c	namespace:testing::internal
ValueArray15	ts/ts_gtest.h	/^  ValueArray15(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray15
ValueArray15	ts/ts_gtest.h	/^class ValueArray15 {$/;"	c	namespace:testing::internal
ValueArray16	ts/ts_gtest.h	/^  ValueArray16(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray16
ValueArray16	ts/ts_gtest.h	/^class ValueArray16 {$/;"	c	namespace:testing::internal
ValueArray17	ts/ts_gtest.h	/^  ValueArray17(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray17
ValueArray17	ts/ts_gtest.h	/^class ValueArray17 {$/;"	c	namespace:testing::internal
ValueArray18	ts/ts_gtest.h	/^  ValueArray18(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray18
ValueArray18	ts/ts_gtest.h	/^class ValueArray18 {$/;"	c	namespace:testing::internal
ValueArray19	ts/ts_gtest.h	/^  ValueArray19(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray19
ValueArray19	ts/ts_gtest.h	/^class ValueArray19 {$/;"	c	namespace:testing::internal
ValueArray2	ts/ts_gtest.h	/^  ValueArray2(T1 v1, T2 v2) : v1_(v1), v2_(v2) {}$/;"	f	class:testing::internal::ValueArray2
ValueArray2	ts/ts_gtest.h	/^class ValueArray2 {$/;"	c	namespace:testing::internal
ValueArray20	ts/ts_gtest.h	/^  ValueArray20(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray20
ValueArray20	ts/ts_gtest.h	/^class ValueArray20 {$/;"	c	namespace:testing::internal
ValueArray21	ts/ts_gtest.h	/^  ValueArray21(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray21
ValueArray21	ts/ts_gtest.h	/^class ValueArray21 {$/;"	c	namespace:testing::internal
ValueArray22	ts/ts_gtest.h	/^  ValueArray22(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray22
ValueArray22	ts/ts_gtest.h	/^class ValueArray22 {$/;"	c	namespace:testing::internal
ValueArray23	ts/ts_gtest.h	/^  ValueArray23(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray23
ValueArray23	ts/ts_gtest.h	/^class ValueArray23 {$/;"	c	namespace:testing::internal
ValueArray24	ts/ts_gtest.h	/^  ValueArray24(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray24
ValueArray24	ts/ts_gtest.h	/^class ValueArray24 {$/;"	c	namespace:testing::internal
ValueArray25	ts/ts_gtest.h	/^  ValueArray25(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray25
ValueArray25	ts/ts_gtest.h	/^class ValueArray25 {$/;"	c	namespace:testing::internal
ValueArray26	ts/ts_gtest.h	/^  ValueArray26(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray26
ValueArray26	ts/ts_gtest.h	/^class ValueArray26 {$/;"	c	namespace:testing::internal
ValueArray27	ts/ts_gtest.h	/^  ValueArray27(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray27
ValueArray27	ts/ts_gtest.h	/^class ValueArray27 {$/;"	c	namespace:testing::internal
ValueArray28	ts/ts_gtest.h	/^  ValueArray28(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray28
ValueArray28	ts/ts_gtest.h	/^class ValueArray28 {$/;"	c	namespace:testing::internal
ValueArray29	ts/ts_gtest.h	/^  ValueArray29(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray29
ValueArray29	ts/ts_gtest.h	/^class ValueArray29 {$/;"	c	namespace:testing::internal
ValueArray3	ts/ts_gtest.h	/^  ValueArray3(T1 v1, T2 v2, T3 v3) : v1_(v1), v2_(v2), v3_(v3) {}$/;"	f	class:testing::internal::ValueArray3
ValueArray3	ts/ts_gtest.h	/^class ValueArray3 {$/;"	c	namespace:testing::internal
ValueArray30	ts/ts_gtest.h	/^  ValueArray30(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray30
ValueArray30	ts/ts_gtest.h	/^class ValueArray30 {$/;"	c	namespace:testing::internal
ValueArray31	ts/ts_gtest.h	/^  ValueArray31(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray31
ValueArray31	ts/ts_gtest.h	/^class ValueArray31 {$/;"	c	namespace:testing::internal
ValueArray32	ts/ts_gtest.h	/^  ValueArray32(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray32
ValueArray32	ts/ts_gtest.h	/^class ValueArray32 {$/;"	c	namespace:testing::internal
ValueArray33	ts/ts_gtest.h	/^  ValueArray33(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray33
ValueArray33	ts/ts_gtest.h	/^class ValueArray33 {$/;"	c	namespace:testing::internal
ValueArray34	ts/ts_gtest.h	/^  ValueArray34(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray34
ValueArray34	ts/ts_gtest.h	/^class ValueArray34 {$/;"	c	namespace:testing::internal
ValueArray35	ts/ts_gtest.h	/^  ValueArray35(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray35
ValueArray35	ts/ts_gtest.h	/^class ValueArray35 {$/;"	c	namespace:testing::internal
ValueArray36	ts/ts_gtest.h	/^  ValueArray36(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray36
ValueArray36	ts/ts_gtest.h	/^class ValueArray36 {$/;"	c	namespace:testing::internal
ValueArray37	ts/ts_gtest.h	/^  ValueArray37(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray37
ValueArray37	ts/ts_gtest.h	/^class ValueArray37 {$/;"	c	namespace:testing::internal
ValueArray38	ts/ts_gtest.h	/^  ValueArray38(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray38
ValueArray38	ts/ts_gtest.h	/^class ValueArray38 {$/;"	c	namespace:testing::internal
ValueArray39	ts/ts_gtest.h	/^  ValueArray39(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray39
ValueArray39	ts/ts_gtest.h	/^class ValueArray39 {$/;"	c	namespace:testing::internal
ValueArray4	ts/ts_gtest.h	/^  ValueArray4(T1 v1, T2 v2, T3 v3, T4 v4) : v1_(v1), v2_(v2), v3_(v3),$/;"	f	class:testing::internal::ValueArray4
ValueArray4	ts/ts_gtest.h	/^class ValueArray4 {$/;"	c	namespace:testing::internal
ValueArray40	ts/ts_gtest.h	/^  ValueArray40(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray40
ValueArray40	ts/ts_gtest.h	/^class ValueArray40 {$/;"	c	namespace:testing::internal
ValueArray41	ts/ts_gtest.h	/^  ValueArray41(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray41
ValueArray41	ts/ts_gtest.h	/^class ValueArray41 {$/;"	c	namespace:testing::internal
ValueArray42	ts/ts_gtest.h	/^  ValueArray42(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray42
ValueArray42	ts/ts_gtest.h	/^class ValueArray42 {$/;"	c	namespace:testing::internal
ValueArray43	ts/ts_gtest.h	/^  ValueArray43(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray43
ValueArray43	ts/ts_gtest.h	/^class ValueArray43 {$/;"	c	namespace:testing::internal
ValueArray44	ts/ts_gtest.h	/^  ValueArray44(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray44
ValueArray44	ts/ts_gtest.h	/^class ValueArray44 {$/;"	c	namespace:testing::internal
ValueArray45	ts/ts_gtest.h	/^  ValueArray45(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray45
ValueArray45	ts/ts_gtest.h	/^class ValueArray45 {$/;"	c	namespace:testing::internal
ValueArray46	ts/ts_gtest.h	/^  ValueArray46(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray46
ValueArray46	ts/ts_gtest.h	/^class ValueArray46 {$/;"	c	namespace:testing::internal
ValueArray47	ts/ts_gtest.h	/^  ValueArray47(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray47
ValueArray47	ts/ts_gtest.h	/^class ValueArray47 {$/;"	c	namespace:testing::internal
ValueArray48	ts/ts_gtest.h	/^  ValueArray48(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray48
ValueArray48	ts/ts_gtest.h	/^class ValueArray48 {$/;"	c	namespace:testing::internal
ValueArray49	ts/ts_gtest.h	/^  ValueArray49(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray49
ValueArray49	ts/ts_gtest.h	/^class ValueArray49 {$/;"	c	namespace:testing::internal
ValueArray5	ts/ts_gtest.h	/^  ValueArray5(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5) : v1_(v1), v2_(v2), v3_(v3),$/;"	f	class:testing::internal::ValueArray5
ValueArray5	ts/ts_gtest.h	/^class ValueArray5 {$/;"	c	namespace:testing::internal
ValueArray50	ts/ts_gtest.h	/^  ValueArray50(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray50
ValueArray50	ts/ts_gtest.h	/^class ValueArray50 {$/;"	c	namespace:testing::internal
ValueArray6	ts/ts_gtest.h	/^  ValueArray6(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6) : v1_(v1), v2_(v2),$/;"	f	class:testing::internal::ValueArray6
ValueArray6	ts/ts_gtest.h	/^class ValueArray6 {$/;"	c	namespace:testing::internal
ValueArray7	ts/ts_gtest.h	/^  ValueArray7(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7) : v1_(v1),$/;"	f	class:testing::internal::ValueArray7
ValueArray7	ts/ts_gtest.h	/^class ValueArray7 {$/;"	c	namespace:testing::internal
ValueArray8	ts/ts_gtest.h	/^  ValueArray8(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7,$/;"	f	class:testing::internal::ValueArray8
ValueArray8	ts/ts_gtest.h	/^class ValueArray8 {$/;"	c	namespace:testing::internal
ValueArray9	ts/ts_gtest.h	/^  ValueArray9(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8,$/;"	f	class:testing::internal::ValueArray9
ValueArray9	ts/ts_gtest.h	/^class ValueArray9 {$/;"	c	namespace:testing::internal
ValueHolder	ts/ts_gtest.h	/^    explicit ValueHolder(const T& value) : value_(value) {}$/;"	f	class:std::tr1::ThreadLocal::ValueHolder
ValueHolder	ts/ts_gtest.h	/^  class ValueHolder : public ThreadLocalValueHolderBase {$/;"	c	class:std::tr1::ThreadLocal
ValueType	core/base.hpp	/^    typedef unsigned char ValueType;$/;"	t	struct:cv::Hamming
ValueType	features2d.hpp	/^    typedef T ValueType;$/;"	t	struct:cv::L1
ValueType	features2d.hpp	/^    typedef T ValueType;$/;"	t	struct:cv::L2
ValueType	features2d.hpp	/^    typedef T ValueType;$/;"	t	struct:cv::SL2
Values	ts/ts_gtest.h	/^    T11> Values(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	namespace:testing
Values	ts/ts_gtest.h	/^    T12> Values(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	namespace:testing
Values	ts/ts_gtest.h	/^    T13> Values(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	namespace:testing
Values	ts/ts_gtest.h	/^    T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25> Values(T1 v1,$/;"	f	namespace:testing
Values	ts/ts_gtest.h	/^    T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> Values(T1 v1, T2 v2,$/;"	f	namespace:testing
Values	ts/ts_gtest.h	/^    T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> Values(T1 v1, T2 v2,$/;"	f	namespace:testing
Values	ts/ts_gtest.h	/^    T14, T15, T16, T17, T18, T19, T20, T21, T22> Values(T1 v1, T2 v2, T3 v3,$/;"	f	namespace:testing
Values	ts/ts_gtest.h	/^    T14, T15, T16, T17, T18, T19, T20, T21> Values(T1 v1, T2 v2, T3 v3, T4 v4,$/;"	f	namespace:testing
Values	ts/ts_gtest.h	/^    T14, T15, T16, T17, T18, T19, T20> Values(T1 v1, T2 v2, T3 v3, T4 v4,$/;"	f	namespace:testing
Values	ts/ts_gtest.h	/^    T14, T15, T16, T17, T18, T19> Values(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5,$/;"	f	namespace:testing
Values	ts/ts_gtest.h	/^    T14, T15, T16, T17, T18> Values(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6,$/;"	f	namespace:testing
Values	ts/ts_gtest.h	/^    T14, T15, T16, T17> Values(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7,$/;"	f	namespace:testing
Values	ts/ts_gtest.h	/^    T14, T15, T16> Values(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7,$/;"	f	namespace:testing
Values	ts/ts_gtest.h	/^    T14, T15> Values(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8,$/;"	f	namespace:testing
Values	ts/ts_gtest.h	/^    T14> Values(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	namespace:testing
Values	ts/ts_gtest.h	/^    T26> Values(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	namespace:testing
Values	ts/ts_gtest.h	/^    T27> Values(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	namespace:testing
Values	ts/ts_gtest.h	/^    T28> Values(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	namespace:testing
Values	ts/ts_gtest.h	/^    T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40> Values(T1 v1,$/;"	f	namespace:testing
Values	ts/ts_gtest.h	/^    T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39> Values(T1 v1, T2 v2,$/;"	f	namespace:testing
Values	ts/ts_gtest.h	/^    T29, T30, T31, T32, T33, T34, T35, T36, T37, T38> Values(T1 v1, T2 v2,$/;"	f	namespace:testing
Values	ts/ts_gtest.h	/^    T29, T30, T31, T32, T33, T34, T35, T36, T37> Values(T1 v1, T2 v2, T3 v3,$/;"	f	namespace:testing
Values	ts/ts_gtest.h	/^    T29, T30, T31, T32, T33, T34, T35, T36> Values(T1 v1, T2 v2, T3 v3, T4 v4,$/;"	f	namespace:testing
Values	ts/ts_gtest.h	/^    T29, T30, T31, T32, T33, T34, T35> Values(T1 v1, T2 v2, T3 v3, T4 v4,$/;"	f	namespace:testing
Values	ts/ts_gtest.h	/^    T29, T30, T31, T32, T33, T34> Values(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5,$/;"	f	namespace:testing
Values	ts/ts_gtest.h	/^    T29, T30, T31, T32, T33> Values(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6,$/;"	f	namespace:testing
Values	ts/ts_gtest.h	/^    T29, T30, T31, T32> Values(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7,$/;"	f	namespace:testing
Values	ts/ts_gtest.h	/^    T29, T30, T31> Values(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7,$/;"	f	namespace:testing
Values	ts/ts_gtest.h	/^    T29, T30> Values(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8,$/;"	f	namespace:testing
Values	ts/ts_gtest.h	/^    T29> Values(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	namespace:testing
Values	ts/ts_gtest.h	/^    T41> Values(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	namespace:testing
Values	ts/ts_gtest.h	/^    T42> Values(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	namespace:testing
Values	ts/ts_gtest.h	/^    T43> Values(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	namespace:testing
Values	ts/ts_gtest.h	/^    T44, T45, T46, T47, T48, T49, T50> Values(T1 v1, T2 v2, T3 v3, T4 v4,$/;"	f	namespace:testing
Values	ts/ts_gtest.h	/^    T44, T45, T46, T47, T48, T49> Values(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5,$/;"	f	namespace:testing
Values	ts/ts_gtest.h	/^    T44, T45, T46, T47, T48> Values(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6,$/;"	f	namespace:testing
Values	ts/ts_gtest.h	/^    T44, T45, T46, T47> Values(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7,$/;"	f	namespace:testing
Values	ts/ts_gtest.h	/^    T44, T45, T46> Values(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7,$/;"	f	namespace:testing
Values	ts/ts_gtest.h	/^    T44, T45> Values(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8,$/;"	f	namespace:testing
Values	ts/ts_gtest.h	/^    T44> Values(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	namespace:testing
Values	ts/ts_gtest.h	/^internal::ValueArray10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> Values(T1 v1,$/;"	f	namespace:testing
Values	ts/ts_gtest.h	/^internal::ValueArray1<T1> Values(T1 v1) {$/;"	f	namespace:testing
Values	ts/ts_gtest.h	/^internal::ValueArray2<T1, T2> Values(T1 v1, T2 v2) {$/;"	f	namespace:testing
Values	ts/ts_gtest.h	/^internal::ValueArray3<T1, T2, T3> Values(T1 v1, T2 v2, T3 v3) {$/;"	f	namespace:testing
Values	ts/ts_gtest.h	/^internal::ValueArray4<T1, T2, T3, T4> Values(T1 v1, T2 v2, T3 v3, T4 v4) {$/;"	f	namespace:testing
Values	ts/ts_gtest.h	/^internal::ValueArray5<T1, T2, T3, T4, T5> Values(T1 v1, T2 v2, T3 v3, T4 v4,$/;"	f	namespace:testing
Values	ts/ts_gtest.h	/^internal::ValueArray6<T1, T2, T3, T4, T5, T6> Values(T1 v1, T2 v2, T3 v3,$/;"	f	namespace:testing
Values	ts/ts_gtest.h	/^internal::ValueArray7<T1, T2, T3, T4, T5, T6, T7> Values(T1 v1, T2 v2, T3 v3,$/;"	f	namespace:testing
Values	ts/ts_gtest.h	/^internal::ValueArray8<T1, T2, T3, T4, T5, T6, T7, T8> Values(T1 v1, T2 v2,$/;"	f	namespace:testing
Values	ts/ts_gtest.h	/^internal::ValueArray9<T1, T2, T3, T4, T5, T6, T7, T8, T9> Values(T1 v1, T2 v2,$/;"	f	namespace:testing
ValuesIn	ts/ts_gtest.h	/^ValuesIn(ForwardIterator begin, ForwardIterator end) {$/;"	f	namespace:testing
ValuesIn	ts/ts_gtest.h	/^internal::ParamGenerator<typename Container::value_type> ValuesIn($/;"	f	namespace:testing
ValuesInIteratorRangeGenerator	ts/ts_gtest.h	/^  ValuesInIteratorRangeGenerator(ForwardIterator begin, ForwardIterator end)$/;"	f	class:testing::internal::ValuesInIteratorRangeGenerator
ValuesInIteratorRangeGenerator	ts/ts_gtest.h	/^class ValuesInIteratorRangeGenerator : public ParamGeneratorInterface<T> {$/;"	c	namespace:testing::internal
VariableTypes	ml.hpp	/^enum VariableTypes$/;"	g	namespace:cv::ml
Vec	core/matx.hpp	/^Vec<_Tp, cn>::Vec() {}$/;"	f	class:cv::Vec
Vec	core/matx.hpp	/^Vec<_Tp, cn>::Vec(_Tp v0)$/;"	f	class:cv::Vec
Vec	core/matx.hpp	/^Vec<_Tp, cn>::Vec(_Tp v0, _Tp v1)$/;"	f	class:cv::Vec
Vec	core/matx.hpp	/^Vec<_Tp, cn>::Vec(_Tp v0, _Tp v1, _Tp v2)$/;"	f	class:cv::Vec
Vec	core/matx.hpp	/^Vec<_Tp, cn>::Vec(_Tp v0, _Tp v1, _Tp v2, _Tp v3)$/;"	f	class:cv::Vec
Vec	core/matx.hpp	/^Vec<_Tp, cn>::Vec(_Tp v0, _Tp v1, _Tp v2, _Tp v3, _Tp v4)$/;"	f	class:cv::Vec
Vec	core/matx.hpp	/^Vec<_Tp, cn>::Vec(_Tp v0, _Tp v1, _Tp v2, _Tp v3, _Tp v4, _Tp v5)$/;"	f	class:cv::Vec
Vec	core/matx.hpp	/^Vec<_Tp, cn>::Vec(_Tp v0, _Tp v1, _Tp v2, _Tp v3, _Tp v4, _Tp v5, _Tp v6)$/;"	f	class:cv::Vec
Vec	core/matx.hpp	/^Vec<_Tp, cn>::Vec(_Tp v0, _Tp v1, _Tp v2, _Tp v3, _Tp v4, _Tp v5, _Tp v6, _Tp v7)$/;"	f	class:cv::Vec
Vec	core/matx.hpp	/^Vec<_Tp, cn>::Vec(_Tp v0, _Tp v1, _Tp v2, _Tp v3, _Tp v4, _Tp v5, _Tp v6, _Tp v7, _Tp v8)$/;"	f	class:cv::Vec
Vec	core/matx.hpp	/^Vec<_Tp, cn>::Vec(_Tp v0, _Tp v1, _Tp v2, _Tp v3, _Tp v4, _Tp v5, _Tp v6, _Tp v7, _Tp v8, _Tp v9)$/;"	f	class:cv::Vec
Vec	core/matx.hpp	/^Vec<_Tp, cn>::Vec(const Matx<_Tp, cn, 1>& a, _T2 alpha, Matx_ScaleOp op)$/;"	f	class:cv::Vec
Vec	core/matx.hpp	/^Vec<_Tp, cn>::Vec(const Matx<_Tp, cn, 1>& a, const Matx<_Tp, cn, 1>& b, Matx_AddOp op)$/;"	f	class:cv::Vec
Vec	core/matx.hpp	/^Vec<_Tp, cn>::Vec(const Matx<_Tp, cn, 1>& a, const Matx<_Tp, cn, 1>& b, Matx_SubOp op)$/;"	f	class:cv::Vec
Vec	core/matx.hpp	/^Vec<_Tp, cn>::Vec(const Vec<_Tp, cn>& m)$/;"	f	class:cv::Vec
Vec	core/matx.hpp	/^Vec<_Tp, cn>::Vec(const _Tp* values)$/;"	f	class:cv::Vec
Vec	core/matx.hpp	/^template<typename _Tp, int cn> class Vec : public Matx<_Tp, cn, 1>$/;"	c	namespace:cv
Vec2b	core/matx.hpp	/^typedef Vec<uchar, 2> Vec2b;$/;"	t	namespace:cv
Vec2d	core/matx.hpp	/^typedef Vec<double, 2> Vec2d;$/;"	t	namespace:cv
Vec2f	core/matx.hpp	/^typedef Vec<float, 2> Vec2f;$/;"	t	namespace:cv
Vec2i	core/matx.hpp	/^typedef Vec<int, 2> Vec2i;$/;"	t	namespace:cv
Vec2s	core/matx.hpp	/^typedef Vec<short, 2> Vec2s;$/;"	t	namespace:cv
Vec2w	core/matx.hpp	/^typedef Vec<ushort, 2> Vec2w;$/;"	t	namespace:cv
Vec3	core/affine.hpp	/^        typedef Vec<float_type, 3> Vec3;$/;"	t	class:cv::Affine3
Vec3b	core/matx.hpp	/^typedef Vec<uchar, 3> Vec3b;$/;"	t	namespace:cv
Vec3d	core/matx.hpp	/^typedef Vec<double, 3> Vec3d;$/;"	t	namespace:cv
Vec3f	core/matx.hpp	/^typedef Vec<float, 3> Vec3f;$/;"	t	namespace:cv
Vec3i	core/matx.hpp	/^typedef Vec<int, 3> Vec3i;$/;"	t	namespace:cv
Vec3s	core/matx.hpp	/^typedef Vec<short, 3> Vec3s;$/;"	t	namespace:cv
Vec3w	core/matx.hpp	/^typedef Vec<ushort, 3> Vec3w;$/;"	t	namespace:cv
Vec4b	core/matx.hpp	/^typedef Vec<uchar, 4> Vec4b;$/;"	t	namespace:cv
Vec4d	core/matx.hpp	/^typedef Vec<double, 4> Vec4d;$/;"	t	namespace:cv
Vec4f	core/matx.hpp	/^typedef Vec<float, 4> Vec4f;$/;"	t	namespace:cv
Vec4i	core/matx.hpp	/^typedef Vec<int, 4> Vec4i;$/;"	t	namespace:cv
Vec4s	core/matx.hpp	/^typedef Vec<short, 4> Vec4s;$/;"	t	namespace:cv
Vec4w	core/matx.hpp	/^typedef Vec<ushort, 4> Vec4w;$/;"	t	namespace:cv
Vec6d	core/matx.hpp	/^typedef Vec<double, 6> Vec6d;$/;"	t	namespace:cv
Vec6f	core/matx.hpp	/^typedef Vec<float, 6> Vec6f;$/;"	t	namespace:cv
Vec6i	core/matx.hpp	/^typedef Vec<int, 6> Vec6i;$/;"	t	namespace:cv
Vec8i	core/matx.hpp	/^typedef Vec<int, 8> Vec8i;$/;"	t	namespace:cv
VecCommaInitializer	core/matx.hpp	/^VecCommaInitializer<_Tp, cn>::VecCommaInitializer(Vec<_Tp, cn>* _vec)$/;"	f	class:cv::VecCommaInitializer
VecCommaInitializer	core/matx.hpp	/^template<typename _Tp, int m> class VecCommaInitializer : public MatxCommaInitializer<_Tp, m, 1>$/;"	c	namespace:cv
VecDiffCachedCalculator	core/cuda/detail/vec_distance_detail.hpp	/^        template <int THREAD_DIM, int MAX_LEN> struct VecDiffCachedCalculator<THREAD_DIM, MAX_LEN, false>$/;"	s	namespace:cv::cuda::device::vec_distance_detail
VecDiffCachedCalculator	core/cuda/detail/vec_distance_detail.hpp	/^        template <int THREAD_DIM, int MAX_LEN> struct VecDiffCachedCalculator<THREAD_DIM, MAX_LEN, true>$/;"	s	namespace:cv::cuda::device::vec_distance_detail
VecDiffCachedRegister	core/cuda/vec_distance.hpp	/^        template <typename T1> __device__ __forceinline__ VecDiffCachedRegister(const T1* vec1, int len, U* smem, int glob_tid, int tid)$/;"	f	struct:cv::cuda::device::VecDiffCachedRegister
VecDiffCachedRegister	core/cuda/vec_distance.hpp	/^    template <int THREAD_DIM, int MAX_LEN, bool LEN_EQ_MAX_LEN, typename U> struct VecDiffCachedRegister$/;"	s	namespace:cv::cuda::device
VecDiffGlobal	core/cuda/vec_distance.hpp	/^        explicit __device__ __forceinline__ VecDiffGlobal(const T1* vec1_, int = 0, void* = 0, int = 0, int = 0)$/;"	f	struct:cv::cuda::device::VecDiffGlobal
VecDiffGlobal	core/cuda/vec_distance.hpp	/^    template <int THREAD_DIM, typename T1> struct VecDiffGlobal$/;"	s	namespace:cv::cuda::device
VecReaderProxy	core/persistence.hpp	/^        VecReaderProxy( FileNodeIterator* _it ) : it(_it) {}$/;"	f	class:cv::internal::VecReaderProxy
VecReaderProxy	core/persistence.hpp	/^    template<typename _Tp, int numflag> class VecReaderProxy$/;"	c	namespace:cv::internal
VecReaderProxy	core/persistence.hpp	/^    template<typename _Tp> class VecReaderProxy<_Tp, 1>$/;"	c	namespace:cv::internal
VecTraits	core/cuda/vec_traits.hpp	/^    template<> struct VecTraits<char1>$/;"	s	namespace:cv::cuda::device
VecTraits	core/cuda/vec_traits.hpp	/^    template<> struct VecTraits<char2>$/;"	s	namespace:cv::cuda::device
VecTraits	core/cuda/vec_traits.hpp	/^    template<> struct VecTraits<char3>$/;"	s	namespace:cv::cuda::device
VecTraits	core/cuda/vec_traits.hpp	/^    template<> struct VecTraits<char4>$/;"	s	namespace:cv::cuda::device
VecTraits	core/cuda/vec_traits.hpp	/^    template<> struct VecTraits<char8>$/;"	s	namespace:cv::cuda::device
VecTraits	core/cuda/vec_traits.hpp	/^    template<> struct VecTraits<char>$/;"	s	namespace:cv::cuda::device
VecTraits	core/cuda/vec_traits.hpp	/^    template<> struct VecTraits<schar>$/;"	s	namespace:cv::cuda::device
VecTraits	cudev/util/vec_traits.hpp	/^template<> struct VecTraits<char1>$/;"	s	namespace:cv::cudev
VecTraits	cudev/util/vec_traits.hpp	/^template<> struct VecTraits<char2>$/;"	s	namespace:cv::cudev
VecTraits	cudev/util/vec_traits.hpp	/^template<> struct VecTraits<char3>$/;"	s	namespace:cv::cudev
VecTraits	cudev/util/vec_traits.hpp	/^template<> struct VecTraits<char4>$/;"	s	namespace:cv::cudev
VecTraits	cudev/util/vec_traits.hpp	/^template<> struct VecTraits<schar>$/;"	s	namespace:cv::cudev
VecWriterProxy	core/persistence.hpp	/^        VecWriterProxy( FileStorage* _fs ) : fs(_fs) {}$/;"	f	class:cv::internal::VecWriterProxy
VecWriterProxy	core/persistence.hpp	/^    template<typename _Tp, int numflag> class VecWriterProxy$/;"	c	namespace:cv::internal
VecWriterProxy	core/persistence.hpp	/^    template<typename _Tp> class VecWriterProxy<_Tp, 1>$/;"	c	namespace:cv::internal
Vertex	imgproc.hpp	/^    struct CV_EXPORTS Vertex$/;"	s	class:cv::Subdiv2D
VideoCapture	videoio.hpp	/^class CV_EXPORTS_W VideoCapture$/;"	c	namespace:cv
VideoFileSource	videostab/frame_source.hpp	/^class CV_EXPORTS VideoFileSource : public IFrameSource$/;"	c	namespace:cv::videostab
VideoReader	cudacodec.hpp	/^class CV_EXPORTS VideoReader$/;"	c	namespace:cv::cudacodec
VideoWriter	cudacodec.hpp	/^class CV_EXPORTS VideoWriter$/;"	c	namespace:cv::cudacodec
VideoWriter	videoio.hpp	/^class CV_EXPORTS_W VideoWriter$/;"	c	namespace:cv
View	core/wimage.hpp	/^WImageView<T> WImage<T>::View(int c, int r, int width, int height) {$/;"	f	class:cv::WImage
View	core/wimage.hpp	/^WImageViewC<T, C> WImageC<T, C>::View(int c, int r, int width, int height) {$/;"	f	class:cv::WImageC
Viz3d	viz/viz3d.hpp	/^        class CV_EXPORTS Viz3d$/;"	c	namespace:cv::viz
VoronoiSeamFinder	stitching/detail/seam_finders.hpp	/^class CV_EXPORTS VoronoiSeamFinder : public PairwiseSeamFinder$/;"	c	namespace:cv::detail
WARMUP_NONE	ts/ts_perf.hpp	/^        WARMUP_NONE$/;"	e	enum:perf::TestBase::WarmUpType
WARMUP_READ	ts/ts_perf.hpp	/^        WARMUP_READ,$/;"	e	enum:perf::TestBase::WarmUpType
WARMUP_RNG	ts/ts_perf.hpp	/^        WARMUP_RNG,$/;"	e	enum:perf::TestBase::WarmUpType
WARMUP_WRITE	ts/ts_perf.hpp	/^        WARMUP_WRITE,$/;"	e	enum:perf::TestBase::WarmUpType
WARP_FILL_OUTLIERS	imgproc.hpp	/^    WARP_FILL_OUTLIERS   = 8,$/;"	e	enum:cv::InterpolationFlags
WARP_INVERSE_MAP	imgproc.hpp	/^    WARP_INVERSE_MAP     = 16$/;"	e	enum:cv::InterpolationFlags
WARP_SHUFFLE_FUNCTIONS	core/cuda.hpp	/^    WARP_SHUFFLE_FUNCTIONS = FEATURE_SET_COMPUTE_30,$/;"	e	enum:cv::cuda::FeatureSet
WARP_SIZE	core/cuda/warp.hpp	/^            WARP_SIZE     = 1 << LOG_WARP_SIZE,$/;"	e	enum:cv::cuda::device::Warp::__anon244
WARP_SIZE	cudev/warp/warp.hpp	/^    WARP_SIZE     = 1 << LOG_WARP_SIZE$/;"	e	enum:cv::cudev::__anon384
WAVE_CORRECT_HORIZ	stitching/detail/motion_estimators.hpp	/^    WAVE_CORRECT_HORIZ,$/;"	e	enum:cv::detail::WaveCorrectKind
WAVE_CORRECT_VERT	stitching/detail/motion_estimators.hpp	/^    WAVE_CORRECT_VERT$/;"	e	enum:cv::detail::WaveCorrectKind
WArrow	viz/widgets.hpp	/^        class CV_EXPORTS WArrow : public Widget3D$/;"	c	namespace:cv::viz
WCameraPosition	viz/widgets.hpp	/^        class CV_EXPORTS WCameraPosition : public Widget3D$/;"	c	namespace:cv::viz
WCircle	viz/widgets.hpp	/^        class CV_EXPORTS WCircle : public Widget3D$/;"	c	namespace:cv::viz
WCloud	viz/widgets.hpp	/^        class CV_EXPORTS WCloud: public Widget3D$/;"	c	namespace:cv::viz
WCloudCollection	viz/widgets.hpp	/^        class CV_EXPORTS WCloudCollection : public Widget3D$/;"	c	namespace:cv::viz
WCloudNormals	viz/widgets.hpp	/^        class CV_EXPORTS WCloudNormals : public Widget3D$/;"	c	namespace:cv::viz
WCone	viz/widgets.hpp	/^        class CV_EXPORTS WCone : public Widget3D$/;"	c	namespace:cv::viz
WCoordinateSystem	viz/widgets.hpp	/^        class CV_EXPORTS WCoordinateSystem : public Widget3D$/;"	c	namespace:cv::viz
WCube	viz/widgets.hpp	/^        class CV_EXPORTS WCube : public Widget3D$/;"	c	namespace:cv::viz
WCylinder	viz/widgets.hpp	/^        class CV_EXPORTS WCylinder : public Widget3D$/;"	c	namespace:cv::viz
WGrid	viz/widgets.hpp	/^        class CV_EXPORTS WGrid : public Widget3D$/;"	c	namespace:cv::viz
WHOLE_SUBMAT	ts/cuda_test.hpp	276;"	d
WIN32_LEAN_AND_MEAN	cudalegacy/NCV.hpp	49;"	d
WINDOW_AUTOSIZE	highgui.hpp	/^       WINDOW_AUTOSIZE   = 0x00000001, \/\/ the user cannot resize the window, the size is constrainted by the image displayed$/;"	e	enum:cv::__anon56
WINDOW_FREERATIO	highgui.hpp	/^       WINDOW_FREERATIO  = 0x00000100, \/\/ the image expends as much as it can (no ratio constraint)$/;"	e	enum:cv::__anon56
WINDOW_FULLSCREEN	highgui.hpp	/^       WINDOW_FULLSCREEN = 1,          \/\/ change the window to fullscreen$/;"	e	enum:cv::__anon56
WINDOW_KEEPRATIO	highgui.hpp	/^       WINDOW_KEEPRATIO  = 0x00000000  \/\/ the ratio of the image is respected$/;"	e	enum:cv::__anon56
WINDOW_NORMAL	highgui.hpp	/^enum { WINDOW_NORMAL     = 0x00000000, \/\/ the user can resize the window (no constraint) \/ also use to switch a fullscreen window to a normal size$/;"	e	enum:cv::__anon56
WINDOW_OPENGL	highgui.hpp	/^       WINDOW_OPENGL     = 0x00001000, \/\/ window with opengl support$/;"	e	enum:cv::__anon56
WImage	core/wimage.hpp	/^    explicit WImage(IplImage* img) : image_(img) {$/;"	f	class:cv::WImage
WImage	core/wimage.hpp	/^class WImage$/;"	c	namespace:cv
WImage1_16s	core/wimage.hpp	/^typedef WImageC<short, 1>        WImage1_16s;$/;"	t	namespace:cv
WImage1_16u	core/wimage.hpp	/^typedef WImageC<ushort, 1>        WImage1_16u;$/;"	t	namespace:cv
WImage1_b	core/wimage.hpp	/^typedef WImageC<uchar, 1>        WImage1_b;$/;"	t	namespace:cv
WImage1_f	core/wimage.hpp	/^typedef WImageC<float, 1>        WImage1_f;$/;"	t	namespace:cv
WImage3D	viz/widgets.hpp	/^        class CV_EXPORTS WImage3D : public Widget3D$/;"	c	namespace:cv::viz
WImage3_16s	core/wimage.hpp	/^typedef WImageC<short, 3>        WImage3_16s;$/;"	t	namespace:cv
WImage3_16u	core/wimage.hpp	/^typedef WImageC<ushort, 3>        WImage3_16u;$/;"	t	namespace:cv
WImage3_b	core/wimage.hpp	/^typedef WImageC<uchar, 3>        WImage3_b;$/;"	t	namespace:cv
WImage3_f	core/wimage.hpp	/^typedef WImageC<float, 3>        WImage3_f;$/;"	t	namespace:cv
WImageBuffer	core/wimage.hpp	/^    WImageBuffer() : WImage<T>(0) {}$/;"	f	class:cv::WImageBuffer
WImageBuffer	core/wimage.hpp	/^    WImageBuffer(int width, int height, int nchannels) : WImage<T>(0) {$/;"	f	class:cv::WImageBuffer
WImageBuffer	core/wimage.hpp	/^    explicit WImageBuffer(IplImage* img) : WImage<T>(img) {}$/;"	f	class:cv::WImageBuffer
WImageBuffer	core/wimage.hpp	/^class WImageBuffer : public WImage<T>$/;"	c	namespace:cv
WImageBuffer1_16s	core/wimage.hpp	/^typedef WImageBufferC<short, 1>  WImageBuffer1_16s;$/;"	t	namespace:cv
WImageBuffer1_16u	core/wimage.hpp	/^typedef WImageBufferC<ushort, 1>  WImageBuffer1_16u;$/;"	t	namespace:cv
WImageBuffer1_b	core/wimage.hpp	/^typedef WImageBufferC<uchar, 1>  WImageBuffer1_b;$/;"	t	namespace:cv
WImageBuffer1_f	core/wimage.hpp	/^typedef WImageBufferC<float, 1>  WImageBuffer1_f;$/;"	t	namespace:cv
WImageBuffer3_16s	core/wimage.hpp	/^typedef WImageBufferC<short, 3>  WImageBuffer3_16s;$/;"	t	namespace:cv
WImageBuffer3_16u	core/wimage.hpp	/^typedef WImageBufferC<ushort, 3>  WImageBuffer3_16u;$/;"	t	namespace:cv
WImageBuffer3_b	core/wimage.hpp	/^typedef WImageBufferC<uchar, 3>  WImageBuffer3_b;$/;"	t	namespace:cv
WImageBuffer3_f	core/wimage.hpp	/^typedef WImageBufferC<float, 3>  WImageBuffer3_f;$/;"	t	namespace:cv
WImageBufferC	core/wimage.hpp	/^    WImageBufferC() : WImageC<T, C>(0) {}$/;"	f	class:cv::WImageBufferC
WImageBufferC	core/wimage.hpp	/^    WImageBufferC(int width, int height) : WImageC<T, C>(0) {$/;"	f	class:cv::WImageBufferC
WImageBufferC	core/wimage.hpp	/^    explicit WImageBufferC(IplImage* img) : WImageC<T, C>(img) {}$/;"	f	class:cv::WImageBufferC
WImageBufferC	core/wimage.hpp	/^class WImageBufferC : public WImageC<T, C>$/;"	c	namespace:cv
WImageBuffer_16s	core/wimage.hpp	/^typedef WImageBuffer<short>      WImageBuffer_16s;$/;"	t	namespace:cv
WImageBuffer_16u	core/wimage.hpp	/^typedef WImageBuffer<ushort>      WImageBuffer_16u;$/;"	t	namespace:cv
WImageBuffer_b	core/wimage.hpp	/^typedef WImageBuffer<uchar>      WImageBuffer_b;$/;"	t	namespace:cv
WImageBuffer_f	core/wimage.hpp	/^typedef WImageBuffer<float>      WImageBuffer_f;$/;"	t	namespace:cv
WImageC	core/wimage.hpp	/^    explicit WImageC(IplImage* img) : WImage<T>(img) {$/;"	f	class:cv::WImageC
WImageC	core/wimage.hpp	/^class WImageC : public WImage<T>$/;"	c	namespace:cv
WImageOverlay	viz/widgets.hpp	/^        class CV_EXPORTS WImageOverlay : public Widget2D$/;"	c	namespace:cv::viz
WImageView	core/wimage.hpp	/^    WImageView(IplImage* img) : WImage<T>(img) {}$/;"	f	class:cv::WImageView
WImageView	core/wimage.hpp	/^    WImageView(const WImage<T>& img) : WImage<T>(0) {$/;"	f	class:cv::WImageView
WImageView	core/wimage.hpp	/^WImageView<T>::WImageView(T* data, int width, int height, int nchannels, int width_step)$/;"	f	class:cv::WImageView
WImageView	core/wimage.hpp	/^WImageView<T>::WImageView(WImage<T>* img, int c, int r, int width, int height)$/;"	f	class:cv::WImageView
WImageView	core/wimage.hpp	/^template<typename T> class WImageView : public WImage<T>$/;"	c	namespace:cv
WImageView1_16s	core/wimage.hpp	/^typedef WImageViewC<short, 1>    WImageView1_16s;$/;"	t	namespace:cv
WImageView1_16u	core/wimage.hpp	/^typedef WImageViewC<ushort, 1>    WImageView1_16u;$/;"	t	namespace:cv
WImageView1_b	core/wimage.hpp	/^typedef WImageViewC<uchar, 1>    WImageView1_b;$/;"	t	namespace:cv
WImageView1_f	core/wimage.hpp	/^typedef WImageViewC<float, 1>    WImageView1_f;$/;"	t	namespace:cv
WImageView3_16s	core/wimage.hpp	/^typedef WImageViewC<short, 3>    WImageView3_16s;$/;"	t	namespace:cv
WImageView3_16u	core/wimage.hpp	/^typedef WImageViewC<ushort, 3>    WImageView3_16u;$/;"	t	namespace:cv
WImageView3_b	core/wimage.hpp	/^typedef WImageViewC<uchar, 3>    WImageView3_b;$/;"	t	namespace:cv
WImageView3_f	core/wimage.hpp	/^typedef WImageViewC<float, 3>    WImageView3_f;$/;"	t	namespace:cv
WImageViewC	core/wimage.hpp	/^    WImageViewC(IplImage* img) : WImageC<T, C>(img) {}$/;"	f	class:cv::WImageViewC
WImageViewC	core/wimage.hpp	/^    WImageViewC(const WImageC<T, C>& img) : WImageC<T, C>(0) {$/;"	f	class:cv::WImageViewC
WImageViewC	core/wimage.hpp	/^    WImageViewC(const WImageViewC<T, C>& img) : WImageC<T, C>(0) {$/;"	f	class:cv::WImageViewC
WImageViewC	core/wimage.hpp	/^WImageViewC<T, C>::WImageViewC() : WImageC<T, C>(0) {$/;"	f	class:cv::WImageViewC
WImageViewC	core/wimage.hpp	/^WImageViewC<T, C>::WImageViewC(T* data, int width, int height, int width_step)$/;"	f	class:cv::WImageViewC
WImageViewC	core/wimage.hpp	/^WImageViewC<T, C>::WImageViewC(WImageC<T, C>* img, int c, int r, int width, int height)$/;"	f	class:cv::WImageViewC
WImageViewC	core/wimage.hpp	/^class WImageViewC : public WImageC<T, C>$/;"	c	namespace:cv
WImageView_16s	core/wimage.hpp	/^typedef WImageView<short>        WImageView_16s;$/;"	t	namespace:cv
WImageView_16u	core/wimage.hpp	/^typedef WImageView<ushort>        WImageView_16u;$/;"	t	namespace:cv
WImageView_b	core/wimage.hpp	/^typedef WImageView<uchar>        WImageView_b;$/;"	t	namespace:cv
WImageView_f	core/wimage.hpp	/^typedef WImageView<float>        WImageView_f;$/;"	t	namespace:cv
WImage_16s	core/wimage.hpp	/^typedef WImage<short>            WImage_16s;$/;"	t	namespace:cv
WImage_16u	core/wimage.hpp	/^typedef WImage<ushort>            WImage_16u;$/;"	t	namespace:cv
WImage_b	core/wimage.hpp	/^typedef WImage<uchar>            WImage_b;$/;"	t	namespace:cv
WImage_f	core/wimage.hpp	/^typedef WImage<float>            WImage_f;$/;"	t	namespace:cv
WLine	viz/widgets.hpp	/^        class CV_EXPORTS WLine : public Widget3D$/;"	c	namespace:cv::viz
WMesh	viz/widgets.hpp	/^        class CV_EXPORTS WMesh : public Widget3D$/;"	c	namespace:cv::viz
WND_PROP_ASPECT_RATIO	highgui.hpp	/^       WND_PROP_ASPECT_RATIO = 2, \/\/ window's aspect ration (can be set to WINDOW_FREERATIO or WINDOW_KEEPRATIO);$/;"	e	enum:cv::__anon57
WND_PROP_AUTOSIZE	highgui.hpp	/^       WND_PROP_AUTOSIZE     = 1, \/\/ autosize property      (can be WINDOW_NORMAL or WINDOW_AUTOSIZE)$/;"	e	enum:cv::__anon57
WND_PROP_FULLSCREEN	highgui.hpp	/^enum { WND_PROP_FULLSCREEN   = 0, \/\/ fullscreen property    (can be WINDOW_NORMAL or WINDOW_FULLSCREEN)$/;"	e	enum:cv::__anon57
WND_PROP_OPENGL	highgui.hpp	/^       WND_PROP_OPENGL       = 3  \/\/ opengl support$/;"	e	enum:cv::__anon57
WORDSIZE	flann/allocator.h	/^const size_t     WORDSIZE=16;$/;"	m	namespace:cvflann
WPaintedCloud	viz/widgets.hpp	/^        class CV_EXPORTS WPaintedCloud: public Widget3D$/;"	c	namespace:cv::viz
WPlane	viz/widgets.hpp	/^        class CV_EXPORTS WPlane : public Widget3D$/;"	c	namespace:cv::viz
WPolyLine	viz/widgets.hpp	/^        class CV_EXPORTS WPolyLine : public Widget3D$/;"	c	namespace:cv::viz
WRITE	core/persistence.hpp	/^        WRITE       = 1, \/\/!< value, open the file for writing$/;"	e	enum:cv::FileStorage::Mode
WRITE_COMBINED	core/cuda.hpp	/^    enum AllocType { PAGE_LOCKED = 1, SHARED = 2, WRITE_COMBINED = 4 };$/;"	e	enum:cv::cuda::HostMem::AllocType
WRITE_ONLY	core/ocl.hpp	/^    enum { LOCAL=1, READ_ONLY=2, WRITE_ONLY=4, READ_WRITE=6, CONSTANT=8, PTR_ONLY = 16, NO_SIZE=256 };$/;"	e	enum:cv::ocl::KernelArg::__anon160
WRITE_ONLY	core/opengl.hpp	/^        WRITE_ONLY = 0x88B9,$/;"	e	enum:cv::ogl::Buffer::Access
WRONG_OBJECT	objdetect/detection_based_tracker.hpp	/^            WRONG_OBJECT$/;"	e	enum:cv::DetectionBasedTracker::ObjectStatus
WSphere	viz/widgets.hpp	/^        class CV_EXPORTS WSphere : public Widget3D$/;"	c	namespace:cv::viz
WText	viz/widgets.hpp	/^        class CV_EXPORTS WText : public Widget2D$/;"	c	namespace:cv::viz
WText3D	viz/widgets.hpp	/^        class CV_EXPORTS WText3D : public Widget3D$/;"	c	namespace:cv::viz
WTrajectory	viz/widgets.hpp	/^        class CV_EXPORTS WTrajectory : public Widget3D$/;"	c	namespace:cv::viz
WTrajectoryFrustums	viz/widgets.hpp	/^        class CV_EXPORTS WTrajectoryFrustums : public Widget3D$/;"	c	namespace:cv::viz
WTrajectorySpheres	viz/widgets.hpp	/^        class CV_EXPORTS WTrajectorySpheres: public Widget3D$/;"	c	namespace:cv::viz
WWidgetMerger	viz/widgets.hpp	/^        class CV_EXPORTS WWidgetMerger : public Widget3D$/;"	c	namespace:cv::viz
WaitForNotification	ts/ts_gtest.h	/^  void WaitForNotification() {$/;"	f	class:std::tr1::Notification
WarmUpType	ts/ts_perf.hpp	/^    enum WarmUpType$/;"	g	class:perf::TestBase
Warp	core/cuda/warp.hpp	/^    struct Warp$/;"	s	namespace:cv::cuda::device
Warp	cudev/warp/warp.hpp	/^struct Warp$/;"	s	namespace:cv::cudev
WarpOptimized	core/cuda/detail/reduce.hpp	/^        template <unsigned int N> struct WarpOptimized$/;"	s	namespace:cv::cuda::device::reduce_detail
WarpOptimized	core/cuda/detail/reduce_key_val.hpp	/^        template <unsigned int N> struct WarpOptimized$/;"	s	namespace:cv::cuda::device::reduce_key_val_detail
WarpOptimized	cudev/block/detail/reduce.hpp	/^    template <int N> struct WarpOptimized$/;"	s	namespace:cv::cudev::block_reduce_detail
WarpOptimized	cudev/block/detail/reduce_key_val.hpp	/^    template <int N> struct WarpOptimized$/;"	s	namespace:cv::cudev::block_reduce_key_val_detail
WarpReductor	cudev/warp/detail/reduce.hpp	/^    struct WarpReductor$/;"	s	namespace:cv::cudev::warp_reduce_detail
WarpReductor	cudev/warp/detail/reduce_key_val.hpp	/^    struct WarpReductor$/;"	s	namespace:cv::cudev::warp_reduce_key_val_detail
WarpScan	core/cuda/scan.hpp	/^        __device__ __forceinline__ WarpScan() {}$/;"	f	struct:cv::cuda::device::WarpScan
WarpScan	core/cuda/scan.hpp	/^        __device__ __forceinline__ WarpScan(const WarpScan& other) { (void)other; }$/;"	f	struct:cv::cuda::device::WarpScan
WarpScan	core/cuda/scan.hpp	/^    template <ScanKind Kind, typename T, typename F> struct WarpScan$/;"	s	namespace:cv::cuda::device
WarpScanNoComp	core/cuda/scan.hpp	/^        __device__ __forceinline__ WarpScanNoComp() {}$/;"	f	struct:cv::cuda::device::WarpScanNoComp
WarpScanNoComp	core/cuda/scan.hpp	/^        __device__ __forceinline__ WarpScanNoComp(const WarpScanNoComp& other) { (void)other; }$/;"	f	struct:cv::cuda::device::WarpScanNoComp
WarpScanNoComp	core/cuda/scan.hpp	/^    template <ScanKind Kind , typename T, typename F> struct WarpScanNoComp$/;"	s	namespace:cv::cuda::device
WarperCreator	stitching/warpers.hpp	/^class WarperCreator$/;"	c	namespace:cv
WaveCorrectKind	stitching/detail/motion_estimators.hpp	/^enum WaveCorrectKind$/;"	g	namespace:cv::detail
WeightingDeblurer	videostab/deblurring.hpp	/^class CV_EXPORTS WeightingDeblurer : public DeblurerBase$/;"	c	namespace:cv::videostab
Widget	viz/widgets.hpp	/^        class CV_EXPORTS Widget$/;"	c	namespace:cv::viz
Widget2D	viz/widgets.hpp	/^            Widget2D() {}$/;"	f	class:cv::viz::Widget2D
Widget2D	viz/widgets.hpp	/^        class CV_EXPORTS Widget2D : public Widget$/;"	c	namespace:cv::viz
Widget3D	viz/widgets.hpp	/^            Widget3D() {}$/;"	f	class:cv::viz::Widget3D
Widget3D	viz/widgets.hpp	/^        class CV_EXPORTS Widget3D : public Widget$/;"	c	namespace:cv::viz
WidgetAccessor	viz/widget_accessor.hpp	/^        struct CV_EXPORTS WidgetAccessor$/;"	s	namespace:cv::viz
Width	core/wimage.hpp	/^    int Width() const {return image_->width; }$/;"	f	class:cv::WImage
WidthStep	core/wimage.hpp	/^    int WidthStep() const {return image_->widthStep; }$/;"	f	class:cv::WImage
WithOutMask	core/cuda/utility.hpp	/^        __host__ __device__ __forceinline__ WithOutMask(){}$/;"	f	struct:cv::cuda::device::WithOutMask
WithOutMask	core/cuda/utility.hpp	/^        __host__ __device__ __forceinline__ WithOutMask(const WithOutMask&){}$/;"	f	struct:cv::cuda::device::WithOutMask
WithOutMask	core/cuda/utility.hpp	/^    struct WithOutMask$/;"	s	namespace:cv::cuda::device
WithOutMask	cudev/ptr2d/mask.hpp	/^struct WithOutMask$/;"	s	namespace:cv::cudev
WithParamInterface	ts/ts_gtest.h	/^class WithParamInterface {$/;"	c	namespace:testing
WobbleSuppressorBase	videostab/wobble_suppression.hpp	/^class CV_EXPORTS WobbleSuppressorBase$/;"	c	namespace:cv::videostab
Write	ts/ts_gtest.h	/^inline int Write(int fd, const void* buf, unsigned int count) {$/;"	f	namespace:std::tr1::posix
WriteOnly	core/ocl.hpp	/^    static KernelArg WriteOnly(const UMat& m, int wscale=1, int iwscale=1)$/;"	f	class:cv::ocl::KernelArg
WriteOnlyNoSize	core/ocl.hpp	/^    static KernelArg WriteOnlyNoSize(const UMat& m, int wscale=1, int iwscale=1)$/;"	f	class:cv::ocl::KernelArg
WriteStructContext	core/persistence.hpp	/^    class CV_EXPORTS WriteStructContext$/;"	c	namespace:cv::internal
XYZ2RGB	core/cuda/detail/color_detail.hpp	/^            __host__ __device__ __forceinline__ XYZ2RGB() {}$/;"	f	struct:cv::cuda::device::color_detail::XYZ2RGB
XYZ2RGB	core/cuda/detail/color_detail.hpp	/^            __host__ __device__ __forceinline__ XYZ2RGB(const XYZ2RGB&) {}$/;"	f	struct:cv::cuda::device::color_detail::XYZ2RGB
XYZ2RGB	core/cuda/detail/color_detail.hpp	/^        template <int bidx> struct XYZ2RGB<uchar, 4, 4, bidx> : unary_function<uint, uint>$/;"	s	namespace:cv::cuda::device::color_detail
XYZ2RGB	core/cuda/detail/color_detail.hpp	/^        template <typename T, int scn, int dcn, int bidx> struct XYZ2RGB$/;"	s	namespace:cv::cuda::device::color_detail
XYZ2RGB	cudev/functional/detail/color_cvt.hpp	/^    template <int scn, int dcn, int bidx> struct XYZ2RGB<float, scn, dcn, bidx>$/;"	s	namespace:cv::cudev::color_cvt_detail
XYZ2RGB	cudev/functional/detail/color_cvt.hpp	/^    template <typename T, int scn, int dcn, int bidx> struct XYZ2RGB$/;"	s	namespace:cv::cudev::color_cvt_detail
XYZ2RGBConvert	core/cuda/detail/color_detail.hpp	/^        template <int bidx, typename T, typename D> static __device__ __forceinline__ void XYZ2RGBConvert(const T& src, D* dst)$/;"	f	namespace:cv::cuda::device::color_detail
XYZ2RGBConvert	core/cuda/detail/color_detail.hpp	/^        template <int bidx, typename T> static __device__ __forceinline__ void XYZ2RGBConvert(const T& src, float* dst)$/;"	f	namespace:cv::cuda::device::color_detail
XYZ2RGBConvert	core/cuda/detail/color_detail.hpp	/^        template <int bidx> static __device__ __forceinline__ uint XYZ2RGBConvert(uint src)$/;"	f	namespace:cv::cuda::device::color_detail
X_ROW	cudafeatures2d.hpp	/^        X_ROW = 0,$/;"	e	enum:cv::cuda::ORB::__anon292
YCrCb2RGB	core/cuda/detail/color_detail.hpp	/^            __host__ __device__ __forceinline__ YCrCb2RGB() {}$/;"	f	struct:cv::cuda::device::color_detail::YCrCb2RGB
YCrCb2RGB	core/cuda/detail/color_detail.hpp	/^            __host__ __device__ __forceinline__ YCrCb2RGB(const YCrCb2RGB&) {}$/;"	f	struct:cv::cuda::device::color_detail::YCrCb2RGB
YCrCb2RGB	core/cuda/detail/color_detail.hpp	/^        template <int bidx> struct YCrCb2RGB<uchar, 4, 4, bidx> : unary_function<uint, uint>$/;"	s	namespace:cv::cuda::device::color_detail
YCrCb2RGB	core/cuda/detail/color_detail.hpp	/^        template <typename T, int scn, int dcn, int bidx> struct YCrCb2RGB$/;"	s	namespace:cv::cuda::device::color_detail
YCrCb2RGB	cudev/functional/detail/color_cvt.hpp	/^    template <int scn, int dcn, int bidx> struct YCrCb2RGB<float, scn, dcn, bidx>$/;"	s	namespace:cv::cudev::color_cvt_detail
YCrCb2RGB	cudev/functional/detail/color_cvt.hpp	/^    template <typename T, int scn, int dcn, int bidx> struct YCrCb2RGB$/;"	s	namespace:cv::cudev::color_cvt_detail
YCrCb2RGBConvert	core/cuda/detail/color_detail.hpp	/^        template <int bidx, typename T, typename D> static __device__ void YCrCb2RGBConvert(const T& src, D* dst)$/;"	f	namespace:cv::cuda::device::color_detail
YCrCb2RGBConvert	core/cuda/detail/color_detail.hpp	/^        template <int bidx, typename T> __device__ __forceinline__ void YCrCb2RGBConvert(const T& src, float* dst)$/;"	f	namespace:cv::cuda::device::color_detail
YCrCb2RGBConvert	core/cuda/detail/color_detail.hpp	/^        template <int bidx> static __device__ uint YCrCb2RGBConvert(uint src)$/;"	f	namespace:cv::cuda::device::color_detail
YUV2RGB	core/cuda/detail/color_detail.hpp	/^            __host__ __device__ __forceinline__ YUV2RGB() {}$/;"	f	struct:cv::cuda::device::color_detail::YUV2RGB
YUV2RGB	core/cuda/detail/color_detail.hpp	/^            __host__ __device__ __forceinline__ YUV2RGB(const YUV2RGB&) {}$/;"	f	struct:cv::cuda::device::color_detail::YUV2RGB
YUV2RGB	core/cuda/detail/color_detail.hpp	/^        template <int bidx> struct YUV2RGB<uchar, 4, 4, bidx> : unary_function<uint, uint>$/;"	s	namespace:cv::cuda::device::color_detail
YUV2RGB	core/cuda/detail/color_detail.hpp	/^        template <typename T, int scn, int dcn, int bidx> struct YUV2RGB$/;"	s	namespace:cv::cuda::device::color_detail
YUV2RGB	cudev/functional/detail/color_cvt.hpp	/^    template <int scn, int dcn, int bidx> struct YUV2RGB<float, scn, dcn, bidx>$/;"	s	namespace:cv::cudev::color_cvt_detail
YUV2RGB	cudev/functional/detail/color_cvt.hpp	/^    template <typename T, int scn, int dcn, int bidx> struct YUV2RGB$/;"	s	namespace:cv::cudev::color_cvt_detail
YUV2RGBConvert	core/cuda/detail/color_detail.hpp	/^        template <int bidx, typename T, typename D> static __device__ void YUV2RGBConvert(const T& src, D* dst)$/;"	f	namespace:cv::cuda::device::color_detail
YUV2RGBConvert	core/cuda/detail/color_detail.hpp	/^        template <int bidx, typename T> static __device__ __forceinline__ void YUV2RGBConvert(const T& src, float* dst)$/;"	f	namespace:cv::cuda::device::color_detail
YUV2RGBConvert	core/cuda/detail/color_detail.hpp	/^        template <int bidx> static __device__ uint YUV2RGBConvert(uint src)$/;"	f	namespace:cv::cuda::device::color_detail
YUV420	cudacodec.hpp	/^    YUV420,$/;"	e	enum:cv::cudacodec::ChromaFormat
YUV422	cudacodec.hpp	/^    YUV422,$/;"	e	enum:cv::cudacodec::ChromaFormat
YUV444	cudacodec.hpp	/^    YUV444$/;"	e	enum:cv::cudacodec::ChromaFormat
Y_ROW	cudafeatures2d.hpp	/^        Y_ROW,$/;"	e	enum:cv::cuda::ORB::__anon292
Yes	core/cuda/functional.hpp	/^        typedef char Yes;$/;"	t	struct:cv::cuda::device::IsBinaryFunction
Yes	core/cuda/functional.hpp	/^        typedef char Yes;$/;"	t	struct:cv::cuda::device::IsUnaryFunction
Yes	cudev/functional/functional.hpp	/^    typedef char Yes;$/;"	t	struct:cv::cudev::IsBinaryFunction
Yes	cudev/functional/functional.hpp	/^    typedef char Yes;$/;"	t	struct:cv::cudev::IsUnaryFunction
ZeroIterator	flann/dist.h	/^struct ZeroIterator$/;"	s	namespace:cvflann
ZipPtr	cudev/ptr2d/zip.hpp	/^    __host__ __device__ __forceinline__ ZipPtr() {}$/;"	f	struct:cv::cudev::ZipPtr
ZipPtr	cudev/ptr2d/zip.hpp	/^    __host__ __device__ __forceinline__ ZipPtr(const tuple<Ptr0, Ptr1, Ptr2, Ptr3>& t) : tuple<Ptr0, Ptr1, Ptr2, Ptr3>(t) {}$/;"	f	struct:cv::cudev::ZipPtr
ZipPtr	cudev/ptr2d/zip.hpp	/^    __host__ __device__ __forceinline__ ZipPtr(const tuple<Ptr0, Ptr1, Ptr2>& t) : tuple<Ptr0, Ptr1, Ptr2>(t) {}$/;"	f	struct:cv::cudev::ZipPtr
ZipPtr	cudev/ptr2d/zip.hpp	/^    __host__ __device__ __forceinline__ ZipPtr(const tuple<Ptr0, Ptr1>& t) : tuple<Ptr0, Ptr1>(t) {}$/;"	f	struct:cv::cudev::ZipPtr
ZipPtr	cudev/ptr2d/zip.hpp	/^template <class Ptr0, class Ptr1, class Ptr2, class Ptr3> struct ZipPtr< tuple<Ptr0, Ptr1, Ptr2, Ptr3> > : tuple<Ptr0, Ptr1, Ptr2, Ptr3>$/;"	s	namespace:cv::cudev
ZipPtr	cudev/ptr2d/zip.hpp	/^template <class Ptr0, class Ptr1, class Ptr2> struct ZipPtr< tuple<Ptr0, Ptr1, Ptr2> > : tuple<Ptr0, Ptr1, Ptr2>$/;"	s	namespace:cv::cudev
ZipPtr	cudev/ptr2d/zip.hpp	/^template <class Ptr0, class Ptr1> struct ZipPtr< tuple<Ptr0, Ptr1> > : tuple<Ptr0, Ptr1>$/;"	s	namespace:cv::cudev
ZipPtrSz	cudev/ptr2d/zip.hpp	/^    __host__ __device__ __forceinline__ ZipPtrSz() {}$/;"	f	struct:cv::cudev::ZipPtrSz
ZipPtrSz	cudev/ptr2d/zip.hpp	/^    __host__ __device__ __forceinline__ ZipPtrSz(const PtrTuple& t) : ZipPtr<PtrTuple>(t) {}$/;"	f	struct:cv::cudev::ZipPtrSz
ZipPtrSz	cudev/ptr2d/zip.hpp	/^template <class PtrTuple> struct ZipPtrSz : ZipPtr<PtrTuple>$/;"	s	namespace:cv::cudev
_CRT_SECURE_NO_DEPRECATE	core/cvdef.h	49;"	d
_CRT_SECURE_NO_DEPRECATE	hal/defs.h	49;"	d
_HAS_EXCEPTIONS	ts/ts_gtest.h	482;"	d
_InputArray	core/mat.hpp	/^class CV_EXPORTS _InputArray$/;"	c	namespace:cv
_InputArray	core/mat.inl.hpp	/^_InputArray::_InputArray(const Mat_<_Tp>& m)$/;"	f	class:cv::_InputArray
_InputArray	core/mat.inl.hpp	/^_InputArray::_InputArray(const Matx<_Tp, m, n>& mtx)$/;"	f	class:cv::_InputArray
_InputArray	core/mat.inl.hpp	/^_InputArray::_InputArray(const _Tp* vec, int n)$/;"	f	class:cv::_InputArray
_InputArray	core/mat.inl.hpp	/^_InputArray::_InputArray(const std::vector<Mat_<_Tp> >& vec)$/;"	f	class:cv::_InputArray
_InputArray	core/mat.inl.hpp	/^_InputArray::_InputArray(const std::vector<_Tp>& vec)$/;"	f	class:cv::_InputArray
_InputArray	core/mat.inl.hpp	/^_InputArray::_InputArray(const std::vector<bool>& vec)$/;"	f	class:cv::_InputArray
_InputArray	core/mat.inl.hpp	/^_InputArray::_InputArray(const std::vector<std::vector<_Tp> >& vec)$/;"	f	class:cv::_InputArray
_InputArray	core/mat.inl.hpp	/^inline _InputArray::_InputArray() { init(NONE, 0); }$/;"	f	class:cv::_InputArray
_InputArray	core/mat.inl.hpp	/^inline _InputArray::_InputArray(const Mat& m) { init(MAT+ACCESS_READ, &m); }$/;"	f	class:cv::_InputArray
_InputArray	core/mat.inl.hpp	/^inline _InputArray::_InputArray(const MatExpr& expr)$/;"	f	class:cv::_InputArray
_InputArray	core/mat.inl.hpp	/^inline _InputArray::_InputArray(const UMat& m) { init(UMAT+ACCESS_READ, &m); }$/;"	f	class:cv::_InputArray
_InputArray	core/mat.inl.hpp	/^inline _InputArray::_InputArray(const cuda::GpuMat& d_mat)$/;"	f	class:cv::_InputArray
_InputArray	core/mat.inl.hpp	/^inline _InputArray::_InputArray(const cuda::HostMem& cuda_mem)$/;"	f	class:cv::_InputArray
_InputArray	core/mat.inl.hpp	/^inline _InputArray::_InputArray(const double& val)$/;"	f	class:cv::_InputArray
_InputArray	core/mat.inl.hpp	/^inline _InputArray::_InputArray(const ogl::Buffer& buf)$/;"	f	class:cv::_InputArray
_InputArray	core/mat.inl.hpp	/^inline _InputArray::_InputArray(const std::vector<Mat>& vec) { init(STD_VECTOR_MAT+ACCESS_READ, &vec); }$/;"	f	class:cv::_InputArray
_InputArray	core/mat.inl.hpp	/^inline _InputArray::_InputArray(const std::vector<UMat>& vec) { init(STD_VECTOR_UMAT+ACCESS_READ, &vec); }$/;"	f	class:cv::_InputArray
_InputArray	core/mat.inl.hpp	/^inline _InputArray::_InputArray(int _flags, void* _obj) { init(_flags, _obj); }$/;"	f	class:cv::_InputArray
_InputArray	cudev/ptr2d/detail/gpumat.hpp	/^__host__ _InputArray::_InputArray(const cudev::GpuMat_<_Tp>& m)$/;"	f	class:cv::_InputArray
_InputOutputArray	core/mat.hpp	/^class CV_EXPORTS _InputOutputArray : public _OutputArray$/;"	c	namespace:cv
_InputOutputArray	core/mat.inl.hpp	/^_InputOutputArray::_InputOutputArray(Mat_<_Tp>& m)$/;"	f	class:cv::_InputOutputArray
_InputOutputArray	core/mat.inl.hpp	/^_InputOutputArray::_InputOutputArray(Matx<_Tp, m, n>& mtx)$/;"	f	class:cv::_InputOutputArray
_InputOutputArray	core/mat.inl.hpp	/^_InputOutputArray::_InputOutputArray(_Tp* vec, int n)$/;"	f	class:cv::_InputOutputArray
_InputOutputArray	core/mat.inl.hpp	/^_InputOutputArray::_InputOutputArray(const Mat_<_Tp>& m)$/;"	f	class:cv::_InputOutputArray
_InputOutputArray	core/mat.inl.hpp	/^_InputOutputArray::_InputOutputArray(const Matx<_Tp, m, n>& mtx)$/;"	f	class:cv::_InputOutputArray
_InputOutputArray	core/mat.inl.hpp	/^_InputOutputArray::_InputOutputArray(const _Tp* vec, int n)$/;"	f	class:cv::_InputOutputArray
_InputOutputArray	core/mat.inl.hpp	/^_InputOutputArray::_InputOutputArray(const std::vector<Mat_<_Tp> >& vec)$/;"	f	class:cv::_InputOutputArray
_InputOutputArray	core/mat.inl.hpp	/^_InputOutputArray::_InputOutputArray(const std::vector<_Tp>& vec)$/;"	f	class:cv::_InputOutputArray
_InputOutputArray	core/mat.inl.hpp	/^_InputOutputArray::_InputOutputArray(const std::vector<std::vector<_Tp> >& vec)$/;"	f	class:cv::_InputOutputArray
_InputOutputArray	core/mat.inl.hpp	/^_InputOutputArray::_InputOutputArray(std::vector<Mat_<_Tp> >& vec)$/;"	f	class:cv::_InputOutputArray
_InputOutputArray	core/mat.inl.hpp	/^_InputOutputArray::_InputOutputArray(std::vector<_Tp>& vec)$/;"	f	class:cv::_InputOutputArray
_InputOutputArray	core/mat.inl.hpp	/^_InputOutputArray::_InputOutputArray(std::vector<std::vector<_Tp> >& vec)$/;"	f	class:cv::_InputOutputArray
_InputOutputArray	core/mat.inl.hpp	/^inline _InputOutputArray::_InputOutputArray() { init(ACCESS_RW, 0); }$/;"	f	class:cv::_InputOutputArray
_InputOutputArray	core/mat.inl.hpp	/^inline _InputOutputArray::_InputOutputArray(Mat& m) { init(MAT+ACCESS_RW, &m); }$/;"	f	class:cv::_InputOutputArray
_InputOutputArray	core/mat.inl.hpp	/^inline _InputOutputArray::_InputOutputArray(UMat& m) { init(UMAT+ACCESS_RW, &m); }$/;"	f	class:cv::_InputOutputArray
_InputOutputArray	core/mat.inl.hpp	/^inline _InputOutputArray::_InputOutputArray(const Mat& m)$/;"	f	class:cv::_InputOutputArray
_InputOutputArray	core/mat.inl.hpp	/^inline _InputOutputArray::_InputOutputArray(const UMat& m)$/;"	f	class:cv::_InputOutputArray
_InputOutputArray	core/mat.inl.hpp	/^inline _InputOutputArray::_InputOutputArray(const cuda::GpuMat& d_mat)$/;"	f	class:cv::_InputOutputArray
_InputOutputArray	core/mat.inl.hpp	/^inline _InputOutputArray::_InputOutputArray(const cuda::HostMem& cuda_mem)$/;"	f	class:cv::_InputOutputArray
_InputOutputArray	core/mat.inl.hpp	/^inline _InputOutputArray::_InputOutputArray(const ogl::Buffer& buf)$/;"	f	class:cv::_InputOutputArray
_InputOutputArray	core/mat.inl.hpp	/^inline _InputOutputArray::_InputOutputArray(const std::vector<Mat>& vec)$/;"	f	class:cv::_InputOutputArray
_InputOutputArray	core/mat.inl.hpp	/^inline _InputOutputArray::_InputOutputArray(const std::vector<UMat>& vec)$/;"	f	class:cv::_InputOutputArray
_InputOutputArray	core/mat.inl.hpp	/^inline _InputOutputArray::_InputOutputArray(cuda::GpuMat& d_mat)$/;"	f	class:cv::_InputOutputArray
_InputOutputArray	core/mat.inl.hpp	/^inline _InputOutputArray::_InputOutputArray(cuda::HostMem& cuda_mem)$/;"	f	class:cv::_InputOutputArray
_InputOutputArray	core/mat.inl.hpp	/^inline _InputOutputArray::_InputOutputArray(int _flags, void* _obj) { init(_flags|ACCESS_RW, _obj); }$/;"	f	class:cv::_InputOutputArray
_InputOutputArray	core/mat.inl.hpp	/^inline _InputOutputArray::_InputOutputArray(ogl::Buffer& buf)$/;"	f	class:cv::_InputOutputArray
_InputOutputArray	core/mat.inl.hpp	/^inline _InputOutputArray::_InputOutputArray(std::vector<Mat>& vec) { init(STD_VECTOR_MAT+ACCESS_RW, &vec); }$/;"	f	class:cv::_InputOutputArray
_InputOutputArray	core/mat.inl.hpp	/^inline _InputOutputArray::_InputOutputArray(std::vector<UMat>& vec) { init(STD_VECTOR_UMAT+ACCESS_RW, &vec); }$/;"	f	class:cv::_InputOutputArray
_InputOutputArray	core/mat.inl.hpp	/^inline _InputOutputArray::_InputOutputArray(std::vector<bool>&)$/;"	f	class:cv::_InputOutputArray
_IplConvKernel	core/types_c.h	/^typedef struct _IplConvKernel$/;"	s
_IplConvKernelFP	core/types_c.h	/^typedef struct _IplConvKernelFP$/;"	s
_IplImage	core/types_c.h	/^    _IplImage() {}$/;"	f	struct:_IplImage
_IplImage	core/types_c.h	/^_IplImage$/;"	s
_IplROI	core/types_c.h	/^typedef struct _IplROI$/;"	s
_OPENCV_FLANN_HPP_	flann.hpp	44;"	d
_OPENCV_MINIFLANN_HPP_	flann/miniflann.hpp	44;"	d
_OutputArray	core/mat.hpp	/^class CV_EXPORTS _OutputArray : public _InputArray$/;"	c	namespace:cv
_OutputArray	core/mat.hpp	/^class CV_EXPORTS _OutputArray;$/;"	m	namespace:cv	typeref:class:cv::CV_EXPORTS
_OutputArray	core/mat.inl.hpp	/^_OutputArray::_OutputArray(Mat_<_Tp>& m)$/;"	f	class:cv::_OutputArray
_OutputArray	core/mat.inl.hpp	/^_OutputArray::_OutputArray(Matx<_Tp, m, n>& mtx)$/;"	f	class:cv::_OutputArray
_OutputArray	core/mat.inl.hpp	/^_OutputArray::_OutputArray(_Tp* vec, int n)$/;"	f	class:cv::_OutputArray
_OutputArray	core/mat.inl.hpp	/^_OutputArray::_OutputArray(const Mat_<_Tp>& m)$/;"	f	class:cv::_OutputArray
_OutputArray	core/mat.inl.hpp	/^_OutputArray::_OutputArray(const Matx<_Tp, m, n>& mtx)$/;"	f	class:cv::_OutputArray
_OutputArray	core/mat.inl.hpp	/^_OutputArray::_OutputArray(const _Tp* vec, int n)$/;"	f	class:cv::_OutputArray
_OutputArray	core/mat.inl.hpp	/^_OutputArray::_OutputArray(const std::vector<Mat_<_Tp> >& vec)$/;"	f	class:cv::_OutputArray
_OutputArray	core/mat.inl.hpp	/^_OutputArray::_OutputArray(const std::vector<_Tp>& vec)$/;"	f	class:cv::_OutputArray
_OutputArray	core/mat.inl.hpp	/^_OutputArray::_OutputArray(const std::vector<std::vector<_Tp> >& vec)$/;"	f	class:cv::_OutputArray
_OutputArray	core/mat.inl.hpp	/^_OutputArray::_OutputArray(std::vector<Mat_<_Tp> >& vec)$/;"	f	class:cv::_OutputArray
_OutputArray	core/mat.inl.hpp	/^_OutputArray::_OutputArray(std::vector<_Tp>& vec)$/;"	f	class:cv::_OutputArray
_OutputArray	core/mat.inl.hpp	/^_OutputArray::_OutputArray(std::vector<bool>&)$/;"	f	class:cv::_OutputArray
_OutputArray	core/mat.inl.hpp	/^_OutputArray::_OutputArray(std::vector<std::vector<_Tp> >& vec)$/;"	f	class:cv::_OutputArray
_OutputArray	core/mat.inl.hpp	/^inline _OutputArray::_OutputArray() { init(ACCESS_WRITE, 0); }$/;"	f	class:cv::_OutputArray
_OutputArray	core/mat.inl.hpp	/^inline _OutputArray::_OutputArray(Mat& m) { init(MAT+ACCESS_WRITE, &m); }$/;"	f	class:cv::_OutputArray
_OutputArray	core/mat.inl.hpp	/^inline _OutputArray::_OutputArray(UMat& m) { init(UMAT+ACCESS_WRITE, &m); }$/;"	f	class:cv::_OutputArray
_OutputArray	core/mat.inl.hpp	/^inline _OutputArray::_OutputArray(const Mat& m)$/;"	f	class:cv::_OutputArray
_OutputArray	core/mat.inl.hpp	/^inline _OutputArray::_OutputArray(const UMat& m)$/;"	f	class:cv::_OutputArray
_OutputArray	core/mat.inl.hpp	/^inline _OutputArray::_OutputArray(const cuda::GpuMat& d_mat)$/;"	f	class:cv::_OutputArray
_OutputArray	core/mat.inl.hpp	/^inline _OutputArray::_OutputArray(const cuda::HostMem& cuda_mem)$/;"	f	class:cv::_OutputArray
_OutputArray	core/mat.inl.hpp	/^inline _OutputArray::_OutputArray(const ogl::Buffer& buf)$/;"	f	class:cv::_OutputArray
_OutputArray	core/mat.inl.hpp	/^inline _OutputArray::_OutputArray(const std::vector<Mat>& vec)$/;"	f	class:cv::_OutputArray
_OutputArray	core/mat.inl.hpp	/^inline _OutputArray::_OutputArray(const std::vector<UMat>& vec)$/;"	f	class:cv::_OutputArray
_OutputArray	core/mat.inl.hpp	/^inline _OutputArray::_OutputArray(cuda::GpuMat& d_mat)$/;"	f	class:cv::_OutputArray
_OutputArray	core/mat.inl.hpp	/^inline _OutputArray::_OutputArray(cuda::HostMem& cuda_mem)$/;"	f	class:cv::_OutputArray
_OutputArray	core/mat.inl.hpp	/^inline _OutputArray::_OutputArray(int _flags, void* _obj) { init(_flags|ACCESS_WRITE, _obj); }$/;"	f	class:cv::_OutputArray
_OutputArray	core/mat.inl.hpp	/^inline _OutputArray::_OutputArray(ogl::Buffer& buf)$/;"	f	class:cv::_OutputArray
_OutputArray	core/mat.inl.hpp	/^inline _OutputArray::_OutputArray(std::vector<Mat>& vec) { init(STD_VECTOR_MAT+ACCESS_WRITE, &vec); }$/;"	f	class:cv::_OutputArray
_OutputArray	core/mat.inl.hpp	/^inline _OutputArray::_OutputArray(std::vector<UMat>& vec) { init(STD_VECTOR_UMAT+ACCESS_WRITE, &vec); }$/;"	f	class:cv::_OutputArray
_OutputArray	cudev/ptr2d/detail/gpumat.hpp	/^__host__ _OutputArray::_OutputArray(const cudev::GpuMat_<_Tp>& m)$/;"	f	class:cv::_OutputArray
_OutputArray	cudev/ptr2d/detail/gpumat.hpp	/^__host__ _OutputArray::_OutputArray(cudev::GpuMat_<_Tp>& m)$/;"	f	class:cv::_OutputArray
__CV_BEGIN__	core/core_c.h	2725;"	d
__CV_CUDA_HOST_DEVICE__	core/cuda_types.hpp	57;"	d
__CV_CUDA_HOST_DEVICE__	core/cuda_types.hpp	59;"	d
__CV_END__	core/core_c.h	2726;"	d
__CV_EXIT__	core/core_c.h	2727;"	d
__CV_TEST_EXEC_ARGS	ts.hpp	550;"	d
__CV_TEST_EXEC_ARGS	ts/ts_perf.hpp	603;"	d
__OPENCV_BACKGROUND_SEGM_HPP__	video/background_segm.hpp	45;"	d
__OPENCV_CALIB3D_C_H__	calib3d/calib3d_c.h	45;"	d
__OPENCV_CALIB3D_HPP__	calib3d.hpp	45;"	d
__OPENCV_CORE_AFFINE3_HPP__	core/affine.hpp	45;"	d
__OPENCV_CORE_BASE_HPP__	core/base.hpp	46;"	d
__OPENCV_CORE_BUFFER_POOL_HPP__	core/bufferpool.hpp	8;"	d
__OPENCV_CORE_CUDAINL_HPP__	core/cuda.inl.hpp	45;"	d
__OPENCV_CORE_CUDALEGACY_PRIVATE_HPP__	cudalegacy/private.hpp	45;"	d
__OPENCV_CORE_CUDA_HPP__	core/cuda.hpp	45;"	d
__OPENCV_CORE_CUDA_STREAM_ACCESSOR_HPP__	core/cuda_stream_accessor.hpp	44;"	d
__OPENCV_CORE_CUDA_TYPES_HPP__	core/cuda_types.hpp	44;"	d
__OPENCV_CORE_CVDEF_H__	core/cvdef.h	46;"	d
__OPENCV_CORE_CVSTDINL_HPP__	core/cvstd.inl.hpp	45;"	d
__OPENCV_CORE_CVSTD_HPP__	core/cvstd.hpp	45;"	d
__OPENCV_CORE_C_H__	core/core_c.h	46;"	d
__OPENCV_CORE_DIRECTX_HPP__	core/directx.hpp	43;"	d
__OPENCV_CORE_EIGEN_HPP__	core/eigen.hpp	46;"	d
__OPENCV_CORE_HPP__	core.hpp	46;"	d
__OPENCV_CORE_IPPASYNC_HPP__	core/ippasync.hpp	46;"	d
__OPENCV_CORE_MATRIX_OPERATIONS_HPP__	core/mat.inl.hpp	46;"	d
__OPENCV_CORE_MATX_HPP__	core/matx.hpp	45;"	d
__OPENCV_CORE_MAT_HPP__	core/mat.hpp	45;"	d
__OPENCV_CORE_OCL_RUNTIME_CLAMDBLAS_HPP__	core/opencl/runtime/opencl_clamdblas.hpp	43;"	d
__OPENCV_CORE_OCL_RUNTIME_CLAMDFFT_HPP__	core/opencl/runtime/opencl_clamdfft.hpp	43;"	d
__OPENCV_CORE_OCL_RUNTIME_OPENCL_CORE_HPP__	core/opencl/runtime/opencl_core.hpp	43;"	d
__OPENCV_CORE_OCL_RUNTIME_OPENCL_SVM_2_0_HPP__	core/opencl/runtime/opencl_svm_20.hpp	4;"	d
__OPENCV_CORE_OCL_RUNTIME_OPENCL_SVM_DEFINITIONS_HPP__	core/opencl/runtime/opencl_svm_definitions.hpp	4;"	d
__OPENCV_CORE_OCL_RUNTIME_OPENCL_SVM_HSA_EXTENSION_HPP__	core/opencl/runtime/opencl_svm_hsa_extension.hpp	4;"	d
__OPENCV_CORE_OCL_RUNTIME_OPENCL_WRAPPERS_HPP__	core/opencl/runtime/opencl_core_wrappers.hpp	43;"	d
__OPENCV_CORE_OPENCL_SVM_HPP__	core/opencl/opencl_svm.hpp	4;"	d
__OPENCV_CORE_OPENGL_HPP__	core/opengl.hpp	44;"	d
__OPENCV_CORE_OPERATIONS_HPP__	core/operations.hpp	46;"	d
__OPENCV_CORE_PERSISTENCE_HPP__	core/persistence.hpp	45;"	d
__OPENCV_CORE_PRIVATE_CUDA_HPP__	core/private.cuda.hpp	45;"	d
__OPENCV_CORE_PRIVATE_HPP__	core/private.hpp	45;"	d
__OPENCV_CORE_PTR_INL_HPP__	core/ptr.inl.hpp	43;"	d
__OPENCV_CORE_SSE_UTILS_HPP__	core/sse_utils.hpp	43;"	d
__OPENCV_CORE_TRAITS_HPP__	core/traits.hpp	45;"	d
__OPENCV_CORE_TYPES_HPP__	core/types.hpp	45;"	d
__OPENCV_CORE_TYPES_H__	core/types_c.h	45;"	d
__OPENCV_CORE_UTILITY_H__	core/utility.hpp	46;"	d
__OPENCV_CORE_WIMAGE_HPP__	core/wimage.hpp	43;"	d
__OPENCV_CUDAARITHM_HPP__	cudaarithm.hpp	44;"	d
__OPENCV_CUDABGSEGM_HPP__	cudabgsegm.hpp	44;"	d
__OPENCV_CUDACODEC_HPP__	cudacodec.hpp	45;"	d
__OPENCV_CUDAFEATURES2D_HPP__	cudafeatures2d.hpp	44;"	d
__OPENCV_CUDAFILTERS_HPP__	cudafilters.hpp	44;"	d
__OPENCV_CUDAIMGPROC_HPP__	cudaimgproc.hpp	44;"	d
__OPENCV_CUDALEGACY_HPP__	cudalegacy.hpp	44;"	d
__OPENCV_CUDAOBJDETECT_HPP__	cudaobjdetect.hpp	44;"	d
__OPENCV_CUDAOPTFLOW_HPP__	cudaoptflow.hpp	44;"	d
__OPENCV_CUDASTEREO_HPP__	cudastereo.hpp	44;"	d
__OPENCV_CUDAWARPING_HPP__	cudawarping.hpp	44;"	d
__OPENCV_CUDA_BORDER_INTERPOLATE_HPP__	core/cuda/border_interpolate.hpp	44;"	d
__OPENCV_CUDA_COLOR_DETAIL_HPP__	core/cuda/detail/color_detail.hpp	44;"	d
__OPENCV_CUDA_COLOR_HPP__	core/cuda/color.hpp	44;"	d
__OPENCV_CUDA_COMMON_HPP__	core/cuda/common.hpp	44;"	d
__OPENCV_CUDA_DATAMOV_UTILS_HPP__	core/cuda/datamov_utils.hpp	44;"	d
__OPENCV_CUDA_DEVICE_BLOCK_HPP__	core/cuda/block.hpp	44;"	d
__OPENCV_CUDA_DEVICE_FUNCATTRIB_HPP_	core/cuda/funcattrib.hpp	44;"	d
__OPENCV_CUDA_DEVICE_WARP_HPP__	core/cuda/warp.hpp	44;"	d
__OPENCV_CUDA_DYNAMIC_SMEM_HPP__	core/cuda/dynamic_smem.hpp	44;"	d
__OPENCV_CUDA_FILTERS_HPP__	core/cuda/filters.hpp	44;"	d
__OPENCV_CUDA_FUNCTIONAL_HPP__	core/cuda/functional.hpp	44;"	d
__OPENCV_CUDA_LIMITS_HPP__	core/cuda/limits.hpp	44;"	d
__OPENCV_CUDA_PERF_UTILITY_HPP__	ts/cuda_perf.hpp	44;"	d
__OPENCV_CUDA_PRED_VAL_REDUCE_DETAIL_HPP__	core/cuda/detail/reduce_key_val.hpp	44;"	d
__OPENCV_CUDA_REDUCE_DETAIL_HPP__	core/cuda/detail/reduce.hpp	44;"	d
__OPENCV_CUDA_REDUCE_HPP__	core/cuda/reduce.hpp	44;"	d
__OPENCV_CUDA_SATURATE_CAST_HPP__	core/cuda/saturate_cast.hpp	44;"	d
__OPENCV_CUDA_SCAN_HPP__	core/cuda/scan.hpp	44;"	d
__OPENCV_CUDA_SIMD_FUNCTIONS_HPP__	core/cuda/simd_functions.hpp	74;"	d
__OPENCV_CUDA_TEST_UTILITY_HPP__	ts/cuda_test.hpp	44;"	d
__OPENCV_CUDA_TRANSFORM_DETAIL_HPP__	core/cuda/detail/transform_detail.hpp	44;"	d
__OPENCV_CUDA_TRANSFORM_HPP__	core/cuda/transform.hpp	44;"	d
__OPENCV_CUDA_TYPE_TRAITS_DETAIL_HPP__	core/cuda/detail/type_traits_detail.hpp	44;"	d
__OPENCV_CUDA_TYPE_TRAITS_HPP__	core/cuda/type_traits.hpp	44;"	d
__OPENCV_CUDA_UTILITY_HPP__	core/cuda/utility.hpp	44;"	d
__OPENCV_CUDA_VECMATH_HPP__	core/cuda/vec_math.hpp	44;"	d
__OPENCV_CUDA_VEC_DISTANCE_DETAIL_HPP__	core/cuda/detail/vec_distance_detail.hpp	44;"	d
__OPENCV_CUDA_VEC_DISTANCE_HPP__	core/cuda/vec_distance.hpp	44;"	d
__OPENCV_CUDA_VEC_TRAITS_HPP__	core/cuda/vec_traits.hpp	44;"	d
__OPENCV_CUDA_WARP_SHUFFLE_HPP__	core/cuda/warp_shuffle.hpp	44;"	d
__OPENCV_CUDEV_BLOCK_BLOCK_HPP__	cudev/block/block.hpp	47;"	d
__OPENCV_CUDEV_BLOCK_DYNAMIC_SMEM_HPP__	cudev/block/dynamic_smem.hpp	47;"	d
__OPENCV_CUDEV_BLOCK_REDUCE_DETAIL_HPP__	cudev/block/detail/reduce.hpp	47;"	d
__OPENCV_CUDEV_BLOCK_REDUCE_HPP__	cudev/block/reduce.hpp	47;"	d
__OPENCV_CUDEV_BLOCK_REDUCE_KEY_VAL_DETAIL_HPP__	cudev/block/detail/reduce_key_val.hpp	47;"	d
__OPENCV_CUDEV_BLOCK_SCAN_HPP__	cudev/block/scan.hpp	47;"	d
__OPENCV_CUDEV_BLOCK_VEC_DISTANCE_HPP__	cudev/block/vec_distance.hpp	47;"	d
__OPENCV_CUDEV_COMMON_HPP__	cudev/common.hpp	47;"	d
__OPENCV_CUDEV_EXPR_BINARY_FUNC_HPP__	cudev/expr/binary_func.hpp	47;"	d
__OPENCV_CUDEV_EXPR_BINARY_OP_HPP__	cudev/expr/binary_op.hpp	47;"	d
__OPENCV_CUDEV_EXPR_COLOR_HPP__	cudev/expr/color.hpp	47;"	d
__OPENCV_CUDEV_EXPR_DERIV_HPP__	cudev/expr/deriv.hpp	47;"	d
__OPENCV_CUDEV_EXPR_EXPR_HPP__	cudev/expr/expr.hpp	47;"	d
__OPENCV_CUDEV_EXPR_PER_ELEMENT_FUNC_HPP__	cudev/expr/per_element_func.hpp	47;"	d
__OPENCV_CUDEV_EXPR_REDUCTION_HPP__	cudev/expr/reduction.hpp	47;"	d
__OPENCV_CUDEV_EXPR_UNARY_FUNC_HPP__	cudev/expr/unary_func.hpp	47;"	d
__OPENCV_CUDEV_EXPR_UNARY_OP_HPP__	cudev/expr/unary_op.hpp	47;"	d
__OPENCV_CUDEV_EXPR_WARPING_HPP__	cudev/expr/warping.hpp	47;"	d
__OPENCV_CUDEV_FUNCTIONAL_COLOR_CVT_DETAIL_HPP__	cudev/functional/detail/color_cvt.hpp	47;"	d
__OPENCV_CUDEV_FUNCTIONAL_COLOR_CVT_HPP__	cudev/functional/color_cvt.hpp	47;"	d
__OPENCV_CUDEV_FUNCTIONAL_FUNCTIONAL_HPP__	cudev/functional/functional.hpp	47;"	d
__OPENCV_CUDEV_FUNCTIONAL_TUPLE_ADAPTER_HPP__	cudev/functional/tuple_adapter.hpp	47;"	d
__OPENCV_CUDEV_GRID_COPY_DETAIL_HPP__	cudev/grid/detail/copy.hpp	47;"	d
__OPENCV_CUDEV_GRID_COPY_HPP__	cudev/grid/copy.hpp	47;"	d
__OPENCV_CUDEV_GRID_HISTOGRAM_DETAIL_HPP__	cudev/grid/detail/histogram.hpp	47;"	d
__OPENCV_CUDEV_GRID_HISTOGRAM_HPP__	cudev/grid/histogram.hpp	47;"	d
__OPENCV_CUDEV_GRID_INTEGRAL_DETAIL_HPP__	cudev/grid/detail/integral.hpp	47;"	d
__OPENCV_CUDEV_GRID_INTEGRAL_HPP__	cudev/grid/integral.hpp	47;"	d
__OPENCV_CUDEV_GRID_MINMAXLOC_DETAIL_HPP__	cudev/grid/detail/minmaxloc.hpp	47;"	d
__OPENCV_CUDEV_GRID_PYRAMIDS_HPP__	cudev/grid/pyramids.hpp	47;"	d
__OPENCV_CUDEV_GRID_PYR_DOWN_DETAIL_HPP__	cudev/grid/detail/pyr_down.hpp	47;"	d
__OPENCV_CUDEV_GRID_PYR_UP_DETAIL_HPP__	cudev/grid/detail/pyr_up.hpp	47;"	d
__OPENCV_CUDEV_GRID_REDUCE_DETAIL_HPP__	cudev/grid/detail/reduce.hpp	47;"	d
__OPENCV_CUDEV_GRID_REDUCE_HPP__	cudev/grid/reduce.hpp	47;"	d
__OPENCV_CUDEV_GRID_REDUCE_TO_COLUMN_DETAIL_HPP__	cudev/grid/detail/reduce_to_column.hpp	47;"	d
__OPENCV_CUDEV_GRID_REDUCE_TO_ROW_DETAIL_HPP__	cudev/grid/detail/reduce_to_row.hpp	47;"	d
__OPENCV_CUDEV_GRID_REDUCE_TO_VEC_HPP__	cudev/grid/reduce_to_vec.hpp	47;"	d
__OPENCV_CUDEV_GRID_SPLIT_MERGE_DETAIL_HPP__	cudev/grid/detail/split_merge.hpp	47;"	d
__OPENCV_CUDEV_GRID_SPLIT_MERGE_HPP__	cudev/grid/split_merge.hpp	47;"	d
__OPENCV_CUDEV_GRID_TRANSFORM_DETAIL_HPP__	cudev/grid/detail/transform.hpp	47;"	d
__OPENCV_CUDEV_GRID_TRANSFORM_HPP__	cudev/grid/transform.hpp	47;"	d
__OPENCV_CUDEV_GRID_TRANSPOSE_DETAIL_HPP__	cudev/grid/detail/transpose.hpp	47;"	d
__OPENCV_CUDEV_GRID_TRANSPOSE_HPP__	cudev/grid/transpose.hpp	47;"	d
__OPENCV_CUDEV_HPP__	cudev.hpp	47;"	d
__OPENCV_CUDEV_PTR2D_CONSTANT_HPP__	cudev/ptr2d/constant.hpp	47;"	d
__OPENCV_CUDEV_PTR2D_DERIV_HPP__	cudev/ptr2d/deriv.hpp	47;"	d
__OPENCV_CUDEV_PTR2D_EXTRAPOLATION_HPP__	cudev/ptr2d/extrapolation.hpp	47;"	d
__OPENCV_CUDEV_PTR2D_GLOB_HPP__	cudev/ptr2d/glob.hpp	47;"	d
__OPENCV_CUDEV_PTR2D_GPUMAT_DETAIL_HPP__	cudev/ptr2d/detail/gpumat.hpp	47;"	d
__OPENCV_CUDEV_PTR2D_GPUMAT_HPP__	cudev/ptr2d/gpumat.hpp	47;"	d
__OPENCV_CUDEV_PTR2D_INTERPOLATION_HPP__	cudev/ptr2d/interpolation.hpp	47;"	d
__OPENCV_CUDEV_PTR2D_LUT_HPP__	cudev/ptr2d/lut.hpp	47;"	d
__OPENCV_CUDEV_PTR2D_MASK_HPP__	cudev/ptr2d/mask.hpp	47;"	d
__OPENCV_CUDEV_PTR2D_REMAP_HPP__	cudev/ptr2d/remap.hpp	47;"	d
__OPENCV_CUDEV_PTR2D_RESIZE_HPP__	cudev/ptr2d/resize.hpp	47;"	d
__OPENCV_CUDEV_PTR2D_TEXTURE_HPP__	cudev/ptr2d/texture.hpp	47;"	d
__OPENCV_CUDEV_PTR2D_TRAITS_HPP__	cudev/ptr2d/traits.hpp	47;"	d
__OPENCV_CUDEV_PTR2D_TRANSFORM_HPP__	cudev/ptr2d/transform.hpp	47;"	d
__OPENCV_CUDEV_PTR2D_WARPING_HPP__	cudev/ptr2d/warping.hpp	47;"	d
__OPENCV_CUDEV_PTR2D_ZIP_HPP__	cudev/ptr2d/zip.hpp	47;"	d
__OPENCV_CUDEV_UTIL_ATOMIC_HPP__	cudev/util/atomic.hpp	47;"	d
__OPENCV_CUDEV_UTIL_LIMITS_HPP__	cudev/util/limits.hpp	47;"	d
__OPENCV_CUDEV_UTIL_SATURATE_CAST_HPP__	cudev/util/saturate_cast.hpp	47;"	d
__OPENCV_CUDEV_UTIL_SIMD_FUNCTIONS_HPP__	cudev/util/simd_functions.hpp	77;"	d
__OPENCV_CUDEV_UTIL_TUPLE_DETAIL_HPP__	cudev/util/detail/tuple.hpp	47;"	d
__OPENCV_CUDEV_UTIL_TUPLE_HPP__	cudev/util/tuple.hpp	47;"	d
__OPENCV_CUDEV_UTIL_TYPE_TRAITS_DETAIL_HPP__	cudev/util/detail/type_traits.hpp	47;"	d
__OPENCV_CUDEV_UTIL_TYPE_TRAITS_HPP__	cudev/util/type_traits.hpp	47;"	d
__OPENCV_CUDEV_UTIL_VEC_MATH_HPP__	cudev/util/vec_math.hpp	47;"	d
__OPENCV_CUDEV_UTIL_VEC_TRAITS_HPP__	cudev/util/vec_traits.hpp	47;"	d
__OPENCV_CUDEV_WARP_REDUCE_DETAIL_HPP__	cudev/warp/detail/reduce.hpp	47;"	d
__OPENCV_CUDEV_WARP_REDUCE_HPP__	cudev/warp/reduce.hpp	47;"	d
__OPENCV_CUDEV_WARP_REDUCE_KEY_VAL_DETAIL_HPP__	cudev/warp/detail/reduce_key_val.hpp	47;"	d
__OPENCV_CUDEV_WARP_SCAN_HPP__	cudev/warp/scan.hpp	47;"	d
__OPENCV_CUDEV_WARP_SHUFFLE_HPP__	cudev/warp/shuffle.hpp	47;"	d
__OPENCV_CUDEV_WARP_WARP_HPP__	cudev/warp/warp.hpp	47;"	d
__OPENCV_DEF_H__	hal/defs.h	46;"	d
__OPENCV_EMD_L1_HPP__	shape/emdL1.hpp	44;"	d
__OPENCV_FEATURES_2D_HPP__	features2d.hpp	44;"	d
__OPENCV_GTESTCV_HPP__	ts.hpp	2;"	d
__OPENCV_HAL_HPP__	hal.hpp	46;"	d
__OPENCV_HAL_INTRIN_CPP_HPP__	hal/intrin_cpp.hpp	46;"	d
__OPENCV_HAL_INTRIN_HPP__	hal/intrin.hpp	46;"	d
__OPENCV_HAL_INTRIN_NEON_HPP__	hal/intrin_neon.hpp	46;"	d
__OPENCV_HAL_SSE_HPP__	hal/intrin_sse.hpp	46;"	d
__OPENCV_HIGHGUI_HPP__	highgui.hpp	44;"	d
__OPENCV_HIGHGUI_H__	highgui/highgui_c.h	43;"	d
__OPENCV_HIST_COST_HPP__	shape/hist_cost.hpp	45;"	d
__OPENCV_IMGCODECS_HPP__	imgcodecs.hpp	44;"	d
__OPENCV_IMGCODECS_H__	imgcodecs/imgcodecs_c.h	43;"	d
__OPENCV_IMGPROC_HPP__	imgproc.hpp	44;"	d
__OPENCV_IMGPROC_IMGPROC_C_H__	imgproc/imgproc_c.h	44;"	d
__OPENCV_IMGPROC_TYPES_C_H__	imgproc/types_c.h	44;"	d
__OPENCV_ML_HPP__	ml.hpp	45;"	d
__OPENCV_OBJDETECT_C_H__	objdetect/objdetect_c.h	45;"	d
__OPENCV_OBJDETECT_DBT_HPP__	objdetect/detection_based_tracker.hpp	45;"	d
__OPENCV_OBJDETECT_HPP__	objdetect.hpp	45;"	d
__OPENCV_OPENCL_GENBASE_HPP__	core/ocl_genbase.hpp	43;"	d
__OPENCV_OPENCL_HPP__	core/ocl.hpp	43;"	d
__OPENCV_OPTIM_HPP__	core/optim.hpp	43;"	d
__OPENCV_PHOTO_CUDA_HPP__	photo/cuda.hpp	44;"	d
__OPENCV_PHOTO_C_H__	photo/photo_c.h	44;"	d
__OPENCV_PHOTO_HPP__	photo.hpp	44;"	d
__OPENCV_SHAPE_HPP__	shape.hpp	44;"	d
__OPENCV_SHAPE_SHAPE_DISTANCE_HPP__	shape/shape_distance.hpp	45;"	d
__OPENCV_SHAPE_SHAPE_TRANSFORM_HPP__	shape/shape_transformer.hpp	45;"	d
__OPENCV_STITCHING_AUTOCALIB_HPP__	stitching/detail/autocalib.hpp	44;"	d
__OPENCV_STITCHING_BLENDERS_HPP__	stitching/detail/blenders.hpp	44;"	d
__OPENCV_STITCHING_CAMERA_HPP__	stitching/detail/camera.hpp	44;"	d
__OPENCV_STITCHING_EXPOSURE_COMPENSATE_HPP__	stitching/detail/exposure_compensate.hpp	44;"	d
__OPENCV_STITCHING_MATCHERS_HPP__	stitching/detail/matchers.hpp	44;"	d
__OPENCV_STITCHING_MOTION_ESTIMATORS_HPP__	stitching/detail/motion_estimators.hpp	44;"	d
__OPENCV_STITCHING_SEAM_FINDERS_HPP__	stitching/detail/seam_finders.hpp	44;"	d
__OPENCV_STITCHING_STITCHER_HPP__	stitching.hpp	44;"	d
__OPENCV_STITCHING_TIMELAPSERS_HPP__	stitching/detail/timelapsers.hpp	45;"	d
__OPENCV_STITCHING_UTIL_HPP__	stitching/detail/util.hpp	44;"	d
__OPENCV_STITCHING_UTIL_INL_HPP__	stitching/detail/util_inl.hpp	44;"	d
__OPENCV_STITCHING_WARPERS_HPP__	stitching/detail/warpers.hpp	44;"	d
__OPENCV_STITCHING_WARPERS_INL_HPP__	stitching/detail/warpers_inl.hpp	44;"	d
__OPENCV_STITCHING_WARPER_CREATORS_HPP__	stitching/warpers.hpp	44;"	d
__OPENCV_SUPERRES_HPP__	superres.hpp	44;"	d
__OPENCV_SUPERRES_OPTICAL_FLOW_HPP__	superres/optical_flow.hpp	44;"	d
__OPENCV_TRACKING_C_H__	video/tracking_c.h	45;"	d
__OPENCV_TRACKING_HPP__	video/tracking.hpp	45;"	d
__OPENCV_TS_EXT_HPP__	ts/ts_ext.hpp	9;"	d
__OPENCV_TS_OCL_PERF_HPP__	ts/ocl_perf.hpp	43;"	d
__OPENCV_TS_OCL_TEST_HPP__	ts/ocl_test.hpp	43;"	d
__OPENCV_TS_PERF_HPP__	ts/ts_perf.hpp	2;"	d
__OPENCV_VERSION_HPP__	core/version.hpp	51;"	d
__OPENCV_VIDEOIO_HPP__	videoio.hpp	44;"	d
__OPENCV_VIDEOIO_H__	videoio/videoio_c.h	43;"	d
__OPENCV_VIDEOSTAB_DEBLURRING_HPP__	videostab/deblurring.hpp	44;"	d
__OPENCV_VIDEOSTAB_FAST_MARCHING_HPP__	videostab/fast_marching.hpp	44;"	d
__OPENCV_VIDEOSTAB_FAST_MARCHING_INL_HPP__	videostab/fast_marching_inl.hpp	44;"	d
__OPENCV_VIDEOSTAB_FRAME_SOURCE_HPP__	videostab/frame_source.hpp	44;"	d
__OPENCV_VIDEOSTAB_GLOBAL_MOTION_HPP__	videostab/global_motion.hpp	44;"	d
__OPENCV_VIDEOSTAB_HPP__	videostab.hpp	44;"	d
__OPENCV_VIDEOSTAB_INPAINTINT_HPP__	videostab/inpainting.hpp	44;"	d
__OPENCV_VIDEOSTAB_LOG_HPP__	videostab/log.hpp	44;"	d
__OPENCV_VIDEOSTAB_MOTION_CORE_HPP__	videostab/motion_core.hpp	44;"	d
__OPENCV_VIDEOSTAB_MOTION_STABILIZING_HPP__	videostab/motion_stabilizing.hpp	44;"	d
__OPENCV_VIDEOSTAB_OPTICAL_FLOW_HPP__	videostab/optical_flow.hpp	44;"	d
__OPENCV_VIDEOSTAB_OUTLIER_REJECTION_HPP__	videostab/outlier_rejection.hpp	44;"	d
__OPENCV_VIDEOSTAB_RING_BUFFER_HPP__	videostab/ring_buffer.hpp	44;"	d
__OPENCV_VIDEOSTAB_STABILIZER_HPP__	videostab/stabilizer.hpp	44;"	d
__OPENCV_VIDEOSTAB_WOBBLE_SUPPRESSION_HPP__	videostab/wobble_suppression.hpp	44;"	d
__OPENCV_VIDEO_HPP__	video.hpp	45;"	d
__OPENCV_VIZCORE_HPP__	viz/vizcore.hpp	47;"	d
__OPENCV_VIZ_HPP__	viz.hpp	47;"	d
__OPENCV_VIZ_TYPES_HPP__	viz/types.hpp	47;"	d
__OPENCV_VIZ_VIZ3D_HPP__	viz/viz3d.hpp	47;"	d
__OPENCV_VIZ_WIDGETS_HPP__	viz/widgets.hpp	47;"	d
__OPENCV_VIZ_WIDGET_ACCESSOR_HPP__	viz/widget_accessor.hpp	47;"	d
__OPENCV_WORLD_HPP__	world.hpp	44;"	d
__UMAT_USAGE_FLAGS_32BIT	core/mat.hpp	/^    __UMAT_USAGE_FLAGS_32BIT = 0x7fffffff \/\/ Binary compatibility hint$/;"	e	enum:cv::UMatUsageFlags
__align__	cudalegacy/NCV.hpp	104;"	d
__has_extension	core/base.hpp	259;"	d
__xgetbv	hal/defs.h	158;"	d
__xgetbv	hal/defs.h	160;"	d
_alignment	cudalegacy/NCV.hpp	/^    Ncv32u _alignment;$/;"	m	class:NCVMemNativeAllocator
_alignment	cudalegacy/NCV.hpp	/^    Ncv32u _alignment;$/;"	m	class:NCVMemStackAllocator
_dataAsRow	core.hpp	/^    bool _dataAsRow;$/;"	m	class:cv::LDA
_declareHelper	ts/ts_perf.hpp	/^    class CV_EXPORTS _declareHelper$/;"	c	class:perf::TestBase
_eigenvalues	core.hpp	/^    Mat _eigenvalues;$/;"	m	class:cv::LDA
_eigenvectors	core.hpp	/^    Mat _eigenvectors;$/;"	m	class:cv::LDA
_height	cudalegacy/NCV.hpp	/^    Ncv32u _height;$/;"	m	class:NCVMatrix
_length	cudalegacy/NCV.hpp	/^    size_t _length;$/;"	m	class:NCVVector
_log	flann/logger.h	/^    int _log(int level, const char* fmt, va_list arglist)$/;"	f	class:cvflann::Logger
_maxSize	cudalegacy/NCV.hpp	/^    size_t _maxSize;$/;"	m	class:NCVMemNativeAllocator
_maxSize	cudalegacy/NCV.hpp	/^    size_t _maxSize;$/;"	m	class:NCVMemStackAllocator
_memType	cudalegacy/NCV.hpp	/^    NCVMemoryType _memType;$/;"	m	class:NCVMemNativeAllocator
_memType	cudalegacy/NCV.hpp	/^    NCVMemoryType _memType;$/;"	m	class:NCVMemStackAllocator
_memtype	cudalegacy/NCV.hpp	/^    NCVMemoryType _memtype;$/;"	m	class:NCVMatrix
_memtype	cudalegacy/NCV.hpp	/^    NCVMemoryType _memtype;$/;"	m	class:NCVVector
_mm_deinterleave_epi16	core/sse_utils.hpp	/^inline void _mm_deinterleave_epi16(__m128i & v_r0, __m128i & v_r1, __m128i & v_g0, __m128i & v_g1)$/;"	f
_mm_deinterleave_epi16	core/sse_utils.hpp	/^inline void _mm_deinterleave_epi16(__m128i & v_r0, __m128i & v_r1, __m128i & v_g0, __m128i & v_g1,$/;"	f
_mm_deinterleave_epi16	core/sse_utils.hpp	/^inline void _mm_deinterleave_epi16(__m128i & v_r0, __m128i & v_r1, __m128i & v_g0,$/;"	f
_mm_deinterleave_epi8	core/sse_utils.hpp	/^inline void _mm_deinterleave_epi8(__m128i & v_r0, __m128i & v_r1, __m128i & v_g0, __m128i & v_g1)$/;"	f
_mm_deinterleave_epi8	core/sse_utils.hpp	/^inline void _mm_deinterleave_epi8(__m128i & v_r0, __m128i & v_r1, __m128i & v_g0, __m128i & v_g1,$/;"	f
_mm_deinterleave_epi8	core/sse_utils.hpp	/^inline void _mm_deinterleave_epi8(__m128i & v_r0, __m128i & v_r1, __m128i & v_g0,$/;"	f
_mm_deinterleave_ps	core/sse_utils.hpp	/^inline void _mm_deinterleave_ps(__m128 & v_r0, __m128 & v_r1, __m128 & v_g0, __m128 & v_g1)$/;"	f
_mm_deinterleave_ps	core/sse_utils.hpp	/^inline void _mm_deinterleave_ps(__m128 & v_r0, __m128 & v_r1, __m128 & v_g0, __m128 & v_g1,$/;"	f
_mm_deinterleave_ps	core/sse_utils.hpp	/^inline void _mm_deinterleave_ps(__m128 & v_r0, __m128 & v_r1, __m128 & v_g0,$/;"	f
_mm_interleave_epi16	core/sse_utils.hpp	/^inline void _mm_interleave_epi16(__m128i & v_r0, __m128i & v_r1, __m128i & v_g0, __m128i & v_g1)$/;"	f
_mm_interleave_epi16	core/sse_utils.hpp	/^inline void _mm_interleave_epi16(__m128i & v_r0, __m128i & v_r1, __m128i & v_g0, __m128i & v_g1,$/;"	f
_mm_interleave_epi16	core/sse_utils.hpp	/^inline void _mm_interleave_epi16(__m128i & v_r0, __m128i & v_r1, __m128i & v_g0,$/;"	f
_mm_interleave_epi8	core/sse_utils.hpp	/^inline void _mm_interleave_epi8(__m128i & v_r0, __m128i & v_r1, __m128i & v_g0, __m128i & v_g1)$/;"	f
_mm_interleave_epi8	core/sse_utils.hpp	/^inline void _mm_interleave_epi8(__m128i & v_r0, __m128i & v_r1, __m128i & v_g0, __m128i & v_g1,$/;"	f
_mm_interleave_epi8	core/sse_utils.hpp	/^inline void _mm_interleave_epi8(__m128i & v_r0, __m128i & v_r1, __m128i & v_g0,$/;"	f
_mm_interleave_ps	core/sse_utils.hpp	/^inline void _mm_interleave_ps(__m128 & v_r0, __m128 & v_r1, __m128 & v_g0, __m128 & v_g1)$/;"	f
_mm_interleave_ps	core/sse_utils.hpp	/^inline void _mm_interleave_ps(__m128 & v_r0, __m128 & v_r1, __m128 & v_g0, __m128 & v_g1,$/;"	f
_mm_interleave_ps	core/sse_utils.hpp	/^inline void _mm_interleave_ps(__m128 & v_r0, __m128 & v_r1, __m128 & v_g0,$/;"	f
_ncv_hpp_	cudalegacy/NCV.hpp	44;"	d
_ncv_optical_flow_h_	cudalegacy/NCVBroxOpticalFlow.hpp	61;"	d
_ncvhaarobjectdetection_hpp_	cudalegacy/NCVHaarObjectDetection.hpp	60;"	d
_ncvpyramid_hpp_	cudalegacy/NCVPyramid.hpp	44;"	d
_npp_staging_hpp_	cudalegacy/NPP_staging.hpp	44;"	d
_num_components	core.hpp	/^    int _num_components;$/;"	m	class:cv::LDA
_pitch	cudalegacy/NCV.hpp	/^    Ncv32u _pitch;$/;"	m	class:NCVMatrix
_ptr	cudalegacy/NCV.hpp	/^    T *_ptr;$/;"	m	class:NCVMatrix
_ptr	cudalegacy/NCV.hpp	/^    T *_ptr;$/;"	m	class:NCVVector
_setDestination	flann/logger.h	/^    void _setDestination(const char* name)$/;"	f	class:cvflann::Logger
_timeadjustment	ts/ts_perf.hpp	/^    static int64 _timeadjustment;$/;"	m	class:perf::TestBase
_type	ts/ts_perf.hpp	/^    int _type;$/;"	m	class:perf::MatType
_ui1	cudalegacy/NCVHaarObjectDetection.hpp	/^    uint1 _ui1;$/;"	m	struct:HaarClassifierNodeDescriptor32
_ui2	cudalegacy/NCVHaarObjectDetection.hpp	/^    uint2 _ui2;$/;"	m	struct:HaarFeature64
_ui2	cudalegacy/NCVHaarObjectDetection.hpp	/^    uint2 _ui2;$/;"	m	struct:HaarStage64
_ui4	cudalegacy/NCVHaarObjectDetection.hpp	/^    uint4 _ui4;$/;"	m	struct:HaarClassifierNode128
_width	cudalegacy/NCV.hpp	/^    Ncv32u _width;$/;"	m	class:NCVMatrix
a	core/cuda/functional.hpp	/^        struct No {Yes a[2];};$/;"	m	struct:cv::cuda::device::IsBinaryFunction::No
a	core/cuda/functional.hpp	/^        struct No {Yes a[2];};$/;"	m	struct:cv::cuda::device::IsUnaryFunction::No
a	core/mat.hpp	/^    Mat a, b, c;$/;"	m	class:cv::MatExpr
a	cudev/functional/functional.hpp	/^    struct No {Yes a[2];};$/;"	m	struct:cv::cudev::IsBinaryFunction::No
a	cudev/functional/functional.hpp	/^    struct No {Yes a[2];};$/;"	m	struct:cv::cudev::IsUnaryFunction::No
a	stitching/detail/warpers.hpp	/^    float a, b;$/;"	m	struct:cv::detail::CompressedRectilinearPortraitProjector
a	stitching/detail/warpers.hpp	/^    float a, b;$/;"	m	struct:cv::detail::CompressedRectilinearProjector
a	stitching/detail/warpers.hpp	/^    float a, b;$/;"	m	struct:cv::detail::PaniniPortraitProjector
a	stitching/detail/warpers.hpp	/^    float a, b;$/;"	m	struct:cv::detail::PaniniProjector
a	stitching/warpers.hpp	/^    float a, b;$/;"	m	class:cv::CompressedRectilinearPortraitWarper
a	stitching/warpers.hpp	/^    float a, b;$/;"	m	class:cv::CompressedRectilinearWarper
a	stitching/warpers.hpp	/^    float a, b;$/;"	m	class:cv::PaniniPortraitWarper
a	stitching/warpers.hpp	/^    float a, b;$/;"	m	class:cv::PaniniWarper
a0	core/cuda/vec_traits.hpp	/^        double a0, a1, a2, a3, a4, a5, a6, a7;$/;"	m	struct:cv::cuda::device::double8
a1	core/cuda/vec_traits.hpp	/^        double a0, a1, a2, a3, a4, a5, a6, a7;$/;"	m	struct:cv::cuda::device::double8
a2	core/cuda/vec_traits.hpp	/^        double a0, a1, a2, a3, a4, a5, a6, a7;$/;"	m	struct:cv::cuda::device::double8
a3	core/cuda/vec_traits.hpp	/^        double a0, a1, a2, a3, a4, a5, a6, a7;$/;"	m	struct:cv::cuda::device::double8
a4	core/cuda/vec_traits.hpp	/^        double a0, a1, a2, a3, a4, a5, a6, a7;$/;"	m	struct:cv::cuda::device::double8
a5	core/cuda/vec_traits.hpp	/^        double a0, a1, a2, a3, a4, a5, a6, a7;$/;"	m	struct:cv::cuda::device::double8
a6	core/cuda/vec_traits.hpp	/^        double a0, a1, a2, a3, a4, a5, a6, a7;$/;"	m	struct:cv::cuda::device::double8
a7	core/cuda/vec_traits.hpp	/^        double a0, a1, a2, a3, a4, a5, a6, a7;$/;"	m	struct:cv::cuda::device::double8
abs	core/cvdef.h	56;"	d
abs	core/cvstd.hpp	/^    static inline uchar abs(uchar a) { return a; }$/;"	f	namespace:std
abs	core/cvstd.hpp	/^    static inline uint64 abs(uint64 a) { return a; }$/;"	f	namespace:std
abs	core/cvstd.hpp	/^    static inline unsigned abs(unsigned a) { return a; }$/;"	f	namespace:std
abs	core/cvstd.hpp	/^    static inline ushort abs(ushort a) { return a; }$/;"	f	namespace:std
abs	core/mat.inl.hpp	/^MatExpr abs(const Mat_<_Tp>& m)$/;"	f	namespace:cv
abs	core/types.hpp	/^double abs(const Complex<_Tp>& a)$/;"	f	namespace:cv
abs	flann/dist.h	/^inline T abs(T x) { return (x<0) ? -x : x; }$/;"	f	namespace:cvflann
abs	flann/dist.h	/^inline double abs<double>(double x) { return fabs(x); }$/;"	f	namespace:cvflann
abs	flann/dist.h	/^inline float abs<float>(float x) { return fabsf(x); }$/;"	f	namespace:cvflann
abs	flann/dist.h	/^inline int abs<int>(int x) { return ::abs(x); }$/;"	f	namespace:cvflann
abs_	cudev/util/vec_math.hpp	/^    __device__ __forceinline__ schar abs_(schar val)$/;"	f	namespace:cv::cudev::vec_math_detail
abs_	cudev/util/vec_math.hpp	/^    __device__ __forceinline__ short abs_(short val)$/;"	f	namespace:cv::cudev::vec_math_detail
abs_func	core/cuda/functional.hpp	/^        __host__ __device__ __forceinline__ abs_func() {}$/;"	f	struct:cv::cuda::device::abs_func
abs_func	core/cuda/functional.hpp	/^        __host__ __device__ __forceinline__ abs_func(const abs_func&) {}$/;"	f	struct:cv::cuda::device::abs_func
abs_func	core/cuda/functional.hpp	/^    template <> struct abs_func<char> : unary_function<char, char>$/;"	s	namespace:cv::cuda::device
abs_func	core/cuda/functional.hpp	/^    template <> struct abs_func<double> : unary_function<double, double>$/;"	s	namespace:cv::cuda::device
abs_func	core/cuda/functional.hpp	/^    template <> struct abs_func<float> : unary_function<float, float>$/;"	s	namespace:cv::cuda::device
abs_func	core/cuda/functional.hpp	/^    template <> struct abs_func<int> : unary_function<int, int>$/;"	s	namespace:cv::cuda::device
abs_func	core/cuda/functional.hpp	/^    template <> struct abs_func<short> : unary_function<short, short>$/;"	s	namespace:cv::cuda::device
abs_func	core/cuda/functional.hpp	/^    template <> struct abs_func<signed char> : unary_function<signed char, signed char>$/;"	s	namespace:cv::cuda::device
abs_func	core/cuda/functional.hpp	/^    template <> struct abs_func<unsigned char> : unary_function<unsigned char, unsigned char>$/;"	s	namespace:cv::cuda::device
abs_func	core/cuda/functional.hpp	/^    template <> struct abs_func<unsigned int> : unary_function<unsigned int, unsigned int>$/;"	s	namespace:cv::cuda::device
abs_func	core/cuda/functional.hpp	/^    template <> struct abs_func<unsigned short> : unary_function<unsigned short, unsigned short>$/;"	s	namespace:cv::cuda::device
abs_func	core/cuda/functional.hpp	/^    template <typename T> struct abs_func : unary_function<T, T>$/;"	s	namespace:cv::cuda::device
abs_func	cudev/functional/functional.hpp	/^template <> struct abs_func<double> : unary_function<double, double>$/;"	s	namespace:cv::cudev
abs_func	cudev/functional/functional.hpp	/^template <> struct abs_func<float> : unary_function<float, float>$/;"	s	namespace:cv::cudev
abs_func	cudev/functional/functional.hpp	/^template <> struct abs_func<int> : unary_function<int, int>$/;"	s	namespace:cv::cudev
abs_func	cudev/functional/functional.hpp	/^template <> struct abs_func<schar> : unary_function<schar, schar>$/;"	s	namespace:cv::cudev
abs_func	cudev/functional/functional.hpp	/^template <> struct abs_func<short> : unary_function<short, short>$/;"	s	namespace:cv::cudev
abs_func	cudev/functional/functional.hpp	/^template <> struct abs_func<uchar> : unary_function<uchar, uchar>$/;"	s	namespace:cv::cudev
abs_func	cudev/functional/functional.hpp	/^template <> struct abs_func<uint> : unary_function<uint, uint>$/;"	s	namespace:cv::cudev
abs_func	cudev/functional/functional.hpp	/^template <> struct abs_func<ushort> : unary_function<ushort, ushort>$/;"	s	namespace:cv::cudev
abs_func	cudev/functional/functional.hpp	/^template <typename T> struct abs_func : unary_function<T, T>$/;"	s	namespace:cv::cudev
abs_type	hal/intrin.hpp	/^    typedef _Tp abs_type;$/;"	t	struct:cv::V_TypeTraits
abs_type	hal/intrin.hpp	/^    typedef double abs_type;$/;"	t	struct:cv::V_TypeTraits
abs_type	hal/intrin.hpp	/^    typedef float abs_type;$/;"	t	struct:cv::V_TypeTraits
abs_type	hal/intrin.hpp	/^    typedef uchar abs_type;$/;"	t	struct:cv::V_TypeTraits
abs_type	hal/intrin.hpp	/^    typedef uint64 abs_type;$/;"	t	struct:cv::V_TypeTraits
abs_type	hal/intrin.hpp	/^    typedef unsigned abs_type;$/;"	t	struct:cv::V_TypeTraits
abs_type	hal/intrin.hpp	/^    typedef ushort abs_type;$/;"	t	struct:cv::V_TypeTraits
abs_vec	hal/intrin_cpp.hpp	/^    typedef v_reg<typename V_TypeTraits<_Tp>::abs_type, n> abs_vec;$/;"	t	struct:cv::v_reg
absdiff_func	cudev/functional/functional.hpp	/^template <typename T> struct absdiff_func : binary_function<T, T, T>$/;"	s	namespace:cv::cudev
accum_dist	flann/dist.h	/^    inline ResultType accum_dist(const U& a, const V& b, int) const$/;"	f	struct:cvflann::ChiSquareDistance
accum_dist	flann/dist.h	/^    inline ResultType accum_dist(const U& a, const V& b, int) const$/;"	f	struct:cvflann::HellingerDistance
accum_dist	flann/dist.h	/^    inline ResultType accum_dist(const U& a, const V& b, int) const$/;"	f	struct:cvflann::HistIntersectionDistance
accum_dist	flann/dist.h	/^    inline ResultType accum_dist(const U& a, const V& b, int) const$/;"	f	struct:cvflann::KL_Divergence
accum_dist	flann/dist.h	/^    inline ResultType accum_dist(const U& a, const V& b, int) const$/;"	f	struct:cvflann::L1
accum_dist	flann/dist.h	/^    inline ResultType accum_dist(const U& a, const V& b, int) const$/;"	f	struct:cvflann::L2
accum_dist	flann/dist.h	/^    inline ResultType accum_dist(const U& a, const V& b, int) const$/;"	f	struct:cvflann::L2_Simple
accum_dist	flann/dist.h	/^    inline ResultType accum_dist(const U& a, const V& b, int) const$/;"	f	struct:cvflann::MinkowskiDistance
action	viz/types.hpp	/^            Action action;$/;"	m	class:cv::viz::KeyboardEvent
actual_num_bands_	stitching/detail/blenders.hpp	/^    int actual_num_bands_, num_bands_;$/;"	m	class:cv::detail::MultiBandBlender
ad_hoc_test_result	ts/ts_gtest.h	/^  const TestResult& ad_hoc_test_result() const { return ad_hoc_test_result_; }$/;"	f	class:testing::TestCase
ad_hoc_test_result_	ts/ts_gtest.h	/^  TestResult ad_hoc_test_result_;$/;"	m	class:testing::TestCase
add	cudev/grid/detail/reduce.hpp	/^        __device__ __forceinline__ static void add(R* ptr, R val)$/;"	f	struct:cv::cudev::grid_reduce_detail::AtomicUnroll
add	cudev/grid/detail/reduce.hpp	/^        __device__ __forceinline__ static void add(R* ptr, val_type val)$/;"	f	struct:cv::cudev::grid_reduce_detail::AtomicUnroll
add	flann/lsh_table.h	/^    void add(Matrix<ElementType> dataset)$/;"	f	class:cvflann::lsh::LshTable
add	flann/lsh_table.h	/^    void add(unsigned int value, const ElementType* feature)$/;"	f	class:cvflann::lsh::LshTable
addPoint	flann/result_set.h	/^    inline void addPoint(DistanceType dist, int index)$/;"	f	class:cvflann::KNNUniqueResultSet
addPoint	flann/result_set.h	/^    void addPoint(DistanceType dist, int index)$/;"	f	class:cvflann::KNNResultSet
addPoint	flann/result_set.h	/^    void addPoint(DistanceType dist, int index)$/;"	f	class:cvflann::KNNSimpleResultSet
addPoint	flann/result_set.h	/^    void addPoint(DistanceType dist, int index)$/;"	f	class:cvflann::RadiusResultSet
addPoint	flann/result_set.h	/^    void addPoint(DistanceType dist, int index)$/;"	f	class:cvflann::RadiusUniqueResultSet
addValue	flann/simplex_downhill.h	/^void addValue(int pos, float val, float* vals, T* point, T* points, int n)$/;"	f	namespace:cvflann
addedDescCount	features2d.hpp	/^    int addedDescCount;$/;"	m	class:cv::FlannBasedMatcher
addref	core/mat.inl.hpp	/^void Mat::addref()$/;"	f	class:cv::Mat
addref	core/mat.inl.hpp	/^void SparseMat::addref()$/;"	f	class:cv::SparseMat
addref	core/mat.inl.hpp	/^void UMat::addref()$/;"	f	class:cv::UMat
address	core/cvstd.hpp	/^    const_pointer address(const_reference r) { return &r; }$/;"	f	class:cv::Allocator
address	core/cvstd.hpp	/^    pointer address(reference r) { return &r; }$/;"	f	class:cv::Allocator
adjustROI	core/mat.inl.hpp	/^Mat_<_Tp>& Mat_<_Tp>::adjustROI( int dtop, int dbottom, int dleft, int dright )$/;"	f	class:cv::Mat_
adjustROI	cudev/ptr2d/detail/gpumat.hpp	/^__host__ GpuMat_<T>& GpuMat_<T>::adjustROI(int dtop, int dbottom, int dleft, int dright)$/;"	f	class:cv::cudev::GpuMat_
affineMap	cudev/ptr2d/warping.hpp	/^__host__ static AffineMapPtrSz affineMap(Size dstSize, const GpuMat_<float>& warpMat)$/;"	f	namespace:cv::cudev
algo	flann/miniflann.hpp	/^    cvflann::flann_algorithm_t algo;$/;"	m	class:cv::flann::Index
align	core/types_c.h	/^    int  align;             \/**< Alignment of image rows (4 or 8).$/;"	m	struct:_IplImage
alignPtr	core/utility.hpp	/^template<typename _Tp> static inline _Tp* alignPtr(_Tp* ptr, int n=(int)sizeof(_Tp))$/;"	f	namespace:cv
alignSize	core/utility.hpp	/^static inline size_t alignSize(size_t sz, int n)$/;"	f	namespace:cv
all	core/cuda/vec_traits.hpp	/^        static __device__ __host__ __forceinline__ char all(char v) {return v;}$/;"	f	struct:cv::cuda::device::VecTraits
all	core/cuda/vec_traits.hpp	/^        static __device__ __host__ __forceinline__ char1 all(schar v) {return make_char1(v);}$/;"	f	struct:cv::cuda::device::VecTraits
all	core/cuda/vec_traits.hpp	/^        static __device__ __host__ __forceinline__ char2 all(schar v) {return make_char2(v, v);}$/;"	f	struct:cv::cuda::device::VecTraits
all	core/cuda/vec_traits.hpp	/^        static __device__ __host__ __forceinline__ char3 all(schar v) {return make_char3(v, v, v);}$/;"	f	struct:cv::cuda::device::VecTraits
all	core/cuda/vec_traits.hpp	/^        static __device__ __host__ __forceinline__ char4 all(schar v) {return make_char4(v, v, v, v);}$/;"	f	struct:cv::cuda::device::VecTraits
all	core/cuda/vec_traits.hpp	/^        static __device__ __host__ __forceinline__ char8 all(schar v) {return make_char8(v, v, v, v, v, v, v, v);}$/;"	f	struct:cv::cuda::device::VecTraits
all	core/cuda/vec_traits.hpp	/^        static __device__ __host__ __forceinline__ schar all(schar v) {return v;}$/;"	f	struct:cv::cuda::device::VecTraits
all	core/matx.hpp	/^Matx<_Tp, m, n> Matx<_Tp, m, n>::all(_Tp alpha)$/;"	f	class:cv::Matx
all	core/matx.hpp	/^Vec<_Tp, cn> Vec<_Tp, cn>::all(_Tp alpha)$/;"	f	class:cv::Vec
all	core/types.hpp	/^Range Range::all()$/;"	f	class:cv::Range
all	core/types.hpp	/^Scalar_<_Tp> Scalar_<_Tp>::all(_Tp v0)$/;"	f	class:cv::Scalar_
all	cudev/util/vec_traits.hpp	/^    __host__ __device__ __forceinline__ static char1 all(schar v) {return make_char1(v);}$/;"	f	struct:cv::cudev::VecTraits
all	cudev/util/vec_traits.hpp	/^    __host__ __device__ __forceinline__ static char2 all(schar v) {return make_char2(v, v);}$/;"	f	struct:cv::cudev::VecTraits
all	cudev/util/vec_traits.hpp	/^    __host__ __device__ __forceinline__ static char3 all(schar v) {return make_char3(v, v, v);}$/;"	f	struct:cv::cudev::VecTraits
all	cudev/util/vec_traits.hpp	/^    __host__ __device__ __forceinline__ static char4 all(schar v) {return make_char4(v, v, v, v);}$/;"	f	struct:cv::cudev::VecTraits
all	cudev/util/vec_traits.hpp	/^    __host__ __device__ __forceinline__ static schar all(schar v) {return v;}$/;"	f	struct:cv::cudev::VecTraits
all	hal/intrin_cpp.hpp	/^    static v_reg<_Tp, n> all(_Tp s)$/;"	f	struct:cv::v_reg
allocBegin	cudalegacy/NCV.hpp	/^    Ncv8u *allocBegin;$/;"	m	class:NCVMemStackAllocator
alloc_type	core/cuda.hpp	/^    AllocType alloc_type;$/;"	m	class:cv::cuda::HostMem
allocate	core/cvstd.hpp	/^    pointer allocate(size_type count, const void* =0) { return reinterpret_cast<pointer>(fastMalloc(count * sizeof (_Tp))); }$/;"	f	class:cv::Allocator
allocate	core/utility.hpp	/^AutoBuffer<_Tp, fixed_size>::allocate(size_t _size)$/;"	f	class:cv::AutoBuffer
allocate	flann/allocator.h	/^    T* allocate(size_t count = 1)$/;"	f	class:cvflann::PooledAllocator
allocate	flann/allocator.h	/^T* allocate(size_t count = 1)$/;"	f	namespace:cvflann
allocateMemory	flann/allocator.h	/^    void* allocateMemory(int size)$/;"	f	class:cvflann::PooledAllocator
allocatedMem	cudalegacy/NCV.hpp	/^    NCVMemSegment allocatedMem;$/;"	m	class:NCVMatrixAlloc
allocatedMem	cudalegacy/NCV.hpp	/^    NCVMemSegment allocatedMem;$/;"	m	class:NCVVectorAlloc
allocator	core/cuda.hpp	/^    Allocator* allocator;$/;"	m	class:cv::cuda::GpuMat
allocator	core/mat.hpp	/^    MatAllocator* allocator;$/;"	m	class:cv::Mat
allocator	core/mat.hpp	/^    MatAllocator* allocator;$/;"	m	class:cv::UMat
allocator	cudalegacy/NCV.hpp	/^    INCVMemAllocator &allocator;$/;"	m	class:NCVMatrixAlloc
allocator	cudalegacy/NCV.hpp	/^    INCVMemAllocator &allocator;$/;"	m	class:NCVVectorAlloc
allocatorFlags_	core/mat.hpp	/^    int allocatorFlags_;$/;"	m	struct:cv::UMatData
alpha	core/mat.hpp	/^    double alpha, beta;$/;"	m	class:cv::MatExpr
alpha	cudalegacy/NCVBroxOpticalFlow.hpp	/^    Ncv32f alpha;$/;"	m	struct:NCVBroxOpticalFlowDescriptor
alpha	objdetect/objdetect_c.h	/^    float* alpha;$/;"	m	struct:CvHaarClassifier
alpha1	cudalegacy.hpp	/^    float alpha1; \/\/!< How quickly we forget old background pixel values seen. Typically set to 0.1.$/;"	m	struct:cv::cuda::FGDParams
alpha2	cudalegacy.hpp	/^    float alpha2; \/\/!< "Controls speed of feature learning". Depends on T. Typical value circa 0.005.$/;"	m	struct:cv::cuda::FGDParams
alpha3	cudalegacy.hpp	/^    float alpha3; \/\/!< Alternate to alpha2, used (e.g.) for quicker initial convergence. Typical value 0.1.$/;"	m	struct:cv::cuda::FGDParams
alphaChannel	core/types_c.h	/^    int  alphaChannel;      \/**< Ignored by OpenCV *\/$/;"	m	struct:_IplImage
amethyst	viz/types.hpp	/^inline cv::viz::Color cv::viz::Color::amethyst()       { return Color(204, 102, 153); }$/;"	f	class:cv::viz::Color
anchorX	core/types_c.h	/^    int  anchorX;$/;"	m	struct:_IplConvKernel
anchorX	core/types_c.h	/^    int  anchorX;$/;"	m	struct:_IplConvKernelFP
anchorY	core/types_c.h	/^    int  anchorY;$/;"	m	struct:_IplConvKernel
anchorY	core/types_c.h	/^    int  anchorY;$/;"	m	struct:_IplConvKernelFP
angle	core/types.hpp	/^    CV_PROP_RW float angle; \/\/!< computed orientation of the keypoint (-1 if not applicable);$/;"	m	class:cv::KeyPoint
angle	core/types.hpp	/^    float angle;    \/\/< the rotation angle. When the angle is 0, 90, 180, 270 etc., the rectangle becomes an up-right rectangle.$/;"	m	class:cv::RotatedRect
angle	core/types_c.h	/^    float angle;          \/**< Angle between the horizontal axis           *\/$/;"	m	struct:CvBox2D
any	flann/any.h	/^    any()$/;"	f	struct:cvflann::any
any	flann/any.h	/^    any(const T& x)$/;"	f	struct:cvflann::any
any	flann/any.h	/^    any(const any& x)$/;"	f	struct:cvflann::any
any	flann/any.h	/^    any(const char* x)$/;"	f	struct:cvflann::any
any	flann/any.h	/^struct any$/;"	s	namespace:cvflann
anyimpl	flann/any.h	/^namespace anyimpl$/;"	n	namespace:cvflann
apply	stitching/detail/exposure_compensate.hpp	/^    void apply(int \/*index*\/, Point \/*corner*\/, InputOutputArray \/*image*\/, InputArray \/*mask*\/) { }$/;"	f	class:cv::detail::NoExposureCompensator
apricot	viz/types.hpp	/^inline cv::viz::Color cv::viz::Color::apricot()        { return Color(177, 206, 251); }$/;"	f	class:cv::viz::Color
area	core/types.hpp	/^_Tp Rect_<_Tp>::area() const$/;"	f	class:cv::Rect_
area	core/types.hpp	/^_Tp Size_<_Tp>::area() const$/;"	f	class:cv::Size_
area	imgproc/types_c.h	/^    double area;    \/**<area of the connected component  *\/$/;"	m	struct:CvConnectedComp
area_height	cudev/ptr2d/interpolation.hpp	/^    float area_width, area_height;$/;"	m	struct:cv::cudev::CommonAreaInterPtr
area_height	cudev/ptr2d/interpolation.hpp	/^    int area_width, area_height;$/;"	m	struct:cv::cudev::IntegerAreaInterPtr
area_width	cudev/ptr2d/interpolation.hpp	/^    float area_width, area_height;$/;"	m	struct:cv::cudev::CommonAreaInterPtr
area_width	cudev/ptr2d/interpolation.hpp	/^    int area_width, area_height;$/;"	m	struct:cv::cudev::IntegerAreaInterPtr
arg1	core/cuda/functional.hpp	/^        typename Op::first_argument_type arg1;$/;"	m	struct:cv::cuda::device::binder1st
arg1	cudev/functional/functional.hpp	/^    typename Op::first_argument_type arg1;$/;"	m	struct:cv::cudev::Binder1st
arg2	core/cuda/functional.hpp	/^        typename Op::second_argument_type arg2;$/;"	m	struct:cv::cuda::device::binder2nd
arg2	cudev/functional/functional.hpp	/^    typename Op::second_argument_type arg2;$/;"	m	struct:cv::cudev::Binder2nd
args	core/ocl.hpp	/^    Kernel& args(const _Tp0& a0)$/;"	f	class:cv::ocl::Kernel
args	core/ocl.hpp	/^    Kernel& args(const _Tp0& a0, const _Tp1& a1)$/;"	f	class:cv::ocl::Kernel
args	core/ocl.hpp	/^    Kernel& args(const _Tp0& a0, const _Tp1& a1, const _Tp2& a2)$/;"	f	class:cv::ocl::Kernel
args	core/ocl.hpp	/^    Kernel& args(const _Tp0& a0, const _Tp1& a1, const _Tp2& a2, const _Tp3& a3)$/;"	f	class:cv::ocl::Kernel
args	core/ocl.hpp	/^    Kernel& args(const _Tp0& a0, const _Tp1& a1, const _Tp2& a2, const _Tp3& a3,$/;"	f	class:cv::ocl::Kernel
args	core/ocl.hpp	/^    Kernel& args(const _Tp0& a0, const _Tp1& a1, const _Tp2& a2,$/;"	f	class:cv::ocl::Kernel
argument_type	cudev/functional/functional.hpp	/^    typedef _Arg    argument_type;$/;"	t	struct:cv::cudev::unary_function
arr	core/core_c.h	/^CVAPI(CvScalar)  cvSum( const CvArr* arr );$/;"	v
arr	core/core_c.h	/^CVAPI(CvSize) cvGetSize( const CvArr* arr );$/;"	v
arr	core/core_c.h	/^CVAPI(int)  cvCountNonZero( const CvArr* arr );$/;"	v
arr	core/core_c.h	/^CVAPI(int) cvGetElemType( const CvArr* arr );$/;"	v
arr	core/core_c.h	/^CVAPI(void)  cvCreateData( CvArr* arr );$/;"	v
arr	core/core_c.h	/^CVAPI(void)  cvReleaseData( CvArr* arr );$/;"	v
arr	core/core_c.h	/^CVAPI(void)  cvSetZero( CvArr* arr );$/;"	v
array	cudev/util/type_traits.hpp	/^    T array[COUNT];$/;"	m	struct:cv::cudev::ArrayWrapper
array_	ts/ts_gtest.h	/^  const Element* array_;$/;"	m	class:testing::internal::NativeArray
array_	ts/ts_gtest.h	/^  std::vector<TestPartResult> array_;$/;"	m	class:testing::TestPartResultArray
array_iterator	core/core_c.h	/^CVAPI(int) cvNextNArraySlice( CvNArrayIterator* array_iterator );$/;"	v
arrays	core/mat.hpp	/^    const Mat** arrays;$/;"	m	class:cv::NAryMatIterator
as	flann/matrix.h	/^    Matrix<T> as()$/;"	f	class:cvflann::UntypedMatrix
ascii	highgui.hpp	/^    const int*  ascii;     \/\/ font data and metrics$/;"	m	struct:cv::QtFont
ascii	imgproc/imgproc_c.h	/^    const int*  ascii;      \/\/!< font data and metrics$/;"	m	struct:CvFont
aspect	stitching/detail/camera.hpp	/^    double aspect; \/\/ Aspect ratio$/;"	m	struct:cv::detail::CameraParams
assertTest	cudalegacy/NCV.hpp	/^    struct assertTest{};$/;"	s	namespace:NcvCTprep
assign	cudev/ptr2d/detail/gpumat.hpp	/^__host__ GpuMat_<T>& GpuMat_<T>::assign(const Expr<Body>& expr, Stream& stream)$/;"	f	class:cv::cudev::GpuMat_
assign	flann/any.h	/^    any& assign(const T& x)$/;"	f	struct:cvflann::any
assign	flann/any.h	/^    any& assign(const any& x)$/;"	f	struct:cvflann::any
assignTo	core/cuda.inl.hpp	/^void GpuMat::assignTo(GpuMat& m, int _type) const$/;"	f	class:cv::cuda::GpuMat
assignTo	core/mat.inl.hpp	/^void Mat::assignTo( Mat& m, int _type ) const$/;"	f	class:cv::Mat
assignTo	core/mat.inl.hpp	/^void SparseMat::assignTo( SparseMat& m, int _type ) const$/;"	f	class:cv::SparseMat
assignTo	core/mat.inl.hpp	/^void UMat::assignTo( UMat& m, int _type ) const$/;"	f	class:cv::UMat
assignTo	cudev/expr/reduction.hpp	/^    __host__ void assignTo(GpuMat_<T>& dst, Stream& stream = Stream::Null()) const$/;"	f	struct:cv::cudev::CountNonZeroExprBody
assignTo	cudev/expr/reduction.hpp	/^    __host__ void assignTo(GpuMat_<T>& dst, Stream& stream = Stream::Null()) const$/;"	f	struct:cv::cudev::FindMaxValExprBody
assignTo	cudev/expr/reduction.hpp	/^    __host__ void assignTo(GpuMat_<T>& dst, Stream& stream = Stream::Null()) const$/;"	f	struct:cv::cudev::FindMinMaxValExprBody
assignTo	cudev/expr/reduction.hpp	/^    __host__ void assignTo(GpuMat_<T>& dst, Stream& stream = Stream::Null()) const$/;"	f	struct:cv::cudev::FindMinValExprBody
assignTo	cudev/expr/reduction.hpp	/^    __host__ void assignTo(GpuMat_<T>& dst, Stream& stream = Stream::Null()) const$/;"	f	struct:cv::cudev::HistogramBody
assignTo	cudev/expr/reduction.hpp	/^    __host__ void assignTo(GpuMat_<T>& dst, Stream& stream = Stream::Null()) const$/;"	f	struct:cv::cudev::IntegralBody
assignTo	cudev/expr/reduction.hpp	/^    __host__ void assignTo(GpuMat_<T>& dst, Stream& stream = Stream::Null()) const$/;"	f	struct:cv::cudev::ReduceToColumnBody
assignTo	cudev/expr/reduction.hpp	/^    __host__ void assignTo(GpuMat_<T>& dst, Stream& stream = Stream::Null()) const$/;"	f	struct:cv::cudev::ReduceToRowBody
assignTo	cudev/expr/reduction.hpp	/^    __host__ void assignTo(GpuMat_<T>& dst, Stream& stream = Stream::Null()) const$/;"	f	struct:cv::cudev::SumExprBody
assignTo	cudev/expr/warping.hpp	/^    __host__ void assignTo(GpuMat_<T>& dst, Stream& stream = Stream::Null()) const$/;"	f	struct:cv::cudev::PyrDownBody
assignTo	cudev/expr/warping.hpp	/^    __host__ void assignTo(GpuMat_<T>& dst, Stream& stream = Stream::Null()) const$/;"	f	struct:cv::cudev::PyrUpBody
assignTo	cudev/expr/warping.hpp	/^    __host__ void assignTo(GpuMat_<T>& dst, Stream& stream = Stream::Null()) const$/;"	f	struct:cv::cudev::TransposeBody
assignTo	cudev/ptr2d/deriv.hpp	/^    __host__ void assignTo(GpuMat_<T>& dst, Stream& stream = Stream::Null()) const$/;"	f	struct:cv::cudev::DerivXPtrSz
assignTo	cudev/ptr2d/deriv.hpp	/^    __host__ void assignTo(GpuMat_<T>& dst, Stream& stream = Stream::Null()) const$/;"	f	struct:cv::cudev::DerivYPtrSz
assignTo	cudev/ptr2d/deriv.hpp	/^    __host__ void assignTo(GpuMat_<T>& dst, Stream& stream = Stream::Null()) const$/;"	f	struct:cv::cudev::LaplacianPtrSz
assignTo	cudev/ptr2d/deriv.hpp	/^    __host__ void assignTo(GpuMat_<T>& dst, Stream& stream = Stream::Null()) const$/;"	f	struct:cv::cudev::ScharrXPtrSz
assignTo	cudev/ptr2d/deriv.hpp	/^    __host__ void assignTo(GpuMat_<T>& dst, Stream& stream = Stream::Null()) const$/;"	f	struct:cv::cudev::ScharrYPtrSz
assignTo	cudev/ptr2d/deriv.hpp	/^    __host__ void assignTo(GpuMat_<T>& dst, Stream& stream = Stream::Null()) const$/;"	f	struct:cv::cudev::SobelXPtrSz
assignTo	cudev/ptr2d/deriv.hpp	/^    __host__ void assignTo(GpuMat_<T>& dst, Stream& stream = Stream::Null()) const$/;"	f	struct:cv::cudev::SobelYPtrSz
assignTo	cudev/ptr2d/lut.hpp	/^    __host__ void assignTo(GpuMat_<T>& dst, Stream& stream = Stream::Null()) const$/;"	f	struct:cv::cudev::LutPtrSz
assignTo	cudev/ptr2d/remap.hpp	/^    __host__ void assignTo(GpuMat_<T>& dst, Stream& stream = Stream::Null()) const$/;"	f	struct:cv::cudev::RemapPtr1Sz
assignTo	cudev/ptr2d/remap.hpp	/^    __host__ void assignTo(GpuMat_<T>& dst, Stream& stream = Stream::Null()) const$/;"	f	struct:cv::cudev::RemapPtr2Sz
assignTo	cudev/ptr2d/resize.hpp	/^    __host__ void assignTo(GpuMat_<T>& dst, Stream& stream = Stream::Null()) const$/;"	f	struct:cv::cudev::ResizePtrSz
assignTo	cudev/ptr2d/transform.hpp	/^    __host__ void assignTo(GpuMat_<T>& dst, Stream& stream = Stream::Null()) const$/;"	f	struct:cv::cudev::BinaryTransformPtrSz
assignTo	cudev/ptr2d/transform.hpp	/^    __host__ void assignTo(GpuMat_<T>& dst, Stream& stream = Stream::Null()) const$/;"	f	struct:cv::cudev::UnaryTransformPtrSz
at	core/cuda/border_interpolate.hpp	/^        template <typename Ptr2D> __device__ __forceinline__ D at(typename Ptr2D::index_type y, typename Ptr2D::index_type x, const Ptr2D& src) const$/;"	f	struct:cv::cuda::device::BrdConstant
at	core/cuda/border_interpolate.hpp	/^        template <typename Ptr2D> __device__ __forceinline__ D at(typename Ptr2D::index_type y, typename Ptr2D::index_type x, const Ptr2D& src) const$/;"	f	struct:cv::cuda::device::BrdReflect
at	core/cuda/border_interpolate.hpp	/^        template <typename Ptr2D> __device__ __forceinline__ D at(typename Ptr2D::index_type y, typename Ptr2D::index_type x, const Ptr2D& src) const$/;"	f	struct:cv::cuda::device::BrdReflect101
at	core/cuda/border_interpolate.hpp	/^        template <typename Ptr2D> __device__ __forceinline__ D at(typename Ptr2D::index_type y, typename Ptr2D::index_type x, const Ptr2D& src) const$/;"	f	struct:cv::cuda::device::BrdReplicate
at	core/cuda/border_interpolate.hpp	/^        template <typename Ptr2D> __device__ __forceinline__ D at(typename Ptr2D::index_type y, typename Ptr2D::index_type x, const Ptr2D& src) const$/;"	f	struct:cv::cuda::device::BrdWrap
at	core/cuda/border_interpolate.hpp	/^        template <typename T> __device__ __forceinline__ D at(int x, const T* data) const$/;"	f	struct:cv::cuda::device::BrdRowConstant
at	core/cuda/border_interpolate.hpp	/^        template <typename T> __device__ __forceinline__ D at(int x, const T* data) const$/;"	f	struct:cv::cuda::device::BrdRowReflect
at	core/cuda/border_interpolate.hpp	/^        template <typename T> __device__ __forceinline__ D at(int x, const T* data) const$/;"	f	struct:cv::cuda::device::BrdRowReflect101
at	core/cuda/border_interpolate.hpp	/^        template <typename T> __device__ __forceinline__ D at(int x, const T* data) const$/;"	f	struct:cv::cuda::device::BrdRowReplicate
at	core/cuda/border_interpolate.hpp	/^        template <typename T> __device__ __forceinline__ D at(int x, const T* data) const$/;"	f	struct:cv::cuda::device::BrdRowWrap
at	core/cuda/border_interpolate.hpp	/^        template <typename T> __device__ __forceinline__ D at(int y, const T* data, size_t step) const$/;"	f	struct:cv::cuda::device::BrdColConstant
at	core/cuda/border_interpolate.hpp	/^        template <typename T> __device__ __forceinline__ D at(int y, const T* data, size_t step) const$/;"	f	struct:cv::cuda::device::BrdColReflect
at	core/cuda/border_interpolate.hpp	/^        template <typename T> __device__ __forceinline__ D at(int y, const T* data, size_t step) const$/;"	f	struct:cv::cuda::device::BrdColReflect101
at	core/cuda/border_interpolate.hpp	/^        template <typename T> __device__ __forceinline__ D at(int y, const T* data, size_t step) const$/;"	f	struct:cv::cuda::device::BrdColReplicate
at	core/cuda/border_interpolate.hpp	/^        template <typename T> __device__ __forceinline__ D at(int y, const T* data, size_t step) const$/;"	f	struct:cv::cuda::device::BrdColWrap
at	core/cuda/border_interpolate.hpp	/^        template <typename T> __device__ __forceinline__ D at(int y, int x, const T* data, size_t step) const$/;"	f	struct:cv::cuda::device::BrdConstant
at	core/cuda/border_interpolate.hpp	/^        template <typename T> __device__ __forceinline__ D at(int y, int x, const T* data, size_t step) const$/;"	f	struct:cv::cuda::device::BrdReflect
at	core/cuda/border_interpolate.hpp	/^        template <typename T> __device__ __forceinline__ D at(int y, int x, const T* data, size_t step) const$/;"	f	struct:cv::cuda::device::BrdReflect101
at	core/cuda/border_interpolate.hpp	/^        template <typename T> __device__ __forceinline__ D at(int y, int x, const T* data, size_t step) const$/;"	f	struct:cv::cuda::device::BrdReplicate
at	core/cuda/border_interpolate.hpp	/^        template <typename T> __device__ __forceinline__ D at(int y, int x, const T* data, size_t step) const$/;"	f	struct:cv::cuda::device::BrdWrap
at	core/mat.inl.hpp	/^_Tp& Mat::at(Point pt)$/;"	f	class:cv::Mat
at	core/mat.inl.hpp	/^_Tp& Mat::at(const Vec<int, n>& idx)$/;"	f	class:cv::Mat
at	core/mat.inl.hpp	/^_Tp& Mat::at(const int* idx)$/;"	f	class:cv::Mat
at	core/mat.inl.hpp	/^_Tp& Mat::at(int i0)$/;"	f	class:cv::Mat
at	core/mat.inl.hpp	/^_Tp& Mat::at(int i0, int i1)$/;"	f	class:cv::Mat
at	core/mat.inl.hpp	/^_Tp& Mat::at(int i0, int i1, int i2)$/;"	f	class:cv::Mat
at	core/mat.inl.hpp	/^const _Tp& Mat::at(Point pt) const$/;"	f	class:cv::Mat
at	core/mat.inl.hpp	/^const _Tp& Mat::at(const Vec<int, n>& idx) const$/;"	f	class:cv::Mat
at	core/mat.inl.hpp	/^const _Tp& Mat::at(const int* idx) const$/;"	f	class:cv::Mat
at	core/mat.inl.hpp	/^const _Tp& Mat::at(int i0) const$/;"	f	class:cv::Mat
at	core/mat.inl.hpp	/^const _Tp& Mat::at(int i0, int i1) const$/;"	f	class:cv::Mat
at	core/mat.inl.hpp	/^const _Tp& Mat::at(int i0, int i1, int i2) const$/;"	f	class:cv::Mat
at	cudalegacy/NCV.hpp	/^    T& at(Ncv32u x, Ncv32u y) const$/;"	f	class:NCVMatrix
at	videostab/ring_buffer.hpp	/^template <typename T> inline T& at(int idx, std::vector<T> &items)$/;"	f	namespace:cv::videostab
at	videostab/ring_buffer.hpp	/^template <typename T> inline const T& at(int idx, const std::vector<T> &items)$/;"	f	namespace:cv::videostab
at_high	core/cuda/border_interpolate.hpp	/^        template <typename T> __device__ __forceinline__ D at_high(int x, const T* data) const$/;"	f	struct:cv::cuda::device::BrdRowConstant
at_high	core/cuda/border_interpolate.hpp	/^        template <typename T> __device__ __forceinline__ D at_high(int x, const T* data) const$/;"	f	struct:cv::cuda::device::BrdRowReflect
at_high	core/cuda/border_interpolate.hpp	/^        template <typename T> __device__ __forceinline__ D at_high(int x, const T* data) const$/;"	f	struct:cv::cuda::device::BrdRowReflect101
at_high	core/cuda/border_interpolate.hpp	/^        template <typename T> __device__ __forceinline__ D at_high(int x, const T* data) const$/;"	f	struct:cv::cuda::device::BrdRowReplicate
at_high	core/cuda/border_interpolate.hpp	/^        template <typename T> __device__ __forceinline__ D at_high(int x, const T* data) const$/;"	f	struct:cv::cuda::device::BrdRowWrap
at_high	core/cuda/border_interpolate.hpp	/^        template <typename T> __device__ __forceinline__ D at_high(int y, const T* data, size_t step) const$/;"	f	struct:cv::cuda::device::BrdColConstant
at_high	core/cuda/border_interpolate.hpp	/^        template <typename T> __device__ __forceinline__ D at_high(int y, const T* data, size_t step) const$/;"	f	struct:cv::cuda::device::BrdColReflect
at_high	core/cuda/border_interpolate.hpp	/^        template <typename T> __device__ __forceinline__ D at_high(int y, const T* data, size_t step) const$/;"	f	struct:cv::cuda::device::BrdColReflect101
at_high	core/cuda/border_interpolate.hpp	/^        template <typename T> __device__ __forceinline__ D at_high(int y, const T* data, size_t step) const$/;"	f	struct:cv::cuda::device::BrdColReplicate
at_high	core/cuda/border_interpolate.hpp	/^        template <typename T> __device__ __forceinline__ D at_high(int y, const T* data, size_t step) const$/;"	f	struct:cv::cuda::device::BrdColWrap
at_low	core/cuda/border_interpolate.hpp	/^        template <typename T> __device__ __forceinline__ D at_low(int x, const T* data) const$/;"	f	struct:cv::cuda::device::BrdRowConstant
at_low	core/cuda/border_interpolate.hpp	/^        template <typename T> __device__ __forceinline__ D at_low(int x, const T* data) const$/;"	f	struct:cv::cuda::device::BrdRowReflect
at_low	core/cuda/border_interpolate.hpp	/^        template <typename T> __device__ __forceinline__ D at_low(int x, const T* data) const$/;"	f	struct:cv::cuda::device::BrdRowReflect101
at_low	core/cuda/border_interpolate.hpp	/^        template <typename T> __device__ __forceinline__ D at_low(int x, const T* data) const$/;"	f	struct:cv::cuda::device::BrdRowReplicate
at_low	core/cuda/border_interpolate.hpp	/^        template <typename T> __device__ __forceinline__ D at_low(int x, const T* data) const$/;"	f	struct:cv::cuda::device::BrdRowWrap
at_low	core/cuda/border_interpolate.hpp	/^        template <typename T> __device__ __forceinline__ D at_low(int y, const T* data, size_t step) const$/;"	f	struct:cv::cuda::device::BrdColConstant
at_low	core/cuda/border_interpolate.hpp	/^        template <typename T> __device__ __forceinline__ D at_low(int y, const T* data, size_t step) const$/;"	f	struct:cv::cuda::device::BrdColReflect
at_low	core/cuda/border_interpolate.hpp	/^        template <typename T> __device__ __forceinline__ D at_low(int y, const T* data, size_t step) const$/;"	f	struct:cv::cuda::device::BrdColReflect101
at_low	core/cuda/border_interpolate.hpp	/^        template <typename T> __device__ __forceinline__ D at_low(int y, const T* data, size_t step) const$/;"	f	struct:cv::cuda::device::BrdColReplicate
at_low	core/cuda/border_interpolate.hpp	/^        template <typename T> __device__ __forceinline__ D at_low(int y, const T* data, size_t step) const$/;"	f	struct:cv::cuda::device::BrdColWrap
atomic	cudev/grid/detail/reduce.hpp	/^        __device__ __forceinline__ static void atomic(T* result, T myval)$/;"	f	struct:cv::cudev::grid_reduce_detail::maxop
atomic	cudev/grid/detail/reduce.hpp	/^        __device__ __forceinline__ static void atomic(T* result, T myval)$/;"	f	struct:cv::cudev::grid_reduce_detail::minop
atomicAdd	core/cuda/emulation.hpp	/^            static __device__ __forceinline__ T atomicAdd(T* address, T val)$/;"	f	struct:cv::cuda::device::Emulation::smem
atomicAdd	core/cuda/emulation.hpp	/^            static __device__ __forceinline__ double atomicAdd(double* address, double val)$/;"	f	struct:cv::cuda::device::Emulation::glob
atomicAdd	core/cuda/emulation.hpp	/^            static __device__ __forceinline__ float atomicAdd(float* address, float val)$/;"	f	struct:cv::cuda::device::Emulation::glob
atomicAdd	core/cuda/emulation.hpp	/^            static __device__ __forceinline__ int atomicAdd(int* address, int val)$/;"	f	struct:cv::cuda::device::Emulation::glob
atomicAdd	core/cuda/emulation.hpp	/^            static __device__ __forceinline__ unsigned int atomicAdd(unsigned int* address, unsigned int val)$/;"	f	struct:cv::cuda::device::Emulation::glob
atomicAdd	cudev/util/atomic.hpp	/^__device__ __forceinline__ float atomicAdd(float* address, float val)$/;"	f	namespace:cv::cudev
atomicAdd	cudev/util/atomic.hpp	/^__device__ __forceinline__ int atomicAdd(int* address, int val)$/;"	f	namespace:cv::cudev
atomicAdd	cudev/util/atomic.hpp	/^__device__ __forceinline__ uint atomicAdd(uint* address, uint val)$/;"	f	namespace:cv::cudev
atomicAdd	cudev/util/atomic.hpp	/^__device__ static double atomicAdd(double* address, double val)$/;"	f	namespace:cv::cudev
atomicInc	core/cuda/emulation.hpp	/^            static __device__ __forceinline__ T atomicInc(T* address, T val)$/;"	f	struct:cv::cuda::device::Emulation::smem
atomicMax	core/cuda/emulation.hpp	/^            static __device__ __forceinline__ double atomicMax(double* address, double val)$/;"	f	struct:cv::cuda::device::Emulation::glob
atomicMax	core/cuda/emulation.hpp	/^            static __device__ __forceinline__ float atomicMax(float* address, float val)$/;"	f	struct:cv::cuda::device::Emulation::glob
atomicMax	core/cuda/emulation.hpp	/^            static __device__ __forceinline__ int atomicMax(int* address, int val)$/;"	f	struct:cv::cuda::device::Emulation::glob
atomicMax	cudev/util/atomic.hpp	/^__device__ __forceinline__ int atomicMax(int* address, int val)$/;"	f	namespace:cv::cudev
atomicMax	cudev/util/atomic.hpp	/^__device__ __forceinline__ uint atomicMax(uint* address, uint val)$/;"	f	namespace:cv::cudev
atomicMax	cudev/util/atomic.hpp	/^__device__ static double atomicMax(double* address, double val)$/;"	f	namespace:cv::cudev
atomicMax	cudev/util/atomic.hpp	/^__device__ static float atomicMax(float* address, float val)$/;"	f	namespace:cv::cudev
atomicMin	core/cuda/emulation.hpp	/^            static __device__ __forceinline__ T atomicMin(T* address, T val)$/;"	f	struct:cv::cuda::device::Emulation::smem
atomicMin	core/cuda/emulation.hpp	/^            static __device__ __forceinline__ double atomicMin(double* address, double val)$/;"	f	struct:cv::cuda::device::Emulation::glob
atomicMin	core/cuda/emulation.hpp	/^            static __device__ __forceinline__ float atomicMin(float* address, float val)$/;"	f	struct:cv::cuda::device::Emulation::glob
atomicMin	core/cuda/emulation.hpp	/^            static __device__ __forceinline__ int atomicMin(int* address, int val)$/;"	f	struct:cv::cuda::device::Emulation::glob
atomicMin	cudev/util/atomic.hpp	/^__device__ __forceinline__ int atomicMin(int* address, int val)$/;"	f	namespace:cv::cudev
atomicMin	cudev/util/atomic.hpp	/^__device__ __forceinline__ uint atomicMin(uint* address, uint val)$/;"	f	namespace:cv::cudev
atomicMin	cudev/util/atomic.hpp	/^__device__ static double atomicMin(double* address, double val)$/;"	f	namespace:cv::cudev
atomicMin	cudev/util/atomic.hpp	/^__device__ static float atomicMin(float* address, float val)$/;"	f	namespace:cv::cudev
attempts	features2d.hpp	/^    int attempts;$/;"	m	class:cv::BOWKMeansTrainer
attr	core/types_c.h	/^    const char** attr;         \/**< NULL-terminated array of (attribute_name,attribute_value) pairs. *\/$/;"	m	struct:CvAttrList
azure	viz/types.hpp	/^inline cv::viz::Color cv::viz::Color::azure()      { return Color(255, 128,   0); }$/;"	f	class:cv::viz::Color
b	core/cuda/border_interpolate.hpp	/^        B b;$/;"	m	struct:cv::cuda::device::BorderReader
b	core/mat.hpp	/^    Mat a, b, c;$/;"	m	class:cv::MatExpr
b	stitching/detail/warpers.hpp	/^    float a, b;$/;"	m	struct:cv::detail::CompressedRectilinearPortraitProjector
b	stitching/detail/warpers.hpp	/^    float a, b;$/;"	m	struct:cv::detail::CompressedRectilinearProjector
b	stitching/detail/warpers.hpp	/^    float a, b;$/;"	m	struct:cv::detail::PaniniPortraitProjector
b	stitching/detail/warpers.hpp	/^    float a, b;$/;"	m	struct:cv::detail::PaniniProjector
b	stitching/warpers.hpp	/^    float a, b;$/;"	m	class:cv::CompressedRectilinearPortraitWarper
b	stitching/warpers.hpp	/^    float a, b;$/;"	m	class:cv::CompressedRectilinearWarper
b	stitching/warpers.hpp	/^    float a, b;$/;"	m	class:cv::PaniniPortraitWarper
b	stitching/warpers.hpp	/^    float a, b;$/;"	m	class:cv::PaniniWarper
bHasStumpsOnly	cudalegacy/NCVHaarObjectDetection.hpp	/^    NcvBool bHasStumpsOnly;$/;"	m	struct:HaarClassifierCascadeDescriptor
bNeedsTiltedII	cudalegacy/NCVHaarObjectDetection.hpp	/^    NcvBool bNeedsTiltedII;$/;"	m	struct:HaarClassifierCascadeDescriptor
bReused	cudalegacy/NCV.hpp	/^    NcvBool bReused;$/;"	m	class:NCVMatrixReuse
bReused	cudalegacy/NCV.hpp	/^    NcvBool bReused;$/;"	m	class:NCVVectorReuse
bReusesMemory	cudalegacy/NCV.hpp	/^    NcvBool bReusesMemory;$/;"	m	class:NCVMemStackAllocator
bSum_	videostab/deblurring.hpp	/^    Mat_<float> bSum_, gSum_, rSum_, wSum_;$/;"	m	class:cv::videostab::WeightingDeblurer
back	core/core_c.h	/^template<typename _Tp> inline _Tp& Seq<_Tp>::back()$/;"	f	class:cv::Seq
back	core/core_c.h	/^template<typename _Tp> inline const _Tp& Seq<_Tp>::back() const$/;"	f	class:cv::Seq
backSubst	core/operations.hpp	/^SVD::backSubst( const Matx<_Tp, nm, 1>& w, const Matx<_Tp, m, nm>& u,$/;"	f	class:cv::SVD
bad_any_cast	flann/any.h	/^struct bad_any_cast$/;"	s	namespace:cvflann::anyimpl
bad_region_penalty_	stitching/detail/seam_finders.hpp	/^    float bad_region_penalty_;$/;"	m	class:cv::detail::GraphCutSeamFinderGpu
base	flann/allocator.h	/^    void*   base;     \/* Pointer to base of current block of storage. *\/$/;"	m	class:cvflann::PooledAllocator
base_	ts/ts_gtest.h	/^    const ParamGeneratorInterface<ParamType>* const base_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
base_	ts/ts_gtest.h	/^    const ParamGeneratorInterface<ParamType>* const base_;$/;"	m	class:testing::internal::CartesianProductGenerator2::Iterator
base_	ts/ts_gtest.h	/^    const ParamGeneratorInterface<ParamType>* const base_;$/;"	m	class:testing::internal::CartesianProductGenerator3::Iterator
base_	ts/ts_gtest.h	/^    const ParamGeneratorInterface<ParamType>* const base_;$/;"	m	class:testing::internal::CartesianProductGenerator4::Iterator
base_	ts/ts_gtest.h	/^    const ParamGeneratorInterface<ParamType>* const base_;$/;"	m	class:testing::internal::CartesianProductGenerator5::Iterator
base_	ts/ts_gtest.h	/^    const ParamGeneratorInterface<ParamType>* const base_;$/;"	m	class:testing::internal::CartesianProductGenerator6::Iterator
base_	ts/ts_gtest.h	/^    const ParamGeneratorInterface<ParamType>* const base_;$/;"	m	class:testing::internal::CartesianProductGenerator7::Iterator
base_	ts/ts_gtest.h	/^    const ParamGeneratorInterface<ParamType>* const base_;$/;"	m	class:testing::internal::CartesianProductGenerator8::Iterator
base_	ts/ts_gtest.h	/^    const ParamGeneratorInterface<ParamType>* const base_;$/;"	m	class:testing::internal::CartesianProductGenerator9::Iterator
base_	ts/ts_gtest.h	/^    const ParamGeneratorInterface<T>* const base_;$/;"	m	class:testing::internal::RangeGenerator::Iterator
base_	ts/ts_gtest.h	/^    const ParamGeneratorInterface<T>* const base_;$/;"	m	class:testing::internal::ValuesInIteratorRangeGenerator::Iterator
base_any_policy	flann/any.h	/^struct base_any_policy$/;"	s	namespace:cvflann::anyimpl
basic_manipulator	ts/ts_gtest.h	/^      ::std::ostream& (*basic_manipulator)(::std::ostream& stream)) {$/;"	f	class:testing::AssertionResult
begin	core/core_c.h	/^template<typename _Tp> inline SeqIterator<_Tp> Seq<_Tp>::begin() const$/;"	f	class:cv::Seq
begin	core/cvstd.hpp	/^const char* String::begin() const$/;"	f	class:cv::String
begin	core/mat.inl.hpp	/^MatConstIterator_<_Tp> Mat::begin() const$/;"	f	class:cv::Mat
begin	core/mat.inl.hpp	/^MatConstIterator_<_Tp> Mat_<_Tp>::begin() const$/;"	f	class:cv::Mat_
begin	core/mat.inl.hpp	/^MatIterator_<_Tp> Mat::begin()$/;"	f	class:cv::Mat
begin	core/mat.inl.hpp	/^MatIterator_<_Tp> Mat_<_Tp>::begin()$/;"	f	class:cv::Mat_
begin	core/mat.inl.hpp	/^SparseMatConstIterator SparseMat::begin() const$/;"	f	class:cv::SparseMat
begin	core/mat.inl.hpp	/^SparseMatConstIterator_<_Tp> SparseMat::begin() const$/;"	f	class:cv::SparseMat
begin	core/mat.inl.hpp	/^SparseMatConstIterator_<_Tp> SparseMat_<_Tp>::begin() const$/;"	f	class:cv::SparseMat_
begin	core/mat.inl.hpp	/^SparseMatIterator SparseMat::begin()$/;"	f	class:cv::SparseMat
begin	core/mat.inl.hpp	/^SparseMatIterator_<_Tp> SparseMat::begin()$/;"	f	class:cv::SparseMat
begin	core/mat.inl.hpp	/^SparseMatIterator_<_Tp> SparseMat_<_Tp>::begin()$/;"	f	class:cv::SparseMat_
begin	core/persistence.hpp	/^inline FileNodeIterator FileNode::begin() const { return FileNodeIterator(fs, node); }$/;"	f	class:cv::FileNode
begin	cudalegacy/NCV.hpp	/^    NCVMemPtr begin;$/;"	m	struct:NCVMemSegment
begin	cudalegacy/NCV.hpp	/^    Ncv8u *begin;$/;"	m	class:NCVMemStackAllocator
begin	ts/ts_gtest.h	/^  const_iterator begin() const { return array_; }$/;"	f	class:testing::internal::NativeArray
begin	ts/ts_gtest.h	/^  iterator begin() const { return iterator(impl_->Begin()); }$/;"	f	class:testing::internal::ParamGenerator
begin10_	ts/ts_gtest.h	/^    const typename ParamGenerator<T10>::iterator begin10_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
begin1_	ts/ts_gtest.h	/^    const typename ParamGenerator<T1>::iterator begin1_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
begin1_	ts/ts_gtest.h	/^    const typename ParamGenerator<T1>::iterator begin1_;$/;"	m	class:testing::internal::CartesianProductGenerator2::Iterator
begin1_	ts/ts_gtest.h	/^    const typename ParamGenerator<T1>::iterator begin1_;$/;"	m	class:testing::internal::CartesianProductGenerator3::Iterator
begin1_	ts/ts_gtest.h	/^    const typename ParamGenerator<T1>::iterator begin1_;$/;"	m	class:testing::internal::CartesianProductGenerator4::Iterator
begin1_	ts/ts_gtest.h	/^    const typename ParamGenerator<T1>::iterator begin1_;$/;"	m	class:testing::internal::CartesianProductGenerator5::Iterator
begin1_	ts/ts_gtest.h	/^    const typename ParamGenerator<T1>::iterator begin1_;$/;"	m	class:testing::internal::CartesianProductGenerator6::Iterator
begin1_	ts/ts_gtest.h	/^    const typename ParamGenerator<T1>::iterator begin1_;$/;"	m	class:testing::internal::CartesianProductGenerator7::Iterator
begin1_	ts/ts_gtest.h	/^    const typename ParamGenerator<T1>::iterator begin1_;$/;"	m	class:testing::internal::CartesianProductGenerator8::Iterator
begin1_	ts/ts_gtest.h	/^    const typename ParamGenerator<T1>::iterator begin1_;$/;"	m	class:testing::internal::CartesianProductGenerator9::Iterator
begin2_	ts/ts_gtest.h	/^    const typename ParamGenerator<T2>::iterator begin2_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
begin2_	ts/ts_gtest.h	/^    const typename ParamGenerator<T2>::iterator begin2_;$/;"	m	class:testing::internal::CartesianProductGenerator2::Iterator
begin2_	ts/ts_gtest.h	/^    const typename ParamGenerator<T2>::iterator begin2_;$/;"	m	class:testing::internal::CartesianProductGenerator3::Iterator
begin2_	ts/ts_gtest.h	/^    const typename ParamGenerator<T2>::iterator begin2_;$/;"	m	class:testing::internal::CartesianProductGenerator4::Iterator
begin2_	ts/ts_gtest.h	/^    const typename ParamGenerator<T2>::iterator begin2_;$/;"	m	class:testing::internal::CartesianProductGenerator5::Iterator
begin2_	ts/ts_gtest.h	/^    const typename ParamGenerator<T2>::iterator begin2_;$/;"	m	class:testing::internal::CartesianProductGenerator6::Iterator
begin2_	ts/ts_gtest.h	/^    const typename ParamGenerator<T2>::iterator begin2_;$/;"	m	class:testing::internal::CartesianProductGenerator7::Iterator
begin2_	ts/ts_gtest.h	/^    const typename ParamGenerator<T2>::iterator begin2_;$/;"	m	class:testing::internal::CartesianProductGenerator8::Iterator
begin2_	ts/ts_gtest.h	/^    const typename ParamGenerator<T2>::iterator begin2_;$/;"	m	class:testing::internal::CartesianProductGenerator9::Iterator
begin3_	ts/ts_gtest.h	/^    const typename ParamGenerator<T3>::iterator begin3_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
begin3_	ts/ts_gtest.h	/^    const typename ParamGenerator<T3>::iterator begin3_;$/;"	m	class:testing::internal::CartesianProductGenerator3::Iterator
begin3_	ts/ts_gtest.h	/^    const typename ParamGenerator<T3>::iterator begin3_;$/;"	m	class:testing::internal::CartesianProductGenerator4::Iterator
begin3_	ts/ts_gtest.h	/^    const typename ParamGenerator<T3>::iterator begin3_;$/;"	m	class:testing::internal::CartesianProductGenerator5::Iterator
begin3_	ts/ts_gtest.h	/^    const typename ParamGenerator<T3>::iterator begin3_;$/;"	m	class:testing::internal::CartesianProductGenerator6::Iterator
begin3_	ts/ts_gtest.h	/^    const typename ParamGenerator<T3>::iterator begin3_;$/;"	m	class:testing::internal::CartesianProductGenerator7::Iterator
begin3_	ts/ts_gtest.h	/^    const typename ParamGenerator<T3>::iterator begin3_;$/;"	m	class:testing::internal::CartesianProductGenerator8::Iterator
begin3_	ts/ts_gtest.h	/^    const typename ParamGenerator<T3>::iterator begin3_;$/;"	m	class:testing::internal::CartesianProductGenerator9::Iterator
begin4_	ts/ts_gtest.h	/^    const typename ParamGenerator<T4>::iterator begin4_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
begin4_	ts/ts_gtest.h	/^    const typename ParamGenerator<T4>::iterator begin4_;$/;"	m	class:testing::internal::CartesianProductGenerator4::Iterator
begin4_	ts/ts_gtest.h	/^    const typename ParamGenerator<T4>::iterator begin4_;$/;"	m	class:testing::internal::CartesianProductGenerator5::Iterator
begin4_	ts/ts_gtest.h	/^    const typename ParamGenerator<T4>::iterator begin4_;$/;"	m	class:testing::internal::CartesianProductGenerator6::Iterator
begin4_	ts/ts_gtest.h	/^    const typename ParamGenerator<T4>::iterator begin4_;$/;"	m	class:testing::internal::CartesianProductGenerator7::Iterator
begin4_	ts/ts_gtest.h	/^    const typename ParamGenerator<T4>::iterator begin4_;$/;"	m	class:testing::internal::CartesianProductGenerator8::Iterator
begin4_	ts/ts_gtest.h	/^    const typename ParamGenerator<T4>::iterator begin4_;$/;"	m	class:testing::internal::CartesianProductGenerator9::Iterator
begin5_	ts/ts_gtest.h	/^    const typename ParamGenerator<T5>::iterator begin5_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
begin5_	ts/ts_gtest.h	/^    const typename ParamGenerator<T5>::iterator begin5_;$/;"	m	class:testing::internal::CartesianProductGenerator5::Iterator
begin5_	ts/ts_gtest.h	/^    const typename ParamGenerator<T5>::iterator begin5_;$/;"	m	class:testing::internal::CartesianProductGenerator6::Iterator
begin5_	ts/ts_gtest.h	/^    const typename ParamGenerator<T5>::iterator begin5_;$/;"	m	class:testing::internal::CartesianProductGenerator7::Iterator
begin5_	ts/ts_gtest.h	/^    const typename ParamGenerator<T5>::iterator begin5_;$/;"	m	class:testing::internal::CartesianProductGenerator8::Iterator
begin5_	ts/ts_gtest.h	/^    const typename ParamGenerator<T5>::iterator begin5_;$/;"	m	class:testing::internal::CartesianProductGenerator9::Iterator
begin6_	ts/ts_gtest.h	/^    const typename ParamGenerator<T6>::iterator begin6_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
begin6_	ts/ts_gtest.h	/^    const typename ParamGenerator<T6>::iterator begin6_;$/;"	m	class:testing::internal::CartesianProductGenerator6::Iterator
begin6_	ts/ts_gtest.h	/^    const typename ParamGenerator<T6>::iterator begin6_;$/;"	m	class:testing::internal::CartesianProductGenerator7::Iterator
begin6_	ts/ts_gtest.h	/^    const typename ParamGenerator<T6>::iterator begin6_;$/;"	m	class:testing::internal::CartesianProductGenerator8::Iterator
begin6_	ts/ts_gtest.h	/^    const typename ParamGenerator<T6>::iterator begin6_;$/;"	m	class:testing::internal::CartesianProductGenerator9::Iterator
begin7_	ts/ts_gtest.h	/^    const typename ParamGenerator<T7>::iterator begin7_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
begin7_	ts/ts_gtest.h	/^    const typename ParamGenerator<T7>::iterator begin7_;$/;"	m	class:testing::internal::CartesianProductGenerator7::Iterator
begin7_	ts/ts_gtest.h	/^    const typename ParamGenerator<T7>::iterator begin7_;$/;"	m	class:testing::internal::CartesianProductGenerator8::Iterator
begin7_	ts/ts_gtest.h	/^    const typename ParamGenerator<T7>::iterator begin7_;$/;"	m	class:testing::internal::CartesianProductGenerator9::Iterator
begin8_	ts/ts_gtest.h	/^    const typename ParamGenerator<T8>::iterator begin8_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
begin8_	ts/ts_gtest.h	/^    const typename ParamGenerator<T8>::iterator begin8_;$/;"	m	class:testing::internal::CartesianProductGenerator8::Iterator
begin8_	ts/ts_gtest.h	/^    const typename ParamGenerator<T8>::iterator begin8_;$/;"	m	class:testing::internal::CartesianProductGenerator9::Iterator
begin9_	ts/ts_gtest.h	/^    const typename ParamGenerator<T9>::iterator begin9_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
begin9_	ts/ts_gtest.h	/^    const typename ParamGenerator<T9>::iterator begin9_;$/;"	m	class:testing::internal::CartesianProductGenerator9::Iterator
begin_	ts/ts_gtest.h	/^  const T begin_;$/;"	m	class:testing::internal::RangeGenerator
belongs_to	flann/kmeans_index.h	/^        int* belongs_to;$/;"	m	class:cvflann::KMeansIndex::KMeansDistanceComputer
bestIndex_	flann/autotuned_index.h	/^    NNIndex<Distance>* bestIndex_;$/;"	m	class:cvflann::AutotunedIndex
bestParams_	flann/autotuned_index.h	/^    IndexParams bestParams_;$/;"	m	class:cvflann::AutotunedIndex
bestSearchParams_	flann/autotuned_index.h	/^    SearchParams bestSearchParams_;$/;"	m	class:cvflann::AutotunedIndex
beta	core/mat.hpp	/^    double alpha, beta;$/;"	m	class:cv::MatExpr
bicubicCoeff	core/cuda/filters.hpp	/^        static __device__ __forceinline__ float bicubicCoeff(float x_)$/;"	f	struct:cv::cuda::device::CubicFilter
bicubicCoeff	cudev/ptr2d/interpolation.hpp	/^    __device__ static float bicubicCoeff(float x_)$/;"	f	struct:cv::cudev::CubicInterPtr
big_any_policy	flann/any.h	/^struct big_any_policy : typed_base_any_policy<T>$/;"	s	namespace:cvflann::anyimpl
binaryTupleAdapter	cudev/functional/tuple_adapter.hpp	/^__host__ __device__ BinaryTupleAdapter<Op, n0, n1> binaryTupleAdapter(const Op& op)$/;"	f	namespace:cv::cudev
binary_function	core/cuda/functional.hpp	/^    template<typename Argument1, typename Argument2, typename Result> struct binary_function : public std::binary_function<Argument1, Argument2, Result> {};$/;"	s	namespace:cv::cuda::device
binary_function	cudev/functional/functional.hpp	/^template <typename _Arg1, typename _Arg2, typename _Result> struct binary_function$/;"	s	namespace:cv::cudev
binary_negate	core/cuda/functional.hpp	/^        __host__ __device__ __forceinline__ binary_negate() {}$/;"	f	struct:cv::cuda::device::binary_negate
binary_negate	core/cuda/functional.hpp	/^        __host__ __device__ __forceinline__ binary_negate(const binary_negate& other) : pred(other.pred) {}$/;"	f	struct:cv::cuda::device::binary_negate
binary_negate	core/cuda/functional.hpp	/^        explicit __host__ __device__ __forceinline__ binary_negate(const Predicate& p) : pred(p) {}$/;"	f	struct:cv::cuda::device::binary_negate
binary_negate	core/cuda/functional.hpp	/^    template <typename Predicate> struct binary_negate : binary_function<typename Predicate::first_argument_type, typename Predicate::second_argument_type, bool>$/;"	s	namespace:cv::cuda::device
bind	cudev/ptr2d/texture.hpp	/^        __host__ static void bind(const cv::cudev::GlobPtrSz<T>& mat,$/;"	f	struct:__anon393::CvCudevTextureRef
bind1st	core/cuda/functional.hpp	/^    template <typename Op, typename T> __host__ __device__ __forceinline__ binder1st<Op> bind1st(const Op& op, const T& x)$/;"	f	namespace:cv::cuda::device
bind1st	cudev/functional/functional.hpp	/^__host__ __device__ Binder1st<Op> bind1st(const Op& op, const typename Op::first_argument_type& arg1)$/;"	f	namespace:cv::cudev
bind2nd	core/cuda/functional.hpp	/^    template <typename Op, typename T> __host__ __device__ __forceinline__ binder2nd<Op> bind2nd(const Op& op, const T& x)$/;"	f	namespace:cv::cuda::device
bind2nd	cudev/functional/functional.hpp	/^__host__ __device__ Binder2nd<Op> bind2nd(const Op& op, const typename Op::second_argument_type& arg2)$/;"	f	namespace:cv::cudev
bindTexture	core/cuda/common.hpp	/^        template<class T> inline void bindTexture(const textureReference* tex, const PtrStepSz<T>& img)$/;"	f	namespace:cv::cuda::device
binder1st	core/cuda/functional.hpp	/^        __host__ __device__ __forceinline__ binder1st() {}$/;"	f	struct:cv::cuda::device::binder1st
binder1st	core/cuda/functional.hpp	/^        __host__ __device__ __forceinline__ binder1st(const Op& op_, const typename Op::first_argument_type& arg1_) : op(op_), arg1(arg1_) {}$/;"	f	struct:cv::cuda::device::binder1st
binder1st	core/cuda/functional.hpp	/^        __host__ __device__ __forceinline__ binder1st(const binder1st& other) : op(other.op), arg1(other.arg1) {}$/;"	f	struct:cv::cuda::device::binder1st
binder1st	core/cuda/functional.hpp	/^    template <typename Op> struct binder1st : unary_function<typename Op::second_argument_type, typename Op::result_type>$/;"	s	namespace:cv::cuda::device
binder2nd	core/cuda/functional.hpp	/^        __host__ __device__ __forceinline__ binder2nd() {}$/;"	f	struct:cv::cuda::device::binder2nd
binder2nd	core/cuda/functional.hpp	/^        __host__ __device__ __forceinline__ binder2nd(const Op& op_, const typename Op::second_argument_type& arg2_) : op(op_), arg2(arg2_) {}$/;"	f	struct:cv::cuda::device::binder2nd
binder2nd	core/cuda/functional.hpp	/^        __host__ __device__ __forceinline__ binder2nd(const binder2nd& other) : op(other.op), arg2(other.arg2) {}$/;"	f	struct:cv::cuda::device::binder2nd
binder2nd	core/cuda/functional.hpp	/^    template <typename Op> struct binder2nd : unary_function<typename Op::first_argument_type, typename Op::result_type>$/;"	s	namespace:cv::cuda::device
bins	core/types_c.h	/^    CvArr*  bins;$/;"	m	struct:CvHistogram
bit_and	core/cuda/functional.hpp	/^        __host__ __device__ __forceinline__ bit_and() {}$/;"	f	struct:cv::cuda::device::bit_and
bit_and	core/cuda/functional.hpp	/^        __host__ __device__ __forceinline__ bit_and(const bit_and&) {}$/;"	f	struct:cv::cuda::device::bit_and
bit_and	core/cuda/functional.hpp	/^    template <typename T> struct bit_and : binary_function<T, T, T>$/;"	s	namespace:cv::cuda::device
bit_and	cudev/functional/functional.hpp	/^template <typename T> struct bit_and : binary_function<T, T, T>$/;"	s	namespace:cv::cudev
bit_lshift	cudev/functional/functional.hpp	/^template <typename T> struct bit_lshift : binary_function<T, T, T>$/;"	s	namespace:cv::cudev
bit_not	core/cuda/functional.hpp	/^        __host__ __device__ __forceinline__ bit_not() {}$/;"	f	struct:cv::cuda::device::bit_not
bit_not	core/cuda/functional.hpp	/^        __host__ __device__ __forceinline__ bit_not(const bit_not&) {}$/;"	f	struct:cv::cuda::device::bit_not
bit_not	core/cuda/functional.hpp	/^    template <typename T> struct bit_not : unary_function<T, T>$/;"	s	namespace:cv::cuda::device
bit_not	cudev/functional/functional.hpp	/^template <typename T> struct bit_not : unary_function<T, T>$/;"	s	namespace:cv::cudev
bit_or	core/cuda/functional.hpp	/^        __host__ __device__ __forceinline__ bit_or() {}$/;"	f	struct:cv::cuda::device::bit_or
bit_or	core/cuda/functional.hpp	/^        __host__ __device__ __forceinline__ bit_or(const bit_or&) {}$/;"	f	struct:cv::cuda::device::bit_or
bit_or	core/cuda/functional.hpp	/^    template <typename T> struct bit_or : binary_function<T, T, T>$/;"	s	namespace:cv::cuda::device
bit_or	cudev/functional/functional.hpp	/^template <typename T> struct bit_or : binary_function<T, T, T>$/;"	s	namespace:cv::cudev
bit_rshift	cudev/functional/functional.hpp	/^template <typename T> struct bit_rshift : binary_function<T, T, T>$/;"	s	namespace:cv::cudev
bit_xor	core/cuda/functional.hpp	/^        __host__ __device__ __forceinline__ bit_xor() {}$/;"	f	struct:cv::cuda::device::bit_xor
bit_xor	core/cuda/functional.hpp	/^        __host__ __device__ __forceinline__ bit_xor(const bit_xor&) {}$/;"	f	struct:cv::cuda::device::bit_xor
bit_xor	core/cuda/functional.hpp	/^    template <typename T> struct bit_xor : binary_function<T, T, T>$/;"	s	namespace:cv::cuda::device
bit_xor	cudev/functional/functional.hpp	/^template <typename T> struct bit_xor : binary_function<T, T, T>$/;"	s	namespace:cv::cudev
bits	ts/ts_gtest.h	/^  const Bits &bits() const { return u_.bits_; }$/;"	f	class:testing::internal::FloatingPoint
bits_	ts/ts_gtest.h	/^    Bits bits_;      \/\/ The bits that represent the number.$/;"	m	union:testing::internal::FloatingPoint::FloatingPointUnion
bitset_	flann/dynamic_bitset.h	/^    std::vector<size_t> bitset_;$/;"	m	class:cvflann::DynamicBitset
bl_height_	stitching/detail/exposure_compensate.hpp	/^    int bl_width_, bl_height_;$/;"	m	class:cv::detail::BlocksGainCompensator
bl_width_	stitching/detail/exposure_compensate.hpp	/^    int bl_width_, bl_height_;$/;"	m	class:cv::detail::BlocksGainCompensator
black	viz/types.hpp	/^inline cv::viz::Color cv::viz::Color::black()   { return Color(  0,   0,   0); }$/;"	f	class:cv::viz::Color
blender	stitching.hpp	/^    Ptr<detail::Blender> blender() { return blender_; }$/;"	f	class:cv::Stitcher
blender	stitching.hpp	/^    const Ptr<detail::Blender> blender() const { return blender_; }$/;"	f	class:cv::Stitcher
blender_	stitching.hpp	/^    Ptr<detail::Blender> blender_;$/;"	m	class:cv::Stitcher
blobColor	features2d.hpp	/^      CV_PROP_RW uchar blobColor;$/;"	m	struct:cv::SimpleBlobDetector::Params
block	core/persistence.hpp	/^      void*        block;      \/* current block;        CvSeqBlock *\/$/;"	m	struct:cv::FileNodeIterator::SeqReader
blockCopy	cudev/block/block.hpp	/^__device__ __forceinline__ static void blockCopy(InIt beg, InIt end, OutIt out)$/;"	f	namespace:cv::cudev
blockFill	cudev/block/block.hpp	/^__device__ __forceinline__ static void blockFill(It beg, It end, const T& value)$/;"	f	namespace:cv::cudev
blockId	cudev/block/block.hpp	/^    __device__ __forceinline__ static uint blockId()$/;"	f	struct:cv::cudev::Block
blockReduce	cudev/block/reduce.hpp	/^__device__ __forceinline__ void blockReduce(const tuple<P0, P1, P2, P3, P4, P5, P6, P7, P8, P9>& smem,$/;"	f	namespace:cv::cudev
blockReduce	cudev/block/reduce.hpp	/^__device__ __forceinline__ void blockReduce(volatile T* smem, T& val, uint tid, const Op& op)$/;"	f	namespace:cv::cudev
blockReduceKeyVal	cudev/block/reduce.hpp	/^__device__ __forceinline__ void blockReduceKeyVal(const tuple<KP0, KP1, KP2, KP3, KP4, KP5, KP6, KP7, KP8, KP9>& skeys,$/;"	f	namespace:cv::cudev
blockReduceKeyVal	cudev/block/reduce.hpp	/^__device__ __forceinline__ void blockReduceKeyVal(volatile K* skeys, K& key, volatile V* svals, V& val, uint tid, const Cmp& cmp)$/;"	f	namespace:cv::cudev
blockReduceKeyVal	cudev/block/reduce.hpp	/^__device__ __forceinline__ void blockReduceKeyVal(volatile K* skeys, K& key,$/;"	f	namespace:cv::cudev
blockScanExclusive	cudev/block/scan.hpp	/^__device__ __forceinline__ T blockScanExclusive(T data, volatile T* smem, uint tid)$/;"	f	namespace:cv::cudev
blockScanInclusive	core/cuda/scan.hpp	/^    __device__ T blockScanInclusive(T idata, volatile T* s_Data, unsigned int tid)$/;"	f	namespace:cv::cuda::device
blockScanInclusive	cudev/block/scan.hpp	/^__device__ T blockScanInclusive(T data, volatile T* smem, uint tid)$/;"	f	namespace:cv::cudev
blockSize	cudev/block/block.hpp	/^    __device__ __forceinline__ static uint blockSize()$/;"	f	struct:cv::cudev::Block
blockSize	objdetect.hpp	/^    CV_PROP Size blockSize;$/;"	m	struct:cv::HOGDescriptor
blockStride	objdetect.hpp	/^    CV_PROP Size blockStride;$/;"	m	struct:cv::HOGDescriptor
blockTransfrom	cudev/block/block.hpp	/^__device__ __forceinline__ static void blockTransfrom(InIt beg, InIt end, OutIt out, const UnOp& op)$/;"	f	namespace:cv::cudev
blockTransfrom	cudev/block/block.hpp	/^__device__ __forceinline__ static void blockTransfrom(InIt1 beg1, InIt1 end1, InIt2 beg2, OutIt out, const BinOp& op)$/;"	f	namespace:cv::cudev
blockYota	cudev/block/block.hpp	/^__device__ __forceinline__ static void blockYota(OutIt beg, OutIt end, T value)$/;"	f	namespace:cv::cudev
block_dim_y	cudev/grid/transpose.hpp	/^        block_dim_y = 16$/;"	e	enum:cv::cudev::DefaultTransposePolicy::__anon391
block_max	core/persistence.hpp	/^      schar*       block_max;  \/* pointer to the end of block *\/$/;"	m	struct:cv::FileNodeIterator::SeqReader
block_min	core/persistence.hpp	/^      schar*       block_min;  \/* pointer to the beginning of block *\/$/;"	m	struct:cv::FileNodeIterator::SeqReader
block_reduce_detail	cudev/block/detail/reduce.hpp	/^namespace block_reduce_detail$/;"	n	namespace:cv::cudev
block_reduce_key_val_detail	cudev/block/detail/reduce_key_val.hpp	/^namespace block_reduce_key_val_detail$/;"	n	namespace:cv::cudev
block_size	core/types_c.h	/^    int block_size;               \/**< Block size.                              *\/$/;"	m	struct:CvMemStorage
block_size_x	cudev/grid/copy.hpp	/^        block_size_x = 32,$/;"	e	enum:cv::cudev::DefaultCopyPolicy::__anon387
block_size_x	cudev/grid/histogram.hpp	/^        block_size_x = 32,$/;"	e	enum:cv::cudev::DefaultHistogramPolicy::__anon392
block_size_x	cudev/grid/reduce.hpp	/^        block_size_x = 32,$/;"	e	enum:cv::cudev::DefaultGlobReducePolicy::__anon390
block_size_x	cudev/grid/reduce_to_vec.hpp	/^        block_size_x = 32,$/;"	e	enum:cv::cudev::DefaultReduceToVecPolicy::__anon388
block_size_x	cudev/grid/split_merge.hpp	/^        block_size_x = 32,$/;"	e	enum:cv::cudev::DefaultSplitMergePolicy::__anon386
block_size_x	cudev/grid/transform.hpp	/^        block_size_x = 32,$/;"	e	enum:cv::cudev::DefaultTransformPolicy::__anon389
block_size_y	cudev/grid/copy.hpp	/^        block_size_y = 8$/;"	e	enum:cv::cudev::DefaultCopyPolicy::__anon387
block_size_y	cudev/grid/histogram.hpp	/^        block_size_y = 8$/;"	e	enum:cv::cudev::DefaultHistogramPolicy::__anon392
block_size_y	cudev/grid/reduce.hpp	/^        block_size_y = 8,$/;"	e	enum:cv::cudev::DefaultGlobReducePolicy::__anon390
block_size_y	cudev/grid/reduce_to_vec.hpp	/^        block_size_y = 8$/;"	e	enum:cv::cudev::DefaultReduceToVecPolicy::__anon388
block_size_y	cudev/grid/split_merge.hpp	/^        block_size_y = 8$/;"	e	enum:cv::cudev::DefaultSplitMergePolicy::__anon386
block_size_y	cudev/grid/transform.hpp	/^        block_size_y = 8,$/;"	e	enum:cv::cudev::DefaultTransformPolicy::__anon389
blocksize	flann/allocator.h	/^    int     blocksize;$/;"	m	class:cvflann::PooledAllocator
bluberry	viz/types.hpp	/^inline cv::viz::Color cv::viz::Color::bluberry()       { return Color(247, 134,  79); }$/;"	f	class:cv::viz::Color
blue	viz/types.hpp	/^inline cv::viz::Color cv::viz::Color::blue()    { return Color(255,   0,   0); }$/;"	f	class:cv::viz::Color
blurrinessRates	videostab/deblurring.hpp	/^    virtual const std::vector<float>& blurrinessRates() const { return *blurrinessRates_; }$/;"	f	class:cv::videostab::DeblurerBase
blurrinessRates_	videostab/deblurring.hpp	/^    const std::vector<float> *blurrinessRates_;$/;"	m	class:cv::videostab::DeblurerBase
blurrinessRates_	videostab/stabilizer.hpp	/^    std::vector<float> blurrinessRates_;$/;"	m	class:cv::videostab::StabilizerBase
body	cudev/expr/expr.hpp	/^    Body body;$/;"	m	struct:cv::cudev::Expr
bool_constant	ts/ts_gtest.h	/^struct bool_constant {$/;"	s	namespace:std::tr1
borderMode	videostab/inpainting.hpp	/^    int borderMode() const { return borderMode_; }$/;"	f	class:cv::videostab::MotionInpainter
borderMode	videostab/stabilizer.hpp	/^    int borderMode() const { return borderMode_; }$/;"	f	class:cv::videostab::StabilizerBase
borderMode_	videostab/inpainting.hpp	/^    int borderMode_;$/;"	m	class:cv::videostab::MotionInpainter
borderMode_	videostab/stabilizer.hpp	/^    int borderMode_;$/;"	m	class:cv::videostab::StabilizerBase
bot	ts/ocl_test.hpp	/^        int top, bot, lef, rig;$/;"	m	struct:cvtest::ocl::TestUtils::Border
both	cudev/grid/detail/reduce.hpp	/^    struct both$/;"	s	namespace:cv::cudev::grid_reduce_detail
bottom	core/types_c.h	/^    CvMemBlock* bottom;           \/**< First allocated block.                   *\/$/;"	m	struct:CvMemStorage
bottomRight	imgproc.hpp	/^    Point2f bottomRight;$/;"	m	class:cv::Subdiv2D
br	core/types.hpp	/^Point_<_Tp> Rect_<_Tp>::br() const$/;"	f	class:cv::Rect_
branching	flann/kmeans_index.h	/^        const int branching;$/;"	m	class:cvflann::KMeansIndex::KMeansDistanceComputer
branching_	flann/hierarchical_clustering_index.h	/^    int branching_;$/;"	m	class:cvflann::HierarchicalClusteringIndex
branching_	flann/kmeans_index.h	/^    int branching_;$/;"	m	class:cvflann::KMeansIndex
brdConstant	cudev/ptr2d/extrapolation.hpp	/^__host__ BrdConstant<typename PtrTraits<SrcPtr>::ptr_type> brdConstant(const SrcPtr& src)$/;"	f	namespace:cv::cudev
brdConstant	cudev/ptr2d/extrapolation.hpp	/^__host__ BrdConstant<typename PtrTraits<SrcPtr>::ptr_type> brdConstant(const SrcPtr& src, typename PtrTraits<SrcPtr>::value_type val)$/;"	f	namespace:cv::cudev
brdReflect	cudev/ptr2d/extrapolation.hpp	/^__host__ BrdBase<BrdReflect, typename PtrTraits<SrcPtr>::ptr_type> brdReflect(const SrcPtr& src)$/;"	f	namespace:cv::cudev
brdReflect101	cudev/ptr2d/extrapolation.hpp	/^__host__ BrdBase<BrdReflect101, typename PtrTraits<SrcPtr>::ptr_type> brdReflect101(const SrcPtr& src)$/;"	f	namespace:cv::cudev
brdReplicate	cudev/ptr2d/extrapolation.hpp	/^__host__ BrdBase<BrdReplicate, typename PtrTraits<SrcPtr>::ptr_type> brdReplicate(const SrcPtr& src)$/;"	f	namespace:cv::cudev
brdWrap	cudev/ptr2d/extrapolation.hpp	/^__host__ BrdBase<BrdWrap, typename PtrTraits<SrcPtr>::ptr_type> brdWrap(const SrcPtr& src)$/;"	f	namespace:cv::cudev
brown	viz/types.hpp	/^inline cv::viz::Color cv::viz::Color::brown()      { return Color(0,    75, 150); }$/;"	f	class:cv::viz::Color
brs_	stitching/detail/seam_finders.hpp	/^    std::vector<Point> tls_, brs_;$/;"	m	class:cv::detail::DpSeamFinder
bucket_size_max_	flann/lsh_table.h	/^    size_t bucket_size_max_;$/;"	m	struct:cvflann::lsh::LshStats
bucket_size_mean_	flann/lsh_table.h	/^    size_t bucket_size_mean_;$/;"	m	struct:cvflann::lsh::LshStats
bucket_size_median_	flann/lsh_table.h	/^    size_t bucket_size_median_;$/;"	m	struct:cvflann::lsh::LshStats
bucket_size_min_	flann/lsh_table.h	/^    size_t bucket_size_min_;$/;"	m	struct:cvflann::lsh::LshStats
bucket_size_std_dev	flann/lsh_table.h	/^    size_t bucket_size_std_dev;$/;"	m	struct:cvflann::lsh::LshStats
bucket_sizes_	flann/lsh_table.h	/^    std::vector<unsigned int> bucket_sizes_;$/;"	m	struct:cvflann::lsh::LshStats
buckets_space_	flann/lsh_table.h	/^    BucketsSpace buckets_space_;$/;"	m	class:cvflann::lsh::LshTable
buckets_speed_	flann/lsh_table.h	/^    BucketsSpeed buckets_speed_;$/;"	m	class:cvflann::lsh::LshTable
buf	core/mat.hpp	/^    size_t buf[2];$/;"	m	struct:cv::MatStep
buf	core/utility.hpp	/^    _Tp buf[(fixed_size > 0) ? fixed_size : 1];$/;"	m	class:cv::AutoBuffer
buf	ts.hpp	/^    float buf[4];$/;"	m	class:cvtest::ArrayTest
buffer	cudalegacy.hpp	/^    GpuMat buffer;$/;"	m	class:cv::cuda::FastOpticalFlowBM
buildIndex	flann/autotuned_index.h	/^    virtual void buildIndex()$/;"	f	class:cvflann::AutotunedIndex
buildIndex	flann/composite_index.h	/^    void buildIndex()$/;"	f	class:cvflann::CompositeIndex
buildIndex	flann/flann_base.hpp	/^    void buildIndex()$/;"	f	class:cvflann::Index
buildIndex	flann/hierarchical_clustering_index.h	/^    void buildIndex()$/;"	f	class:cvflann::HierarchicalClusteringIndex
buildIndex	flann/kdtree_index.h	/^    void buildIndex()$/;"	f	class:cvflann::KDTreeIndex
buildIndex	flann/kdtree_single_index.h	/^    void buildIndex()$/;"	f	class:cvflann::KDTreeSingleIndex
buildIndex	flann/kmeans_index.h	/^    void buildIndex()$/;"	f	class:cvflann::KMeansIndex
buildIndex	flann/linear_index.h	/^    void buildIndex()$/;"	f	class:cvflann::LinearIndex
buildIndex	flann/lsh_index.h	/^    void buildIndex()$/;"	f	class:cvflann::LshIndex
buildMaps	stitching/detail/warpers.hpp	/^    Rect buildMaps(Size src_size, InputArray K, InputArray R, InputArray T, OutputArray xmap, OutputArray ymap)$/;"	f	class:cv::detail::PlaneWarperGpu
buildMaps	stitching/detail/warpers.hpp	/^    Rect buildMaps(Size src_size, InputArray K, InputArray R, OutputArray xmap, OutputArray ymap)$/;"	f	class:cv::detail::CylindricalWarperGpu
buildMaps	stitching/detail/warpers.hpp	/^    Rect buildMaps(Size src_size, InputArray K, InputArray R, OutputArray xmap, OutputArray ymap)$/;"	f	class:cv::detail::PlaneWarperGpu
buildMaps	stitching/detail/warpers.hpp	/^    Rect buildMaps(Size src_size, InputArray K, InputArray R, OutputArray xmap, OutputArray ymap)$/;"	f	class:cv::detail::SphericalWarperGpu
buildMaps	stitching/detail/warpers_inl.hpp	/^Rect RotationWarperBase<P>::buildMaps(Size src_size, InputArray K, InputArray R, OutputArray _xmap, OutputArray _ymap)$/;"	f	class:cv::detail::RotationWarperBase
buildTimeCost	flann/autotuned_index.h	/^        float buildTimeCost;$/;"	m	struct:cvflann::AutotunedIndex::CostData
build_weight_	flann/autotuned_index.h	/^    float build_weight_;$/;"	m	class:cvflann::AutotunedIndex
bundleAdjuster	stitching.hpp	/^    Ptr<detail::BundleAdjusterBase> bundleAdjuster() { return bundle_adjuster_; }$/;"	f	class:cv::Stitcher
bundleAdjuster	stitching.hpp	/^    const Ptr<detail::BundleAdjusterBase> bundleAdjuster() const { return bundle_adjuster_; }$/;"	f	class:cv::Stitcher
bundle_adjuster_	stitching.hpp	/^    Ptr<detail::BundleAdjusterBase> bundle_adjuster_;$/;"	m	class:cv::Stitcher
button	viz/types.hpp	/^            MouseButton button;$/;"	m	class:cv::viz::MouseEvent
bytesIn	ts/ts_perf.hpp	/^    size_t bytesIn;$/;"	m	struct:perf::performance_metrics
bytesOut	ts/ts_perf.hpp	/^    size_t bytesOut;$/;"	m	struct:perf::performance_metrics
c	core/mat.hpp	/^    Mat a, b, c;$/;"	m	class:cv::MatExpr
c	ml.hpp	/^        float c; \/**< The threshold value in case of split on an ordered variable.$/;"	m	class:cv::ml::DTrees::Split
c_HlsSectorData	core/cuda/detail/color_detail.hpp	/^        __constant__ int c_HlsSectorData[6][3] = { {1,3,0}, {1,0,2}, {3,0,1}, {0,2,1}, {0,1,3}, {2,1,0} };$/;"	m	namespace:cv::cuda::device::color_detail
c_HlsSectorData	cudev/functional/detail/color_cvt.hpp	/^    __constant__ int c_HlsSectorData[6][3] = { {1,3,0}, {1,0,2}, {3,0,1}, {0,2,1}, {0,1,3}, {2,1,0} };$/;"	m	namespace:cv::cudev::color_cvt_detail
c_HsvDivTable	core/cuda/detail/color_detail.hpp	/^        __constant__ int c_HsvDivTable   [256] = {0, 1044480, 522240, 348160, 261120, 208896, 174080, 149211, 130560, 116053, 104448, 94953, 87040, 80345, 74606, 69632, 65280, 61440, 58027, 54973, 52224, 49737, 47476, 45412, 43520, 41779, 40172, 38684, 37303, 36017, 34816, 33693, 32640, 31651, 30720, 29842, 29013, 28229, 27486, 26782, 26112, 25475, 24869, 24290, 23738, 23211, 22706, 22223, 21760, 21316, 20890, 20480, 20086, 19707, 19342, 18991, 18651, 18324, 18008, 17703, 17408, 17123, 16846, 16579, 16320, 16069, 15825, 15589, 15360, 15137, 14921, 14711, 14507, 14308, 14115, 13926, 13743, 13565, 13391, 13221, 13056, 12895, 12738, 12584, 12434, 12288, 12145, 12006, 11869, 11736, 11605, 11478, 11353, 11231, 11111, 10995, 10880, 10768, 10658, 10550, 10445, 10341, 10240, 10141, 10043, 9947, 9854, 9761, 9671, 9582, 9495, 9410, 9326, 9243, 9162, 9082, 9004, 8927, 8852, 8777, 8704, 8632, 8561, 8492, 8423, 8356, 8290, 8224, 8160, 8097, 8034, 7973, 7913, 7853, 7795, 7737, 7680, 7624, 7569, 7514, 7461, 7408, 7355, 7304, 7253, 7203, 7154, 7105, 7057, 7010, 6963, 6917, 6872, 6827, 6782, 6739, 6695, 6653, 6611, 6569, 6528, 6487, 6447, 6408, 6369, 6330, 6292, 6254, 6217, 6180, 6144, 6108, 6073, 6037, 6003, 5968, 5935, 5901, 5868, 5835, 5803, 5771, 5739, 5708, 5677, 5646, 5615, 5585, 5556, 5526, 5497, 5468, 5440, 5412, 5384, 5356, 5329, 5302, 5275, 5249, 5222, 5196, 5171, 5145, 5120, 5095, 5070, 5046, 5022, 4998, 4974, 4950, 4927, 4904, 4881, 4858, 4836, 4813, 4791, 4769, 4748, 4726, 4705, 4684, 4663, 4642, 4622, 4601, 4581, 4561, 4541, 4522, 4502, 4483, 4464, 4445, 4426, 4407, 4389, 4370, 4352, 4334, 4316, 4298, 4281, 4263, 4246, 4229, 4212, 4195, 4178, 4161, 4145, 4128, 4112, 4096};$/;"	m	namespace:cv::cuda::device::color_detail
c_HsvDivTable	cudev/functional/detail/color_cvt.hpp	/^    __constant__ int c_HsvDivTable   [256] = {0, 1044480, 522240, 348160, 261120, 208896, 174080, 149211, 130560, 116053, 104448, 94953, 87040, 80345, 74606, 69632, 65280, 61440, 58027, 54973, 52224, 49737, 47476, 45412, 43520, 41779, 40172, 38684, 37303, 36017, 34816, 33693, 32640, 31651, 30720, 29842, 29013, 28229, 27486, 26782, 26112, 25475, 24869, 24290, 23738, 23211, 22706, 22223, 21760, 21316, 20890, 20480, 20086, 19707, 19342, 18991, 18651, 18324, 18008, 17703, 17408, 17123, 16846, 16579, 16320, 16069, 15825, 15589, 15360, 15137, 14921, 14711, 14507, 14308, 14115, 13926, 13743, 13565, 13391, 13221, 13056, 12895, 12738, 12584, 12434, 12288, 12145, 12006, 11869, 11736, 11605, 11478, 11353, 11231, 11111, 10995, 10880, 10768, 10658, 10550, 10445, 10341, 10240, 10141, 10043, 9947, 9854, 9761, 9671, 9582, 9495, 9410, 9326, 9243, 9162, 9082, 9004, 8927, 8852, 8777, 8704, 8632, 8561, 8492, 8423, 8356, 8290, 8224, 8160, 8097, 8034, 7973, 7913, 7853, 7795, 7737, 7680, 7624, 7569, 7514, 7461, 7408, 7355, 7304, 7253, 7203, 7154, 7105, 7057, 7010, 6963, 6917, 6872, 6827, 6782, 6739, 6695, 6653, 6611, 6569, 6528, 6487, 6447, 6408, 6369, 6330, 6292, 6254, 6217, 6180, 6144, 6108, 6073, 6037, 6003, 5968, 5935, 5901, 5868, 5835, 5803, 5771, 5739, 5708, 5677, 5646, 5615, 5585, 5556, 5526, 5497, 5468, 5440, 5412, 5384, 5356, 5329, 5302, 5275, 5249, 5222, 5196, 5171, 5145, 5120, 5095, 5070, 5046, 5022, 4998, 4974, 4950, 4927, 4904, 4881, 4858, 4836, 4813, 4791, 4769, 4748, 4726, 4705, 4684, 4663, 4642, 4622, 4601, 4581, 4561, 4541, 4522, 4502, 4483, 4464, 4445, 4426, 4407, 4389, 4370, 4352, 4334, 4316, 4298, 4281, 4263, 4246, 4229, 4212, 4195, 4178, 4161, 4145, 4128, 4112, 4096};$/;"	m	namespace:cv::cudev::color_cvt_detail
c_HsvDivTable180	core/cuda/detail/color_detail.hpp	/^        __constant__ int c_HsvDivTable180[256] = {0, 122880, 61440, 40960, 30720, 24576, 20480, 17554, 15360, 13653, 12288, 11171, 10240, 9452, 8777, 8192, 7680, 7228, 6827, 6467, 6144, 5851, 5585, 5343, 5120, 4915, 4726, 4551, 4389, 4237, 4096, 3964, 3840, 3724, 3614, 3511, 3413, 3321, 3234, 3151, 3072, 2997, 2926, 2858, 2793, 2731, 2671, 2614, 2560, 2508, 2458, 2409, 2363, 2318, 2276, 2234, 2194, 2156, 2119, 2083, 2048, 2014, 1982, 1950, 1920, 1890, 1862, 1834, 1807, 1781, 1755, 1731, 1707, 1683, 1661, 1638, 1617, 1596, 1575, 1555, 1536, 1517, 1499, 1480, 1463, 1446, 1429, 1412, 1396, 1381, 1365, 1350, 1336, 1321, 1307, 1293, 1280, 1267, 1254, 1241, 1229, 1217, 1205, 1193, 1182, 1170, 1159, 1148, 1138, 1127, 1117, 1107, 1097, 1087, 1078, 1069, 1059, 1050, 1041, 1033, 1024, 1016, 1007, 999, 991, 983, 975, 968, 960, 953, 945, 938, 931, 924, 917, 910, 904, 897, 890, 884, 878, 871, 865, 859, 853, 847, 842, 836, 830, 825, 819, 814, 808, 803, 798, 793, 788, 783, 778, 773, 768, 763, 759, 754, 749, 745, 740, 736, 731, 727, 723, 719, 714, 710, 706, 702, 698, 694, 690, 686, 683, 679, 675, 671, 668, 664, 661, 657, 654, 650, 647, 643, 640, 637, 633, 630, 627, 624, 621, 617, 614, 611, 608, 605, 602, 599, 597, 594, 591, 588, 585, 582, 580, 577, 574, 572, 569, 566, 564, 561, 559, 556, 554, 551, 549, 546, 544, 541, 539, 537, 534, 532, 530, 527, 525, 523, 521, 518, 516, 514, 512, 510, 508, 506, 504, 502, 500, 497, 495, 493, 492, 490, 488, 486, 484, 482};$/;"	m	namespace:cv::cuda::device::color_detail
c_HsvDivTable180	cudev/functional/detail/color_cvt.hpp	/^    __constant__ int c_HsvDivTable180[256] = {0, 122880, 61440, 40960, 30720, 24576, 20480, 17554, 15360, 13653, 12288, 11171, 10240, 9452, 8777, 8192, 7680, 7228, 6827, 6467, 6144, 5851, 5585, 5343, 5120, 4915, 4726, 4551, 4389, 4237, 4096, 3964, 3840, 3724, 3614, 3511, 3413, 3321, 3234, 3151, 3072, 2997, 2926, 2858, 2793, 2731, 2671, 2614, 2560, 2508, 2458, 2409, 2363, 2318, 2276, 2234, 2194, 2156, 2119, 2083, 2048, 2014, 1982, 1950, 1920, 1890, 1862, 1834, 1807, 1781, 1755, 1731, 1707, 1683, 1661, 1638, 1617, 1596, 1575, 1555, 1536, 1517, 1499, 1480, 1463, 1446, 1429, 1412, 1396, 1381, 1365, 1350, 1336, 1321, 1307, 1293, 1280, 1267, 1254, 1241, 1229, 1217, 1205, 1193, 1182, 1170, 1159, 1148, 1138, 1127, 1117, 1107, 1097, 1087, 1078, 1069, 1059, 1050, 1041, 1033, 1024, 1016, 1007, 999, 991, 983, 975, 968, 960, 953, 945, 938, 931, 924, 917, 910, 904, 897, 890, 884, 878, 871, 865, 859, 853, 847, 842, 836, 830, 825, 819, 814, 808, 803, 798, 793, 788, 783, 778, 773, 768, 763, 759, 754, 749, 745, 740, 736, 731, 727, 723, 719, 714, 710, 706, 702, 698, 694, 690, 686, 683, 679, 675, 671, 668, 664, 661, 657, 654, 650, 647, 643, 640, 637, 633, 630, 627, 624, 621, 617, 614, 611, 608, 605, 602, 599, 597, 594, 591, 588, 585, 582, 580, 577, 574, 572, 569, 566, 564, 561, 559, 556, 554, 551, 549, 546, 544, 541, 539, 537, 534, 532, 530, 527, 525, 523, 521, 518, 516, 514, 512, 510, 508, 506, 504, 502, 500, 497, 495, 493, 492, 490, 488, 486, 484, 482};$/;"	m	namespace:cv::cudev::color_cvt_detail
c_HsvDivTable256	core/cuda/detail/color_detail.hpp	/^        __constant__ int c_HsvDivTable256[256] = {0, 174763, 87381, 58254, 43691, 34953, 29127, 24966, 21845, 19418, 17476, 15888, 14564, 13443, 12483, 11651, 10923, 10280, 9709, 9198, 8738, 8322, 7944, 7598, 7282, 6991, 6722, 6473, 6242, 6026, 5825, 5638, 5461, 5296, 5140, 4993, 4855, 4723, 4599, 4481, 4369, 4263, 4161, 4064, 3972, 3884, 3799, 3718, 3641, 3567, 3495, 3427, 3361, 3297, 3236, 3178, 3121, 3066, 3013, 2962, 2913, 2865, 2819, 2774, 2731, 2689, 2648, 2608, 2570, 2533, 2497, 2461, 2427, 2394, 2362, 2330, 2300, 2270, 2241, 2212, 2185, 2158, 2131, 2106, 2081, 2056, 2032, 2009, 1986, 1964, 1942, 1920, 1900, 1879, 1859, 1840, 1820, 1802, 1783, 1765, 1748, 1730, 1713, 1697, 1680, 1664, 1649, 1633, 1618, 1603, 1589, 1574, 1560, 1547, 1533, 1520, 1507, 1494, 1481, 1469, 1456, 1444, 1432, 1421, 1409, 1398, 1387, 1376, 1365, 1355, 1344, 1334, 1324, 1314, 1304, 1295, 1285, 1276, 1266, 1257, 1248, 1239, 1231, 1222, 1214, 1205, 1197, 1189, 1181, 1173, 1165, 1157, 1150, 1142, 1135, 1128, 1120, 1113, 1106, 1099, 1092, 1085, 1079, 1072, 1066, 1059, 1053, 1046, 1040, 1034, 1028, 1022, 1016, 1010, 1004, 999, 993, 987, 982, 976, 971, 966, 960, 955, 950, 945, 940, 935, 930, 925, 920, 915, 910, 906, 901, 896, 892, 887, 883, 878, 874, 869, 865, 861, 857, 853, 848, 844, 840, 836, 832, 828, 824, 820, 817, 813, 809, 805, 802, 798, 794, 791, 787, 784, 780, 777, 773, 770, 767, 763, 760, 757, 753, 750, 747, 744, 741, 737, 734, 731, 728, 725, 722, 719, 716, 713, 710, 708, 705, 702, 699, 696, 694, 691, 688, 685};$/;"	m	namespace:cv::cuda::device::color_detail
c_HsvDivTable256	cudev/functional/detail/color_cvt.hpp	/^    __constant__ int c_HsvDivTable256[256] = {0, 174763, 87381, 58254, 43691, 34953, 29127, 24966, 21845, 19418, 17476, 15888, 14564, 13443, 12483, 11651, 10923, 10280, 9709, 9198, 8738, 8322, 7944, 7598, 7282, 6991, 6722, 6473, 6242, 6026, 5825, 5638, 5461, 5296, 5140, 4993, 4855, 4723, 4599, 4481, 4369, 4263, 4161, 4064, 3972, 3884, 3799, 3718, 3641, 3567, 3495, 3427, 3361, 3297, 3236, 3178, 3121, 3066, 3013, 2962, 2913, 2865, 2819, 2774, 2731, 2689, 2648, 2608, 2570, 2533, 2497, 2461, 2427, 2394, 2362, 2330, 2300, 2270, 2241, 2212, 2185, 2158, 2131, 2106, 2081, 2056, 2032, 2009, 1986, 1964, 1942, 1920, 1900, 1879, 1859, 1840, 1820, 1802, 1783, 1765, 1748, 1730, 1713, 1697, 1680, 1664, 1649, 1633, 1618, 1603, 1589, 1574, 1560, 1547, 1533, 1520, 1507, 1494, 1481, 1469, 1456, 1444, 1432, 1421, 1409, 1398, 1387, 1376, 1365, 1355, 1344, 1334, 1324, 1314, 1304, 1295, 1285, 1276, 1266, 1257, 1248, 1239, 1231, 1222, 1214, 1205, 1197, 1189, 1181, 1173, 1165, 1157, 1150, 1142, 1135, 1128, 1120, 1113, 1106, 1099, 1092, 1085, 1079, 1072, 1066, 1059, 1053, 1046, 1040, 1034, 1028, 1022, 1016, 1010, 1004, 999, 993, 987, 982, 976, 971, 966, 960, 955, 950, 945, 940, 935, 930, 925, 920, 915, 910, 906, 901, 896, 892, 887, 883, 878, 874, 869, 865, 861, 857, 853, 848, 844, 840, 836, 832, 828, 824, 820, 817, 813, 809, 805, 802, 798, 794, 791, 787, 784, 780, 777, 773, 770, 767, 763, 760, 757, 753, 750, 747, 744, 741, 737, 734, 731, 728, 725, 722, 719, 716, 713, 710, 708, 705, 702, 699, 696, 694, 691, 688, 685};$/;"	m	namespace:cv::cudev::color_cvt_detail
c_HsvSectorData	core/cuda/detail/color_detail.hpp	/^        __constant__ int c_HsvSectorData[6][3] = { {1,3,0}, {1,0,2}, {3,0,1}, {0,2,1}, {0,1,3}, {2,1,0} };$/;"	m	namespace:cv::cuda::device::color_detail
c_HsvSectorData	cudev/functional/detail/color_cvt.hpp	/^    __constant__ int c_HsvSectorData[6][3] = { {1,3,0}, {1,0,2}, {3,0,1}, {0,2,1}, {0,1,3}, {2,1,0} };$/;"	m	namespace:cv::cudev::color_cvt_detail
c_LabCbrtTab	core/cuda/detail/color_detail.hpp	/^        __constant__ float c_LabCbrtTab[] = {0.137931,0.0114066,0.,1.18859e-07,0.149338,0.011407,3.56578e-07,-5.79396e-07,0.160745,0.0114059,-1.38161e-06,2.16892e-06,0.172151,0.0114097,5.12516e-06,-8.0814e-06,0.183558,0.0113957,-1.9119e-05,3.01567e-05,0.194965,0.0114479,7.13509e-05,-0.000112545,0.206371,0.011253,-0.000266285,-0.000106493,0.217252,0.0104009,-0.000585765,7.32149e-05,0.22714,0.00944906,-0.00036612,1.21917e-05,0.236235,0.0087534,-0.000329545,2.01753e-05,0.244679,0.00815483,-0.000269019,1.24435e-05,0.252577,0.00765412,-0.000231689,1.05618e-05,0.26001,0.00722243,-0.000200003,8.26662e-06,0.267041,0.00684723,-0.000175203,6.76746e-06,0.27372,0.00651712,-0.000154901,5.61192e-06,0.280088,0.00622416,-0.000138065,4.67009e-06,0.286179,0.00596204,-0.000124055,3.99012e-06,0.292021,0.0057259,-0.000112085,3.36032e-06,0.297638,0.00551181,-0.000102004,2.95338e-06,0.30305,0.00531666,-9.31435e-05,2.52875e-06,0.308277,0.00513796,-8.55572e-05,2.22022e-06,0.313331,0.00497351,-7.88966e-05,1.97163e-06,0.318228,0.00482163,-7.29817e-05,1.7248e-06,0.322978,0.00468084,-6.78073e-05,1.55998e-06,0.327593,0.0045499,-6.31274e-05,1.36343e-06,0.332081,0.00442774,-5.90371e-05,1.27136e-06,0.336451,0.00431348,-5.5223e-05,1.09111e-06,0.34071,0.00420631,-5.19496e-05,1.0399e-06,0.344866,0.00410553,-4.88299e-05,9.18347e-07,0.348923,0.00401062,-4.60749e-05,8.29942e-07,0.352889,0.00392096,-4.35851e-05,7.98478e-07,0.356767,0.00383619,-4.11896e-05,6.84917e-07,0.360562,0.00375586,-3.91349e-05,6.63976e-07,0.36428,0.00367959,-3.7143e-05,5.93086e-07,0.367923,0.00360708,-3.53637e-05,5.6976e-07,0.371495,0.00353806,-3.36544e-05,4.95533e-07,0.375,0.00347224,-3.21678e-05,4.87951e-07,0.378441,0.00340937,-3.0704e-05,4.4349e-07,0.38182,0.00334929,-2.93735e-05,4.20297e-07,0.38514,0.0032918,-2.81126e-05,3.7872e-07,0.388404,0.00323671,-2.69764e-05,3.596e-07,0.391614,0.00318384,-2.58976e-05,3.5845e-07,0.394772,0.00313312,-2.48223e-05,2.92765e-07,0.397881,0.00308435,-2.3944e-05,3.18232e-07,0.400942,0.00303742,-2.29893e-05,2.82046e-07,0.403957,0.00299229,-2.21432e-05,2.52315e-07,0.406927,0.00294876,-2.13862e-05,2.58416e-07,0.409855,0.00290676,-2.0611e-05,2.33939e-07,0.412741,0.00286624,-1.99092e-05,2.36342e-07,0.415587,0.00282713,-1.92001e-05,1.916e-07,0.418396,0.00278931,-1.86253e-05,2.1915e-07,0.421167,0.00275271,-1.79679e-05,1.83498e-07,0.423901,0.00271733,-1.74174e-05,1.79343e-07,0.426602,0.00268303,-1.68794e-05,1.72013e-07,0.429268,0.00264979,-1.63633e-05,1.75686e-07,0.431901,0.00261759,-1.58363e-05,1.3852e-07,0.434503,0.00258633,-1.54207e-05,1.64304e-07,0.437074,0.00255598,-1.49278e-05,1.28136e-07,0.439616,0.00252651,-1.45434e-05,1.57618e-07,0.442128,0.0024979,-1.40705e-05,1.0566e-07,0.444612,0.00247007,-1.37535e-05,1.34998e-07,0.447068,0.00244297,-1.33485e-05,1.29207e-07,0.449498,0.00241666,-1.29609e-05,9.32347e-08,0.451902,0.00239102,-1.26812e-05,1.23703e-07,0.45428,0.00236603,-1.23101e-05,9.74072e-08,0.456634,0.0023417,-1.20179e-05,1.12518e-07,0.458964,0.002318,-1.16803e-05,7.83681e-08,0.46127,0.00229488,-1.14452e-05,1.10452e-07,0.463554,0.00227232,-1.11139e-05,7.58719e-08,0.465815,0.00225032,-1.08863e-05,9.2699e-08,0.468055,0.00222882,-1.06082e-05,8.97738e-08,0.470273,0.00220788,-1.03388e-05,5.4845e-08,0.47247,0.00218736,-1.01743e-05,1.0808e-07,0.474648,0.00216734,-9.85007e-06,4.9277e-08,0.476805,0.00214779,-9.70224e-06,8.22408e-08,0.478943,0.00212863,-9.45551e-06,6.87942e-08,0.481063,0.00210993,-9.24913e-06,5.98144e-08,0.483163,0.00209161,-9.06969e-06,7.93789e-08,0.485246,0.00207371,-8.83155e-06,3.99032e-08,0.487311,0.00205616,-8.71184e-06,8.88325e-08,0.489358,0.002039,-8.44534e-06,2.20004e-08,0.491389,0.00202218,-8.37934e-06,9.13872e-08,0.493403,0.0020057,-8.10518e-06,2.96829e-08,0.495401,0.00198957,-8.01613e-06,5.81028e-08,0.497382,0.00197372,-7.84183e-06,6.5731e-08,0.499348,0.00195823,-7.64463e-06,3.66019e-08,0.501299,0.00194305,-7.53483e-06,2.62811e-08,0.503234,0.00192806,-7.45598e-06,9.66907e-08,0.505155,0.00191344,-7.16591e-06,4.18928e-09,0.507061,0.00189912,-7.15334e-06,6.53665e-08,0.508953,0.00188501,-6.95724e-06,3.23686e-08,0.510831,0.00187119,-6.86014e-06,4.35774e-08,0.512696,0.0018576,-6.72941e-06,3.17406e-08,0.514547,0.00184424,-6.63418e-06,6.78785e-08,0.516384,0.00183117,-6.43055e-06,-5.23126e-09,0.518209,0.0018183,-6.44624e-06,7.22562e-08,0.520021,0.00180562,-6.22947e-06,1.42292e-08,0.52182,0.0017932,-6.18679e-06,4.9641e-08,0.523607,0.00178098,-6.03786e-06,2.56259e-08,0.525382,0.00176898,-5.96099e-06,2.66696e-08,0.527145,0.00175714,-5.88098e-06,4.65094e-08,0.528897,0.00174552,-5.74145e-06,2.57114e-08,0.530637,0.00173411,-5.66431e-06,2.94588e-08,0.532365,0.00172287,-5.57594e-06,3.52667e-08,0.534082,0.00171182,-5.47014e-06,8.28868e-09,0.535789,0.00170091,-5.44527e-06,5.07871e-08,0.537484,0.00169017,-5.29291e-06,2.69817e-08,0.539169,0.00167967,-5.21197e-06,2.01009e-08,0.540844,0.0016693,-5.15166e-06,1.18237e-08,0.542508,0.00165903,-5.11619e-06,5.18135e-08,0.544162,0.00164896,-4.96075e-06,1.9341e-08,0.545806,0.00163909,-4.90273e-06,-9.96867e-09,0.54744,0.00162926,-4.93263e-06,8.01382e-08,0.549064,0.00161963,-4.69222e-06,-1.25601e-08,0.550679,0.00161021,-4.7299e-06,2.97067e-08,0.552285,0.00160084,-4.64078e-06,1.29426e-08,0.553881,0.0015916,-4.60195e-06,3.77327e-08,0.555468,0.00158251,-4.48875e-06,1.49412e-08,0.557046,0.00157357,-4.44393e-06,2.17118e-08,0.558615,0.00156475,-4.3788e-06,1.74206e-08,0.560176,0.00155605,-4.32653e-06,2.78152e-08,0.561727,0.00154748,-4.24309e-06,-9.47239e-09,0.563271,0.00153896,-4.27151e-06,6.9679e-08,0.564805,0.00153063,-4.06247e-06,-3.08246e-08,0.566332,0.00152241,-4.15494e-06,5.36188e-08,0.56785,0.00151426,-3.99409e-06,-4.83594e-09,0.56936,0.00150626,-4.00859e-06,2.53293e-08,0.570863,0.00149832,-3.93261e-06,2.27286e-08,0.572357,0.00149052,-3.86442e-06,2.96541e-09,0.573844,0.0014828,-3.85552e-06,2.50147e-08,0.575323,0.00147516,-3.78048e-06,1.61842e-08,0.576794,0.00146765,-3.73193e-06,2.94582e-08,0.578258,0.00146028,-3.64355e-06,-1.48076e-08,0.579715,0.00145295,-3.68798e-06,2.97724e-08,0.581164,0.00144566,-3.59866e-06,1.49272e-08,0.582606,0.00143851,-3.55388e-06,2.97285e-08,0.584041,0.00143149,-3.46469e-06,-1.46323e-08,0.585469,0.00142451,-3.50859e-06,2.88004e-08,0.58689,0.00141758,-3.42219e-06,1.864e-08,0.588304,0.00141079,-3.36627e-06,1.58482e-08,0.589712,0.00140411,-3.31872e-06,-2.24279e-08,0.591112,0.00139741,-3.38601e-06,7.38639e-08,0.592507,0.00139085,-3.16441e-06,-3.46088e-08,0.593894,0.00138442,-3.26824e-06,4.96675e-09,0.595275,0.0013779,-3.25334e-06,7.4346e-08,0.59665,0.00137162,-3.0303e-06,-6.39319e-08,0.598019,0.00136536,-3.2221e-06,6.21725e-08,0.599381,0.00135911,-3.03558e-06,-5.94423e-09,0.600737,0.00135302,-3.05341e-06,2.12091e-08,0.602087,0.00134697,-2.98979e-06,-1.92876e-08,0.603431,0.00134094,-3.04765e-06,5.5941e-08,0.604769,0.00133501,-2.87983e-06,-2.56622e-08,0.606101,0.00132917,-2.95681e-06,4.67078e-08,0.607427,0.0013234,-2.81669e-06,-4.19592e-08,0.608748,0.00131764,-2.94257e-06,6.15243e-08,0.610062,0.00131194,-2.75799e-06,-2.53244e-08,0.611372,0.00130635,-2.83397e-06,3.97739e-08,0.612675,0.0013008,-2.71465e-06,-1.45618e-08,0.613973,0.00129533,-2.75833e-06,1.84733e-08,0.615266,0.00128986,-2.70291e-06,2.73606e-10,0.616553,0.00128446,-2.70209e-06,4.00367e-08,0.617835,0.00127918,-2.58198e-06,-4.12113e-08,0.619111,0.00127389,-2.70561e-06,6.52039e-08,0.620383,0.00126867,-2.51e-06,-4.07901e-08,0.621649,0.00126353,-2.63237e-06,3.83516e-08,0.62291,0.00125838,-2.51732e-06,6.59315e-09,0.624166,0.00125337,-2.49754e-06,-5.11939e-09,0.625416,0.00124836,-2.5129e-06,1.38846e-08,0.626662,0.00124337,-2.47124e-06,9.18514e-09,0.627903,0.00123846,-2.44369e-06,8.97952e-09,0.629139,0.0012336,-2.41675e-06,1.45012e-08,0.63037,0.00122881,-2.37325e-06,-7.37949e-09,0.631597,0.00122404,-2.39538e-06,1.50169e-08,0.632818,0.00121929,-2.35033e-06,6.91648e-09,0.634035,0.00121461,-2.32958e-06,1.69219e-08,0.635248,0.00121,-2.27882e-06,-1.49997e-08,0.636455,0.0012054,-2.32382e-06,4.30769e-08,0.637659,0.00120088,-2.19459e-06,-3.80986e-08,0.638857,0.00119638,-2.30888e-06,4.97134e-08,0.640051,0.00119191,-2.15974e-06,-4.15463e-08,0.641241,0.00118747,-2.28438e-06,5.68667e-08,0.642426,0.00118307,-2.11378e-06,-7.10641e-09,0.643607,0.00117882,-2.1351e-06,-2.8441e-08,0.644784,0.00117446,-2.22042e-06,6.12658e-08,0.645956,0.00117021,-2.03663e-06,-3.78083e-08,0.647124,0.00116602,-2.15005e-06,3.03627e-08,0.648288,0.00116181,-2.05896e-06,-2.40379e-08,0.649448,0.00115762,-2.13108e-06,6.57887e-08,0.650603,0.00115356,-1.93371e-06,-6.03028e-08,0.651755,0.00114951,-2.11462e-06,5.62134e-08,0.652902,0.00114545,-1.94598e-06,-4.53417e-08,0.654046,0.00114142,-2.082e-06,6.55489e-08,0.655185,0.00113745,-1.88536e-06,-3.80396e-08,0.656321,0.00113357,-1.99948e-06,2.70049e-08,0.657452,0.00112965,-1.91846e-06,-1.03755e-08,0.65858,0.00112578,-1.94959e-06,1.44973e-08,0.659704,0.00112192,-1.9061e-06,1.1991e-08,0.660824,0.00111815,-1.87012e-06,-2.85634e-09,0.66194,0.0011144,-1.87869e-06,-5.65782e-10,0.663053,0.00111064,-1.88039e-06,5.11947e-09,0.664162,0.0011069,-1.86503e-06,3.96924e-08,0.665267,0.00110328,-1.74595e-06,-4.46795e-08,0.666368,0.00109966,-1.87999e-06,1.98161e-08,0.667466,0.00109596,-1.82054e-06,2.502e-08,0.66856,0.00109239,-1.74548e-06,-6.86593e-10,0.669651,0.0010889,-1.74754e-06,-2.22739e-08,0.670738,0.00108534,-1.81437e-06,3.01776e-08,0.671821,0.0010818,-1.72383e-06,2.07732e-08,0.672902,0.00107841,-1.66151e-06,-5.36658e-08,0.673978,0.00107493,-1.82251e-06,7.46802e-08,0.675051,0.00107151,-1.59847e-06,-6.62411e-08,0.676121,0.00106811,-1.79719e-06,7.10748e-08,0.677188,0.00106473,-1.58397e-06,-3.92441e-08,0.678251,0.00106145,-1.7017e-06,2.62973e-08,0.679311,0.00105812,-1.62281e-06,-6.34035e-09,0.680367,0.00105486,-1.64183e-06,-9.36249e-10,0.68142,0.00105157,-1.64464e-06,1.00854e-08,0.68247,0.00104831,-1.61438e-06,2.01995e-08,0.683517,0.00104514,-1.55378e-06,-3.1279e-08,0.68456,0.00104194,-1.64762e-06,4.53114e-08,0.685601,0.00103878,-1.51169e-06,-3.07573e-08,0.686638,0.00103567,-1.60396e-06,1.81133e-08,0.687672,0.00103251,-1.54962e-06,1.79085e-08,0.688703,0.00102947,-1.49589e-06,-3.01428e-08,0.689731,0.00102639,-1.58632e-06,4.30583e-08,0.690756,0.00102334,-1.45715e-06,-2.28814e-08,0.691778,0.00102036,-1.52579e-06,-1.11373e-08,0.692797,0.00101727,-1.5592e-06,6.74305e-08,0.693812,0.00101436,-1.35691e-06,-7.97709e-08,0.694825,0.0010114,-1.59622e-06,7.28391e-08,0.695835,0.00100843,-1.37771e-06,-3.27715e-08,0.696842,0.00100558,-1.47602e-06,-1.35807e-09,0.697846,0.00100262,-1.48009e-06,3.82037e-08,0.698847,0.000999775,-1.36548e-06,-3.22474e-08,0.699846,0.000996948,-1.46223e-06,3.11809e-08,0.700841,0.000994117,-1.36868e-06,-3.28714e-08,0.701834,0.000991281,-1.4673e-06,4.07001e-08,0.702824,0.000988468,-1.3452e-06,-1.07197e-08,0.703811,0.000985746,-1.37736e-06,2.17866e-09,0.704795,0.000982998,-1.37082e-06,2.00521e-09,0.705777,0.000980262,-1.3648e-06,-1.01996e-08,0.706756,0.000977502,-1.3954e-06,3.87931e-08,0.707732,0.000974827,-1.27902e-06,-2.57632e-08,0.708706,0.000972192,-1.35631e-06,4.65513e-09,0.709676,0.000969493,-1.34235e-06,7.14257e-09,0.710645,0.00096683,-1.32092e-06,2.63791e-08,0.71161,0.000964267,-1.24178e-06,-5.30543e-08,0.712573,0.000961625,-1.40095e-06,6.66289e-08,0.713533,0.000959023,-1.20106e-06,-3.46474e-08,0.714491,0.000956517,-1.305e-06,1.23559e-08,0.715446,0.000953944,-1.26793e-06,-1.47763e-08,0.716399,0.000951364,-1.31226e-06,4.67494e-08,0.717349,0.000948879,-1.17201e-06,-5.3012e-08,0.718297,0.000946376,-1.33105e-06,4.60894e-08,0.719242,0.000943852,-1.19278e-06,-1.21366e-08,0.720185,0.00094143,-1.22919e-06,2.45673e-09,0.721125,0.000938979,-1.22182e-06,2.30966e-09,0.722063,0.000936543,-1.21489e-06,-1.16954e-08,0.722998,0.000934078,-1.24998e-06,4.44718e-08,0.723931,0.000931711,-1.11656e-06,-4.69823e-08,0.724861,0.000929337,-1.25751e-06,2.4248e-08,0.725789,0.000926895,-1.18477e-06,9.5949e-09,0.726715,0.000924554,-1.15598e-06,-3.02286e-09,0.727638,0.000922233,-1.16505e-06,2.49649e-09,0.72856,0.00091991,-1.15756e-06,-6.96321e-09,0.729478,0.000917575,-1.17845e-06,2.53564e-08,0.730395,0.000915294,-1.10238e-06,-3.48578e-08,0.731309,0.000912984,-1.20695e-06,5.44704e-08,0.732221,0.000910734,-1.04354e-06,-6.38144e-08,0.73313,0.000908455,-1.23499e-06,8.15781e-08,0.734038,0.00090623,-9.90253e-07,-8.3684e-08,0.734943,0.000903999,-1.2413e-06,7.43441e-08,0.735846,0.000901739,-1.01827e-06,-3.48787e-08,0.736746,0.000899598,-1.12291e-06,5.56596e-09,0.737645,0.000897369,-1.10621e-06,1.26148e-08,0.738541,0.000895194,-1.06837e-06,3.57935e-09,0.739435,0.000893068,-1.05763e-06,-2.69322e-08,0.740327,0.000890872,-1.13842e-06,4.45448e-08,0.741217,0.000888729,-1.00479e-06,-3.20376e-08,0.742105,0.000886623,-1.1009e-06,2.40011e-08,0.74299,0.000884493,-1.0289e-06,-4.36209e-09,0.743874,0.000882422,-1.04199e-06,-6.55268e-09,0.744755,0.000880319,-1.06164e-06,3.05728e-08,0.745634,0.000878287,-9.69926e-07,-5.61338e-08,0.746512,0.000876179,-1.13833e-06,7.4753e-08,0.747387,0.000874127,-9.14068e-07,-6.40644e-08,0.74826,0.000872106,-1.10626e-06,6.22955e-08,0.749131,0.000870081,-9.19375e-07,-6.59083e-08,0.75,0.000868044,-1.1171e-06,8.21284e-08,0.750867,0.000866056,-8.70714e-07,-8.37915e-08,0.751732,0.000864064,-1.12209e-06,7.42237e-08,0.752595,0.000862042,-8.99418e-07,-3.42894e-08,0.753456,0.00086014,-1.00229e-06,3.32955e-09,0.754315,0.000858146,-9.92297e-07,2.09712e-08,0.755173,0.000856224,-9.29384e-07,-2.76096e-08,0.756028,0.000854282,-1.01221e-06,2.98627e-08,0.756881,0.000852348,-9.22625e-07,-3.22365e-08,0.757733,0.000850406,-1.01933e-06,3.94786e-08,0.758582,0.000848485,-9.00898e-07,-6.46833e-09,0.75943,0.000846664,-9.20303e-07,-1.36052e-08,0.760275,0.000844783,-9.61119e-07,1.28447e-09,0.761119,0.000842864,-9.57266e-07,8.4674e-09,0.761961,0.000840975,-9.31864e-07,2.44506e-08,0.762801,0.000839185,-8.58512e-07,-4.6665e-08,0.763639,0.000837328,-9.98507e-07,4.30001e-08,0.764476,0.00083546,-8.69507e-07,-6.12609e-09,0.76531,0.000833703,-8.87885e-07,-1.84959e-08,0.766143,0.000831871,-9.43372e-07,2.05052e-08,0.766974,0.000830046,-8.81857e-07,-3.92026e-09,0.767803,0.000828271,-8.93618e-07,-4.82426e-09,0.768631,0.000826469,-9.0809e-07,2.32172e-08,0.769456,0.000824722,-8.38439e-07,-2.84401e-08,0.77028,0.00082296,-9.23759e-07,3.09386e-08,0.771102,0.000821205,-8.30943e-07,-3.57099e-08,0.771922,0.000819436,-9.38073e-07,5.22963e-08,0.772741,0.000817717,-7.81184e-07,-5.42658e-08,0.773558,0.000815992,-9.43981e-07,4.55579e-08,0.774373,0.000814241,-8.07308e-07,-8.75656e-09,0.775186,0.0008126,-8.33578e-07,-1.05315e-08,0.775998,0.000810901,-8.65172e-07,-8.72188e-09,0.776808,0.000809145,-8.91338e-07,4.54191e-08,0.777616,0.000807498,-7.5508e-07,-5.37454e-08,0.778423,0.000805827,-9.16317e-07,5.03532e-08,0.779228,0.000804145,-7.65257e-07,-2.84584e-08,0.780031,0.000802529,-8.50632e-07,3.87579e-09,0.780833,0.00080084,-8.39005e-07,1.29552e-08,0.781633,0.0007992,-8.00139e-07,3.90804e-09,0.782432,0.000797612,-7.88415e-07,-2.85874e-08,0.783228,0.000795949,-8.74177e-07,5.0837e-08,0.784023,0.000794353,-7.21666e-07,-5.55513e-08,0.784817,0.000792743,-8.8832e-07,5.21587e-08,0.785609,0.000791123,-7.31844e-07,-3.38744e-08,0.786399,0.000789558,-8.33467e-07,2.37342e-08,0.787188,0.000787962,-7.62264e-07,-1.45775e-09,0.787975,0.000786433,-7.66638e-07,-1.79034e-08,0.788761,0.000784846,-8.20348e-07,1.34665e-08,0.789545,0.000783246,-7.79948e-07,2.3642e-08,0.790327,0.000781757,-7.09022e-07,-4.84297e-08,0.791108,0.000780194,-8.54311e-07,5.08674e-08,0.791888,0.000778638,-7.01709e-07,-3.58303e-08,0.792666,0.000777127,-8.092e-07,3.28493e-08,0.793442,0.000775607,-7.10652e-07,-3.59624e-08,0.794217,0.000774078,-8.1854e-07,5.13959e-08,0.79499,0.000772595,-6.64352e-07,-5.04121e-08,0.795762,0.000771115,-8.15588e-07,3.10431e-08,0.796532,0.000769577,-7.22459e-07,-1.41557e-08,0.797301,0.00076809,-7.64926e-07,2.55795e-08,0.798069,0.000766636,-6.88187e-07,-2.85578e-08,0.798835,0.000765174,-7.73861e-07,2.90472e-08,0.799599,0.000763714,-6.86719e-07,-2.80262e-08,0.800362,0.000762256,-7.70798e-07,2.34531e-08,0.801123,0.000760785,-7.00438e-07,-6.18144e-09,0.801884,0.000759366,-7.18983e-07,1.27263e-09,0.802642,0.000757931,-7.15165e-07,1.09101e-09,0.803399,0.000756504,-7.11892e-07,-5.63675e-09,0.804155,0.000755064,-7.28802e-07,2.14559e-08,0.80491,0.00075367,-6.64434e-07,-2.05821e-08,0.805663,0.00075228,-7.26181e-07,1.26812e-09,0.806414,0.000750831,-7.22377e-07,1.55097e-08,0.807164,0.000749433,-6.75848e-07,-3.70216e-09,0.807913,0.00074807,-6.86954e-07,-7.0105e-10,0.80866,0.000746694,-6.89057e-07,6.5063e-09,0.809406,0.000745336,-6.69538e-07,-2.53242e-08,0.810151,0.000743921,-7.45511e-07,3.51858e-08,0.810894,0.000742535,-6.39953e-07,3.79034e-09,0.811636,0.000741267,-6.28582e-07,-5.03471e-08,0.812377,0.000739858,-7.79624e-07,7.83886e-08,0.813116,0.000738534,-5.44458e-07,-8.43935e-08,0.813854,0.000737192,-7.97638e-07,8.03714e-08,0.81459,0.000735838,-5.56524e-07,-5.82784e-08,0.815325,0.00073455,-7.31359e-07,3.35329e-08,0.816059,0.000733188,-6.3076e-07,-1.62486e-08,0.816792,0.000731878,-6.79506e-07,3.14614e-08,0.817523,0.000730613,-5.85122e-07,-4.99925e-08,0.818253,0.000729293,-7.35099e-07,4.92994e-08,0.818982,0.000727971,-5.87201e-07,-2.79959e-08,0.819709,0.000726712,-6.71189e-07,3.07959e-09,0.820435,0.000725379,-6.6195e-07,1.56777e-08,0.82116,0.000724102,-6.14917e-07,-6.18564e-09,0.821883,0.000722854,-6.33474e-07,9.06488e-09,0.822606,0.000721614,-6.06279e-07,-3.00739e-08,0.823327,0.000720311,-6.96501e-07,5.16262e-08,0.824046,0.000719073,-5.41623e-07,-5.72214e-08,0.824765,0.000717818,-7.13287e-07,5.80503e-08,0.825482,0.000716566,-5.39136e-07,-5.57703e-08,0.826198,0.00071532,-7.06447e-07,4.58215e-08,0.826912,0.000714045,-5.68983e-07,-8.30636e-09,0.827626,0.000712882,-5.93902e-07,-1.25961e-08,0.828338,0.000711656,-6.3169e-07,-9.13985e-10,0.829049,0.00071039,-6.34432e-07,1.62519e-08,0.829759,0.00070917,-5.85676e-07,-4.48904e-09,0.830468,0.000707985,-5.99143e-07,1.70418e-09,0.831175,0.000706792,-5.9403e-07,-2.32768e-09,0.831881,0.000705597,-6.01014e-07,7.60648e-09,0.832586,0.000704418,-5.78194e-07,-2.80982e-08,0.83329,0.000703177,-6.62489e-07,4.51817e-08,0.833993,0.000701988,-5.26944e-07,-3.34192e-08,0.834694,0.000700834,-6.27201e-07,2.88904e-08,0.835394,0.000699666,-5.4053e-07,-2.25378e-08,0.836093,0.000698517,-6.08143e-07,1.65589e-09,0.836791,0.000697306,-6.03176e-07,1.59142e-08,0.837488,0.000696147,-5.55433e-07,-5.70801e-09,0.838184,0.000695019,-5.72557e-07,6.91792e-09,0.838878,0.000693895,-5.51803e-07,-2.19637e-08,0.839571,0.000692725,-6.17694e-07,2.13321e-08,0.840263,0.000691554,-5.53698e-07,-3.75996e-09,0.840954,0.000690435,-5.64978e-07,-6.29219e-09,0.841644,0.000689287,-5.83855e-07,2.89287e-08,0.842333,0.000688206,-4.97068e-07,-4.98181e-08,0.843021,0.000687062,-6.46523e-07,5.11344e-08,0.843707,0.000685922,-4.9312e-07,-3.55102e-08,0.844393,0.00068483,-5.9965e-07,3.13019e-08,0.845077,0.000683724,-5.05745e-07,-3.00925e-08,0.84576,0.000682622,-5.96022e-07,2.94636e-08,0.846442,0.000681519,-5.07631e-07,-2.81572e-08,0.847123,0.000680419,-5.92103e-07,2.35606e-08,0.847803,0.000679306,-5.21421e-07,-6.48045e-09,0.848482,0.000678243,-5.40863e-07,2.36124e-09,0.849159,0.000677169,-5.33779e-07,-2.96461e-09,0.849836,0.000676092,-5.42673e-07,9.49728e-09,0.850512,0.000675035,-5.14181e-07,-3.50245e-08,0.851186,0.000673902,-6.19254e-07,7.09959e-08,0.851859,0.000672876,-4.06267e-07,-7.01453e-08,0.852532,0.000671853,-6.16703e-07,3.07714e-08,0.853203,0.000670712,-5.24388e-07,6.66423e-09,0.853873,0.000669684,-5.04396e-07,2.17629e-09,0.854542,0.000668681,-4.97867e-07,-1.53693e-08,0.855211,0.000667639,-5.43975e-07,-3.03752e-10,0.855878,0.000666551,-5.44886e-07,1.65844e-08,0.856544,0.000665511,-4.95133e-07,-6.42907e-09,0.857209,0.000664501,-5.1442e-07,9.13195e-09,0.857873,0.0006635,-4.87024e-07,-3.00987e-08,0.858536,0.000662435,-5.7732e-07,5.16584e-08,0.859198,0.000661436,-4.22345e-07,-5.73255e-08,0.859859,0.000660419,-5.94322e-07,5.84343e-08,0.860518,0.000659406,-4.19019e-07,-5.72022e-08,0.861177,0.000658396,-5.90626e-07,5.11653e-08,0.861835,0.000657368,-4.3713e-07,-2.82495e-08,0.862492,0.000656409,-5.21878e-07,2.22788e-09,0.863148,0.000655372,-5.15195e-07,1.9338e-08,0.863803,0.0006544,-4.5718e-07,-1.99754e-08,0.864457,0.000653425,-5.17107e-07,9.59024e-10,0.86511,0.000652394,-5.1423e-07,1.61393e-08,0.865762,0.000651414,-4.65812e-07,-5.91149e-09,0.866413,0.000650465,-4.83546e-07,7.50665e-09,0.867063,0.00064952,-4.61026e-07,-2.4115e-08,0.867712,0.000648526,-5.33371e-07,2.93486e-08,0.86836,0.000647547,-4.45325e-07,-3.36748e-08,0.869007,0.000646555,-5.4635e-07,4.57461e-08,0.869653,0.0006456,-4.09112e-07,-3.01002e-08,0.870298,0.000644691,-4.99412e-07,1.50501e-08,0.870942,0.000643738,-4.54262e-07,-3.01002e-08,0.871585,0.000642739,-5.44563e-07,4.57461e-08,0.872228,0.000641787,-4.07324e-07,-3.36748e-08,0.872869,0.000640871,-5.08349e-07,2.93486e-08,0.873509,0.000639943,-4.20303e-07,-2.4115e-08,0.874149,0.00063903,-4.92648e-07,7.50655e-09,0.874787,0.000638067,-4.70128e-07,-5.91126e-09,0.875425,0.000637109,-4.87862e-07,1.61385e-08,0.876062,0.000636182,-4.39447e-07,9.61961e-10,0.876697,0.000635306,-4.36561e-07,-1.99863e-08,0.877332,0.000634373,-4.9652e-07,1.93785e-08,0.877966,0.000633438,-4.38384e-07,2.07697e-09,0.878599,0.000632567,-4.32153e-07,-2.76864e-08,0.879231,0.00063162,-5.15212e-07,4.90641e-08,0.879862,0.000630737,-3.6802e-07,-4.93606e-08,0.880493,0.000629852,-5.16102e-07,2.9169e-08,0.881122,0.000628908,-4.28595e-07,-7.71083e-09,0.881751,0.000628027,-4.51727e-07,1.6744e-09,0.882378,0.000627129,-4.46704e-07,1.01317e-09,0.883005,0.000626239,-4.43665e-07,-5.72703e-09,0.883631,0.000625334,-4.60846e-07,2.1895e-08,0.884255,0.000624478,-3.95161e-07,-2.22481e-08,0.88488,0.000623621,-4.61905e-07,7.4928e-09,0.885503,0.00062272,-4.39427e-07,-7.72306e-09,0.886125,0.000621818,-4.62596e-07,2.33995e-08,0.886746,0.000620963,-3.92398e-07,-2.62704e-08,0.887367,0.000620099,-4.71209e-07,2.20775e-08,0.887987,0.000619223,-4.04976e-07,-2.43496e-09,0.888605,0.000618406,-4.12281e-07,-1.23377e-08,0.889223,0.000617544,-4.49294e-07,-7.81876e-09,0.88984,0.000616622,-4.72751e-07,4.36128e-08,0.890457,0.000615807,-3.41912e-07,-4.7423e-08,0.891072,0.000614981,-4.84181e-07,2.68698e-08,0.891687,0.000614093,-4.03572e-07,-4.51384e-10,0.8923,0.000613285,-4.04926e-07,-2.50643e-08,0.892913,0.0006124,-4.80119e-07,4.11038e-08,0.893525,0.000611563,-3.56808e-07,-2.01414e-08,0.894136,0.000610789,-4.17232e-07,-2.01426e-08,0.894747,0.000609894,-4.7766e-07,4.11073e-08,0.895356,0.000609062,-3.54338e-07,-2.50773e-08,0.895965,0.000608278,-4.2957e-07,-4.02954e-10,0.896573,0.000607418,-4.30779e-07,2.66891e-08,0.89718,0.000606636,-3.50711e-07,-4.67489e-08,0.897786,0.000605795,-4.90958e-07,4.10972e-08,0.898391,0.000604936,-3.67666e-07,1.56948e-09,0.898996,0.000604205,-3.62958e-07,-4.73751e-08,0.8996,0.000603337,-5.05083e-07,6.87214e-08,0.900202,0.000602533,-2.98919e-07,-4.86966e-08,0.900805,0.000601789,-4.45009e-07,6.85589e-09,0.901406,0.00060092,-4.24441e-07,2.1273e-08,0.902007,0.000600135,-3.60622e-07,-3.23434e-08,0.902606,0.000599317,-4.57652e-07,4.84959e-08,0.903205,0.000598547,-3.12164e-07,-4.24309e-08,0.903803,0.000597795,-4.39457e-07,2.01844e-09,0.904401,0.000596922,-4.33402e-07,3.43571e-08,0.904997,0.000596159,-3.30331e-07,-2.02374e-08,0.905593,0.000595437,-3.91043e-07,-1.30123e-08,0.906188,0.000594616,-4.3008e-07,1.26819e-08,0.906782,0.000593794,-3.92034e-07,2.18894e-08,0.907376,0.000593076,-3.26366e-07,-4.06349e-08,0.907968,0.000592301,-4.4827e-07,2.1441e-08,0.90856,0.000591469,-3.83947e-07,1.44754e-08,0.909151,0.000590744,-3.40521e-07,-1.97379e-08,0.909742,0.000590004,-3.99735e-07,4.87161e-09,0.910331,0.000589219,-3.8512e-07,2.51532e-10,0.91092,0.00058845,-3.84366e-07,-5.87776e-09,0.911508,0.000587663,-4.01999e-07,2.32595e-08,0.912096,0.000586929,-3.3222e-07,-2.75554e-08,0.912682,0.000586182,-4.14887e-07,2.73573e-08,0.913268,0.000585434,-3.32815e-07,-2.22692e-08,0.913853,0.000584702,-3.99622e-07,2.11486e-09,0.914437,0.000583909,-3.93278e-07,1.38098e-08,0.915021,0.000583164,-3.51848e-07,2.25042e-09,0.915604,0.000582467,-3.45097e-07,-2.28115e-08,0.916186,0.000581708,-4.13531e-07,2.93911e-08,0.916767,0.000580969,-3.25358e-07,-3.51481e-08,0.917348,0.000580213,-4.30803e-07,5.15967e-08,0.917928,0.000579506,-2.76012e-07,-5.20296e-08,0.918507,0.000578798,-4.32101e-07,3.73124e-08,0.919085,0.000578046,-3.20164e-07,-3.76154e-08,0.919663,0.000577293,-4.3301e-07,5.35447e-08,0.92024,0.000576587,-2.72376e-07,-5.7354e-08,0.920816,0.000575871,-4.44438e-07,5.66621e-08,0.921391,0.000575152,-2.74452e-07,-5.00851e-08,0.921966,0.000574453,-4.24707e-07,2.4469e-08,0.92254,0.000573677,-3.513e-07,1.18138e-08,0.923114,0.000573009,-3.15859e-07,-1.21195e-08,0.923686,0.000572341,-3.52217e-07,-2.29403e-08,0.924258,0.000571568,-4.21038e-07,4.4276e-08,0.924829,0.000570859,-2.8821e-07,-3.49546e-08,0.9254,0.000570178,-3.93074e-07,3.59377e-08,0.92597,0.000569499,-2.85261e-07,-4.91915e-08,0.926539,0.000568781,-4.32835e-07,4.16189e-08,0.927107,0.00056804,-3.07979e-07,1.92523e-09,0.927675,0.00056743,-3.02203e-07,-4.93198e-08,0.928242,0.000566678,-4.50162e-07,7.61447e-08,0.928809,0.000566006,-2.21728e-07,-7.6445e-08,0.929374,0.000565333,-4.51063e-07,5.08216e-08,0.929939,0.000564583,-2.98599e-07,-7.63212e-09,0.930503,0.000563963,-3.21495e-07,-2.02931e-08,0.931067,0.000563259,-3.82374e-07,2.92001e-08,0.93163,0.000562582,-2.94774e-07,-3.69025e-08,0.932192,0.000561882,-4.05482e-07,5.88053e-08,0.932754,0.000561247,-2.29066e-07,-7.91094e-08,0.933315,0.000560552,-4.66394e-07,7.88184e-08,0.933875,0.000559856,-2.29939e-07,-5.73501e-08,0.934434,0.000559224,-4.01989e-07,3.13727e-08,0.934993,0.000558514,-3.07871e-07,-8.53611e-09,0.935551,0.000557873,-3.33479e-07,2.77175e-09,0.936109,0.000557214,-3.25164e-07,-2.55091e-09,0.936666,0.000556556,-3.32817e-07,7.43188e-09,0.937222,0.000555913,-3.10521e-07,-2.71766e-08,0.937778,0.00055521,-3.92051e-07,4.167e-08,0.938333,0.000554551,-2.67041e-07,-2.02941e-08,0.938887,0.000553956,-3.27923e-07,-2.00984e-08,0.93944,0.00055324,-3.88218e-07,4.10828e-08,0.939993,0.000552587,-2.6497e-07,-2.50237e-08,0.940546,0.000551982,-3.40041e-07,-5.92583e-10,0.941097,0.0005513,-3.41819e-07,2.7394e-08,0.941648,0.000550698,-2.59637e-07,-4.93788e-08,0.942199,0.000550031,-4.07773e-07,5.09119e-08,0.942748,0.000549368,-2.55038e-07,-3.50595e-08,0.943297,0.000548753,-3.60216e-07,2.97214e-08,0.943846,0.000548122,-2.71052e-07,-2.42215e-08,0.944394,0.000547507,-3.43716e-07,7.55985e-09,0.944941,0.000546842,-3.21037e-07,-6.01796e-09,0.945487,0.000546182,-3.3909e-07,1.65119e-08,0.946033,0.000545553,-2.89555e-07,-4.2498e-10,0.946578,0.000544973,-2.9083e-07,-1.4812e-08,0.947123,0.000544347,-3.35266e-07,6.83068e-11,0.947667,0.000543676,-3.35061e-07,1.45388e-08,0.94821,0.00054305,-2.91444e-07,1.38123e-09,0.948753,0.000542471,-2.87301e-07,-2.00637e-08,0.949295,0.000541836,-3.47492e-07,1.92688e-08,0.949837,0.000541199,-2.89685e-07,2.59298e-09,0.950378,0.000540628,-2.81906e-07,-2.96407e-08,0.950918,0.000539975,-3.70829e-07,5.63652e-08,0.951458,0.000539402,-2.01733e-07,-7.66107e-08,0.951997,0.000538769,-4.31565e-07,7.12638e-08,0.952535,0.00053812,-2.17774e-07,-2.96305e-08,0.953073,0.000537595,-3.06665e-07,-1.23464e-08,0.95361,0.000536945,-3.43704e-07,1.94114e-08,0.954147,0.000536316,-2.8547e-07,-5.69451e-09,0.954683,0.000535728,-3.02554e-07,3.36666e-09,0.955219,0.000535133,-2.92454e-07,-7.77208e-09,0.955753,0.000534525,-3.1577e-07,2.77216e-08,0.956288,0.000533976,-2.32605e-07,-4.35097e-08,0.956821,0.00053338,-3.63134e-07,2.7108e-08,0.957354,0.000532735,-2.8181e-07,-5.31772e-09,0.957887,0.000532156,-2.97764e-07,-5.83718e-09,0.958419,0.000531543,-3.15275e-07,2.86664e-08,0.95895,0.000530998,-2.29276e-07,-4.9224e-08,0.959481,0.000530392,-3.76948e-07,4.90201e-08,0.960011,0.000529785,-2.29887e-07,-2.76471e-08,0.96054,0.000529243,-3.12829e-07,1.96385e-09,0.961069,0.000528623,-3.06937e-07,1.97917e-08,0.961598,0.000528068,-2.47562e-07,-2.15261e-08,0.962125,0.000527508,-3.1214e-07,6.70795e-09,0.962653,0.000526904,-2.92016e-07,-5.30573e-09,0.963179,0.000526304,-3.07934e-07,1.4515e-08,0.963705,0.000525732,-2.64389e-07,6.85048e-09,0.964231,0.000525224,-2.43837e-07,-4.19169e-08,0.964756,0.00052461,-3.69588e-07,4.1608e-08,0.96528,0.000523996,-2.44764e-07,-5.30598e-09,0.965804,0.000523491,-2.60682e-07,-2.03841e-08,0.966327,0.000522908,-3.21834e-07,2.72378e-08,0.966849,0.000522346,-2.40121e-07,-2.89625e-08,0.967371,0.000521779,-3.27008e-07,2.90075e-08,0.967893,0.000521212,-2.39986e-07,-2.74629e-08,0.968414,0.00052065,-3.22374e-07,2.12396e-08,0.968934,0.000520069,-2.58656e-07,2.10922e-09,0.969454,0.000519558,-2.52328e-07,-2.96765e-08,0.969973,0.000518964,-3.41357e-07,5.6992e-08,0.970492,0.000518452,-1.70382e-07,-7.90821e-08,0.97101,0.000517874,-4.07628e-07,8.05224e-08,0.971528,0.000517301,-1.66061e-07,-6.41937e-08,0.972045,0.000516776,-3.58642e-07,5.70429e-08,0.972561,0.00051623,-1.87513e-07,-4.47686e-08,0.973077,0.00051572,-3.21819e-07,2.82237e-09,0.973593,0.000515085,-3.13352e-07,3.34792e-08,0.974108,0.000514559,-2.12914e-07,-1.75298e-08,0.974622,0.000514081,-2.65503e-07,-2.29648e-08,0.975136,0.000513481,-3.34398e-07,4.97843e-08,0.975649,0.000512961,-1.85045e-07,-5.6963e-08,0.976162,0.00051242,-3.55934e-07,5.88585e-08,0.976674,0.000511885,-1.79359e-07,-5.92616e-08,0.977185,0.000511348,-3.57143e-07,5.89785e-08,0.977696,0.000510811,-1.80208e-07,-5.74433e-08,0.978207,0.000510278,-3.52538e-07,5.15854e-08,0.978717,0.000509728,-1.97781e-07,-2.9689e-08,0.979226,0.000509243,-2.86848e-07,7.56591e-09,0.979735,0.000508692,-2.64151e-07,-5.74649e-10,0.980244,0.000508162,-2.65875e-07,-5.26732e-09,0.980752,0.000507615,-2.81677e-07,2.16439e-08,0.981259,0.000507116,-2.16745e-07,-2.17037e-08,0.981766,0.000506618,-2.81856e-07,5.56636e-09,0.982272,0.000506071,-2.65157e-07,-5.61689e-10,0.982778,0.000505539,-2.66842e-07,-3.31963e-09,0.983283,0.000504995,-2.76801e-07,1.38402e-08,0.983788,0.000504483,-2.3528e-07,7.56339e-09,0.984292,0.000504035,-2.1259e-07,-4.40938e-08,0.984796,0.000503478,-3.44871e-07,4.96026e-08,0.985299,0.000502937,-1.96064e-07,-3.51071e-08,0.985802,0.000502439,-3.01385e-07,3.12212e-08,0.986304,0.00050193,-2.07721e-07,-3.0173e-08,0.986806,0.000501424,-2.9824e-07,2.9866e-08,0.987307,0.000500917,-2.08642e-07,-2.96865e-08,0.987808,0.000500411,-2.97702e-07,2.92753e-08,0.988308,0.000499903,-2.09876e-07,-2.78101e-08,0.988807,0.0004994,-2.93306e-07,2.23604e-08,0.989307,0.000498881,-2.26225e-07,-2.02681e-09,0.989805,0.000498422,-2.32305e-07,-1.42531e-08,0.990303,0.000497915,-2.75065e-07,-5.65232e-10,0.990801,0.000497363,-2.76761e-07,1.65141e-08,0.991298,0.000496859,-2.27218e-07,-5.88639e-09,0.991795,0.000496387,-2.44878e-07,7.0315e-09,0.992291,0.000495918,-2.23783e-07,-2.22396e-08,0.992787,0.000495404,-2.90502e-07,2.23224e-08,0.993282,0.00049489,-2.23535e-07,-7.44543e-09,0.993776,0.000494421,-2.45871e-07,7.45924e-09,0.994271,0.000493951,-2.23493e-07,-2.23915e-08,0.994764,0.000493437,-2.90668e-07,2.25021e-08,0.995257,0.000492923,-2.23161e-07,-8.01218e-09,0.99575,0.000492453,-2.47198e-07,9.54669e-09,0.996242,0.000491987,-2.18558e-07,-3.01746e-08,0.996734,0.000491459,-3.09082e-07,5.1547e-08,0.997225,0.000490996,-1.54441e-07,-5.68039e-08,0.997716,0.000490517,-3.24853e-07,5.64594e-08,0.998206,0.000490036,-1.55474e-07,-4.98245e-08,0.998696,0.000489576,-3.04948e-07,2.36292e-08,0.999186,0.000489037,-2.3406e-07,1.49121e-08,0.999674,0.000488613,-1.89324e-07,-2.3673e-08,1.00016,0.000488164,-2.60343e-07,2.01754e-08,1.00065,0.000487704,-1.99816e-07,-5.70288e-08,1.00114,0.000487133,-3.70903e-07,8.87303e-08,1.00162,0.000486657,-1.04712e-07,-5.94737e-08,1.00211,0.000486269,-2.83133e-07,2.99553e-08,1.0026,0.000485793,-1.93267e-07,-6.03474e-08,1.00308,0.000485225,-3.74309e-07,9.2225e-08,1.00357,0.000484754,-9.76345e-08,-7.0134e-08,1.00405,0.000484348,-3.08036e-07,6.91016e-08,1.00454,0.000483939,-1.00731e-07,-8.70633e-08,1.00502,0.000483476,-3.61921e-07,4.07328e-08,1.0055,0.000482875,-2.39723e-07,4.33413e-08,1.00599,0.000482525,-1.09699e-07,-9.48886e-08,1.00647,0.000482021,-3.94365e-07,9.77947e-08,1.00695,0.000481526,-1.00981e-07,-5.78713e-08,1.00743,0.00048115,-2.74595e-07,1.44814e-08,1.00791,0.000480645,-2.31151e-07,-5.42665e-11,1.00839,0.000480182,-2.31314e-07,-1.42643e-08,1.00887,0.000479677,-2.74106e-07,5.71115e-08,1.00935,0.0004793,-1.02772e-07,-9.49724e-08,1.00983,0.000478809,-3.87689e-07,8.43596e-08,1.01031,0.000478287,-1.3461e-07,-4.04755e-09,1.01079,0.000478006,-1.46753e-07,-6.81694e-08,1.01127,0.000477508,-3.51261e-07,3.83067e-08,1.01174,0.00047692,-2.36341e-07,3.41521e-08,1.01222,0.00047655,-1.33885e-07,-5.57058e-08,1.0127,0.000476115,-3.01002e-07,6.94616e-08,1.01317,0.000475721,-9.26174e-08,-1.02931e-07,1.01365,0.000475227,-4.01412e-07,1.03846e-07,1.01412,0.000474736,-8.98751e-08,-7.40321e-08,1.0146,0.000474334,-3.11971e-07,7.30735e-08,1.01507,0.00047393,-9.27508e-08,-9.90527e-08,1.01554,0.000473447,-3.89909e-07,8.47188e-08,1.01602,0.000472921,-1.35753e-07,-1.40381e-09,1.01649,0.000472645,-1.39964e-07,-7.91035e-08,1.01696,0.000472128,-3.77275e-07,7.93993e-08,1.01744,0.000471612,-1.39077e-07,-7.52607e-11,1.01791,0.000471334,-1.39302e-07,-7.90983e-08,1.01838,0.000470818,-3.76597e-07,7.80499e-08,1.01885,0.000470299,-1.42448e-07,5.31733e-09,1.01932,0.00047003,-1.26496e-07,-9.93193e-08,1.01979,0.000469479,-4.24453e-07,1.53541e-07,1.02026,0.00046909,3.617e-08,-1.57217e-07,1.02073,0.000468691,-4.35482e-07,1.177e-07,1.02119,0.000468173,-8.23808e-08,-7.51659e-08,1.02166,0.000467783,-3.07878e-07,6.37538e-08,1.02213,0.000467358,-1.16617e-07,-6.064e-08,1.0226,0.000466943,-2.98537e-07,5.9597e-08,1.02306,0.000466525,-1.19746e-07,-5.85386e-08,1.02353,0.00046611,-2.95362e-07,5.53482e-08,1.024,0.000465685,-1.29317e-07,-4.36449e-08,1.02446,0.000465296,-2.60252e-07,2.20268e-11,1.02493,0.000464775,-2.60186e-07,4.35568e-08,1.02539,0.000464386,-1.29516e-07,-5.50398e-08,1.02586,0.000463961,-2.94635e-07,5.73932e-08,1.02632,0.000463544,-1.22456e-07,-5.53236e-08,1.02678,0.000463133,-2.88426e-07,4.46921e-08,1.02725,0.000462691,-1.5435e-07,-4.23534e-09,1.02771,0.000462369,-1.67056e-07,-2.77507e-08,1.02817,0.000461952,-2.50308e-07,-3.97101e-09,1.02863,0.000461439,-2.62221e-07,4.36348e-08,1.02909,0.000461046,-1.31317e-07,-5.13589e-08,1.02955,0.000460629,-2.85394e-07,4.25913e-08,1.03001,0.000460186,-1.5762e-07,2.0285e-10,1.03047,0.000459871,-1.57011e-07,-4.34027e-08,1.03093,0.000459427,-2.87219e-07,5.41987e-08,1.03139,0.000459015,-1.24623e-07,-5.4183e-08,1.03185,0.000458604,-2.87172e-07,4.33239e-08,1.03231,0.000458159,-1.572e-07,9.65817e-11,1.03277,0.000457845,-1.56911e-07,-4.37103e-08,1.03323,0.0004574,-2.88041e-07,5.55351e-08,1.03368,0.000456991,-1.21436e-07,-5.9221e-08,1.03414,0.00045657,-2.99099e-07,6.21394e-08,1.0346,0.000456158,-1.1268e-07,-7.01275e-08,1.03505,0.000455723,-3.23063e-07,9.91614e-08,1.03551,0.000455374,-2.55788e-08,-8.80996e-08,1.03596,0.000455058,-2.89878e-07,1.48184e-08,1.03642,0.000454523,-2.45422e-07,2.88258e-08,1.03687,0.000454119,-1.58945e-07,-1.09125e-08,1.03733,0.000453768,-1.91682e-07,1.48241e-08,1.03778,0.000453429,-1.4721e-07,-4.83838e-08,1.03823,0.00045299,-2.92361e-07,5.95019e-08,1.03869,0.000452584,-1.13856e-07,-7.04146e-08,1.03914,0.000452145,-3.25099e-07,1.02947e-07,1.03959,0.000451803,-1.62583e-08,-1.02955e-07,1.04004,0.000451462,-3.25123e-07,7.04544e-08,1.04049,0.000451023,-1.1376e-07,-5.96534e-08,1.04094,0.000450616,-2.9272e-07,4.89499e-08,1.04139,0.000450178,-1.45871e-07,-1.69369e-08,1.04184,0.000449835,-1.96681e-07,1.87977e-08,1.04229,0.000449498,-1.40288e-07,-5.82539e-08,1.04274,0.000449043,-3.1505e-07,9.50087e-08,1.04319,0.000448698,-3.00238e-08,-8.33623e-08,1.04364,0.000448388,-2.80111e-07,2.20363e-11,1.04409,0.000447828,-2.80045e-07,8.32742e-08,1.04454,0.000447517,-3.02221e-08,-9.47002e-08,1.04498,0.000447173,-3.14323e-07,5.7108e-08,1.04543,0.000446716,-1.42999e-07,-1.45225e-08,1.04588,0.000446386,-1.86566e-07,9.82022e-10,1.04632,0.000446016,-1.8362e-07,1.05944e-08,1.04677,0.00044568,-1.51837e-07,-4.33597e-08,1.04721,0.000445247,-2.81916e-07,4.36352e-08,1.04766,0.000444814,-1.51011e-07,-1.19717e-08,1.0481,0.000444476,-1.86926e-07,4.25158e-09,1.04855,0.000444115,-1.74171e-07,-5.03461e-09,1.04899,0.000443751,-1.89275e-07,1.58868e-08,1.04944,0.00044342,-1.41614e-07,-5.85127e-08,1.04988,0.000442961,-3.17152e-07,9.89548e-08,1.05032,0.000442624,-2.0288e-08,-9.88878e-08,1.05076,0.000442287,-3.16951e-07,5.81779e-08,1.05121,0.000441827,-1.42418e-07,-1.46144e-08,1.05165,0.000441499,-1.86261e-07,2.79892e-10,1.05209,0.000441127,-1.85421e-07,1.34949e-08,1.05253,0.000440797,-1.44937e-07,-5.42594e-08,1.05297,0.000440344,-3.07715e-07,8.43335e-08,1.05341,0.000439982,-5.47146e-08,-4.46558e-08,1.05385,0.000439738,-1.88682e-07,-2.49193e-08,1.05429,0.000439286,-2.6344e-07,2.5124e-08,1.05473,0.000438835,-1.88068e-07,4.36328e-08,1.05517,0.000438589,-5.71699e-08,-8.04459e-08,1.05561,0.000438234,-2.98508e-07,3.97324e-08,1.05605,0.000437756,-1.79311e-07,4.07258e-08,1.05648,0.000437519,-5.71332e-08,-8.34263e-08,1.05692,0.000437155,-3.07412e-07,5.45608e-08,1.05736,0.000436704,-1.4373e-07,-1.56078e-08,1.05779,0.000436369,-1.90553e-07,7.87043e-09,1.05823,0.000436012,-1.66942e-07,-1.58739e-08,1.05867,0.00043563,-2.14563e-07,5.56251e-08,1.0591,0.000435368,-4.76881e-08,-8.74172e-08,1.05954,0.000435011,-3.0994e-07,5.56251e-08,1.05997,0.000434558,-1.43064e-07,-1.58739e-08,1.06041,0.000434224,-1.90686e-07,7.87042e-09,1.06084,0.000433866,-1.67075e-07,-1.56078e-08,1.06127,0.000433485,-2.13898e-07,5.45609e-08,1.06171,0.000433221,-5.02157e-08,-8.34263e-08,1.06214,0.00043287,-3.00495e-07,4.07258e-08,1.06257,0.000432391,-1.78317e-07,3.97325e-08,1.063,0.000432154,-5.91198e-08,-8.04464e-08,1.06344,0.000431794,-3.00459e-07,4.36347e-08,1.06387,0.000431324,-1.69555e-07,2.5117e-08,1.0643,0.000431061,-9.42041e-08,-2.48934e-08,1.06473,0.000430798,-1.68884e-07,-4.47527e-08,1.06516,0.000430326,-3.03142e-07,8.46951e-08,1.06559,0.000429973,-4.90573e-08,-5.56089e-08,1.06602,0.000429708,-2.15884e-07,1.85314e-08,1.06645,0.000429332,-1.6029e-07,-1.85166e-08,1.06688,0.000428956,-2.1584e-07,5.5535e-08,1.06731,0.000428691,-4.92347e-08,-8.44142e-08,1.06774,0.000428339,-3.02477e-07,4.37032e-08,1.06816,0.000427865,-1.71368e-07,2.88107e-08,1.06859,0.000427609,-8.49356e-08,-3.97367e-08,1.06902,0.00042732,-2.04146e-07,1.09267e-08,1.06945,0.000426945,-1.71365e-07,-3.97023e-09,1.06987,0.00042659,-1.83276e-07,4.9542e-09,1.0703,0.000426238,-1.68414e-07,-1.58466e-08,1.07073,0.000425854,-2.15953e-07,5.84321e-08,1.07115,0.000425597,-4.0657e-08,-9.86725e-08,1.07158,0.00042522,-3.36674e-07,9.78392e-08,1.072,0.00042484,-4.31568e-08,-5.42658e-08,1.07243,0.000424591,-2.05954e-07,1.45377e-11,1.07285,0.000424179,-2.0591e-07,5.42076e-08,1.07328,0.00042393,-4.32877e-08,-9.76357e-08,1.0737,0.00042355,-3.36195e-07,9.79165e-08,1.07412,0.000423172,-4.24451e-08,-5.56118e-08,1.07455,0.00042292,-2.09281e-07,5.32143e-09,1.07497,0.000422518,-1.93316e-07,3.43261e-08,1.07539,0.000422234,-9.0338e-08,-2.34165e-08,1.07581,0.000421983,-1.60588e-07,-5.98692e-08,1.07623,0.000421482,-3.40195e-07,1.43684e-07,1.07666,0.000421233,9.08574e-08,-1.5724e-07,1.07708,0.000420943,-3.80862e-07,1.27647e-07,1.0775,0.000420564,2.0791e-09,-1.1493e-07,1.07792,0.000420223,-3.4271e-07,9.36534e-08,1.07834,0.000419819,-6.17499e-08,-2.12653e-08,1.07876,0.000419632,-1.25546e-07,-8.59219e-09,1.07918,0.000419355,-1.51322e-07,-6.35752e-08,1.0796,0.000418861,-3.42048e-07,1.43684e-07,1.08002,0.000418608,8.90034e-08,-1.53532e-07,1.08043,0.000418326,-3.71593e-07,1.12817e-07,1.08085,0.000417921,-3.31414e-08,-5.93184e-08,1.08127,0.000417677,-2.11097e-07,5.24697e-09,1.08169,0.00041727,-1.95356e-07,3.83305e-08,1.0821,0.000416995,-8.03642e-08,-3.93597e-08,1.08252,0.000416716,-1.98443e-07,-1.0094e-10,1.08294,0.000416319,-1.98746e-07,3.97635e-08,1.08335,0.00041604,-7.94557e-08,-3.97437e-08,1.08377,0.000415762,-1.98687e-07,1.94215e-12,1.08419,0.000415365,-1.98681e-07,3.97359e-08,1.0846,0.000415087,-7.94732e-08,-3.97362e-08,1.08502,0.000414809,-1.98682e-07,-4.31063e-13,1.08543,0.000414411,-1.98683e-07,3.97379e-08,1.08584,0.000414133,-7.94694e-08,-3.97418e-08,1.08626,0.000413855,-1.98695e-07,2.00563e-11,1.08667,0.000413458,-1.98635e-07,3.96616e-08,1.08709,0.000413179,-7.965e-08,-3.9457e-08,1.0875,0.000412902,-1.98021e-07,-1.04281e-09,1.08791,0.000412502,-2.01149e-07,4.36282e-08,1.08832,0.000412231,-7.02648e-08,-5.42608e-08,1.08874,0.000411928,-2.33047e-07,5.42057e-08,1.08915,0.000411624,-7.04301e-08,-4.33527e-08,1.08956,0.000411353,-2.00488e-07,-4.07378e-12,1.08997,0.000410952,-2.005e-07,4.3369e-08,1.09038,0.000410681,-7.03934e-08,-5.42627e-08,1.09079,0.000410378,-2.33182e-07,5.44726e-08,1.0912,0.000410075,-6.97637e-08,-4.44186e-08,1.09161,0.000409802,-2.03019e-07,3.99235e-09,1.09202,0.000409408,-1.91042e-07,2.84491e-08,1.09243,0.000409111,-1.05695e-07,1.42043e-09,1.09284,0.000408904,-1.01434e-07,-3.41308e-08,1.09325,0.000408599,-2.03826e-07,1.58937e-08,1.09366,0.000408239,-1.56145e-07,-2.94438e-08,1.09406,0.000407838,-2.44476e-07,1.01881e-07,1.09447,0.000407655,6.11676e-08,-1.39663e-07,1.09488,0.000407358,-3.57822e-07,9.91432e-08,1.09529,0.00040694,-6.03921e-08,-1.84912e-08,1.09569,0.000406764,-1.15866e-07,-2.51785e-08,1.0961,0.000406457,-1.91401e-07,-4.03115e-12,1.09651,0.000406074,-1.91413e-07,2.51947e-08,1.09691,0.000405767,-1.15829e-07,1.84346e-08,1.09732,0.00040559,-6.05254e-08,-9.89332e-08,1.09772,0.000405172,-3.57325e-07,1.3888e-07,1.09813,0.000404874,5.93136e-08,-9.8957e-08,1.09853,0.000404696,-2.37557e-07,1.853e-08,1.09894,0.000404277,-1.81968e-07,2.48372e-08,1.09934,0.000403987,-1.07456e-07,1.33047e-09,1.09975,0.000403776,-1.03465e-07,-3.01591e-08,1.10015,0.000403479,-1.93942e-07,9.66054e-11,1.10055,0.000403091,-1.93652e-07,2.97727e-08,1.10096,0.000402793,-1.04334e-07,2.19273e-11,1.10136,0.000402585,-1.04268e-07,-2.98604e-08,1.10176,0.000402287,-1.93849e-07,2.10325e-10,1.10216,0.0004019,-1.93218e-07,2.90191e-08,1.10256,0.0004016,-1.06161e-07,2.92264e-09,1.10297,0.000401397,-9.73931e-08,-4.07096e-08,1.10337,0.00040108,-2.19522e-07,4.07067e-08,1.10377,0.000400763,-9.7402e-08,-2.90783e-09,1.10417,0.000400559,-1.06126e-07,-2.90754e-08,1.10457,0.00040026,-1.93352e-07,9.00021e-14,1.10497,0.000399873,-1.93351e-07,2.9075e-08,1.10537,0.000399574,-1.06126e-07,2.90902e-09,1.10577,0.00039937,-9.73992e-08,-4.07111e-08,1.10617,0.000399053,-2.19533e-07,4.07262e-08,1.10657,0.000398736,-9.73541e-08,-2.98424e-09,1.10697,0.000398533,-1.06307e-07,-2.87892e-08,1.10736,0.000398234,-1.92674e-07,-1.06824e-09,1.10776,0.000397845,-1.95879e-07,3.30622e-08,1.10816,0.000397552,-9.66926e-08,-1.19712e-08,1.10856,0.000397323,-1.32606e-07,1.48225e-08,1.10895,0.000397102,-8.81387e-08,-4.73187e-08,1.10935,0.000396784,-2.30095e-07,5.52429e-08,1.10975,0.00039649,-6.4366e-08,-5.44437e-08,1.11014,0.000396198,-2.27697e-07,4.33226e-08,1.11054,0.000395872,-9.77293e-08,3.62656e-10,1.11094,0.000395678,-9.66414e-08,-4.47732e-08,1.11133,0.00039535,-2.30961e-07,5.95208e-08,1.11173,0.000395067,-5.23985e-08,-7.41008e-08,1.11212,0.00039474,-2.74701e-07,1.17673e-07,1.11252,0.000394543,7.83181e-08,-1.58172e-07,1.11291,0.000394225,-3.96199e-07,1.57389e-07,1.1133,0.000393905,7.59679e-08,-1.13756e-07,1.1137,0.000393716,-2.653e-07,5.92165e-08,1.11409,0.000393363,-8.76507e-08,-3.90074e-09,1.11449,0.000393176,-9.93529e-08,-4.36136e-08,1.11488,0.000392846,-2.30194e-07,5.91457e-08,1.11527,0.000392563,-5.27564e-08,-7.376e-08,1.11566,0.000392237,-2.74037e-07,1.16685e-07,1.11606,0.000392039,7.60189e-08,-1.54562e-07,1.11645,0.000391727,-3.87667e-07,1.43935e-07,1.11684,0.000391384,4.4137e-08,-6.35487e-08,1.11723,0.000391281,-1.46509e-07,-8.94896e-09,1.11762,0.000390961,-1.73356e-07,-1.98647e-08,1.11801,0.000390555,-2.3295e-07,8.8408e-08,1.1184,0.000390354,3.22736e-08,-9.53486e-08,1.11879,0.000390133,-2.53772e-07,5.45677e-08,1.11918,0.000389789,-9.0069e-08,-3.71296e-09,1.11957,0.000389598,-1.01208e-07,-3.97159e-08,1.11996,0.000389276,-2.20355e-07,4.33671e-08,1.12035,0.000388966,-9.02542e-08,-1.45431e-08,1.12074,0.000388741,-1.33883e-07,1.48052e-08,1.12113,0.000388518,-8.94678e-08,-4.46778e-08,1.12152,0.000388205,-2.23501e-07,4.46966e-08,1.12191,0.000387892,-8.94114e-08,-1.48992e-08,1.12229,0.000387669,-1.34109e-07,1.49003e-08,1.12268,0.000387445,-8.94082e-08,-4.47019e-08,1.12307,0.000387132,-2.23514e-07,4.4698e-08,1.12345,0.000386819,-8.942e-08,-1.48806e-08,1.12384,0.000386596,-1.34062e-07,1.48245e-08,1.12423,0.000386372,-8.95885e-08,-4.44172e-08,1.12461,0.00038606,-2.2284e-07,4.36351e-08,1.125,0.000385745,-9.19348e-08,-1.09139e-08,1.12539,0.000385528,-1.24677e-07,2.05584e-11,1.12577,0.000385279,-1.24615e-07,1.08317e-08,1.12616,0.000385062,-9.21198e-08,-4.33473e-08,1.12654,0.000384748,-2.22162e-07,4.33481e-08,1.12693,0.000384434,-9.21174e-08,-1.08356e-08,1.12731,0.000384217,-1.24624e-07,-5.50907e-12,1.12769,0.000383968,-1.24641e-07,1.08577e-08,1.12808,0.000383751,-9.20679e-08,-4.34252e-08,1.12846,0.000383437,-2.22343e-07,4.36337e-08,1.12884,0.000383123,-9.14422e-08,-1.19005e-08,1.12923,0.000382904,-1.27144e-07,3.96813e-09,1.12961,0.000382662,-1.15239e-07,-3.97207e-09,1.12999,0.000382419,-1.27155e-07,1.19201e-08,1.13038,0.000382201,-9.1395e-08,-4.37085e-08,1.13076,0.000381887,-2.2252e-07,4.37046e-08,1.13114,0.000381573,-9.14068e-08,-1.19005e-08,1.13152,0.000381355,-1.27108e-07,3.89734e-09,1.1319,0.000381112,-1.15416e-07,-3.68887e-09,1.13228,0.00038087,-1.26483e-07,1.08582e-08,1.13266,0.00038065,-9.39083e-08,-3.97438e-08,1.13304,0.000380343,-2.1314e-07,2.89076e-08,1.13342,0.000380003,-1.26417e-07,4.33225e-08,1.1338,0.00037988,3.55072e-09,-8.29883e-08,1.13418,0.000379638,-2.45414e-07,5.0212e-08,1.13456,0.000379298,-9.47781e-08,1.34964e-09,1.13494,0.000379113,-9.07292e-08,-5.56105e-08,1.13532,0.000378764,-2.57561e-07,1.01883e-07,1.1357,0.000378555,4.80889e-08,-1.13504e-07,1.13608,0.000378311,-2.92423e-07,1.13713e-07,1.13646,0.000378067,4.87176e-08,-1.02931e-07,1.13683,0.000377856,-2.60076e-07,5.95923e-08,1.13721,0.000377514,-8.12988e-08,-1.62288e-08,1.13759,0.000377303,-1.29985e-07,5.32278e-09,1.13797,0.000377059,-1.14017e-07,-5.06237e-09,1.13834,0.000376816,-1.29204e-07,1.49267e-08,1.13872,0.000376602,-8.44237e-08,-5.46444e-08,1.1391,0.000376269,-2.48357e-07,8.44417e-08,1.13947,0.000376026,4.96815e-09,-4.47039e-08,1.13985,0.000375902,-1.29143e-07,-2.48355e-08,1.14023,0.000375569,-2.0365e-07,2.48368e-08,1.1406,0.000375236,-1.2914e-07,4.46977e-08,1.14098,0.000375112,4.95341e-09,-8.44184e-08,1.14135,0.000374869,-2.48302e-07,5.45572e-08,1.14173,0.000374536,-8.463e-08,-1.46013e-08,1.1421,0.000374323,-1.28434e-07,3.8478e-09,1.14247,0.000374077,-1.1689e-07,-7.89941e-10,1.14285,0.000373841,-1.1926e-07,-6.88042e-10,1.14322,0.0003736,-1.21324e-07,3.54213e-09,1.1436,0.000373368,-1.10698e-07,-1.34805e-08,1.14397,0.000373107,-1.51139e-07,5.03798e-08,1.14434,0.000372767,0.,0.};$/;"	m	namespace:cv::cuda::device::color_detail
c_LabCbrtTab	cudev/functional/detail/color_cvt.hpp	/^    __constant__ float c_LabCbrtTab[] = {0.137931,0.0114066,0.,1.18859e-07,0.149338,0.011407,3.56578e-07,-5.79396e-07,0.160745,0.0114059,-1.38161e-06,2.16892e-06,0.172151,0.0114097,5.12516e-06,-8.0814e-06,0.183558,0.0113957,-1.9119e-05,3.01567e-05,0.194965,0.0114479,7.13509e-05,-0.000112545,0.206371,0.011253,-0.000266285,-0.000106493,0.217252,0.0104009,-0.000585765,7.32149e-05,0.22714,0.00944906,-0.00036612,1.21917e-05,0.236235,0.0087534,-0.000329545,2.01753e-05,0.244679,0.00815483,-0.000269019,1.24435e-05,0.252577,0.00765412,-0.000231689,1.05618e-05,0.26001,0.00722243,-0.000200003,8.26662e-06,0.267041,0.00684723,-0.000175203,6.76746e-06,0.27372,0.00651712,-0.000154901,5.61192e-06,0.280088,0.00622416,-0.000138065,4.67009e-06,0.286179,0.00596204,-0.000124055,3.99012e-06,0.292021,0.0057259,-0.000112085,3.36032e-06,0.297638,0.00551181,-0.000102004,2.95338e-06,0.30305,0.00531666,-9.31435e-05,2.52875e-06,0.308277,0.00513796,-8.55572e-05,2.22022e-06,0.313331,0.00497351,-7.88966e-05,1.97163e-06,0.318228,0.00482163,-7.29817e-05,1.7248e-06,0.322978,0.00468084,-6.78073e-05,1.55998e-06,0.327593,0.0045499,-6.31274e-05,1.36343e-06,0.332081,0.00442774,-5.90371e-05,1.27136e-06,0.336451,0.00431348,-5.5223e-05,1.09111e-06,0.34071,0.00420631,-5.19496e-05,1.0399e-06,0.344866,0.00410553,-4.88299e-05,9.18347e-07,0.348923,0.00401062,-4.60749e-05,8.29942e-07,0.352889,0.00392096,-4.35851e-05,7.98478e-07,0.356767,0.00383619,-4.11896e-05,6.84917e-07,0.360562,0.00375586,-3.91349e-05,6.63976e-07,0.36428,0.00367959,-3.7143e-05,5.93086e-07,0.367923,0.00360708,-3.53637e-05,5.6976e-07,0.371495,0.00353806,-3.36544e-05,4.95533e-07,0.375,0.00347224,-3.21678e-05,4.87951e-07,0.378441,0.00340937,-3.0704e-05,4.4349e-07,0.38182,0.00334929,-2.93735e-05,4.20297e-07,0.38514,0.0032918,-2.81126e-05,3.7872e-07,0.388404,0.00323671,-2.69764e-05,3.596e-07,0.391614,0.00318384,-2.58976e-05,3.5845e-07,0.394772,0.00313312,-2.48223e-05,2.92765e-07,0.397881,0.00308435,-2.3944e-05,3.18232e-07,0.400942,0.00303742,-2.29893e-05,2.82046e-07,0.403957,0.00299229,-2.21432e-05,2.52315e-07,0.406927,0.00294876,-2.13862e-05,2.58416e-07,0.409855,0.00290676,-2.0611e-05,2.33939e-07,0.412741,0.00286624,-1.99092e-05,2.36342e-07,0.415587,0.00282713,-1.92001e-05,1.916e-07,0.418396,0.00278931,-1.86253e-05,2.1915e-07,0.421167,0.00275271,-1.79679e-05,1.83498e-07,0.423901,0.00271733,-1.74174e-05,1.79343e-07,0.426602,0.00268303,-1.68794e-05,1.72013e-07,0.429268,0.00264979,-1.63633e-05,1.75686e-07,0.431901,0.00261759,-1.58363e-05,1.3852e-07,0.434503,0.00258633,-1.54207e-05,1.64304e-07,0.437074,0.00255598,-1.49278e-05,1.28136e-07,0.439616,0.00252651,-1.45434e-05,1.57618e-07,0.442128,0.0024979,-1.40705e-05,1.0566e-07,0.444612,0.00247007,-1.37535e-05,1.34998e-07,0.447068,0.00244297,-1.33485e-05,1.29207e-07,0.449498,0.00241666,-1.29609e-05,9.32347e-08,0.451902,0.00239102,-1.26812e-05,1.23703e-07,0.45428,0.00236603,-1.23101e-05,9.74072e-08,0.456634,0.0023417,-1.20179e-05,1.12518e-07,0.458964,0.002318,-1.16803e-05,7.83681e-08,0.46127,0.00229488,-1.14452e-05,1.10452e-07,0.463554,0.00227232,-1.11139e-05,7.58719e-08,0.465815,0.00225032,-1.08863e-05,9.2699e-08,0.468055,0.00222882,-1.06082e-05,8.97738e-08,0.470273,0.00220788,-1.03388e-05,5.4845e-08,0.47247,0.00218736,-1.01743e-05,1.0808e-07,0.474648,0.00216734,-9.85007e-06,4.9277e-08,0.476805,0.00214779,-9.70224e-06,8.22408e-08,0.478943,0.00212863,-9.45551e-06,6.87942e-08,0.481063,0.00210993,-9.24913e-06,5.98144e-08,0.483163,0.00209161,-9.06969e-06,7.93789e-08,0.485246,0.00207371,-8.83155e-06,3.99032e-08,0.487311,0.00205616,-8.71184e-06,8.88325e-08,0.489358,0.002039,-8.44534e-06,2.20004e-08,0.491389,0.00202218,-8.37934e-06,9.13872e-08,0.493403,0.0020057,-8.10518e-06,2.96829e-08,0.495401,0.00198957,-8.01613e-06,5.81028e-08,0.497382,0.00197372,-7.84183e-06,6.5731e-08,0.499348,0.00195823,-7.64463e-06,3.66019e-08,0.501299,0.00194305,-7.53483e-06,2.62811e-08,0.503234,0.00192806,-7.45598e-06,9.66907e-08,0.505155,0.00191344,-7.16591e-06,4.18928e-09,0.507061,0.00189912,-7.15334e-06,6.53665e-08,0.508953,0.00188501,-6.95724e-06,3.23686e-08,0.510831,0.00187119,-6.86014e-06,4.35774e-08,0.512696,0.0018576,-6.72941e-06,3.17406e-08,0.514547,0.00184424,-6.63418e-06,6.78785e-08,0.516384,0.00183117,-6.43055e-06,-5.23126e-09,0.518209,0.0018183,-6.44624e-06,7.22562e-08,0.520021,0.00180562,-6.22947e-06,1.42292e-08,0.52182,0.0017932,-6.18679e-06,4.9641e-08,0.523607,0.00178098,-6.03786e-06,2.56259e-08,0.525382,0.00176898,-5.96099e-06,2.66696e-08,0.527145,0.00175714,-5.88098e-06,4.65094e-08,0.528897,0.00174552,-5.74145e-06,2.57114e-08,0.530637,0.00173411,-5.66431e-06,2.94588e-08,0.532365,0.00172287,-5.57594e-06,3.52667e-08,0.534082,0.00171182,-5.47014e-06,8.28868e-09,0.535789,0.00170091,-5.44527e-06,5.07871e-08,0.537484,0.00169017,-5.29291e-06,2.69817e-08,0.539169,0.00167967,-5.21197e-06,2.01009e-08,0.540844,0.0016693,-5.15166e-06,1.18237e-08,0.542508,0.00165903,-5.11619e-06,5.18135e-08,0.544162,0.00164896,-4.96075e-06,1.9341e-08,0.545806,0.00163909,-4.90273e-06,-9.96867e-09,0.54744,0.00162926,-4.93263e-06,8.01382e-08,0.549064,0.00161963,-4.69222e-06,-1.25601e-08,0.550679,0.00161021,-4.7299e-06,2.97067e-08,0.552285,0.00160084,-4.64078e-06,1.29426e-08,0.553881,0.0015916,-4.60195e-06,3.77327e-08,0.555468,0.00158251,-4.48875e-06,1.49412e-08,0.557046,0.00157357,-4.44393e-06,2.17118e-08,0.558615,0.00156475,-4.3788e-06,1.74206e-08,0.560176,0.00155605,-4.32653e-06,2.78152e-08,0.561727,0.00154748,-4.24309e-06,-9.47239e-09,0.563271,0.00153896,-4.27151e-06,6.9679e-08,0.564805,0.00153063,-4.06247e-06,-3.08246e-08,0.566332,0.00152241,-4.15494e-06,5.36188e-08,0.56785,0.00151426,-3.99409e-06,-4.83594e-09,0.56936,0.00150626,-4.00859e-06,2.53293e-08,0.570863,0.00149832,-3.93261e-06,2.27286e-08,0.572357,0.00149052,-3.86442e-06,2.96541e-09,0.573844,0.0014828,-3.85552e-06,2.50147e-08,0.575323,0.00147516,-3.78048e-06,1.61842e-08,0.576794,0.00146765,-3.73193e-06,2.94582e-08,0.578258,0.00146028,-3.64355e-06,-1.48076e-08,0.579715,0.00145295,-3.68798e-06,2.97724e-08,0.581164,0.00144566,-3.59866e-06,1.49272e-08,0.582606,0.00143851,-3.55388e-06,2.97285e-08,0.584041,0.00143149,-3.46469e-06,-1.46323e-08,0.585469,0.00142451,-3.50859e-06,2.88004e-08,0.58689,0.00141758,-3.42219e-06,1.864e-08,0.588304,0.00141079,-3.36627e-06,1.58482e-08,0.589712,0.00140411,-3.31872e-06,-2.24279e-08,0.591112,0.00139741,-3.38601e-06,7.38639e-08,0.592507,0.00139085,-3.16441e-06,-3.46088e-08,0.593894,0.00138442,-3.26824e-06,4.96675e-09,0.595275,0.0013779,-3.25334e-06,7.4346e-08,0.59665,0.00137162,-3.0303e-06,-6.39319e-08,0.598019,0.00136536,-3.2221e-06,6.21725e-08,0.599381,0.00135911,-3.03558e-06,-5.94423e-09,0.600737,0.00135302,-3.05341e-06,2.12091e-08,0.602087,0.00134697,-2.98979e-06,-1.92876e-08,0.603431,0.00134094,-3.04765e-06,5.5941e-08,0.604769,0.00133501,-2.87983e-06,-2.56622e-08,0.606101,0.00132917,-2.95681e-06,4.67078e-08,0.607427,0.0013234,-2.81669e-06,-4.19592e-08,0.608748,0.00131764,-2.94257e-06,6.15243e-08,0.610062,0.00131194,-2.75799e-06,-2.53244e-08,0.611372,0.00130635,-2.83397e-06,3.97739e-08,0.612675,0.0013008,-2.71465e-06,-1.45618e-08,0.613973,0.00129533,-2.75833e-06,1.84733e-08,0.615266,0.00128986,-2.70291e-06,2.73606e-10,0.616553,0.00128446,-2.70209e-06,4.00367e-08,0.617835,0.00127918,-2.58198e-06,-4.12113e-08,0.619111,0.00127389,-2.70561e-06,6.52039e-08,0.620383,0.00126867,-2.51e-06,-4.07901e-08,0.621649,0.00126353,-2.63237e-06,3.83516e-08,0.62291,0.00125838,-2.51732e-06,6.59315e-09,0.624166,0.00125337,-2.49754e-06,-5.11939e-09,0.625416,0.00124836,-2.5129e-06,1.38846e-08,0.626662,0.00124337,-2.47124e-06,9.18514e-09,0.627903,0.00123846,-2.44369e-06,8.97952e-09,0.629139,0.0012336,-2.41675e-06,1.45012e-08,0.63037,0.00122881,-2.37325e-06,-7.37949e-09,0.631597,0.00122404,-2.39538e-06,1.50169e-08,0.632818,0.00121929,-2.35033e-06,6.91648e-09,0.634035,0.00121461,-2.32958e-06,1.69219e-08,0.635248,0.00121,-2.27882e-06,-1.49997e-08,0.636455,0.0012054,-2.32382e-06,4.30769e-08,0.637659,0.00120088,-2.19459e-06,-3.80986e-08,0.638857,0.00119638,-2.30888e-06,4.97134e-08,0.640051,0.00119191,-2.15974e-06,-4.15463e-08,0.641241,0.00118747,-2.28438e-06,5.68667e-08,0.642426,0.00118307,-2.11378e-06,-7.10641e-09,0.643607,0.00117882,-2.1351e-06,-2.8441e-08,0.644784,0.00117446,-2.22042e-06,6.12658e-08,0.645956,0.00117021,-2.03663e-06,-3.78083e-08,0.647124,0.00116602,-2.15005e-06,3.03627e-08,0.648288,0.00116181,-2.05896e-06,-2.40379e-08,0.649448,0.00115762,-2.13108e-06,6.57887e-08,0.650603,0.00115356,-1.93371e-06,-6.03028e-08,0.651755,0.00114951,-2.11462e-06,5.62134e-08,0.652902,0.00114545,-1.94598e-06,-4.53417e-08,0.654046,0.00114142,-2.082e-06,6.55489e-08,0.655185,0.00113745,-1.88536e-06,-3.80396e-08,0.656321,0.00113357,-1.99948e-06,2.70049e-08,0.657452,0.00112965,-1.91846e-06,-1.03755e-08,0.65858,0.00112578,-1.94959e-06,1.44973e-08,0.659704,0.00112192,-1.9061e-06,1.1991e-08,0.660824,0.00111815,-1.87012e-06,-2.85634e-09,0.66194,0.0011144,-1.87869e-06,-5.65782e-10,0.663053,0.00111064,-1.88039e-06,5.11947e-09,0.664162,0.0011069,-1.86503e-06,3.96924e-08,0.665267,0.00110328,-1.74595e-06,-4.46795e-08,0.666368,0.00109966,-1.87999e-06,1.98161e-08,0.667466,0.00109596,-1.82054e-06,2.502e-08,0.66856,0.00109239,-1.74548e-06,-6.86593e-10,0.669651,0.0010889,-1.74754e-06,-2.22739e-08,0.670738,0.00108534,-1.81437e-06,3.01776e-08,0.671821,0.0010818,-1.72383e-06,2.07732e-08,0.672902,0.00107841,-1.66151e-06,-5.36658e-08,0.673978,0.00107493,-1.82251e-06,7.46802e-08,0.675051,0.00107151,-1.59847e-06,-6.62411e-08,0.676121,0.00106811,-1.79719e-06,7.10748e-08,0.677188,0.00106473,-1.58397e-06,-3.92441e-08,0.678251,0.00106145,-1.7017e-06,2.62973e-08,0.679311,0.00105812,-1.62281e-06,-6.34035e-09,0.680367,0.00105486,-1.64183e-06,-9.36249e-10,0.68142,0.00105157,-1.64464e-06,1.00854e-08,0.68247,0.00104831,-1.61438e-06,2.01995e-08,0.683517,0.00104514,-1.55378e-06,-3.1279e-08,0.68456,0.00104194,-1.64762e-06,4.53114e-08,0.685601,0.00103878,-1.51169e-06,-3.07573e-08,0.686638,0.00103567,-1.60396e-06,1.81133e-08,0.687672,0.00103251,-1.54962e-06,1.79085e-08,0.688703,0.00102947,-1.49589e-06,-3.01428e-08,0.689731,0.00102639,-1.58632e-06,4.30583e-08,0.690756,0.00102334,-1.45715e-06,-2.28814e-08,0.691778,0.00102036,-1.52579e-06,-1.11373e-08,0.692797,0.00101727,-1.5592e-06,6.74305e-08,0.693812,0.00101436,-1.35691e-06,-7.97709e-08,0.694825,0.0010114,-1.59622e-06,7.28391e-08,0.695835,0.00100843,-1.37771e-06,-3.27715e-08,0.696842,0.00100558,-1.47602e-06,-1.35807e-09,0.697846,0.00100262,-1.48009e-06,3.82037e-08,0.698847,0.000999775,-1.36548e-06,-3.22474e-08,0.699846,0.000996948,-1.46223e-06,3.11809e-08,0.700841,0.000994117,-1.36868e-06,-3.28714e-08,0.701834,0.000991281,-1.4673e-06,4.07001e-08,0.702824,0.000988468,-1.3452e-06,-1.07197e-08,0.703811,0.000985746,-1.37736e-06,2.17866e-09,0.704795,0.000982998,-1.37082e-06,2.00521e-09,0.705777,0.000980262,-1.3648e-06,-1.01996e-08,0.706756,0.000977502,-1.3954e-06,3.87931e-08,0.707732,0.000974827,-1.27902e-06,-2.57632e-08,0.708706,0.000972192,-1.35631e-06,4.65513e-09,0.709676,0.000969493,-1.34235e-06,7.14257e-09,0.710645,0.00096683,-1.32092e-06,2.63791e-08,0.71161,0.000964267,-1.24178e-06,-5.30543e-08,0.712573,0.000961625,-1.40095e-06,6.66289e-08,0.713533,0.000959023,-1.20106e-06,-3.46474e-08,0.714491,0.000956517,-1.305e-06,1.23559e-08,0.715446,0.000953944,-1.26793e-06,-1.47763e-08,0.716399,0.000951364,-1.31226e-06,4.67494e-08,0.717349,0.000948879,-1.17201e-06,-5.3012e-08,0.718297,0.000946376,-1.33105e-06,4.60894e-08,0.719242,0.000943852,-1.19278e-06,-1.21366e-08,0.720185,0.00094143,-1.22919e-06,2.45673e-09,0.721125,0.000938979,-1.22182e-06,2.30966e-09,0.722063,0.000936543,-1.21489e-06,-1.16954e-08,0.722998,0.000934078,-1.24998e-06,4.44718e-08,0.723931,0.000931711,-1.11656e-06,-4.69823e-08,0.724861,0.000929337,-1.25751e-06,2.4248e-08,0.725789,0.000926895,-1.18477e-06,9.5949e-09,0.726715,0.000924554,-1.15598e-06,-3.02286e-09,0.727638,0.000922233,-1.16505e-06,2.49649e-09,0.72856,0.00091991,-1.15756e-06,-6.96321e-09,0.729478,0.000917575,-1.17845e-06,2.53564e-08,0.730395,0.000915294,-1.10238e-06,-3.48578e-08,0.731309,0.000912984,-1.20695e-06,5.44704e-08,0.732221,0.000910734,-1.04354e-06,-6.38144e-08,0.73313,0.000908455,-1.23499e-06,8.15781e-08,0.734038,0.00090623,-9.90253e-07,-8.3684e-08,0.734943,0.000903999,-1.2413e-06,7.43441e-08,0.735846,0.000901739,-1.01827e-06,-3.48787e-08,0.736746,0.000899598,-1.12291e-06,5.56596e-09,0.737645,0.000897369,-1.10621e-06,1.26148e-08,0.738541,0.000895194,-1.06837e-06,3.57935e-09,0.739435,0.000893068,-1.05763e-06,-2.69322e-08,0.740327,0.000890872,-1.13842e-06,4.45448e-08,0.741217,0.000888729,-1.00479e-06,-3.20376e-08,0.742105,0.000886623,-1.1009e-06,2.40011e-08,0.74299,0.000884493,-1.0289e-06,-4.36209e-09,0.743874,0.000882422,-1.04199e-06,-6.55268e-09,0.744755,0.000880319,-1.06164e-06,3.05728e-08,0.745634,0.000878287,-9.69926e-07,-5.61338e-08,0.746512,0.000876179,-1.13833e-06,7.4753e-08,0.747387,0.000874127,-9.14068e-07,-6.40644e-08,0.74826,0.000872106,-1.10626e-06,6.22955e-08,0.749131,0.000870081,-9.19375e-07,-6.59083e-08,0.75,0.000868044,-1.1171e-06,8.21284e-08,0.750867,0.000866056,-8.70714e-07,-8.37915e-08,0.751732,0.000864064,-1.12209e-06,7.42237e-08,0.752595,0.000862042,-8.99418e-07,-3.42894e-08,0.753456,0.00086014,-1.00229e-06,3.32955e-09,0.754315,0.000858146,-9.92297e-07,2.09712e-08,0.755173,0.000856224,-9.29384e-07,-2.76096e-08,0.756028,0.000854282,-1.01221e-06,2.98627e-08,0.756881,0.000852348,-9.22625e-07,-3.22365e-08,0.757733,0.000850406,-1.01933e-06,3.94786e-08,0.758582,0.000848485,-9.00898e-07,-6.46833e-09,0.75943,0.000846664,-9.20303e-07,-1.36052e-08,0.760275,0.000844783,-9.61119e-07,1.28447e-09,0.761119,0.000842864,-9.57266e-07,8.4674e-09,0.761961,0.000840975,-9.31864e-07,2.44506e-08,0.762801,0.000839185,-8.58512e-07,-4.6665e-08,0.763639,0.000837328,-9.98507e-07,4.30001e-08,0.764476,0.00083546,-8.69507e-07,-6.12609e-09,0.76531,0.000833703,-8.87885e-07,-1.84959e-08,0.766143,0.000831871,-9.43372e-07,2.05052e-08,0.766974,0.000830046,-8.81857e-07,-3.92026e-09,0.767803,0.000828271,-8.93618e-07,-4.82426e-09,0.768631,0.000826469,-9.0809e-07,2.32172e-08,0.769456,0.000824722,-8.38439e-07,-2.84401e-08,0.77028,0.00082296,-9.23759e-07,3.09386e-08,0.771102,0.000821205,-8.30943e-07,-3.57099e-08,0.771922,0.000819436,-9.38073e-07,5.22963e-08,0.772741,0.000817717,-7.81184e-07,-5.42658e-08,0.773558,0.000815992,-9.43981e-07,4.55579e-08,0.774373,0.000814241,-8.07308e-07,-8.75656e-09,0.775186,0.0008126,-8.33578e-07,-1.05315e-08,0.775998,0.000810901,-8.65172e-07,-8.72188e-09,0.776808,0.000809145,-8.91338e-07,4.54191e-08,0.777616,0.000807498,-7.5508e-07,-5.37454e-08,0.778423,0.000805827,-9.16317e-07,5.03532e-08,0.779228,0.000804145,-7.65257e-07,-2.84584e-08,0.780031,0.000802529,-8.50632e-07,3.87579e-09,0.780833,0.00080084,-8.39005e-07,1.29552e-08,0.781633,0.0007992,-8.00139e-07,3.90804e-09,0.782432,0.000797612,-7.88415e-07,-2.85874e-08,0.783228,0.000795949,-8.74177e-07,5.0837e-08,0.784023,0.000794353,-7.21666e-07,-5.55513e-08,0.784817,0.000792743,-8.8832e-07,5.21587e-08,0.785609,0.000791123,-7.31844e-07,-3.38744e-08,0.786399,0.000789558,-8.33467e-07,2.37342e-08,0.787188,0.000787962,-7.62264e-07,-1.45775e-09,0.787975,0.000786433,-7.66638e-07,-1.79034e-08,0.788761,0.000784846,-8.20348e-07,1.34665e-08,0.789545,0.000783246,-7.79948e-07,2.3642e-08,0.790327,0.000781757,-7.09022e-07,-4.84297e-08,0.791108,0.000780194,-8.54311e-07,5.08674e-08,0.791888,0.000778638,-7.01709e-07,-3.58303e-08,0.792666,0.000777127,-8.092e-07,3.28493e-08,0.793442,0.000775607,-7.10652e-07,-3.59624e-08,0.794217,0.000774078,-8.1854e-07,5.13959e-08,0.79499,0.000772595,-6.64352e-07,-5.04121e-08,0.795762,0.000771115,-8.15588e-07,3.10431e-08,0.796532,0.000769577,-7.22459e-07,-1.41557e-08,0.797301,0.00076809,-7.64926e-07,2.55795e-08,0.798069,0.000766636,-6.88187e-07,-2.85578e-08,0.798835,0.000765174,-7.73861e-07,2.90472e-08,0.799599,0.000763714,-6.86719e-07,-2.80262e-08,0.800362,0.000762256,-7.70798e-07,2.34531e-08,0.801123,0.000760785,-7.00438e-07,-6.18144e-09,0.801884,0.000759366,-7.18983e-07,1.27263e-09,0.802642,0.000757931,-7.15165e-07,1.09101e-09,0.803399,0.000756504,-7.11892e-07,-5.63675e-09,0.804155,0.000755064,-7.28802e-07,2.14559e-08,0.80491,0.00075367,-6.64434e-07,-2.05821e-08,0.805663,0.00075228,-7.26181e-07,1.26812e-09,0.806414,0.000750831,-7.22377e-07,1.55097e-08,0.807164,0.000749433,-6.75848e-07,-3.70216e-09,0.807913,0.00074807,-6.86954e-07,-7.0105e-10,0.80866,0.000746694,-6.89057e-07,6.5063e-09,0.809406,0.000745336,-6.69538e-07,-2.53242e-08,0.810151,0.000743921,-7.45511e-07,3.51858e-08,0.810894,0.000742535,-6.39953e-07,3.79034e-09,0.811636,0.000741267,-6.28582e-07,-5.03471e-08,0.812377,0.000739858,-7.79624e-07,7.83886e-08,0.813116,0.000738534,-5.44458e-07,-8.43935e-08,0.813854,0.000737192,-7.97638e-07,8.03714e-08,0.81459,0.000735838,-5.56524e-07,-5.82784e-08,0.815325,0.00073455,-7.31359e-07,3.35329e-08,0.816059,0.000733188,-6.3076e-07,-1.62486e-08,0.816792,0.000731878,-6.79506e-07,3.14614e-08,0.817523,0.000730613,-5.85122e-07,-4.99925e-08,0.818253,0.000729293,-7.35099e-07,4.92994e-08,0.818982,0.000727971,-5.87201e-07,-2.79959e-08,0.819709,0.000726712,-6.71189e-07,3.07959e-09,0.820435,0.000725379,-6.6195e-07,1.56777e-08,0.82116,0.000724102,-6.14917e-07,-6.18564e-09,0.821883,0.000722854,-6.33474e-07,9.06488e-09,0.822606,0.000721614,-6.06279e-07,-3.00739e-08,0.823327,0.000720311,-6.96501e-07,5.16262e-08,0.824046,0.000719073,-5.41623e-07,-5.72214e-08,0.824765,0.000717818,-7.13287e-07,5.80503e-08,0.825482,0.000716566,-5.39136e-07,-5.57703e-08,0.826198,0.00071532,-7.06447e-07,4.58215e-08,0.826912,0.000714045,-5.68983e-07,-8.30636e-09,0.827626,0.000712882,-5.93902e-07,-1.25961e-08,0.828338,0.000711656,-6.3169e-07,-9.13985e-10,0.829049,0.00071039,-6.34432e-07,1.62519e-08,0.829759,0.00070917,-5.85676e-07,-4.48904e-09,0.830468,0.000707985,-5.99143e-07,1.70418e-09,0.831175,0.000706792,-5.9403e-07,-2.32768e-09,0.831881,0.000705597,-6.01014e-07,7.60648e-09,0.832586,0.000704418,-5.78194e-07,-2.80982e-08,0.83329,0.000703177,-6.62489e-07,4.51817e-08,0.833993,0.000701988,-5.26944e-07,-3.34192e-08,0.834694,0.000700834,-6.27201e-07,2.88904e-08,0.835394,0.000699666,-5.4053e-07,-2.25378e-08,0.836093,0.000698517,-6.08143e-07,1.65589e-09,0.836791,0.000697306,-6.03176e-07,1.59142e-08,0.837488,0.000696147,-5.55433e-07,-5.70801e-09,0.838184,0.000695019,-5.72557e-07,6.91792e-09,0.838878,0.000693895,-5.51803e-07,-2.19637e-08,0.839571,0.000692725,-6.17694e-07,2.13321e-08,0.840263,0.000691554,-5.53698e-07,-3.75996e-09,0.840954,0.000690435,-5.64978e-07,-6.29219e-09,0.841644,0.000689287,-5.83855e-07,2.89287e-08,0.842333,0.000688206,-4.97068e-07,-4.98181e-08,0.843021,0.000687062,-6.46523e-07,5.11344e-08,0.843707,0.000685922,-4.9312e-07,-3.55102e-08,0.844393,0.00068483,-5.9965e-07,3.13019e-08,0.845077,0.000683724,-5.05745e-07,-3.00925e-08,0.84576,0.000682622,-5.96022e-07,2.94636e-08,0.846442,0.000681519,-5.07631e-07,-2.81572e-08,0.847123,0.000680419,-5.92103e-07,2.35606e-08,0.847803,0.000679306,-5.21421e-07,-6.48045e-09,0.848482,0.000678243,-5.40863e-07,2.36124e-09,0.849159,0.000677169,-5.33779e-07,-2.96461e-09,0.849836,0.000676092,-5.42673e-07,9.49728e-09,0.850512,0.000675035,-5.14181e-07,-3.50245e-08,0.851186,0.000673902,-6.19254e-07,7.09959e-08,0.851859,0.000672876,-4.06267e-07,-7.01453e-08,0.852532,0.000671853,-6.16703e-07,3.07714e-08,0.853203,0.000670712,-5.24388e-07,6.66423e-09,0.853873,0.000669684,-5.04396e-07,2.17629e-09,0.854542,0.000668681,-4.97867e-07,-1.53693e-08,0.855211,0.000667639,-5.43975e-07,-3.03752e-10,0.855878,0.000666551,-5.44886e-07,1.65844e-08,0.856544,0.000665511,-4.95133e-07,-6.42907e-09,0.857209,0.000664501,-5.1442e-07,9.13195e-09,0.857873,0.0006635,-4.87024e-07,-3.00987e-08,0.858536,0.000662435,-5.7732e-07,5.16584e-08,0.859198,0.000661436,-4.22345e-07,-5.73255e-08,0.859859,0.000660419,-5.94322e-07,5.84343e-08,0.860518,0.000659406,-4.19019e-07,-5.72022e-08,0.861177,0.000658396,-5.90626e-07,5.11653e-08,0.861835,0.000657368,-4.3713e-07,-2.82495e-08,0.862492,0.000656409,-5.21878e-07,2.22788e-09,0.863148,0.000655372,-5.15195e-07,1.9338e-08,0.863803,0.0006544,-4.5718e-07,-1.99754e-08,0.864457,0.000653425,-5.17107e-07,9.59024e-10,0.86511,0.000652394,-5.1423e-07,1.61393e-08,0.865762,0.000651414,-4.65812e-07,-5.91149e-09,0.866413,0.000650465,-4.83546e-07,7.50665e-09,0.867063,0.00064952,-4.61026e-07,-2.4115e-08,0.867712,0.000648526,-5.33371e-07,2.93486e-08,0.86836,0.000647547,-4.45325e-07,-3.36748e-08,0.869007,0.000646555,-5.4635e-07,4.57461e-08,0.869653,0.0006456,-4.09112e-07,-3.01002e-08,0.870298,0.000644691,-4.99412e-07,1.50501e-08,0.870942,0.000643738,-4.54262e-07,-3.01002e-08,0.871585,0.000642739,-5.44563e-07,4.57461e-08,0.872228,0.000641787,-4.07324e-07,-3.36748e-08,0.872869,0.000640871,-5.08349e-07,2.93486e-08,0.873509,0.000639943,-4.20303e-07,-2.4115e-08,0.874149,0.00063903,-4.92648e-07,7.50655e-09,0.874787,0.000638067,-4.70128e-07,-5.91126e-09,0.875425,0.000637109,-4.87862e-07,1.61385e-08,0.876062,0.000636182,-4.39447e-07,9.61961e-10,0.876697,0.000635306,-4.36561e-07,-1.99863e-08,0.877332,0.000634373,-4.9652e-07,1.93785e-08,0.877966,0.000633438,-4.38384e-07,2.07697e-09,0.878599,0.000632567,-4.32153e-07,-2.76864e-08,0.879231,0.00063162,-5.15212e-07,4.90641e-08,0.879862,0.000630737,-3.6802e-07,-4.93606e-08,0.880493,0.000629852,-5.16102e-07,2.9169e-08,0.881122,0.000628908,-4.28595e-07,-7.71083e-09,0.881751,0.000628027,-4.51727e-07,1.6744e-09,0.882378,0.000627129,-4.46704e-07,1.01317e-09,0.883005,0.000626239,-4.43665e-07,-5.72703e-09,0.883631,0.000625334,-4.60846e-07,2.1895e-08,0.884255,0.000624478,-3.95161e-07,-2.22481e-08,0.88488,0.000623621,-4.61905e-07,7.4928e-09,0.885503,0.00062272,-4.39427e-07,-7.72306e-09,0.886125,0.000621818,-4.62596e-07,2.33995e-08,0.886746,0.000620963,-3.92398e-07,-2.62704e-08,0.887367,0.000620099,-4.71209e-07,2.20775e-08,0.887987,0.000619223,-4.04976e-07,-2.43496e-09,0.888605,0.000618406,-4.12281e-07,-1.23377e-08,0.889223,0.000617544,-4.49294e-07,-7.81876e-09,0.88984,0.000616622,-4.72751e-07,4.36128e-08,0.890457,0.000615807,-3.41912e-07,-4.7423e-08,0.891072,0.000614981,-4.84181e-07,2.68698e-08,0.891687,0.000614093,-4.03572e-07,-4.51384e-10,0.8923,0.000613285,-4.04926e-07,-2.50643e-08,0.892913,0.0006124,-4.80119e-07,4.11038e-08,0.893525,0.000611563,-3.56808e-07,-2.01414e-08,0.894136,0.000610789,-4.17232e-07,-2.01426e-08,0.894747,0.000609894,-4.7766e-07,4.11073e-08,0.895356,0.000609062,-3.54338e-07,-2.50773e-08,0.895965,0.000608278,-4.2957e-07,-4.02954e-10,0.896573,0.000607418,-4.30779e-07,2.66891e-08,0.89718,0.000606636,-3.50711e-07,-4.67489e-08,0.897786,0.000605795,-4.90958e-07,4.10972e-08,0.898391,0.000604936,-3.67666e-07,1.56948e-09,0.898996,0.000604205,-3.62958e-07,-4.73751e-08,0.8996,0.000603337,-5.05083e-07,6.87214e-08,0.900202,0.000602533,-2.98919e-07,-4.86966e-08,0.900805,0.000601789,-4.45009e-07,6.85589e-09,0.901406,0.00060092,-4.24441e-07,2.1273e-08,0.902007,0.000600135,-3.60622e-07,-3.23434e-08,0.902606,0.000599317,-4.57652e-07,4.84959e-08,0.903205,0.000598547,-3.12164e-07,-4.24309e-08,0.903803,0.000597795,-4.39457e-07,2.01844e-09,0.904401,0.000596922,-4.33402e-07,3.43571e-08,0.904997,0.000596159,-3.30331e-07,-2.02374e-08,0.905593,0.000595437,-3.91043e-07,-1.30123e-08,0.906188,0.000594616,-4.3008e-07,1.26819e-08,0.906782,0.000593794,-3.92034e-07,2.18894e-08,0.907376,0.000593076,-3.26366e-07,-4.06349e-08,0.907968,0.000592301,-4.4827e-07,2.1441e-08,0.90856,0.000591469,-3.83947e-07,1.44754e-08,0.909151,0.000590744,-3.40521e-07,-1.97379e-08,0.909742,0.000590004,-3.99735e-07,4.87161e-09,0.910331,0.000589219,-3.8512e-07,2.51532e-10,0.91092,0.00058845,-3.84366e-07,-5.87776e-09,0.911508,0.000587663,-4.01999e-07,2.32595e-08,0.912096,0.000586929,-3.3222e-07,-2.75554e-08,0.912682,0.000586182,-4.14887e-07,2.73573e-08,0.913268,0.000585434,-3.32815e-07,-2.22692e-08,0.913853,0.000584702,-3.99622e-07,2.11486e-09,0.914437,0.000583909,-3.93278e-07,1.38098e-08,0.915021,0.000583164,-3.51848e-07,2.25042e-09,0.915604,0.000582467,-3.45097e-07,-2.28115e-08,0.916186,0.000581708,-4.13531e-07,2.93911e-08,0.916767,0.000580969,-3.25358e-07,-3.51481e-08,0.917348,0.000580213,-4.30803e-07,5.15967e-08,0.917928,0.000579506,-2.76012e-07,-5.20296e-08,0.918507,0.000578798,-4.32101e-07,3.73124e-08,0.919085,0.000578046,-3.20164e-07,-3.76154e-08,0.919663,0.000577293,-4.3301e-07,5.35447e-08,0.92024,0.000576587,-2.72376e-07,-5.7354e-08,0.920816,0.000575871,-4.44438e-07,5.66621e-08,0.921391,0.000575152,-2.74452e-07,-5.00851e-08,0.921966,0.000574453,-4.24707e-07,2.4469e-08,0.92254,0.000573677,-3.513e-07,1.18138e-08,0.923114,0.000573009,-3.15859e-07,-1.21195e-08,0.923686,0.000572341,-3.52217e-07,-2.29403e-08,0.924258,0.000571568,-4.21038e-07,4.4276e-08,0.924829,0.000570859,-2.8821e-07,-3.49546e-08,0.9254,0.000570178,-3.93074e-07,3.59377e-08,0.92597,0.000569499,-2.85261e-07,-4.91915e-08,0.926539,0.000568781,-4.32835e-07,4.16189e-08,0.927107,0.00056804,-3.07979e-07,1.92523e-09,0.927675,0.00056743,-3.02203e-07,-4.93198e-08,0.928242,0.000566678,-4.50162e-07,7.61447e-08,0.928809,0.000566006,-2.21728e-07,-7.6445e-08,0.929374,0.000565333,-4.51063e-07,5.08216e-08,0.929939,0.000564583,-2.98599e-07,-7.63212e-09,0.930503,0.000563963,-3.21495e-07,-2.02931e-08,0.931067,0.000563259,-3.82374e-07,2.92001e-08,0.93163,0.000562582,-2.94774e-07,-3.69025e-08,0.932192,0.000561882,-4.05482e-07,5.88053e-08,0.932754,0.000561247,-2.29066e-07,-7.91094e-08,0.933315,0.000560552,-4.66394e-07,7.88184e-08,0.933875,0.000559856,-2.29939e-07,-5.73501e-08,0.934434,0.000559224,-4.01989e-07,3.13727e-08,0.934993,0.000558514,-3.07871e-07,-8.53611e-09,0.935551,0.000557873,-3.33479e-07,2.77175e-09,0.936109,0.000557214,-3.25164e-07,-2.55091e-09,0.936666,0.000556556,-3.32817e-07,7.43188e-09,0.937222,0.000555913,-3.10521e-07,-2.71766e-08,0.937778,0.00055521,-3.92051e-07,4.167e-08,0.938333,0.000554551,-2.67041e-07,-2.02941e-08,0.938887,0.000553956,-3.27923e-07,-2.00984e-08,0.93944,0.00055324,-3.88218e-07,4.10828e-08,0.939993,0.000552587,-2.6497e-07,-2.50237e-08,0.940546,0.000551982,-3.40041e-07,-5.92583e-10,0.941097,0.0005513,-3.41819e-07,2.7394e-08,0.941648,0.000550698,-2.59637e-07,-4.93788e-08,0.942199,0.000550031,-4.07773e-07,5.09119e-08,0.942748,0.000549368,-2.55038e-07,-3.50595e-08,0.943297,0.000548753,-3.60216e-07,2.97214e-08,0.943846,0.000548122,-2.71052e-07,-2.42215e-08,0.944394,0.000547507,-3.43716e-07,7.55985e-09,0.944941,0.000546842,-3.21037e-07,-6.01796e-09,0.945487,0.000546182,-3.3909e-07,1.65119e-08,0.946033,0.000545553,-2.89555e-07,-4.2498e-10,0.946578,0.000544973,-2.9083e-07,-1.4812e-08,0.947123,0.000544347,-3.35266e-07,6.83068e-11,0.947667,0.000543676,-3.35061e-07,1.45388e-08,0.94821,0.00054305,-2.91444e-07,1.38123e-09,0.948753,0.000542471,-2.87301e-07,-2.00637e-08,0.949295,0.000541836,-3.47492e-07,1.92688e-08,0.949837,0.000541199,-2.89685e-07,2.59298e-09,0.950378,0.000540628,-2.81906e-07,-2.96407e-08,0.950918,0.000539975,-3.70829e-07,5.63652e-08,0.951458,0.000539402,-2.01733e-07,-7.66107e-08,0.951997,0.000538769,-4.31565e-07,7.12638e-08,0.952535,0.00053812,-2.17774e-07,-2.96305e-08,0.953073,0.000537595,-3.06665e-07,-1.23464e-08,0.95361,0.000536945,-3.43704e-07,1.94114e-08,0.954147,0.000536316,-2.8547e-07,-5.69451e-09,0.954683,0.000535728,-3.02554e-07,3.36666e-09,0.955219,0.000535133,-2.92454e-07,-7.77208e-09,0.955753,0.000534525,-3.1577e-07,2.77216e-08,0.956288,0.000533976,-2.32605e-07,-4.35097e-08,0.956821,0.00053338,-3.63134e-07,2.7108e-08,0.957354,0.000532735,-2.8181e-07,-5.31772e-09,0.957887,0.000532156,-2.97764e-07,-5.83718e-09,0.958419,0.000531543,-3.15275e-07,2.86664e-08,0.95895,0.000530998,-2.29276e-07,-4.9224e-08,0.959481,0.000530392,-3.76948e-07,4.90201e-08,0.960011,0.000529785,-2.29887e-07,-2.76471e-08,0.96054,0.000529243,-3.12829e-07,1.96385e-09,0.961069,0.000528623,-3.06937e-07,1.97917e-08,0.961598,0.000528068,-2.47562e-07,-2.15261e-08,0.962125,0.000527508,-3.1214e-07,6.70795e-09,0.962653,0.000526904,-2.92016e-07,-5.30573e-09,0.963179,0.000526304,-3.07934e-07,1.4515e-08,0.963705,0.000525732,-2.64389e-07,6.85048e-09,0.964231,0.000525224,-2.43837e-07,-4.19169e-08,0.964756,0.00052461,-3.69588e-07,4.1608e-08,0.96528,0.000523996,-2.44764e-07,-5.30598e-09,0.965804,0.000523491,-2.60682e-07,-2.03841e-08,0.966327,0.000522908,-3.21834e-07,2.72378e-08,0.966849,0.000522346,-2.40121e-07,-2.89625e-08,0.967371,0.000521779,-3.27008e-07,2.90075e-08,0.967893,0.000521212,-2.39986e-07,-2.74629e-08,0.968414,0.00052065,-3.22374e-07,2.12396e-08,0.968934,0.000520069,-2.58656e-07,2.10922e-09,0.969454,0.000519558,-2.52328e-07,-2.96765e-08,0.969973,0.000518964,-3.41357e-07,5.6992e-08,0.970492,0.000518452,-1.70382e-07,-7.90821e-08,0.97101,0.000517874,-4.07628e-07,8.05224e-08,0.971528,0.000517301,-1.66061e-07,-6.41937e-08,0.972045,0.000516776,-3.58642e-07,5.70429e-08,0.972561,0.00051623,-1.87513e-07,-4.47686e-08,0.973077,0.00051572,-3.21819e-07,2.82237e-09,0.973593,0.000515085,-3.13352e-07,3.34792e-08,0.974108,0.000514559,-2.12914e-07,-1.75298e-08,0.974622,0.000514081,-2.65503e-07,-2.29648e-08,0.975136,0.000513481,-3.34398e-07,4.97843e-08,0.975649,0.000512961,-1.85045e-07,-5.6963e-08,0.976162,0.00051242,-3.55934e-07,5.88585e-08,0.976674,0.000511885,-1.79359e-07,-5.92616e-08,0.977185,0.000511348,-3.57143e-07,5.89785e-08,0.977696,0.000510811,-1.80208e-07,-5.74433e-08,0.978207,0.000510278,-3.52538e-07,5.15854e-08,0.978717,0.000509728,-1.97781e-07,-2.9689e-08,0.979226,0.000509243,-2.86848e-07,7.56591e-09,0.979735,0.000508692,-2.64151e-07,-5.74649e-10,0.980244,0.000508162,-2.65875e-07,-5.26732e-09,0.980752,0.000507615,-2.81677e-07,2.16439e-08,0.981259,0.000507116,-2.16745e-07,-2.17037e-08,0.981766,0.000506618,-2.81856e-07,5.56636e-09,0.982272,0.000506071,-2.65157e-07,-5.61689e-10,0.982778,0.000505539,-2.66842e-07,-3.31963e-09,0.983283,0.000504995,-2.76801e-07,1.38402e-08,0.983788,0.000504483,-2.3528e-07,7.56339e-09,0.984292,0.000504035,-2.1259e-07,-4.40938e-08,0.984796,0.000503478,-3.44871e-07,4.96026e-08,0.985299,0.000502937,-1.96064e-07,-3.51071e-08,0.985802,0.000502439,-3.01385e-07,3.12212e-08,0.986304,0.00050193,-2.07721e-07,-3.0173e-08,0.986806,0.000501424,-2.9824e-07,2.9866e-08,0.987307,0.000500917,-2.08642e-07,-2.96865e-08,0.987808,0.000500411,-2.97702e-07,2.92753e-08,0.988308,0.000499903,-2.09876e-07,-2.78101e-08,0.988807,0.0004994,-2.93306e-07,2.23604e-08,0.989307,0.000498881,-2.26225e-07,-2.02681e-09,0.989805,0.000498422,-2.32305e-07,-1.42531e-08,0.990303,0.000497915,-2.75065e-07,-5.65232e-10,0.990801,0.000497363,-2.76761e-07,1.65141e-08,0.991298,0.000496859,-2.27218e-07,-5.88639e-09,0.991795,0.000496387,-2.44878e-07,7.0315e-09,0.992291,0.000495918,-2.23783e-07,-2.22396e-08,0.992787,0.000495404,-2.90502e-07,2.23224e-08,0.993282,0.00049489,-2.23535e-07,-7.44543e-09,0.993776,0.000494421,-2.45871e-07,7.45924e-09,0.994271,0.000493951,-2.23493e-07,-2.23915e-08,0.994764,0.000493437,-2.90668e-07,2.25021e-08,0.995257,0.000492923,-2.23161e-07,-8.01218e-09,0.99575,0.000492453,-2.47198e-07,9.54669e-09,0.996242,0.000491987,-2.18558e-07,-3.01746e-08,0.996734,0.000491459,-3.09082e-07,5.1547e-08,0.997225,0.000490996,-1.54441e-07,-5.68039e-08,0.997716,0.000490517,-3.24853e-07,5.64594e-08,0.998206,0.000490036,-1.55474e-07,-4.98245e-08,0.998696,0.000489576,-3.04948e-07,2.36292e-08,0.999186,0.000489037,-2.3406e-07,1.49121e-08,0.999674,0.000488613,-1.89324e-07,-2.3673e-08,1.00016,0.000488164,-2.60343e-07,2.01754e-08,1.00065,0.000487704,-1.99816e-07,-5.70288e-08,1.00114,0.000487133,-3.70903e-07,8.87303e-08,1.00162,0.000486657,-1.04712e-07,-5.94737e-08,1.00211,0.000486269,-2.83133e-07,2.99553e-08,1.0026,0.000485793,-1.93267e-07,-6.03474e-08,1.00308,0.000485225,-3.74309e-07,9.2225e-08,1.00357,0.000484754,-9.76345e-08,-7.0134e-08,1.00405,0.000484348,-3.08036e-07,6.91016e-08,1.00454,0.000483939,-1.00731e-07,-8.70633e-08,1.00502,0.000483476,-3.61921e-07,4.07328e-08,1.0055,0.000482875,-2.39723e-07,4.33413e-08,1.00599,0.000482525,-1.09699e-07,-9.48886e-08,1.00647,0.000482021,-3.94365e-07,9.77947e-08,1.00695,0.000481526,-1.00981e-07,-5.78713e-08,1.00743,0.00048115,-2.74595e-07,1.44814e-08,1.00791,0.000480645,-2.31151e-07,-5.42665e-11,1.00839,0.000480182,-2.31314e-07,-1.42643e-08,1.00887,0.000479677,-2.74106e-07,5.71115e-08,1.00935,0.0004793,-1.02772e-07,-9.49724e-08,1.00983,0.000478809,-3.87689e-07,8.43596e-08,1.01031,0.000478287,-1.3461e-07,-4.04755e-09,1.01079,0.000478006,-1.46753e-07,-6.81694e-08,1.01127,0.000477508,-3.51261e-07,3.83067e-08,1.01174,0.00047692,-2.36341e-07,3.41521e-08,1.01222,0.00047655,-1.33885e-07,-5.57058e-08,1.0127,0.000476115,-3.01002e-07,6.94616e-08,1.01317,0.000475721,-9.26174e-08,-1.02931e-07,1.01365,0.000475227,-4.01412e-07,1.03846e-07,1.01412,0.000474736,-8.98751e-08,-7.40321e-08,1.0146,0.000474334,-3.11971e-07,7.30735e-08,1.01507,0.00047393,-9.27508e-08,-9.90527e-08,1.01554,0.000473447,-3.89909e-07,8.47188e-08,1.01602,0.000472921,-1.35753e-07,-1.40381e-09,1.01649,0.000472645,-1.39964e-07,-7.91035e-08,1.01696,0.000472128,-3.77275e-07,7.93993e-08,1.01744,0.000471612,-1.39077e-07,-7.52607e-11,1.01791,0.000471334,-1.39302e-07,-7.90983e-08,1.01838,0.000470818,-3.76597e-07,7.80499e-08,1.01885,0.000470299,-1.42448e-07,5.31733e-09,1.01932,0.00047003,-1.26496e-07,-9.93193e-08,1.01979,0.000469479,-4.24453e-07,1.53541e-07,1.02026,0.00046909,3.617e-08,-1.57217e-07,1.02073,0.000468691,-4.35482e-07,1.177e-07,1.02119,0.000468173,-8.23808e-08,-7.51659e-08,1.02166,0.000467783,-3.07878e-07,6.37538e-08,1.02213,0.000467358,-1.16617e-07,-6.064e-08,1.0226,0.000466943,-2.98537e-07,5.9597e-08,1.02306,0.000466525,-1.19746e-07,-5.85386e-08,1.02353,0.00046611,-2.95362e-07,5.53482e-08,1.024,0.000465685,-1.29317e-07,-4.36449e-08,1.02446,0.000465296,-2.60252e-07,2.20268e-11,1.02493,0.000464775,-2.60186e-07,4.35568e-08,1.02539,0.000464386,-1.29516e-07,-5.50398e-08,1.02586,0.000463961,-2.94635e-07,5.73932e-08,1.02632,0.000463544,-1.22456e-07,-5.53236e-08,1.02678,0.000463133,-2.88426e-07,4.46921e-08,1.02725,0.000462691,-1.5435e-07,-4.23534e-09,1.02771,0.000462369,-1.67056e-07,-2.77507e-08,1.02817,0.000461952,-2.50308e-07,-3.97101e-09,1.02863,0.000461439,-2.62221e-07,4.36348e-08,1.02909,0.000461046,-1.31317e-07,-5.13589e-08,1.02955,0.000460629,-2.85394e-07,4.25913e-08,1.03001,0.000460186,-1.5762e-07,2.0285e-10,1.03047,0.000459871,-1.57011e-07,-4.34027e-08,1.03093,0.000459427,-2.87219e-07,5.41987e-08,1.03139,0.000459015,-1.24623e-07,-5.4183e-08,1.03185,0.000458604,-2.87172e-07,4.33239e-08,1.03231,0.000458159,-1.572e-07,9.65817e-11,1.03277,0.000457845,-1.56911e-07,-4.37103e-08,1.03323,0.0004574,-2.88041e-07,5.55351e-08,1.03368,0.000456991,-1.21436e-07,-5.9221e-08,1.03414,0.00045657,-2.99099e-07,6.21394e-08,1.0346,0.000456158,-1.1268e-07,-7.01275e-08,1.03505,0.000455723,-3.23063e-07,9.91614e-08,1.03551,0.000455374,-2.55788e-08,-8.80996e-08,1.03596,0.000455058,-2.89878e-07,1.48184e-08,1.03642,0.000454523,-2.45422e-07,2.88258e-08,1.03687,0.000454119,-1.58945e-07,-1.09125e-08,1.03733,0.000453768,-1.91682e-07,1.48241e-08,1.03778,0.000453429,-1.4721e-07,-4.83838e-08,1.03823,0.00045299,-2.92361e-07,5.95019e-08,1.03869,0.000452584,-1.13856e-07,-7.04146e-08,1.03914,0.000452145,-3.25099e-07,1.02947e-07,1.03959,0.000451803,-1.62583e-08,-1.02955e-07,1.04004,0.000451462,-3.25123e-07,7.04544e-08,1.04049,0.000451023,-1.1376e-07,-5.96534e-08,1.04094,0.000450616,-2.9272e-07,4.89499e-08,1.04139,0.000450178,-1.45871e-07,-1.69369e-08,1.04184,0.000449835,-1.96681e-07,1.87977e-08,1.04229,0.000449498,-1.40288e-07,-5.82539e-08,1.04274,0.000449043,-3.1505e-07,9.50087e-08,1.04319,0.000448698,-3.00238e-08,-8.33623e-08,1.04364,0.000448388,-2.80111e-07,2.20363e-11,1.04409,0.000447828,-2.80045e-07,8.32742e-08,1.04454,0.000447517,-3.02221e-08,-9.47002e-08,1.04498,0.000447173,-3.14323e-07,5.7108e-08,1.04543,0.000446716,-1.42999e-07,-1.45225e-08,1.04588,0.000446386,-1.86566e-07,9.82022e-10,1.04632,0.000446016,-1.8362e-07,1.05944e-08,1.04677,0.00044568,-1.51837e-07,-4.33597e-08,1.04721,0.000445247,-2.81916e-07,4.36352e-08,1.04766,0.000444814,-1.51011e-07,-1.19717e-08,1.0481,0.000444476,-1.86926e-07,4.25158e-09,1.04855,0.000444115,-1.74171e-07,-5.03461e-09,1.04899,0.000443751,-1.89275e-07,1.58868e-08,1.04944,0.00044342,-1.41614e-07,-5.85127e-08,1.04988,0.000442961,-3.17152e-07,9.89548e-08,1.05032,0.000442624,-2.0288e-08,-9.88878e-08,1.05076,0.000442287,-3.16951e-07,5.81779e-08,1.05121,0.000441827,-1.42418e-07,-1.46144e-08,1.05165,0.000441499,-1.86261e-07,2.79892e-10,1.05209,0.000441127,-1.85421e-07,1.34949e-08,1.05253,0.000440797,-1.44937e-07,-5.42594e-08,1.05297,0.000440344,-3.07715e-07,8.43335e-08,1.05341,0.000439982,-5.47146e-08,-4.46558e-08,1.05385,0.000439738,-1.88682e-07,-2.49193e-08,1.05429,0.000439286,-2.6344e-07,2.5124e-08,1.05473,0.000438835,-1.88068e-07,4.36328e-08,1.05517,0.000438589,-5.71699e-08,-8.04459e-08,1.05561,0.000438234,-2.98508e-07,3.97324e-08,1.05605,0.000437756,-1.79311e-07,4.07258e-08,1.05648,0.000437519,-5.71332e-08,-8.34263e-08,1.05692,0.000437155,-3.07412e-07,5.45608e-08,1.05736,0.000436704,-1.4373e-07,-1.56078e-08,1.05779,0.000436369,-1.90553e-07,7.87043e-09,1.05823,0.000436012,-1.66942e-07,-1.58739e-08,1.05867,0.00043563,-2.14563e-07,5.56251e-08,1.0591,0.000435368,-4.76881e-08,-8.74172e-08,1.05954,0.000435011,-3.0994e-07,5.56251e-08,1.05997,0.000434558,-1.43064e-07,-1.58739e-08,1.06041,0.000434224,-1.90686e-07,7.87042e-09,1.06084,0.000433866,-1.67075e-07,-1.56078e-08,1.06127,0.000433485,-2.13898e-07,5.45609e-08,1.06171,0.000433221,-5.02157e-08,-8.34263e-08,1.06214,0.00043287,-3.00495e-07,4.07258e-08,1.06257,0.000432391,-1.78317e-07,3.97325e-08,1.063,0.000432154,-5.91198e-08,-8.04464e-08,1.06344,0.000431794,-3.00459e-07,4.36347e-08,1.06387,0.000431324,-1.69555e-07,2.5117e-08,1.0643,0.000431061,-9.42041e-08,-2.48934e-08,1.06473,0.000430798,-1.68884e-07,-4.47527e-08,1.06516,0.000430326,-3.03142e-07,8.46951e-08,1.06559,0.000429973,-4.90573e-08,-5.56089e-08,1.06602,0.000429708,-2.15884e-07,1.85314e-08,1.06645,0.000429332,-1.6029e-07,-1.85166e-08,1.06688,0.000428956,-2.1584e-07,5.5535e-08,1.06731,0.000428691,-4.92347e-08,-8.44142e-08,1.06774,0.000428339,-3.02477e-07,4.37032e-08,1.06816,0.000427865,-1.71368e-07,2.88107e-08,1.06859,0.000427609,-8.49356e-08,-3.97367e-08,1.06902,0.00042732,-2.04146e-07,1.09267e-08,1.06945,0.000426945,-1.71365e-07,-3.97023e-09,1.06987,0.00042659,-1.83276e-07,4.9542e-09,1.0703,0.000426238,-1.68414e-07,-1.58466e-08,1.07073,0.000425854,-2.15953e-07,5.84321e-08,1.07115,0.000425597,-4.0657e-08,-9.86725e-08,1.07158,0.00042522,-3.36674e-07,9.78392e-08,1.072,0.00042484,-4.31568e-08,-5.42658e-08,1.07243,0.000424591,-2.05954e-07,1.45377e-11,1.07285,0.000424179,-2.0591e-07,5.42076e-08,1.07328,0.00042393,-4.32877e-08,-9.76357e-08,1.0737,0.00042355,-3.36195e-07,9.79165e-08,1.07412,0.000423172,-4.24451e-08,-5.56118e-08,1.07455,0.00042292,-2.09281e-07,5.32143e-09,1.07497,0.000422518,-1.93316e-07,3.43261e-08,1.07539,0.000422234,-9.0338e-08,-2.34165e-08,1.07581,0.000421983,-1.60588e-07,-5.98692e-08,1.07623,0.000421482,-3.40195e-07,1.43684e-07,1.07666,0.000421233,9.08574e-08,-1.5724e-07,1.07708,0.000420943,-3.80862e-07,1.27647e-07,1.0775,0.000420564,2.0791e-09,-1.1493e-07,1.07792,0.000420223,-3.4271e-07,9.36534e-08,1.07834,0.000419819,-6.17499e-08,-2.12653e-08,1.07876,0.000419632,-1.25546e-07,-8.59219e-09,1.07918,0.000419355,-1.51322e-07,-6.35752e-08,1.0796,0.000418861,-3.42048e-07,1.43684e-07,1.08002,0.000418608,8.90034e-08,-1.53532e-07,1.08043,0.000418326,-3.71593e-07,1.12817e-07,1.08085,0.000417921,-3.31414e-08,-5.93184e-08,1.08127,0.000417677,-2.11097e-07,5.24697e-09,1.08169,0.00041727,-1.95356e-07,3.83305e-08,1.0821,0.000416995,-8.03642e-08,-3.93597e-08,1.08252,0.000416716,-1.98443e-07,-1.0094e-10,1.08294,0.000416319,-1.98746e-07,3.97635e-08,1.08335,0.00041604,-7.94557e-08,-3.97437e-08,1.08377,0.000415762,-1.98687e-07,1.94215e-12,1.08419,0.000415365,-1.98681e-07,3.97359e-08,1.0846,0.000415087,-7.94732e-08,-3.97362e-08,1.08502,0.000414809,-1.98682e-07,-4.31063e-13,1.08543,0.000414411,-1.98683e-07,3.97379e-08,1.08584,0.000414133,-7.94694e-08,-3.97418e-08,1.08626,0.000413855,-1.98695e-07,2.00563e-11,1.08667,0.000413458,-1.98635e-07,3.96616e-08,1.08709,0.000413179,-7.965e-08,-3.9457e-08,1.0875,0.000412902,-1.98021e-07,-1.04281e-09,1.08791,0.000412502,-2.01149e-07,4.36282e-08,1.08832,0.000412231,-7.02648e-08,-5.42608e-08,1.08874,0.000411928,-2.33047e-07,5.42057e-08,1.08915,0.000411624,-7.04301e-08,-4.33527e-08,1.08956,0.000411353,-2.00488e-07,-4.07378e-12,1.08997,0.000410952,-2.005e-07,4.3369e-08,1.09038,0.000410681,-7.03934e-08,-5.42627e-08,1.09079,0.000410378,-2.33182e-07,5.44726e-08,1.0912,0.000410075,-6.97637e-08,-4.44186e-08,1.09161,0.000409802,-2.03019e-07,3.99235e-09,1.09202,0.000409408,-1.91042e-07,2.84491e-08,1.09243,0.000409111,-1.05695e-07,1.42043e-09,1.09284,0.000408904,-1.01434e-07,-3.41308e-08,1.09325,0.000408599,-2.03826e-07,1.58937e-08,1.09366,0.000408239,-1.56145e-07,-2.94438e-08,1.09406,0.000407838,-2.44476e-07,1.01881e-07,1.09447,0.000407655,6.11676e-08,-1.39663e-07,1.09488,0.000407358,-3.57822e-07,9.91432e-08,1.09529,0.00040694,-6.03921e-08,-1.84912e-08,1.09569,0.000406764,-1.15866e-07,-2.51785e-08,1.0961,0.000406457,-1.91401e-07,-4.03115e-12,1.09651,0.000406074,-1.91413e-07,2.51947e-08,1.09691,0.000405767,-1.15829e-07,1.84346e-08,1.09732,0.00040559,-6.05254e-08,-9.89332e-08,1.09772,0.000405172,-3.57325e-07,1.3888e-07,1.09813,0.000404874,5.93136e-08,-9.8957e-08,1.09853,0.000404696,-2.37557e-07,1.853e-08,1.09894,0.000404277,-1.81968e-07,2.48372e-08,1.09934,0.000403987,-1.07456e-07,1.33047e-09,1.09975,0.000403776,-1.03465e-07,-3.01591e-08,1.10015,0.000403479,-1.93942e-07,9.66054e-11,1.10055,0.000403091,-1.93652e-07,2.97727e-08,1.10096,0.000402793,-1.04334e-07,2.19273e-11,1.10136,0.000402585,-1.04268e-07,-2.98604e-08,1.10176,0.000402287,-1.93849e-07,2.10325e-10,1.10216,0.0004019,-1.93218e-07,2.90191e-08,1.10256,0.0004016,-1.06161e-07,2.92264e-09,1.10297,0.000401397,-9.73931e-08,-4.07096e-08,1.10337,0.00040108,-2.19522e-07,4.07067e-08,1.10377,0.000400763,-9.7402e-08,-2.90783e-09,1.10417,0.000400559,-1.06126e-07,-2.90754e-08,1.10457,0.00040026,-1.93352e-07,9.00021e-14,1.10497,0.000399873,-1.93351e-07,2.9075e-08,1.10537,0.000399574,-1.06126e-07,2.90902e-09,1.10577,0.00039937,-9.73992e-08,-4.07111e-08,1.10617,0.000399053,-2.19533e-07,4.07262e-08,1.10657,0.000398736,-9.73541e-08,-2.98424e-09,1.10697,0.000398533,-1.06307e-07,-2.87892e-08,1.10736,0.000398234,-1.92674e-07,-1.06824e-09,1.10776,0.000397845,-1.95879e-07,3.30622e-08,1.10816,0.000397552,-9.66926e-08,-1.19712e-08,1.10856,0.000397323,-1.32606e-07,1.48225e-08,1.10895,0.000397102,-8.81387e-08,-4.73187e-08,1.10935,0.000396784,-2.30095e-07,5.52429e-08,1.10975,0.00039649,-6.4366e-08,-5.44437e-08,1.11014,0.000396198,-2.27697e-07,4.33226e-08,1.11054,0.000395872,-9.77293e-08,3.62656e-10,1.11094,0.000395678,-9.66414e-08,-4.47732e-08,1.11133,0.00039535,-2.30961e-07,5.95208e-08,1.11173,0.000395067,-5.23985e-08,-7.41008e-08,1.11212,0.00039474,-2.74701e-07,1.17673e-07,1.11252,0.000394543,7.83181e-08,-1.58172e-07,1.11291,0.000394225,-3.96199e-07,1.57389e-07,1.1133,0.000393905,7.59679e-08,-1.13756e-07,1.1137,0.000393716,-2.653e-07,5.92165e-08,1.11409,0.000393363,-8.76507e-08,-3.90074e-09,1.11449,0.000393176,-9.93529e-08,-4.36136e-08,1.11488,0.000392846,-2.30194e-07,5.91457e-08,1.11527,0.000392563,-5.27564e-08,-7.376e-08,1.11566,0.000392237,-2.74037e-07,1.16685e-07,1.11606,0.000392039,7.60189e-08,-1.54562e-07,1.11645,0.000391727,-3.87667e-07,1.43935e-07,1.11684,0.000391384,4.4137e-08,-6.35487e-08,1.11723,0.000391281,-1.46509e-07,-8.94896e-09,1.11762,0.000390961,-1.73356e-07,-1.98647e-08,1.11801,0.000390555,-2.3295e-07,8.8408e-08,1.1184,0.000390354,3.22736e-08,-9.53486e-08,1.11879,0.000390133,-2.53772e-07,5.45677e-08,1.11918,0.000389789,-9.0069e-08,-3.71296e-09,1.11957,0.000389598,-1.01208e-07,-3.97159e-08,1.11996,0.000389276,-2.20355e-07,4.33671e-08,1.12035,0.000388966,-9.02542e-08,-1.45431e-08,1.12074,0.000388741,-1.33883e-07,1.48052e-08,1.12113,0.000388518,-8.94678e-08,-4.46778e-08,1.12152,0.000388205,-2.23501e-07,4.46966e-08,1.12191,0.000387892,-8.94114e-08,-1.48992e-08,1.12229,0.000387669,-1.34109e-07,1.49003e-08,1.12268,0.000387445,-8.94082e-08,-4.47019e-08,1.12307,0.000387132,-2.23514e-07,4.4698e-08,1.12345,0.000386819,-8.942e-08,-1.48806e-08,1.12384,0.000386596,-1.34062e-07,1.48245e-08,1.12423,0.000386372,-8.95885e-08,-4.44172e-08,1.12461,0.00038606,-2.2284e-07,4.36351e-08,1.125,0.000385745,-9.19348e-08,-1.09139e-08,1.12539,0.000385528,-1.24677e-07,2.05584e-11,1.12577,0.000385279,-1.24615e-07,1.08317e-08,1.12616,0.000385062,-9.21198e-08,-4.33473e-08,1.12654,0.000384748,-2.22162e-07,4.33481e-08,1.12693,0.000384434,-9.21174e-08,-1.08356e-08,1.12731,0.000384217,-1.24624e-07,-5.50907e-12,1.12769,0.000383968,-1.24641e-07,1.08577e-08,1.12808,0.000383751,-9.20679e-08,-4.34252e-08,1.12846,0.000383437,-2.22343e-07,4.36337e-08,1.12884,0.000383123,-9.14422e-08,-1.19005e-08,1.12923,0.000382904,-1.27144e-07,3.96813e-09,1.12961,0.000382662,-1.15239e-07,-3.97207e-09,1.12999,0.000382419,-1.27155e-07,1.19201e-08,1.13038,0.000382201,-9.1395e-08,-4.37085e-08,1.13076,0.000381887,-2.2252e-07,4.37046e-08,1.13114,0.000381573,-9.14068e-08,-1.19005e-08,1.13152,0.000381355,-1.27108e-07,3.89734e-09,1.1319,0.000381112,-1.15416e-07,-3.68887e-09,1.13228,0.00038087,-1.26483e-07,1.08582e-08,1.13266,0.00038065,-9.39083e-08,-3.97438e-08,1.13304,0.000380343,-2.1314e-07,2.89076e-08,1.13342,0.000380003,-1.26417e-07,4.33225e-08,1.1338,0.00037988,3.55072e-09,-8.29883e-08,1.13418,0.000379638,-2.45414e-07,5.0212e-08,1.13456,0.000379298,-9.47781e-08,1.34964e-09,1.13494,0.000379113,-9.07292e-08,-5.56105e-08,1.13532,0.000378764,-2.57561e-07,1.01883e-07,1.1357,0.000378555,4.80889e-08,-1.13504e-07,1.13608,0.000378311,-2.92423e-07,1.13713e-07,1.13646,0.000378067,4.87176e-08,-1.02931e-07,1.13683,0.000377856,-2.60076e-07,5.95923e-08,1.13721,0.000377514,-8.12988e-08,-1.62288e-08,1.13759,0.000377303,-1.29985e-07,5.32278e-09,1.13797,0.000377059,-1.14017e-07,-5.06237e-09,1.13834,0.000376816,-1.29204e-07,1.49267e-08,1.13872,0.000376602,-8.44237e-08,-5.46444e-08,1.1391,0.000376269,-2.48357e-07,8.44417e-08,1.13947,0.000376026,4.96815e-09,-4.47039e-08,1.13985,0.000375902,-1.29143e-07,-2.48355e-08,1.14023,0.000375569,-2.0365e-07,2.48368e-08,1.1406,0.000375236,-1.2914e-07,4.46977e-08,1.14098,0.000375112,4.95341e-09,-8.44184e-08,1.14135,0.000374869,-2.48302e-07,5.45572e-08,1.14173,0.000374536,-8.463e-08,-1.46013e-08,1.1421,0.000374323,-1.28434e-07,3.8478e-09,1.14247,0.000374077,-1.1689e-07,-7.89941e-10,1.14285,0.000373841,-1.1926e-07,-6.88042e-10,1.14322,0.0003736,-1.21324e-07,3.54213e-09,1.1436,0.000373368,-1.10698e-07,-1.34805e-08,1.14397,0.000373107,-1.51139e-07,5.03798e-08,1.14434,0.000372767,0.,0.};$/;"	m	namespace:cv::cudev::color_cvt_detail
c_RGB2XYZ_D65f	core/cuda/detail/color_detail.hpp	/^        __constant__ float c_RGB2XYZ_D65f[9] = { 0.412453f, 0.357580f, 0.180423f, 0.212671f, 0.715160f, 0.072169f, 0.019334f, 0.119193f, 0.950227f };$/;"	m	namespace:cv::cuda::device::color_detail
c_RGB2XYZ_D65f	cudev/functional/detail/color_cvt.hpp	/^    __constant__ float c_RGB2XYZ_D65f[9] = { 0.412453f, 0.357580f, 0.180423f, 0.212671f, 0.715160f, 0.072169f, 0.019334f, 0.119193f, 0.950227f };$/;"	m	namespace:cv::cudev::color_cvt_detail
c_RGB2XYZ_D65i	core/cuda/detail/color_detail.hpp	/^        __constant__ int   c_RGB2XYZ_D65i[9] = { 1689, 1465, 739, 871, 2929, 296, 79, 488, 3892 };$/;"	m	namespace:cv::cuda::device::color_detail
c_RGB2XYZ_D65i	cudev/functional/detail/color_cvt.hpp	/^    __constant__ int   c_RGB2XYZ_D65i[9] = { 1689, 1465, 739, 871, 2929, 296, 79, 488, 3892 };$/;"	m	namespace:cv::cudev::color_cvt_detail
c_RGB2YCrCbCoeffs_f	core/cuda/detail/color_detail.hpp	/^        __constant__ float c_RGB2YCrCbCoeffs_f[5] = {0.299f, 0.587f, 0.114f, 0.713f, 0.564f};$/;"	m	namespace:cv::cuda::device::color_detail
c_RGB2YCrCbCoeffs_f	cudev/functional/detail/color_cvt.hpp	/^    __constant__ float c_RGB2YCrCbCoeffs_f[5] = { 0.299f, 0.587f, 0.114f, 0.713f, 0.564f };$/;"	m	namespace:cv::cudev::color_cvt_detail
c_RGB2YCrCbCoeffs_i	core/cuda/detail/color_detail.hpp	/^        __constant__ int   c_RGB2YCrCbCoeffs_i[5] = {R2Y, G2Y, B2Y, 11682, 9241};$/;"	m	namespace:cv::cuda::device::color_detail
c_RGB2YCrCbCoeffs_i	cudev/functional/detail/color_cvt.hpp	/^    __constant__ int   c_RGB2YCrCbCoeffs_i[5] = { R2Y, G2Y, B2Y, 11682, 9241 };$/;"	m	namespace:cv::cudev::color_cvt_detail
c_RGB2YUVCoeffs_f	core/cuda/detail/color_detail.hpp	/^        __constant__ float c_RGB2YUVCoeffs_f[5] = { 0.114f, 0.587f, 0.299f, 0.492f, 0.877f };$/;"	m	namespace:cv::cuda::device::color_detail
c_RGB2YUVCoeffs_f	cudev/functional/detail/color_cvt.hpp	/^    __constant__ float c_RGB2YUVCoeffs_f[5] = { 0.114f, 0.587f, 0.299f, 0.492f, 0.877f };$/;"	m	namespace:cv::cudev::color_cvt_detail
c_RGB2YUVCoeffs_i	core/cuda/detail/color_detail.hpp	/^        __constant__ int   c_RGB2YUVCoeffs_i[5] = { B2Y, G2Y, R2Y, 8061, 14369 };$/;"	m	namespace:cv::cuda::device::color_detail
c_RGB2YUVCoeffs_i	cudev/functional/detail/color_cvt.hpp	/^    __constant__ int   c_RGB2YUVCoeffs_i[5] = { B2Y, G2Y, R2Y, 8061, 14369 };$/;"	m	namespace:cv::cudev::color_cvt_detail
c_XYZ2sRGB_D65f	core/cuda/detail/color_detail.hpp	/^        __constant__ float c_XYZ2sRGB_D65f[9] = { 3.240479f, -1.53715f, -0.498535f, -0.969256f, 1.875991f, 0.041556f, 0.055648f, -0.204043f, 1.057311f };$/;"	m	namespace:cv::cuda::device::color_detail
c_XYZ2sRGB_D65f	cudev/functional/detail/color_cvt.hpp	/^    __constant__ float c_XYZ2sRGB_D65f[9] = { 3.240479f, -1.53715f, -0.498535f, -0.969256f, 1.875991f, 0.041556f, 0.055648f, -0.204043f, 1.057311f };$/;"	m	namespace:cv::cudev::color_cvt_detail
c_XYZ2sRGB_D65i	core/cuda/detail/color_detail.hpp	/^        __constant__ int   c_XYZ2sRGB_D65i[9] = { 13273, -6296, -2042, -3970, 7684, 170, 228, -836, 4331 };$/;"	m	namespace:cv::cuda::device::color_detail
c_XYZ2sRGB_D65i	cudev/functional/detail/color_cvt.hpp	/^    __constant__ int   c_XYZ2sRGB_D65i[9] = { 13273, -6296, -2042, -3970, 7684, 170, 228, -836, 4331 };$/;"	m	namespace:cv::cudev::color_cvt_detail
c_YCrCb2RGBCoeffs_f	core/cuda/detail/color_detail.hpp	/^        __constant__ float c_YCrCb2RGBCoeffs_f[5] = {1.403f, -0.714f, -0.344f, 1.773f};$/;"	m	namespace:cv::cuda::device::color_detail
c_YCrCb2RGBCoeffs_f	cudev/functional/detail/color_cvt.hpp	/^    __constant__ float c_YCrCb2RGBCoeffs_f[5] = {1.403f, -0.714f, -0.344f, 1.773f};$/;"	m	namespace:cv::cudev::color_cvt_detail
c_YCrCb2RGBCoeffs_i	core/cuda/detail/color_detail.hpp	/^        __constant__ int   c_YCrCb2RGBCoeffs_i[5] = {22987, -11698, -5636, 29049};$/;"	m	namespace:cv::cuda::device::color_detail
c_YCrCb2RGBCoeffs_i	cudev/functional/detail/color_cvt.hpp	/^    __constant__ int   c_YCrCb2RGBCoeffs_i[5] = {22987, -11698, -5636, 29049};$/;"	m	namespace:cv::cudev::color_cvt_detail
c_YUV2RGBCoeffs_f	core/cuda/detail/color_detail.hpp	/^        __constant__ float c_YUV2RGBCoeffs_f[5] = { 2.032f, -0.395f, -0.581f, 1.140f };$/;"	m	namespace:cv::cuda::device::color_detail
c_YUV2RGBCoeffs_f	cudev/functional/detail/color_cvt.hpp	/^    __constant__ float c_YUV2RGBCoeffs_f[5] = { 2.032f, -0.395f, -0.581f, 1.140f };$/;"	m	namespace:cv::cudev::color_cvt_detail
c_YUV2RGBCoeffs_i	core/cuda/detail/color_detail.hpp	/^        __constant__ int   c_YUV2RGBCoeffs_i[5] = { 33292, -6472, -9519, 18678 };$/;"	m	namespace:cv::cuda::device::color_detail
c_YUV2RGBCoeffs_i	cudev/functional/detail/color_cvt.hpp	/^    __constant__ int   c_YUV2RGBCoeffs_i[5] = { 33292, -6472, -9519, 18678 };$/;"	m	namespace:cv::cudev::color_cvt_detail
c_sRGBGammaTab	core/cuda/detail/color_detail.hpp	/^        __constant__ float c_sRGBGammaTab[] = {0,7.55853e-05,0.,-7.51331e-13,7.55853e-05,7.55853e-05,-2.25399e-12,3.75665e-12,0.000151171,7.55853e-05,9.01597e-12,-6.99932e-12,0.000226756,7.55853e-05,-1.1982e-11,2.41277e-12,0.000302341,7.55853e-05,-4.74369e-12,1.19001e-11,0.000377927,7.55853e-05,3.09568e-11,-2.09095e-11,0.000453512,7.55853e-05,-3.17718e-11,1.35303e-11,0.000529097,7.55853e-05,8.81905e-12,-4.10782e-12,0.000604683,7.55853e-05,-3.50439e-12,2.90097e-12,0.000680268,7.55853e-05,5.19852e-12,-7.49607e-12,0.000755853,7.55853e-05,-1.72897e-11,2.70833e-11,0.000831439,7.55854e-05,6.39602e-11,-4.26295e-11,0.000907024,7.55854e-05,-6.39282e-11,2.70193e-11,0.000982609,7.55853e-05,1.71298e-11,-7.24017e-12,0.00105819,7.55853e-05,-4.59077e-12,1.94137e-12,0.00113378,7.55853e-05,1.23333e-12,-5.25291e-13,0.00120937,7.55853e-05,-3.42545e-13,1.59799e-13,0.00128495,7.55853e-05,1.36852e-13,-1.13904e-13,0.00136054,7.55853e-05,-2.04861e-13,2.95818e-13,0.00143612,7.55853e-05,6.82594e-13,-1.06937e-12,0.00151171,7.55853e-05,-2.52551e-12,3.98166e-12,0.00158729,7.55853e-05,9.41946e-12,-1.48573e-11,0.00166288,7.55853e-05,-3.51523e-11,5.54474e-11,0.00173846,7.55854e-05,1.3119e-10,-9.0517e-11,0.00181405,7.55854e-05,-1.40361e-10,7.37899e-11,0.00188963,7.55853e-05,8.10085e-11,-8.82272e-11,0.00196522,7.55852e-05,-1.83673e-10,1.62704e-10,0.0020408,7.55853e-05,3.04438e-10,-2.13341e-10,0.00211639,7.55853e-05,-3.35586e-10,2.25e-10,0.00219197,7.55853e-05,3.39414e-10,-2.20997e-10,0.00226756,7.55853e-05,-3.23576e-10,1.93326e-10,0.00234315,7.55853e-05,2.564e-10,-8.66446e-11,0.00241873,7.55855e-05,-3.53328e-12,-7.9578e-11,0.00249432,7.55853e-05,-2.42267e-10,1.72126e-10,0.0025699,7.55853e-05,2.74111e-10,-1.43265e-10,0.00264549,7.55854e-05,-1.55683e-10,-6.47292e-11,0.00272107,7.55849e-05,-3.4987e-10,8.67842e-10,0.00279666,7.55868e-05,2.25366e-09,-3.8723e-09,0.00287224,7.55797e-05,-9.36325e-09,1.5087e-08,0.00294783,7.56063e-05,3.58978e-08,-5.69415e-08,0.00302341,7.55072e-05,-1.34927e-07,2.13144e-07,0.003099,7.58768e-05,5.04507e-07,1.38713e-07,0.00317552,7.7302e-05,9.20646e-07,-1.55186e-07,0.00325359,7.86777e-05,4.55087e-07,4.26813e-08,0.00333276,7.97159e-05,5.83131e-07,-1.06495e-08,0.00341305,8.08502e-05,5.51182e-07,3.87467e-09,0.00349446,8.19642e-05,5.62806e-07,-1.92586e-10,0.00357698,8.30892e-05,5.62228e-07,1.0866e-09,0.00366063,8.4217e-05,5.65488e-07,5.02818e-10,0.00374542,8.53494e-05,5.66997e-07,8.60211e-10,0.00383133,8.6486e-05,5.69577e-07,7.13044e-10,0.00391839,8.76273e-05,5.71716e-07,4.78527e-10,0.00400659,8.87722e-05,5.73152e-07,1.09818e-09,0.00409594,8.99218e-05,5.76447e-07,2.50964e-10,0.00418644,9.10754e-05,5.772e-07,1.15762e-09,0.00427809,9.22333e-05,5.80672e-07,2.40865e-10,0.0043709,9.33954e-05,5.81395e-07,1.13854e-09,0.00446488,9.45616e-05,5.84811e-07,3.27267e-10,0.00456003,9.57322e-05,5.85792e-07,8.1197e-10,0.00465635,9.69062e-05,5.88228e-07,6.15823e-10,0.00475384,9.80845e-05,5.90076e-07,9.15747e-10,0.00485252,9.92674e-05,5.92823e-07,3.778e-10,0.00495238,0.000100454,5.93956e-07,8.32623e-10,0.00505343,0.000101645,5.96454e-07,4.82695e-10,0.00515567,0.000102839,5.97902e-07,9.61904e-10,0.00525911,0.000104038,6.00788e-07,3.26281e-10,0.00536375,0.00010524,6.01767e-07,9.926e-10,0.00546959,0.000106447,6.04745e-07,3.59933e-10,0.00557664,0.000107657,6.05824e-07,8.2728e-10,0.0056849,0.000108871,6.08306e-07,5.21898e-10,0.00579438,0.00011009,6.09872e-07,8.10492e-10,0.00590508,0.000111312,6.12303e-07,4.27046e-10,0.00601701,0.000112538,6.13585e-07,7.40878e-10,0.00613016,0.000113767,6.15807e-07,8.00469e-10,0.00624454,0.000115001,6.18209e-07,2.48178e-10,0.00636016,0.000116238,6.18953e-07,1.00073e-09,0.00647702,0.000117479,6.21955e-07,4.05654e-10,0.00659512,0.000118724,6.23172e-07,6.36192e-10,0.00671447,0.000119973,6.25081e-07,7.74927e-10,0.00683507,0.000121225,6.27406e-07,4.54975e-10,0.00695692,0.000122481,6.28771e-07,6.64841e-10,0.00708003,0.000123741,6.30765e-07,6.10972e-10,0.00720441,0.000125004,6.32598e-07,6.16543e-10,0.00733004,0.000126271,6.34448e-07,6.48204e-10,0.00745695,0.000127542,6.36392e-07,5.15835e-10,0.00758513,0.000128816,6.3794e-07,5.48103e-10,0.00771458,0.000130094,6.39584e-07,1.01706e-09,0.00784532,0.000131376,6.42635e-07,4.0283e-11,0.00797734,0.000132661,6.42756e-07,6.84471e-10,0.00811064,0.000133949,6.4481e-07,9.47144e-10,0.00824524,0.000135241,6.47651e-07,1.83472e-10,0.00838112,0.000136537,6.48201e-07,1.11296e-09,0.00851831,0.000137837,6.5154e-07,2.13163e-11,0.0086568,0.00013914,6.51604e-07,6.64462e-10,0.00879659,0.000140445,6.53598e-07,1.04613e-09,0.00893769,0.000141756,6.56736e-07,-1.92377e-10,0.0090801,0.000143069,6.56159e-07,1.58601e-09,0.00922383,0.000144386,6.60917e-07,-5.63754e-10,0.00936888,0.000145706,6.59226e-07,1.60033e-09,0.00951524,0.000147029,6.64027e-07,-2.49543e-10,0.00966294,0.000148356,6.63278e-07,1.26043e-09,0.00981196,0.000149687,6.67059e-07,-1.35572e-10,0.00996231,0.00015102,6.66653e-07,1.14458e-09,0.010114,0.000152357,6.70086e-07,2.13864e-10,0.010267,0.000153698,6.70728e-07,7.93856e-10,0.0104214,0.000155042,6.73109e-07,3.36077e-10,0.0105771,0.000156389,6.74118e-07,6.55765e-10,0.0107342,0.000157739,6.76085e-07,7.66211e-10,0.0108926,0.000159094,6.78384e-07,4.66116e-12,0.0110524,0.000160451,6.78398e-07,1.07775e-09,0.0112135,0.000161811,6.81631e-07,3.41023e-10,0.011376,0.000163175,6.82654e-07,3.5205e-10,0.0115398,0.000164541,6.8371e-07,1.04473e-09,0.0117051,0.000165912,6.86844e-07,1.25757e-10,0.0118717,0.000167286,6.87222e-07,3.14818e-10,0.0120396,0.000168661,6.88166e-07,1.40886e-09,0.012209,0.000170042,6.92393e-07,-3.62244e-10,0.0123797,0.000171425,6.91306e-07,9.71397e-10,0.0125518,0.000172811,6.9422e-07,2.02003e-10,0.0127253,0.0001742,6.94826e-07,1.01448e-09,0.0129002,0.000175593,6.97869e-07,3.96653e-10,0.0130765,0.00017699,6.99059e-07,1.92927e-10,0.0132542,0.000178388,6.99638e-07,6.94305e-10,0.0134333,0.00017979,7.01721e-07,7.55108e-10,0.0136138,0.000181195,7.03986e-07,1.05918e-11,0.0137957,0.000182603,7.04018e-07,1.06513e-09,0.013979,0.000184015,7.07214e-07,3.85512e-10,0.0141637,0.00018543,7.0837e-07,1.86769e-10,0.0143499,0.000186848,7.0893e-07,7.30116e-10,0.0145374,0.000188268,7.11121e-07,6.17983e-10,0.0147264,0.000189692,7.12975e-07,5.23282e-10,0.0149168,0.000191119,7.14545e-07,8.28398e-11,0.0151087,0.000192549,7.14793e-07,1.0081e-09,0.0153019,0.000193981,7.17817e-07,5.41244e-10,0.0154966,0.000195418,7.19441e-07,-3.7907e-10,0.0156928,0.000196856,7.18304e-07,1.90641e-09,0.0158903,0.000198298,7.24023e-07,-7.27387e-10,0.0160893,0.000199744,7.21841e-07,1.00317e-09,0.0162898,0.000201191,7.24851e-07,4.39949e-10,0.0164917,0.000202642,7.2617e-07,9.6234e-10,0.0166951,0.000204097,7.29057e-07,-5.64019e-10,0.0168999,0.000205554,7.27365e-07,1.29374e-09,0.0171062,0.000207012,7.31247e-07,9.77025e-10,0.017314,0.000208478,7.34178e-07,-1.47651e-09,0.0175232,0.000209942,7.29748e-07,3.06636e-09,0.0177338,0.00021141,7.38947e-07,-1.47573e-09,0.017946,0.000212884,7.3452e-07,9.7386e-10,0.0181596,0.000214356,7.37442e-07,1.30562e-09,0.0183747,0.000215835,7.41358e-07,-6.08376e-10,0.0185913,0.000217315,7.39533e-07,1.12785e-09,0.0188093,0.000218798,7.42917e-07,-1.77711e-10,0.0190289,0.000220283,7.42384e-07,1.44562e-09,0.0192499,0.000221772,7.46721e-07,-1.68825e-11,0.0194724,0.000223266,7.4667e-07,4.84533e-10,0.0196964,0.000224761,7.48124e-07,-5.85298e-11,0.0199219,0.000226257,7.47948e-07,1.61217e-09,0.0201489,0.000227757,7.52785e-07,-8.02136e-10,0.0203775,0.00022926,7.50378e-07,1.59637e-09,0.0206075,0.000230766,7.55167e-07,4.47168e-12,0.020839,0.000232276,7.55181e-07,2.48387e-10,0.021072,0.000233787,7.55926e-07,8.6474e-10,0.0213066,0.000235302,7.5852e-07,1.78299e-11,0.0215426,0.000236819,7.58573e-07,9.26567e-10,0.0217802,0.000238339,7.61353e-07,1.34529e-12,0.0220193,0.000239862,7.61357e-07,9.30659e-10,0.0222599,0.000241387,7.64149e-07,1.34529e-12,0.0225021,0.000242915,7.64153e-07,9.26567e-10,0.0227458,0.000244447,7.66933e-07,1.76215e-11,0.022991,0.00024598,7.66986e-07,8.65536e-10,0.0232377,0.000247517,7.69582e-07,2.45677e-10,0.023486,0.000249057,7.70319e-07,1.44193e-11,0.0237358,0.000250598,7.70363e-07,1.55918e-09,0.0239872,0.000252143,7.7504e-07,-6.63173e-10,0.0242401,0.000253691,7.73051e-07,1.09357e-09,0.0244946,0.000255241,7.76331e-07,1.41919e-11,0.0247506,0.000256793,7.76374e-07,7.12248e-10,0.0250082,0.000258348,7.78511e-07,8.62049e-10,0.0252673,0.000259908,7.81097e-07,-4.35061e-10,0.025528,0.000261469,7.79792e-07,8.7825e-10,0.0257902,0.000263031,7.82426e-07,6.47181e-10,0.0260541,0.000264598,7.84368e-07,2.58448e-10,0.0263194,0.000266167,7.85143e-07,1.81558e-10,0.0265864,0.000267738,7.85688e-07,8.78041e-10,0.0268549,0.000269312,7.88322e-07,3.15102e-11,0.027125,0.000270889,7.88417e-07,8.58525e-10,0.0273967,0.000272468,7.90992e-07,2.59812e-10,0.02767,0.000274051,7.91772e-07,-3.5224e-11,0.0279448,0.000275634,7.91666e-07,1.74377e-09,0.0282212,0.000277223,7.96897e-07,-1.35196e-09,0.0284992,0.000278813,7.92841e-07,1.80141e-09,0.0287788,0.000280404,7.98246e-07,-2.65629e-10,0.0290601,0.000281999,7.97449e-07,1.12374e-09,0.0293428,0.000283598,8.0082e-07,-5.04106e-10,0.0296272,0.000285198,7.99308e-07,8.92764e-10,0.0299132,0.000286799,8.01986e-07,6.58379e-10,0.0302008,0.000288405,8.03961e-07,1.98971e-10,0.0304901,0.000290014,8.04558e-07,4.08382e-10,0.0307809,0.000291624,8.05783e-07,3.01839e-11,0.0310733,0.000293236,8.05874e-07,1.33343e-09,0.0313673,0.000294851,8.09874e-07,2.2419e-10,0.031663,0.000296472,8.10547e-07,-3.67606e-10,0.0319603,0.000298092,8.09444e-07,1.24624e-09,0.0322592,0.000299714,8.13182e-07,-8.92025e-10,0.0325597,0.000301338,8.10506e-07,2.32183e-09,0.0328619,0.000302966,8.17472e-07,-9.44719e-10,0.0331657,0.000304598,8.14638e-07,1.45703e-09,0.0334711,0.000306232,8.19009e-07,-1.15805e-09,0.0337781,0.000307866,8.15535e-07,3.17507e-09,0.0340868,0.000309507,8.2506e-07,-4.09161e-09,0.0343971,0.000311145,8.12785e-07,5.74079e-09,0.0347091,0.000312788,8.30007e-07,-3.97034e-09,0.0350227,0.000314436,8.18096e-07,2.68985e-09,0.035338,0.00031608,8.26166e-07,6.61676e-10,0.0356549,0.000317734,8.28151e-07,-1.61123e-09,0.0359734,0.000319386,8.23317e-07,2.05786e-09,0.0362936,0.000321038,8.29491e-07,8.30388e-10,0.0366155,0.0003227,8.31982e-07,-1.65424e-09,0.036939,0.000324359,8.27019e-07,2.06129e-09,0.0372642,0.000326019,8.33203e-07,8.59719e-10,0.0375911,0.000327688,8.35782e-07,-1.77488e-09,0.0379196,0.000329354,8.30458e-07,2.51464e-09,0.0382498,0.000331023,8.38002e-07,-8.33135e-10,0.0385817,0.000332696,8.35502e-07,8.17825e-10,0.0389152,0.00033437,8.37956e-07,1.28718e-09,0.0392504,0.00033605,8.41817e-07,-2.2413e-09,0.0395873,0.000337727,8.35093e-07,3.95265e-09,0.0399258,0.000339409,8.46951e-07,-2.39332e-09,0.0402661,0.000341095,8.39771e-07,1.89533e-09,0.040608,0.000342781,8.45457e-07,-1.46271e-09,0.0409517,0.000344467,8.41069e-07,3.95554e-09,0.041297,0.000346161,8.52936e-07,-3.18369e-09,0.041644,0.000347857,8.43385e-07,1.32873e-09,0.0419927,0.000349548,8.47371e-07,1.59402e-09,0.0423431,0.000351248,8.52153e-07,-2.54336e-10,0.0426952,0.000352951,8.5139e-07,-5.76676e-10,0.043049,0.000354652,8.4966e-07,2.56114e-09,0.0434045,0.000356359,8.57343e-07,-2.21744e-09,0.0437617,0.000358067,8.50691e-07,2.58344e-09,0.0441206,0.000359776,8.58441e-07,-6.65826e-10,0.0444813,0.000361491,8.56444e-07,7.99218e-11,0.0448436,0.000363204,8.56684e-07,3.46063e-10,0.0452077,0.000364919,8.57722e-07,2.26116e-09,0.0455734,0.000366641,8.64505e-07,-1.94005e-09,0.045941,0.000368364,8.58685e-07,1.77384e-09,0.0463102,0.000370087,8.64007e-07,-1.43005e-09,0.0466811,0.000371811,8.59717e-07,3.94634e-09,0.0470538,0.000373542,8.71556e-07,-3.17946e-09,0.0474282,0.000375276,8.62017e-07,1.32104e-09,0.0478043,0.000377003,8.6598e-07,1.62045e-09,0.0481822,0.00037874,8.70842e-07,-3.52297e-10,0.0485618,0.000380481,8.69785e-07,-2.11211e-10,0.0489432,0.00038222,8.69151e-07,1.19716e-09,0.0493263,0.000383962,8.72743e-07,-8.52026e-10,0.0497111,0.000385705,8.70187e-07,2.21092e-09,0.0500977,0.000387452,8.76819e-07,-5.41339e-10,0.050486,0.000389204,8.75195e-07,-4.5361e-11,0.0508761,0.000390954,8.75059e-07,7.22669e-10,0.0512679,0.000392706,8.77227e-07,8.79936e-10,0.0516615,0.000394463,8.79867e-07,-5.17048e-10,0.0520568,0.000396222,8.78316e-07,1.18833e-09,0.0524539,0.000397982,8.81881e-07,-5.11022e-10,0.0528528,0.000399744,8.80348e-07,8.55683e-10,0.0532534,0.000401507,8.82915e-07,8.13562e-10,0.0536558,0.000403276,8.85356e-07,-3.84603e-10,0.05406,0.000405045,8.84202e-07,7.24962e-10,0.0544659,0.000406816,8.86377e-07,1.20986e-09,0.0548736,0.000408592,8.90006e-07,-1.83896e-09,0.0552831,0.000410367,8.84489e-07,2.42071e-09,0.0556944,0.000412143,8.91751e-07,-3.93413e-10,0.0561074,0.000413925,8.90571e-07,-8.46967e-10,0.0565222,0.000415704,8.8803e-07,3.78122e-09,0.0569388,0.000417491,8.99374e-07,-3.1021e-09,0.0573572,0.000419281,8.90068e-07,1.17658e-09,0.0577774,0.000421064,8.93597e-07,2.12117e-09,0.0581993,0.000422858,8.99961e-07,-2.21068e-09,0.0586231,0.000424651,8.93329e-07,2.9961e-09,0.0590486,0.000426447,9.02317e-07,-2.32311e-09,0.059476,0.000428244,8.95348e-07,2.57122e-09,0.0599051,0.000430043,9.03062e-07,-5.11098e-10,0.0603361,0.000431847,9.01528e-07,-5.27166e-10,0.0607688,0.000433649,8.99947e-07,2.61984e-09,0.0612034,0.000435457,9.07806e-07,-2.50141e-09,0.0616397,0.000437265,9.00302e-07,3.66045e-09,0.0620779,0.000439076,9.11283e-07,-4.68977e-09,0.0625179,0.000440885,8.97214e-07,7.64783e-09,0.0629597,0.000442702,9.20158e-07,-7.27499e-09,0.0634033,0.000444521,8.98333e-07,6.55113e-09,0.0638487,0.000446337,9.17986e-07,-4.02844e-09,0.0642959,0.000448161,9.05901e-07,2.11196e-09,0.064745,0.000449979,9.12236e-07,3.03125e-09,0.0651959,0.000451813,9.2133e-07,-6.78648e-09,0.0656486,0.000453635,9.00971e-07,9.21375e-09,0.0661032,0.000455464,9.28612e-07,-7.71684e-09,0.0665596,0.000457299,9.05462e-07,6.7522e-09,0.0670178,0.00045913,9.25718e-07,-4.3907e-09,0.0674778,0.000460968,9.12546e-07,3.36e-09,0.0679397,0.000462803,9.22626e-07,-1.59876e-09,0.0684034,0.000464644,9.1783e-07,3.0351e-09,0.068869,0.000466488,9.26935e-07,-3.09101e-09,0.0693364,0.000468333,9.17662e-07,1.8785e-09,0.0698057,0.000470174,9.23298e-07,3.02733e-09,0.0702768,0.00047203,9.3238e-07,-6.53722e-09,0.0707497,0.000473875,9.12768e-07,8.22054e-09,0.0712245,0.000475725,9.37429e-07,-3.99325e-09,0.0717012,0.000477588,9.2545e-07,3.01839e-10,0.0721797,0.00047944,9.26355e-07,2.78597e-09,0.0726601,0.000481301,9.34713e-07,-3.99507e-09,0.0731423,0.000483158,9.22728e-07,5.7435e-09,0.0736264,0.000485021,9.39958e-07,-4.07776e-09,0.0741123,0.000486888,9.27725e-07,3.11695e-09,0.0746002,0.000488753,9.37076e-07,-9.39394e-10,0.0750898,0.000490625,9.34258e-07,6.4055e-10,0.0755814,0.000492495,9.3618e-07,-1.62265e-09,0.0760748,0.000494363,9.31312e-07,5.84995e-09,0.0765701,0.000496243,9.48861e-07,-6.87601e-09,0.0770673,0.00049812,9.28233e-07,6.75296e-09,0.0775664,0.000499997,9.48492e-07,-5.23467e-09,0.0780673,0.000501878,9.32788e-07,6.73523e-09,0.0785701,0.000503764,9.52994e-07,-6.80514e-09,0.0790748,0.000505649,9.32578e-07,5.5842e-09,0.0795814,0.000507531,9.49331e-07,-6.30583e-10,0.0800899,0.000509428,9.47439e-07,-3.0618e-09,0.0806003,0.000511314,9.38254e-07,5.4273e-09,0.0811125,0.000513206,9.54536e-07,-3.74627e-09,0.0816267,0.000515104,9.43297e-07,2.10713e-09,0.0821427,0.000516997,9.49618e-07,2.76839e-09,0.0826607,0.000518905,9.57924e-07,-5.73006e-09,0.0831805,0.000520803,9.40733e-07,5.25072e-09,0.0837023,0.0005227,9.56486e-07,-3.71718e-10,0.084226,0.000524612,9.5537e-07,-3.76404e-09,0.0847515,0.000526512,9.44078e-07,7.97735e-09,0.085279,0.000528424,9.6801e-07,-5.79367e-09,0.0858084,0.000530343,9.50629e-07,2.96268e-10,0.0863397,0.000532245,9.51518e-07,4.6086e-09,0.0868729,0.000534162,9.65344e-07,-3.82947e-09,0.087408,0.000536081,9.53856e-07,3.25861e-09,0.087945,0.000537998,9.63631e-07,-1.7543e-09,0.088484,0.00053992,9.58368e-07,3.75849e-09,0.0890249,0.000541848,9.69644e-07,-5.82891e-09,0.0895677,0.00054377,9.52157e-07,4.65593e-09,0.0901124,0.000545688,9.66125e-07,2.10643e-09,0.0906591,0.000547627,9.72444e-07,-5.63099e-09,0.0912077,0.000549555,9.55551e-07,5.51627e-09,0.0917582,0.000551483,9.721e-07,-1.53292e-09,0.0923106,0.000553422,9.67501e-07,6.15311e-10,0.092865,0.000555359,9.69347e-07,-9.28291e-10,0.0934213,0.000557295,9.66562e-07,3.09774e-09,0.0939796,0.000559237,9.75856e-07,-4.01186e-09,0.0945398,0.000561177,9.6382e-07,5.49892e-09,0.095102,0.000563121,9.80317e-07,-3.08258e-09,0.0956661,0.000565073,9.71069e-07,-6.19176e-10,0.0962321,0.000567013,9.69212e-07,5.55932e-09,0.0968001,0.000568968,9.8589e-07,-6.71704e-09,0.09737,0.00057092,9.65738e-07,6.40762e-09,0.0979419,0.00057287,9.84961e-07,-4.0122e-09,0.0985158,0.000574828,9.72925e-07,2.19059e-09,0.0990916,0.000576781,9.79496e-07,2.70048e-09,0.0996693,0.000578748,9.87598e-07,-5.54193e-09,0.100249,0.000580706,9.70972e-07,4.56597e-09,0.100831,0.000582662,9.8467e-07,2.17923e-09,0.101414,0.000584638,9.91208e-07,-5.83232e-09,0.102,0.000586603,9.73711e-07,6.24884e-09,0.102588,0.000588569,9.92457e-07,-4.26178e-09,0.103177,0.000590541,9.79672e-07,3.34781e-09,0.103769,0.00059251,9.89715e-07,-1.67904e-09,0.104362,0.000594485,9.84678e-07,3.36839e-09,0.104958,0.000596464,9.94783e-07,-4.34397e-09,0.105555,0.000598441,9.81751e-07,6.55696e-09,0.106155,0.000600424,1.00142e-06,-6.98272e-09,0.106756,0.000602406,9.80474e-07,6.4728e-09,0.107359,0.000604386,9.99893e-07,-4.00742e-09,0.107965,0.000606374,9.8787e-07,2.10654e-09,0.108572,0.000608356,9.9419e-07,3.0318e-09,0.109181,0.000610353,1.00329e-06,-6.7832e-09,0.109793,0.00061234,9.82936e-07,9.1998e-09,0.110406,0.000614333,1.01054e-06,-7.6642e-09,0.111021,0.000616331,9.87543e-07,6.55579e-09,0.111639,0.000618326,1.00721e-06,-3.65791e-09,0.112258,0.000620329,9.96236e-07,6.25467e-10,0.112879,0.000622324,9.98113e-07,1.15593e-09,0.113503,0.000624323,1.00158e-06,2.20158e-09,0.114128,0.000626333,1.00819e-06,-2.51191e-09,0.114755,0.000628342,1.00065e-06,3.95517e-10,0.115385,0.000630345,1.00184e-06,9.29807e-10,0.116016,0.000632351,1.00463e-06,3.33599e-09,0.116649,0.00063437,1.01463e-06,-6.82329e-09,0.117285,0.000636379,9.94163e-07,9.05595e-09,0.117922,0.000638395,1.02133e-06,-7.04862e-09,0.118562,0.000640416,1.00019e-06,4.23737e-09,0.119203,0.000642429,1.0129e-06,-2.45033e-09,0.119847,0.000644448,1.00555e-06,5.56395e-09,0.120492,0.000646475,1.02224e-06,-4.9043e-09,0.121139,0.000648505,1.00753e-06,-8.47952e-10,0.121789,0.000650518,1.00498e-06,8.29622e-09,0.122441,0.000652553,1.02987e-06,-9.98538e-09,0.123094,0.000654582,9.99914e-07,9.2936e-09,0.12375,0.00065661,1.02779e-06,-4.83707e-09,0.124407,0.000658651,1.01328e-06,2.60411e-09,0.125067,0.000660685,1.0211e-06,-5.57945e-09,0.125729,0.000662711,1.00436e-06,1.22631e-08,0.126392,0.000664756,1.04115e-06,-1.36704e-08,0.127058,0.000666798,1.00014e-06,1.26161e-08,0.127726,0.000668836,1.03798e-06,-6.99155e-09,0.128396,0.000670891,1.01701e-06,4.48836e-10,0.129068,0.000672926,1.01836e-06,5.19606e-09,0.129742,0.000674978,1.03394e-06,-6.3319e-09,0.130418,0.000677027,1.01495e-06,5.2305e-09,0.131096,0.000679073,1.03064e-06,3.11123e-10,0.131776,0.000681135,1.03157e-06,-6.47511e-09,0.132458,0.000683179,1.01215e-06,1.06882e-08,0.133142,0.000685235,1.04421e-06,-6.47519e-09,0.133829,0.000687304,1.02479e-06,3.11237e-10,0.134517,0.000689355,1.02572e-06,5.23035e-09,0.135207,0.000691422,1.04141e-06,-6.3316e-09,0.1359,0.000693486,1.02242e-06,5.19484e-09,0.136594,0.000695546,1.038e-06,4.53497e-10,0.137291,0.000697623,1.03936e-06,-7.00891e-09,0.137989,0.000699681,1.01834e-06,1.2681e-08,0.13869,0.000701756,1.05638e-06,-1.39128e-08,0.139393,0.000703827,1.01464e-06,1.31679e-08,0.140098,0.000705896,1.05414e-06,-8.95659e-09,0.140805,0.000707977,1.02727e-06,7.75742e-09,0.141514,0.000710055,1.05055e-06,-7.17182e-09,0.142225,0.000712135,1.02903e-06,6.02862e-09,0.142938,0.000714211,1.04712e-06,-2.04163e-09,0.143653,0.000716299,1.04099e-06,2.13792e-09,0.144371,0.000718387,1.04741e-06,-6.51009e-09,0.14509,0.000720462,1.02787e-06,9.00123e-09,0.145812,0.000722545,1.05488e-06,3.07523e-10,0.146535,0.000724656,1.0558e-06,-1.02312e-08,0.147261,0.000726737,1.02511e-06,1.0815e-08,0.147989,0.000728819,1.05755e-06,-3.22681e-09,0.148719,0.000730925,1.04787e-06,2.09244e-09,0.14945,0.000733027,1.05415e-06,-5.143e-09,0.150185,0.00073512,1.03872e-06,3.57844e-09,0.150921,0.000737208,1.04946e-06,5.73027e-09,0.151659,0.000739324,1.06665e-06,-1.15983e-08,0.152399,0.000741423,1.03185e-06,1.08605e-08,0.153142,0.000743519,1.06443e-06,-2.04106e-09,0.153886,0.000745642,1.05831e-06,-2.69642e-09,0.154633,0.00074775,1.05022e-06,-2.07425e-09,0.155382,0.000749844,1.044e-06,1.09934e-08,0.156133,0.000751965,1.07698e-06,-1.20972e-08,0.156886,0.000754083,1.04069e-06,7.59288e-09,0.157641,0.000756187,1.06347e-06,-3.37305e-09,0.158398,0.000758304,1.05335e-06,5.89921e-09,0.159158,0.000760428,1.07104e-06,-5.32248e-09,0.159919,0.000762554,1.05508e-06,4.8927e-10,0.160683,0.000764666,1.05654e-06,3.36547e-09,0.161448,0.000766789,1.06664e-06,9.50081e-10,0.162216,0.000768925,1.06949e-06,-7.16568e-09,0.162986,0.000771043,1.04799e-06,1.28114e-08,0.163758,0.000773177,1.08643e-06,-1.42774e-08,0.164533,0.000775307,1.0436e-06,1.44956e-08,0.165309,0.000777438,1.08708e-06,-1.39025e-08,0.166087,0.00077957,1.04538e-06,1.13118e-08,0.166868,0.000781695,1.07931e-06,-1.54224e-09,0.167651,0.000783849,1.07468e-06,-5.14312e-09,0.168436,0.000785983,1.05925e-06,7.21381e-09,0.169223,0.000788123,1.0809e-06,-8.81096e-09,0.170012,0.000790259,1.05446e-06,1.31289e-08,0.170803,0.000792407,1.09385e-06,-1.39022e-08,0.171597,0.000794553,1.05214e-06,1.26775e-08,0.172392,0.000796695,1.09018e-06,-7.00557e-09,0.17319,0.000798855,1.06916e-06,4.43796e-10,0.17399,0.000800994,1.07049e-06,5.23031e-09,0.174792,0.000803151,1.08618e-06,-6.46397e-09,0.175596,0.000805304,1.06679e-06,5.72444e-09,0.176403,0.000807455,1.08396e-06,-1.53254e-09,0.177211,0.000809618,1.07937e-06,4.05673e-10,0.178022,0.000811778,1.08058e-06,-9.01916e-11,0.178835,0.000813939,1.08031e-06,-4.49821e-11,0.17965,0.000816099,1.08018e-06,2.70234e-10,0.180467,0.00081826,1.08099e-06,-1.03603e-09,0.181286,0.000820419,1.07788e-06,3.87392e-09,0.182108,0.000822587,1.0895e-06,4.41522e-10,0.182932,0.000824767,1.09083e-06,-5.63997e-09,0.183758,0.000826932,1.07391e-06,7.21707e-09,0.184586,0.000829101,1.09556e-06,-8.32718e-09,0.185416,0.000831267,1.07058e-06,1.11907e-08,0.186248,0.000833442,1.10415e-06,-6.63336e-09,0.187083,0.00083563,1.08425e-06,4.41484e-10,0.187919,0.0008378,1.08557e-06,4.86754e-09,0.188758,0.000839986,1.10017e-06,-5.01041e-09,0.189599,0.000842171,1.08514e-06,2.72811e-10,0.190443,0.000844342,1.08596e-06,3.91916e-09,0.191288,0.000846526,1.09772e-06,-1.04819e-09,0.192136,0.000848718,1.09457e-06,2.73531e-10,0.192985,0.000850908,1.0954e-06,-4.58916e-11,0.193837,0.000853099,1.09526e-06,-9.01158e-11,0.194692,0.000855289,1.09499e-06,4.06506e-10,0.195548,0.00085748,1.09621e-06,-1.53595e-09,0.196407,0.000859668,1.0916e-06,5.73717e-09,0.197267,0.000861869,1.10881e-06,-6.51164e-09,0.19813,0.000864067,1.08928e-06,5.40831e-09,0.198995,0.000866261,1.1055e-06,-2.20401e-10,0.199863,0.000868472,1.10484e-06,-4.52652e-09,0.200732,0.000870668,1.09126e-06,3.42508e-09,0.201604,0.000872861,1.10153e-06,5.72762e-09,0.202478,0.000875081,1.11872e-06,-1.14344e-08,0.203354,0.000877284,1.08441e-06,1.02076e-08,0.204233,0.000879484,1.11504e-06,4.06355e-10,0.205113,0.000881715,1.11626e-06,-1.18329e-08,0.205996,0.000883912,1.08076e-06,1.71227e-08,0.206881,0.000886125,1.13213e-06,-1.19546e-08,0.207768,0.000888353,1.09626e-06,8.93465e-10,0.208658,0.000890548,1.09894e-06,8.38062e-09,0.209549,0.000892771,1.12408e-06,-4.61353e-09,0.210443,0.000895006,1.11024e-06,-4.82756e-09,0.211339,0.000897212,1.09576e-06,9.02245e-09,0.212238,0.00089943,1.12283e-06,-1.45997e-09,0.213138,0.000901672,1.11845e-06,-3.18255e-09,0.214041,0.000903899,1.1089e-06,-7.11073e-10,0.214946,0.000906115,1.10677e-06,6.02692e-09,0.215853,0.000908346,1.12485e-06,-8.49548e-09,0.216763,0.00091057,1.09936e-06,1.30537e-08,0.217675,0.000912808,1.13852e-06,-1.3917e-08,0.218588,0.000915044,1.09677e-06,1.28121e-08,0.219505,0.000917276,1.13521e-06,-7.5288e-09,0.220423,0.000919523,1.11262e-06,2.40205e-09,0.221344,0.000921756,1.11983e-06,-2.07941e-09,0.222267,0.000923989,1.11359e-06,5.91551e-09,0.223192,0.000926234,1.13134e-06,-6.68149e-09,0.224119,0.000928477,1.11129e-06,5.90929e-09,0.225049,0.000930717,1.12902e-06,-2.05436e-09,0.22598,0.000932969,1.12286e-06,2.30807e-09,0.226915,0.000935222,1.12978e-06,-7.17796e-09,0.227851,0.00093746,1.10825e-06,1.15028e-08,0.228789,0.000939711,1.14276e-06,-9.03083e-09,0.22973,0.000941969,1.11566e-06,9.71932e-09,0.230673,0.00094423,1.14482e-06,-1.49452e-08,0.231619,0.000946474,1.09998e-06,2.02591e-08,0.232566,0.000948735,1.16076e-06,-2.13879e-08,0.233516,0.000950993,1.0966e-06,2.05888e-08,0.234468,0.000953247,1.15837e-06,-1.62642e-08,0.235423,0.000955515,1.10957e-06,1.46658e-08,0.236379,0.000957779,1.15357e-06,-1.25966e-08,0.237338,0.000960048,1.11578e-06,5.91793e-09,0.238299,0.000962297,1.13353e-06,3.82602e-09,0.239263,0.000964576,1.14501e-06,-6.3208e-09,0.240229,0.000966847,1.12605e-06,6.55613e-09,0.241197,0.000969119,1.14572e-06,-5.00268e-09,0.242167,0.000971395,1.13071e-06,-1.44659e-09,0.243139,0.000973652,1.12637e-06,1.07891e-08,0.244114,0.000975937,1.15874e-06,-1.19073e-08,0.245091,0.000978219,1.12302e-06,7.03782e-09,0.246071,0.000980486,1.14413e-06,-1.34276e-09,0.247052,0.00098277,1.1401e-06,-1.66669e-09,0.248036,0.000985046,1.1351e-06,8.00935e-09,0.249022,0.00098734,1.15913e-06,-1.54694e-08,0.250011,0.000989612,1.11272e-06,2.4066e-08,0.251002,0.000991909,1.18492e-06,-2.11901e-08,0.251995,0.000994215,1.12135e-06,1.08973e-09,0.25299,0.000996461,1.12462e-06,1.68311e-08,0.253988,0.000998761,1.17511e-06,-8.8094e-09,0.254987,0.00100109,1.14868e-06,-1.13958e-08,0.25599,0.00100335,1.1145e-06,2.45902e-08,0.256994,0.00100565,1.18827e-06,-2.73603e-08,0.258001,0.00100795,1.10618e-06,2.52464e-08,0.25901,0.00101023,1.18192e-06,-1.40207e-08,0.260021,0.00101256,1.13986e-06,1.03387e-09,0.261035,0.00101484,1.14296e-06,9.8853e-09,0.262051,0.00101715,1.17262e-06,-1.07726e-08,0.263069,0.00101947,1.1403e-06,3.40272e-09,0.26409,0.00102176,1.15051e-06,-2.83827e-09,0.265113,0.00102405,1.142e-06,7.95039e-09,0.266138,0.00102636,1.16585e-06,8.39047e-10,0.267166,0.00102869,1.16836e-06,-1.13066e-08,0.268196,0.00103099,1.13444e-06,1.4585e-08,0.269228,0.00103331,1.1782e-06,-1.72314e-08,0.270262,0.00103561,1.1265e-06,2.45382e-08,0.271299,0.00103794,1.20012e-06,-2.13166e-08,0.272338,0.00104028,1.13617e-06,1.12364e-09,0.273379,0.00104255,1.13954e-06,1.68221e-08,0.274423,0.00104488,1.19001e-06,-8.80736e-09,0.275469,0.00104723,1.16358e-06,-1.13948e-08,0.276518,0.00104953,1.1294e-06,2.45839e-08,0.277568,0.00105186,1.20315e-06,-2.73361e-08,0.278621,0.00105418,1.12114e-06,2.51559e-08,0.279677,0.0010565,1.19661e-06,-1.36832e-08,0.280734,0.00105885,1.15556e-06,-2.25706e-10,0.281794,0.00106116,1.15488e-06,1.45862e-08,0.282857,0.00106352,1.19864e-06,-2.83167e-08,0.283921,0.00106583,1.11369e-06,3.90759e-08,0.284988,0.00106817,1.23092e-06,-3.85801e-08,0.286058,0.00107052,1.11518e-06,2.58375e-08,0.287129,0.00107283,1.19269e-06,-5.16498e-09,0.288203,0.0010752,1.1772e-06,-5.17768e-09,0.28928,0.00107754,1.16167e-06,-3.92671e-09,0.290358,0.00107985,1.14988e-06,2.08846e-08,0.29144,0.00108221,1.21254e-06,-2.00072e-08,0.292523,0.00108458,1.15252e-06,-4.60659e-10,0.293609,0.00108688,1.15114e-06,2.18499e-08,0.294697,0.00108925,1.21669e-06,-2.73343e-08,0.295787,0.0010916,1.13468e-06,2.78826e-08,0.29688,0.00109395,1.21833e-06,-2.45915e-08,0.297975,0.00109632,1.14456e-06,1.08787e-08,0.299073,0.00109864,1.17719e-06,1.08788e-08,0.300172,0.00110102,1.20983e-06,-2.45915e-08,0.301275,0.00110337,1.13605e-06,2.78828e-08,0.302379,0.00110573,1.2197e-06,-2.73348e-08,0.303486,0.00110808,1.1377e-06,2.18518e-08,0.304595,0.00111042,1.20325e-06,-4.67556e-10,0.305707,0.00111283,1.20185e-06,-1.99816e-08,0.306821,0.00111517,1.14191e-06,2.07891e-08,0.307937,0.00111752,1.20427e-06,-3.57026e-09,0.309056,0.00111992,1.19356e-06,-6.50797e-09,0.310177,0.00112228,1.17404e-06,-2.00165e-10,0.3113,0.00112463,1.17344e-06,7.30874e-09,0.312426,0.001127,1.19536e-06,7.67424e-10,0.313554,0.00112939,1.19767e-06,-1.03784e-08,0.314685,0.00113176,1.16653e-06,1.09437e-08,0.315818,0.00113412,1.19936e-06,-3.59406e-09,0.316953,0.00113651,1.18858e-06,3.43251e-09,0.318091,0.0011389,1.19888e-06,-1.0136e-08,0.319231,0.00114127,1.16847e-06,7.30915e-09,0.320374,0.00114363,1.1904e-06,1.07018e-08,0.321518,0.00114604,1.2225e-06,-2.03137e-08,0.322666,0.00114842,1.16156e-06,1.09484e-08,0.323815,0.00115078,1.19441e-06,6.32224e-09,0.324967,0.00115319,1.21337e-06,-6.43509e-09,0.326122,0.00115559,1.19407e-06,-1.03842e-08,0.327278,0.00115795,1.16291e-06,1.81697e-08,0.328438,0.00116033,1.21742e-06,-2.6901e-09,0.329599,0.00116276,1.20935e-06,-7.40939e-09,0.330763,0.00116515,1.18713e-06,2.52533e-09,0.331929,0.00116754,1.1947e-06,-2.69191e-09,0.333098,0.00116992,1.18663e-06,8.24218e-09,0.334269,0.00117232,1.21135e-06,-4.74377e-10,0.335443,0.00117474,1.20993e-06,-6.34471e-09,0.336619,0.00117714,1.1909e-06,-3.94922e-09,0.337797,0.00117951,1.17905e-06,2.21417e-08,0.338978,0.00118193,1.24547e-06,-2.50128e-08,0.340161,0.00118435,1.17043e-06,1.8305e-08,0.341346,0.00118674,1.22535e-06,-1.84048e-08,0.342534,0.00118914,1.17013e-06,2.55121e-08,0.343725,0.00119156,1.24667e-06,-2.40389e-08,0.344917,0.00119398,1.17455e-06,1.10389e-08,0.346113,0.00119636,1.20767e-06,9.68574e-09,0.34731,0.0011988,1.23673e-06,-1.99797e-08,0.34851,0.00120122,1.17679e-06,1.06284e-08,0.349713,0.0012036,1.20867e-06,7.26868e-09,0.350917,0.00120604,1.23048e-06,-9.90072e-09,0.352125,0.00120847,1.20078e-06,2.53177e-09,0.353334,0.00121088,1.20837e-06,-2.26199e-10,0.354546,0.0012133,1.20769e-06,-1.62705e-09,0.355761,0.00121571,1.20281e-06,6.73435e-09,0.356978,0.00121813,1.22302e-06,4.49207e-09,0.358197,0.00122059,1.23649e-06,-2.47027e-08,0.359419,0.00122299,1.16238e-06,3.47142e-08,0.360643,0.00122542,1.26653e-06,-2.47472e-08,0.36187,0.00122788,1.19229e-06,4.66965e-09,0.363099,0.00123028,1.20629e-06,6.06872e-09,0.36433,0.00123271,1.2245e-06,8.57729e-10,0.365564,0.00123516,1.22707e-06,-9.49952e-09,0.366801,0.00123759,1.19858e-06,7.33792e-09,0.36804,0.00124001,1.22059e-06,9.95025e-09,0.369281,0.00124248,1.25044e-06,-1.73366e-08,0.370525,0.00124493,1.19843e-06,-2.08464e-10,0.371771,0.00124732,1.1978e-06,1.81704e-08,0.373019,0.00124977,1.25232e-06,-1.28683e-08,0.37427,0.00125224,1.21371e-06,3.50042e-09,0.375524,0.00125468,1.22421e-06,-1.1335e-09,0.37678,0.00125712,1.22081e-06,1.03345e-09,0.378038,0.00125957,1.22391e-06,-3.00023e-09,0.379299,0.00126201,1.21491e-06,1.09676e-08,0.380562,0.00126447,1.24781e-06,-1.10676e-08,0.381828,0.00126693,1.21461e-06,3.50042e-09,0.383096,0.00126937,1.22511e-06,-2.93403e-09,0.384366,0.00127181,1.21631e-06,8.23574e-09,0.385639,0.00127427,1.24102e-06,-2.06607e-10,0.386915,0.00127675,1.2404e-06,-7.40935e-09,0.388193,0.00127921,1.21817e-06,4.1761e-11,0.389473,0.00128165,1.21829e-06,7.24223e-09,0.390756,0.0012841,1.24002e-06,7.91564e-10,0.392042,0.00128659,1.2424e-06,-1.04086e-08,0.393329,0.00128904,1.21117e-06,1.10405e-08,0.39462,0.0012915,1.24429e-06,-3.951e-09,0.395912,0.00129397,1.23244e-06,4.7634e-09,0.397208,0.00129645,1.24673e-06,-1.51025e-08,0.398505,0.0012989,1.20142e-06,2.58443e-08,0.399805,0.00130138,1.27895e-06,-2.86702e-08,0.401108,0.00130385,1.19294e-06,2.92318e-08,0.402413,0.00130632,1.28064e-06,-2.86524e-08,0.403721,0.0013088,1.19468e-06,2.57731e-08,0.405031,0.00131127,1.272e-06,-1.48355e-08,0.406343,0.00131377,1.2275e-06,3.76652e-09,0.407658,0.00131623,1.23879e-06,-2.30784e-10,0.408976,0.00131871,1.2381e-06,-2.84331e-09,0.410296,0.00132118,1.22957e-06,1.16041e-08,0.411618,0.00132367,1.26438e-06,-1.37708e-08,0.412943,0.00132616,1.22307e-06,1.36768e-08,0.41427,0.00132865,1.2641e-06,-1.1134e-08,0.4156,0.00133114,1.2307e-06,1.05714e-09,0.416933,0.00133361,1.23387e-06,6.90538e-09,0.418267,0.00133609,1.25459e-06,1.12372e-09,0.419605,0.00133861,1.25796e-06,-1.14002e-08,0.420945,0.00134109,1.22376e-06,1.46747e-08,0.422287,0.00134358,1.26778e-06,-1.7496e-08,0.423632,0.00134606,1.21529e-06,2.5507e-08,0.424979,0.00134857,1.29182e-06,-2.49272e-08,0.426329,0.00135108,1.21703e-06,1.45972e-08,0.427681,0.00135356,1.26083e-06,-3.65935e-09,0.429036,0.00135607,1.24985e-06,4.00178e-11,0.430393,0.00135857,1.24997e-06,3.49917e-09,0.431753,0.00136108,1.26047e-06,-1.40366e-08,0.433116,0.00136356,1.21836e-06,2.28448e-08,0.43448,0.00136606,1.28689e-06,-1.77378e-08,0.435848,0.00136858,1.23368e-06,1.83043e-08,0.437218,0.0013711,1.28859e-06,-2.56769e-08,0.43859,0.0013736,1.21156e-06,2.47987e-08,0.439965,0.0013761,1.28595e-06,-1.39133e-08,0.441342,0.00137863,1.24421e-06,1.05202e-09,0.442722,0.00138112,1.24737e-06,9.70507e-09,0.444104,0.00138365,1.27649e-06,-1.00698e-08,0.445489,0.00138617,1.24628e-06,7.72123e-10,0.446877,0.00138867,1.24859e-06,6.98132e-09,0.448267,0.00139118,1.26954e-06,1.10477e-09,0.449659,0.00139373,1.27285e-06,-1.14003e-08,0.451054,0.00139624,1.23865e-06,1.4694e-08,0.452452,0.00139876,1.28273e-06,-1.75734e-08,0.453852,0.00140127,1.23001e-06,2.5797e-08,0.455254,0.00140381,1.3074e-06,-2.60097e-08,0.456659,0.00140635,1.22937e-06,1.86371e-08,0.458067,0.00140886,1.28529e-06,-1.8736e-08,0.459477,0.00141137,1.22908e-06,2.65048e-08,0.46089,0.00141391,1.30859e-06,-2.76784e-08,0.462305,0.00141645,1.22556e-06,2.46043e-08,0.463722,0.00141897,1.29937e-06,-1.11341e-08,0.465143,0.00142154,1.26597e-06,-9.87033e-09,0.466565,0.00142404,1.23636e-06,2.08131e-08,0.467991,0.00142657,1.2988e-06,-1.37773e-08,0.469419,0.00142913,1.25746e-06,4.49378e-09,0.470849,0.00143166,1.27094e-06,-4.19781e-09,0.472282,0.00143419,1.25835e-06,1.22975e-08,0.473717,0.00143674,1.29524e-06,-1.51902e-08,0.475155,0.00143929,1.24967e-06,1.86608e-08,0.476596,0.00144184,1.30566e-06,-2.96506e-08,0.478039,0.00144436,1.2167e-06,4.03368e-08,0.479485,0.00144692,1.33771e-06,-4.22896e-08,0.480933,0.00144947,1.21085e-06,3.94148e-08,0.482384,0.00145201,1.32909e-06,-2.59626e-08,0.483837,0.00145459,1.2512e-06,4.83124e-09,0.485293,0.0014571,1.2657e-06,6.63757e-09,0.486751,0.00145966,1.28561e-06,-1.57911e-09,0.488212,0.00146222,1.28087e-06,-3.21468e-10,0.489676,0.00146478,1.27991e-06,2.86517e-09,0.491142,0.00146735,1.2885e-06,-1.11392e-08,0.49261,0.00146989,1.25508e-06,1.18893e-08,0.494081,0.00147244,1.29075e-06,-6.61574e-09,0.495555,0.001475,1.27091e-06,1.45736e-08,0.497031,0.00147759,1.31463e-06,-2.18759e-08,0.49851,0.00148015,1.249e-06,1.33252e-08,0.499992,0.00148269,1.28897e-06,-1.62277e-09,0.501476,0.00148526,1.28411e-06,-6.83421e-09,0.502962,0.00148781,1.2636e-06,2.89596e-08,0.504451,0.00149042,1.35048e-06,-4.93997e-08,0.505943,0.00149298,1.20228e-06,4.94299e-08,0.507437,0.00149553,1.35057e-06,-2.91107e-08,0.508934,0.00149814,1.26324e-06,7.40848e-09,0.510434,0.00150069,1.28547e-06,-5.23187e-10,0.511936,0.00150326,1.2839e-06,-5.31585e-09,0.51344,0.00150581,1.26795e-06,2.17866e-08,0.514947,0.00150841,1.33331e-06,-2.22257e-08,0.516457,0.00151101,1.26663e-06,7.51178e-09,0.517969,0.00151357,1.28917e-06,-7.82128e-09,0.519484,0.00151613,1.2657e-06,2.37733e-08,0.521002,0.00151873,1.33702e-06,-2.76674e-08,0.522522,0.00152132,1.25402e-06,2.72917e-08,0.524044,0.00152391,1.3359e-06,-2.18949e-08,0.525569,0.00152652,1.27021e-06,6.83372e-10,0.527097,0.00152906,1.27226e-06,1.91613e-08,0.528628,0.00153166,1.32974e-06,-1.77241e-08,0.53016,0.00153427,1.27657e-06,-7.86963e-09,0.531696,0.0015368,1.25296e-06,4.92027e-08,0.533234,0.00153945,1.40057e-06,-6.9732e-08,0.534775,0.00154204,1.19138e-06,5.09114e-08,0.536318,0.00154458,1.34411e-06,-1.4704e-08,0.537864,0.00154722,1.3e-06,7.9048e-09,0.539413,0.00154984,1.32371e-06,-1.69152e-08,0.540964,0.00155244,1.27297e-06,1.51355e-10,0.542517,0.00155499,1.27342e-06,1.63099e-08,0.544074,0.00155758,1.32235e-06,-5.78647e-09,0.545633,0.00156021,1.30499e-06,6.83599e-09,0.547194,0.00156284,1.3255e-06,-2.15575e-08,0.548758,0.00156543,1.26083e-06,1.97892e-08,0.550325,0.00156801,1.32019e-06,2.00525e-09,0.551894,0.00157065,1.32621e-06,-2.78103e-08,0.553466,0.00157322,1.24278e-06,4.96314e-08,0.555041,0.00157586,1.39167e-06,-5.1506e-08,0.556618,0.00157849,1.23716e-06,3.71835e-08,0.558198,0.00158107,1.34871e-06,-3.76233e-08,0.55978,0.00158366,1.23584e-06,5.37052e-08,0.561365,0.00158629,1.39695e-06,-5.79884e-08,0.562953,0.00158891,1.22299e-06,5.90392e-08,0.564543,0.00159153,1.4001e-06,-5.89592e-08,0.566136,0.00159416,1.22323e-06,5.7588e-08,0.567731,0.00159678,1.39599e-06,-5.21835e-08,0.569329,0.00159941,1.23944e-06,3.19369e-08,0.57093,0.00160199,1.33525e-06,-1.59594e-08,0.572533,0.00160461,1.28737e-06,3.19006e-08,0.574139,0.00160728,1.38307e-06,-5.20383e-08,0.575748,0.00160989,1.22696e-06,5.70431e-08,0.577359,0.00161251,1.39809e-06,-5.69247e-08,0.578973,0.00161514,1.22731e-06,5.14463e-08,0.580589,0.00161775,1.38165e-06,-2.9651e-08,0.582208,0.00162042,1.2927e-06,7.55339e-09,0.58383,0.00162303,1.31536e-06,-5.62636e-10,0.585455,0.00162566,1.31367e-06,-5.30281e-09,0.587081,0.00162827,1.29776e-06,2.17738e-08,0.588711,0.00163093,1.36309e-06,-2.21875e-08,0.590343,0.00163359,1.29652e-06,7.37164e-09,0.591978,0.00163621,1.31864e-06,-7.29907e-09,0.593616,0.00163882,1.29674e-06,2.18247e-08,0.595256,0.00164148,1.36221e-06,-2.03952e-08,0.596899,0.00164414,1.30103e-06,1.51241e-10,0.598544,0.00164675,1.30148e-06,1.97902e-08,0.600192,0.00164941,1.36085e-06,-1.97074e-08,0.601843,0.00165207,1.30173e-06,-5.65175e-10,0.603496,0.00165467,1.30004e-06,2.1968e-08,0.605152,0.00165734,1.36594e-06,-2.77024e-08,0.606811,0.00165999,1.28283e-06,2.92369e-08,0.608472,0.00166264,1.37054e-06,-2.96407e-08,0.610136,0.00166529,1.28162e-06,2.97215e-08,0.611803,0.00166795,1.37079e-06,-2.96408e-08,0.613472,0.0016706,1.28186e-06,2.92371e-08,0.615144,0.00167325,1.36957e-06,-2.77031e-08,0.616819,0.00167591,1.28647e-06,2.19708e-08,0.618496,0.00167855,1.35238e-06,-5.75407e-10,0.620176,0.00168125,1.35065e-06,-1.9669e-08,0.621858,0.00168389,1.29164e-06,1.96468e-08,0.623544,0.00168653,1.35058e-06,6.86403e-10,0.625232,0.00168924,1.35264e-06,-2.23924e-08,0.626922,0.00169187,1.28547e-06,2.92788e-08,0.628615,0.00169453,1.3733e-06,-3.51181e-08,0.630311,0.00169717,1.26795e-06,5.15889e-08,0.63201,0.00169987,1.42272e-06,-5.2028e-08,0.633711,0.00170255,1.26663e-06,3.73139e-08,0.635415,0.0017052,1.37857e-06,-3.76227e-08,0.637121,0.00170784,1.2657e-06,5.35722e-08,0.63883,0.00171054,1.42642e-06,-5.74567e-08,0.640542,0.00171322,1.25405e-06,5.70456e-08,0.642257,0.0017159,1.42519e-06,-5.15163e-08,0.643974,0.00171859,1.27064e-06,2.98103e-08,0.645694,0.00172122,1.36007e-06,-8.12016e-09,0.647417,0.00172392,1.33571e-06,2.67039e-09,0.649142,0.0017266,1.34372e-06,-2.56152e-09,0.65087,0.00172928,1.33604e-06,7.57571e-09,0.6526,0.00173197,1.35876e-06,-2.77413e-08,0.654334,0.00173461,1.27554e-06,4.3785e-08,0.65607,0.00173729,1.40689e-06,-2.81896e-08,0.657808,0.00174002,1.32233e-06,9.36893e-09,0.65955,0.00174269,1.35043e-06,-9.28617e-09,0.661294,0.00174536,1.32257e-06,2.77757e-08,0.66304,0.00174809,1.4059e-06,-4.2212e-08,0.66479,0.00175078,1.27926e-06,2.1863e-08,0.666542,0.0017534,1.34485e-06,1.43648e-08,0.668297,0.00175613,1.38795e-06,-1.97177e-08,0.670054,0.00175885,1.3288e-06,4.90115e-09,0.671814,0.00176152,1.3435e-06,1.13232e-10,0.673577,0.00176421,1.34384e-06,-5.3542e-09,0.675343,0.00176688,1.32778e-06,2.13035e-08,0.677111,0.0017696,1.39169e-06,-2.02553e-08,0.678882,0.00177232,1.33092e-06,1.13005e-10,0.680656,0.00177499,1.33126e-06,1.98031e-08,0.682432,0.00177771,1.39067e-06,-1.97211e-08,0.684211,0.00178043,1.33151e-06,-5.2349e-10,0.685993,0.00178309,1.32994e-06,2.18151e-08,0.687777,0.00178582,1.39538e-06,-2.71325e-08,0.689564,0.00178853,1.31398e-06,2.71101e-08,0.691354,0.00179124,1.39531e-06,-2.17035e-08,0.693147,0.00179396,1.3302e-06,9.92865e-11,0.694942,0.00179662,1.3305e-06,2.13063e-08,0.69674,0.00179935,1.39442e-06,-2.57198e-08,0.698541,0.00180206,1.31726e-06,2.19682e-08,0.700344,0.00180476,1.38317e-06,-2.54852e-09,0.70215,0.00180752,1.37552e-06,-1.17741e-08,0.703959,0.00181023,1.3402e-06,-9.95999e-09,0.705771,0.00181288,1.31032e-06,5.16141e-08,0.707585,0.00181566,1.46516e-06,-7.72869e-08,0.709402,0.00181836,1.2333e-06,7.87197e-08,0.711222,0.00182106,1.46946e-06,-5.87781e-08,0.713044,0.00182382,1.29312e-06,3.71834e-08,0.714869,0.00182652,1.40467e-06,-3.03511e-08,0.716697,0.00182924,1.31362e-06,2.46161e-08,0.718528,0.00183194,1.38747e-06,-8.5087e-09,0.720361,0.00183469,1.36194e-06,9.41892e-09,0.722197,0.00183744,1.3902e-06,-2.91671e-08,0.724036,0.00184014,1.3027e-06,4.76448e-08,0.725878,0.00184288,1.44563e-06,-4.22028e-08,0.727722,0.00184565,1.31902e-06,1.95682e-09,0.729569,0.00184829,1.3249e-06,3.43754e-08,0.731419,0.00185104,1.42802e-06,-2.0249e-08,0.733271,0.00185384,1.36727e-06,-1.29838e-08,0.735126,0.00185654,1.32832e-06,1.25794e-08,0.736984,0.00185923,1.36606e-06,2.22711e-08,0.738845,0.00186203,1.43287e-06,-4.20594e-08,0.740708,0.00186477,1.3067e-06,2.67571e-08,0.742574,0.00186746,1.38697e-06,-5.36424e-09,0.744443,0.00187022,1.37087e-06,-5.30023e-09,0.746315,0.00187295,1.35497e-06,2.65653e-08,0.748189,0.00187574,1.43467e-06,-4.13564e-08,0.750066,0.00187848,1.3106e-06,1.9651e-08,0.751946,0.00188116,1.36955e-06,2.23572e-08,0.753828,0.00188397,1.43663e-06,-4.9475e-08,0.755714,0.00188669,1.2882e-06,5.63335e-08,0.757602,0.00188944,1.4572e-06,-5.66499e-08,0.759493,0.00189218,1.28725e-06,5.10567e-08,0.761386,0.00189491,1.44042e-06,-2.83677e-08,0.763283,0.00189771,1.35532e-06,2.80962e-09,0.765182,0.00190042,1.36375e-06,1.71293e-08,0.767083,0.0019032,1.41513e-06,-1.17221e-08,0.768988,0.001906,1.37997e-06,-2.98453e-08,0.770895,0.00190867,1.29043e-06,7.14987e-08,0.772805,0.00191146,1.50493e-06,-7.73354e-08,0.774718,0.00191424,1.27292e-06,5.90292e-08,0.776634,0.00191697,1.45001e-06,-3.9572e-08,0.778552,0.00191975,1.33129e-06,3.9654e-08,0.780473,0.00192253,1.45026e-06,-5.94395e-08,0.782397,0.00192525,1.27194e-06,7.88945e-08,0.784324,0.00192803,1.50862e-06,-7.73249e-08,0.786253,0.00193082,1.27665e-06,5.15913e-08,0.788185,0.00193352,1.43142e-06,-9.83099e-09,0.79012,0.00193636,1.40193e-06,-1.22672e-08,0.792058,0.00193912,1.36513e-06,-7.05275e-10,0.793999,0.00194185,1.36301e-06,1.50883e-08,0.795942,0.00194462,1.40828e-06,-4.33147e-11,0.797888,0.00194744,1.40815e-06,-1.49151e-08,0.799837,0.00195021,1.3634e-06,9.93244e-11,0.801788,0.00195294,1.3637e-06,1.45179e-08,0.803743,0.00195571,1.40725e-06,1.43363e-09,0.8057,0.00195853,1.41155e-06,-2.02525e-08,0.80766,0.00196129,1.35079e-06,1.99718e-08,0.809622,0.00196405,1.41071e-06,-3.01649e-11,0.811588,0.00196687,1.41062e-06,-1.9851e-08,0.813556,0.00196964,1.35107e-06,1.98296e-08,0.815527,0.0019724,1.41056e-06,1.37485e-10,0.817501,0.00197522,1.41097e-06,-2.03796e-08,0.819477,0.00197798,1.34983e-06,2.17763e-08,0.821457,0.00198074,1.41516e-06,-7.12085e-09,0.823439,0.00198355,1.3938e-06,6.70707e-09,0.825424,0.00198636,1.41392e-06,-1.97074e-08,0.827412,0.00198913,1.35479e-06,1.25179e-08,0.829402,0.00199188,1.39235e-06,2.92405e-08,0.831396,0.00199475,1.48007e-06,-6.98755e-08,0.833392,0.0019975,1.27044e-06,7.14477e-08,0.835391,0.00200026,1.48479e-06,-3.71014e-08,0.837392,0.00200311,1.37348e-06,1.73533e-08,0.839397,0.00200591,1.42554e-06,-3.23118e-08,0.841404,0.00200867,1.32861e-06,5.2289e-08,0.843414,0.00201148,1.48547e-06,-5.76348e-08,0.845427,0.00201428,1.31257e-06,5.9041e-08,0.847443,0.00201708,1.48969e-06,-5.93197e-08,0.849461,0.00201988,1.31173e-06,5.90289e-08,0.851482,0.00202268,1.48882e-06,-5.75864e-08,0.853507,0.00202549,1.31606e-06,5.21075e-08,0.855533,0.00202828,1.47238e-06,-3.16344e-08,0.857563,0.00203113,1.37748e-06,1.48257e-08,0.859596,0.00203393,1.42196e-06,-2.76684e-08,0.861631,0.00203669,1.33895e-06,3.62433e-08,0.863669,0.00203947,1.44768e-06,1.90463e-09,0.86571,0.00204237,1.45339e-06,-4.38617e-08,0.867754,0.00204515,1.32181e-06,5.43328e-08,0.8698,0.00204796,1.48481e-06,-5.42603e-08,0.87185,0.00205076,1.32203e-06,4.34989e-08,0.873902,0.00205354,1.45252e-06,-5.26029e-10,0.875957,0.00205644,1.45095e-06,-4.13949e-08,0.878015,0.00205922,1.32676e-06,4.68962e-08,0.880075,0.00206201,1.46745e-06,-2.69807e-08,0.882139,0.00206487,1.38651e-06,1.42181e-09,0.884205,0.00206764,1.39077e-06,2.12935e-08,0.886274,0.00207049,1.45465e-06,-2.69912e-08,0.888346,0.00207332,1.37368e-06,2.70664e-08,0.890421,0.00207615,1.45488e-06,-2.16698e-08,0.892498,0.00207899,1.38987e-06,8.14756e-12,0.894579,0.00208177,1.38989e-06,2.16371e-08,0.896662,0.00208462,1.45481e-06,-2.6952e-08,0.898748,0.00208744,1.37395e-06,2.65663e-08,0.900837,0.00209027,1.45365e-06,-1.97084e-08,0.902928,0.00209312,1.39452e-06,-7.33731e-09,0.905023,0.00209589,1.37251e-06,4.90578e-08,0.90712,0.00209878,1.51968e-06,-6.96845e-08,0.90922,0.00210161,1.31063e-06,5.08664e-08,0.911323,0.00210438,1.46323e-06,-1.45717e-08,0.913429,0.00210727,1.41952e-06,7.42038e-09,0.915538,0.00211013,1.44178e-06,-1.51097e-08,0.917649,0.00211297,1.39645e-06,-6.58618e-09,0.919764,0.00211574,1.37669e-06,4.14545e-08,0.921881,0.00211862,1.50105e-06,-4.00222e-08,0.924001,0.0021215,1.38099e-06,-5.7518e-10,0.926124,0.00212426,1.37926e-06,4.23229e-08,0.92825,0.00212714,1.50623e-06,-4.9507e-08,0.930378,0.00213001,1.35771e-06,3.64958e-08,0.93251,0.00213283,1.4672e-06,-3.68713e-08,0.934644,0.00213566,1.35658e-06,5.13848e-08,0.936781,0.00213852,1.51074e-06,-4.94585e-08,0.938921,0.0021414,1.36236e-06,2.72399e-08,0.941064,0.0021442,1.44408e-06,1.0372e-10,0.943209,0.00214709,1.44439e-06,-2.76547e-08,0.945358,0.0021499,1.36143e-06,5.09106e-08,0.947509,0.00215277,1.51416e-06,-5.67784e-08,0.949663,0.00215563,1.34382e-06,5.69935e-08,0.95182,0.00215849,1.5148e-06,-5.19861e-08,0.95398,0.00216136,1.35885e-06,3.17417e-08,0.956143,0.00216418,1.45407e-06,-1.53758e-08,0.958309,0.00216704,1.40794e-06,2.97615e-08,0.960477,0.00216994,1.49723e-06,-4.40657e-08,0.962649,0.00217281,1.36503e-06,2.72919e-08,0.964823,0.00217562,1.44691e-06,-5.49729e-09,0.967,0.0021785,1.43041e-06,-5.30273e-09,0.96918,0.00218134,1.41451e-06,2.67084e-08,0.971363,0.00218425,1.49463e-06,-4.19265e-08,0.973548,0.00218711,1.36885e-06,2.17881e-08,0.975737,0.00218992,1.43422e-06,1.43789e-08,0.977928,0.00219283,1.47735e-06,-1.96989e-08,0.980122,0.00219572,1.41826e-06,4.81221e-09,0.98232,0.00219857,1.43269e-06,4.50048e-10,0.98452,0.00220144,1.43404e-06,-6.61237e-09,0.986722,0.00220429,1.41421e-06,2.59993e-08,0.988928,0.0022072,1.4922e-06,-3.77803e-08,0.991137,0.00221007,1.37886e-06,5.9127e-09,0.993348,0.00221284,1.3966e-06,1.33339e-07,0.995563,0.00221604,1.79662e-06,-5.98872e-07,0.99778,0.00222015,0.,0.};$/;"	m	namespace:cv::cuda::device::color_detail
c_sRGBGammaTab	cudev/functional/detail/color_cvt.hpp	/^    __constant__ float c_sRGBGammaTab[] = {0,7.55853e-05,0.,-7.51331e-13,7.55853e-05,7.55853e-05,-2.25399e-12,3.75665e-12,0.000151171,7.55853e-05,9.01597e-12,-6.99932e-12,0.000226756,7.55853e-05,-1.1982e-11,2.41277e-12,0.000302341,7.55853e-05,-4.74369e-12,1.19001e-11,0.000377927,7.55853e-05,3.09568e-11,-2.09095e-11,0.000453512,7.55853e-05,-3.17718e-11,1.35303e-11,0.000529097,7.55853e-05,8.81905e-12,-4.10782e-12,0.000604683,7.55853e-05,-3.50439e-12,2.90097e-12,0.000680268,7.55853e-05,5.19852e-12,-7.49607e-12,0.000755853,7.55853e-05,-1.72897e-11,2.70833e-11,0.000831439,7.55854e-05,6.39602e-11,-4.26295e-11,0.000907024,7.55854e-05,-6.39282e-11,2.70193e-11,0.000982609,7.55853e-05,1.71298e-11,-7.24017e-12,0.00105819,7.55853e-05,-4.59077e-12,1.94137e-12,0.00113378,7.55853e-05,1.23333e-12,-5.25291e-13,0.00120937,7.55853e-05,-3.42545e-13,1.59799e-13,0.00128495,7.55853e-05,1.36852e-13,-1.13904e-13,0.00136054,7.55853e-05,-2.04861e-13,2.95818e-13,0.00143612,7.55853e-05,6.82594e-13,-1.06937e-12,0.00151171,7.55853e-05,-2.52551e-12,3.98166e-12,0.00158729,7.55853e-05,9.41946e-12,-1.48573e-11,0.00166288,7.55853e-05,-3.51523e-11,5.54474e-11,0.00173846,7.55854e-05,1.3119e-10,-9.0517e-11,0.00181405,7.55854e-05,-1.40361e-10,7.37899e-11,0.00188963,7.55853e-05,8.10085e-11,-8.82272e-11,0.00196522,7.55852e-05,-1.83673e-10,1.62704e-10,0.0020408,7.55853e-05,3.04438e-10,-2.13341e-10,0.00211639,7.55853e-05,-3.35586e-10,2.25e-10,0.00219197,7.55853e-05,3.39414e-10,-2.20997e-10,0.00226756,7.55853e-05,-3.23576e-10,1.93326e-10,0.00234315,7.55853e-05,2.564e-10,-8.66446e-11,0.00241873,7.55855e-05,-3.53328e-12,-7.9578e-11,0.00249432,7.55853e-05,-2.42267e-10,1.72126e-10,0.0025699,7.55853e-05,2.74111e-10,-1.43265e-10,0.00264549,7.55854e-05,-1.55683e-10,-6.47292e-11,0.00272107,7.55849e-05,-3.4987e-10,8.67842e-10,0.00279666,7.55868e-05,2.25366e-09,-3.8723e-09,0.00287224,7.55797e-05,-9.36325e-09,1.5087e-08,0.00294783,7.56063e-05,3.58978e-08,-5.69415e-08,0.00302341,7.55072e-05,-1.34927e-07,2.13144e-07,0.003099,7.58768e-05,5.04507e-07,1.38713e-07,0.00317552,7.7302e-05,9.20646e-07,-1.55186e-07,0.00325359,7.86777e-05,4.55087e-07,4.26813e-08,0.00333276,7.97159e-05,5.83131e-07,-1.06495e-08,0.00341305,8.08502e-05,5.51182e-07,3.87467e-09,0.00349446,8.19642e-05,5.62806e-07,-1.92586e-10,0.00357698,8.30892e-05,5.62228e-07,1.0866e-09,0.00366063,8.4217e-05,5.65488e-07,5.02818e-10,0.00374542,8.53494e-05,5.66997e-07,8.60211e-10,0.00383133,8.6486e-05,5.69577e-07,7.13044e-10,0.00391839,8.76273e-05,5.71716e-07,4.78527e-10,0.00400659,8.87722e-05,5.73152e-07,1.09818e-09,0.00409594,8.99218e-05,5.76447e-07,2.50964e-10,0.00418644,9.10754e-05,5.772e-07,1.15762e-09,0.00427809,9.22333e-05,5.80672e-07,2.40865e-10,0.0043709,9.33954e-05,5.81395e-07,1.13854e-09,0.00446488,9.45616e-05,5.84811e-07,3.27267e-10,0.00456003,9.57322e-05,5.85792e-07,8.1197e-10,0.00465635,9.69062e-05,5.88228e-07,6.15823e-10,0.00475384,9.80845e-05,5.90076e-07,9.15747e-10,0.00485252,9.92674e-05,5.92823e-07,3.778e-10,0.00495238,0.000100454,5.93956e-07,8.32623e-10,0.00505343,0.000101645,5.96454e-07,4.82695e-10,0.00515567,0.000102839,5.97902e-07,9.61904e-10,0.00525911,0.000104038,6.00788e-07,3.26281e-10,0.00536375,0.00010524,6.01767e-07,9.926e-10,0.00546959,0.000106447,6.04745e-07,3.59933e-10,0.00557664,0.000107657,6.05824e-07,8.2728e-10,0.0056849,0.000108871,6.08306e-07,5.21898e-10,0.00579438,0.00011009,6.09872e-07,8.10492e-10,0.00590508,0.000111312,6.12303e-07,4.27046e-10,0.00601701,0.000112538,6.13585e-07,7.40878e-10,0.00613016,0.000113767,6.15807e-07,8.00469e-10,0.00624454,0.000115001,6.18209e-07,2.48178e-10,0.00636016,0.000116238,6.18953e-07,1.00073e-09,0.00647702,0.000117479,6.21955e-07,4.05654e-10,0.00659512,0.000118724,6.23172e-07,6.36192e-10,0.00671447,0.000119973,6.25081e-07,7.74927e-10,0.00683507,0.000121225,6.27406e-07,4.54975e-10,0.00695692,0.000122481,6.28771e-07,6.64841e-10,0.00708003,0.000123741,6.30765e-07,6.10972e-10,0.00720441,0.000125004,6.32598e-07,6.16543e-10,0.00733004,0.000126271,6.34448e-07,6.48204e-10,0.00745695,0.000127542,6.36392e-07,5.15835e-10,0.00758513,0.000128816,6.3794e-07,5.48103e-10,0.00771458,0.000130094,6.39584e-07,1.01706e-09,0.00784532,0.000131376,6.42635e-07,4.0283e-11,0.00797734,0.000132661,6.42756e-07,6.84471e-10,0.00811064,0.000133949,6.4481e-07,9.47144e-10,0.00824524,0.000135241,6.47651e-07,1.83472e-10,0.00838112,0.000136537,6.48201e-07,1.11296e-09,0.00851831,0.000137837,6.5154e-07,2.13163e-11,0.0086568,0.00013914,6.51604e-07,6.64462e-10,0.00879659,0.000140445,6.53598e-07,1.04613e-09,0.00893769,0.000141756,6.56736e-07,-1.92377e-10,0.0090801,0.000143069,6.56159e-07,1.58601e-09,0.00922383,0.000144386,6.60917e-07,-5.63754e-10,0.00936888,0.000145706,6.59226e-07,1.60033e-09,0.00951524,0.000147029,6.64027e-07,-2.49543e-10,0.00966294,0.000148356,6.63278e-07,1.26043e-09,0.00981196,0.000149687,6.67059e-07,-1.35572e-10,0.00996231,0.00015102,6.66653e-07,1.14458e-09,0.010114,0.000152357,6.70086e-07,2.13864e-10,0.010267,0.000153698,6.70728e-07,7.93856e-10,0.0104214,0.000155042,6.73109e-07,3.36077e-10,0.0105771,0.000156389,6.74118e-07,6.55765e-10,0.0107342,0.000157739,6.76085e-07,7.66211e-10,0.0108926,0.000159094,6.78384e-07,4.66116e-12,0.0110524,0.000160451,6.78398e-07,1.07775e-09,0.0112135,0.000161811,6.81631e-07,3.41023e-10,0.011376,0.000163175,6.82654e-07,3.5205e-10,0.0115398,0.000164541,6.8371e-07,1.04473e-09,0.0117051,0.000165912,6.86844e-07,1.25757e-10,0.0118717,0.000167286,6.87222e-07,3.14818e-10,0.0120396,0.000168661,6.88166e-07,1.40886e-09,0.012209,0.000170042,6.92393e-07,-3.62244e-10,0.0123797,0.000171425,6.91306e-07,9.71397e-10,0.0125518,0.000172811,6.9422e-07,2.02003e-10,0.0127253,0.0001742,6.94826e-07,1.01448e-09,0.0129002,0.000175593,6.97869e-07,3.96653e-10,0.0130765,0.00017699,6.99059e-07,1.92927e-10,0.0132542,0.000178388,6.99638e-07,6.94305e-10,0.0134333,0.00017979,7.01721e-07,7.55108e-10,0.0136138,0.000181195,7.03986e-07,1.05918e-11,0.0137957,0.000182603,7.04018e-07,1.06513e-09,0.013979,0.000184015,7.07214e-07,3.85512e-10,0.0141637,0.00018543,7.0837e-07,1.86769e-10,0.0143499,0.000186848,7.0893e-07,7.30116e-10,0.0145374,0.000188268,7.11121e-07,6.17983e-10,0.0147264,0.000189692,7.12975e-07,5.23282e-10,0.0149168,0.000191119,7.14545e-07,8.28398e-11,0.0151087,0.000192549,7.14793e-07,1.0081e-09,0.0153019,0.000193981,7.17817e-07,5.41244e-10,0.0154966,0.000195418,7.19441e-07,-3.7907e-10,0.0156928,0.000196856,7.18304e-07,1.90641e-09,0.0158903,0.000198298,7.24023e-07,-7.27387e-10,0.0160893,0.000199744,7.21841e-07,1.00317e-09,0.0162898,0.000201191,7.24851e-07,4.39949e-10,0.0164917,0.000202642,7.2617e-07,9.6234e-10,0.0166951,0.000204097,7.29057e-07,-5.64019e-10,0.0168999,0.000205554,7.27365e-07,1.29374e-09,0.0171062,0.000207012,7.31247e-07,9.77025e-10,0.017314,0.000208478,7.34178e-07,-1.47651e-09,0.0175232,0.000209942,7.29748e-07,3.06636e-09,0.0177338,0.00021141,7.38947e-07,-1.47573e-09,0.017946,0.000212884,7.3452e-07,9.7386e-10,0.0181596,0.000214356,7.37442e-07,1.30562e-09,0.0183747,0.000215835,7.41358e-07,-6.08376e-10,0.0185913,0.000217315,7.39533e-07,1.12785e-09,0.0188093,0.000218798,7.42917e-07,-1.77711e-10,0.0190289,0.000220283,7.42384e-07,1.44562e-09,0.0192499,0.000221772,7.46721e-07,-1.68825e-11,0.0194724,0.000223266,7.4667e-07,4.84533e-10,0.0196964,0.000224761,7.48124e-07,-5.85298e-11,0.0199219,0.000226257,7.47948e-07,1.61217e-09,0.0201489,0.000227757,7.52785e-07,-8.02136e-10,0.0203775,0.00022926,7.50378e-07,1.59637e-09,0.0206075,0.000230766,7.55167e-07,4.47168e-12,0.020839,0.000232276,7.55181e-07,2.48387e-10,0.021072,0.000233787,7.55926e-07,8.6474e-10,0.0213066,0.000235302,7.5852e-07,1.78299e-11,0.0215426,0.000236819,7.58573e-07,9.26567e-10,0.0217802,0.000238339,7.61353e-07,1.34529e-12,0.0220193,0.000239862,7.61357e-07,9.30659e-10,0.0222599,0.000241387,7.64149e-07,1.34529e-12,0.0225021,0.000242915,7.64153e-07,9.26567e-10,0.0227458,0.000244447,7.66933e-07,1.76215e-11,0.022991,0.00024598,7.66986e-07,8.65536e-10,0.0232377,0.000247517,7.69582e-07,2.45677e-10,0.023486,0.000249057,7.70319e-07,1.44193e-11,0.0237358,0.000250598,7.70363e-07,1.55918e-09,0.0239872,0.000252143,7.7504e-07,-6.63173e-10,0.0242401,0.000253691,7.73051e-07,1.09357e-09,0.0244946,0.000255241,7.76331e-07,1.41919e-11,0.0247506,0.000256793,7.76374e-07,7.12248e-10,0.0250082,0.000258348,7.78511e-07,8.62049e-10,0.0252673,0.000259908,7.81097e-07,-4.35061e-10,0.025528,0.000261469,7.79792e-07,8.7825e-10,0.0257902,0.000263031,7.82426e-07,6.47181e-10,0.0260541,0.000264598,7.84368e-07,2.58448e-10,0.0263194,0.000266167,7.85143e-07,1.81558e-10,0.0265864,0.000267738,7.85688e-07,8.78041e-10,0.0268549,0.000269312,7.88322e-07,3.15102e-11,0.027125,0.000270889,7.88417e-07,8.58525e-10,0.0273967,0.000272468,7.90992e-07,2.59812e-10,0.02767,0.000274051,7.91772e-07,-3.5224e-11,0.0279448,0.000275634,7.91666e-07,1.74377e-09,0.0282212,0.000277223,7.96897e-07,-1.35196e-09,0.0284992,0.000278813,7.92841e-07,1.80141e-09,0.0287788,0.000280404,7.98246e-07,-2.65629e-10,0.0290601,0.000281999,7.97449e-07,1.12374e-09,0.0293428,0.000283598,8.0082e-07,-5.04106e-10,0.0296272,0.000285198,7.99308e-07,8.92764e-10,0.0299132,0.000286799,8.01986e-07,6.58379e-10,0.0302008,0.000288405,8.03961e-07,1.98971e-10,0.0304901,0.000290014,8.04558e-07,4.08382e-10,0.0307809,0.000291624,8.05783e-07,3.01839e-11,0.0310733,0.000293236,8.05874e-07,1.33343e-09,0.0313673,0.000294851,8.09874e-07,2.2419e-10,0.031663,0.000296472,8.10547e-07,-3.67606e-10,0.0319603,0.000298092,8.09444e-07,1.24624e-09,0.0322592,0.000299714,8.13182e-07,-8.92025e-10,0.0325597,0.000301338,8.10506e-07,2.32183e-09,0.0328619,0.000302966,8.17472e-07,-9.44719e-10,0.0331657,0.000304598,8.14638e-07,1.45703e-09,0.0334711,0.000306232,8.19009e-07,-1.15805e-09,0.0337781,0.000307866,8.15535e-07,3.17507e-09,0.0340868,0.000309507,8.2506e-07,-4.09161e-09,0.0343971,0.000311145,8.12785e-07,5.74079e-09,0.0347091,0.000312788,8.30007e-07,-3.97034e-09,0.0350227,0.000314436,8.18096e-07,2.68985e-09,0.035338,0.00031608,8.26166e-07,6.61676e-10,0.0356549,0.000317734,8.28151e-07,-1.61123e-09,0.0359734,0.000319386,8.23317e-07,2.05786e-09,0.0362936,0.000321038,8.29491e-07,8.30388e-10,0.0366155,0.0003227,8.31982e-07,-1.65424e-09,0.036939,0.000324359,8.27019e-07,2.06129e-09,0.0372642,0.000326019,8.33203e-07,8.59719e-10,0.0375911,0.000327688,8.35782e-07,-1.77488e-09,0.0379196,0.000329354,8.30458e-07,2.51464e-09,0.0382498,0.000331023,8.38002e-07,-8.33135e-10,0.0385817,0.000332696,8.35502e-07,8.17825e-10,0.0389152,0.00033437,8.37956e-07,1.28718e-09,0.0392504,0.00033605,8.41817e-07,-2.2413e-09,0.0395873,0.000337727,8.35093e-07,3.95265e-09,0.0399258,0.000339409,8.46951e-07,-2.39332e-09,0.0402661,0.000341095,8.39771e-07,1.89533e-09,0.040608,0.000342781,8.45457e-07,-1.46271e-09,0.0409517,0.000344467,8.41069e-07,3.95554e-09,0.041297,0.000346161,8.52936e-07,-3.18369e-09,0.041644,0.000347857,8.43385e-07,1.32873e-09,0.0419927,0.000349548,8.47371e-07,1.59402e-09,0.0423431,0.000351248,8.52153e-07,-2.54336e-10,0.0426952,0.000352951,8.5139e-07,-5.76676e-10,0.043049,0.000354652,8.4966e-07,2.56114e-09,0.0434045,0.000356359,8.57343e-07,-2.21744e-09,0.0437617,0.000358067,8.50691e-07,2.58344e-09,0.0441206,0.000359776,8.58441e-07,-6.65826e-10,0.0444813,0.000361491,8.56444e-07,7.99218e-11,0.0448436,0.000363204,8.56684e-07,3.46063e-10,0.0452077,0.000364919,8.57722e-07,2.26116e-09,0.0455734,0.000366641,8.64505e-07,-1.94005e-09,0.045941,0.000368364,8.58685e-07,1.77384e-09,0.0463102,0.000370087,8.64007e-07,-1.43005e-09,0.0466811,0.000371811,8.59717e-07,3.94634e-09,0.0470538,0.000373542,8.71556e-07,-3.17946e-09,0.0474282,0.000375276,8.62017e-07,1.32104e-09,0.0478043,0.000377003,8.6598e-07,1.62045e-09,0.0481822,0.00037874,8.70842e-07,-3.52297e-10,0.0485618,0.000380481,8.69785e-07,-2.11211e-10,0.0489432,0.00038222,8.69151e-07,1.19716e-09,0.0493263,0.000383962,8.72743e-07,-8.52026e-10,0.0497111,0.000385705,8.70187e-07,2.21092e-09,0.0500977,0.000387452,8.76819e-07,-5.41339e-10,0.050486,0.000389204,8.75195e-07,-4.5361e-11,0.0508761,0.000390954,8.75059e-07,7.22669e-10,0.0512679,0.000392706,8.77227e-07,8.79936e-10,0.0516615,0.000394463,8.79867e-07,-5.17048e-10,0.0520568,0.000396222,8.78316e-07,1.18833e-09,0.0524539,0.000397982,8.81881e-07,-5.11022e-10,0.0528528,0.000399744,8.80348e-07,8.55683e-10,0.0532534,0.000401507,8.82915e-07,8.13562e-10,0.0536558,0.000403276,8.85356e-07,-3.84603e-10,0.05406,0.000405045,8.84202e-07,7.24962e-10,0.0544659,0.000406816,8.86377e-07,1.20986e-09,0.0548736,0.000408592,8.90006e-07,-1.83896e-09,0.0552831,0.000410367,8.84489e-07,2.42071e-09,0.0556944,0.000412143,8.91751e-07,-3.93413e-10,0.0561074,0.000413925,8.90571e-07,-8.46967e-10,0.0565222,0.000415704,8.8803e-07,3.78122e-09,0.0569388,0.000417491,8.99374e-07,-3.1021e-09,0.0573572,0.000419281,8.90068e-07,1.17658e-09,0.0577774,0.000421064,8.93597e-07,2.12117e-09,0.0581993,0.000422858,8.99961e-07,-2.21068e-09,0.0586231,0.000424651,8.93329e-07,2.9961e-09,0.0590486,0.000426447,9.02317e-07,-2.32311e-09,0.059476,0.000428244,8.95348e-07,2.57122e-09,0.0599051,0.000430043,9.03062e-07,-5.11098e-10,0.0603361,0.000431847,9.01528e-07,-5.27166e-10,0.0607688,0.000433649,8.99947e-07,2.61984e-09,0.0612034,0.000435457,9.07806e-07,-2.50141e-09,0.0616397,0.000437265,9.00302e-07,3.66045e-09,0.0620779,0.000439076,9.11283e-07,-4.68977e-09,0.0625179,0.000440885,8.97214e-07,7.64783e-09,0.0629597,0.000442702,9.20158e-07,-7.27499e-09,0.0634033,0.000444521,8.98333e-07,6.55113e-09,0.0638487,0.000446337,9.17986e-07,-4.02844e-09,0.0642959,0.000448161,9.05901e-07,2.11196e-09,0.064745,0.000449979,9.12236e-07,3.03125e-09,0.0651959,0.000451813,9.2133e-07,-6.78648e-09,0.0656486,0.000453635,9.00971e-07,9.21375e-09,0.0661032,0.000455464,9.28612e-07,-7.71684e-09,0.0665596,0.000457299,9.05462e-07,6.7522e-09,0.0670178,0.00045913,9.25718e-07,-4.3907e-09,0.0674778,0.000460968,9.12546e-07,3.36e-09,0.0679397,0.000462803,9.22626e-07,-1.59876e-09,0.0684034,0.000464644,9.1783e-07,3.0351e-09,0.068869,0.000466488,9.26935e-07,-3.09101e-09,0.0693364,0.000468333,9.17662e-07,1.8785e-09,0.0698057,0.000470174,9.23298e-07,3.02733e-09,0.0702768,0.00047203,9.3238e-07,-6.53722e-09,0.0707497,0.000473875,9.12768e-07,8.22054e-09,0.0712245,0.000475725,9.37429e-07,-3.99325e-09,0.0717012,0.000477588,9.2545e-07,3.01839e-10,0.0721797,0.00047944,9.26355e-07,2.78597e-09,0.0726601,0.000481301,9.34713e-07,-3.99507e-09,0.0731423,0.000483158,9.22728e-07,5.7435e-09,0.0736264,0.000485021,9.39958e-07,-4.07776e-09,0.0741123,0.000486888,9.27725e-07,3.11695e-09,0.0746002,0.000488753,9.37076e-07,-9.39394e-10,0.0750898,0.000490625,9.34258e-07,6.4055e-10,0.0755814,0.000492495,9.3618e-07,-1.62265e-09,0.0760748,0.000494363,9.31312e-07,5.84995e-09,0.0765701,0.000496243,9.48861e-07,-6.87601e-09,0.0770673,0.00049812,9.28233e-07,6.75296e-09,0.0775664,0.000499997,9.48492e-07,-5.23467e-09,0.0780673,0.000501878,9.32788e-07,6.73523e-09,0.0785701,0.000503764,9.52994e-07,-6.80514e-09,0.0790748,0.000505649,9.32578e-07,5.5842e-09,0.0795814,0.000507531,9.49331e-07,-6.30583e-10,0.0800899,0.000509428,9.47439e-07,-3.0618e-09,0.0806003,0.000511314,9.38254e-07,5.4273e-09,0.0811125,0.000513206,9.54536e-07,-3.74627e-09,0.0816267,0.000515104,9.43297e-07,2.10713e-09,0.0821427,0.000516997,9.49618e-07,2.76839e-09,0.0826607,0.000518905,9.57924e-07,-5.73006e-09,0.0831805,0.000520803,9.40733e-07,5.25072e-09,0.0837023,0.0005227,9.56486e-07,-3.71718e-10,0.084226,0.000524612,9.5537e-07,-3.76404e-09,0.0847515,0.000526512,9.44078e-07,7.97735e-09,0.085279,0.000528424,9.6801e-07,-5.79367e-09,0.0858084,0.000530343,9.50629e-07,2.96268e-10,0.0863397,0.000532245,9.51518e-07,4.6086e-09,0.0868729,0.000534162,9.65344e-07,-3.82947e-09,0.087408,0.000536081,9.53856e-07,3.25861e-09,0.087945,0.000537998,9.63631e-07,-1.7543e-09,0.088484,0.00053992,9.58368e-07,3.75849e-09,0.0890249,0.000541848,9.69644e-07,-5.82891e-09,0.0895677,0.00054377,9.52157e-07,4.65593e-09,0.0901124,0.000545688,9.66125e-07,2.10643e-09,0.0906591,0.000547627,9.72444e-07,-5.63099e-09,0.0912077,0.000549555,9.55551e-07,5.51627e-09,0.0917582,0.000551483,9.721e-07,-1.53292e-09,0.0923106,0.000553422,9.67501e-07,6.15311e-10,0.092865,0.000555359,9.69347e-07,-9.28291e-10,0.0934213,0.000557295,9.66562e-07,3.09774e-09,0.0939796,0.000559237,9.75856e-07,-4.01186e-09,0.0945398,0.000561177,9.6382e-07,5.49892e-09,0.095102,0.000563121,9.80317e-07,-3.08258e-09,0.0956661,0.000565073,9.71069e-07,-6.19176e-10,0.0962321,0.000567013,9.69212e-07,5.55932e-09,0.0968001,0.000568968,9.8589e-07,-6.71704e-09,0.09737,0.00057092,9.65738e-07,6.40762e-09,0.0979419,0.00057287,9.84961e-07,-4.0122e-09,0.0985158,0.000574828,9.72925e-07,2.19059e-09,0.0990916,0.000576781,9.79496e-07,2.70048e-09,0.0996693,0.000578748,9.87598e-07,-5.54193e-09,0.100249,0.000580706,9.70972e-07,4.56597e-09,0.100831,0.000582662,9.8467e-07,2.17923e-09,0.101414,0.000584638,9.91208e-07,-5.83232e-09,0.102,0.000586603,9.73711e-07,6.24884e-09,0.102588,0.000588569,9.92457e-07,-4.26178e-09,0.103177,0.000590541,9.79672e-07,3.34781e-09,0.103769,0.00059251,9.89715e-07,-1.67904e-09,0.104362,0.000594485,9.84678e-07,3.36839e-09,0.104958,0.000596464,9.94783e-07,-4.34397e-09,0.105555,0.000598441,9.81751e-07,6.55696e-09,0.106155,0.000600424,1.00142e-06,-6.98272e-09,0.106756,0.000602406,9.80474e-07,6.4728e-09,0.107359,0.000604386,9.99893e-07,-4.00742e-09,0.107965,0.000606374,9.8787e-07,2.10654e-09,0.108572,0.000608356,9.9419e-07,3.0318e-09,0.109181,0.000610353,1.00329e-06,-6.7832e-09,0.109793,0.00061234,9.82936e-07,9.1998e-09,0.110406,0.000614333,1.01054e-06,-7.6642e-09,0.111021,0.000616331,9.87543e-07,6.55579e-09,0.111639,0.000618326,1.00721e-06,-3.65791e-09,0.112258,0.000620329,9.96236e-07,6.25467e-10,0.112879,0.000622324,9.98113e-07,1.15593e-09,0.113503,0.000624323,1.00158e-06,2.20158e-09,0.114128,0.000626333,1.00819e-06,-2.51191e-09,0.114755,0.000628342,1.00065e-06,3.95517e-10,0.115385,0.000630345,1.00184e-06,9.29807e-10,0.116016,0.000632351,1.00463e-06,3.33599e-09,0.116649,0.00063437,1.01463e-06,-6.82329e-09,0.117285,0.000636379,9.94163e-07,9.05595e-09,0.117922,0.000638395,1.02133e-06,-7.04862e-09,0.118562,0.000640416,1.00019e-06,4.23737e-09,0.119203,0.000642429,1.0129e-06,-2.45033e-09,0.119847,0.000644448,1.00555e-06,5.56395e-09,0.120492,0.000646475,1.02224e-06,-4.9043e-09,0.121139,0.000648505,1.00753e-06,-8.47952e-10,0.121789,0.000650518,1.00498e-06,8.29622e-09,0.122441,0.000652553,1.02987e-06,-9.98538e-09,0.123094,0.000654582,9.99914e-07,9.2936e-09,0.12375,0.00065661,1.02779e-06,-4.83707e-09,0.124407,0.000658651,1.01328e-06,2.60411e-09,0.125067,0.000660685,1.0211e-06,-5.57945e-09,0.125729,0.000662711,1.00436e-06,1.22631e-08,0.126392,0.000664756,1.04115e-06,-1.36704e-08,0.127058,0.000666798,1.00014e-06,1.26161e-08,0.127726,0.000668836,1.03798e-06,-6.99155e-09,0.128396,0.000670891,1.01701e-06,4.48836e-10,0.129068,0.000672926,1.01836e-06,5.19606e-09,0.129742,0.000674978,1.03394e-06,-6.3319e-09,0.130418,0.000677027,1.01495e-06,5.2305e-09,0.131096,0.000679073,1.03064e-06,3.11123e-10,0.131776,0.000681135,1.03157e-06,-6.47511e-09,0.132458,0.000683179,1.01215e-06,1.06882e-08,0.133142,0.000685235,1.04421e-06,-6.47519e-09,0.133829,0.000687304,1.02479e-06,3.11237e-10,0.134517,0.000689355,1.02572e-06,5.23035e-09,0.135207,0.000691422,1.04141e-06,-6.3316e-09,0.1359,0.000693486,1.02242e-06,5.19484e-09,0.136594,0.000695546,1.038e-06,4.53497e-10,0.137291,0.000697623,1.03936e-06,-7.00891e-09,0.137989,0.000699681,1.01834e-06,1.2681e-08,0.13869,0.000701756,1.05638e-06,-1.39128e-08,0.139393,0.000703827,1.01464e-06,1.31679e-08,0.140098,0.000705896,1.05414e-06,-8.95659e-09,0.140805,0.000707977,1.02727e-06,7.75742e-09,0.141514,0.000710055,1.05055e-06,-7.17182e-09,0.142225,0.000712135,1.02903e-06,6.02862e-09,0.142938,0.000714211,1.04712e-06,-2.04163e-09,0.143653,0.000716299,1.04099e-06,2.13792e-09,0.144371,0.000718387,1.04741e-06,-6.51009e-09,0.14509,0.000720462,1.02787e-06,9.00123e-09,0.145812,0.000722545,1.05488e-06,3.07523e-10,0.146535,0.000724656,1.0558e-06,-1.02312e-08,0.147261,0.000726737,1.02511e-06,1.0815e-08,0.147989,0.000728819,1.05755e-06,-3.22681e-09,0.148719,0.000730925,1.04787e-06,2.09244e-09,0.14945,0.000733027,1.05415e-06,-5.143e-09,0.150185,0.00073512,1.03872e-06,3.57844e-09,0.150921,0.000737208,1.04946e-06,5.73027e-09,0.151659,0.000739324,1.06665e-06,-1.15983e-08,0.152399,0.000741423,1.03185e-06,1.08605e-08,0.153142,0.000743519,1.06443e-06,-2.04106e-09,0.153886,0.000745642,1.05831e-06,-2.69642e-09,0.154633,0.00074775,1.05022e-06,-2.07425e-09,0.155382,0.000749844,1.044e-06,1.09934e-08,0.156133,0.000751965,1.07698e-06,-1.20972e-08,0.156886,0.000754083,1.04069e-06,7.59288e-09,0.157641,0.000756187,1.06347e-06,-3.37305e-09,0.158398,0.000758304,1.05335e-06,5.89921e-09,0.159158,0.000760428,1.07104e-06,-5.32248e-09,0.159919,0.000762554,1.05508e-06,4.8927e-10,0.160683,0.000764666,1.05654e-06,3.36547e-09,0.161448,0.000766789,1.06664e-06,9.50081e-10,0.162216,0.000768925,1.06949e-06,-7.16568e-09,0.162986,0.000771043,1.04799e-06,1.28114e-08,0.163758,0.000773177,1.08643e-06,-1.42774e-08,0.164533,0.000775307,1.0436e-06,1.44956e-08,0.165309,0.000777438,1.08708e-06,-1.39025e-08,0.166087,0.00077957,1.04538e-06,1.13118e-08,0.166868,0.000781695,1.07931e-06,-1.54224e-09,0.167651,0.000783849,1.07468e-06,-5.14312e-09,0.168436,0.000785983,1.05925e-06,7.21381e-09,0.169223,0.000788123,1.0809e-06,-8.81096e-09,0.170012,0.000790259,1.05446e-06,1.31289e-08,0.170803,0.000792407,1.09385e-06,-1.39022e-08,0.171597,0.000794553,1.05214e-06,1.26775e-08,0.172392,0.000796695,1.09018e-06,-7.00557e-09,0.17319,0.000798855,1.06916e-06,4.43796e-10,0.17399,0.000800994,1.07049e-06,5.23031e-09,0.174792,0.000803151,1.08618e-06,-6.46397e-09,0.175596,0.000805304,1.06679e-06,5.72444e-09,0.176403,0.000807455,1.08396e-06,-1.53254e-09,0.177211,0.000809618,1.07937e-06,4.05673e-10,0.178022,0.000811778,1.08058e-06,-9.01916e-11,0.178835,0.000813939,1.08031e-06,-4.49821e-11,0.17965,0.000816099,1.08018e-06,2.70234e-10,0.180467,0.00081826,1.08099e-06,-1.03603e-09,0.181286,0.000820419,1.07788e-06,3.87392e-09,0.182108,0.000822587,1.0895e-06,4.41522e-10,0.182932,0.000824767,1.09083e-06,-5.63997e-09,0.183758,0.000826932,1.07391e-06,7.21707e-09,0.184586,0.000829101,1.09556e-06,-8.32718e-09,0.185416,0.000831267,1.07058e-06,1.11907e-08,0.186248,0.000833442,1.10415e-06,-6.63336e-09,0.187083,0.00083563,1.08425e-06,4.41484e-10,0.187919,0.0008378,1.08557e-06,4.86754e-09,0.188758,0.000839986,1.10017e-06,-5.01041e-09,0.189599,0.000842171,1.08514e-06,2.72811e-10,0.190443,0.000844342,1.08596e-06,3.91916e-09,0.191288,0.000846526,1.09772e-06,-1.04819e-09,0.192136,0.000848718,1.09457e-06,2.73531e-10,0.192985,0.000850908,1.0954e-06,-4.58916e-11,0.193837,0.000853099,1.09526e-06,-9.01158e-11,0.194692,0.000855289,1.09499e-06,4.06506e-10,0.195548,0.00085748,1.09621e-06,-1.53595e-09,0.196407,0.000859668,1.0916e-06,5.73717e-09,0.197267,0.000861869,1.10881e-06,-6.51164e-09,0.19813,0.000864067,1.08928e-06,5.40831e-09,0.198995,0.000866261,1.1055e-06,-2.20401e-10,0.199863,0.000868472,1.10484e-06,-4.52652e-09,0.200732,0.000870668,1.09126e-06,3.42508e-09,0.201604,0.000872861,1.10153e-06,5.72762e-09,0.202478,0.000875081,1.11872e-06,-1.14344e-08,0.203354,0.000877284,1.08441e-06,1.02076e-08,0.204233,0.000879484,1.11504e-06,4.06355e-10,0.205113,0.000881715,1.11626e-06,-1.18329e-08,0.205996,0.000883912,1.08076e-06,1.71227e-08,0.206881,0.000886125,1.13213e-06,-1.19546e-08,0.207768,0.000888353,1.09626e-06,8.93465e-10,0.208658,0.000890548,1.09894e-06,8.38062e-09,0.209549,0.000892771,1.12408e-06,-4.61353e-09,0.210443,0.000895006,1.11024e-06,-4.82756e-09,0.211339,0.000897212,1.09576e-06,9.02245e-09,0.212238,0.00089943,1.12283e-06,-1.45997e-09,0.213138,0.000901672,1.11845e-06,-3.18255e-09,0.214041,0.000903899,1.1089e-06,-7.11073e-10,0.214946,0.000906115,1.10677e-06,6.02692e-09,0.215853,0.000908346,1.12485e-06,-8.49548e-09,0.216763,0.00091057,1.09936e-06,1.30537e-08,0.217675,0.000912808,1.13852e-06,-1.3917e-08,0.218588,0.000915044,1.09677e-06,1.28121e-08,0.219505,0.000917276,1.13521e-06,-7.5288e-09,0.220423,0.000919523,1.11262e-06,2.40205e-09,0.221344,0.000921756,1.11983e-06,-2.07941e-09,0.222267,0.000923989,1.11359e-06,5.91551e-09,0.223192,0.000926234,1.13134e-06,-6.68149e-09,0.224119,0.000928477,1.11129e-06,5.90929e-09,0.225049,0.000930717,1.12902e-06,-2.05436e-09,0.22598,0.000932969,1.12286e-06,2.30807e-09,0.226915,0.000935222,1.12978e-06,-7.17796e-09,0.227851,0.00093746,1.10825e-06,1.15028e-08,0.228789,0.000939711,1.14276e-06,-9.03083e-09,0.22973,0.000941969,1.11566e-06,9.71932e-09,0.230673,0.00094423,1.14482e-06,-1.49452e-08,0.231619,0.000946474,1.09998e-06,2.02591e-08,0.232566,0.000948735,1.16076e-06,-2.13879e-08,0.233516,0.000950993,1.0966e-06,2.05888e-08,0.234468,0.000953247,1.15837e-06,-1.62642e-08,0.235423,0.000955515,1.10957e-06,1.46658e-08,0.236379,0.000957779,1.15357e-06,-1.25966e-08,0.237338,0.000960048,1.11578e-06,5.91793e-09,0.238299,0.000962297,1.13353e-06,3.82602e-09,0.239263,0.000964576,1.14501e-06,-6.3208e-09,0.240229,0.000966847,1.12605e-06,6.55613e-09,0.241197,0.000969119,1.14572e-06,-5.00268e-09,0.242167,0.000971395,1.13071e-06,-1.44659e-09,0.243139,0.000973652,1.12637e-06,1.07891e-08,0.244114,0.000975937,1.15874e-06,-1.19073e-08,0.245091,0.000978219,1.12302e-06,7.03782e-09,0.246071,0.000980486,1.14413e-06,-1.34276e-09,0.247052,0.00098277,1.1401e-06,-1.66669e-09,0.248036,0.000985046,1.1351e-06,8.00935e-09,0.249022,0.00098734,1.15913e-06,-1.54694e-08,0.250011,0.000989612,1.11272e-06,2.4066e-08,0.251002,0.000991909,1.18492e-06,-2.11901e-08,0.251995,0.000994215,1.12135e-06,1.08973e-09,0.25299,0.000996461,1.12462e-06,1.68311e-08,0.253988,0.000998761,1.17511e-06,-8.8094e-09,0.254987,0.00100109,1.14868e-06,-1.13958e-08,0.25599,0.00100335,1.1145e-06,2.45902e-08,0.256994,0.00100565,1.18827e-06,-2.73603e-08,0.258001,0.00100795,1.10618e-06,2.52464e-08,0.25901,0.00101023,1.18192e-06,-1.40207e-08,0.260021,0.00101256,1.13986e-06,1.03387e-09,0.261035,0.00101484,1.14296e-06,9.8853e-09,0.262051,0.00101715,1.17262e-06,-1.07726e-08,0.263069,0.00101947,1.1403e-06,3.40272e-09,0.26409,0.00102176,1.15051e-06,-2.83827e-09,0.265113,0.00102405,1.142e-06,7.95039e-09,0.266138,0.00102636,1.16585e-06,8.39047e-10,0.267166,0.00102869,1.16836e-06,-1.13066e-08,0.268196,0.00103099,1.13444e-06,1.4585e-08,0.269228,0.00103331,1.1782e-06,-1.72314e-08,0.270262,0.00103561,1.1265e-06,2.45382e-08,0.271299,0.00103794,1.20012e-06,-2.13166e-08,0.272338,0.00104028,1.13617e-06,1.12364e-09,0.273379,0.00104255,1.13954e-06,1.68221e-08,0.274423,0.00104488,1.19001e-06,-8.80736e-09,0.275469,0.00104723,1.16358e-06,-1.13948e-08,0.276518,0.00104953,1.1294e-06,2.45839e-08,0.277568,0.00105186,1.20315e-06,-2.73361e-08,0.278621,0.00105418,1.12114e-06,2.51559e-08,0.279677,0.0010565,1.19661e-06,-1.36832e-08,0.280734,0.00105885,1.15556e-06,-2.25706e-10,0.281794,0.00106116,1.15488e-06,1.45862e-08,0.282857,0.00106352,1.19864e-06,-2.83167e-08,0.283921,0.00106583,1.11369e-06,3.90759e-08,0.284988,0.00106817,1.23092e-06,-3.85801e-08,0.286058,0.00107052,1.11518e-06,2.58375e-08,0.287129,0.00107283,1.19269e-06,-5.16498e-09,0.288203,0.0010752,1.1772e-06,-5.17768e-09,0.28928,0.00107754,1.16167e-06,-3.92671e-09,0.290358,0.00107985,1.14988e-06,2.08846e-08,0.29144,0.00108221,1.21254e-06,-2.00072e-08,0.292523,0.00108458,1.15252e-06,-4.60659e-10,0.293609,0.00108688,1.15114e-06,2.18499e-08,0.294697,0.00108925,1.21669e-06,-2.73343e-08,0.295787,0.0010916,1.13468e-06,2.78826e-08,0.29688,0.00109395,1.21833e-06,-2.45915e-08,0.297975,0.00109632,1.14456e-06,1.08787e-08,0.299073,0.00109864,1.17719e-06,1.08788e-08,0.300172,0.00110102,1.20983e-06,-2.45915e-08,0.301275,0.00110337,1.13605e-06,2.78828e-08,0.302379,0.00110573,1.2197e-06,-2.73348e-08,0.303486,0.00110808,1.1377e-06,2.18518e-08,0.304595,0.00111042,1.20325e-06,-4.67556e-10,0.305707,0.00111283,1.20185e-06,-1.99816e-08,0.306821,0.00111517,1.14191e-06,2.07891e-08,0.307937,0.00111752,1.20427e-06,-3.57026e-09,0.309056,0.00111992,1.19356e-06,-6.50797e-09,0.310177,0.00112228,1.17404e-06,-2.00165e-10,0.3113,0.00112463,1.17344e-06,7.30874e-09,0.312426,0.001127,1.19536e-06,7.67424e-10,0.313554,0.00112939,1.19767e-06,-1.03784e-08,0.314685,0.00113176,1.16653e-06,1.09437e-08,0.315818,0.00113412,1.19936e-06,-3.59406e-09,0.316953,0.00113651,1.18858e-06,3.43251e-09,0.318091,0.0011389,1.19888e-06,-1.0136e-08,0.319231,0.00114127,1.16847e-06,7.30915e-09,0.320374,0.00114363,1.1904e-06,1.07018e-08,0.321518,0.00114604,1.2225e-06,-2.03137e-08,0.322666,0.00114842,1.16156e-06,1.09484e-08,0.323815,0.00115078,1.19441e-06,6.32224e-09,0.324967,0.00115319,1.21337e-06,-6.43509e-09,0.326122,0.00115559,1.19407e-06,-1.03842e-08,0.327278,0.00115795,1.16291e-06,1.81697e-08,0.328438,0.00116033,1.21742e-06,-2.6901e-09,0.329599,0.00116276,1.20935e-06,-7.40939e-09,0.330763,0.00116515,1.18713e-06,2.52533e-09,0.331929,0.00116754,1.1947e-06,-2.69191e-09,0.333098,0.00116992,1.18663e-06,8.24218e-09,0.334269,0.00117232,1.21135e-06,-4.74377e-10,0.335443,0.00117474,1.20993e-06,-6.34471e-09,0.336619,0.00117714,1.1909e-06,-3.94922e-09,0.337797,0.00117951,1.17905e-06,2.21417e-08,0.338978,0.00118193,1.24547e-06,-2.50128e-08,0.340161,0.00118435,1.17043e-06,1.8305e-08,0.341346,0.00118674,1.22535e-06,-1.84048e-08,0.342534,0.00118914,1.17013e-06,2.55121e-08,0.343725,0.00119156,1.24667e-06,-2.40389e-08,0.344917,0.00119398,1.17455e-06,1.10389e-08,0.346113,0.00119636,1.20767e-06,9.68574e-09,0.34731,0.0011988,1.23673e-06,-1.99797e-08,0.34851,0.00120122,1.17679e-06,1.06284e-08,0.349713,0.0012036,1.20867e-06,7.26868e-09,0.350917,0.00120604,1.23048e-06,-9.90072e-09,0.352125,0.00120847,1.20078e-06,2.53177e-09,0.353334,0.00121088,1.20837e-06,-2.26199e-10,0.354546,0.0012133,1.20769e-06,-1.62705e-09,0.355761,0.00121571,1.20281e-06,6.73435e-09,0.356978,0.00121813,1.22302e-06,4.49207e-09,0.358197,0.00122059,1.23649e-06,-2.47027e-08,0.359419,0.00122299,1.16238e-06,3.47142e-08,0.360643,0.00122542,1.26653e-06,-2.47472e-08,0.36187,0.00122788,1.19229e-06,4.66965e-09,0.363099,0.00123028,1.20629e-06,6.06872e-09,0.36433,0.00123271,1.2245e-06,8.57729e-10,0.365564,0.00123516,1.22707e-06,-9.49952e-09,0.366801,0.00123759,1.19858e-06,7.33792e-09,0.36804,0.00124001,1.22059e-06,9.95025e-09,0.369281,0.00124248,1.25044e-06,-1.73366e-08,0.370525,0.00124493,1.19843e-06,-2.08464e-10,0.371771,0.00124732,1.1978e-06,1.81704e-08,0.373019,0.00124977,1.25232e-06,-1.28683e-08,0.37427,0.00125224,1.21371e-06,3.50042e-09,0.375524,0.00125468,1.22421e-06,-1.1335e-09,0.37678,0.00125712,1.22081e-06,1.03345e-09,0.378038,0.00125957,1.22391e-06,-3.00023e-09,0.379299,0.00126201,1.21491e-06,1.09676e-08,0.380562,0.00126447,1.24781e-06,-1.10676e-08,0.381828,0.00126693,1.21461e-06,3.50042e-09,0.383096,0.00126937,1.22511e-06,-2.93403e-09,0.384366,0.00127181,1.21631e-06,8.23574e-09,0.385639,0.00127427,1.24102e-06,-2.06607e-10,0.386915,0.00127675,1.2404e-06,-7.40935e-09,0.388193,0.00127921,1.21817e-06,4.1761e-11,0.389473,0.00128165,1.21829e-06,7.24223e-09,0.390756,0.0012841,1.24002e-06,7.91564e-10,0.392042,0.00128659,1.2424e-06,-1.04086e-08,0.393329,0.00128904,1.21117e-06,1.10405e-08,0.39462,0.0012915,1.24429e-06,-3.951e-09,0.395912,0.00129397,1.23244e-06,4.7634e-09,0.397208,0.00129645,1.24673e-06,-1.51025e-08,0.398505,0.0012989,1.20142e-06,2.58443e-08,0.399805,0.00130138,1.27895e-06,-2.86702e-08,0.401108,0.00130385,1.19294e-06,2.92318e-08,0.402413,0.00130632,1.28064e-06,-2.86524e-08,0.403721,0.0013088,1.19468e-06,2.57731e-08,0.405031,0.00131127,1.272e-06,-1.48355e-08,0.406343,0.00131377,1.2275e-06,3.76652e-09,0.407658,0.00131623,1.23879e-06,-2.30784e-10,0.408976,0.00131871,1.2381e-06,-2.84331e-09,0.410296,0.00132118,1.22957e-06,1.16041e-08,0.411618,0.00132367,1.26438e-06,-1.37708e-08,0.412943,0.00132616,1.22307e-06,1.36768e-08,0.41427,0.00132865,1.2641e-06,-1.1134e-08,0.4156,0.00133114,1.2307e-06,1.05714e-09,0.416933,0.00133361,1.23387e-06,6.90538e-09,0.418267,0.00133609,1.25459e-06,1.12372e-09,0.419605,0.00133861,1.25796e-06,-1.14002e-08,0.420945,0.00134109,1.22376e-06,1.46747e-08,0.422287,0.00134358,1.26778e-06,-1.7496e-08,0.423632,0.00134606,1.21529e-06,2.5507e-08,0.424979,0.00134857,1.29182e-06,-2.49272e-08,0.426329,0.00135108,1.21703e-06,1.45972e-08,0.427681,0.00135356,1.26083e-06,-3.65935e-09,0.429036,0.00135607,1.24985e-06,4.00178e-11,0.430393,0.00135857,1.24997e-06,3.49917e-09,0.431753,0.00136108,1.26047e-06,-1.40366e-08,0.433116,0.00136356,1.21836e-06,2.28448e-08,0.43448,0.00136606,1.28689e-06,-1.77378e-08,0.435848,0.00136858,1.23368e-06,1.83043e-08,0.437218,0.0013711,1.28859e-06,-2.56769e-08,0.43859,0.0013736,1.21156e-06,2.47987e-08,0.439965,0.0013761,1.28595e-06,-1.39133e-08,0.441342,0.00137863,1.24421e-06,1.05202e-09,0.442722,0.00138112,1.24737e-06,9.70507e-09,0.444104,0.00138365,1.27649e-06,-1.00698e-08,0.445489,0.00138617,1.24628e-06,7.72123e-10,0.446877,0.00138867,1.24859e-06,6.98132e-09,0.448267,0.00139118,1.26954e-06,1.10477e-09,0.449659,0.00139373,1.27285e-06,-1.14003e-08,0.451054,0.00139624,1.23865e-06,1.4694e-08,0.452452,0.00139876,1.28273e-06,-1.75734e-08,0.453852,0.00140127,1.23001e-06,2.5797e-08,0.455254,0.00140381,1.3074e-06,-2.60097e-08,0.456659,0.00140635,1.22937e-06,1.86371e-08,0.458067,0.00140886,1.28529e-06,-1.8736e-08,0.459477,0.00141137,1.22908e-06,2.65048e-08,0.46089,0.00141391,1.30859e-06,-2.76784e-08,0.462305,0.00141645,1.22556e-06,2.46043e-08,0.463722,0.00141897,1.29937e-06,-1.11341e-08,0.465143,0.00142154,1.26597e-06,-9.87033e-09,0.466565,0.00142404,1.23636e-06,2.08131e-08,0.467991,0.00142657,1.2988e-06,-1.37773e-08,0.469419,0.00142913,1.25746e-06,4.49378e-09,0.470849,0.00143166,1.27094e-06,-4.19781e-09,0.472282,0.00143419,1.25835e-06,1.22975e-08,0.473717,0.00143674,1.29524e-06,-1.51902e-08,0.475155,0.00143929,1.24967e-06,1.86608e-08,0.476596,0.00144184,1.30566e-06,-2.96506e-08,0.478039,0.00144436,1.2167e-06,4.03368e-08,0.479485,0.00144692,1.33771e-06,-4.22896e-08,0.480933,0.00144947,1.21085e-06,3.94148e-08,0.482384,0.00145201,1.32909e-06,-2.59626e-08,0.483837,0.00145459,1.2512e-06,4.83124e-09,0.485293,0.0014571,1.2657e-06,6.63757e-09,0.486751,0.00145966,1.28561e-06,-1.57911e-09,0.488212,0.00146222,1.28087e-06,-3.21468e-10,0.489676,0.00146478,1.27991e-06,2.86517e-09,0.491142,0.00146735,1.2885e-06,-1.11392e-08,0.49261,0.00146989,1.25508e-06,1.18893e-08,0.494081,0.00147244,1.29075e-06,-6.61574e-09,0.495555,0.001475,1.27091e-06,1.45736e-08,0.497031,0.00147759,1.31463e-06,-2.18759e-08,0.49851,0.00148015,1.249e-06,1.33252e-08,0.499992,0.00148269,1.28897e-06,-1.62277e-09,0.501476,0.00148526,1.28411e-06,-6.83421e-09,0.502962,0.00148781,1.2636e-06,2.89596e-08,0.504451,0.00149042,1.35048e-06,-4.93997e-08,0.505943,0.00149298,1.20228e-06,4.94299e-08,0.507437,0.00149553,1.35057e-06,-2.91107e-08,0.508934,0.00149814,1.26324e-06,7.40848e-09,0.510434,0.00150069,1.28547e-06,-5.23187e-10,0.511936,0.00150326,1.2839e-06,-5.31585e-09,0.51344,0.00150581,1.26795e-06,2.17866e-08,0.514947,0.00150841,1.33331e-06,-2.22257e-08,0.516457,0.00151101,1.26663e-06,7.51178e-09,0.517969,0.00151357,1.28917e-06,-7.82128e-09,0.519484,0.00151613,1.2657e-06,2.37733e-08,0.521002,0.00151873,1.33702e-06,-2.76674e-08,0.522522,0.00152132,1.25402e-06,2.72917e-08,0.524044,0.00152391,1.3359e-06,-2.18949e-08,0.525569,0.00152652,1.27021e-06,6.83372e-10,0.527097,0.00152906,1.27226e-06,1.91613e-08,0.528628,0.00153166,1.32974e-06,-1.77241e-08,0.53016,0.00153427,1.27657e-06,-7.86963e-09,0.531696,0.0015368,1.25296e-06,4.92027e-08,0.533234,0.00153945,1.40057e-06,-6.9732e-08,0.534775,0.00154204,1.19138e-06,5.09114e-08,0.536318,0.00154458,1.34411e-06,-1.4704e-08,0.537864,0.00154722,1.3e-06,7.9048e-09,0.539413,0.00154984,1.32371e-06,-1.69152e-08,0.540964,0.00155244,1.27297e-06,1.51355e-10,0.542517,0.00155499,1.27342e-06,1.63099e-08,0.544074,0.00155758,1.32235e-06,-5.78647e-09,0.545633,0.00156021,1.30499e-06,6.83599e-09,0.547194,0.00156284,1.3255e-06,-2.15575e-08,0.548758,0.00156543,1.26083e-06,1.97892e-08,0.550325,0.00156801,1.32019e-06,2.00525e-09,0.551894,0.00157065,1.32621e-06,-2.78103e-08,0.553466,0.00157322,1.24278e-06,4.96314e-08,0.555041,0.00157586,1.39167e-06,-5.1506e-08,0.556618,0.00157849,1.23716e-06,3.71835e-08,0.558198,0.00158107,1.34871e-06,-3.76233e-08,0.55978,0.00158366,1.23584e-06,5.37052e-08,0.561365,0.00158629,1.39695e-06,-5.79884e-08,0.562953,0.00158891,1.22299e-06,5.90392e-08,0.564543,0.00159153,1.4001e-06,-5.89592e-08,0.566136,0.00159416,1.22323e-06,5.7588e-08,0.567731,0.00159678,1.39599e-06,-5.21835e-08,0.569329,0.00159941,1.23944e-06,3.19369e-08,0.57093,0.00160199,1.33525e-06,-1.59594e-08,0.572533,0.00160461,1.28737e-06,3.19006e-08,0.574139,0.00160728,1.38307e-06,-5.20383e-08,0.575748,0.00160989,1.22696e-06,5.70431e-08,0.577359,0.00161251,1.39809e-06,-5.69247e-08,0.578973,0.00161514,1.22731e-06,5.14463e-08,0.580589,0.00161775,1.38165e-06,-2.9651e-08,0.582208,0.00162042,1.2927e-06,7.55339e-09,0.58383,0.00162303,1.31536e-06,-5.62636e-10,0.585455,0.00162566,1.31367e-06,-5.30281e-09,0.587081,0.00162827,1.29776e-06,2.17738e-08,0.588711,0.00163093,1.36309e-06,-2.21875e-08,0.590343,0.00163359,1.29652e-06,7.37164e-09,0.591978,0.00163621,1.31864e-06,-7.29907e-09,0.593616,0.00163882,1.29674e-06,2.18247e-08,0.595256,0.00164148,1.36221e-06,-2.03952e-08,0.596899,0.00164414,1.30103e-06,1.51241e-10,0.598544,0.00164675,1.30148e-06,1.97902e-08,0.600192,0.00164941,1.36085e-06,-1.97074e-08,0.601843,0.00165207,1.30173e-06,-5.65175e-10,0.603496,0.00165467,1.30004e-06,2.1968e-08,0.605152,0.00165734,1.36594e-06,-2.77024e-08,0.606811,0.00165999,1.28283e-06,2.92369e-08,0.608472,0.00166264,1.37054e-06,-2.96407e-08,0.610136,0.00166529,1.28162e-06,2.97215e-08,0.611803,0.00166795,1.37079e-06,-2.96408e-08,0.613472,0.0016706,1.28186e-06,2.92371e-08,0.615144,0.00167325,1.36957e-06,-2.77031e-08,0.616819,0.00167591,1.28647e-06,2.19708e-08,0.618496,0.00167855,1.35238e-06,-5.75407e-10,0.620176,0.00168125,1.35065e-06,-1.9669e-08,0.621858,0.00168389,1.29164e-06,1.96468e-08,0.623544,0.00168653,1.35058e-06,6.86403e-10,0.625232,0.00168924,1.35264e-06,-2.23924e-08,0.626922,0.00169187,1.28547e-06,2.92788e-08,0.628615,0.00169453,1.3733e-06,-3.51181e-08,0.630311,0.00169717,1.26795e-06,5.15889e-08,0.63201,0.00169987,1.42272e-06,-5.2028e-08,0.633711,0.00170255,1.26663e-06,3.73139e-08,0.635415,0.0017052,1.37857e-06,-3.76227e-08,0.637121,0.00170784,1.2657e-06,5.35722e-08,0.63883,0.00171054,1.42642e-06,-5.74567e-08,0.640542,0.00171322,1.25405e-06,5.70456e-08,0.642257,0.0017159,1.42519e-06,-5.15163e-08,0.643974,0.00171859,1.27064e-06,2.98103e-08,0.645694,0.00172122,1.36007e-06,-8.12016e-09,0.647417,0.00172392,1.33571e-06,2.67039e-09,0.649142,0.0017266,1.34372e-06,-2.56152e-09,0.65087,0.00172928,1.33604e-06,7.57571e-09,0.6526,0.00173197,1.35876e-06,-2.77413e-08,0.654334,0.00173461,1.27554e-06,4.3785e-08,0.65607,0.00173729,1.40689e-06,-2.81896e-08,0.657808,0.00174002,1.32233e-06,9.36893e-09,0.65955,0.00174269,1.35043e-06,-9.28617e-09,0.661294,0.00174536,1.32257e-06,2.77757e-08,0.66304,0.00174809,1.4059e-06,-4.2212e-08,0.66479,0.00175078,1.27926e-06,2.1863e-08,0.666542,0.0017534,1.34485e-06,1.43648e-08,0.668297,0.00175613,1.38795e-06,-1.97177e-08,0.670054,0.00175885,1.3288e-06,4.90115e-09,0.671814,0.00176152,1.3435e-06,1.13232e-10,0.673577,0.00176421,1.34384e-06,-5.3542e-09,0.675343,0.00176688,1.32778e-06,2.13035e-08,0.677111,0.0017696,1.39169e-06,-2.02553e-08,0.678882,0.00177232,1.33092e-06,1.13005e-10,0.680656,0.00177499,1.33126e-06,1.98031e-08,0.682432,0.00177771,1.39067e-06,-1.97211e-08,0.684211,0.00178043,1.33151e-06,-5.2349e-10,0.685993,0.00178309,1.32994e-06,2.18151e-08,0.687777,0.00178582,1.39538e-06,-2.71325e-08,0.689564,0.00178853,1.31398e-06,2.71101e-08,0.691354,0.00179124,1.39531e-06,-2.17035e-08,0.693147,0.00179396,1.3302e-06,9.92865e-11,0.694942,0.00179662,1.3305e-06,2.13063e-08,0.69674,0.00179935,1.39442e-06,-2.57198e-08,0.698541,0.00180206,1.31726e-06,2.19682e-08,0.700344,0.00180476,1.38317e-06,-2.54852e-09,0.70215,0.00180752,1.37552e-06,-1.17741e-08,0.703959,0.00181023,1.3402e-06,-9.95999e-09,0.705771,0.00181288,1.31032e-06,5.16141e-08,0.707585,0.00181566,1.46516e-06,-7.72869e-08,0.709402,0.00181836,1.2333e-06,7.87197e-08,0.711222,0.00182106,1.46946e-06,-5.87781e-08,0.713044,0.00182382,1.29312e-06,3.71834e-08,0.714869,0.00182652,1.40467e-06,-3.03511e-08,0.716697,0.00182924,1.31362e-06,2.46161e-08,0.718528,0.00183194,1.38747e-06,-8.5087e-09,0.720361,0.00183469,1.36194e-06,9.41892e-09,0.722197,0.00183744,1.3902e-06,-2.91671e-08,0.724036,0.00184014,1.3027e-06,4.76448e-08,0.725878,0.00184288,1.44563e-06,-4.22028e-08,0.727722,0.00184565,1.31902e-06,1.95682e-09,0.729569,0.00184829,1.3249e-06,3.43754e-08,0.731419,0.00185104,1.42802e-06,-2.0249e-08,0.733271,0.00185384,1.36727e-06,-1.29838e-08,0.735126,0.00185654,1.32832e-06,1.25794e-08,0.736984,0.00185923,1.36606e-06,2.22711e-08,0.738845,0.00186203,1.43287e-06,-4.20594e-08,0.740708,0.00186477,1.3067e-06,2.67571e-08,0.742574,0.00186746,1.38697e-06,-5.36424e-09,0.744443,0.00187022,1.37087e-06,-5.30023e-09,0.746315,0.00187295,1.35497e-06,2.65653e-08,0.748189,0.00187574,1.43467e-06,-4.13564e-08,0.750066,0.00187848,1.3106e-06,1.9651e-08,0.751946,0.00188116,1.36955e-06,2.23572e-08,0.753828,0.00188397,1.43663e-06,-4.9475e-08,0.755714,0.00188669,1.2882e-06,5.63335e-08,0.757602,0.00188944,1.4572e-06,-5.66499e-08,0.759493,0.00189218,1.28725e-06,5.10567e-08,0.761386,0.00189491,1.44042e-06,-2.83677e-08,0.763283,0.00189771,1.35532e-06,2.80962e-09,0.765182,0.00190042,1.36375e-06,1.71293e-08,0.767083,0.0019032,1.41513e-06,-1.17221e-08,0.768988,0.001906,1.37997e-06,-2.98453e-08,0.770895,0.00190867,1.29043e-06,7.14987e-08,0.772805,0.00191146,1.50493e-06,-7.73354e-08,0.774718,0.00191424,1.27292e-06,5.90292e-08,0.776634,0.00191697,1.45001e-06,-3.9572e-08,0.778552,0.00191975,1.33129e-06,3.9654e-08,0.780473,0.00192253,1.45026e-06,-5.94395e-08,0.782397,0.00192525,1.27194e-06,7.88945e-08,0.784324,0.00192803,1.50862e-06,-7.73249e-08,0.786253,0.00193082,1.27665e-06,5.15913e-08,0.788185,0.00193352,1.43142e-06,-9.83099e-09,0.79012,0.00193636,1.40193e-06,-1.22672e-08,0.792058,0.00193912,1.36513e-06,-7.05275e-10,0.793999,0.00194185,1.36301e-06,1.50883e-08,0.795942,0.00194462,1.40828e-06,-4.33147e-11,0.797888,0.00194744,1.40815e-06,-1.49151e-08,0.799837,0.00195021,1.3634e-06,9.93244e-11,0.801788,0.00195294,1.3637e-06,1.45179e-08,0.803743,0.00195571,1.40725e-06,1.43363e-09,0.8057,0.00195853,1.41155e-06,-2.02525e-08,0.80766,0.00196129,1.35079e-06,1.99718e-08,0.809622,0.00196405,1.41071e-06,-3.01649e-11,0.811588,0.00196687,1.41062e-06,-1.9851e-08,0.813556,0.00196964,1.35107e-06,1.98296e-08,0.815527,0.0019724,1.41056e-06,1.37485e-10,0.817501,0.00197522,1.41097e-06,-2.03796e-08,0.819477,0.00197798,1.34983e-06,2.17763e-08,0.821457,0.00198074,1.41516e-06,-7.12085e-09,0.823439,0.00198355,1.3938e-06,6.70707e-09,0.825424,0.00198636,1.41392e-06,-1.97074e-08,0.827412,0.00198913,1.35479e-06,1.25179e-08,0.829402,0.00199188,1.39235e-06,2.92405e-08,0.831396,0.00199475,1.48007e-06,-6.98755e-08,0.833392,0.0019975,1.27044e-06,7.14477e-08,0.835391,0.00200026,1.48479e-06,-3.71014e-08,0.837392,0.00200311,1.37348e-06,1.73533e-08,0.839397,0.00200591,1.42554e-06,-3.23118e-08,0.841404,0.00200867,1.32861e-06,5.2289e-08,0.843414,0.00201148,1.48547e-06,-5.76348e-08,0.845427,0.00201428,1.31257e-06,5.9041e-08,0.847443,0.00201708,1.48969e-06,-5.93197e-08,0.849461,0.00201988,1.31173e-06,5.90289e-08,0.851482,0.00202268,1.48882e-06,-5.75864e-08,0.853507,0.00202549,1.31606e-06,5.21075e-08,0.855533,0.00202828,1.47238e-06,-3.16344e-08,0.857563,0.00203113,1.37748e-06,1.48257e-08,0.859596,0.00203393,1.42196e-06,-2.76684e-08,0.861631,0.00203669,1.33895e-06,3.62433e-08,0.863669,0.00203947,1.44768e-06,1.90463e-09,0.86571,0.00204237,1.45339e-06,-4.38617e-08,0.867754,0.00204515,1.32181e-06,5.43328e-08,0.8698,0.00204796,1.48481e-06,-5.42603e-08,0.87185,0.00205076,1.32203e-06,4.34989e-08,0.873902,0.00205354,1.45252e-06,-5.26029e-10,0.875957,0.00205644,1.45095e-06,-4.13949e-08,0.878015,0.00205922,1.32676e-06,4.68962e-08,0.880075,0.00206201,1.46745e-06,-2.69807e-08,0.882139,0.00206487,1.38651e-06,1.42181e-09,0.884205,0.00206764,1.39077e-06,2.12935e-08,0.886274,0.00207049,1.45465e-06,-2.69912e-08,0.888346,0.00207332,1.37368e-06,2.70664e-08,0.890421,0.00207615,1.45488e-06,-2.16698e-08,0.892498,0.00207899,1.38987e-06,8.14756e-12,0.894579,0.00208177,1.38989e-06,2.16371e-08,0.896662,0.00208462,1.45481e-06,-2.6952e-08,0.898748,0.00208744,1.37395e-06,2.65663e-08,0.900837,0.00209027,1.45365e-06,-1.97084e-08,0.902928,0.00209312,1.39452e-06,-7.33731e-09,0.905023,0.00209589,1.37251e-06,4.90578e-08,0.90712,0.00209878,1.51968e-06,-6.96845e-08,0.90922,0.00210161,1.31063e-06,5.08664e-08,0.911323,0.00210438,1.46323e-06,-1.45717e-08,0.913429,0.00210727,1.41952e-06,7.42038e-09,0.915538,0.00211013,1.44178e-06,-1.51097e-08,0.917649,0.00211297,1.39645e-06,-6.58618e-09,0.919764,0.00211574,1.37669e-06,4.14545e-08,0.921881,0.00211862,1.50105e-06,-4.00222e-08,0.924001,0.0021215,1.38099e-06,-5.7518e-10,0.926124,0.00212426,1.37926e-06,4.23229e-08,0.92825,0.00212714,1.50623e-06,-4.9507e-08,0.930378,0.00213001,1.35771e-06,3.64958e-08,0.93251,0.00213283,1.4672e-06,-3.68713e-08,0.934644,0.00213566,1.35658e-06,5.13848e-08,0.936781,0.00213852,1.51074e-06,-4.94585e-08,0.938921,0.0021414,1.36236e-06,2.72399e-08,0.941064,0.0021442,1.44408e-06,1.0372e-10,0.943209,0.00214709,1.44439e-06,-2.76547e-08,0.945358,0.0021499,1.36143e-06,5.09106e-08,0.947509,0.00215277,1.51416e-06,-5.67784e-08,0.949663,0.00215563,1.34382e-06,5.69935e-08,0.95182,0.00215849,1.5148e-06,-5.19861e-08,0.95398,0.00216136,1.35885e-06,3.17417e-08,0.956143,0.00216418,1.45407e-06,-1.53758e-08,0.958309,0.00216704,1.40794e-06,2.97615e-08,0.960477,0.00216994,1.49723e-06,-4.40657e-08,0.962649,0.00217281,1.36503e-06,2.72919e-08,0.964823,0.00217562,1.44691e-06,-5.49729e-09,0.967,0.0021785,1.43041e-06,-5.30273e-09,0.96918,0.00218134,1.41451e-06,2.67084e-08,0.971363,0.00218425,1.49463e-06,-4.19265e-08,0.973548,0.00218711,1.36885e-06,2.17881e-08,0.975737,0.00218992,1.43422e-06,1.43789e-08,0.977928,0.00219283,1.47735e-06,-1.96989e-08,0.980122,0.00219572,1.41826e-06,4.81221e-09,0.98232,0.00219857,1.43269e-06,4.50048e-10,0.98452,0.00220144,1.43404e-06,-6.61237e-09,0.986722,0.00220429,1.41421e-06,2.59993e-08,0.988928,0.0022072,1.4922e-06,-3.77803e-08,0.991137,0.00221007,1.37886e-06,5.9127e-09,0.993348,0.00221284,1.3966e-06,1.33339e-07,0.995563,0.00221604,1.79662e-06,-5.98872e-07,0.99778,0.00222015,0.,0.};$/;"	m	namespace:cv::cudev::color_cvt_detail
c_sRGBGammaTab_b	core/cuda/detail/color_detail.hpp	/^        __constant__ ushort c_sRGBGammaTab_b[] = {0,1,1,2,2,3,4,4,5,6,6,7,8,8,9,10,11,11,12,13,14,15,16,17,19,20,21,22,24,25,26,28,29,31,33,34,36,38,40,41,43,45,47,49,51,54,56,58,60,63,65,68,70,73,75,78,81,83,86,89,92,95,98,101,105,108,111,115,118,121,125,129,132,136,140,144,147,151,155,160,164,168,172,176,181,185,190,194,199,204,209,213,218,223,228,233,239,244,249,255,260,265,271,277,282,288,294,300,306,312,318,324,331,337,343,350,356,363,370,376,383,390,397,404,411,418,426,433,440,448,455,463,471,478,486,494,502,510,518,527,535,543,552,560,569,578,586,595,604,613,622,631,641,650,659,669,678,688,698,707,717,727,737,747,757,768,778,788,799,809,820,831,842,852,863,875,886,897,908,920,931,943,954,966,978,990,1002,1014,1026,1038,1050,1063,1075,1088,1101,1113,1126,1139,1152,1165,1178,1192,1205,1218,1232,1245,1259,1273,1287,1301,1315,1329,1343,1357,1372,1386,1401,1415,1430,1445,1460,1475,1490,1505,1521,1536,1551,1567,1583,1598,1614,1630,1646,1662,1678,1695,1711,1728,1744,1761,1778,1794,1811,1828,1846,1863,1880,1897,1915,1933,1950,1968,1986,2004,2022,2040};$/;"	m	namespace:cv::cuda::device::color_detail
c_sRGBGammaTab_b	cudev/functional/detail/color_cvt.hpp	/^    __constant__ ushort c_sRGBGammaTab_b[] = {0,1,1,2,2,3,4,4,5,6,6,7,8,8,9,10,11,11,12,13,14,15,16,17,19,20,21,22,24,25,26,28,29,31,33,34,36,38,40,41,43,45,47,49,51,54,56,58,60,63,65,68,70,73,75,78,81,83,86,89,92,95,98,101,105,108,111,115,118,121,125,129,132,136,140,144,147,151,155,160,164,168,172,176,181,185,190,194,199,204,209,213,218,223,228,233,239,244,249,255,260,265,271,277,282,288,294,300,306,312,318,324,331,337,343,350,356,363,370,376,383,390,397,404,411,418,426,433,440,448,455,463,471,478,486,494,502,510,518,527,535,543,552,560,569,578,586,595,604,613,622,631,641,650,659,669,678,688,698,707,717,727,737,747,757,768,778,788,799,809,820,831,842,852,863,875,886,897,908,920,931,943,954,966,978,990,1002,1014,1026,1038,1050,1063,1075,1088,1101,1113,1126,1139,1152,1165,1178,1192,1205,1218,1232,1245,1259,1273,1287,1301,1315,1329,1343,1357,1372,1386,1401,1415,1430,1445,1460,1475,1490,1505,1521,1536,1551,1567,1583,1598,1614,1630,1646,1662,1678,1695,1711,1728,1744,1761,1778,1794,1811,1828,1846,1863,1880,1897,1915,1933,1950,1968,1986,2004,2022,2040};$/;"	m	namespace:cv::cudev::color_cvt_detail
c_sRGBInvGammaTab	core/cuda/detail/color_detail.hpp	/^        __constant__ float c_sRGBInvGammaTab[] = {0,0.0126255,0.,-8.33961e-06,0.0126172,0.0126005,-2.50188e-05,4.1698e-05,0.0252344,0.0126756,0.000100075,-0.000158451,0.0378516,0.0124004,-0.000375277,-0.000207393,0.0496693,0.0110276,-0.000997456,0.00016837,0.0598678,0.00953783,-0.000492346,2.07235e-05,0.068934,0.00861531,-0.000430176,3.62876e-05,0.0771554,0.00786382,-0.000321313,1.87625e-05,0.0847167,0.00727748,-0.000265025,1.53594e-05,0.0917445,0.00679351,-0.000218947,1.10545e-05,0.0983301,0.00638877,-0.000185784,8.66984e-06,0.104542,0.00604322,-0.000159774,6.82996e-06,0.110432,0.00574416,-0.000139284,5.51008e-06,0.116042,0.00548212,-0.000122754,4.52322e-06,0.121406,0.00525018,-0.000109184,3.75557e-06,0.126551,0.00504308,-9.79177e-05,3.17134e-06,0.131499,0.00485676,-8.84037e-05,2.68469e-06,0.13627,0.004688,-8.03496e-05,2.31725e-06,0.14088,0.00453426,-7.33978e-05,2.00868e-06,0.145343,0.00439349,-6.73718e-05,1.74775e-06,0.149671,0.00426399,-6.21286e-05,1.53547e-06,0.153875,0.00414434,-5.75222e-05,1.364e-06,0.157963,0.00403338,-5.34301e-05,1.20416e-06,0.161944,0.00393014,-4.98177e-05,1.09114e-06,0.165825,0.00383377,-4.65443e-05,9.57987e-07,0.169613,0.00374356,-4.36703e-05,8.88359e-07,0.173314,0.00365888,-4.10052e-05,7.7849e-07,0.176933,0.00357921,-3.86697e-05,7.36254e-07,0.180474,0.00350408,-3.6461e-05,6.42534e-07,0.183942,0.00343308,-3.45334e-05,6.12614e-07,0.187342,0.00336586,-3.26955e-05,5.42894e-07,0.190675,0.00330209,-3.10669e-05,5.08967e-07,0.193947,0.00324149,-2.954e-05,4.75977e-07,0.197159,0.00318383,-2.8112e-05,4.18343e-07,0.200315,0.00312887,-2.6857e-05,4.13651e-07,0.203418,0.00307639,-2.5616e-05,3.70847e-07,0.206469,0.00302627,-2.45035e-05,3.3813e-07,0.209471,0.00297828,-2.34891e-05,3.32999e-07,0.212426,0.0029323,-2.24901e-05,2.96826e-07,0.215336,0.00288821,-2.15996e-05,2.82736e-07,0.218203,0.00284586,-2.07514e-05,2.70961e-07,0.221029,0.00280517,-1.99385e-05,2.42744e-07,0.223814,0.00276602,-1.92103e-05,2.33277e-07,0.226561,0.0027283,-1.85105e-05,2.2486e-07,0.229271,0.00269195,-1.78359e-05,2.08383e-07,0.231945,0.00265691,-1.72108e-05,1.93305e-07,0.234585,0.00262307,-1.66308e-05,1.80687e-07,0.237192,0.00259035,-1.60888e-05,1.86632e-07,0.239766,0.00255873,-1.55289e-05,1.60569e-07,0.24231,0.00252815,-1.50472e-05,1.54566e-07,0.244823,0.00249852,-1.45835e-05,1.59939e-07,0.247307,0.00246983,-1.41037e-05,1.29549e-07,0.249763,0.00244202,-1.3715e-05,1.41429e-07,0.252191,0.00241501,-1.32907e-05,1.39198e-07,0.254593,0.00238885,-1.28731e-05,1.06444e-07,0.256969,0.00236342,-1.25538e-05,1.2048e-07,0.25932,0.00233867,-1.21924e-05,1.26892e-07,0.261647,0.00231467,-1.18117e-05,8.72084e-08,0.26395,0.00229131,-1.15501e-05,1.20323e-07,0.26623,0.00226857,-1.11891e-05,8.71514e-08,0.268487,0.00224645,-1.09276e-05,9.73165e-08,0.270723,0.00222489,-1.06357e-05,8.98259e-08,0.272937,0.00220389,-1.03662e-05,7.98218e-08,0.275131,0.00218339,-1.01267e-05,9.75254e-08,0.277304,0.00216343,-9.83416e-06,6.65195e-08,0.279458,0.00214396,-9.63461e-06,8.34313e-08,0.281592,0.00212494,-9.38431e-06,7.65919e-08,0.283708,0.00210641,-9.15454e-06,5.7236e-08,0.285805,0.00208827,-8.98283e-06,8.18939e-08,0.287885,0.00207055,-8.73715e-06,6.2224e-08,0.289946,0.00205326,-8.55047e-06,5.66388e-08,0.291991,0.00203633,-8.38056e-06,6.88491e-08,0.294019,0.00201978,-8.17401e-06,5.53955e-08,0.296031,0.00200359,-8.00782e-06,6.71971e-08,0.298027,0.00198778,-7.80623e-06,3.34439e-08,0.300007,0.00197227,-7.7059e-06,6.7248e-08,0.301971,0.00195706,-7.50416e-06,5.51915e-08,0.303921,0.00194221,-7.33858e-06,3.98124e-08,0.305856,0.00192766,-7.21915e-06,5.37795e-08,0.307776,0.00191338,-7.05781e-06,4.30919e-08,0.309683,0.00189939,-6.92853e-06,4.20744e-08,0.311575,0.00188566,-6.80231e-06,5.68321e-08,0.313454,0.00187223,-6.63181e-06,2.86195e-08,0.31532,0.00185905,-6.54595e-06,3.73075e-08,0.317172,0.00184607,-6.43403e-06,6.05684e-08,0.319012,0.00183338,-6.25233e-06,1.84426e-08,0.320839,0.00182094,-6.197e-06,4.44757e-08,0.322654,0.00180867,-6.06357e-06,4.20729e-08,0.324456,0.00179667,-5.93735e-06,2.56511e-08,0.326247,0.00178488,-5.8604e-06,3.41368e-08,0.328026,0.00177326,-5.75799e-06,4.64177e-08,0.329794,0.00176188,-5.61874e-06,1.86107e-08,0.33155,0.0017507,-5.5629e-06,2.81511e-08,0.333295,0.00173966,-5.47845e-06,4.75987e-08,0.335029,0.00172884,-5.33565e-06,1.98726e-08,0.336753,0.00171823,-5.27604e-06,2.19226e-08,0.338466,0.00170775,-5.21027e-06,4.14483e-08,0.340169,0.00169745,-5.08592e-06,2.09017e-08,0.341861,0.00168734,-5.02322e-06,2.39561e-08,0.343543,0.00167737,-4.95135e-06,3.22852e-08,0.345216,0.00166756,-4.85449e-06,2.57173e-08,0.346878,0.00165793,-4.77734e-06,1.38569e-08,0.348532,0.00164841,-4.73577e-06,3.80634e-08,0.350175,0.00163906,-4.62158e-06,1.27043e-08,0.35181,0.00162985,-4.58347e-06,3.03279e-08,0.353435,0.00162078,-4.49249e-06,1.49961e-08,0.355051,0.00161184,-4.4475e-06,2.88977e-08,0.356659,0.00160303,-4.3608e-06,1.84241e-08,0.358257,0.00159436,-4.30553e-06,1.6616e-08,0.359848,0.0015858,-4.25568e-06,3.43218e-08,0.361429,0.00157739,-4.15272e-06,-4.89172e-09,0.363002,0.00156907,-4.16739e-06,4.48498e-08,0.364567,0.00156087,-4.03284e-06,4.30676e-09,0.366124,0.00155282,-4.01992e-06,2.73303e-08,0.367673,0.00154486,-3.93793e-06,5.58036e-09,0.369214,0.001537,-3.92119e-06,3.97554e-08,0.370747,0.00152928,-3.80193e-06,-1.55904e-08,0.372272,0.00152163,-3.8487e-06,5.24081e-08,0.37379,0.00151409,-3.69147e-06,-1.52272e-08,0.375301,0.00150666,-3.73715e-06,3.83028e-08,0.376804,0.0014993,-3.62225e-06,1.10278e-08,0.378299,0.00149209,-3.58916e-06,6.99326e-09,0.379788,0.00148493,-3.56818e-06,2.06038e-08,0.381269,0.00147786,-3.50637e-06,2.98009e-08,0.382744,0.00147093,-3.41697e-06,-2.05978e-08,0.384211,0.00146404,-3.47876e-06,5.25899e-08,0.385672,0.00145724,-3.32099e-06,-1.09471e-08,0.387126,0.00145056,-3.35383e-06,2.10009e-08,0.388573,0.00144392,-3.29083e-06,1.63501e-08,0.390014,0.00143739,-3.24178e-06,3.00641e-09,0.391448,0.00143091,-3.23276e-06,3.12282e-08,0.392875,0.00142454,-3.13908e-06,-8.70932e-09,0.394297,0.00141824,-3.16521e-06,3.34114e-08,0.395712,0.00141201,-3.06497e-06,-5.72754e-09,0.397121,0.00140586,-3.08215e-06,1.9301e-08,0.398524,0.00139975,-3.02425e-06,1.7931e-08,0.39992,0.00139376,-2.97046e-06,-1.61822e-09,0.401311,0.00138781,-2.97531e-06,1.83442e-08,0.402696,0.00138192,-2.92028e-06,1.76485e-08,0.404075,0.00137613,-2.86733e-06,4.68617e-10,0.405448,0.00137039,-2.86593e-06,1.02794e-08,0.406816,0.00136469,-2.83509e-06,1.80179e-08,0.408178,0.00135908,-2.78104e-06,7.05594e-09,0.409534,0.00135354,-2.75987e-06,1.33633e-08,0.410885,0.00134806,-2.71978e-06,-9.04568e-10,0.41223,0.00134261,-2.72249e-06,2.0057e-08,0.41357,0.00133723,-2.66232e-06,1.00841e-08,0.414905,0.00133194,-2.63207e-06,-7.88835e-10,0.416234,0.00132667,-2.63444e-06,2.28734e-08,0.417558,0.00132147,-2.56582e-06,-1.29785e-09,0.418877,0.00131633,-2.56971e-06,1.21205e-08,0.420191,0.00131123,-2.53335e-06,1.24202e-08,0.421499,0.0013062,-2.49609e-06,-2.19681e-09,0.422803,0.0013012,-2.50268e-06,2.61696e-08,0.424102,0.00129628,-2.42417e-06,-1.30747e-08,0.425396,0.00129139,-2.46339e-06,2.6129e-08,0.426685,0.00128654,-2.38501e-06,-2.03454e-09,0.427969,0.00128176,-2.39111e-06,1.18115e-08,0.429248,0.00127702,-2.35567e-06,1.43932e-08,0.430523,0.00127235,-2.31249e-06,-9.77965e-09,0.431793,0.00126769,-2.34183e-06,2.47253e-08,0.433058,0.00126308,-2.26766e-06,2.85278e-10,0.434319,0.00125855,-2.2668e-06,3.93614e-09,0.435575,0.00125403,-2.25499e-06,1.37722e-08,0.436827,0.00124956,-2.21368e-06,5.79803e-10,0.438074,0.00124513,-2.21194e-06,1.37112e-08,0.439317,0.00124075,-2.1708e-06,4.17973e-09,0.440556,0.00123642,-2.15826e-06,-6.27703e-10,0.44179,0.0012321,-2.16015e-06,2.81332e-08,0.44302,0.00122787,-2.07575e-06,-2.24985e-08,0.444246,0.00122365,-2.14324e-06,3.20586e-08,0.445467,0.00121946,-2.04707e-06,-1.6329e-08,0.446685,0.00121532,-2.09605e-06,3.32573e-08,0.447898,0.00121122,-1.99628e-06,-2.72927e-08,0.449107,0.00120715,-2.07816e-06,4.6111e-08,0.450312,0.00120313,-1.93983e-06,-3.79416e-08,0.451514,0.00119914,-2.05365e-06,4.60507e-08,0.452711,0.00119517,-1.9155e-06,-2.7052e-08,0.453904,0.00119126,-1.99666e-06,3.23551e-08,0.455093,0.00118736,-1.89959e-06,-1.29613e-08,0.456279,0.00118352,-1.93848e-06,1.94905e-08,0.45746,0.0011797,-1.88e-06,-5.39588e-09,0.458638,0.00117593,-1.89619e-06,2.09282e-09,0.459812,0.00117214,-1.88991e-06,2.68267e-08,0.460982,0.00116844,-1.80943e-06,-1.99925e-08,0.462149,0.00116476,-1.86941e-06,2.3341e-08,0.463312,0.00116109,-1.79939e-06,-1.37674e-08,0.464471,0.00115745,-1.84069e-06,3.17287e-08,0.465627,0.00115387,-1.7455e-06,-2.37407e-08,0.466779,0.00115031,-1.81673e-06,3.34315e-08,0.467927,0.00114677,-1.71643e-06,-2.05786e-08,0.469073,0.00114328,-1.77817e-06,1.90802e-08,0.470214,0.00113978,-1.72093e-06,3.86247e-09,0.471352,0.00113635,-1.70934e-06,-4.72759e-09,0.472487,0.00113292,-1.72352e-06,1.50478e-08,0.473618,0.00112951,-1.67838e-06,4.14108e-09,0.474746,0.00112617,-1.66595e-06,-1.80986e-09,0.47587,0.00112283,-1.67138e-06,3.09816e-09,0.476991,0.0011195,-1.66209e-06,1.92198e-08,0.478109,0.00111623,-1.60443e-06,-2.03726e-08,0.479224,0.00111296,-1.66555e-06,3.2468e-08,0.480335,0.00110973,-1.56814e-06,-2.00922e-08,0.481443,0.00110653,-1.62842e-06,1.80983e-08,0.482548,0.00110333,-1.57413e-06,7.30362e-09,0.48365,0.0011002,-1.55221e-06,-1.75107e-08,0.484749,0.00109705,-1.60475e-06,3.29373e-08,0.485844,0.00109393,-1.50594e-06,-2.48315e-08,0.486937,0.00109085,-1.58043e-06,3.65865e-08,0.488026,0.0010878,-1.47067e-06,-3.21078e-08,0.489112,0.00108476,-1.56699e-06,3.22397e-08,0.490195,0.00108172,-1.47027e-06,-7.44391e-09,0.491276,0.00107876,-1.49261e-06,-2.46428e-09,0.492353,0.00107577,-1.5e-06,1.73011e-08,0.493427,0.00107282,-1.4481e-06,-7.13552e-09,0.494499,0.0010699,-1.4695e-06,1.1241e-08,0.495567,0.001067,-1.43578e-06,-8.02637e-09,0.496633,0.0010641,-1.45986e-06,2.08645e-08,0.497695,0.00106124,-1.39726e-06,-1.58271e-08,0.498755,0.0010584,-1.44475e-06,1.26415e-08,0.499812,0.00105555,-1.40682e-06,2.48655e-08,0.500866,0.00105281,-1.33222e-06,-5.24988e-08,0.501918,0.00104999,-1.48972e-06,6.59206e-08,0.502966,0.00104721,-1.29196e-06,-3.237e-08,0.504012,0.00104453,-1.38907e-06,3.95479e-09,0.505055,0.00104176,-1.3772e-06,1.65509e-08,0.506096,0.00103905,-1.32755e-06,-1.05539e-08,0.507133,0.00103637,-1.35921e-06,2.56648e-08,0.508168,0.00103373,-1.28222e-06,-3.25007e-08,0.509201,0.00103106,-1.37972e-06,4.47336e-08,0.51023,0.00102844,-1.24552e-06,-2.72245e-08,0.511258,0.00102587,-1.32719e-06,4.55952e-09,0.512282,0.00102323,-1.31352e-06,8.98645e-09,0.513304,0.00102063,-1.28656e-06,1.90992e-08,0.514323,0.00101811,-1.22926e-06,-2.57786e-08,0.51534,0.00101557,-1.30659e-06,2.44104e-08,0.516355,0.00101303,-1.23336e-06,-1.22581e-08,0.517366,0.00101053,-1.27014e-06,2.4622e-08,0.518376,0.00100806,-1.19627e-06,-2.66253e-08,0.519383,0.00100559,-1.27615e-06,2.22744e-08,0.520387,0.00100311,-1.20932e-06,-2.8679e-09,0.521389,0.00100068,-1.21793e-06,-1.08029e-08,0.522388,0.000998211,-1.25034e-06,4.60795e-08,0.523385,0.000995849,-1.1121e-06,-5.4306e-08,0.52438,0.000993462,-1.27502e-06,5.19354e-08,0.525372,0.000991067,-1.11921e-06,-3.42262e-08,0.526362,0.000988726,-1.22189e-06,2.53646e-08,0.52735,0.000986359,-1.14579e-06,-7.62782e-09,0.528335,0.000984044,-1.16868e-06,5.14668e-09,0.529318,0.000981722,-1.15324e-06,-1.29589e-08,0.530298,0.000979377,-1.19211e-06,4.66888e-08,0.531276,0.000977133,-1.05205e-06,-5.45868e-08,0.532252,0.000974865,-1.21581e-06,5.24495e-08,0.533226,0.000972591,-1.05846e-06,-3.60019e-08,0.534198,0.000970366,-1.16647e-06,3.19537e-08,0.535167,0.000968129,-1.07061e-06,-3.2208e-08,0.536134,0.000965891,-1.16723e-06,3.72738e-08,0.537099,0.000963668,-1.05541e-06,2.32205e-09,0.538061,0.000961564,-1.04844e-06,-4.65618e-08,0.539022,0.000959328,-1.18813e-06,6.47159e-08,0.53998,0.000957146,-9.93979e-07,-3.3488e-08,0.540936,0.000955057,-1.09444e-06,9.63166e-09,0.54189,0.000952897,-1.06555e-06,-5.03871e-09,0.542842,0.000950751,-1.08066e-06,1.05232e-08,0.543792,0.000948621,-1.04909e-06,2.25503e-08,0.544739,0.000946591,-9.81444e-07,-4.11195e-08,0.545685,0.000944504,-1.1048e-06,2.27182e-08,0.546628,0.000942363,-1.03665e-06,9.85146e-09,0.54757,0.000940319,-1.00709e-06,-2.51938e-09,0.548509,0.000938297,-1.01465e-06,2.25858e-10,0.549446,0.000936269,-1.01397e-06,1.61598e-09,0.550381,0.000934246,-1.00913e-06,-6.68983e-09,0.551315,0.000932207,-1.0292e-06,2.51434e-08,0.552246,0.000930224,-9.53765e-07,-3.42793e-08,0.553175,0.000928214,-1.0566e-06,5.23688e-08,0.554102,0.000926258,-8.99497e-07,-5.59865e-08,0.555028,0.000924291,-1.06746e-06,5.23679e-08,0.555951,0.000922313,-9.10352e-07,-3.42763e-08,0.556872,0.00092039,-1.01318e-06,2.51326e-08,0.557792,0.000918439,-9.37783e-07,-6.64954e-09,0.558709,0.000916543,-9.57732e-07,1.46554e-09,0.559625,0.000914632,-9.53335e-07,7.87281e-10,0.560538,0.000912728,-9.50973e-07,-4.61466e-09,0.56145,0.000910812,-9.64817e-07,1.76713e-08,0.56236,0.000908935,-9.11804e-07,-6.46564e-09,0.563268,0.000907092,-9.312e-07,8.19121e-09,0.564174,0.000905255,-9.06627e-07,-2.62992e-08,0.565078,0.000903362,-9.85524e-07,3.74007e-08,0.565981,0.000901504,-8.73322e-07,-4.0942e-09,0.566882,0.000899745,-8.85605e-07,-2.1024e-08,0.56778,0.00089791,-9.48677e-07,2.85854e-08,0.568677,0.000896099,-8.62921e-07,-3.3713e-08,0.569573,0.000894272,-9.64059e-07,4.6662e-08,0.570466,0.000892484,-8.24073e-07,-3.37258e-08,0.571358,0.000890734,-9.25251e-07,2.86365e-08,0.572247,0.00088897,-8.39341e-07,-2.12155e-08,0.573135,0.000887227,-9.02988e-07,-3.37913e-09,0.574022,0.000885411,-9.13125e-07,3.47319e-08,0.574906,0.000883689,-8.08929e-07,-1.63394e-08,0.575789,0.000882022,-8.57947e-07,-2.8979e-08,0.57667,0.00088022,-9.44885e-07,7.26509e-08,0.57755,0.000878548,-7.26932e-07,-8.28106e-08,0.578427,0.000876845,-9.75364e-07,7.97774e-08,0.579303,0.000875134,-7.36032e-07,-5.74849e-08,0.580178,0.00087349,-9.08486e-07,3.09529e-08,0.58105,0.000871765,-8.15628e-07,-6.72206e-09,0.581921,0.000870114,-8.35794e-07,-4.06451e-09,0.582791,0.00086843,-8.47987e-07,2.29799e-08,0.583658,0.000866803,-7.79048e-07,-2.82503e-08,0.584524,0.00086516,-8.63799e-07,3.04167e-08,0.585388,0.000863524,-7.72548e-07,-3.38119e-08,0.586251,0.000861877,-8.73984e-07,4.52264e-08,0.587112,0.000860265,-7.38305e-07,-2.78842e-08,0.587972,0.000858705,-8.21958e-07,6.70567e-09,0.58883,0.000857081,-8.01841e-07,1.06161e-09,0.589686,0.000855481,-7.98656e-07,-1.09521e-08,0.590541,0.00085385,-8.31512e-07,4.27468e-08,0.591394,0.000852316,-7.03272e-07,-4.08257e-08,0.592245,0.000850787,-8.25749e-07,1.34677e-09,0.593095,0.000849139,-8.21709e-07,3.54387e-08,0.593944,0.000847602,-7.15393e-07,-2.38924e-08,0.59479,0.0008461,-7.8707e-07,5.26143e-10,0.595636,0.000844527,-7.85491e-07,2.17879e-08,0.596479,0.000843021,-7.20127e-07,-2.80733e-08,0.597322,0.000841497,-8.04347e-07,3.09005e-08,0.598162,0.000839981,-7.11646e-07,-3.5924e-08,0.599002,0.00083845,-8.19418e-07,5.3191e-08,0.599839,0.000836971,-6.59845e-07,-5.76307e-08,0.600676,0.000835478,-8.32737e-07,5.81227e-08,0.60151,0.000833987,-6.58369e-07,-5.56507e-08,0.602344,0.000832503,-8.25321e-07,4.52706e-08,0.603175,0.000830988,-6.89509e-07,-6.22236e-09,0.604006,0.000829591,-7.08176e-07,-2.03811e-08,0.604834,0.000828113,-7.6932e-07,2.8142e-08,0.605662,0.000826659,-6.84894e-07,-3.25822e-08,0.606488,0.000825191,-7.8264e-07,4.25823e-08,0.607312,0.000823754,-6.54893e-07,-1.85376e-08,0.608135,0.000822389,-7.10506e-07,-2.80365e-08,0.608957,0.000820883,-7.94616e-07,7.1079e-08,0.609777,0.000819507,-5.81379e-07,-7.74655e-08,0.610596,0.000818112,-8.13775e-07,5.9969e-08,0.611413,0.000816665,-6.33868e-07,-4.32013e-08,0.612229,0.000815267,-7.63472e-07,5.32313e-08,0.613044,0.0008139,-6.03778e-07,-5.05148e-08,0.613857,0.000812541,-7.55323e-07,2.96187e-08,0.614669,0.000811119,-6.66466e-07,-8.35545e-09,0.615479,0.000809761,-6.91533e-07,3.80301e-09,0.616288,0.00080839,-6.80124e-07,-6.85666e-09,0.617096,0.000807009,-7.00694e-07,2.36237e-08,0.617903,0.000805678,-6.29822e-07,-2.80336e-08,0.618708,0.000804334,-7.13923e-07,2.8906e-08,0.619511,0.000802993,-6.27205e-07,-2.79859e-08,0.620314,0.000801655,-7.11163e-07,2.34329e-08,0.621114,0.000800303,-6.40864e-07,-6.14108e-09,0.621914,0.000799003,-6.59287e-07,1.13151e-09,0.622712,0.000797688,-6.55893e-07,1.61507e-09,0.62351,0.000796381,-6.51048e-07,-7.59186e-09,0.624305,0.000795056,-6.73823e-07,2.87524e-08,0.6251,0.000793794,-5.87566e-07,-4.7813e-08,0.625893,0.000792476,-7.31005e-07,4.32901e-08,0.626685,0.000791144,-6.01135e-07,-6.13814e-09,0.627475,0.000789923,-6.19549e-07,-1.87376e-08,0.628264,0.000788628,-6.75762e-07,2.14837e-08,0.629052,0.000787341,-6.11311e-07,-7.59265e-09,0.629839,0.000786095,-6.34089e-07,8.88692e-09,0.630625,0.000784854,-6.07428e-07,-2.7955e-08,0.631409,0.000783555,-6.91293e-07,4.33285e-08,0.632192,0.000782302,-5.61307e-07,-2.61497e-08,0.632973,0.000781101,-6.39757e-07,1.6658e-09,0.633754,0.000779827,-6.34759e-07,1.94866e-08,0.634533,0.000778616,-5.76299e-07,-2.00076e-08,0.635311,0.000777403,-6.36322e-07,9.39091e-10,0.636088,0.000776133,-6.33505e-07,1.62512e-08,0.636863,0.000774915,-5.84751e-07,-6.33937e-09,0.637638,0.000773726,-6.03769e-07,9.10609e-09,0.638411,0.000772546,-5.76451e-07,-3.00849e-08,0.639183,0.000771303,-6.66706e-07,5.1629e-08,0.639953,0.000770125,-5.11819e-07,-5.7222e-08,0.640723,0.000768929,-6.83485e-07,5.80497e-08,0.641491,0.000767736,-5.09336e-07,-5.57674e-08,0.642259,0.000766551,-6.76638e-07,4.58105e-08,0.643024,0.000765335,-5.39206e-07,-8.26541e-09,0.643789,0.000764231,-5.64002e-07,-1.27488e-08,0.644553,0.000763065,-6.02249e-07,-3.44168e-10,0.645315,0.00076186,-6.03281e-07,1.41254e-08,0.646077,0.000760695,-5.60905e-07,3.44727e-09,0.646837,0.000759584,-5.50563e-07,-2.79144e-08,0.647596,0.000758399,-6.34307e-07,4.86057e-08,0.648354,0.000757276,-4.88489e-07,-4.72989e-08,0.64911,0.000756158,-6.30386e-07,2.13807e-08,0.649866,0.000754961,-5.66244e-07,2.13808e-08,0.65062,0.000753893,-5.02102e-07,-4.7299e-08,0.651374,0.000752746,-6.43999e-07,4.86059e-08,0.652126,0.000751604,-4.98181e-07,-2.79154e-08,0.652877,0.000750524,-5.81927e-07,3.45089e-09,0.653627,0.000749371,-5.71575e-07,1.41119e-08,0.654376,0.00074827,-5.29239e-07,-2.93748e-10,0.655123,0.00074721,-5.3012e-07,-1.29368e-08,0.65587,0.000746111,-5.68931e-07,-7.56355e-09,0.656616,0.000744951,-5.91621e-07,4.3191e-08,0.65736,0.000743897,-4.62048e-07,-4.59911e-08,0.658103,0.000742835,-6.00022e-07,2.15642e-08,0.658846,0.0007417,-5.35329e-07,1.93389e-08,0.659587,0.000740687,-4.77312e-07,-3.93152e-08,0.660327,0.000739615,-5.95258e-07,1.87126e-08,0.661066,0.00073848,-5.3912e-07,2.40695e-08,0.661804,0.000737474,-4.66912e-07,-5.53859e-08,0.662541,0.000736374,-6.33069e-07,7.82648e-08,0.663277,0.000735343,-3.98275e-07,-7.88593e-08,0.664012,0.00073431,-6.34853e-07,5.83585e-08,0.664745,0.000733215,-4.59777e-07,-3.53656e-08,0.665478,0.000732189,-5.65874e-07,2.34994e-08,0.66621,0.000731128,-4.95376e-07,9.72743e-10,0.66694,0.00073014,-4.92458e-07,-2.73903e-08,0.66767,0.000729073,-5.74629e-07,4.89839e-08,0.668398,0.000728071,-4.27677e-07,-4.93359e-08,0.669126,0.000727068,-5.75685e-07,2.91504e-08,0.669853,0.000726004,-4.88234e-07,-7.66109e-09,0.670578,0.000725004,-5.11217e-07,1.49392e-09,0.671303,0.000723986,-5.06735e-07,1.68533e-09,0.672026,0.000722978,-5.01679e-07,-8.23525e-09,0.672749,0.00072195,-5.26385e-07,3.12556e-08,0.67347,0.000720991,-4.32618e-07,-5.71825e-08,0.674191,0.000719954,-6.04166e-07,7.8265e-08,0.67491,0.00071898,-3.69371e-07,-7.70634e-08,0.675628,0.00071801,-6.00561e-07,5.11747e-08,0.676346,0.000716963,-4.47037e-07,-8.42615e-09,0.677062,0.000716044,-4.72315e-07,-1.747e-08,0.677778,0.000715046,-5.24725e-07,1.87015e-08,0.678493,0.000714053,-4.68621e-07,2.26856e-09,0.679206,0.000713123,-4.61815e-07,-2.77758e-08,0.679919,0.000712116,-5.45142e-07,4.92298e-08,0.68063,0.000711173,-3.97453e-07,-4.99339e-08,0.681341,0.000710228,-5.47255e-07,3.12967e-08,0.682051,0.000709228,-4.53365e-07,-1.56481e-08,0.68276,0.000708274,-5.00309e-07,3.12958e-08,0.683467,0.000707367,-4.06422e-07,-4.99303e-08,0.684174,0.000706405,-5.56213e-07,4.9216e-08,0.68488,0.00070544,-4.08565e-07,-2.77245e-08,0.685585,0.00070454,-4.91738e-07,2.07748e-09,0.686289,0.000703562,-4.85506e-07,1.94146e-08,0.686992,0.00070265,-4.27262e-07,-2.01314e-08,0.687695,0.000701735,-4.87656e-07,1.50616e-09,0.688396,0.000700764,-4.83137e-07,1.41067e-08,0.689096,0.00069984,-4.40817e-07,1.67168e-09,0.689795,0.000698963,-4.35802e-07,-2.07934e-08,0.690494,0.000698029,-4.98182e-07,2.18972e-08,0.691192,0.000697099,-4.32491e-07,-7.19092e-09,0.691888,0.000696212,-4.54064e-07,6.86642e-09,0.692584,0.000695325,-4.33464e-07,-2.02747e-08,0.693279,0.000694397,-4.94288e-07,1.46279e-08,0.693973,0.000693452,-4.50405e-07,2.13678e-08,0.694666,0.000692616,-3.86301e-07,-4.04945e-08,0.695358,0.000691721,-5.07785e-07,2.14009e-08,0.696049,0.00069077,-4.43582e-07,1.44955e-08,0.69674,0.000689926,-4.00096e-07,-1.97783e-08,0.697429,0.000689067,-4.5943e-07,5.01296e-09,0.698118,0.000688163,-4.44392e-07,-2.73521e-10,0.698805,0.000687273,-4.45212e-07,-3.91893e-09,0.699492,0.000686371,-4.56969e-07,1.59493e-08,0.700178,0.000685505,-4.09121e-07,-2.73351e-10,0.700863,0.000684686,-4.09941e-07,-1.4856e-08,0.701548,0.000683822,-4.54509e-07,9.25979e-11,0.702231,0.000682913,-4.54231e-07,1.44855e-08,0.702913,0.000682048,-4.10775e-07,1.56992e-09,0.703595,0.000681231,-4.06065e-07,-2.07652e-08,0.704276,0.000680357,-4.68361e-07,2.18864e-08,0.704956,0.000679486,-4.02701e-07,-7.17595e-09,0.705635,0.000678659,-4.24229e-07,6.81748e-09,0.706313,0.000677831,-4.03777e-07,-2.0094e-08,0.70699,0.000676963,-4.64059e-07,1.39538e-08,0.707667,0.000676077,-4.22197e-07,2.38835e-08,0.708343,0.000675304,-3.50547e-07,-4.98831e-08,0.709018,0.000674453,-5.00196e-07,5.64395e-08,0.709692,0.000673622,-3.30878e-07,-5.66657e-08,0.710365,0.00067279,-5.00875e-07,5.1014e-08,0.711037,0.000671942,-3.47833e-07,-2.81809e-08,0.711709,0.000671161,-4.32376e-07,2.10513e-09,0.712379,0.000670303,-4.2606e-07,1.97604e-08,0.713049,0.00066951,-3.66779e-07,-2.15422e-08,0.713718,0.000668712,-4.31406e-07,6.8038e-09,0.714387,0.000667869,-4.10994e-07,-5.67295e-09,0.715054,0.00066703,-4.28013e-07,1.5888e-08,0.715721,0.000666222,-3.80349e-07,1.72576e-09,0.716387,0.000665467,-3.75172e-07,-2.27911e-08,0.717052,0.000664648,-4.43545e-07,2.9834e-08,0.717716,0.00066385,-3.54043e-07,-3.69401e-08,0.718379,0.000663031,-4.64864e-07,5.83219e-08,0.719042,0.000662277,-2.89898e-07,-7.71382e-08,0.719704,0.000661465,-5.21313e-07,7.14171e-08,0.720365,0.000660637,-3.07061e-07,-2.97161e-08,0.721025,0.000659934,-3.96209e-07,-1.21575e-08,0.721685,0.000659105,-4.32682e-07,1.87412e-08,0.722343,0.000658296,-3.76458e-07,-3.2029e-09,0.723001,0.000657533,-3.86067e-07,-5.9296e-09,0.723659,0.000656743,-4.03856e-07,2.69213e-08,0.724315,0.000656016,-3.23092e-07,-4.21511e-08,0.724971,0.000655244,-4.49545e-07,2.24737e-08,0.725625,0.000654412,-3.82124e-07,1.18611e-08,0.726279,0.000653683,-3.46541e-07,-1.03132e-08,0.726933,0.000652959,-3.7748e-07,-3.02128e-08,0.727585,0.000652114,-4.68119e-07,7.15597e-08,0.728237,0.000651392,-2.5344e-07,-7.72119e-08,0.728888,0.000650654,-4.85075e-07,5.8474e-08,0.729538,0.000649859,-3.09654e-07,-3.74746e-08,0.730188,0.000649127,-4.22077e-07,3.18197e-08,0.730837,0.000648379,-3.26618e-07,-3.01997e-08,0.731485,0.000647635,-4.17217e-07,2.93747e-08,0.732132,0.000646888,-3.29093e-07,-2.76943e-08,0.732778,0.000646147,-4.12176e-07,2.17979e-08,0.733424,0.000645388,-3.46783e-07,1.07292e-10,0.734069,0.000644695,-3.46461e-07,-2.22271e-08,0.734713,0.000643935,-4.13142e-07,2.91963e-08,0.735357,0.000643197,-3.25553e-07,-3.49536e-08,0.736,0.000642441,-4.30414e-07,5.10133e-08,0.736642,0.000641733,-2.77374e-07,-4.98904e-08,0.737283,0.000641028,-4.27045e-07,2.93392e-08,0.737924,0.000640262,-3.39028e-07,-7.86156e-09,0.738564,0.000639561,-3.62612e-07,2.10703e-09,0.739203,0.000638842,-3.56291e-07,-5.6653e-10,0.739842,0.000638128,-3.57991e-07,1.59086e-10,0.740479,0.000637412,-3.57513e-07,-6.98321e-11,0.741116,0.000636697,-3.57723e-07,1.20214e-10,0.741753,0.000635982,-3.57362e-07,-4.10987e-10,0.742388,0.000635266,-3.58595e-07,1.5237e-09,0.743023,0.000634553,-3.54024e-07,-5.68376e-09,0.743657,0.000633828,-3.71075e-07,2.12113e-08,0.744291,0.00063315,-3.07441e-07,-1.95569e-08,0.744924,0.000632476,-3.66112e-07,-2.58816e-09,0.745556,0.000631736,-3.73877e-07,2.99096e-08,0.746187,0.000631078,-2.84148e-07,-5.74454e-08,0.746818,0.000630337,-4.56484e-07,8.06629e-08,0.747448,0.000629666,-2.14496e-07,-8.63922e-08,0.748077,0.000628978,-4.73672e-07,8.60918e-08,0.748706,0.000628289,-2.15397e-07,-7.91613e-08,0.749334,0.000627621,-4.5288e-07,5.17393e-08,0.749961,0.00062687,-2.97663e-07,-8.58662e-09,0.750588,0.000626249,-3.23422e-07,-1.73928e-08,0.751214,0.00062555,-3.75601e-07,1.85532e-08,0.751839,0.000624855,-3.19941e-07,2.78479e-09,0.752463,0.000624223,-3.11587e-07,-2.96923e-08,0.753087,0.000623511,-4.00664e-07,5.63799e-08,0.75371,0.000622879,-2.31524e-07,-7.66179e-08,0.754333,0.000622186,-4.61378e-07,7.12778e-08,0.754955,0.000621477,-2.47545e-07,-2.96794e-08,0.755576,0.000620893,-3.36583e-07,-1.21648e-08,0.756196,0.000620183,-3.73077e-07,1.87339e-08,0.756816,0.000619493,-3.16875e-07,-3.16622e-09,0.757435,0.00061885,-3.26374e-07,-6.0691e-09,0.758054,0.000618179,-3.44581e-07,2.74426e-08,0.758672,0.000617572,-2.62254e-07,-4.40968e-08,0.759289,0.000616915,-3.94544e-07,2.97352e-08,0.759906,0.000616215,-3.05338e-07,-1.52393e-08,0.760522,0.000615559,-3.51056e-07,3.12221e-08,0.761137,0.000614951,-2.5739e-07,-5.00443e-08,0.761751,0.000614286,-4.07523e-07,4.9746e-08,0.762365,0.00061362,-2.58285e-07,-2.97303e-08,0.762979,0.000613014,-3.47476e-07,9.57079e-09,0.763591,0.000612348,-3.18764e-07,-8.55287e-09,0.764203,0.000611685,-3.44422e-07,2.46407e-08,0.764815,0.00061107,-2.705e-07,-3.04053e-08,0.765426,0.000610437,-3.61716e-07,3.73759e-08,0.766036,0.000609826,-2.49589e-07,-5.94935e-08,0.766645,0.000609149,-4.28069e-07,8.13889e-08,0.767254,0.000608537,-1.83902e-07,-8.72483e-08,0.767862,0.000607907,-4.45647e-07,8.87901e-08,0.76847,0.000607282,-1.79277e-07,-8.90983e-08,0.769077,0.000606656,-4.46572e-07,8.87892e-08,0.769683,0.000606029,-1.80204e-07,-8.72446e-08,0.770289,0.000605407,-4.41938e-07,8.13752e-08,0.770894,0.000604768,-1.97812e-07,-5.94423e-08,0.771498,0.000604194,-3.76139e-07,3.71848e-08,0.772102,0.000603553,-2.64585e-07,-2.96922e-08,0.772705,0.000602935,-3.53661e-07,2.19793e-08,0.773308,0.000602293,-2.87723e-07,1.37955e-09,0.77391,0.000601722,-2.83585e-07,-2.74976e-08,0.774512,0.000601072,-3.66077e-07,4.9006e-08,0.775112,0.000600487,-2.19059e-07,-4.93171e-08,0.775712,0.000599901,-3.67011e-07,2.90531e-08,0.776312,0.000599254,-2.79851e-07,-7.29081e-09,0.776911,0.000598673,-3.01724e-07,1.10077e-10,0.777509,0.00059807,-3.01393e-07,6.85053e-09,0.778107,0.000597487,-2.80842e-07,-2.75123e-08,0.778704,0.000596843,-3.63379e-07,4.35939e-08,0.779301,0.000596247,-2.32597e-07,-2.7654e-08,0.779897,0.000595699,-3.15559e-07,7.41741e-09,0.780492,0.00059509,-2.93307e-07,-2.01562e-09,0.781087,0.000594497,-2.99354e-07,6.45059e-10,0.781681,0.000593901,-2.97418e-07,-5.64635e-10,0.782275,0.000593304,-2.99112e-07,1.61347e-09,0.782868,0.000592711,-2.94272e-07,-5.88926e-09,0.78346,0.000592105,-3.1194e-07,2.19436e-08,0.784052,0.000591546,-2.46109e-07,-2.22805e-08,0.784643,0.000590987,-3.1295e-07,7.57368e-09,0.785234,0.000590384,-2.90229e-07,-8.01428e-09,0.785824,0.00058978,-3.14272e-07,2.44834e-08,0.786414,0.000589225,-2.40822e-07,-3.03148e-08,0.787003,0.000588652,-3.31766e-07,3.7171e-08,0.787591,0.0005881,-2.20253e-07,-5.87646e-08,0.788179,0.000587483,-3.96547e-07,7.86782e-08,0.788766,0.000586926,-1.60512e-07,-7.71342e-08,0.789353,0.000586374,-3.91915e-07,5.10444e-08,0.789939,0.000585743,-2.38782e-07,-7.83422e-09,0.790524,0.000585242,-2.62284e-07,-1.97076e-08,0.791109,0.000584658,-3.21407e-07,2.70598e-08,0.791693,0.000584097,-2.40228e-07,-2.89269e-08,0.792277,0.000583529,-3.27008e-07,2.90431e-08,0.792861,0.000582963,-2.39879e-07,-2.76409e-08,0.793443,0.0005824,-3.22802e-07,2.1916e-08,0.794025,0.00058182,-2.57054e-07,-4.18368e-10,0.794607,0.000581305,-2.58309e-07,-2.02425e-08,0.795188,0.000580727,-3.19036e-07,2.17838e-08,0.795768,0.000580155,-2.53685e-07,-7.28814e-09,0.796348,0.000579625,-2.75549e-07,7.36871e-09,0.796928,0.000579096,-2.53443e-07,-2.21867e-08,0.797506,0.000578523,-3.20003e-07,2.17736e-08,0.798085,0.000577948,-2.54683e-07,-5.30296e-09,0.798662,0.000577423,-2.70592e-07,-5.61698e-10,0.799239,0.00057688,-2.72277e-07,7.54977e-09,0.799816,0.000576358,-2.49627e-07,-2.96374e-08,0.800392,0.00057577,-3.38539e-07,5.1395e-08,0.800968,0.000575247,-1.84354e-07,-5.67335e-08,0.801543,0.000574708,-3.54555e-07,5.63297e-08,0.802117,0.000574168,-1.85566e-07,-4.93759e-08,0.802691,0.000573649,-3.33693e-07,2.19646e-08,0.803264,0.000573047,-2.678e-07,2.1122e-08,0.803837,0.000572575,-2.04433e-07,-4.68482e-08,0.804409,0.000572026,-3.44978e-07,4.70613e-08,0.804981,0.000571477,-2.03794e-07,-2.21877e-08,0.805552,0.000571003,-2.70357e-07,-1.79153e-08,0.806123,0.000570408,-3.24103e-07,3.42443e-08,0.806693,0.000569863,-2.2137e-07,1.47556e-10,0.807263,0.000569421,-2.20928e-07,-3.48345e-08,0.807832,0.000568874,-3.25431e-07,1.99812e-08,0.808401,0.000568283,-2.65487e-07,1.45143e-08,0.808969,0.000567796,-2.21945e-07,-1.84338e-08,0.809536,0.000567297,-2.77246e-07,-3.83608e-10,0.810103,0.000566741,-2.78397e-07,1.99683e-08,0.81067,0.000566244,-2.18492e-07,-1.98848e-08,0.811236,0.000565747,-2.78146e-07,-3.38976e-11,0.811801,0.000565191,-2.78248e-07,2.00204e-08,0.812366,0.000564695,-2.18187e-07,-2.04429e-08,0.812931,0.000564197,-2.79516e-07,2.1467e-09,0.813495,0.000563644,-2.73076e-07,1.18561e-08,0.814058,0.000563134,-2.37507e-07,1.00334e-08,0.814621,0.000562689,-2.07407e-07,-5.19898e-08,0.815183,0.000562118,-3.63376e-07,7.87163e-08,0.815745,0.000561627,-1.27227e-07,-8.40616e-08,0.816306,0.000561121,-3.79412e-07,7.87163e-08,0.816867,0.000560598,-1.43263e-07,-5.19898e-08,0.817428,0.000560156,-2.99233e-07,1.00335e-08,0.817988,0.000559587,-2.69132e-07,1.18559e-08,0.818547,0.000559085,-2.33564e-07,2.14764e-09,0.819106,0.000558624,-2.27122e-07,-2.04464e-08,0.819664,0.000558108,-2.88461e-07,2.00334e-08,0.820222,0.000557591,-2.28361e-07,-8.24277e-11,0.820779,0.000557135,-2.28608e-07,-1.97037e-08,0.821336,0.000556618,-2.87719e-07,1.92925e-08,0.821893,0.000556101,-2.29841e-07,2.13831e-09,0.822448,0.000555647,-2.23427e-07,-2.78458e-08,0.823004,0.000555117,-3.06964e-07,4.96402e-08,0.823559,0.000554652,-1.58043e-07,-5.15058e-08,0.824113,0.000554181,-3.12561e-07,3.71737e-08,0.824667,0.000553668,-2.0104e-07,-3.75844e-08,0.82522,0.000553153,-3.13793e-07,5.35592e-08,0.825773,0.000552686,-1.53115e-07,-5.74431e-08,0.826326,0.000552207,-3.25444e-07,5.7004e-08,0.826878,0.000551728,-1.54433e-07,-5.13635e-08,0.827429,0.000551265,-3.08523e-07,2.92406e-08,0.82798,0.000550735,-2.20801e-07,-5.99424e-09,0.828531,0.000550276,-2.38784e-07,-5.26363e-09,0.829081,0.000549782,-2.54575e-07,2.70488e-08,0.82963,0.000549354,-1.73429e-07,-4.33268e-08,0.83018,0.000548878,-3.03409e-07,2.7049e-08,0.830728,0.000548352,-2.22262e-07,-5.26461e-09,0.831276,0.000547892,-2.38056e-07,-5.99057e-09,0.831824,0.000547397,-2.56027e-07,2.92269e-08,0.832371,0.000546973,-1.68347e-07,-5.13125e-08,0.832918,0.000546482,-3.22284e-07,5.68139e-08,0.833464,0.000546008,-1.51843e-07,-5.67336e-08,0.83401,0.000545534,-3.22043e-07,5.09113e-08,0.834555,0.000545043,-1.6931e-07,-2.77022e-08,0.8351,0.000544621,-2.52416e-07,2.92924e-10,0.835644,0.000544117,-2.51537e-07,2.65305e-08,0.836188,0.000543694,-1.71946e-07,-4.68105e-08,0.836732,0.00054321,-3.12377e-07,4.15021e-08,0.837275,0.000542709,-1.87871e-07,1.13355e-11,0.837817,0.000542334,-1.87837e-07,-4.15474e-08,0.838359,0.000541833,-3.12479e-07,4.69691e-08,0.838901,0.000541349,-1.71572e-07,-2.71196e-08,0.839442,0.000540925,-2.52931e-07,1.90462e-09,0.839983,0.000540425,-2.47217e-07,1.95011e-08,0.840523,0.000539989,-1.88713e-07,-2.03045e-08,0.841063,0.00053955,-2.49627e-07,2.11216e-09,0.841602,0.000539057,-2.4329e-07,1.18558e-08,0.842141,0.000538606,-2.07723e-07,1.00691e-08,0.842679,0.000538221,-1.77516e-07,-5.21324e-08,0.843217,0.00053771,-3.33913e-07,7.92513e-08,0.843755,0.00053728,-9.6159e-08,-8.60587e-08,0.844292,0.000536829,-3.54335e-07,8.61696e-08,0.844828,0.000536379,-9.58263e-08,-7.98057e-08,0.845364,0.000535948,-3.35243e-07,5.42394e-08,0.8459,0.00053544,-1.72525e-07,-1.79426e-08,0.846435,0.000535041,-2.26353e-07,1.75308e-08,0.84697,0.000534641,-1.73761e-07,-5.21806e-08,0.847505,0.000534137,-3.30302e-07,7.19824e-08,0.848038,0.000533692,-1.14355e-07,-5.69349e-08,0.848572,0.000533293,-2.8516e-07,3.65479e-08,0.849105,0.000532832,-1.75516e-07,-2.96519e-08,0.849638,0.000532392,-2.64472e-07,2.2455e-08,0.85017,0.000531931,-1.97107e-07,-5.63451e-10,0.850702,0.000531535,-1.98797e-07,-2.02011e-08,0.851233,0.000531077,-2.59401e-07,2.17634e-08,0.851764,0.000530623,-1.94111e-07,-7.24794e-09,0.852294,0.000530213,-2.15854e-07,7.22832e-09,0.852824,0.000529803,-1.94169e-07,-2.16653e-08,0.853354,0.00052935,-2.59165e-07,1.98283e-08,0.853883,0.000528891,-1.9968e-07,1.95678e-09,0.854412,0.000528497,-1.9381e-07,-2.76554e-08,0.85494,0.000528027,-2.76776e-07,4.90603e-08,0.855468,0.00052762,-1.29596e-07,-4.93764e-08,0.855995,0.000527213,-2.77725e-07,2.92361e-08,0.856522,0.000526745,-1.90016e-07,-7.96341e-09,0.857049,0.000526341,-2.13907e-07,2.61752e-09,0.857575,0.000525922,-2.06054e-07,-2.50665e-09,0.8581,0.000525502,-2.13574e-07,7.40906e-09,0.858626,0.000525097,-1.91347e-07,-2.71296e-08,0.859151,0.000524633,-2.72736e-07,4.15048e-08,0.859675,0.000524212,-1.48221e-07,-1.96802e-08,0.860199,0.000523856,-2.07262e-07,-2.23886e-08,0.860723,0.000523375,-2.74428e-07,4.96299e-08,0.861246,0.000522975,-1.25538e-07,-5.69216e-08,0.861769,0.000522553,-2.96303e-07,5.88473e-08,0.862291,0.000522137,-1.19761e-07,-5.92584e-08,0.862813,0.00052172,-2.97536e-07,5.8977e-08,0.863334,0.000521301,-1.20605e-07,-5.74403e-08,0.863855,0.000520888,-2.92926e-07,5.15751e-08,0.864376,0.000520457,-1.38201e-07,-2.96506e-08,0.864896,0.000520091,-2.27153e-07,7.42277e-09,0.865416,0.000519659,-2.04885e-07,-4.05057e-11,0.865936,0.00051925,-2.05006e-07,-7.26074e-09,0.866455,0.000518818,-2.26788e-07,2.90835e-08,0.866973,0.000518451,-1.39538e-07,-4.94686e-08,0.867492,0.000518024,-2.87944e-07,4.95814e-08,0.868009,0.000517597,-1.39199e-07,-2.96479e-08,0.868527,0.000517229,-2.28143e-07,9.40539e-09,0.869044,0.000516801,-1.99927e-07,-7.9737e-09,0.86956,0.000516378,-2.23848e-07,2.24894e-08,0.870077,0.000515997,-1.5638e-07,-2.23793e-08,0.870592,0.000515617,-2.23517e-07,7.42302e-09,0.871108,0.000515193,-2.01248e-07,-7.31283e-09,0.871623,0.000514768,-2.23187e-07,2.18283e-08,0.872137,0.000514387,-1.57702e-07,-2.03959e-08,0.872652,0.000514011,-2.1889e-07,1.50711e-10,0.873165,0.000513573,-2.18437e-07,1.97931e-08,0.873679,0.000513196,-1.59058e-07,-1.97183e-08,0.874192,0.000512819,-2.18213e-07,-5.24324e-10,0.874704,0.000512381,-2.19786e-07,2.18156e-08,0.875217,0.000512007,-1.54339e-07,-2.71336e-08,0.875728,0.000511616,-2.3574e-07,2.71141e-08,0.87624,0.000511226,-1.54398e-07,-2.17182e-08,0.876751,0.000510852,-2.19552e-07,1.54131e-10,0.877262,0.000510414,-2.1909e-07,2.11017e-08,0.877772,0.000510039,-1.55785e-07,-2.49562e-08,0.878282,0.000509652,-2.30654e-07,1.91183e-08,0.878791,0.000509248,-1.73299e-07,8.08751e-09,0.8793,0.000508926,-1.49036e-07,-5.14684e-08,0.879809,0.000508474,-3.03441e-07,7.85766e-08,0.880317,0.000508103,-6.77112e-08,-8.40242e-08,0.880825,0.000507715,-3.19784e-07,7.87063e-08,0.881333,0.000507312,-8.36649e-08,-5.19871e-08,0.88184,0.000506988,-2.39626e-07,1.00327e-08,0.882346,0.000506539,-2.09528e-07,1.18562e-08,0.882853,0.000506156,-1.73959e-07,2.14703e-09,0.883359,0.000505814,-1.67518e-07,-2.04444e-08,0.883864,0.000505418,-2.28851e-07,2.00258e-08,0.88437,0.00050502,-1.68774e-07,-5.42855e-11,0.884874,0.000504682,-1.68937e-07,-1.98087e-08,0.885379,0.000504285,-2.28363e-07,1.96842e-08,0.885883,0.000503887,-1.6931e-07,6.76342e-10,0.886387,0.000503551,-1.67281e-07,-2.23896e-08,0.88689,0.000503149,-2.3445e-07,2.92774e-08,0.887393,0.000502768,-1.46618e-07,-3.51152e-08,0.887896,0.00050237,-2.51963e-07,5.15787e-08,0.888398,0.00050202,-9.72271e-08,-5.19903e-08,0.8889,0.00050167,-2.53198e-07,3.71732e-08,0.889401,0.000501275,-1.41678e-07,-3.70978e-08,0.889902,0.00050088,-2.52972e-07,5.16132e-08,0.890403,0.000500529,-9.81321e-08,-5.01459e-08,0.890903,0.000500183,-2.4857e-07,2.9761e-08,0.891403,0.000499775,-1.59287e-07,-9.29351e-09,0.891903,0.000499428,-1.87167e-07,7.41301e-09,0.892402,0.000499076,-1.64928e-07,-2.03585e-08,0.892901,0.000498685,-2.26004e-07,1.44165e-08,0.893399,0.000498276,-1.82754e-07,2.22974e-08,0.893898,0.000497978,-1.15862e-07,-4.40013e-08,0.894395,0.000497614,-2.47866e-07,3.44985e-08,0.894893,0.000497222,-1.44371e-07,-3.43882e-08,0.89539,0.00049683,-2.47535e-07,4.34497e-08,0.895886,0.000496465,-1.17186e-07,-2.02012e-08,0.896383,0.00049617,-1.7779e-07,-2.22497e-08,0.896879,0.000495748,-2.44539e-07,4.95952e-08,0.897374,0.000495408,-9.57532e-08,-5.69217e-08,0.89787,0.000495045,-2.66518e-07,5.88823e-08,0.898364,0.000494689,-8.98713e-08,-5.93983e-08,0.898859,0.000494331,-2.68066e-07,5.95017e-08,0.899353,0.000493973,-8.95613e-08,-5.9399e-08,0.899847,0.000493616,-2.67758e-07,5.8885e-08,0.90034,0.000493257,-9.11033e-08,-5.69317e-08,0.900833,0.000492904,-2.61898e-07,4.96326e-08,0.901326,0.000492529,-1.13001e-07,-2.23893e-08,0.901819,0.000492236,-1.80169e-07,-1.968e-08,0.902311,0.000491817,-2.39209e-07,4.15047e-08,0.902802,0.000491463,-1.14694e-07,-2.71296e-08,0.903293,0.000491152,-1.96083e-07,7.409e-09,0.903784,0.000490782,-1.73856e-07,-2.50645e-09,0.904275,0.000490427,-1.81376e-07,2.61679e-09,0.904765,0.000490072,-1.73525e-07,-7.96072e-09,0.905255,0.000489701,-1.97407e-07,2.92261e-08,0.905745,0.000489394,-1.09729e-07,-4.93389e-08,0.906234,0.000489027,-2.57746e-07,4.89204e-08,0.906723,0.000488658,-1.10985e-07,-2.71333e-08,0.907211,0.000488354,-1.92385e-07,8.30861e-12,0.907699,0.00048797,-1.9236e-07,2.71001e-08,0.908187,0.000487666,-1.1106e-07,-4.88041e-08,0.908675,0.000487298,-2.57472e-07,4.89069e-08,0.909162,0.000486929,-1.10751e-07,-2.76143e-08,0.909649,0.000486625,-1.93594e-07,1.9457e-09,0.910135,0.000486244,-1.87757e-07,1.98315e-08,0.910621,0.000485928,-1.28262e-07,-2.16671e-08,0.911107,0.000485606,-1.93264e-07,7.23216e-09,0.911592,0.000485241,-1.71567e-07,-7.26152e-09,0.912077,0.000484877,-1.93352e-07,2.18139e-08,0.912562,0.000484555,-1.2791e-07,-2.03895e-08,0.913047,0.000484238,-1.89078e-07,1.39494e-10,0.913531,0.000483861,-1.8866e-07,1.98315e-08,0.914014,0.000483543,-1.29165e-07,-1.98609e-08,0.914498,0.000483225,-1.88748e-07,7.39912e-12,0.914981,0.000482847,-1.88726e-07,1.98313e-08,0.915463,0.000482529,-1.29232e-07,-1.9728e-08,0.915946,0.000482212,-1.88416e-07,-5.24035e-10,0.916428,0.000481833,-1.89988e-07,2.18241e-08,0.916909,0.000481519,-1.24516e-07,-2.71679e-08,0.917391,0.000481188,-2.06019e-07,2.72427e-08,0.917872,0.000480858,-1.24291e-07,-2.21985e-08,0.918353,0.000480543,-1.90886e-07,1.94644e-09,0.918833,0.000480167,-1.85047e-07,1.44127e-08,0.919313,0.00047984,-1.41809e-07,7.39438e-12,0.919793,0.000479556,-1.41787e-07,-1.44423e-08,0.920272,0.000479229,-1.85114e-07,-1.84291e-09,0.920751,0.000478854,-1.90642e-07,2.18139e-08,0.92123,0.000478538,-1.25201e-07,-2.58081e-08,0.921708,0.00047821,-2.02625e-07,2.18139e-08,0.922186,0.00047787,-1.37183e-07,-1.84291e-09,0.922664,0.00047759,-1.42712e-07,-1.44423e-08,0.923141,0.000477262,-1.86039e-07,7.34701e-12,0.923618,0.00047689,-1.86017e-07,1.44129e-08,0.924095,0.000476561,-1.42778e-07,1.94572e-09,0.924572,0.000476281,-1.36941e-07,-2.21958e-08,0.925048,0.000475941,-2.03528e-07,2.72327e-08,0.925523,0.000475615,-1.2183e-07,-2.71304e-08,0.925999,0.00047529,-2.03221e-07,2.16843e-08,0.926474,0.000474949,-1.38168e-07,-2.16005e-12,0.926949,0.000474672,-1.38175e-07,-2.16756e-08,0.927423,0.000474331,-2.03202e-07,2.71001e-08,0.927897,0.000474006,-1.21902e-07,-2.71201e-08,0.928371,0.000473681,-2.03262e-07,2.17757e-08,0.928845,0.00047334,-1.37935e-07,-3.78028e-10,0.929318,0.000473063,-1.39069e-07,-2.02636e-08,0.929791,0.000472724,-1.9986e-07,2.18276e-08,0.930263,0.000472389,-1.34377e-07,-7.44231e-09,0.930736,0.000472098,-1.56704e-07,7.94165e-09,0.931208,0.000471809,-1.32879e-07,-2.43243e-08,0.931679,0.00047147,-2.05851e-07,2.97508e-08,0.932151,0.000471148,-1.16599e-07,-3.50742e-08,0.932622,0.000470809,-2.21822e-07,5.09414e-08,0.933092,0.000470518,-6.89976e-08,-4.94821e-08,0.933563,0.000470232,-2.17444e-07,2.77775e-08,0.934033,0.00046988,-1.34111e-07,-2.02351e-09,0.934502,0.000469606,-1.40182e-07,-1.96835e-08,0.934972,0.000469267,-1.99232e-07,2.11529e-08,0.935441,0.000468932,-1.35774e-07,-5.32332e-09,0.93591,0.000468644,-1.51743e-07,1.40413e-10,0.936378,0.000468341,-1.51322e-07,4.76166e-09,0.936846,0.000468053,-1.37037e-07,-1.9187e-08,0.937314,0.000467721,-1.94598e-07,1.23819e-08,0.937782,0.000467369,-1.57453e-07,2.92642e-08,0.938249,0.000467142,-6.96601e-08,-6.98342e-08,0.938716,0.000466793,-2.79163e-07,7.12586e-08,0.939183,0.000466449,-6.53869e-08,-3.63863e-08,0.939649,0.000466209,-1.74546e-07,1.46818e-08,0.940115,0.000465904,-1.305e-07,-2.2341e-08,0.940581,0.000465576,-1.97523e-07,1.50774e-08,0.941046,0.000465226,-1.52291e-07,2.16359e-08,0.941511,0.000464986,-8.73832e-08,-4.20162e-08,0.941976,0.000464685,-2.13432e-07,2.72198e-08,0.942441,0.00046434,-1.31773e-07,-7.2581e-09,0.942905,0.000464055,-1.53547e-07,1.81263e-09,0.943369,0.000463753,-1.48109e-07,7.58386e-12,0.943832,0.000463457,-1.48086e-07,-1.84298e-09,0.944296,0.000463155,-1.53615e-07,7.36433e-09,0.944759,0.00046287,-1.31522e-07,-2.76143e-08,0.945221,0.000462524,-2.14365e-07,4.34883e-08,0.945684,0.000462226,-8.39003e-08,-2.71297e-08,0.946146,0.000461977,-1.65289e-07,5.42595e-09,0.946608,0.000461662,-1.49012e-07,5.42593e-09,0.947069,0.000461381,-1.32734e-07,-2.71297e-08,0.94753,0.000461034,-2.14123e-07,4.34881e-08,0.947991,0.000460736,-8.36585e-08,-2.76134e-08,0.948452,0.000460486,-1.66499e-07,7.36083e-09,0.948912,0.000460175,-1.44416e-07,-1.82993e-09,0.949372,0.000459881,-1.49906e-07,-4.11073e-11,0.949832,0.000459581,-1.50029e-07,1.99434e-09,0.950291,0.000459287,-1.44046e-07,-7.93627e-09,0.950751,0.000458975,-1.67855e-07,2.97507e-08,0.951209,0.000458728,-7.86029e-08,-5.1462e-08,0.951668,0.000458417,-2.32989e-07,5.6888e-08,0.952126,0.000458121,-6.2325e-08,-5.68806e-08,0.952584,0.000457826,-2.32967e-07,5.14251e-08,0.953042,0.000457514,-7.86914e-08,-2.96107e-08,0.953499,0.000457268,-1.67523e-07,7.41296e-09,0.953956,0.000456955,-1.45285e-07,-4.11262e-11,0.954413,0.000456665,-1.45408e-07,-7.24847e-09,0.95487,0.000456352,-1.67153e-07,2.9035e-08,0.955326,0.000456105,-8.00484e-08,-4.92869e-08,0.955782,0.000455797,-2.27909e-07,4.89032e-08,0.956238,0.000455488,-8.11994e-08,-2.71166e-08,0.956693,0.000455244,-1.62549e-07,-4.13678e-11,0.957148,0.000454919,-1.62673e-07,2.72821e-08,0.957603,0.000454675,-8.0827e-08,-4.94824e-08,0.958057,0.000454365,-2.29274e-07,5.14382e-08,0.958512,0.000454061,-7.49597e-08,-3.7061e-08,0.958965,0.0004538,-1.86143e-07,3.72013e-08,0.959419,0.000453539,-7.45389e-08,-5.21396e-08,0.959873,0.000453234,-2.30958e-07,5.21476e-08,0.960326,0.000452928,-7.45146e-08,-3.72416e-08,0.960778,0.000452667,-1.8624e-07,3.72143e-08,0.961231,0.000452407,-7.45967e-08,-5.20109e-08,0.961683,0.000452101,-2.30629e-07,5.16199e-08,0.962135,0.000451795,-7.57696e-08,-3.52595e-08,0.962587,0.000451538,-1.81548e-07,2.98133e-08,0.963038,0.000451264,-9.2108e-08,-2.43892e-08,0.963489,0.000451007,-1.65276e-07,8.13892e-09,0.96394,0.000450701,-1.40859e-07,-8.16647e-09,0.964391,0.000450394,-1.65358e-07,2.45269e-08,0.964841,0.000450137,-9.17775e-08,-3.03367e-08,0.965291,0.000449863,-1.82787e-07,3.7215e-08,0.965741,0.000449609,-7.11424e-08,-5.89188e-08,0.96619,0.00044929,-2.47899e-07,7.92509e-08,0.966639,0.000449032,-1.01462e-08,-7.92707e-08,0.967088,0.000448773,-2.47958e-07,5.90181e-08,0.967537,0.000448455,-7.0904e-08,-3.75925e-08,0.967985,0.0004482,-1.83681e-07,3.17471e-08,0.968433,0.000447928,-8.84401e-08,-2.97913e-08,0.968881,0.000447662,-1.77814e-07,2.78133e-08,0.969329,0.000447389,-9.4374e-08,-2.18572e-08,0.969776,0.000447135,-1.59946e-07,1.10134e-11,0.970223,0.000446815,-1.59913e-07,2.18132e-08,0.97067,0.000446561,-9.44732e-08,-2.76591e-08,0.971116,0.000446289,-1.7745e-07,2.92185e-08,0.971562,0.000446022,-8.97948e-08,-2.96104e-08,0.972008,0.000445753,-1.78626e-07,2.96185e-08,0.972454,0.000445485,-8.97706e-08,-2.92588e-08,0.972899,0.000445218,-1.77547e-07,2.78123e-08,0.973344,0.000444946,-9.41103e-08,-2.23856e-08,0.973789,0.000444691,-1.61267e-07,2.12559e-09,0.974233,0.000444374,-1.5489e-07,1.38833e-08,0.974678,0.000444106,-1.13241e-07,1.94591e-09,0.975122,0.000443886,-1.07403e-07,-2.16669e-08,0.975565,0.000443606,-1.72404e-07,2.5117e-08,0.976009,0.000443336,-9.70526e-08,-1.91963e-08,0.976452,0.000443085,-1.54642e-07,-7.93627e-09,0.976895,0.000442752,-1.7845e-07,5.09414e-08,0.977338,0.000442548,-2.56262e-08,-7.66201e-08,0.97778,0.000442266,-2.55486e-07,7.67249e-08,0.978222,0.000441986,-2.53118e-08,-5.14655e-08,0.978664,0.000441781,-1.79708e-07,9.92773e-09,0.979106,0.000441451,-1.49925e-07,1.17546e-08,0.979547,0.000441186,-1.14661e-07,2.65868e-09,0.979988,0.000440965,-1.06685e-07,-2.23893e-08,0.980429,0.000440684,-1.73853e-07,2.72939e-08,0.980869,0.000440419,-9.19716e-08,-2.71816e-08,0.98131,0.000440153,-1.73516e-07,2.18278e-08,0.98175,0.000439872,-1.08033e-07,-5.24833e-10,0.982189,0.000439654,-1.09607e-07,-1.97284e-08,0.982629,0.000439376,-1.68793e-07,1.98339e-08,0.983068,0.000439097,-1.09291e-07,-2.62901e-12,0.983507,0.000438879,-1.09299e-07,-1.98234e-08,0.983946,0.000438601,-1.68769e-07,1.96916e-08,0.984384,0.000438322,-1.09694e-07,6.6157e-10,0.984823,0.000438105,-1.0771e-07,-2.23379e-08,0.985261,0.000437823,-1.74723e-07,2.90855e-08,0.985698,0.00043756,-8.74669e-08,-3.43992e-08,0.986136,0.000437282,-1.90665e-07,4.89068e-08,0.986573,0.000437048,-4.39442e-08,-4.20188e-08,0.98701,0.000436834,-1.7e-07,-4.11073e-11,0.987446,0.000436494,-1.70124e-07,4.21832e-08,0.987883,0.00043628,-4.35742e-08,-4.94824e-08,0.988319,0.000436044,-1.92021e-07,3.6537e-08,0.988755,0.00043577,-8.24102e-08,-3.70611e-08,0.989191,0.000435494,-1.93593e-07,5.21026e-08,0.989626,0.000435263,-3.72855e-08,-5.21402e-08,0.990061,0.000435032,-1.93706e-07,3.7249e-08,0.990496,0.000434756,-8.19592e-08,-3.72512e-08,0.990931,0.000434481,-1.93713e-07,5.21511e-08,0.991365,0.00043425,-3.72595e-08,-5.21439e-08,0.991799,0.000434019,-1.93691e-07,3.72152e-08,0.992233,0.000433743,-8.20456e-08,-3.71123e-08,0.992667,0.000433468,-1.93382e-07,5.16292e-08,0.9931,0.000433236,-3.84947e-08,-5.01953e-08,0.993533,0.000433008,-1.89081e-07,2.99427e-08,0.993966,0.00043272,-9.92525e-08,-9.9708e-09,0.994399,0.000432491,-1.29165e-07,9.94051e-09,0.994831,0.000432263,-9.93434e-08,-2.97912e-08,0.995263,0.000431975,-1.88717e-07,4.96198e-08,0.995695,0.000431746,-3.98578e-08,-4.94785e-08,0.996127,0.000431518,-1.88293e-07,2.9085e-08,0.996558,0.000431229,-1.01038e-07,-7.25675e-09,0.996989,0.000431005,-1.22809e-07,-5.79945e-11,0.99742,0.000430759,-1.22983e-07,7.48873e-09,0.997851,0.000430536,-1.00516e-07,-2.98969e-08,0.998281,0.000430245,-1.90207e-07,5.24942e-08,0.998711,0.000430022,-3.27246e-08,-6.08706e-08,0.999141,0.000429774,-2.15336e-07,7.17788e-08,0.999571,0.000429392,0.,0.};$/;"	m	namespace:cv::cuda::device::color_detail
c_sRGBInvGammaTab	cudev/functional/detail/color_cvt.hpp	/^    __constant__ float c_sRGBInvGammaTab[] = {0,0.0126255,0.,-8.33961e-06,0.0126172,0.0126005,-2.50188e-05,4.1698e-05,0.0252344,0.0126756,0.000100075,-0.000158451,0.0378516,0.0124004,-0.000375277,-0.000207393,0.0496693,0.0110276,-0.000997456,0.00016837,0.0598678,0.00953783,-0.000492346,2.07235e-05,0.068934,0.00861531,-0.000430176,3.62876e-05,0.0771554,0.00786382,-0.000321313,1.87625e-05,0.0847167,0.00727748,-0.000265025,1.53594e-05,0.0917445,0.00679351,-0.000218947,1.10545e-05,0.0983301,0.00638877,-0.000185784,8.66984e-06,0.104542,0.00604322,-0.000159774,6.82996e-06,0.110432,0.00574416,-0.000139284,5.51008e-06,0.116042,0.00548212,-0.000122754,4.52322e-06,0.121406,0.00525018,-0.000109184,3.75557e-06,0.126551,0.00504308,-9.79177e-05,3.17134e-06,0.131499,0.00485676,-8.84037e-05,2.68469e-06,0.13627,0.004688,-8.03496e-05,2.31725e-06,0.14088,0.00453426,-7.33978e-05,2.00868e-06,0.145343,0.00439349,-6.73718e-05,1.74775e-06,0.149671,0.00426399,-6.21286e-05,1.53547e-06,0.153875,0.00414434,-5.75222e-05,1.364e-06,0.157963,0.00403338,-5.34301e-05,1.20416e-06,0.161944,0.00393014,-4.98177e-05,1.09114e-06,0.165825,0.00383377,-4.65443e-05,9.57987e-07,0.169613,0.00374356,-4.36703e-05,8.88359e-07,0.173314,0.00365888,-4.10052e-05,7.7849e-07,0.176933,0.00357921,-3.86697e-05,7.36254e-07,0.180474,0.00350408,-3.6461e-05,6.42534e-07,0.183942,0.00343308,-3.45334e-05,6.12614e-07,0.187342,0.00336586,-3.26955e-05,5.42894e-07,0.190675,0.00330209,-3.10669e-05,5.08967e-07,0.193947,0.00324149,-2.954e-05,4.75977e-07,0.197159,0.00318383,-2.8112e-05,4.18343e-07,0.200315,0.00312887,-2.6857e-05,4.13651e-07,0.203418,0.00307639,-2.5616e-05,3.70847e-07,0.206469,0.00302627,-2.45035e-05,3.3813e-07,0.209471,0.00297828,-2.34891e-05,3.32999e-07,0.212426,0.0029323,-2.24901e-05,2.96826e-07,0.215336,0.00288821,-2.15996e-05,2.82736e-07,0.218203,0.00284586,-2.07514e-05,2.70961e-07,0.221029,0.00280517,-1.99385e-05,2.42744e-07,0.223814,0.00276602,-1.92103e-05,2.33277e-07,0.226561,0.0027283,-1.85105e-05,2.2486e-07,0.229271,0.00269195,-1.78359e-05,2.08383e-07,0.231945,0.00265691,-1.72108e-05,1.93305e-07,0.234585,0.00262307,-1.66308e-05,1.80687e-07,0.237192,0.00259035,-1.60888e-05,1.86632e-07,0.239766,0.00255873,-1.55289e-05,1.60569e-07,0.24231,0.00252815,-1.50472e-05,1.54566e-07,0.244823,0.00249852,-1.45835e-05,1.59939e-07,0.247307,0.00246983,-1.41037e-05,1.29549e-07,0.249763,0.00244202,-1.3715e-05,1.41429e-07,0.252191,0.00241501,-1.32907e-05,1.39198e-07,0.254593,0.00238885,-1.28731e-05,1.06444e-07,0.256969,0.00236342,-1.25538e-05,1.2048e-07,0.25932,0.00233867,-1.21924e-05,1.26892e-07,0.261647,0.00231467,-1.18117e-05,8.72084e-08,0.26395,0.00229131,-1.15501e-05,1.20323e-07,0.26623,0.00226857,-1.11891e-05,8.71514e-08,0.268487,0.00224645,-1.09276e-05,9.73165e-08,0.270723,0.00222489,-1.06357e-05,8.98259e-08,0.272937,0.00220389,-1.03662e-05,7.98218e-08,0.275131,0.00218339,-1.01267e-05,9.75254e-08,0.277304,0.00216343,-9.83416e-06,6.65195e-08,0.279458,0.00214396,-9.63461e-06,8.34313e-08,0.281592,0.00212494,-9.38431e-06,7.65919e-08,0.283708,0.00210641,-9.15454e-06,5.7236e-08,0.285805,0.00208827,-8.98283e-06,8.18939e-08,0.287885,0.00207055,-8.73715e-06,6.2224e-08,0.289946,0.00205326,-8.55047e-06,5.66388e-08,0.291991,0.00203633,-8.38056e-06,6.88491e-08,0.294019,0.00201978,-8.17401e-06,5.53955e-08,0.296031,0.00200359,-8.00782e-06,6.71971e-08,0.298027,0.00198778,-7.80623e-06,3.34439e-08,0.300007,0.00197227,-7.7059e-06,6.7248e-08,0.301971,0.00195706,-7.50416e-06,5.51915e-08,0.303921,0.00194221,-7.33858e-06,3.98124e-08,0.305856,0.00192766,-7.21915e-06,5.37795e-08,0.307776,0.00191338,-7.05781e-06,4.30919e-08,0.309683,0.00189939,-6.92853e-06,4.20744e-08,0.311575,0.00188566,-6.80231e-06,5.68321e-08,0.313454,0.00187223,-6.63181e-06,2.86195e-08,0.31532,0.00185905,-6.54595e-06,3.73075e-08,0.317172,0.00184607,-6.43403e-06,6.05684e-08,0.319012,0.00183338,-6.25233e-06,1.84426e-08,0.320839,0.00182094,-6.197e-06,4.44757e-08,0.322654,0.00180867,-6.06357e-06,4.20729e-08,0.324456,0.00179667,-5.93735e-06,2.56511e-08,0.326247,0.00178488,-5.8604e-06,3.41368e-08,0.328026,0.00177326,-5.75799e-06,4.64177e-08,0.329794,0.00176188,-5.61874e-06,1.86107e-08,0.33155,0.0017507,-5.5629e-06,2.81511e-08,0.333295,0.00173966,-5.47845e-06,4.75987e-08,0.335029,0.00172884,-5.33565e-06,1.98726e-08,0.336753,0.00171823,-5.27604e-06,2.19226e-08,0.338466,0.00170775,-5.21027e-06,4.14483e-08,0.340169,0.00169745,-5.08592e-06,2.09017e-08,0.341861,0.00168734,-5.02322e-06,2.39561e-08,0.343543,0.00167737,-4.95135e-06,3.22852e-08,0.345216,0.00166756,-4.85449e-06,2.57173e-08,0.346878,0.00165793,-4.77734e-06,1.38569e-08,0.348532,0.00164841,-4.73577e-06,3.80634e-08,0.350175,0.00163906,-4.62158e-06,1.27043e-08,0.35181,0.00162985,-4.58347e-06,3.03279e-08,0.353435,0.00162078,-4.49249e-06,1.49961e-08,0.355051,0.00161184,-4.4475e-06,2.88977e-08,0.356659,0.00160303,-4.3608e-06,1.84241e-08,0.358257,0.00159436,-4.30553e-06,1.6616e-08,0.359848,0.0015858,-4.25568e-06,3.43218e-08,0.361429,0.00157739,-4.15272e-06,-4.89172e-09,0.363002,0.00156907,-4.16739e-06,4.48498e-08,0.364567,0.00156087,-4.03284e-06,4.30676e-09,0.366124,0.00155282,-4.01992e-06,2.73303e-08,0.367673,0.00154486,-3.93793e-06,5.58036e-09,0.369214,0.001537,-3.92119e-06,3.97554e-08,0.370747,0.00152928,-3.80193e-06,-1.55904e-08,0.372272,0.00152163,-3.8487e-06,5.24081e-08,0.37379,0.00151409,-3.69147e-06,-1.52272e-08,0.375301,0.00150666,-3.73715e-06,3.83028e-08,0.376804,0.0014993,-3.62225e-06,1.10278e-08,0.378299,0.00149209,-3.58916e-06,6.99326e-09,0.379788,0.00148493,-3.56818e-06,2.06038e-08,0.381269,0.00147786,-3.50637e-06,2.98009e-08,0.382744,0.00147093,-3.41697e-06,-2.05978e-08,0.384211,0.00146404,-3.47876e-06,5.25899e-08,0.385672,0.00145724,-3.32099e-06,-1.09471e-08,0.387126,0.00145056,-3.35383e-06,2.10009e-08,0.388573,0.00144392,-3.29083e-06,1.63501e-08,0.390014,0.00143739,-3.24178e-06,3.00641e-09,0.391448,0.00143091,-3.23276e-06,3.12282e-08,0.392875,0.00142454,-3.13908e-06,-8.70932e-09,0.394297,0.00141824,-3.16521e-06,3.34114e-08,0.395712,0.00141201,-3.06497e-06,-5.72754e-09,0.397121,0.00140586,-3.08215e-06,1.9301e-08,0.398524,0.00139975,-3.02425e-06,1.7931e-08,0.39992,0.00139376,-2.97046e-06,-1.61822e-09,0.401311,0.00138781,-2.97531e-06,1.83442e-08,0.402696,0.00138192,-2.92028e-06,1.76485e-08,0.404075,0.00137613,-2.86733e-06,4.68617e-10,0.405448,0.00137039,-2.86593e-06,1.02794e-08,0.406816,0.00136469,-2.83509e-06,1.80179e-08,0.408178,0.00135908,-2.78104e-06,7.05594e-09,0.409534,0.00135354,-2.75987e-06,1.33633e-08,0.410885,0.00134806,-2.71978e-06,-9.04568e-10,0.41223,0.00134261,-2.72249e-06,2.0057e-08,0.41357,0.00133723,-2.66232e-06,1.00841e-08,0.414905,0.00133194,-2.63207e-06,-7.88835e-10,0.416234,0.00132667,-2.63444e-06,2.28734e-08,0.417558,0.00132147,-2.56582e-06,-1.29785e-09,0.418877,0.00131633,-2.56971e-06,1.21205e-08,0.420191,0.00131123,-2.53335e-06,1.24202e-08,0.421499,0.0013062,-2.49609e-06,-2.19681e-09,0.422803,0.0013012,-2.50268e-06,2.61696e-08,0.424102,0.00129628,-2.42417e-06,-1.30747e-08,0.425396,0.00129139,-2.46339e-06,2.6129e-08,0.426685,0.00128654,-2.38501e-06,-2.03454e-09,0.427969,0.00128176,-2.39111e-06,1.18115e-08,0.429248,0.00127702,-2.35567e-06,1.43932e-08,0.430523,0.00127235,-2.31249e-06,-9.77965e-09,0.431793,0.00126769,-2.34183e-06,2.47253e-08,0.433058,0.00126308,-2.26766e-06,2.85278e-10,0.434319,0.00125855,-2.2668e-06,3.93614e-09,0.435575,0.00125403,-2.25499e-06,1.37722e-08,0.436827,0.00124956,-2.21368e-06,5.79803e-10,0.438074,0.00124513,-2.21194e-06,1.37112e-08,0.439317,0.00124075,-2.1708e-06,4.17973e-09,0.440556,0.00123642,-2.15826e-06,-6.27703e-10,0.44179,0.0012321,-2.16015e-06,2.81332e-08,0.44302,0.00122787,-2.07575e-06,-2.24985e-08,0.444246,0.00122365,-2.14324e-06,3.20586e-08,0.445467,0.00121946,-2.04707e-06,-1.6329e-08,0.446685,0.00121532,-2.09605e-06,3.32573e-08,0.447898,0.00121122,-1.99628e-06,-2.72927e-08,0.449107,0.00120715,-2.07816e-06,4.6111e-08,0.450312,0.00120313,-1.93983e-06,-3.79416e-08,0.451514,0.00119914,-2.05365e-06,4.60507e-08,0.452711,0.00119517,-1.9155e-06,-2.7052e-08,0.453904,0.00119126,-1.99666e-06,3.23551e-08,0.455093,0.00118736,-1.89959e-06,-1.29613e-08,0.456279,0.00118352,-1.93848e-06,1.94905e-08,0.45746,0.0011797,-1.88e-06,-5.39588e-09,0.458638,0.00117593,-1.89619e-06,2.09282e-09,0.459812,0.00117214,-1.88991e-06,2.68267e-08,0.460982,0.00116844,-1.80943e-06,-1.99925e-08,0.462149,0.00116476,-1.86941e-06,2.3341e-08,0.463312,0.00116109,-1.79939e-06,-1.37674e-08,0.464471,0.00115745,-1.84069e-06,3.17287e-08,0.465627,0.00115387,-1.7455e-06,-2.37407e-08,0.466779,0.00115031,-1.81673e-06,3.34315e-08,0.467927,0.00114677,-1.71643e-06,-2.05786e-08,0.469073,0.00114328,-1.77817e-06,1.90802e-08,0.470214,0.00113978,-1.72093e-06,3.86247e-09,0.471352,0.00113635,-1.70934e-06,-4.72759e-09,0.472487,0.00113292,-1.72352e-06,1.50478e-08,0.473618,0.00112951,-1.67838e-06,4.14108e-09,0.474746,0.00112617,-1.66595e-06,-1.80986e-09,0.47587,0.00112283,-1.67138e-06,3.09816e-09,0.476991,0.0011195,-1.66209e-06,1.92198e-08,0.478109,0.00111623,-1.60443e-06,-2.03726e-08,0.479224,0.00111296,-1.66555e-06,3.2468e-08,0.480335,0.00110973,-1.56814e-06,-2.00922e-08,0.481443,0.00110653,-1.62842e-06,1.80983e-08,0.482548,0.00110333,-1.57413e-06,7.30362e-09,0.48365,0.0011002,-1.55221e-06,-1.75107e-08,0.484749,0.00109705,-1.60475e-06,3.29373e-08,0.485844,0.00109393,-1.50594e-06,-2.48315e-08,0.486937,0.00109085,-1.58043e-06,3.65865e-08,0.488026,0.0010878,-1.47067e-06,-3.21078e-08,0.489112,0.00108476,-1.56699e-06,3.22397e-08,0.490195,0.00108172,-1.47027e-06,-7.44391e-09,0.491276,0.00107876,-1.49261e-06,-2.46428e-09,0.492353,0.00107577,-1.5e-06,1.73011e-08,0.493427,0.00107282,-1.4481e-06,-7.13552e-09,0.494499,0.0010699,-1.4695e-06,1.1241e-08,0.495567,0.001067,-1.43578e-06,-8.02637e-09,0.496633,0.0010641,-1.45986e-06,2.08645e-08,0.497695,0.00106124,-1.39726e-06,-1.58271e-08,0.498755,0.0010584,-1.44475e-06,1.26415e-08,0.499812,0.00105555,-1.40682e-06,2.48655e-08,0.500866,0.00105281,-1.33222e-06,-5.24988e-08,0.501918,0.00104999,-1.48972e-06,6.59206e-08,0.502966,0.00104721,-1.29196e-06,-3.237e-08,0.504012,0.00104453,-1.38907e-06,3.95479e-09,0.505055,0.00104176,-1.3772e-06,1.65509e-08,0.506096,0.00103905,-1.32755e-06,-1.05539e-08,0.507133,0.00103637,-1.35921e-06,2.56648e-08,0.508168,0.00103373,-1.28222e-06,-3.25007e-08,0.509201,0.00103106,-1.37972e-06,4.47336e-08,0.51023,0.00102844,-1.24552e-06,-2.72245e-08,0.511258,0.00102587,-1.32719e-06,4.55952e-09,0.512282,0.00102323,-1.31352e-06,8.98645e-09,0.513304,0.00102063,-1.28656e-06,1.90992e-08,0.514323,0.00101811,-1.22926e-06,-2.57786e-08,0.51534,0.00101557,-1.30659e-06,2.44104e-08,0.516355,0.00101303,-1.23336e-06,-1.22581e-08,0.517366,0.00101053,-1.27014e-06,2.4622e-08,0.518376,0.00100806,-1.19627e-06,-2.66253e-08,0.519383,0.00100559,-1.27615e-06,2.22744e-08,0.520387,0.00100311,-1.20932e-06,-2.8679e-09,0.521389,0.00100068,-1.21793e-06,-1.08029e-08,0.522388,0.000998211,-1.25034e-06,4.60795e-08,0.523385,0.000995849,-1.1121e-06,-5.4306e-08,0.52438,0.000993462,-1.27502e-06,5.19354e-08,0.525372,0.000991067,-1.11921e-06,-3.42262e-08,0.526362,0.000988726,-1.22189e-06,2.53646e-08,0.52735,0.000986359,-1.14579e-06,-7.62782e-09,0.528335,0.000984044,-1.16868e-06,5.14668e-09,0.529318,0.000981722,-1.15324e-06,-1.29589e-08,0.530298,0.000979377,-1.19211e-06,4.66888e-08,0.531276,0.000977133,-1.05205e-06,-5.45868e-08,0.532252,0.000974865,-1.21581e-06,5.24495e-08,0.533226,0.000972591,-1.05846e-06,-3.60019e-08,0.534198,0.000970366,-1.16647e-06,3.19537e-08,0.535167,0.000968129,-1.07061e-06,-3.2208e-08,0.536134,0.000965891,-1.16723e-06,3.72738e-08,0.537099,0.000963668,-1.05541e-06,2.32205e-09,0.538061,0.000961564,-1.04844e-06,-4.65618e-08,0.539022,0.000959328,-1.18813e-06,6.47159e-08,0.53998,0.000957146,-9.93979e-07,-3.3488e-08,0.540936,0.000955057,-1.09444e-06,9.63166e-09,0.54189,0.000952897,-1.06555e-06,-5.03871e-09,0.542842,0.000950751,-1.08066e-06,1.05232e-08,0.543792,0.000948621,-1.04909e-06,2.25503e-08,0.544739,0.000946591,-9.81444e-07,-4.11195e-08,0.545685,0.000944504,-1.1048e-06,2.27182e-08,0.546628,0.000942363,-1.03665e-06,9.85146e-09,0.54757,0.000940319,-1.00709e-06,-2.51938e-09,0.548509,0.000938297,-1.01465e-06,2.25858e-10,0.549446,0.000936269,-1.01397e-06,1.61598e-09,0.550381,0.000934246,-1.00913e-06,-6.68983e-09,0.551315,0.000932207,-1.0292e-06,2.51434e-08,0.552246,0.000930224,-9.53765e-07,-3.42793e-08,0.553175,0.000928214,-1.0566e-06,5.23688e-08,0.554102,0.000926258,-8.99497e-07,-5.59865e-08,0.555028,0.000924291,-1.06746e-06,5.23679e-08,0.555951,0.000922313,-9.10352e-07,-3.42763e-08,0.556872,0.00092039,-1.01318e-06,2.51326e-08,0.557792,0.000918439,-9.37783e-07,-6.64954e-09,0.558709,0.000916543,-9.57732e-07,1.46554e-09,0.559625,0.000914632,-9.53335e-07,7.87281e-10,0.560538,0.000912728,-9.50973e-07,-4.61466e-09,0.56145,0.000910812,-9.64817e-07,1.76713e-08,0.56236,0.000908935,-9.11804e-07,-6.46564e-09,0.563268,0.000907092,-9.312e-07,8.19121e-09,0.564174,0.000905255,-9.06627e-07,-2.62992e-08,0.565078,0.000903362,-9.85524e-07,3.74007e-08,0.565981,0.000901504,-8.73322e-07,-4.0942e-09,0.566882,0.000899745,-8.85605e-07,-2.1024e-08,0.56778,0.00089791,-9.48677e-07,2.85854e-08,0.568677,0.000896099,-8.62921e-07,-3.3713e-08,0.569573,0.000894272,-9.64059e-07,4.6662e-08,0.570466,0.000892484,-8.24073e-07,-3.37258e-08,0.571358,0.000890734,-9.25251e-07,2.86365e-08,0.572247,0.00088897,-8.39341e-07,-2.12155e-08,0.573135,0.000887227,-9.02988e-07,-3.37913e-09,0.574022,0.000885411,-9.13125e-07,3.47319e-08,0.574906,0.000883689,-8.08929e-07,-1.63394e-08,0.575789,0.000882022,-8.57947e-07,-2.8979e-08,0.57667,0.00088022,-9.44885e-07,7.26509e-08,0.57755,0.000878548,-7.26932e-07,-8.28106e-08,0.578427,0.000876845,-9.75364e-07,7.97774e-08,0.579303,0.000875134,-7.36032e-07,-5.74849e-08,0.580178,0.00087349,-9.08486e-07,3.09529e-08,0.58105,0.000871765,-8.15628e-07,-6.72206e-09,0.581921,0.000870114,-8.35794e-07,-4.06451e-09,0.582791,0.00086843,-8.47987e-07,2.29799e-08,0.583658,0.000866803,-7.79048e-07,-2.82503e-08,0.584524,0.00086516,-8.63799e-07,3.04167e-08,0.585388,0.000863524,-7.72548e-07,-3.38119e-08,0.586251,0.000861877,-8.73984e-07,4.52264e-08,0.587112,0.000860265,-7.38305e-07,-2.78842e-08,0.587972,0.000858705,-8.21958e-07,6.70567e-09,0.58883,0.000857081,-8.01841e-07,1.06161e-09,0.589686,0.000855481,-7.98656e-07,-1.09521e-08,0.590541,0.00085385,-8.31512e-07,4.27468e-08,0.591394,0.000852316,-7.03272e-07,-4.08257e-08,0.592245,0.000850787,-8.25749e-07,1.34677e-09,0.593095,0.000849139,-8.21709e-07,3.54387e-08,0.593944,0.000847602,-7.15393e-07,-2.38924e-08,0.59479,0.0008461,-7.8707e-07,5.26143e-10,0.595636,0.000844527,-7.85491e-07,2.17879e-08,0.596479,0.000843021,-7.20127e-07,-2.80733e-08,0.597322,0.000841497,-8.04347e-07,3.09005e-08,0.598162,0.000839981,-7.11646e-07,-3.5924e-08,0.599002,0.00083845,-8.19418e-07,5.3191e-08,0.599839,0.000836971,-6.59845e-07,-5.76307e-08,0.600676,0.000835478,-8.32737e-07,5.81227e-08,0.60151,0.000833987,-6.58369e-07,-5.56507e-08,0.602344,0.000832503,-8.25321e-07,4.52706e-08,0.603175,0.000830988,-6.89509e-07,-6.22236e-09,0.604006,0.000829591,-7.08176e-07,-2.03811e-08,0.604834,0.000828113,-7.6932e-07,2.8142e-08,0.605662,0.000826659,-6.84894e-07,-3.25822e-08,0.606488,0.000825191,-7.8264e-07,4.25823e-08,0.607312,0.000823754,-6.54893e-07,-1.85376e-08,0.608135,0.000822389,-7.10506e-07,-2.80365e-08,0.608957,0.000820883,-7.94616e-07,7.1079e-08,0.609777,0.000819507,-5.81379e-07,-7.74655e-08,0.610596,0.000818112,-8.13775e-07,5.9969e-08,0.611413,0.000816665,-6.33868e-07,-4.32013e-08,0.612229,0.000815267,-7.63472e-07,5.32313e-08,0.613044,0.0008139,-6.03778e-07,-5.05148e-08,0.613857,0.000812541,-7.55323e-07,2.96187e-08,0.614669,0.000811119,-6.66466e-07,-8.35545e-09,0.615479,0.000809761,-6.91533e-07,3.80301e-09,0.616288,0.00080839,-6.80124e-07,-6.85666e-09,0.617096,0.000807009,-7.00694e-07,2.36237e-08,0.617903,0.000805678,-6.29822e-07,-2.80336e-08,0.618708,0.000804334,-7.13923e-07,2.8906e-08,0.619511,0.000802993,-6.27205e-07,-2.79859e-08,0.620314,0.000801655,-7.11163e-07,2.34329e-08,0.621114,0.000800303,-6.40864e-07,-6.14108e-09,0.621914,0.000799003,-6.59287e-07,1.13151e-09,0.622712,0.000797688,-6.55893e-07,1.61507e-09,0.62351,0.000796381,-6.51048e-07,-7.59186e-09,0.624305,0.000795056,-6.73823e-07,2.87524e-08,0.6251,0.000793794,-5.87566e-07,-4.7813e-08,0.625893,0.000792476,-7.31005e-07,4.32901e-08,0.626685,0.000791144,-6.01135e-07,-6.13814e-09,0.627475,0.000789923,-6.19549e-07,-1.87376e-08,0.628264,0.000788628,-6.75762e-07,2.14837e-08,0.629052,0.000787341,-6.11311e-07,-7.59265e-09,0.629839,0.000786095,-6.34089e-07,8.88692e-09,0.630625,0.000784854,-6.07428e-07,-2.7955e-08,0.631409,0.000783555,-6.91293e-07,4.33285e-08,0.632192,0.000782302,-5.61307e-07,-2.61497e-08,0.632973,0.000781101,-6.39757e-07,1.6658e-09,0.633754,0.000779827,-6.34759e-07,1.94866e-08,0.634533,0.000778616,-5.76299e-07,-2.00076e-08,0.635311,0.000777403,-6.36322e-07,9.39091e-10,0.636088,0.000776133,-6.33505e-07,1.62512e-08,0.636863,0.000774915,-5.84751e-07,-6.33937e-09,0.637638,0.000773726,-6.03769e-07,9.10609e-09,0.638411,0.000772546,-5.76451e-07,-3.00849e-08,0.639183,0.000771303,-6.66706e-07,5.1629e-08,0.639953,0.000770125,-5.11819e-07,-5.7222e-08,0.640723,0.000768929,-6.83485e-07,5.80497e-08,0.641491,0.000767736,-5.09336e-07,-5.57674e-08,0.642259,0.000766551,-6.76638e-07,4.58105e-08,0.643024,0.000765335,-5.39206e-07,-8.26541e-09,0.643789,0.000764231,-5.64002e-07,-1.27488e-08,0.644553,0.000763065,-6.02249e-07,-3.44168e-10,0.645315,0.00076186,-6.03281e-07,1.41254e-08,0.646077,0.000760695,-5.60905e-07,3.44727e-09,0.646837,0.000759584,-5.50563e-07,-2.79144e-08,0.647596,0.000758399,-6.34307e-07,4.86057e-08,0.648354,0.000757276,-4.88489e-07,-4.72989e-08,0.64911,0.000756158,-6.30386e-07,2.13807e-08,0.649866,0.000754961,-5.66244e-07,2.13808e-08,0.65062,0.000753893,-5.02102e-07,-4.7299e-08,0.651374,0.000752746,-6.43999e-07,4.86059e-08,0.652126,0.000751604,-4.98181e-07,-2.79154e-08,0.652877,0.000750524,-5.81927e-07,3.45089e-09,0.653627,0.000749371,-5.71575e-07,1.41119e-08,0.654376,0.00074827,-5.29239e-07,-2.93748e-10,0.655123,0.00074721,-5.3012e-07,-1.29368e-08,0.65587,0.000746111,-5.68931e-07,-7.56355e-09,0.656616,0.000744951,-5.91621e-07,4.3191e-08,0.65736,0.000743897,-4.62048e-07,-4.59911e-08,0.658103,0.000742835,-6.00022e-07,2.15642e-08,0.658846,0.0007417,-5.35329e-07,1.93389e-08,0.659587,0.000740687,-4.77312e-07,-3.93152e-08,0.660327,0.000739615,-5.95258e-07,1.87126e-08,0.661066,0.00073848,-5.3912e-07,2.40695e-08,0.661804,0.000737474,-4.66912e-07,-5.53859e-08,0.662541,0.000736374,-6.33069e-07,7.82648e-08,0.663277,0.000735343,-3.98275e-07,-7.88593e-08,0.664012,0.00073431,-6.34853e-07,5.83585e-08,0.664745,0.000733215,-4.59777e-07,-3.53656e-08,0.665478,0.000732189,-5.65874e-07,2.34994e-08,0.66621,0.000731128,-4.95376e-07,9.72743e-10,0.66694,0.00073014,-4.92458e-07,-2.73903e-08,0.66767,0.000729073,-5.74629e-07,4.89839e-08,0.668398,0.000728071,-4.27677e-07,-4.93359e-08,0.669126,0.000727068,-5.75685e-07,2.91504e-08,0.669853,0.000726004,-4.88234e-07,-7.66109e-09,0.670578,0.000725004,-5.11217e-07,1.49392e-09,0.671303,0.000723986,-5.06735e-07,1.68533e-09,0.672026,0.000722978,-5.01679e-07,-8.23525e-09,0.672749,0.00072195,-5.26385e-07,3.12556e-08,0.67347,0.000720991,-4.32618e-07,-5.71825e-08,0.674191,0.000719954,-6.04166e-07,7.8265e-08,0.67491,0.00071898,-3.69371e-07,-7.70634e-08,0.675628,0.00071801,-6.00561e-07,5.11747e-08,0.676346,0.000716963,-4.47037e-07,-8.42615e-09,0.677062,0.000716044,-4.72315e-07,-1.747e-08,0.677778,0.000715046,-5.24725e-07,1.87015e-08,0.678493,0.000714053,-4.68621e-07,2.26856e-09,0.679206,0.000713123,-4.61815e-07,-2.77758e-08,0.679919,0.000712116,-5.45142e-07,4.92298e-08,0.68063,0.000711173,-3.97453e-07,-4.99339e-08,0.681341,0.000710228,-5.47255e-07,3.12967e-08,0.682051,0.000709228,-4.53365e-07,-1.56481e-08,0.68276,0.000708274,-5.00309e-07,3.12958e-08,0.683467,0.000707367,-4.06422e-07,-4.99303e-08,0.684174,0.000706405,-5.56213e-07,4.9216e-08,0.68488,0.00070544,-4.08565e-07,-2.77245e-08,0.685585,0.00070454,-4.91738e-07,2.07748e-09,0.686289,0.000703562,-4.85506e-07,1.94146e-08,0.686992,0.00070265,-4.27262e-07,-2.01314e-08,0.687695,0.000701735,-4.87656e-07,1.50616e-09,0.688396,0.000700764,-4.83137e-07,1.41067e-08,0.689096,0.00069984,-4.40817e-07,1.67168e-09,0.689795,0.000698963,-4.35802e-07,-2.07934e-08,0.690494,0.000698029,-4.98182e-07,2.18972e-08,0.691192,0.000697099,-4.32491e-07,-7.19092e-09,0.691888,0.000696212,-4.54064e-07,6.86642e-09,0.692584,0.000695325,-4.33464e-07,-2.02747e-08,0.693279,0.000694397,-4.94288e-07,1.46279e-08,0.693973,0.000693452,-4.50405e-07,2.13678e-08,0.694666,0.000692616,-3.86301e-07,-4.04945e-08,0.695358,0.000691721,-5.07785e-07,2.14009e-08,0.696049,0.00069077,-4.43582e-07,1.44955e-08,0.69674,0.000689926,-4.00096e-07,-1.97783e-08,0.697429,0.000689067,-4.5943e-07,5.01296e-09,0.698118,0.000688163,-4.44392e-07,-2.73521e-10,0.698805,0.000687273,-4.45212e-07,-3.91893e-09,0.699492,0.000686371,-4.56969e-07,1.59493e-08,0.700178,0.000685505,-4.09121e-07,-2.73351e-10,0.700863,0.000684686,-4.09941e-07,-1.4856e-08,0.701548,0.000683822,-4.54509e-07,9.25979e-11,0.702231,0.000682913,-4.54231e-07,1.44855e-08,0.702913,0.000682048,-4.10775e-07,1.56992e-09,0.703595,0.000681231,-4.06065e-07,-2.07652e-08,0.704276,0.000680357,-4.68361e-07,2.18864e-08,0.704956,0.000679486,-4.02701e-07,-7.17595e-09,0.705635,0.000678659,-4.24229e-07,6.81748e-09,0.706313,0.000677831,-4.03777e-07,-2.0094e-08,0.70699,0.000676963,-4.64059e-07,1.39538e-08,0.707667,0.000676077,-4.22197e-07,2.38835e-08,0.708343,0.000675304,-3.50547e-07,-4.98831e-08,0.709018,0.000674453,-5.00196e-07,5.64395e-08,0.709692,0.000673622,-3.30878e-07,-5.66657e-08,0.710365,0.00067279,-5.00875e-07,5.1014e-08,0.711037,0.000671942,-3.47833e-07,-2.81809e-08,0.711709,0.000671161,-4.32376e-07,2.10513e-09,0.712379,0.000670303,-4.2606e-07,1.97604e-08,0.713049,0.00066951,-3.66779e-07,-2.15422e-08,0.713718,0.000668712,-4.31406e-07,6.8038e-09,0.714387,0.000667869,-4.10994e-07,-5.67295e-09,0.715054,0.00066703,-4.28013e-07,1.5888e-08,0.715721,0.000666222,-3.80349e-07,1.72576e-09,0.716387,0.000665467,-3.75172e-07,-2.27911e-08,0.717052,0.000664648,-4.43545e-07,2.9834e-08,0.717716,0.00066385,-3.54043e-07,-3.69401e-08,0.718379,0.000663031,-4.64864e-07,5.83219e-08,0.719042,0.000662277,-2.89898e-07,-7.71382e-08,0.719704,0.000661465,-5.21313e-07,7.14171e-08,0.720365,0.000660637,-3.07061e-07,-2.97161e-08,0.721025,0.000659934,-3.96209e-07,-1.21575e-08,0.721685,0.000659105,-4.32682e-07,1.87412e-08,0.722343,0.000658296,-3.76458e-07,-3.2029e-09,0.723001,0.000657533,-3.86067e-07,-5.9296e-09,0.723659,0.000656743,-4.03856e-07,2.69213e-08,0.724315,0.000656016,-3.23092e-07,-4.21511e-08,0.724971,0.000655244,-4.49545e-07,2.24737e-08,0.725625,0.000654412,-3.82124e-07,1.18611e-08,0.726279,0.000653683,-3.46541e-07,-1.03132e-08,0.726933,0.000652959,-3.7748e-07,-3.02128e-08,0.727585,0.000652114,-4.68119e-07,7.15597e-08,0.728237,0.000651392,-2.5344e-07,-7.72119e-08,0.728888,0.000650654,-4.85075e-07,5.8474e-08,0.729538,0.000649859,-3.09654e-07,-3.74746e-08,0.730188,0.000649127,-4.22077e-07,3.18197e-08,0.730837,0.000648379,-3.26618e-07,-3.01997e-08,0.731485,0.000647635,-4.17217e-07,2.93747e-08,0.732132,0.000646888,-3.29093e-07,-2.76943e-08,0.732778,0.000646147,-4.12176e-07,2.17979e-08,0.733424,0.000645388,-3.46783e-07,1.07292e-10,0.734069,0.000644695,-3.46461e-07,-2.22271e-08,0.734713,0.000643935,-4.13142e-07,2.91963e-08,0.735357,0.000643197,-3.25553e-07,-3.49536e-08,0.736,0.000642441,-4.30414e-07,5.10133e-08,0.736642,0.000641733,-2.77374e-07,-4.98904e-08,0.737283,0.000641028,-4.27045e-07,2.93392e-08,0.737924,0.000640262,-3.39028e-07,-7.86156e-09,0.738564,0.000639561,-3.62612e-07,2.10703e-09,0.739203,0.000638842,-3.56291e-07,-5.6653e-10,0.739842,0.000638128,-3.57991e-07,1.59086e-10,0.740479,0.000637412,-3.57513e-07,-6.98321e-11,0.741116,0.000636697,-3.57723e-07,1.20214e-10,0.741753,0.000635982,-3.57362e-07,-4.10987e-10,0.742388,0.000635266,-3.58595e-07,1.5237e-09,0.743023,0.000634553,-3.54024e-07,-5.68376e-09,0.743657,0.000633828,-3.71075e-07,2.12113e-08,0.744291,0.00063315,-3.07441e-07,-1.95569e-08,0.744924,0.000632476,-3.66112e-07,-2.58816e-09,0.745556,0.000631736,-3.73877e-07,2.99096e-08,0.746187,0.000631078,-2.84148e-07,-5.74454e-08,0.746818,0.000630337,-4.56484e-07,8.06629e-08,0.747448,0.000629666,-2.14496e-07,-8.63922e-08,0.748077,0.000628978,-4.73672e-07,8.60918e-08,0.748706,0.000628289,-2.15397e-07,-7.91613e-08,0.749334,0.000627621,-4.5288e-07,5.17393e-08,0.749961,0.00062687,-2.97663e-07,-8.58662e-09,0.750588,0.000626249,-3.23422e-07,-1.73928e-08,0.751214,0.00062555,-3.75601e-07,1.85532e-08,0.751839,0.000624855,-3.19941e-07,2.78479e-09,0.752463,0.000624223,-3.11587e-07,-2.96923e-08,0.753087,0.000623511,-4.00664e-07,5.63799e-08,0.75371,0.000622879,-2.31524e-07,-7.66179e-08,0.754333,0.000622186,-4.61378e-07,7.12778e-08,0.754955,0.000621477,-2.47545e-07,-2.96794e-08,0.755576,0.000620893,-3.36583e-07,-1.21648e-08,0.756196,0.000620183,-3.73077e-07,1.87339e-08,0.756816,0.000619493,-3.16875e-07,-3.16622e-09,0.757435,0.00061885,-3.26374e-07,-6.0691e-09,0.758054,0.000618179,-3.44581e-07,2.74426e-08,0.758672,0.000617572,-2.62254e-07,-4.40968e-08,0.759289,0.000616915,-3.94544e-07,2.97352e-08,0.759906,0.000616215,-3.05338e-07,-1.52393e-08,0.760522,0.000615559,-3.51056e-07,3.12221e-08,0.761137,0.000614951,-2.5739e-07,-5.00443e-08,0.761751,0.000614286,-4.07523e-07,4.9746e-08,0.762365,0.00061362,-2.58285e-07,-2.97303e-08,0.762979,0.000613014,-3.47476e-07,9.57079e-09,0.763591,0.000612348,-3.18764e-07,-8.55287e-09,0.764203,0.000611685,-3.44422e-07,2.46407e-08,0.764815,0.00061107,-2.705e-07,-3.04053e-08,0.765426,0.000610437,-3.61716e-07,3.73759e-08,0.766036,0.000609826,-2.49589e-07,-5.94935e-08,0.766645,0.000609149,-4.28069e-07,8.13889e-08,0.767254,0.000608537,-1.83902e-07,-8.72483e-08,0.767862,0.000607907,-4.45647e-07,8.87901e-08,0.76847,0.000607282,-1.79277e-07,-8.90983e-08,0.769077,0.000606656,-4.46572e-07,8.87892e-08,0.769683,0.000606029,-1.80204e-07,-8.72446e-08,0.770289,0.000605407,-4.41938e-07,8.13752e-08,0.770894,0.000604768,-1.97812e-07,-5.94423e-08,0.771498,0.000604194,-3.76139e-07,3.71848e-08,0.772102,0.000603553,-2.64585e-07,-2.96922e-08,0.772705,0.000602935,-3.53661e-07,2.19793e-08,0.773308,0.000602293,-2.87723e-07,1.37955e-09,0.77391,0.000601722,-2.83585e-07,-2.74976e-08,0.774512,0.000601072,-3.66077e-07,4.9006e-08,0.775112,0.000600487,-2.19059e-07,-4.93171e-08,0.775712,0.000599901,-3.67011e-07,2.90531e-08,0.776312,0.000599254,-2.79851e-07,-7.29081e-09,0.776911,0.000598673,-3.01724e-07,1.10077e-10,0.777509,0.00059807,-3.01393e-07,6.85053e-09,0.778107,0.000597487,-2.80842e-07,-2.75123e-08,0.778704,0.000596843,-3.63379e-07,4.35939e-08,0.779301,0.000596247,-2.32597e-07,-2.7654e-08,0.779897,0.000595699,-3.15559e-07,7.41741e-09,0.780492,0.00059509,-2.93307e-07,-2.01562e-09,0.781087,0.000594497,-2.99354e-07,6.45059e-10,0.781681,0.000593901,-2.97418e-07,-5.64635e-10,0.782275,0.000593304,-2.99112e-07,1.61347e-09,0.782868,0.000592711,-2.94272e-07,-5.88926e-09,0.78346,0.000592105,-3.1194e-07,2.19436e-08,0.784052,0.000591546,-2.46109e-07,-2.22805e-08,0.784643,0.000590987,-3.1295e-07,7.57368e-09,0.785234,0.000590384,-2.90229e-07,-8.01428e-09,0.785824,0.00058978,-3.14272e-07,2.44834e-08,0.786414,0.000589225,-2.40822e-07,-3.03148e-08,0.787003,0.000588652,-3.31766e-07,3.7171e-08,0.787591,0.0005881,-2.20253e-07,-5.87646e-08,0.788179,0.000587483,-3.96547e-07,7.86782e-08,0.788766,0.000586926,-1.60512e-07,-7.71342e-08,0.789353,0.000586374,-3.91915e-07,5.10444e-08,0.789939,0.000585743,-2.38782e-07,-7.83422e-09,0.790524,0.000585242,-2.62284e-07,-1.97076e-08,0.791109,0.000584658,-3.21407e-07,2.70598e-08,0.791693,0.000584097,-2.40228e-07,-2.89269e-08,0.792277,0.000583529,-3.27008e-07,2.90431e-08,0.792861,0.000582963,-2.39879e-07,-2.76409e-08,0.793443,0.0005824,-3.22802e-07,2.1916e-08,0.794025,0.00058182,-2.57054e-07,-4.18368e-10,0.794607,0.000581305,-2.58309e-07,-2.02425e-08,0.795188,0.000580727,-3.19036e-07,2.17838e-08,0.795768,0.000580155,-2.53685e-07,-7.28814e-09,0.796348,0.000579625,-2.75549e-07,7.36871e-09,0.796928,0.000579096,-2.53443e-07,-2.21867e-08,0.797506,0.000578523,-3.20003e-07,2.17736e-08,0.798085,0.000577948,-2.54683e-07,-5.30296e-09,0.798662,0.000577423,-2.70592e-07,-5.61698e-10,0.799239,0.00057688,-2.72277e-07,7.54977e-09,0.799816,0.000576358,-2.49627e-07,-2.96374e-08,0.800392,0.00057577,-3.38539e-07,5.1395e-08,0.800968,0.000575247,-1.84354e-07,-5.67335e-08,0.801543,0.000574708,-3.54555e-07,5.63297e-08,0.802117,0.000574168,-1.85566e-07,-4.93759e-08,0.802691,0.000573649,-3.33693e-07,2.19646e-08,0.803264,0.000573047,-2.678e-07,2.1122e-08,0.803837,0.000572575,-2.04433e-07,-4.68482e-08,0.804409,0.000572026,-3.44978e-07,4.70613e-08,0.804981,0.000571477,-2.03794e-07,-2.21877e-08,0.805552,0.000571003,-2.70357e-07,-1.79153e-08,0.806123,0.000570408,-3.24103e-07,3.42443e-08,0.806693,0.000569863,-2.2137e-07,1.47556e-10,0.807263,0.000569421,-2.20928e-07,-3.48345e-08,0.807832,0.000568874,-3.25431e-07,1.99812e-08,0.808401,0.000568283,-2.65487e-07,1.45143e-08,0.808969,0.000567796,-2.21945e-07,-1.84338e-08,0.809536,0.000567297,-2.77246e-07,-3.83608e-10,0.810103,0.000566741,-2.78397e-07,1.99683e-08,0.81067,0.000566244,-2.18492e-07,-1.98848e-08,0.811236,0.000565747,-2.78146e-07,-3.38976e-11,0.811801,0.000565191,-2.78248e-07,2.00204e-08,0.812366,0.000564695,-2.18187e-07,-2.04429e-08,0.812931,0.000564197,-2.79516e-07,2.1467e-09,0.813495,0.000563644,-2.73076e-07,1.18561e-08,0.814058,0.000563134,-2.37507e-07,1.00334e-08,0.814621,0.000562689,-2.07407e-07,-5.19898e-08,0.815183,0.000562118,-3.63376e-07,7.87163e-08,0.815745,0.000561627,-1.27227e-07,-8.40616e-08,0.816306,0.000561121,-3.79412e-07,7.87163e-08,0.816867,0.000560598,-1.43263e-07,-5.19898e-08,0.817428,0.000560156,-2.99233e-07,1.00335e-08,0.817988,0.000559587,-2.69132e-07,1.18559e-08,0.818547,0.000559085,-2.33564e-07,2.14764e-09,0.819106,0.000558624,-2.27122e-07,-2.04464e-08,0.819664,0.000558108,-2.88461e-07,2.00334e-08,0.820222,0.000557591,-2.28361e-07,-8.24277e-11,0.820779,0.000557135,-2.28608e-07,-1.97037e-08,0.821336,0.000556618,-2.87719e-07,1.92925e-08,0.821893,0.000556101,-2.29841e-07,2.13831e-09,0.822448,0.000555647,-2.23427e-07,-2.78458e-08,0.823004,0.000555117,-3.06964e-07,4.96402e-08,0.823559,0.000554652,-1.58043e-07,-5.15058e-08,0.824113,0.000554181,-3.12561e-07,3.71737e-08,0.824667,0.000553668,-2.0104e-07,-3.75844e-08,0.82522,0.000553153,-3.13793e-07,5.35592e-08,0.825773,0.000552686,-1.53115e-07,-5.74431e-08,0.826326,0.000552207,-3.25444e-07,5.7004e-08,0.826878,0.000551728,-1.54433e-07,-5.13635e-08,0.827429,0.000551265,-3.08523e-07,2.92406e-08,0.82798,0.000550735,-2.20801e-07,-5.99424e-09,0.828531,0.000550276,-2.38784e-07,-5.26363e-09,0.829081,0.000549782,-2.54575e-07,2.70488e-08,0.82963,0.000549354,-1.73429e-07,-4.33268e-08,0.83018,0.000548878,-3.03409e-07,2.7049e-08,0.830728,0.000548352,-2.22262e-07,-5.26461e-09,0.831276,0.000547892,-2.38056e-07,-5.99057e-09,0.831824,0.000547397,-2.56027e-07,2.92269e-08,0.832371,0.000546973,-1.68347e-07,-5.13125e-08,0.832918,0.000546482,-3.22284e-07,5.68139e-08,0.833464,0.000546008,-1.51843e-07,-5.67336e-08,0.83401,0.000545534,-3.22043e-07,5.09113e-08,0.834555,0.000545043,-1.6931e-07,-2.77022e-08,0.8351,0.000544621,-2.52416e-07,2.92924e-10,0.835644,0.000544117,-2.51537e-07,2.65305e-08,0.836188,0.000543694,-1.71946e-07,-4.68105e-08,0.836732,0.00054321,-3.12377e-07,4.15021e-08,0.837275,0.000542709,-1.87871e-07,1.13355e-11,0.837817,0.000542334,-1.87837e-07,-4.15474e-08,0.838359,0.000541833,-3.12479e-07,4.69691e-08,0.838901,0.000541349,-1.71572e-07,-2.71196e-08,0.839442,0.000540925,-2.52931e-07,1.90462e-09,0.839983,0.000540425,-2.47217e-07,1.95011e-08,0.840523,0.000539989,-1.88713e-07,-2.03045e-08,0.841063,0.00053955,-2.49627e-07,2.11216e-09,0.841602,0.000539057,-2.4329e-07,1.18558e-08,0.842141,0.000538606,-2.07723e-07,1.00691e-08,0.842679,0.000538221,-1.77516e-07,-5.21324e-08,0.843217,0.00053771,-3.33913e-07,7.92513e-08,0.843755,0.00053728,-9.6159e-08,-8.60587e-08,0.844292,0.000536829,-3.54335e-07,8.61696e-08,0.844828,0.000536379,-9.58263e-08,-7.98057e-08,0.845364,0.000535948,-3.35243e-07,5.42394e-08,0.8459,0.00053544,-1.72525e-07,-1.79426e-08,0.846435,0.000535041,-2.26353e-07,1.75308e-08,0.84697,0.000534641,-1.73761e-07,-5.21806e-08,0.847505,0.000534137,-3.30302e-07,7.19824e-08,0.848038,0.000533692,-1.14355e-07,-5.69349e-08,0.848572,0.000533293,-2.8516e-07,3.65479e-08,0.849105,0.000532832,-1.75516e-07,-2.96519e-08,0.849638,0.000532392,-2.64472e-07,2.2455e-08,0.85017,0.000531931,-1.97107e-07,-5.63451e-10,0.850702,0.000531535,-1.98797e-07,-2.02011e-08,0.851233,0.000531077,-2.59401e-07,2.17634e-08,0.851764,0.000530623,-1.94111e-07,-7.24794e-09,0.852294,0.000530213,-2.15854e-07,7.22832e-09,0.852824,0.000529803,-1.94169e-07,-2.16653e-08,0.853354,0.00052935,-2.59165e-07,1.98283e-08,0.853883,0.000528891,-1.9968e-07,1.95678e-09,0.854412,0.000528497,-1.9381e-07,-2.76554e-08,0.85494,0.000528027,-2.76776e-07,4.90603e-08,0.855468,0.00052762,-1.29596e-07,-4.93764e-08,0.855995,0.000527213,-2.77725e-07,2.92361e-08,0.856522,0.000526745,-1.90016e-07,-7.96341e-09,0.857049,0.000526341,-2.13907e-07,2.61752e-09,0.857575,0.000525922,-2.06054e-07,-2.50665e-09,0.8581,0.000525502,-2.13574e-07,7.40906e-09,0.858626,0.000525097,-1.91347e-07,-2.71296e-08,0.859151,0.000524633,-2.72736e-07,4.15048e-08,0.859675,0.000524212,-1.48221e-07,-1.96802e-08,0.860199,0.000523856,-2.07262e-07,-2.23886e-08,0.860723,0.000523375,-2.74428e-07,4.96299e-08,0.861246,0.000522975,-1.25538e-07,-5.69216e-08,0.861769,0.000522553,-2.96303e-07,5.88473e-08,0.862291,0.000522137,-1.19761e-07,-5.92584e-08,0.862813,0.00052172,-2.97536e-07,5.8977e-08,0.863334,0.000521301,-1.20605e-07,-5.74403e-08,0.863855,0.000520888,-2.92926e-07,5.15751e-08,0.864376,0.000520457,-1.38201e-07,-2.96506e-08,0.864896,0.000520091,-2.27153e-07,7.42277e-09,0.865416,0.000519659,-2.04885e-07,-4.05057e-11,0.865936,0.00051925,-2.05006e-07,-7.26074e-09,0.866455,0.000518818,-2.26788e-07,2.90835e-08,0.866973,0.000518451,-1.39538e-07,-4.94686e-08,0.867492,0.000518024,-2.87944e-07,4.95814e-08,0.868009,0.000517597,-1.39199e-07,-2.96479e-08,0.868527,0.000517229,-2.28143e-07,9.40539e-09,0.869044,0.000516801,-1.99927e-07,-7.9737e-09,0.86956,0.000516378,-2.23848e-07,2.24894e-08,0.870077,0.000515997,-1.5638e-07,-2.23793e-08,0.870592,0.000515617,-2.23517e-07,7.42302e-09,0.871108,0.000515193,-2.01248e-07,-7.31283e-09,0.871623,0.000514768,-2.23187e-07,2.18283e-08,0.872137,0.000514387,-1.57702e-07,-2.03959e-08,0.872652,0.000514011,-2.1889e-07,1.50711e-10,0.873165,0.000513573,-2.18437e-07,1.97931e-08,0.873679,0.000513196,-1.59058e-07,-1.97183e-08,0.874192,0.000512819,-2.18213e-07,-5.24324e-10,0.874704,0.000512381,-2.19786e-07,2.18156e-08,0.875217,0.000512007,-1.54339e-07,-2.71336e-08,0.875728,0.000511616,-2.3574e-07,2.71141e-08,0.87624,0.000511226,-1.54398e-07,-2.17182e-08,0.876751,0.000510852,-2.19552e-07,1.54131e-10,0.877262,0.000510414,-2.1909e-07,2.11017e-08,0.877772,0.000510039,-1.55785e-07,-2.49562e-08,0.878282,0.000509652,-2.30654e-07,1.91183e-08,0.878791,0.000509248,-1.73299e-07,8.08751e-09,0.8793,0.000508926,-1.49036e-07,-5.14684e-08,0.879809,0.000508474,-3.03441e-07,7.85766e-08,0.880317,0.000508103,-6.77112e-08,-8.40242e-08,0.880825,0.000507715,-3.19784e-07,7.87063e-08,0.881333,0.000507312,-8.36649e-08,-5.19871e-08,0.88184,0.000506988,-2.39626e-07,1.00327e-08,0.882346,0.000506539,-2.09528e-07,1.18562e-08,0.882853,0.000506156,-1.73959e-07,2.14703e-09,0.883359,0.000505814,-1.67518e-07,-2.04444e-08,0.883864,0.000505418,-2.28851e-07,2.00258e-08,0.88437,0.00050502,-1.68774e-07,-5.42855e-11,0.884874,0.000504682,-1.68937e-07,-1.98087e-08,0.885379,0.000504285,-2.28363e-07,1.96842e-08,0.885883,0.000503887,-1.6931e-07,6.76342e-10,0.886387,0.000503551,-1.67281e-07,-2.23896e-08,0.88689,0.000503149,-2.3445e-07,2.92774e-08,0.887393,0.000502768,-1.46618e-07,-3.51152e-08,0.887896,0.00050237,-2.51963e-07,5.15787e-08,0.888398,0.00050202,-9.72271e-08,-5.19903e-08,0.8889,0.00050167,-2.53198e-07,3.71732e-08,0.889401,0.000501275,-1.41678e-07,-3.70978e-08,0.889902,0.00050088,-2.52972e-07,5.16132e-08,0.890403,0.000500529,-9.81321e-08,-5.01459e-08,0.890903,0.000500183,-2.4857e-07,2.9761e-08,0.891403,0.000499775,-1.59287e-07,-9.29351e-09,0.891903,0.000499428,-1.87167e-07,7.41301e-09,0.892402,0.000499076,-1.64928e-07,-2.03585e-08,0.892901,0.000498685,-2.26004e-07,1.44165e-08,0.893399,0.000498276,-1.82754e-07,2.22974e-08,0.893898,0.000497978,-1.15862e-07,-4.40013e-08,0.894395,0.000497614,-2.47866e-07,3.44985e-08,0.894893,0.000497222,-1.44371e-07,-3.43882e-08,0.89539,0.00049683,-2.47535e-07,4.34497e-08,0.895886,0.000496465,-1.17186e-07,-2.02012e-08,0.896383,0.00049617,-1.7779e-07,-2.22497e-08,0.896879,0.000495748,-2.44539e-07,4.95952e-08,0.897374,0.000495408,-9.57532e-08,-5.69217e-08,0.89787,0.000495045,-2.66518e-07,5.88823e-08,0.898364,0.000494689,-8.98713e-08,-5.93983e-08,0.898859,0.000494331,-2.68066e-07,5.95017e-08,0.899353,0.000493973,-8.95613e-08,-5.9399e-08,0.899847,0.000493616,-2.67758e-07,5.8885e-08,0.90034,0.000493257,-9.11033e-08,-5.69317e-08,0.900833,0.000492904,-2.61898e-07,4.96326e-08,0.901326,0.000492529,-1.13001e-07,-2.23893e-08,0.901819,0.000492236,-1.80169e-07,-1.968e-08,0.902311,0.000491817,-2.39209e-07,4.15047e-08,0.902802,0.000491463,-1.14694e-07,-2.71296e-08,0.903293,0.000491152,-1.96083e-07,7.409e-09,0.903784,0.000490782,-1.73856e-07,-2.50645e-09,0.904275,0.000490427,-1.81376e-07,2.61679e-09,0.904765,0.000490072,-1.73525e-07,-7.96072e-09,0.905255,0.000489701,-1.97407e-07,2.92261e-08,0.905745,0.000489394,-1.09729e-07,-4.93389e-08,0.906234,0.000489027,-2.57746e-07,4.89204e-08,0.906723,0.000488658,-1.10985e-07,-2.71333e-08,0.907211,0.000488354,-1.92385e-07,8.30861e-12,0.907699,0.00048797,-1.9236e-07,2.71001e-08,0.908187,0.000487666,-1.1106e-07,-4.88041e-08,0.908675,0.000487298,-2.57472e-07,4.89069e-08,0.909162,0.000486929,-1.10751e-07,-2.76143e-08,0.909649,0.000486625,-1.93594e-07,1.9457e-09,0.910135,0.000486244,-1.87757e-07,1.98315e-08,0.910621,0.000485928,-1.28262e-07,-2.16671e-08,0.911107,0.000485606,-1.93264e-07,7.23216e-09,0.911592,0.000485241,-1.71567e-07,-7.26152e-09,0.912077,0.000484877,-1.93352e-07,2.18139e-08,0.912562,0.000484555,-1.2791e-07,-2.03895e-08,0.913047,0.000484238,-1.89078e-07,1.39494e-10,0.913531,0.000483861,-1.8866e-07,1.98315e-08,0.914014,0.000483543,-1.29165e-07,-1.98609e-08,0.914498,0.000483225,-1.88748e-07,7.39912e-12,0.914981,0.000482847,-1.88726e-07,1.98313e-08,0.915463,0.000482529,-1.29232e-07,-1.9728e-08,0.915946,0.000482212,-1.88416e-07,-5.24035e-10,0.916428,0.000481833,-1.89988e-07,2.18241e-08,0.916909,0.000481519,-1.24516e-07,-2.71679e-08,0.917391,0.000481188,-2.06019e-07,2.72427e-08,0.917872,0.000480858,-1.24291e-07,-2.21985e-08,0.918353,0.000480543,-1.90886e-07,1.94644e-09,0.918833,0.000480167,-1.85047e-07,1.44127e-08,0.919313,0.00047984,-1.41809e-07,7.39438e-12,0.919793,0.000479556,-1.41787e-07,-1.44423e-08,0.920272,0.000479229,-1.85114e-07,-1.84291e-09,0.920751,0.000478854,-1.90642e-07,2.18139e-08,0.92123,0.000478538,-1.25201e-07,-2.58081e-08,0.921708,0.00047821,-2.02625e-07,2.18139e-08,0.922186,0.00047787,-1.37183e-07,-1.84291e-09,0.922664,0.00047759,-1.42712e-07,-1.44423e-08,0.923141,0.000477262,-1.86039e-07,7.34701e-12,0.923618,0.00047689,-1.86017e-07,1.44129e-08,0.924095,0.000476561,-1.42778e-07,1.94572e-09,0.924572,0.000476281,-1.36941e-07,-2.21958e-08,0.925048,0.000475941,-2.03528e-07,2.72327e-08,0.925523,0.000475615,-1.2183e-07,-2.71304e-08,0.925999,0.00047529,-2.03221e-07,2.16843e-08,0.926474,0.000474949,-1.38168e-07,-2.16005e-12,0.926949,0.000474672,-1.38175e-07,-2.16756e-08,0.927423,0.000474331,-2.03202e-07,2.71001e-08,0.927897,0.000474006,-1.21902e-07,-2.71201e-08,0.928371,0.000473681,-2.03262e-07,2.17757e-08,0.928845,0.00047334,-1.37935e-07,-3.78028e-10,0.929318,0.000473063,-1.39069e-07,-2.02636e-08,0.929791,0.000472724,-1.9986e-07,2.18276e-08,0.930263,0.000472389,-1.34377e-07,-7.44231e-09,0.930736,0.000472098,-1.56704e-07,7.94165e-09,0.931208,0.000471809,-1.32879e-07,-2.43243e-08,0.931679,0.00047147,-2.05851e-07,2.97508e-08,0.932151,0.000471148,-1.16599e-07,-3.50742e-08,0.932622,0.000470809,-2.21822e-07,5.09414e-08,0.933092,0.000470518,-6.89976e-08,-4.94821e-08,0.933563,0.000470232,-2.17444e-07,2.77775e-08,0.934033,0.00046988,-1.34111e-07,-2.02351e-09,0.934502,0.000469606,-1.40182e-07,-1.96835e-08,0.934972,0.000469267,-1.99232e-07,2.11529e-08,0.935441,0.000468932,-1.35774e-07,-5.32332e-09,0.93591,0.000468644,-1.51743e-07,1.40413e-10,0.936378,0.000468341,-1.51322e-07,4.76166e-09,0.936846,0.000468053,-1.37037e-07,-1.9187e-08,0.937314,0.000467721,-1.94598e-07,1.23819e-08,0.937782,0.000467369,-1.57453e-07,2.92642e-08,0.938249,0.000467142,-6.96601e-08,-6.98342e-08,0.938716,0.000466793,-2.79163e-07,7.12586e-08,0.939183,0.000466449,-6.53869e-08,-3.63863e-08,0.939649,0.000466209,-1.74546e-07,1.46818e-08,0.940115,0.000465904,-1.305e-07,-2.2341e-08,0.940581,0.000465576,-1.97523e-07,1.50774e-08,0.941046,0.000465226,-1.52291e-07,2.16359e-08,0.941511,0.000464986,-8.73832e-08,-4.20162e-08,0.941976,0.000464685,-2.13432e-07,2.72198e-08,0.942441,0.00046434,-1.31773e-07,-7.2581e-09,0.942905,0.000464055,-1.53547e-07,1.81263e-09,0.943369,0.000463753,-1.48109e-07,7.58386e-12,0.943832,0.000463457,-1.48086e-07,-1.84298e-09,0.944296,0.000463155,-1.53615e-07,7.36433e-09,0.944759,0.00046287,-1.31522e-07,-2.76143e-08,0.945221,0.000462524,-2.14365e-07,4.34883e-08,0.945684,0.000462226,-8.39003e-08,-2.71297e-08,0.946146,0.000461977,-1.65289e-07,5.42595e-09,0.946608,0.000461662,-1.49012e-07,5.42593e-09,0.947069,0.000461381,-1.32734e-07,-2.71297e-08,0.94753,0.000461034,-2.14123e-07,4.34881e-08,0.947991,0.000460736,-8.36585e-08,-2.76134e-08,0.948452,0.000460486,-1.66499e-07,7.36083e-09,0.948912,0.000460175,-1.44416e-07,-1.82993e-09,0.949372,0.000459881,-1.49906e-07,-4.11073e-11,0.949832,0.000459581,-1.50029e-07,1.99434e-09,0.950291,0.000459287,-1.44046e-07,-7.93627e-09,0.950751,0.000458975,-1.67855e-07,2.97507e-08,0.951209,0.000458728,-7.86029e-08,-5.1462e-08,0.951668,0.000458417,-2.32989e-07,5.6888e-08,0.952126,0.000458121,-6.2325e-08,-5.68806e-08,0.952584,0.000457826,-2.32967e-07,5.14251e-08,0.953042,0.000457514,-7.86914e-08,-2.96107e-08,0.953499,0.000457268,-1.67523e-07,7.41296e-09,0.953956,0.000456955,-1.45285e-07,-4.11262e-11,0.954413,0.000456665,-1.45408e-07,-7.24847e-09,0.95487,0.000456352,-1.67153e-07,2.9035e-08,0.955326,0.000456105,-8.00484e-08,-4.92869e-08,0.955782,0.000455797,-2.27909e-07,4.89032e-08,0.956238,0.000455488,-8.11994e-08,-2.71166e-08,0.956693,0.000455244,-1.62549e-07,-4.13678e-11,0.957148,0.000454919,-1.62673e-07,2.72821e-08,0.957603,0.000454675,-8.0827e-08,-4.94824e-08,0.958057,0.000454365,-2.29274e-07,5.14382e-08,0.958512,0.000454061,-7.49597e-08,-3.7061e-08,0.958965,0.0004538,-1.86143e-07,3.72013e-08,0.959419,0.000453539,-7.45389e-08,-5.21396e-08,0.959873,0.000453234,-2.30958e-07,5.21476e-08,0.960326,0.000452928,-7.45146e-08,-3.72416e-08,0.960778,0.000452667,-1.8624e-07,3.72143e-08,0.961231,0.000452407,-7.45967e-08,-5.20109e-08,0.961683,0.000452101,-2.30629e-07,5.16199e-08,0.962135,0.000451795,-7.57696e-08,-3.52595e-08,0.962587,0.000451538,-1.81548e-07,2.98133e-08,0.963038,0.000451264,-9.2108e-08,-2.43892e-08,0.963489,0.000451007,-1.65276e-07,8.13892e-09,0.96394,0.000450701,-1.40859e-07,-8.16647e-09,0.964391,0.000450394,-1.65358e-07,2.45269e-08,0.964841,0.000450137,-9.17775e-08,-3.03367e-08,0.965291,0.000449863,-1.82787e-07,3.7215e-08,0.965741,0.000449609,-7.11424e-08,-5.89188e-08,0.96619,0.00044929,-2.47899e-07,7.92509e-08,0.966639,0.000449032,-1.01462e-08,-7.92707e-08,0.967088,0.000448773,-2.47958e-07,5.90181e-08,0.967537,0.000448455,-7.0904e-08,-3.75925e-08,0.967985,0.0004482,-1.83681e-07,3.17471e-08,0.968433,0.000447928,-8.84401e-08,-2.97913e-08,0.968881,0.000447662,-1.77814e-07,2.78133e-08,0.969329,0.000447389,-9.4374e-08,-2.18572e-08,0.969776,0.000447135,-1.59946e-07,1.10134e-11,0.970223,0.000446815,-1.59913e-07,2.18132e-08,0.97067,0.000446561,-9.44732e-08,-2.76591e-08,0.971116,0.000446289,-1.7745e-07,2.92185e-08,0.971562,0.000446022,-8.97948e-08,-2.96104e-08,0.972008,0.000445753,-1.78626e-07,2.96185e-08,0.972454,0.000445485,-8.97706e-08,-2.92588e-08,0.972899,0.000445218,-1.77547e-07,2.78123e-08,0.973344,0.000444946,-9.41103e-08,-2.23856e-08,0.973789,0.000444691,-1.61267e-07,2.12559e-09,0.974233,0.000444374,-1.5489e-07,1.38833e-08,0.974678,0.000444106,-1.13241e-07,1.94591e-09,0.975122,0.000443886,-1.07403e-07,-2.16669e-08,0.975565,0.000443606,-1.72404e-07,2.5117e-08,0.976009,0.000443336,-9.70526e-08,-1.91963e-08,0.976452,0.000443085,-1.54642e-07,-7.93627e-09,0.976895,0.000442752,-1.7845e-07,5.09414e-08,0.977338,0.000442548,-2.56262e-08,-7.66201e-08,0.97778,0.000442266,-2.55486e-07,7.67249e-08,0.978222,0.000441986,-2.53118e-08,-5.14655e-08,0.978664,0.000441781,-1.79708e-07,9.92773e-09,0.979106,0.000441451,-1.49925e-07,1.17546e-08,0.979547,0.000441186,-1.14661e-07,2.65868e-09,0.979988,0.000440965,-1.06685e-07,-2.23893e-08,0.980429,0.000440684,-1.73853e-07,2.72939e-08,0.980869,0.000440419,-9.19716e-08,-2.71816e-08,0.98131,0.000440153,-1.73516e-07,2.18278e-08,0.98175,0.000439872,-1.08033e-07,-5.24833e-10,0.982189,0.000439654,-1.09607e-07,-1.97284e-08,0.982629,0.000439376,-1.68793e-07,1.98339e-08,0.983068,0.000439097,-1.09291e-07,-2.62901e-12,0.983507,0.000438879,-1.09299e-07,-1.98234e-08,0.983946,0.000438601,-1.68769e-07,1.96916e-08,0.984384,0.000438322,-1.09694e-07,6.6157e-10,0.984823,0.000438105,-1.0771e-07,-2.23379e-08,0.985261,0.000437823,-1.74723e-07,2.90855e-08,0.985698,0.00043756,-8.74669e-08,-3.43992e-08,0.986136,0.000437282,-1.90665e-07,4.89068e-08,0.986573,0.000437048,-4.39442e-08,-4.20188e-08,0.98701,0.000436834,-1.7e-07,-4.11073e-11,0.987446,0.000436494,-1.70124e-07,4.21832e-08,0.987883,0.00043628,-4.35742e-08,-4.94824e-08,0.988319,0.000436044,-1.92021e-07,3.6537e-08,0.988755,0.00043577,-8.24102e-08,-3.70611e-08,0.989191,0.000435494,-1.93593e-07,5.21026e-08,0.989626,0.000435263,-3.72855e-08,-5.21402e-08,0.990061,0.000435032,-1.93706e-07,3.7249e-08,0.990496,0.000434756,-8.19592e-08,-3.72512e-08,0.990931,0.000434481,-1.93713e-07,5.21511e-08,0.991365,0.00043425,-3.72595e-08,-5.21439e-08,0.991799,0.000434019,-1.93691e-07,3.72152e-08,0.992233,0.000433743,-8.20456e-08,-3.71123e-08,0.992667,0.000433468,-1.93382e-07,5.16292e-08,0.9931,0.000433236,-3.84947e-08,-5.01953e-08,0.993533,0.000433008,-1.89081e-07,2.99427e-08,0.993966,0.00043272,-9.92525e-08,-9.9708e-09,0.994399,0.000432491,-1.29165e-07,9.94051e-09,0.994831,0.000432263,-9.93434e-08,-2.97912e-08,0.995263,0.000431975,-1.88717e-07,4.96198e-08,0.995695,0.000431746,-3.98578e-08,-4.94785e-08,0.996127,0.000431518,-1.88293e-07,2.9085e-08,0.996558,0.000431229,-1.01038e-07,-7.25675e-09,0.996989,0.000431005,-1.22809e-07,-5.79945e-11,0.99742,0.000430759,-1.22983e-07,7.48873e-09,0.997851,0.000430536,-1.00516e-07,-2.98969e-08,0.998281,0.000430245,-1.90207e-07,5.24942e-08,0.998711,0.000430022,-3.27246e-08,-6.08706e-08,0.999141,0.000429774,-2.15336e-07,7.17788e-08,0.999571,0.000429392,0.,0.};$/;"	m	namespace:cv::cudev::color_cvt_detail
c_str	core/cvstd.hpp	/^const char* String::c_str() const$/;"	f	class:cv::String
c_str	ts/ts_gtest.h	/^  const char* c_str() const { return pathname_.c_str(); }$/;"	f	class:testing::internal::FilePath
calc	core/cuda/detail/vec_distance_detail.hpp	/^            static __device__ __forceinline__ void calc(const T1* vecCached, const T2* vecGlob, int len, Dist& dist, int tid)$/;"	f	struct:cv::cuda::device::vec_distance_detail::VecDiffCachedCalculator
calc	core/cuda/vec_distance.hpp	/^        __device__ __forceinline__ void calc(const T2* vec2, int len, Dist& dist, typename Dist::result_type* smem, int tid) const$/;"	f	struct:cv::cuda::device::VecDiffCachedRegister
calc	core/cuda/vec_distance.hpp	/^        __device__ __forceinline__ void calc(const T2* vec2, int len, Dist& dist, typename Dist::result_type* smem, int tid) const$/;"	f	struct:cv::cuda::device::VecDiffGlobal
calcCheck	core/cuda/detail/vec_distance_detail.hpp	/^            static __device__ __forceinline__ void calcCheck(const T1*, const T2*, int, Dist&, int)$/;"	f	struct:cv::cuda::device::vec_distance_detail::UnrollVecDiffCached
calcCheck	core/cuda/detail/vec_distance_detail.hpp	/^            static __device__ void calcCheck(const T1* vecCached, const T2* vecGlob, int len, Dist& dist, int ind)$/;"	f	struct:cv::cuda::device::vec_distance_detail::UnrollVecDiffCached
calcVecDiffCached	core/cuda/vec_distance.hpp	/^    __device__ __forceinline__ void calcVecDiffCached(const T1* vecCached, const T2* vecGlob, int len, Dist& dist, typename Dist::result_type* smem, int tid)$/;"	f	namespace:cv::cuda::device
calcVecDiffGlobal	core/cuda/vec_distance.hpp	/^    __device__ void calcVecDiffGlobal(const T1* vec1, const T2* vec2, int len, Dist& dist, typename Dist::result_type* smem, int tid)$/;"	f	namespace:cv::cuda::device
calcWithoutCheck	core/cuda/detail/vec_distance_detail.hpp	/^            static __device__ __forceinline__ void calcWithoutCheck(const T1*, const T2*, Dist&)$/;"	f	struct:cv::cuda::device::vec_distance_detail::UnrollVecDiffCached
calcWithoutCheck	core/cuda/detail/vec_distance_detail.hpp	/^            static __device__ void calcWithoutCheck(const T1* vecCached, const T2* vecGlob, Dist& dist)$/;"	f	struct:cv::cuda::device::vec_distance_detail::UnrollVecDiffCached
call	core/cuda/detail/transform_detail.hpp	/^            static void call(PtrStepSz<T1> src1, PtrStepSz<T2> src2, PtrStepSz<D> dst, BinOp op, Mask mask, cudaStream_t stream)$/;"	f	struct:cv::cuda::device::transform_detail::TransformDispatcher
call	core/cuda/detail/transform_detail.hpp	/^            static void call(PtrStepSz<T> src, PtrStepSz<D> dst, UnOp op, Mask mask, cudaStream_t stream)$/;"	f	struct:cv::cuda::device::transform_detail::TransformDispatcher
call	cudev/grid/detail/reduce_to_column.hpp	/^        __device__ __forceinline__ static void call(work_elem_type smem[1][BLOCK_SIZE], work_type& myVal)$/;"	f	struct:cv::cudev::grid_reduce_to_vec_detail::Reduce
call	cudev/grid/detail/reduce_to_column.hpp	/^        __device__ __forceinline__ static void call(work_elem_type smem[2][BLOCK_SIZE], work_type& myVal)$/;"	f	struct:cv::cudev::grid_reduce_to_vec_detail::Reduce
call	cudev/grid/detail/reduce_to_column.hpp	/^        __device__ __forceinline__ static void call(work_elem_type smem[3][BLOCK_SIZE], work_type& myVal)$/;"	f	struct:cv::cudev::grid_reduce_to_vec_detail::Reduce
call	cudev/grid/detail/reduce_to_column.hpp	/^        __device__ __forceinline__ static void call(work_elem_type smem[4][BLOCK_SIZE], work_type& myVal)$/;"	f	struct:cv::cudev::grid_reduce_to_vec_detail::Reduce
call	cudev/grid/detail/transform.hpp	/^        __host__ static void call(const GlobPtr<SrcType1>& src1, const GlobPtr<SrcType2>& src2, const GlobPtr<DstType>& dst, const BinOp& op, const MaskPtr& mask, int rows, int cols, cudaStream_t stream)$/;"	f	struct:cv::cudev::grid_transform_detail::TransformDispatcher
call	cudev/grid/detail/transform.hpp	/^        __host__ static void call(const GlobPtr<SrcType>& src, const GlobPtr<DstType>& dst, const UnOp& op, const MaskPtr& mask, int rows, int cols, cudaStream_t stream)$/;"	f	struct:cv::cudev::grid_transform_detail::TransformDispatcher
call	cudev/grid/detail/transform.hpp	/^        __host__ static void call(const SrcPtr& src, const GlobPtr<DstType>& dst, const UnOp& op, const MaskPtr& mask, int rows, int cols, cudaStream_t stream)$/;"	f	struct:cv::cudev::grid_transform_detail::TransformDispatcher
call	cudev/grid/detail/transform.hpp	/^        __host__ static void call(const SrcPtr1& src1, const SrcPtr2& src2, const GlobPtr<DstType>& dst, const BinOp& op, const MaskPtr& mask, int rows, int cols, cudaStream_t stream)$/;"	f	struct:cv::cudev::grid_transform_detail::TransformDispatcher
cam_params_	stitching/detail/motion_estimators.hpp	/^    Mat cam_params_;$/;"	m	class:cv::detail::BundleAdjusterBase
cameras	stitching.hpp	/^    std::vector<detail::CameraParams> cameras() const { return cameras_; }$/;"	f	class:cv::Stitcher
cameras_	stitching.hpp	/^    std::vector<detail::CameraParams> cameras_;$/;"	m	class:cv::Stitcher
can_use_gpu_	stitching/detail/blenders.hpp	/^    bool can_use_gpu_;$/;"	m	class:cv::detail::MultiBandBlender
cap	videoio.hpp	/^    Ptr<CvCapture> cap;$/;"	m	class:cv::VideoCapture
capacity	flann/result_set.h	/^    int capacity;$/;"	m	class:cvflann::KNNResultSet
capacity	flann/result_set.h	/^    int capacity;$/;"	m	class:cvflann::KNNSimpleResultSet
capacity	flann/result_set.h	/^    size_t capacity;$/;"	m	class:cvflann::RadiusResultSet
capacity_	flann/result_set.h	/^    unsigned int capacity_;$/;"	m	class:cvflann::KNNRadiusUniqueResultSet
capacity_	flann/result_set.h	/^    unsigned int capacity_;$/;"	m	class:cvflann::KNNUniqueResultSet
capture	ts/ts_gtest.h	/^  void capture(T* ptr) {$/;"	f	class:testing::internal::linked_ptr
capture	videoio/videoio_c.h	/^CVAPI(IplImage*) cvQueryFrame( CvCapture* capture );$/;"	v
capture	videoio/videoio_c.h	/^CVAPI(int)    cvGetCaptureDomain( CvCapture* capture);$/;"	v
capture	videoio/videoio_c.h	/^CVAPI(int) cvGrabFrame( CvCapture* capture );$/;"	v
capture	videoio/videoio_c.h	/^CVAPI(void) cvReleaseCapture( CvCapture** capture );$/;"	v
captureSession	videoio/cap_ios.h	/^@property (nonatomic, retain) AVCaptureSession* captureSession;$/;"	v
captureSessionLoaded	videoio/cap_ios.h	/^@property (nonatomic, readonly) BOOL captureSessionLoaded;$/;"	v
cascade	objdetect/objdetect_c.h	/^CVAPI(void) cvReleaseHaarClassifierCascade( CvHaarClassifierCascade** cascade );$/;"	v
cascadeForTracking	objdetect/detection_based_tracker.hpp	/^        cv::Ptr<IDetector> cascadeForTracking;$/;"	m	class:cv::DetectionBasedTracker
cast	core/affine.hpp	/^cv::Affine3<Y> cv::Affine3<T>::cast() const$/;"	f	class:cv::Affine3
cast	core/cuda/vec_math.hpp	/^        template <typename VecS> static __device__ __forceinline__ VecD cast(const VecS& v)$/;"	f	struct:cv::cuda::device::vec_math_detail::SatCastHelper
cast	cudev/util/vec_math.hpp	/^        template <typename VecS> __device__ __forceinline__ static VecD cast(const VecS& v)$/;"	f	struct:cv::cudev::vec_math_detail::SatCastHelper
cast	flann/any.h	/^    T& cast()$/;"	f	struct:cvflann::any
cast	flann/any.h	/^    const T& cast() const$/;"	f	struct:cvflann::any
cb_index_	flann/kmeans_index.h	/^    float cb_index_;$/;"	m	class:cvflann::KMeansIndex
cc	objdetect.hpp	/^    Ptr<BaseCascadeClassifier> cc;$/;"	m	class:cv::CascadeClassifier
cc30	cudev/ptr2d/texture.hpp	/^    bool cc30;$/;"	m	struct:cv::cudev::Texture
celestial_blue	viz/types.hpp	/^inline cv::viz::Color cv::viz::Color::celestial_blue() { return Color(208, 151,  73); }$/;"	f	class:cv::viz::Color
cellSize	objdetect.hpp	/^    CV_PROP Size cellSize;$/;"	m	struct:cv::HOGDescriptor
cellSize	videostab/outlier_rejection.hpp	/^    Size cellSize() const { return cellSize_; }$/;"	f	class:cv::videostab::TranslationBasedLocalOutlierRejector
cellSize_	videostab/outlier_rejection.hpp	/^    Size cellSize_;$/;"	m	class:cv::videostab::TranslationBasedLocalOutlierRejector
cell_bit_size_	flann/dynamic_bitset.h	/^    static const unsigned int cell_bit_size_ = CHAR_BIT * sizeof(size_t);$/;"	m	class:cvflann::DynamicBitset
center	core/types.hpp	/^    Point2f center; \/\/< the rectangle mass center$/;"	m	class:cv::RotatedRect
center	core/types_c.h	/^    CvPoint2D32f center;  \/**< Center of the box.                          *\/$/;"	m	struct:CvBox2D
centersAlgFunction	flann/hierarchical_clustering_index.h	/^    typedef void (HierarchicalClusteringIndex::* centersAlgFunction)(int, int*, int, int*, int&);$/;"	t	class:cvflann::HierarchicalClusteringIndex
centersAlgFunction	flann/kmeans_index.h	/^    typedef void (KMeansIndex::* centersAlgFunction)(int, int*, int, int*, int&);$/;"	t	class:cvflann::KMeansIndex
centers_init_	flann/hierarchical_clustering_index.h	/^    flann_centers_init_t centers_init_;$/;"	m	class:cvflann::HierarchicalClusteringIndex
centers_init_	flann/kmeans_index.h	/^    flann_centers_init_t centers_init_;$/;"	m	class:cvflann::KMeansIndex
channelSeq	core/types_c.h	/^    char channelSeq[4];     \/**< ditto *\/$/;"	m	struct:_IplImage
channel_type	core/affine.hpp	/^        typedef _Tp                                        channel_type;$/;"	t	class:cv::DataType
channel_type	core/cvstd.inl.hpp	/^    typedef _Tp                channel_type;$/;"	t	class:cv::DataType
channel_type	core/mat.hpp	/^    typedef typename DataType<_Tp>::channel_type channel_type;$/;"	t	class:cv::Mat_
channel_type	core/matx.hpp	/^    typedef _Tp                                           channel_type;$/;"	t	class:cv::DataType
channel_type	core/matx.hpp	/^    typedef _Tp                                        channel_type;$/;"	t	class:cv::DataType
channel_type	core/traits.hpp	/^    typedef value_type  channel_type;$/;"	t	class:cv::DataType
channel_type	core/types.hpp	/^    typedef _Tp                                        channel_type;$/;"	t	class:cv::DataType
channel_type	core/types.hpp	/^    typedef _Tp                                       channel_type;$/;"	t	class:cv::DataType
channel_type	core/types.hpp	/^    typedef _Tp                                      channel_type;$/;"	t	class:cv::DataType
channel_type	core/types.hpp	/^    typedef _Tp          channel_type;$/;"	t	class:cv::DataType
channel_type	core/types.hpp	/^    typedef double      channel_type;$/;"	t	class:cv::DataType
channel_type	core/types.hpp	/^    typedef float         channel_type;$/;"	t	class:cv::DataType
channel_type	core/types.hpp	/^    typedef float        channel_type;$/;"	t	class:cv::DataType
channel_type	core/types.hpp	/^    typedef int         channel_type;$/;"	t	class:cv::DataType
channel_type	core/types.hpp	/^    typedef int        channel_type;$/;"	t	class:cv::DataType
channel_type	cudev/util/vec_traits.hpp	/^    typedef schar      channel_type;$/;"	t	class:cv::DataType
channel_type	cudev/util/vec_traits.hpp	/^    typedef value_type   channel_type;$/;"	t	class:cv::DataType
channels	core/affine.hpp	/^               channels     = 16,$/;"	e	enum:cv::DataType::__anon162
channels	core/core_c.h	/^template<typename _Tp> inline int Seq<_Tp>::channels() const$/;"	f	class:cv::Seq
channels	core/cuda.inl.hpp	/^int GpuMat::channels() const$/;"	f	class:cv::cuda::GpuMat
channels	core/cuda.inl.hpp	/^int HostMem::channels() const$/;"	f	class:cv::cuda::HostMem
channels	core/cuda/utility.hpp	/^        int channels;$/;"	m	struct:cv::cuda::device::SingleMaskChannels
channels	core/cvstd.inl.hpp	/^           channels     = 2,$/;"	e	enum:cv::DataType::__anon161
channels	core/mat.inl.hpp	/^int Mat::channels() const$/;"	f	class:cv::Mat
channels	core/mat.inl.hpp	/^int Mat_<_Tp>::channels() const$/;"	f	class:cv::Mat_
channels	core/mat.inl.hpp	/^int SparseMat::channels() const$/;"	f	class:cv::SparseMat
channels	core/mat.inl.hpp	/^int SparseMat_<_Tp>::channels() const$/;"	f	class:cv::SparseMat_
channels	core/mat.inl.hpp	/^int UMat::channels() const$/;"	f	class:cv::UMat
channels	core/matx.hpp	/^           channels     = cn,$/;"	e	enum:cv::DataType::__anon153
channels	core/matx.hpp	/^           channels     = m * n,$/;"	e	enum:cv::DataType::__anon151
channels	core/matx.hpp	/^           channels = cn,$/;"	e	enum:cv::Vec::__anon152
channels	core/matx.hpp	/^           channels = rows*cols,$/;"	e	enum:cv::Matx::__anon150
channels	core/opengl.hpp	/^int cv::ogl::Buffer::channels() const$/;"	f	class:cv::ogl::Buffer
channels	core/traits.hpp	/^           channels     = 1,$/;"	e	enum:cv::DataType::__anon101
channels	core/traits.hpp	/^           channels     = 1,$/;"	e	enum:cv::DataType::__anon102
channels	core/traits.hpp	/^           channels     = 1,$/;"	e	enum:cv::DataType::__anon103
channels	core/traits.hpp	/^           channels     = 1,$/;"	e	enum:cv::DataType::__anon104
channels	core/traits.hpp	/^           channels     = 1,$/;"	e	enum:cv::DataType::__anon105
channels	core/traits.hpp	/^           channels     = 1,$/;"	e	enum:cv::DataType::__anon106
channels	core/traits.hpp	/^           channels     = 1,$/;"	e	enum:cv::DataType::__anon107
channels	core/traits.hpp	/^           channels     = 1,$/;"	e	enum:cv::DataType::__anon108
channels	core/traits.hpp	/^           channels     = 1,$/;"	e	enum:cv::DataType::__anon109
channels	core/traits.hpp	/^           channels     = 1,$/;"	e	enum:cv::DataType::__anon110
channels	core/types.hpp	/^           channels     = (int)(sizeof(value_type)\/sizeof(channel_type)), \/\/ 24$/;"	e	enum:cv::DataType::__anon130
channels	core/types.hpp	/^           channels     = (int)(sizeof(value_type)\/sizeof(channel_type)), \/\/ 4$/;"	e	enum:cv::DataType::__anon129
channels	core/types.hpp	/^           channels     = (int)(sizeof(value_type)\/sizeof(channel_type)), \/\/ 7$/;"	e	enum:cv::DataType::__anon128
channels	core/types.hpp	/^           channels     = (int)sizeof(value_type)\/sizeof(channel_type), \/\/ 5$/;"	e	enum:cv::DataType::__anon125
channels	core/types.hpp	/^           channels     = 2,$/;"	e	enum:cv::DataType::__anon120
channels	core/types.hpp	/^           channels     = 2,$/;"	e	enum:cv::DataType::__anon121
channels	core/types.hpp	/^           channels     = 2,$/;"	e	enum:cv::DataType::__anon123
channels	core/types.hpp	/^           channels     = 2,$/;"	e	enum:cv::DataType::__anon126
channels	core/types.hpp	/^           channels     = 3,$/;"	e	enum:cv::DataType::__anon122
channels	core/types.hpp	/^           channels     = 4,$/;"	e	enum:cv::DataType::__anon124
channels	core/types.hpp	/^           channels     = 4,$/;"	e	enum:cv::DataType::__anon127
channels	cudev/ptr2d/detail/gpumat.hpp	/^__host__ int GpuMat_<T>::channels() const$/;"	f	class:cv::cudev::GpuMat_
channels	cudev/ptr2d/mask.hpp	/^    int channels;$/;"	m	struct:cv::cudev::SingleMaskChannels
channels	cudev/util/vec_traits.hpp	/^           channels     = 1,$/;"	e	enum:cv::DataType::__anon359
channels	cudev/util/vec_traits.hpp	/^           channels     = 1,$/;"	e	enum:cv::DataType::__anon360
channels	cudev/util/vec_traits.hpp	/^           channels     = 2,$/;"	e	enum:cv::DataType::__anon361
channels	cudev/util/vec_traits.hpp	/^           channels     = 3,$/;"	e	enum:cv::DataType::__anon362
channels	cudev/util/vec_traits.hpp	/^           channels     = 4,$/;"	e	enum:cv::DataType::__anon363
chartreuse	viz/types.hpp	/^inline cv::viz::Color cv::viz::Color::chartreuse() { return Color(0,   255, 128); }$/;"	f	class:cv::viz::Color
check	core/cuda/utility.hpp	/^        static __device__ __forceinline__ bool check(int, int)$/;"	f	struct:cv::cuda::device::WithOutMask
check	core/cuda/utility.hpp	/^        static __device__ __forceinline__ bool check(int, int, int)$/;"	f	struct:cv::cuda::device::WithOutMask
checkCudaError	core/cuda/common.hpp	/^    static inline void checkCudaError(cudaError_t err, const char* file, const int line, const char* func)$/;"	f	namespace:cv::cuda
checkCudaError	cudev/common.hpp	/^__host__ __forceinline__ void checkCudaError(cudaError_t err, const char* file, const int line, const char* func)$/;"	f	namespace:cv::cudev
checkNcvError	cudalegacy/private.hpp	/^    static inline void checkNcvError(int err, const char* file, const int line, const char* func)$/;"	f	namespace:cv::cuda
checkNormRelative	ts/ocl_test.hpp	/^    static inline double checkNormRelative(InputArray m1, InputArray m2, InputArray mask = noArray())$/;"	f	struct:cvtest::ocl::TestUtils
checkNormRelativeSparse	ts/ocl_test.hpp	/^    static inline double checkNormRelativeSparse(InputArray m1, InputArray m2, InputArray mask = noArray())$/;"	f	struct:cvtest::ocl::TestUtils
cherry	viz/types.hpp	/^inline cv::viz::Color cv::viz::Color::cherry()         { return Color( 99,  29, 222); }$/;"	f	class:cv::viz::Color
child	objdetect/objdetect_c.h	/^    int child;$/;"	m	struct:CvHaarStageClassifier
child1	flann/kdtree_index.h	/^        Node* child1, * child2;$/;"	m	struct:cvflann::KDTreeIndex::Node
child1	flann/kdtree_single_index.h	/^        Node* child1, * child2;$/;"	m	struct:cvflann::KDTreeSingleIndex::Node
child2	flann/kdtree_index.h	/^        Node* child1, * child2;$/;"	m	struct:cvflann::KDTreeIndex::Node
child2	flann/kdtree_single_index.h	/^        Node* child1, * child2;$/;"	m	struct:cvflann::KDTreeSingleIndex::Node
childs	flann/hierarchical_clustering_index.h	/^        Node** childs;$/;"	m	struct:cvflann::HierarchicalClusteringIndex::Node
childs	flann/kmeans_index.h	/^        KMeansNode** childs;$/;"	m	struct:cvflann::KMeansIndex::KMeansNode
chooseCenters	flann/hierarchical_clustering_index.h	/^    centersAlgFunction chooseCenters;$/;"	m	class:cvflann::HierarchicalClusteringIndex
chooseCenters	flann/kmeans_index.h	/^    centersAlgFunction chooseCenters;$/;"	m	class:cvflann::KMeansIndex
chooseCentersGonzales	flann/hierarchical_clustering_index.h	/^    void chooseCentersGonzales(int k, int* dsindices, int indices_length, int* centers, int& centers_length)$/;"	f	class:cvflann::HierarchicalClusteringIndex
chooseCentersGonzales	flann/kmeans_index.h	/^    void chooseCentersGonzales(int k, int* indices, int indices_length, int* centers, int& centers_length)$/;"	f	class:cvflann::KMeansIndex
chooseCentersKMeanspp	flann/hierarchical_clustering_index.h	/^    void chooseCentersKMeanspp(int k, int* dsindices, int indices_length, int* centers, int& centers_length)$/;"	f	class:cvflann::HierarchicalClusteringIndex
chooseCentersKMeanspp	flann/kmeans_index.h	/^    void chooseCentersKMeanspp(int k, int* indices, int indices_length, int* centers, int& centers_length)$/;"	f	class:cvflann::KMeansIndex
chooseCentersRandom	flann/hierarchical_clustering_index.h	/^    void chooseCentersRandom(int k, int* dsindices, int indices_length, int* centers, int& centers_length)$/;"	f	class:cvflann::HierarchicalClusteringIndex
chooseCentersRandom	flann/kmeans_index.h	/^    void chooseCentersRandom(int k, int* indices, int indices_length, int* centers, int& centers_length)$/;"	f	class:cvflann::KMeansIndex
choose_policy	flann/any.h	/^struct choose_policy$/;"	s	namespace:cvflann::anyimpl
choose_policy	flann/any.h	/^struct choose_policy<T*>$/;"	s	namespace:cvflann::anyimpl
choose_policy	flann/any.h	/^struct choose_policy<any>$/;"	s	namespace:cvflann::anyimpl
chromaFormat	cudacodec.hpp	/^    ChromaFormat chromaFormat;$/;"	m	struct:cv::cudacodec::FormatInfo
clAmdBlasAddScratchImage	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	188;"	d
clAmdBlasAddScratchImage	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	9;"	d
clAmdBlasCaxpy	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	10;"	d
clAmdBlasCaxpy	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	190;"	d
clAmdBlasCcopy	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	11;"	d
clAmdBlasCcopy	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	192;"	d
clAmdBlasCdotc	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	12;"	d
clAmdBlasCdotc	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	194;"	d
clAmdBlasCdotu	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	13;"	d
clAmdBlasCdotu	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	196;"	d
clAmdBlasCgbmv	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	14;"	d
clAmdBlasCgbmv	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	198;"	d
clAmdBlasCgemm	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	15;"	d
clAmdBlasCgemm	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	200;"	d
clAmdBlasCgemmEx	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	16;"	d
clAmdBlasCgemmEx	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	202;"	d
clAmdBlasCgemmEx	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	203;"	d
clAmdBlasCgemv	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	17;"	d
clAmdBlasCgemv	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	204;"	d
clAmdBlasCgemvEx	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	18;"	d
clAmdBlasCgemvEx	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	206;"	d
clAmdBlasCgerc	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	19;"	d
clAmdBlasCgerc	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	208;"	d
clAmdBlasCgeru	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	20;"	d
clAmdBlasCgeru	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	210;"	d
clAmdBlasChbmv	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	212;"	d
clAmdBlasChbmv	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	21;"	d
clAmdBlasChemm	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	214;"	d
clAmdBlasChemm	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	22;"	d
clAmdBlasChemv	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	216;"	d
clAmdBlasChemv	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	23;"	d
clAmdBlasCher	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	218;"	d
clAmdBlasCher	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	24;"	d
clAmdBlasCher2	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	220;"	d
clAmdBlasCher2	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	25;"	d
clAmdBlasCher2k	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	222;"	d
clAmdBlasCher2k	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	26;"	d
clAmdBlasCherk	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	224;"	d
clAmdBlasCherk	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	27;"	d
clAmdBlasChpmv	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	226;"	d
clAmdBlasChpmv	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	28;"	d
clAmdBlasChpr	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	228;"	d
clAmdBlasChpr	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	29;"	d
clAmdBlasChpr2	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	230;"	d
clAmdBlasChpr2	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	30;"	d
clAmdBlasCrotg	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	232;"	d
clAmdBlasCrotg	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	31;"	d
clAmdBlasCscal	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	234;"	d
clAmdBlasCscal	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	32;"	d
clAmdBlasCsrot	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	236;"	d
clAmdBlasCsrot	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	33;"	d
clAmdBlasCsscal	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	238;"	d
clAmdBlasCsscal	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	34;"	d
clAmdBlasCswap	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	240;"	d
clAmdBlasCswap	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	35;"	d
clAmdBlasCsymm	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	242;"	d
clAmdBlasCsymm	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	36;"	d
clAmdBlasCsyr2k	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	244;"	d
clAmdBlasCsyr2k	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	37;"	d
clAmdBlasCsyr2kEx	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	246;"	d
clAmdBlasCsyr2kEx	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	38;"	d
clAmdBlasCsyrk	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	248;"	d
clAmdBlasCsyrk	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	39;"	d
clAmdBlasCsyrkEx	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	250;"	d
clAmdBlasCsyrkEx	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	40;"	d
clAmdBlasCtbmv	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	252;"	d
clAmdBlasCtbmv	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	41;"	d
clAmdBlasCtbsv	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	254;"	d
clAmdBlasCtbsv	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	42;"	d
clAmdBlasCtpmv	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	256;"	d
clAmdBlasCtpmv	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	43;"	d
clAmdBlasCtpsv	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	258;"	d
clAmdBlasCtpsv	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	44;"	d
clAmdBlasCtrmm	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	260;"	d
clAmdBlasCtrmm	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	45;"	d
clAmdBlasCtrmmEx	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	262;"	d
clAmdBlasCtrmmEx	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	46;"	d
clAmdBlasCtrmv	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	264;"	d
clAmdBlasCtrmv	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	47;"	d
clAmdBlasCtrsm	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	266;"	d
clAmdBlasCtrsm	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	48;"	d
clAmdBlasCtrsmEx	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	268;"	d
clAmdBlasCtrsmEx	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	49;"	d
clAmdBlasCtrsv	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	270;"	d
clAmdBlasCtrsv	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	50;"	d
clAmdBlasDasum	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	272;"	d
clAmdBlasDasum	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	51;"	d
clAmdBlasDaxpy	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	274;"	d
clAmdBlasDaxpy	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	52;"	d
clAmdBlasDcopy	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	276;"	d
clAmdBlasDcopy	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	53;"	d
clAmdBlasDdot	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	278;"	d
clAmdBlasDdot	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	54;"	d
clAmdBlasDgbmv	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	280;"	d
clAmdBlasDgbmv	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	55;"	d
clAmdBlasDgemm	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	282;"	d
clAmdBlasDgemm	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	56;"	d
clAmdBlasDgemmEx	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	284;"	d
clAmdBlasDgemmEx	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	285;"	d
clAmdBlasDgemmEx	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	57;"	d
clAmdBlasDgemv	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	286;"	d
clAmdBlasDgemv	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	58;"	d
clAmdBlasDgemvEx	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	288;"	d
clAmdBlasDgemvEx	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	59;"	d
clAmdBlasDger	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	290;"	d
clAmdBlasDger	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	60;"	d
clAmdBlasDnrm2	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	292;"	d
clAmdBlasDnrm2	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	61;"	d
clAmdBlasDrot	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	294;"	d
clAmdBlasDrot	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	62;"	d
clAmdBlasDrotg	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	296;"	d
clAmdBlasDrotg	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	63;"	d
clAmdBlasDrotm	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	298;"	d
clAmdBlasDrotm	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	64;"	d
clAmdBlasDrotmg	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	300;"	d
clAmdBlasDrotmg	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	65;"	d
clAmdBlasDsbmv	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	302;"	d
clAmdBlasDsbmv	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	66;"	d
clAmdBlasDscal	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	304;"	d
clAmdBlasDscal	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	67;"	d
clAmdBlasDspmv	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	306;"	d
clAmdBlasDspmv	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	68;"	d
clAmdBlasDspr	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	308;"	d
clAmdBlasDspr	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	69;"	d
clAmdBlasDspr2	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	310;"	d
clAmdBlasDspr2	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	70;"	d
clAmdBlasDswap	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	312;"	d
clAmdBlasDswap	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	71;"	d
clAmdBlasDsymm	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	314;"	d
clAmdBlasDsymm	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	72;"	d
clAmdBlasDsymv	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	316;"	d
clAmdBlasDsymv	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	73;"	d
clAmdBlasDsymvEx	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	318;"	d
clAmdBlasDsymvEx	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	74;"	d
clAmdBlasDsyr	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	320;"	d
clAmdBlasDsyr	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	75;"	d
clAmdBlasDsyr2	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	322;"	d
clAmdBlasDsyr2	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	76;"	d
clAmdBlasDsyr2k	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	324;"	d
clAmdBlasDsyr2k	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	77;"	d
clAmdBlasDsyr2kEx	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	326;"	d
clAmdBlasDsyr2kEx	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	78;"	d
clAmdBlasDsyrk	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	328;"	d
clAmdBlasDsyrk	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	79;"	d
clAmdBlasDsyrkEx	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	330;"	d
clAmdBlasDsyrkEx	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	80;"	d
clAmdBlasDtbmv	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	332;"	d
clAmdBlasDtbmv	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	81;"	d
clAmdBlasDtbsv	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	334;"	d
clAmdBlasDtbsv	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	82;"	d
clAmdBlasDtpmv	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	336;"	d
clAmdBlasDtpmv	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	83;"	d
clAmdBlasDtpsv	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	338;"	d
clAmdBlasDtpsv	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	84;"	d
clAmdBlasDtrmm	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	340;"	d
clAmdBlasDtrmm	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	85;"	d
clAmdBlasDtrmmEx	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	342;"	d
clAmdBlasDtrmmEx	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	86;"	d
clAmdBlasDtrmv	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	344;"	d
clAmdBlasDtrmv	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	87;"	d
clAmdBlasDtrsm	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	346;"	d
clAmdBlasDtrsm	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	88;"	d
clAmdBlasDtrsmEx	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	348;"	d
clAmdBlasDtrsmEx	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	89;"	d
clAmdBlasDtrsv	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	350;"	d
clAmdBlasDtrsv	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	90;"	d
clAmdBlasDzasum	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	352;"	d
clAmdBlasDzasum	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	91;"	d
clAmdBlasDznrm2	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	354;"	d
clAmdBlasDznrm2	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	92;"	d
clAmdBlasGetVersion	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	356;"	d
clAmdBlasGetVersion	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	93;"	d
clAmdBlasRemoveScratchImage	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	358;"	d
clAmdBlasRemoveScratchImage	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	94;"	d
clAmdBlasSasum	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	360;"	d
clAmdBlasSasum	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	95;"	d
clAmdBlasSaxpy	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	362;"	d
clAmdBlasSaxpy	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	96;"	d
clAmdBlasScasum	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	364;"	d
clAmdBlasScasum	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	97;"	d
clAmdBlasScnrm2	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	366;"	d
clAmdBlasScnrm2	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	98;"	d
clAmdBlasScopy	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	368;"	d
clAmdBlasScopy	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	99;"	d
clAmdBlasSdot	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	100;"	d
clAmdBlasSdot	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	370;"	d
clAmdBlasSetup	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	101;"	d
clAmdBlasSetup	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	372;"	d
clAmdBlasSetup	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	373;"	d
clAmdBlasSgbmv	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	102;"	d
clAmdBlasSgbmv	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	374;"	d
clAmdBlasSgemm	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	103;"	d
clAmdBlasSgemm	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	376;"	d
clAmdBlasSgemmEx	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	104;"	d
clAmdBlasSgemmEx	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	378;"	d
clAmdBlasSgemmEx	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	379;"	d
clAmdBlasSgemv	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	105;"	d
clAmdBlasSgemv	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	380;"	d
clAmdBlasSgemvEx	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	106;"	d
clAmdBlasSgemvEx	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	382;"	d
clAmdBlasSger	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	107;"	d
clAmdBlasSger	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	384;"	d
clAmdBlasSnrm2	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	108;"	d
clAmdBlasSnrm2	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	386;"	d
clAmdBlasSrot	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	109;"	d
clAmdBlasSrot	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	388;"	d
clAmdBlasSrotg	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	110;"	d
clAmdBlasSrotg	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	390;"	d
clAmdBlasSrotm	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	111;"	d
clAmdBlasSrotm	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	392;"	d
clAmdBlasSrotmg	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	112;"	d
clAmdBlasSrotmg	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	394;"	d
clAmdBlasSsbmv	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	113;"	d
clAmdBlasSsbmv	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	396;"	d
clAmdBlasSscal	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	114;"	d
clAmdBlasSscal	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	398;"	d
clAmdBlasSspmv	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	115;"	d
clAmdBlasSspmv	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	400;"	d
clAmdBlasSspr	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	116;"	d
clAmdBlasSspr	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	402;"	d
clAmdBlasSspr2	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	117;"	d
clAmdBlasSspr2	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	404;"	d
clAmdBlasSswap	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	118;"	d
clAmdBlasSswap	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	406;"	d
clAmdBlasSsymm	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	119;"	d
clAmdBlasSsymm	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	408;"	d
clAmdBlasSsymv	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	120;"	d
clAmdBlasSsymv	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	410;"	d
clAmdBlasSsymvEx	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	121;"	d
clAmdBlasSsymvEx	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	412;"	d
clAmdBlasSsyr	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	122;"	d
clAmdBlasSsyr	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	414;"	d
clAmdBlasSsyr2	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	123;"	d
clAmdBlasSsyr2	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	416;"	d
clAmdBlasSsyr2k	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	124;"	d
clAmdBlasSsyr2k	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	418;"	d
clAmdBlasSsyr2kEx	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	125;"	d
clAmdBlasSsyr2kEx	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	420;"	d
clAmdBlasSsyrk	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	126;"	d
clAmdBlasSsyrk	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	422;"	d
clAmdBlasSsyrkEx	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	127;"	d
clAmdBlasSsyrkEx	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	424;"	d
clAmdBlasStbmv	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	128;"	d
clAmdBlasStbmv	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	426;"	d
clAmdBlasStbsv	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	129;"	d
clAmdBlasStbsv	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	428;"	d
clAmdBlasStpmv	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	130;"	d
clAmdBlasStpmv	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	430;"	d
clAmdBlasStpsv	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	131;"	d
clAmdBlasStpsv	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	432;"	d
clAmdBlasStrmm	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	132;"	d
clAmdBlasStrmm	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	434;"	d
clAmdBlasStrmmEx	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	133;"	d
clAmdBlasStrmmEx	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	436;"	d
clAmdBlasStrmv	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	134;"	d
clAmdBlasStrmv	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	438;"	d
clAmdBlasStrsm	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	135;"	d
clAmdBlasStrsm	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	440;"	d
clAmdBlasStrsmEx	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	136;"	d
clAmdBlasStrsmEx	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	442;"	d
clAmdBlasStrsv	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	137;"	d
clAmdBlasStrsv	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	444;"	d
clAmdBlasTeardown	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	138;"	d
clAmdBlasTeardown	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	446;"	d
clAmdBlasTeardown	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	447;"	d
clAmdBlasZaxpy	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	139;"	d
clAmdBlasZaxpy	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	448;"	d
clAmdBlasZcopy	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	140;"	d
clAmdBlasZcopy	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	450;"	d
clAmdBlasZdotc	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	141;"	d
clAmdBlasZdotc	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	452;"	d
clAmdBlasZdotu	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	142;"	d
clAmdBlasZdotu	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	454;"	d
clAmdBlasZdrot	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	143;"	d
clAmdBlasZdrot	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	456;"	d
clAmdBlasZdscal	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	144;"	d
clAmdBlasZdscal	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	458;"	d
clAmdBlasZgbmv	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	145;"	d
clAmdBlasZgbmv	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	460;"	d
clAmdBlasZgemm	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	146;"	d
clAmdBlasZgemm	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	462;"	d
clAmdBlasZgemmEx	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	147;"	d
clAmdBlasZgemmEx	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	464;"	d
clAmdBlasZgemmEx	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	465;"	d
clAmdBlasZgemv	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	148;"	d
clAmdBlasZgemv	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	466;"	d
clAmdBlasZgemvEx	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	149;"	d
clAmdBlasZgemvEx	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	468;"	d
clAmdBlasZgerc	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	150;"	d
clAmdBlasZgerc	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	470;"	d
clAmdBlasZgeru	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	151;"	d
clAmdBlasZgeru	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	472;"	d
clAmdBlasZhbmv	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	152;"	d
clAmdBlasZhbmv	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	474;"	d
clAmdBlasZhemm	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	153;"	d
clAmdBlasZhemm	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	476;"	d
clAmdBlasZhemv	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	154;"	d
clAmdBlasZhemv	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	478;"	d
clAmdBlasZher	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	155;"	d
clAmdBlasZher	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	480;"	d
clAmdBlasZher2	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	156;"	d
clAmdBlasZher2	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	482;"	d
clAmdBlasZher2k	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	157;"	d
clAmdBlasZher2k	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	484;"	d
clAmdBlasZherk	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	158;"	d
clAmdBlasZherk	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	486;"	d
clAmdBlasZhpmv	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	159;"	d
clAmdBlasZhpmv	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	488;"	d
clAmdBlasZhpr	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	160;"	d
clAmdBlasZhpr	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	490;"	d
clAmdBlasZhpr2	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	161;"	d
clAmdBlasZhpr2	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	492;"	d
clAmdBlasZrotg	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	162;"	d
clAmdBlasZrotg	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	494;"	d
clAmdBlasZscal	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	163;"	d
clAmdBlasZscal	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	496;"	d
clAmdBlasZswap	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	164;"	d
clAmdBlasZswap	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	498;"	d
clAmdBlasZsymm	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	165;"	d
clAmdBlasZsymm	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	500;"	d
clAmdBlasZsyr2k	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	166;"	d
clAmdBlasZsyr2k	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	502;"	d
clAmdBlasZsyr2kEx	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	167;"	d
clAmdBlasZsyr2kEx	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	504;"	d
clAmdBlasZsyrk	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	168;"	d
clAmdBlasZsyrk	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	506;"	d
clAmdBlasZsyrkEx	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	169;"	d
clAmdBlasZsyrkEx	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	508;"	d
clAmdBlasZtbmv	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	170;"	d
clAmdBlasZtbmv	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	510;"	d
clAmdBlasZtbsv	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	171;"	d
clAmdBlasZtbsv	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	512;"	d
clAmdBlasZtpmv	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	172;"	d
clAmdBlasZtpmv	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	514;"	d
clAmdBlasZtpsv	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	173;"	d
clAmdBlasZtpsv	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	516;"	d
clAmdBlasZtrmm	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	174;"	d
clAmdBlasZtrmm	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	518;"	d
clAmdBlasZtrmmEx	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	175;"	d
clAmdBlasZtrmmEx	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	520;"	d
clAmdBlasZtrmv	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	176;"	d
clAmdBlasZtrmv	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	522;"	d
clAmdBlasZtrsm	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	177;"	d
clAmdBlasZtrsm	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	524;"	d
clAmdBlasZtrsmEx	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	178;"	d
clAmdBlasZtrsmEx	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	526;"	d
clAmdBlasZtrsv	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	179;"	d
clAmdBlasZtrsv	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	528;"	d
clAmdBlasiCamax	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	180;"	d
clAmdBlasiCamax	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	530;"	d
clAmdBlasiDamax	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	181;"	d
clAmdBlasiDamax	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	532;"	d
clAmdBlasiSamax	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	182;"	d
clAmdBlasiSamax	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	534;"	d
clAmdBlasiZamax	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	183;"	d
clAmdBlasiZamax	core/opencl/runtime/autogenerated/opencl_clamdblas.hpp	536;"	d
clAmdFftBakePlan	core/opencl/runtime/autogenerated/opencl_clamdfft.hpp	45;"	d
clAmdFftBakePlan	core/opencl/runtime/autogenerated/opencl_clamdfft.hpp	46;"	d
clAmdFftBakePlan	core/opencl/runtime/autogenerated/opencl_clamdfft.hpp	9;"	d
clAmdFftCopyPlan	core/opencl/runtime/autogenerated/opencl_clamdfft.hpp	10;"	d
clAmdFftCopyPlan	core/opencl/runtime/autogenerated/opencl_clamdfft.hpp	47;"	d
clAmdFftCreateDefaultPlan	core/opencl/runtime/autogenerated/opencl_clamdfft.hpp	11;"	d
clAmdFftCreateDefaultPlan	core/opencl/runtime/autogenerated/opencl_clamdfft.hpp	49;"	d
clAmdFftCreateDefaultPlan	core/opencl/runtime/autogenerated/opencl_clamdfft.hpp	50;"	d
clAmdFftDestroyPlan	core/opencl/runtime/autogenerated/opencl_clamdfft.hpp	12;"	d
clAmdFftDestroyPlan	core/opencl/runtime/autogenerated/opencl_clamdfft.hpp	51;"	d
clAmdFftDestroyPlan	core/opencl/runtime/autogenerated/opencl_clamdfft.hpp	52;"	d
clAmdFftEnqueueTransform	core/opencl/runtime/autogenerated/opencl_clamdfft.hpp	13;"	d
clAmdFftEnqueueTransform	core/opencl/runtime/autogenerated/opencl_clamdfft.hpp	53;"	d
clAmdFftEnqueueTransform	core/opencl/runtime/autogenerated/opencl_clamdfft.hpp	54;"	d
clAmdFftGetLayout	core/opencl/runtime/autogenerated/opencl_clamdfft.hpp	14;"	d
clAmdFftGetLayout	core/opencl/runtime/autogenerated/opencl_clamdfft.hpp	55;"	d
clAmdFftGetPlanBatchSize	core/opencl/runtime/autogenerated/opencl_clamdfft.hpp	15;"	d
clAmdFftGetPlanBatchSize	core/opencl/runtime/autogenerated/opencl_clamdfft.hpp	57;"	d
clAmdFftGetPlanContext	core/opencl/runtime/autogenerated/opencl_clamdfft.hpp	16;"	d
clAmdFftGetPlanContext	core/opencl/runtime/autogenerated/opencl_clamdfft.hpp	59;"	d
clAmdFftGetPlanDim	core/opencl/runtime/autogenerated/opencl_clamdfft.hpp	17;"	d
clAmdFftGetPlanDim	core/opencl/runtime/autogenerated/opencl_clamdfft.hpp	61;"	d
clAmdFftGetPlanDistance	core/opencl/runtime/autogenerated/opencl_clamdfft.hpp	18;"	d
clAmdFftGetPlanDistance	core/opencl/runtime/autogenerated/opencl_clamdfft.hpp	63;"	d
clAmdFftGetPlanInStride	core/opencl/runtime/autogenerated/opencl_clamdfft.hpp	19;"	d
clAmdFftGetPlanInStride	core/opencl/runtime/autogenerated/opencl_clamdfft.hpp	65;"	d
clAmdFftGetPlanLength	core/opencl/runtime/autogenerated/opencl_clamdfft.hpp	20;"	d
clAmdFftGetPlanLength	core/opencl/runtime/autogenerated/opencl_clamdfft.hpp	67;"	d
clAmdFftGetPlanOutStride	core/opencl/runtime/autogenerated/opencl_clamdfft.hpp	21;"	d
clAmdFftGetPlanOutStride	core/opencl/runtime/autogenerated/opencl_clamdfft.hpp	69;"	d
clAmdFftGetPlanPrecision	core/opencl/runtime/autogenerated/opencl_clamdfft.hpp	22;"	d
clAmdFftGetPlanPrecision	core/opencl/runtime/autogenerated/opencl_clamdfft.hpp	71;"	d
clAmdFftGetPlanScale	core/opencl/runtime/autogenerated/opencl_clamdfft.hpp	23;"	d
clAmdFftGetPlanScale	core/opencl/runtime/autogenerated/opencl_clamdfft.hpp	73;"	d
clAmdFftGetPlanTransposeResult	core/opencl/runtime/autogenerated/opencl_clamdfft.hpp	24;"	d
clAmdFftGetPlanTransposeResult	core/opencl/runtime/autogenerated/opencl_clamdfft.hpp	75;"	d
clAmdFftGetResultLocation	core/opencl/runtime/autogenerated/opencl_clamdfft.hpp	25;"	d
clAmdFftGetResultLocation	core/opencl/runtime/autogenerated/opencl_clamdfft.hpp	77;"	d
clAmdFftGetTmpBufSize	core/opencl/runtime/autogenerated/opencl_clamdfft.hpp	26;"	d
clAmdFftGetTmpBufSize	core/opencl/runtime/autogenerated/opencl_clamdfft.hpp	79;"	d
clAmdFftGetTmpBufSize	core/opencl/runtime/autogenerated/opencl_clamdfft.hpp	80;"	d
clAmdFftGetVersion	core/opencl/runtime/autogenerated/opencl_clamdfft.hpp	27;"	d
clAmdFftGetVersion	core/opencl/runtime/autogenerated/opencl_clamdfft.hpp	81;"	d
clAmdFftGetVersion	core/opencl/runtime/autogenerated/opencl_clamdfft.hpp	82;"	d
clAmdFftSetLayout	core/opencl/runtime/autogenerated/opencl_clamdfft.hpp	28;"	d
clAmdFftSetLayout	core/opencl/runtime/autogenerated/opencl_clamdfft.hpp	83;"	d
clAmdFftSetLayout	core/opencl/runtime/autogenerated/opencl_clamdfft.hpp	84;"	d
clAmdFftSetPlanBatchSize	core/opencl/runtime/autogenerated/opencl_clamdfft.hpp	29;"	d
clAmdFftSetPlanBatchSize	core/opencl/runtime/autogenerated/opencl_clamdfft.hpp	85;"	d
clAmdFftSetPlanBatchSize	core/opencl/runtime/autogenerated/opencl_clamdfft.hpp	86;"	d
clAmdFftSetPlanDim	core/opencl/runtime/autogenerated/opencl_clamdfft.hpp	30;"	d
clAmdFftSetPlanDim	core/opencl/runtime/autogenerated/opencl_clamdfft.hpp	87;"	d
clAmdFftSetPlanDistance	core/opencl/runtime/autogenerated/opencl_clamdfft.hpp	31;"	d
clAmdFftSetPlanDistance	core/opencl/runtime/autogenerated/opencl_clamdfft.hpp	89;"	d
clAmdFftSetPlanDistance	core/opencl/runtime/autogenerated/opencl_clamdfft.hpp	90;"	d
clAmdFftSetPlanInStride	core/opencl/runtime/autogenerated/opencl_clamdfft.hpp	32;"	d
clAmdFftSetPlanInStride	core/opencl/runtime/autogenerated/opencl_clamdfft.hpp	91;"	d
clAmdFftSetPlanInStride	core/opencl/runtime/autogenerated/opencl_clamdfft.hpp	92;"	d
clAmdFftSetPlanLength	core/opencl/runtime/autogenerated/opencl_clamdfft.hpp	33;"	d
clAmdFftSetPlanLength	core/opencl/runtime/autogenerated/opencl_clamdfft.hpp	93;"	d
clAmdFftSetPlanOutStride	core/opencl/runtime/autogenerated/opencl_clamdfft.hpp	34;"	d
clAmdFftSetPlanOutStride	core/opencl/runtime/autogenerated/opencl_clamdfft.hpp	95;"	d
clAmdFftSetPlanOutStride	core/opencl/runtime/autogenerated/opencl_clamdfft.hpp	96;"	d
clAmdFftSetPlanPrecision	core/opencl/runtime/autogenerated/opencl_clamdfft.hpp	35;"	d
clAmdFftSetPlanPrecision	core/opencl/runtime/autogenerated/opencl_clamdfft.hpp	97;"	d
clAmdFftSetPlanPrecision	core/opencl/runtime/autogenerated/opencl_clamdfft.hpp	98;"	d
clAmdFftSetPlanScale	core/opencl/runtime/autogenerated/opencl_clamdfft.hpp	100;"	d
clAmdFftSetPlanScale	core/opencl/runtime/autogenerated/opencl_clamdfft.hpp	36;"	d
clAmdFftSetPlanScale	core/opencl/runtime/autogenerated/opencl_clamdfft.hpp	99;"	d
clAmdFftSetPlanTransposeResult	core/opencl/runtime/autogenerated/opencl_clamdfft.hpp	101;"	d
clAmdFftSetPlanTransposeResult	core/opencl/runtime/autogenerated/opencl_clamdfft.hpp	37;"	d
clAmdFftSetResultLocation	core/opencl/runtime/autogenerated/opencl_clamdfft.hpp	103;"	d
clAmdFftSetResultLocation	core/opencl/runtime/autogenerated/opencl_clamdfft.hpp	104;"	d
clAmdFftSetResultLocation	core/opencl/runtime/autogenerated/opencl_clamdfft.hpp	38;"	d
clAmdFftSetup	core/opencl/runtime/autogenerated/opencl_clamdfft.hpp	105;"	d
clAmdFftSetup	core/opencl/runtime/autogenerated/opencl_clamdfft.hpp	106;"	d
clAmdFftSetup	core/opencl/runtime/autogenerated/opencl_clamdfft.hpp	39;"	d
clAmdFftTeardown	core/opencl/runtime/autogenerated/opencl_clamdfft.hpp	107;"	d
clAmdFftTeardown	core/opencl/runtime/autogenerated/opencl_clamdfft.hpp	108;"	d
clAmdFftTeardown	core/opencl/runtime/autogenerated/opencl_clamdfft.hpp	40;"	d
clBuildProgram	core/opencl/runtime/autogenerated/opencl_core.hpp	105;"	d
clBuildProgram	core/opencl/runtime/autogenerated/opencl_core.hpp	106;"	d
clBuildProgram	core/opencl/runtime/autogenerated/opencl_core.hpp	9;"	d
clBuildProgram	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	/^inline cl_int clBuildProgram(cl_program p0, cl_uint p1, const cl_device_id* p2, const char* p3, void (CL_CALLBACK*p4) (cl_program, void*), void* p5) { return clBuildProgram_pfn(p0, p1, p2, p3, p4, p5); }$/;"	f
clBuildProgram	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	10;"	d
clBuildProgram	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	9;"	d
clCompileProgram	core/opencl/runtime/autogenerated/opencl_core.hpp	107;"	d
clCompileProgram	core/opencl/runtime/autogenerated/opencl_core.hpp	108;"	d
clCompileProgram	core/opencl/runtime/autogenerated/opencl_core.hpp	10;"	d
clCompileProgram	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	/^inline cl_int clCompileProgram(cl_program p0, cl_uint p1, const cl_device_id* p2, const char* p3, cl_uint p4, const cl_program* p5, const char** p6, void (CL_CALLBACK*p7) (cl_program, void*), void* p8) { return clCompileProgram_pfn(p0, p1, p2, p3, p4, p5, p6, p7, p8); }$/;"	f
clCompileProgram	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	12;"	d
clCompileProgram	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	13;"	d
clCreateBuffer	core/opencl/runtime/autogenerated/opencl_core.hpp	109;"	d
clCreateBuffer	core/opencl/runtime/autogenerated/opencl_core.hpp	110;"	d
clCreateBuffer	core/opencl/runtime/autogenerated/opencl_core.hpp	11;"	d
clCreateBuffer	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	/^inline cl_mem clCreateBuffer(cl_context p0, cl_mem_flags p1, size_t p2, void* p3, cl_int* p4) { return clCreateBuffer_pfn(p0, p1, p2, p3, p4); }$/;"	f
clCreateBuffer	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	15;"	d
clCreateBuffer	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	16;"	d
clCreateCommandQueue	core/opencl/runtime/autogenerated/opencl_core.hpp	111;"	d
clCreateCommandQueue	core/opencl/runtime/autogenerated/opencl_core.hpp	112;"	d
clCreateCommandQueue	core/opencl/runtime/autogenerated/opencl_core.hpp	12;"	d
clCreateCommandQueue	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	/^inline cl_command_queue clCreateCommandQueue(cl_context p0, cl_device_id p1, cl_command_queue_properties p2, cl_int* p3) { return clCreateCommandQueue_pfn(p0, p1, p2, p3); }$/;"	f
clCreateCommandQueue	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	18;"	d
clCreateCommandQueue	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	19;"	d
clCreateContext	core/opencl/runtime/autogenerated/opencl_core.hpp	113;"	d
clCreateContext	core/opencl/runtime/autogenerated/opencl_core.hpp	114;"	d
clCreateContext	core/opencl/runtime/autogenerated/opencl_core.hpp	13;"	d
clCreateContext	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	/^inline cl_context clCreateContext(const cl_context_properties* p0, cl_uint p1, const cl_device_id* p2, void (CL_CALLBACK*p3) (const char*, const void*, size_t, void*), void* p4, cl_int* p5) { return clCreateContext_pfn(p0, p1, p2, p3, p4, p5); }$/;"	f
clCreateContext	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	21;"	d
clCreateContext	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	22;"	d
clCreateContextFromType	core/opencl/runtime/autogenerated/opencl_core.hpp	115;"	d
clCreateContextFromType	core/opencl/runtime/autogenerated/opencl_core.hpp	116;"	d
clCreateContextFromType	core/opencl/runtime/autogenerated/opencl_core.hpp	14;"	d
clCreateContextFromType	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	/^inline cl_context clCreateContextFromType(const cl_context_properties* p0, cl_device_type p1, void (CL_CALLBACK*p2) (const char*, const void*, size_t, void*), void* p3, cl_int* p4) { return clCreateContextFromType_pfn(p0, p1, p2, p3, p4); }$/;"	f
clCreateContextFromType	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	24;"	d
clCreateContextFromType	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	25;"	d
clCreateImage	core/opencl/runtime/autogenerated/opencl_core.hpp	117;"	d
clCreateImage	core/opencl/runtime/autogenerated/opencl_core.hpp	118;"	d
clCreateImage	core/opencl/runtime/autogenerated/opencl_core.hpp	15;"	d
clCreateImage	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	/^inline cl_mem clCreateImage(cl_context p0, cl_mem_flags p1, const cl_image_format* p2, const cl_image_desc* p3, void* p4, cl_int* p5) { return clCreateImage_pfn(p0, p1, p2, p3, p4, p5); }$/;"	f
clCreateImage	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	27;"	d
clCreateImage	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	28;"	d
clCreateImage2D	core/opencl/runtime/autogenerated/opencl_core.hpp	119;"	d
clCreateImage2D	core/opencl/runtime/autogenerated/opencl_core.hpp	120;"	d
clCreateImage2D	core/opencl/runtime/autogenerated/opencl_core.hpp	16;"	d
clCreateImage2D	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	/^inline cl_mem clCreateImage2D(cl_context p0, cl_mem_flags p1, const cl_image_format* p2, size_t p3, size_t p4, size_t p5, void* p6, cl_int* p7) { return clCreateImage2D_pfn(p0, p1, p2, p3, p4, p5, p6, p7); }$/;"	f
clCreateImage2D	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	30;"	d
clCreateImage2D	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	31;"	d
clCreateImage3D	core/opencl/runtime/autogenerated/opencl_core.hpp	121;"	d
clCreateImage3D	core/opencl/runtime/autogenerated/opencl_core.hpp	122;"	d
clCreateImage3D	core/opencl/runtime/autogenerated/opencl_core.hpp	17;"	d
clCreateImage3D	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	/^inline cl_mem clCreateImage3D(cl_context p0, cl_mem_flags p1, const cl_image_format* p2, size_t p3, size_t p4, size_t p5, size_t p6, size_t p7, void* p8, cl_int* p9) { return clCreateImage3D_pfn(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9); }$/;"	f
clCreateImage3D	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	33;"	d
clCreateImage3D	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	34;"	d
clCreateKernel	core/opencl/runtime/autogenerated/opencl_core.hpp	123;"	d
clCreateKernel	core/opencl/runtime/autogenerated/opencl_core.hpp	124;"	d
clCreateKernel	core/opencl/runtime/autogenerated/opencl_core.hpp	18;"	d
clCreateKernel	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	/^inline cl_kernel clCreateKernel(cl_program p0, const char* p1, cl_int* p2) { return clCreateKernel_pfn(p0, p1, p2); }$/;"	f
clCreateKernel	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	36;"	d
clCreateKernel	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	37;"	d
clCreateKernelsInProgram	core/opencl/runtime/autogenerated/opencl_core.hpp	125;"	d
clCreateKernelsInProgram	core/opencl/runtime/autogenerated/opencl_core.hpp	126;"	d
clCreateKernelsInProgram	core/opencl/runtime/autogenerated/opencl_core.hpp	19;"	d
clCreateKernelsInProgram	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	/^inline cl_int clCreateKernelsInProgram(cl_program p0, cl_uint p1, cl_kernel* p2, cl_uint* p3) { return clCreateKernelsInProgram_pfn(p0, p1, p2, p3); }$/;"	f
clCreateKernelsInProgram	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	39;"	d
clCreateKernelsInProgram	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	40;"	d
clCreateProgramWithBinary	core/opencl/runtime/autogenerated/opencl_core.hpp	127;"	d
clCreateProgramWithBinary	core/opencl/runtime/autogenerated/opencl_core.hpp	128;"	d
clCreateProgramWithBinary	core/opencl/runtime/autogenerated/opencl_core.hpp	20;"	d
clCreateProgramWithBinary	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	/^inline cl_program clCreateProgramWithBinary(cl_context p0, cl_uint p1, const cl_device_id* p2, const size_t* p3, const unsigned char** p4, cl_int* p5, cl_int* p6) { return clCreateProgramWithBinary_pfn(p0, p1, p2, p3, p4, p5, p6); }$/;"	f
clCreateProgramWithBinary	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	42;"	d
clCreateProgramWithBinary	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	43;"	d
clCreateProgramWithBuiltInKernels	core/opencl/runtime/autogenerated/opencl_core.hpp	129;"	d
clCreateProgramWithBuiltInKernels	core/opencl/runtime/autogenerated/opencl_core.hpp	130;"	d
clCreateProgramWithBuiltInKernels	core/opencl/runtime/autogenerated/opencl_core.hpp	21;"	d
clCreateProgramWithBuiltInKernels	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	/^inline cl_program clCreateProgramWithBuiltInKernels(cl_context p0, cl_uint p1, const cl_device_id* p2, const char* p3, cl_int* p4) { return clCreateProgramWithBuiltInKernels_pfn(p0, p1, p2, p3, p4); }$/;"	f
clCreateProgramWithBuiltInKernels	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	45;"	d
clCreateProgramWithBuiltInKernels	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	46;"	d
clCreateProgramWithSource	core/opencl/runtime/autogenerated/opencl_core.hpp	131;"	d
clCreateProgramWithSource	core/opencl/runtime/autogenerated/opencl_core.hpp	132;"	d
clCreateProgramWithSource	core/opencl/runtime/autogenerated/opencl_core.hpp	22;"	d
clCreateProgramWithSource	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	/^inline cl_program clCreateProgramWithSource(cl_context p0, cl_uint p1, const char** p2, const size_t* p3, cl_int* p4) { return clCreateProgramWithSource_pfn(p0, p1, p2, p3, p4); }$/;"	f
clCreateProgramWithSource	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	48;"	d
clCreateProgramWithSource	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	49;"	d
clCreateSampler	core/opencl/runtime/autogenerated/opencl_core.hpp	133;"	d
clCreateSampler	core/opencl/runtime/autogenerated/opencl_core.hpp	134;"	d
clCreateSampler	core/opencl/runtime/autogenerated/opencl_core.hpp	23;"	d
clCreateSampler	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	/^inline cl_sampler clCreateSampler(cl_context p0, cl_bool p1, cl_addressing_mode p2, cl_filter_mode p3, cl_int* p4) { return clCreateSampler_pfn(p0, p1, p2, p3, p4); }$/;"	f
clCreateSampler	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	51;"	d
clCreateSampler	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	52;"	d
clCreateSubBuffer	core/opencl/runtime/autogenerated/opencl_core.hpp	135;"	d
clCreateSubBuffer	core/opencl/runtime/autogenerated/opencl_core.hpp	136;"	d
clCreateSubBuffer	core/opencl/runtime/autogenerated/opencl_core.hpp	24;"	d
clCreateSubBuffer	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	/^inline cl_mem clCreateSubBuffer(cl_mem p0, cl_mem_flags p1, cl_buffer_create_type p2, const void* p3, cl_int* p4) { return clCreateSubBuffer_pfn(p0, p1, p2, p3, p4); }$/;"	f
clCreateSubBuffer	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	54;"	d
clCreateSubBuffer	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	55;"	d
clCreateSubDevices	core/opencl/runtime/autogenerated/opencl_core.hpp	137;"	d
clCreateSubDevices	core/opencl/runtime/autogenerated/opencl_core.hpp	138;"	d
clCreateSubDevices	core/opencl/runtime/autogenerated/opencl_core.hpp	25;"	d
clCreateSubDevices	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	/^inline cl_int clCreateSubDevices(cl_device_id p0, const cl_device_partition_property* p1, cl_uint p2, cl_device_id* p3, cl_uint* p4) { return clCreateSubDevices_pfn(p0, p1, p2, p3, p4); }$/;"	f
clCreateSubDevices	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	57;"	d
clCreateSubDevices	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	58;"	d
clCreateUserEvent	core/opencl/runtime/autogenerated/opencl_core.hpp	139;"	d
clCreateUserEvent	core/opencl/runtime/autogenerated/opencl_core.hpp	140;"	d
clCreateUserEvent	core/opencl/runtime/autogenerated/opencl_core.hpp	26;"	d
clCreateUserEvent	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	/^inline cl_event clCreateUserEvent(cl_context p0, cl_int* p1) { return clCreateUserEvent_pfn(p0, p1); }$/;"	f
clCreateUserEvent	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	60;"	d
clCreateUserEvent	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	61;"	d
clEnqueueBarrier	core/opencl/runtime/autogenerated/opencl_core.hpp	141;"	d
clEnqueueBarrier	core/opencl/runtime/autogenerated/opencl_core.hpp	142;"	d
clEnqueueBarrier	core/opencl/runtime/autogenerated/opencl_core.hpp	27;"	d
clEnqueueBarrier	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	/^inline cl_int clEnqueueBarrier(cl_command_queue p0) { return clEnqueueBarrier_pfn(p0); }$/;"	f
clEnqueueBarrier	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	63;"	d
clEnqueueBarrier	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	64;"	d
clEnqueueBarrierWithWaitList	core/opencl/runtime/autogenerated/opencl_core.hpp	143;"	d
clEnqueueBarrierWithWaitList	core/opencl/runtime/autogenerated/opencl_core.hpp	144;"	d
clEnqueueBarrierWithWaitList	core/opencl/runtime/autogenerated/opencl_core.hpp	28;"	d
clEnqueueBarrierWithWaitList	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	/^inline cl_int clEnqueueBarrierWithWaitList(cl_command_queue p0, cl_uint p1, const cl_event* p2, cl_event* p3) { return clEnqueueBarrierWithWaitList_pfn(p0, p1, p2, p3); }$/;"	f
clEnqueueBarrierWithWaitList	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	66;"	d
clEnqueueBarrierWithWaitList	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	67;"	d
clEnqueueCopyBuffer	core/opencl/runtime/autogenerated/opencl_core.hpp	145;"	d
clEnqueueCopyBuffer	core/opencl/runtime/autogenerated/opencl_core.hpp	146;"	d
clEnqueueCopyBuffer	core/opencl/runtime/autogenerated/opencl_core.hpp	29;"	d
clEnqueueCopyBuffer	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	/^inline cl_int clEnqueueCopyBuffer(cl_command_queue p0, cl_mem p1, cl_mem p2, size_t p3, size_t p4, size_t p5, cl_uint p6, const cl_event* p7, cl_event* p8) { return clEnqueueCopyBuffer_pfn(p0, p1, p2, p3, p4, p5, p6, p7, p8); }$/;"	f
clEnqueueCopyBuffer	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	69;"	d
clEnqueueCopyBuffer	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	70;"	d
clEnqueueCopyBufferRect	core/opencl/runtime/autogenerated/opencl_core.hpp	147;"	d
clEnqueueCopyBufferRect	core/opencl/runtime/autogenerated/opencl_core.hpp	148;"	d
clEnqueueCopyBufferRect	core/opencl/runtime/autogenerated/opencl_core.hpp	30;"	d
clEnqueueCopyBufferRect	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	/^inline cl_int clEnqueueCopyBufferRect(cl_command_queue p0, cl_mem p1, cl_mem p2, const size_t* p3, const size_t* p4, const size_t* p5, size_t p6, size_t p7, size_t p8, size_t p9, cl_uint p10, const cl_event* p11, cl_event* p12) { return clEnqueueCopyBufferRect_pfn(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12); }$/;"	f
clEnqueueCopyBufferRect	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	72;"	d
clEnqueueCopyBufferRect	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	73;"	d
clEnqueueCopyBufferToImage	core/opencl/runtime/autogenerated/opencl_core.hpp	149;"	d
clEnqueueCopyBufferToImage	core/opencl/runtime/autogenerated/opencl_core.hpp	150;"	d
clEnqueueCopyBufferToImage	core/opencl/runtime/autogenerated/opencl_core.hpp	31;"	d
clEnqueueCopyBufferToImage	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	/^inline cl_int clEnqueueCopyBufferToImage(cl_command_queue p0, cl_mem p1, cl_mem p2, size_t p3, const size_t* p4, const size_t* p5, cl_uint p6, const cl_event* p7, cl_event* p8) { return clEnqueueCopyBufferToImage_pfn(p0, p1, p2, p3, p4, p5, p6, p7, p8); }$/;"	f
clEnqueueCopyBufferToImage	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	75;"	d
clEnqueueCopyBufferToImage	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	76;"	d
clEnqueueCopyImage	core/opencl/runtime/autogenerated/opencl_core.hpp	151;"	d
clEnqueueCopyImage	core/opencl/runtime/autogenerated/opencl_core.hpp	152;"	d
clEnqueueCopyImage	core/opencl/runtime/autogenerated/opencl_core.hpp	32;"	d
clEnqueueCopyImage	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	/^inline cl_int clEnqueueCopyImage(cl_command_queue p0, cl_mem p1, cl_mem p2, const size_t* p3, const size_t* p4, const size_t* p5, cl_uint p6, const cl_event* p7, cl_event* p8) { return clEnqueueCopyImage_pfn(p0, p1, p2, p3, p4, p5, p6, p7, p8); }$/;"	f
clEnqueueCopyImage	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	78;"	d
clEnqueueCopyImage	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	79;"	d
clEnqueueCopyImageToBuffer	core/opencl/runtime/autogenerated/opencl_core.hpp	153;"	d
clEnqueueCopyImageToBuffer	core/opencl/runtime/autogenerated/opencl_core.hpp	154;"	d
clEnqueueCopyImageToBuffer	core/opencl/runtime/autogenerated/opencl_core.hpp	33;"	d
clEnqueueCopyImageToBuffer	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	/^inline cl_int clEnqueueCopyImageToBuffer(cl_command_queue p0, cl_mem p1, cl_mem p2, const size_t* p3, const size_t* p4, size_t p5, cl_uint p6, const cl_event* p7, cl_event* p8) { return clEnqueueCopyImageToBuffer_pfn(p0, p1, p2, p3, p4, p5, p6, p7, p8); }$/;"	f
clEnqueueCopyImageToBuffer	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	81;"	d
clEnqueueCopyImageToBuffer	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	82;"	d
clEnqueueFillBuffer	core/opencl/runtime/autogenerated/opencl_core.hpp	155;"	d
clEnqueueFillBuffer	core/opencl/runtime/autogenerated/opencl_core.hpp	156;"	d
clEnqueueFillBuffer	core/opencl/runtime/autogenerated/opencl_core.hpp	34;"	d
clEnqueueFillBuffer	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	/^inline cl_int clEnqueueFillBuffer(cl_command_queue p0, cl_mem p1, const void* p2, size_t p3, size_t p4, size_t p5, cl_uint p6, const cl_event* p7, cl_event* p8) { return clEnqueueFillBuffer_pfn(p0, p1, p2, p3, p4, p5, p6, p7, p8); }$/;"	f
clEnqueueFillBuffer	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	84;"	d
clEnqueueFillBuffer	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	85;"	d
clEnqueueFillImage	core/opencl/runtime/autogenerated/opencl_core.hpp	157;"	d
clEnqueueFillImage	core/opencl/runtime/autogenerated/opencl_core.hpp	158;"	d
clEnqueueFillImage	core/opencl/runtime/autogenerated/opencl_core.hpp	35;"	d
clEnqueueFillImage	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	/^inline cl_int clEnqueueFillImage(cl_command_queue p0, cl_mem p1, const void* p2, const size_t* p3, const size_t* p4, cl_uint p5, const cl_event* p6, cl_event* p7) { return clEnqueueFillImage_pfn(p0, p1, p2, p3, p4, p5, p6, p7); }$/;"	f
clEnqueueFillImage	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	87;"	d
clEnqueueFillImage	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	88;"	d
clEnqueueMapBuffer	core/opencl/runtime/autogenerated/opencl_core.hpp	159;"	d
clEnqueueMapBuffer	core/opencl/runtime/autogenerated/opencl_core.hpp	160;"	d
clEnqueueMapBuffer	core/opencl/runtime/autogenerated/opencl_core.hpp	36;"	d
clEnqueueMapBuffer	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	/^inline void* clEnqueueMapBuffer(cl_command_queue p0, cl_mem p1, cl_bool p2, cl_map_flags p3, size_t p4, size_t p5, cl_uint p6, const cl_event* p7, cl_event* p8, cl_int* p9) { return clEnqueueMapBuffer_pfn(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9); }$/;"	f
clEnqueueMapBuffer	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	90;"	d
clEnqueueMapBuffer	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	91;"	d
clEnqueueMapImage	core/opencl/runtime/autogenerated/opencl_core.hpp	161;"	d
clEnqueueMapImage	core/opencl/runtime/autogenerated/opencl_core.hpp	162;"	d
clEnqueueMapImage	core/opencl/runtime/autogenerated/opencl_core.hpp	37;"	d
clEnqueueMapImage	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	/^inline void* clEnqueueMapImage(cl_command_queue p0, cl_mem p1, cl_bool p2, cl_map_flags p3, const size_t* p4, const size_t* p5, size_t* p6, size_t* p7, cl_uint p8, const cl_event* p9, cl_event* p10, cl_int* p11) { return clEnqueueMapImage_pfn(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11); }$/;"	f
clEnqueueMapImage	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	93;"	d
clEnqueueMapImage	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	94;"	d
clEnqueueMarker	core/opencl/runtime/autogenerated/opencl_core.hpp	163;"	d
clEnqueueMarker	core/opencl/runtime/autogenerated/opencl_core.hpp	164;"	d
clEnqueueMarker	core/opencl/runtime/autogenerated/opencl_core.hpp	38;"	d
clEnqueueMarker	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	/^inline cl_int clEnqueueMarker(cl_command_queue p0, cl_event* p1) { return clEnqueueMarker_pfn(p0, p1); }$/;"	f
clEnqueueMarker	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	96;"	d
clEnqueueMarker	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	97;"	d
clEnqueueMarkerWithWaitList	core/opencl/runtime/autogenerated/opencl_core.hpp	165;"	d
clEnqueueMarkerWithWaitList	core/opencl/runtime/autogenerated/opencl_core.hpp	166;"	d
clEnqueueMarkerWithWaitList	core/opencl/runtime/autogenerated/opencl_core.hpp	39;"	d
clEnqueueMarkerWithWaitList	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	/^inline cl_int clEnqueueMarkerWithWaitList(cl_command_queue p0, cl_uint p1, const cl_event* p2, cl_event* p3) { return clEnqueueMarkerWithWaitList_pfn(p0, p1, p2, p3); }$/;"	f
clEnqueueMarkerWithWaitList	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	100;"	d
clEnqueueMarkerWithWaitList	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	99;"	d
clEnqueueMigrateMemObjects	core/opencl/runtime/autogenerated/opencl_core.hpp	167;"	d
clEnqueueMigrateMemObjects	core/opencl/runtime/autogenerated/opencl_core.hpp	168;"	d
clEnqueueMigrateMemObjects	core/opencl/runtime/autogenerated/opencl_core.hpp	40;"	d
clEnqueueMigrateMemObjects	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	/^inline cl_int clEnqueueMigrateMemObjects(cl_command_queue p0, cl_uint p1, const cl_mem* p2, cl_mem_migration_flags p3, cl_uint p4, const cl_event* p5, cl_event* p6) { return clEnqueueMigrateMemObjects_pfn(p0, p1, p2, p3, p4, p5, p6); }$/;"	f
clEnqueueMigrateMemObjects	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	102;"	d
clEnqueueMigrateMemObjects	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	103;"	d
clEnqueueNDRangeKernel	core/opencl/runtime/autogenerated/opencl_core.hpp	169;"	d
clEnqueueNDRangeKernel	core/opencl/runtime/autogenerated/opencl_core.hpp	170;"	d
clEnqueueNDRangeKernel	core/opencl/runtime/autogenerated/opencl_core.hpp	41;"	d
clEnqueueNDRangeKernel	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	/^inline cl_int clEnqueueNDRangeKernel(cl_command_queue p0, cl_kernel p1, cl_uint p2, const size_t* p3, const size_t* p4, const size_t* p5, cl_uint p6, const cl_event* p7, cl_event* p8) { return clEnqueueNDRangeKernel_pfn(p0, p1, p2, p3, p4, p5, p6, p7, p8); }$/;"	f
clEnqueueNDRangeKernel	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	105;"	d
clEnqueueNDRangeKernel	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	106;"	d
clEnqueueNativeKernel	core/opencl/runtime/autogenerated/opencl_core.hpp	171;"	d
clEnqueueNativeKernel	core/opencl/runtime/autogenerated/opencl_core.hpp	172;"	d
clEnqueueNativeKernel	core/opencl/runtime/autogenerated/opencl_core.hpp	42;"	d
clEnqueueNativeKernel	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	/^inline cl_int clEnqueueNativeKernel(cl_command_queue p0, void (CL_CALLBACK*p1) (void*), void* p2, size_t p3, cl_uint p4, const cl_mem* p5, const void** p6, cl_uint p7, const cl_event* p8, cl_event* p9) { return clEnqueueNativeKernel_pfn(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9); }$/;"	f
clEnqueueNativeKernel	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	108;"	d
clEnqueueNativeKernel	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	109;"	d
clEnqueueReadBuffer	core/opencl/runtime/autogenerated/opencl_core.hpp	173;"	d
clEnqueueReadBuffer	core/opencl/runtime/autogenerated/opencl_core.hpp	174;"	d
clEnqueueReadBuffer	core/opencl/runtime/autogenerated/opencl_core.hpp	43;"	d
clEnqueueReadBuffer	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	/^inline cl_int clEnqueueReadBuffer(cl_command_queue p0, cl_mem p1, cl_bool p2, size_t p3, size_t p4, void* p5, cl_uint p6, const cl_event* p7, cl_event* p8) { return clEnqueueReadBuffer_pfn(p0, p1, p2, p3, p4, p5, p6, p7, p8); }$/;"	f
clEnqueueReadBuffer	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	111;"	d
clEnqueueReadBuffer	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	112;"	d
clEnqueueReadBufferRect	core/opencl/runtime/autogenerated/opencl_core.hpp	175;"	d
clEnqueueReadBufferRect	core/opencl/runtime/autogenerated/opencl_core.hpp	176;"	d
clEnqueueReadBufferRect	core/opencl/runtime/autogenerated/opencl_core.hpp	44;"	d
clEnqueueReadBufferRect	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	/^inline cl_int clEnqueueReadBufferRect(cl_command_queue p0, cl_mem p1, cl_bool p2, const size_t* p3, const size_t* p4, const size_t* p5, size_t p6, size_t p7, size_t p8, size_t p9, void* p10, cl_uint p11, const cl_event* p12, cl_event* p13) { return clEnqueueReadBufferRect_pfn(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13); }$/;"	f
clEnqueueReadBufferRect	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	114;"	d
clEnqueueReadBufferRect	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	115;"	d
clEnqueueReadImage	core/opencl/runtime/autogenerated/opencl_core.hpp	177;"	d
clEnqueueReadImage	core/opencl/runtime/autogenerated/opencl_core.hpp	178;"	d
clEnqueueReadImage	core/opencl/runtime/autogenerated/opencl_core.hpp	45;"	d
clEnqueueReadImage	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	/^inline cl_int clEnqueueReadImage(cl_command_queue p0, cl_mem p1, cl_bool p2, const size_t* p3, const size_t* p4, size_t p5, size_t p6, void* p7, cl_uint p8, const cl_event* p9, cl_event* p10) { return clEnqueueReadImage_pfn(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10); }$/;"	f
clEnqueueReadImage	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	117;"	d
clEnqueueReadImage	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	118;"	d
clEnqueueSVMFree	core/opencl/runtime/opencl_core.hpp	70;"	d
clEnqueueSVMFree	core/opencl/runtime/opencl_svm_20.hpp	21;"	d
clEnqueueSVMMap	core/opencl/runtime/opencl_core.hpp	73;"	d
clEnqueueSVMMap	core/opencl/runtime/opencl_svm_20.hpp	27;"	d
clEnqueueSVMMap	core/opencl/runtime/opencl_svm_20.hpp	28;"	d
clEnqueueSVMMemFill	core/opencl/runtime/opencl_core.hpp	72;"	d
clEnqueueSVMMemFill	core/opencl/runtime/opencl_svm_20.hpp	25;"	d
clEnqueueSVMMemFill	core/opencl/runtime/opencl_svm_20.hpp	26;"	d
clEnqueueSVMMemcpy	core/opencl/runtime/opencl_core.hpp	71;"	d
clEnqueueSVMMemcpy	core/opencl/runtime/opencl_svm_20.hpp	23;"	d
clEnqueueSVMMemcpy	core/opencl/runtime/opencl_svm_20.hpp	24;"	d
clEnqueueSVMUnmap	core/opencl/runtime/opencl_core.hpp	74;"	d
clEnqueueSVMUnmap	core/opencl/runtime/opencl_svm_20.hpp	29;"	d
clEnqueueSVMUnmap	core/opencl/runtime/opencl_svm_20.hpp	30;"	d
clEnqueueTask	core/opencl/runtime/autogenerated/opencl_core.hpp	179;"	d
clEnqueueTask	core/opencl/runtime/autogenerated/opencl_core.hpp	180;"	d
clEnqueueTask	core/opencl/runtime/autogenerated/opencl_core.hpp	46;"	d
clEnqueueTask	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	/^inline cl_int clEnqueueTask(cl_command_queue p0, cl_kernel p1, cl_uint p2, const cl_event* p3, cl_event* p4) { return clEnqueueTask_pfn(p0, p1, p2, p3, p4); }$/;"	f
clEnqueueTask	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	120;"	d
clEnqueueTask	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	121;"	d
clEnqueueUnmapMemObject	core/opencl/runtime/autogenerated/opencl_core.hpp	181;"	d
clEnqueueUnmapMemObject	core/opencl/runtime/autogenerated/opencl_core.hpp	182;"	d
clEnqueueUnmapMemObject	core/opencl/runtime/autogenerated/opencl_core.hpp	47;"	d
clEnqueueUnmapMemObject	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	/^inline cl_int clEnqueueUnmapMemObject(cl_command_queue p0, cl_mem p1, void* p2, cl_uint p3, const cl_event* p4, cl_event* p5) { return clEnqueueUnmapMemObject_pfn(p0, p1, p2, p3, p4, p5); }$/;"	f
clEnqueueUnmapMemObject	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	123;"	d
clEnqueueUnmapMemObject	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	124;"	d
clEnqueueWaitForEvents	core/opencl/runtime/autogenerated/opencl_core.hpp	183;"	d
clEnqueueWaitForEvents	core/opencl/runtime/autogenerated/opencl_core.hpp	184;"	d
clEnqueueWaitForEvents	core/opencl/runtime/autogenerated/opencl_core.hpp	48;"	d
clEnqueueWaitForEvents	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	/^inline cl_int clEnqueueWaitForEvents(cl_command_queue p0, cl_uint p1, const cl_event* p2) { return clEnqueueWaitForEvents_pfn(p0, p1, p2); }$/;"	f
clEnqueueWaitForEvents	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	126;"	d
clEnqueueWaitForEvents	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	127;"	d
clEnqueueWriteBuffer	core/opencl/runtime/autogenerated/opencl_core.hpp	185;"	d
clEnqueueWriteBuffer	core/opencl/runtime/autogenerated/opencl_core.hpp	186;"	d
clEnqueueWriteBuffer	core/opencl/runtime/autogenerated/opencl_core.hpp	49;"	d
clEnqueueWriteBuffer	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	/^inline cl_int clEnqueueWriteBuffer(cl_command_queue p0, cl_mem p1, cl_bool p2, size_t p3, size_t p4, const void* p5, cl_uint p6, const cl_event* p7, cl_event* p8) { return clEnqueueWriteBuffer_pfn(p0, p1, p2, p3, p4, p5, p6, p7, p8); }$/;"	f
clEnqueueWriteBuffer	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	129;"	d
clEnqueueWriteBuffer	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	130;"	d
clEnqueueWriteBufferRect	core/opencl/runtime/autogenerated/opencl_core.hpp	187;"	d
clEnqueueWriteBufferRect	core/opencl/runtime/autogenerated/opencl_core.hpp	188;"	d
clEnqueueWriteBufferRect	core/opencl/runtime/autogenerated/opencl_core.hpp	50;"	d
clEnqueueWriteBufferRect	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	/^inline cl_int clEnqueueWriteBufferRect(cl_command_queue p0, cl_mem p1, cl_bool p2, const size_t* p3, const size_t* p4, const size_t* p5, size_t p6, size_t p7, size_t p8, size_t p9, const void* p10, cl_uint p11, const cl_event* p12, cl_event* p13) { return clEnqueueWriteBufferRect_pfn(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13); }$/;"	f
clEnqueueWriteBufferRect	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	132;"	d
clEnqueueWriteBufferRect	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	133;"	d
clEnqueueWriteImage	core/opencl/runtime/autogenerated/opencl_core.hpp	189;"	d
clEnqueueWriteImage	core/opencl/runtime/autogenerated/opencl_core.hpp	190;"	d
clEnqueueWriteImage	core/opencl/runtime/autogenerated/opencl_core.hpp	51;"	d
clEnqueueWriteImage	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	/^inline cl_int clEnqueueWriteImage(cl_command_queue p0, cl_mem p1, cl_bool p2, const size_t* p3, const size_t* p4, size_t p5, size_t p6, const void* p7, cl_uint p8, const cl_event* p9, cl_event* p10) { return clEnqueueWriteImage_pfn(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10); }$/;"	f
clEnqueueWriteImage	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	135;"	d
clEnqueueWriteImage	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	136;"	d
clFinish	core/opencl/runtime/autogenerated/opencl_core.hpp	191;"	d
clFinish	core/opencl/runtime/autogenerated/opencl_core.hpp	192;"	d
clFinish	core/opencl/runtime/autogenerated/opencl_core.hpp	52;"	d
clFinish	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	/^inline cl_int clFinish(cl_command_queue p0) { return clFinish_pfn(p0); }$/;"	f
clFinish	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	138;"	d
clFinish	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	139;"	d
clFlush	core/opencl/runtime/autogenerated/opencl_core.hpp	193;"	d
clFlush	core/opencl/runtime/autogenerated/opencl_core.hpp	194;"	d
clFlush	core/opencl/runtime/autogenerated/opencl_core.hpp	53;"	d
clFlush	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	/^inline cl_int clFlush(cl_command_queue p0) { return clFlush_pfn(p0); }$/;"	f
clFlush	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	141;"	d
clFlush	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	142;"	d
clGetCommandQueueInfo	core/opencl/runtime/autogenerated/opencl_core.hpp	195;"	d
clGetCommandQueueInfo	core/opencl/runtime/autogenerated/opencl_core.hpp	196;"	d
clGetCommandQueueInfo	core/opencl/runtime/autogenerated/opencl_core.hpp	54;"	d
clGetCommandQueueInfo	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	/^inline cl_int clGetCommandQueueInfo(cl_command_queue p0, cl_command_queue_info p1, size_t p2, void* p3, size_t* p4) { return clGetCommandQueueInfo_pfn(p0, p1, p2, p3, p4); }$/;"	f
clGetCommandQueueInfo	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	144;"	d
clGetCommandQueueInfo	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	145;"	d
clGetContextInfo	core/opencl/runtime/autogenerated/opencl_core.hpp	197;"	d
clGetContextInfo	core/opencl/runtime/autogenerated/opencl_core.hpp	198;"	d
clGetContextInfo	core/opencl/runtime/autogenerated/opencl_core.hpp	55;"	d
clGetContextInfo	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	/^inline cl_int clGetContextInfo(cl_context p0, cl_context_info p1, size_t p2, void* p3, size_t* p4) { return clGetContextInfo_pfn(p0, p1, p2, p3, p4); }$/;"	f
clGetContextInfo	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	147;"	d
clGetContextInfo	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	148;"	d
clGetDeviceIDs	core/opencl/runtime/autogenerated/opencl_core.hpp	199;"	d
clGetDeviceIDs	core/opencl/runtime/autogenerated/opencl_core.hpp	200;"	d
clGetDeviceIDs	core/opencl/runtime/autogenerated/opencl_core.hpp	56;"	d
clGetDeviceIDs	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	/^inline cl_int clGetDeviceIDs(cl_platform_id p0, cl_device_type p1, cl_uint p2, cl_device_id* p3, cl_uint* p4) { return clGetDeviceIDs_pfn(p0, p1, p2, p3, p4); }$/;"	f
clGetDeviceIDs	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	150;"	d
clGetDeviceIDs	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	151;"	d
clGetDeviceInfo	core/opencl/runtime/autogenerated/opencl_core.hpp	201;"	d
clGetDeviceInfo	core/opencl/runtime/autogenerated/opencl_core.hpp	202;"	d
clGetDeviceInfo	core/opencl/runtime/autogenerated/opencl_core.hpp	57;"	d
clGetDeviceInfo	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	/^inline cl_int clGetDeviceInfo(cl_device_id p0, cl_device_info p1, size_t p2, void* p3, size_t* p4) { return clGetDeviceInfo_pfn(p0, p1, p2, p3, p4); }$/;"	f
clGetDeviceInfo	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	153;"	d
clGetDeviceInfo	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	154;"	d
clGetEventInfo	core/opencl/runtime/autogenerated/opencl_core.hpp	203;"	d
clGetEventInfo	core/opencl/runtime/autogenerated/opencl_core.hpp	204;"	d
clGetEventInfo	core/opencl/runtime/autogenerated/opencl_core.hpp	58;"	d
clGetEventInfo	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	/^inline cl_int clGetEventInfo(cl_event p0, cl_event_info p1, size_t p2, void* p3, size_t* p4) { return clGetEventInfo_pfn(p0, p1, p2, p3, p4); }$/;"	f
clGetEventInfo	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	156;"	d
clGetEventInfo	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	157;"	d
clGetEventProfilingInfo	core/opencl/runtime/autogenerated/opencl_core.hpp	205;"	d
clGetEventProfilingInfo	core/opencl/runtime/autogenerated/opencl_core.hpp	206;"	d
clGetEventProfilingInfo	core/opencl/runtime/autogenerated/opencl_core.hpp	59;"	d
clGetEventProfilingInfo	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	/^inline cl_int clGetEventProfilingInfo(cl_event p0, cl_profiling_info p1, size_t p2, void* p3, size_t* p4) { return clGetEventProfilingInfo_pfn(p0, p1, p2, p3, p4); }$/;"	f
clGetEventProfilingInfo	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	159;"	d
clGetEventProfilingInfo	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	160;"	d
clGetExtensionFunctionAddress	core/opencl/runtime/autogenerated/opencl_core.hpp	207;"	d
clGetExtensionFunctionAddress	core/opencl/runtime/autogenerated/opencl_core.hpp	208;"	d
clGetExtensionFunctionAddress	core/opencl/runtime/autogenerated/opencl_core.hpp	60;"	d
clGetExtensionFunctionAddress	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	/^inline void* clGetExtensionFunctionAddress(const char* p0) { return clGetExtensionFunctionAddress_pfn(p0); }$/;"	f
clGetExtensionFunctionAddress	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	162;"	d
clGetExtensionFunctionAddress	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	163;"	d
clGetExtensionFunctionAddressForPlatform	core/opencl/runtime/autogenerated/opencl_core.hpp	209;"	d
clGetExtensionFunctionAddressForPlatform	core/opencl/runtime/autogenerated/opencl_core.hpp	210;"	d
clGetExtensionFunctionAddressForPlatform	core/opencl/runtime/autogenerated/opencl_core.hpp	61;"	d
clGetExtensionFunctionAddressForPlatform	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	/^inline void* clGetExtensionFunctionAddressForPlatform(cl_platform_id p0, const char* p1) { return clGetExtensionFunctionAddressForPlatform_pfn(p0, p1); }$/;"	f
clGetExtensionFunctionAddressForPlatform	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	165;"	d
clGetExtensionFunctionAddressForPlatform	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	166;"	d
clGetImageInfo	core/opencl/runtime/autogenerated/opencl_core.hpp	211;"	d
clGetImageInfo	core/opencl/runtime/autogenerated/opencl_core.hpp	212;"	d
clGetImageInfo	core/opencl/runtime/autogenerated/opencl_core.hpp	62;"	d
clGetImageInfo	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	/^inline cl_int clGetImageInfo(cl_mem p0, cl_image_info p1, size_t p2, void* p3, size_t* p4) { return clGetImageInfo_pfn(p0, p1, p2, p3, p4); }$/;"	f
clGetImageInfo	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	168;"	d
clGetImageInfo	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	169;"	d
clGetKernelArgInfo	core/opencl/runtime/autogenerated/opencl_core.hpp	213;"	d
clGetKernelArgInfo	core/opencl/runtime/autogenerated/opencl_core.hpp	214;"	d
clGetKernelArgInfo	core/opencl/runtime/autogenerated/opencl_core.hpp	63;"	d
clGetKernelArgInfo	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	/^inline cl_int clGetKernelArgInfo(cl_kernel p0, cl_uint p1, cl_kernel_arg_info p2, size_t p3, void* p4, size_t* p5) { return clGetKernelArgInfo_pfn(p0, p1, p2, p3, p4, p5); }$/;"	f
clGetKernelArgInfo	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	171;"	d
clGetKernelArgInfo	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	172;"	d
clGetKernelInfo	core/opencl/runtime/autogenerated/opencl_core.hpp	215;"	d
clGetKernelInfo	core/opencl/runtime/autogenerated/opencl_core.hpp	216;"	d
clGetKernelInfo	core/opencl/runtime/autogenerated/opencl_core.hpp	64;"	d
clGetKernelInfo	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	/^inline cl_int clGetKernelInfo(cl_kernel p0, cl_kernel_info p1, size_t p2, void* p3, size_t* p4) { return clGetKernelInfo_pfn(p0, p1, p2, p3, p4); }$/;"	f
clGetKernelInfo	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	174;"	d
clGetKernelInfo	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	175;"	d
clGetKernelWorkGroupInfo	core/opencl/runtime/autogenerated/opencl_core.hpp	217;"	d
clGetKernelWorkGroupInfo	core/opencl/runtime/autogenerated/opencl_core.hpp	218;"	d
clGetKernelWorkGroupInfo	core/opencl/runtime/autogenerated/opencl_core.hpp	65;"	d
clGetKernelWorkGroupInfo	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	/^inline cl_int clGetKernelWorkGroupInfo(cl_kernel p0, cl_device_id p1, cl_kernel_work_group_info p2, size_t p3, void* p4, size_t* p5) { return clGetKernelWorkGroupInfo_pfn(p0, p1, p2, p3, p4, p5); }$/;"	f
clGetKernelWorkGroupInfo	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	177;"	d
clGetKernelWorkGroupInfo	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	178;"	d
clGetMemObjectInfo	core/opencl/runtime/autogenerated/opencl_core.hpp	219;"	d
clGetMemObjectInfo	core/opencl/runtime/autogenerated/opencl_core.hpp	220;"	d
clGetMemObjectInfo	core/opencl/runtime/autogenerated/opencl_core.hpp	66;"	d
clGetMemObjectInfo	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	/^inline cl_int clGetMemObjectInfo(cl_mem p0, cl_mem_info p1, size_t p2, void* p3, size_t* p4) { return clGetMemObjectInfo_pfn(p0, p1, p2, p3, p4); }$/;"	f
clGetMemObjectInfo	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	180;"	d
clGetMemObjectInfo	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	181;"	d
clGetPlatformIDs	core/opencl/runtime/autogenerated/opencl_core.hpp	221;"	d
clGetPlatformIDs	core/opencl/runtime/autogenerated/opencl_core.hpp	222;"	d
clGetPlatformIDs	core/opencl/runtime/autogenerated/opencl_core.hpp	67;"	d
clGetPlatformIDs	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	/^inline cl_int clGetPlatformIDs(cl_uint p0, cl_platform_id* p1, cl_uint* p2) { return clGetPlatformIDs_pfn(p0, p1, p2); }$/;"	f
clGetPlatformIDs	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	183;"	d
clGetPlatformIDs	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	184;"	d
clGetPlatformInfo	core/opencl/runtime/autogenerated/opencl_core.hpp	223;"	d
clGetPlatformInfo	core/opencl/runtime/autogenerated/opencl_core.hpp	224;"	d
clGetPlatformInfo	core/opencl/runtime/autogenerated/opencl_core.hpp	68;"	d
clGetPlatformInfo	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	/^inline cl_int clGetPlatformInfo(cl_platform_id p0, cl_platform_info p1, size_t p2, void* p3, size_t* p4) { return clGetPlatformInfo_pfn(p0, p1, p2, p3, p4); }$/;"	f
clGetPlatformInfo	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	186;"	d
clGetPlatformInfo	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	187;"	d
clGetProgramBuildInfo	core/opencl/runtime/autogenerated/opencl_core.hpp	225;"	d
clGetProgramBuildInfo	core/opencl/runtime/autogenerated/opencl_core.hpp	226;"	d
clGetProgramBuildInfo	core/opencl/runtime/autogenerated/opencl_core.hpp	69;"	d
clGetProgramBuildInfo	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	/^inline cl_int clGetProgramBuildInfo(cl_program p0, cl_device_id p1, cl_program_build_info p2, size_t p3, void* p4, size_t* p5) { return clGetProgramBuildInfo_pfn(p0, p1, p2, p3, p4, p5); }$/;"	f
clGetProgramBuildInfo	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	189;"	d
clGetProgramBuildInfo	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	190;"	d
clGetProgramInfo	core/opencl/runtime/autogenerated/opencl_core.hpp	227;"	d
clGetProgramInfo	core/opencl/runtime/autogenerated/opencl_core.hpp	228;"	d
clGetProgramInfo	core/opencl/runtime/autogenerated/opencl_core.hpp	70;"	d
clGetProgramInfo	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	/^inline cl_int clGetProgramInfo(cl_program p0, cl_program_info p1, size_t p2, void* p3, size_t* p4) { return clGetProgramInfo_pfn(p0, p1, p2, p3, p4); }$/;"	f
clGetProgramInfo	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	192;"	d
clGetProgramInfo	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	193;"	d
clGetSamplerInfo	core/opencl/runtime/autogenerated/opencl_core.hpp	229;"	d
clGetSamplerInfo	core/opencl/runtime/autogenerated/opencl_core.hpp	230;"	d
clGetSamplerInfo	core/opencl/runtime/autogenerated/opencl_core.hpp	71;"	d
clGetSamplerInfo	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	/^inline cl_int clGetSamplerInfo(cl_sampler p0, cl_sampler_info p1, size_t p2, void* p3, size_t* p4) { return clGetSamplerInfo_pfn(p0, p1, p2, p3, p4); }$/;"	f
clGetSamplerInfo	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	195;"	d
clGetSamplerInfo	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	196;"	d
clGetSupportedImageFormats	core/opencl/runtime/autogenerated/opencl_core.hpp	231;"	d
clGetSupportedImageFormats	core/opencl/runtime/autogenerated/opencl_core.hpp	232;"	d
clGetSupportedImageFormats	core/opencl/runtime/autogenerated/opencl_core.hpp	72;"	d
clGetSupportedImageFormats	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	/^inline cl_int clGetSupportedImageFormats(cl_context p0, cl_mem_flags p1, cl_mem_object_type p2, cl_uint p3, cl_image_format* p4, cl_uint* p5) { return clGetSupportedImageFormats_pfn(p0, p1, p2, p3, p4, p5); }$/;"	f
clGetSupportedImageFormats	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	198;"	d
clGetSupportedImageFormats	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	199;"	d
clLinkProgram	core/opencl/runtime/autogenerated/opencl_core.hpp	233;"	d
clLinkProgram	core/opencl/runtime/autogenerated/opencl_core.hpp	234;"	d
clLinkProgram	core/opencl/runtime/autogenerated/opencl_core.hpp	73;"	d
clLinkProgram	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	/^inline cl_program clLinkProgram(cl_context p0, cl_uint p1, const cl_device_id* p2, const char* p3, cl_uint p4, const cl_program* p5, void (CL_CALLBACK*p6) (cl_program, void*), void* p7, cl_int* p8) { return clLinkProgram_pfn(p0, p1, p2, p3, p4, p5, p6, p7, p8); }$/;"	f
clLinkProgram	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	201;"	d
clLinkProgram	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	202;"	d
clReleaseCommandQueue	core/opencl/runtime/autogenerated/opencl_core.hpp	235;"	d
clReleaseCommandQueue	core/opencl/runtime/autogenerated/opencl_core.hpp	236;"	d
clReleaseCommandQueue	core/opencl/runtime/autogenerated/opencl_core.hpp	74;"	d
clReleaseCommandQueue	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	/^inline cl_int clReleaseCommandQueue(cl_command_queue p0) { return clReleaseCommandQueue_pfn(p0); }$/;"	f
clReleaseCommandQueue	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	204;"	d
clReleaseCommandQueue	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	205;"	d
clReleaseContext	core/opencl/runtime/autogenerated/opencl_core.hpp	237;"	d
clReleaseContext	core/opencl/runtime/autogenerated/opencl_core.hpp	238;"	d
clReleaseContext	core/opencl/runtime/autogenerated/opencl_core.hpp	75;"	d
clReleaseContext	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	/^inline cl_int clReleaseContext(cl_context p0) { return clReleaseContext_pfn(p0); }$/;"	f
clReleaseContext	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	207;"	d
clReleaseContext	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	208;"	d
clReleaseDevice	core/opencl/runtime/autogenerated/opencl_core.hpp	239;"	d
clReleaseDevice	core/opencl/runtime/autogenerated/opencl_core.hpp	240;"	d
clReleaseDevice	core/opencl/runtime/autogenerated/opencl_core.hpp	76;"	d
clReleaseDevice	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	/^inline cl_int clReleaseDevice(cl_device_id p0) { return clReleaseDevice_pfn(p0); }$/;"	f
clReleaseDevice	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	210;"	d
clReleaseDevice	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	211;"	d
clReleaseEvent	core/opencl/runtime/autogenerated/opencl_core.hpp	241;"	d
clReleaseEvent	core/opencl/runtime/autogenerated/opencl_core.hpp	242;"	d
clReleaseEvent	core/opencl/runtime/autogenerated/opencl_core.hpp	77;"	d
clReleaseEvent	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	/^inline cl_int clReleaseEvent(cl_event p0) { return clReleaseEvent_pfn(p0); }$/;"	f
clReleaseEvent	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	213;"	d
clReleaseEvent	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	214;"	d
clReleaseKernel	core/opencl/runtime/autogenerated/opencl_core.hpp	243;"	d
clReleaseKernel	core/opencl/runtime/autogenerated/opencl_core.hpp	244;"	d
clReleaseKernel	core/opencl/runtime/autogenerated/opencl_core.hpp	78;"	d
clReleaseKernel	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	/^inline cl_int clReleaseKernel(cl_kernel p0) { return clReleaseKernel_pfn(p0); }$/;"	f
clReleaseKernel	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	216;"	d
clReleaseKernel	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	217;"	d
clReleaseMemObject	core/opencl/runtime/autogenerated/opencl_core.hpp	245;"	d
clReleaseMemObject	core/opencl/runtime/autogenerated/opencl_core.hpp	246;"	d
clReleaseMemObject	core/opencl/runtime/autogenerated/opencl_core.hpp	79;"	d
clReleaseMemObject	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	/^inline cl_int clReleaseMemObject(cl_mem p0) { return clReleaseMemObject_pfn(p0); }$/;"	f
clReleaseMemObject	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	219;"	d
clReleaseMemObject	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	220;"	d
clReleaseProgram	core/opencl/runtime/autogenerated/opencl_core.hpp	247;"	d
clReleaseProgram	core/opencl/runtime/autogenerated/opencl_core.hpp	248;"	d
clReleaseProgram	core/opencl/runtime/autogenerated/opencl_core.hpp	80;"	d
clReleaseProgram	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	/^inline cl_int clReleaseProgram(cl_program p0) { return clReleaseProgram_pfn(p0); }$/;"	f
clReleaseProgram	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	222;"	d
clReleaseProgram	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	223;"	d
clReleaseSampler	core/opencl/runtime/autogenerated/opencl_core.hpp	249;"	d
clReleaseSampler	core/opencl/runtime/autogenerated/opencl_core.hpp	250;"	d
clReleaseSampler	core/opencl/runtime/autogenerated/opencl_core.hpp	81;"	d
clReleaseSampler	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	/^inline cl_int clReleaseSampler(cl_sampler p0) { return clReleaseSampler_pfn(p0); }$/;"	f
clReleaseSampler	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	225;"	d
clReleaseSampler	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	226;"	d
clRetainCommandQueue	core/opencl/runtime/autogenerated/opencl_core.hpp	251;"	d
clRetainCommandQueue	core/opencl/runtime/autogenerated/opencl_core.hpp	252;"	d
clRetainCommandQueue	core/opencl/runtime/autogenerated/opencl_core.hpp	82;"	d
clRetainCommandQueue	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	/^inline cl_int clRetainCommandQueue(cl_command_queue p0) { return clRetainCommandQueue_pfn(p0); }$/;"	f
clRetainCommandQueue	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	228;"	d
clRetainCommandQueue	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	229;"	d
clRetainContext	core/opencl/runtime/autogenerated/opencl_core.hpp	253;"	d
clRetainContext	core/opencl/runtime/autogenerated/opencl_core.hpp	254;"	d
clRetainContext	core/opencl/runtime/autogenerated/opencl_core.hpp	83;"	d
clRetainContext	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	/^inline cl_int clRetainContext(cl_context p0) { return clRetainContext_pfn(p0); }$/;"	f
clRetainContext	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	231;"	d
clRetainContext	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	232;"	d
clRetainDevice	core/opencl/runtime/autogenerated/opencl_core.hpp	255;"	d
clRetainDevice	core/opencl/runtime/autogenerated/opencl_core.hpp	256;"	d
clRetainDevice	core/opencl/runtime/autogenerated/opencl_core.hpp	84;"	d
clRetainDevice	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	/^inline cl_int clRetainDevice(cl_device_id p0) { return clRetainDevice_pfn(p0); }$/;"	f
clRetainDevice	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	234;"	d
clRetainDevice	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	235;"	d
clRetainEvent	core/opencl/runtime/autogenerated/opencl_core.hpp	257;"	d
clRetainEvent	core/opencl/runtime/autogenerated/opencl_core.hpp	258;"	d
clRetainEvent	core/opencl/runtime/autogenerated/opencl_core.hpp	85;"	d
clRetainEvent	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	/^inline cl_int clRetainEvent(cl_event p0) { return clRetainEvent_pfn(p0); }$/;"	f
clRetainEvent	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	237;"	d
clRetainEvent	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	238;"	d
clRetainKernel	core/opencl/runtime/autogenerated/opencl_core.hpp	259;"	d
clRetainKernel	core/opencl/runtime/autogenerated/opencl_core.hpp	260;"	d
clRetainKernel	core/opencl/runtime/autogenerated/opencl_core.hpp	86;"	d
clRetainKernel	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	/^inline cl_int clRetainKernel(cl_kernel p0) { return clRetainKernel_pfn(p0); }$/;"	f
clRetainKernel	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	240;"	d
clRetainKernel	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	241;"	d
clRetainMemObject	core/opencl/runtime/autogenerated/opencl_core.hpp	261;"	d
clRetainMemObject	core/opencl/runtime/autogenerated/opencl_core.hpp	262;"	d
clRetainMemObject	core/opencl/runtime/autogenerated/opencl_core.hpp	87;"	d
clRetainMemObject	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	/^inline cl_int clRetainMemObject(cl_mem p0) { return clRetainMemObject_pfn(p0); }$/;"	f
clRetainMemObject	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	243;"	d
clRetainMemObject	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	244;"	d
clRetainProgram	core/opencl/runtime/autogenerated/opencl_core.hpp	263;"	d
clRetainProgram	core/opencl/runtime/autogenerated/opencl_core.hpp	264;"	d
clRetainProgram	core/opencl/runtime/autogenerated/opencl_core.hpp	88;"	d
clRetainProgram	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	/^inline cl_int clRetainProgram(cl_program p0) { return clRetainProgram_pfn(p0); }$/;"	f
clRetainProgram	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	246;"	d
clRetainProgram	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	247;"	d
clRetainSampler	core/opencl/runtime/autogenerated/opencl_core.hpp	265;"	d
clRetainSampler	core/opencl/runtime/autogenerated/opencl_core.hpp	266;"	d
clRetainSampler	core/opencl/runtime/autogenerated/opencl_core.hpp	89;"	d
clRetainSampler	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	/^inline cl_int clRetainSampler(cl_sampler p0) { return clRetainSampler_pfn(p0); }$/;"	f
clRetainSampler	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	249;"	d
clRetainSampler	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	250;"	d
clSVMAlloc	core/opencl/runtime/opencl_core.hpp	66;"	d
clSVMAlloc	core/opencl/runtime/opencl_svm_20.hpp	13;"	d
clSVMAlloc	core/opencl/runtime/opencl_svm_20.hpp	14;"	d
clSVMFree	core/opencl/runtime/opencl_core.hpp	67;"	d
clSVMFree	core/opencl/runtime/opencl_svm_20.hpp	15;"	d
clSVMFree	core/opencl/runtime/opencl_svm_20.hpp	16;"	d
clSetEventCallback	core/opencl/runtime/autogenerated/opencl_core.hpp	267;"	d
clSetEventCallback	core/opencl/runtime/autogenerated/opencl_core.hpp	268;"	d
clSetEventCallback	core/opencl/runtime/autogenerated/opencl_core.hpp	90;"	d
clSetEventCallback	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	/^inline cl_int clSetEventCallback(cl_event p0, cl_int p1, void (CL_CALLBACK*p2) (cl_event, cl_int, void*), void* p3) { return clSetEventCallback_pfn(p0, p1, p2, p3); }$/;"	f
clSetEventCallback	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	252;"	d
clSetEventCallback	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	253;"	d
clSetKernelArg	core/opencl/runtime/autogenerated/opencl_core.hpp	269;"	d
clSetKernelArg	core/opencl/runtime/autogenerated/opencl_core.hpp	270;"	d
clSetKernelArg	core/opencl/runtime/autogenerated/opencl_core.hpp	91;"	d
clSetKernelArg	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	/^inline cl_int clSetKernelArg(cl_kernel p0, cl_uint p1, size_t p2, const void* p3) { return clSetKernelArg_pfn(p0, p1, p2, p3); }$/;"	f
clSetKernelArg	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	255;"	d
clSetKernelArg	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	256;"	d
clSetKernelArgSVMPointer	core/opencl/runtime/opencl_core.hpp	68;"	d
clSetKernelArgSVMPointer	core/opencl/runtime/opencl_svm_20.hpp	17;"	d
clSetKernelArgSVMPointer	core/opencl/runtime/opencl_svm_20.hpp	18;"	d
clSetKernelExecInfo	core/opencl/runtime/opencl_core.hpp	69;"	d
clSetKernelExecInfo	core/opencl/runtime/opencl_svm_20.hpp	19;"	d
clSetMemObjectDestructorCallback	core/opencl/runtime/autogenerated/opencl_core.hpp	271;"	d
clSetMemObjectDestructorCallback	core/opencl/runtime/autogenerated/opencl_core.hpp	272;"	d
clSetMemObjectDestructorCallback	core/opencl/runtime/autogenerated/opencl_core.hpp	92;"	d
clSetMemObjectDestructorCallback	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	/^inline cl_int clSetMemObjectDestructorCallback(cl_mem p0, void (CL_CALLBACK*p1) (cl_mem, void*), void* p2) { return clSetMemObjectDestructorCallback_pfn(p0, p1, p2); }$/;"	f
clSetMemObjectDestructorCallback	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	258;"	d
clSetMemObjectDestructorCallback	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	259;"	d
clSetUserEventStatus	core/opencl/runtime/autogenerated/opencl_core.hpp	273;"	d
clSetUserEventStatus	core/opencl/runtime/autogenerated/opencl_core.hpp	274;"	d
clSetUserEventStatus	core/opencl/runtime/autogenerated/opencl_core.hpp	93;"	d
clSetUserEventStatus	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	/^inline cl_int clSetUserEventStatus(cl_event p0, cl_int p1) { return clSetUserEventStatus_pfn(p0, p1); }$/;"	f
clSetUserEventStatus	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	261;"	d
clSetUserEventStatus	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	262;"	d
clUnloadCompiler	core/opencl/runtime/autogenerated/opencl_core.hpp	275;"	d
clUnloadCompiler	core/opencl/runtime/autogenerated/opencl_core.hpp	276;"	d
clUnloadCompiler	core/opencl/runtime/autogenerated/opencl_core.hpp	94;"	d
clUnloadCompiler	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	/^inline cl_int clUnloadCompiler() { return clUnloadCompiler_pfn(); }$/;"	f
clUnloadCompiler	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	264;"	d
clUnloadCompiler	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	265;"	d
clUnloadPlatformCompiler	core/opencl/runtime/autogenerated/opencl_core.hpp	277;"	d
clUnloadPlatformCompiler	core/opencl/runtime/autogenerated/opencl_core.hpp	278;"	d
clUnloadPlatformCompiler	core/opencl/runtime/autogenerated/opencl_core.hpp	95;"	d
clUnloadPlatformCompiler	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	/^inline cl_int clUnloadPlatformCompiler(cl_platform_id p0) { return clUnloadPlatformCompiler_pfn(p0); }$/;"	f
clUnloadPlatformCompiler	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	267;"	d
clUnloadPlatformCompiler	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	268;"	d
clWaitForEvents	core/opencl/runtime/autogenerated/opencl_core.hpp	279;"	d
clWaitForEvents	core/opencl/runtime/autogenerated/opencl_core.hpp	280;"	d
clWaitForEvents	core/opencl/runtime/autogenerated/opencl_core.hpp	96;"	d
clWaitForEvents	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	/^inline cl_int clWaitForEvents(cl_uint p0, const cl_event* p1) { return clWaitForEvents_pfn(p0, p1); }$/;"	f
clWaitForEvents	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	270;"	d
clWaitForEvents	core/opencl/runtime/autogenerated/opencl_core_wrappers.hpp	271;"	d
cl_device_svm_capabilities	core/opencl/runtime/opencl_svm_definitions.hpp	/^typedef cl_bitfield cl_device_svm_capabilities;$/;"	t
cl_device_svm_capabilities_amd	core/opencl/runtime/opencl_svm_hsa_extension.hpp	/^typedef cl_bitfield                      cl_device_svm_capabilities_amd;$/;"	t
cl_kernel_exec_info	core/opencl/runtime/opencl_svm_definitions.hpp	/^typedef cl_uint     cl_kernel_exec_info;$/;"	t
cl_kernel_exec_info_amd	core/opencl/runtime/opencl_svm_hsa_extension.hpp	/^typedef cl_uint                          cl_kernel_exec_info_amd;$/;"	t
cl_svm_mem_flags	core/opencl/runtime/opencl_svm_definitions.hpp	/^typedef cl_bitfield cl_svm_mem_flags;$/;"	t
cl_svm_mem_flags_amd	core/opencl/runtime/opencl_svm_hsa_extension.hpp	/^typedef cl_bitfield                      cl_svm_mem_flags_amd;$/;"	t
classIdx	ml.hpp	/^        int classIdx; \/\/!< Class index normalized to 0..class_count-1 range and assigned to the$/;"	m	class:cv::ml::DTrees::Node
class_id	core/types.hpp	/^    CV_PROP_RW int class_id; \/\/!< object class (if the keypoints need to be clustered by an object they belong to)$/;"	m	class:cv::KeyPoint
classifier	objdetect/objdetect_c.h	/^    CvHaarClassifier* classifier;$/;"	m	struct:CvHaarStageClassifier
clear	core.hpp	/^    CV_WRAP virtual void clear() {}$/;"	f	class:cv::Algorithm
clear	core/core_c.h	/^template<typename _Tp> inline void Seq<_Tp>::clear()$/;"	f	class:cv::Seq
clear	core/cvstd.hpp	/^void String::clear()$/;"	f	class:cv::String
clear	cudalegacy/NCV.hpp	/^    void clear()$/;"	f	class:NCVMatrix
clear	cudalegacy/NCV.hpp	/^    void clear()$/;"	f	class:NCVVector
clear	flann/dynamic_bitset.h	/^    void clear()$/;"	f	class:cvflann::DynamicBitset
clear	flann/heap.h	/^    void clear()$/;"	f	class:cvflann::Heap
clear	flann/result_set.h	/^    inline void clear()$/;"	f	class:cvflann::RadiusUniqueResultSet
clear	flann/result_set.h	/^    void clear()$/;"	f	class:cvflann::KNNRadiusUniqueResultSet
clear	flann/result_set.h	/^    void clear()$/;"	f	class:cvflann::KNNUniqueResultSet
clipInt	ts.hpp	/^inline int clipInt( int val, int min_val, int max_val )$/;"	f	namespace:cvtest
clip_	viz/types.hpp	/^            Vec2d clip_;$/;"	m	class:cv::viz::Camera
clone	core/cuda.inl.hpp	/^GpuMat GpuMat::clone() const$/;"	f	class:cv::cuda::GpuMat
clone	core/cuda.inl.hpp	/^HostMem HostMem::clone() const$/;"	f	class:cv::cuda::HostMem
clone	core/mat.inl.hpp	/^Mat Mat::clone() const$/;"	f	class:cv::Mat
clone	core/mat.inl.hpp	/^Mat_<_Tp> Mat_<_Tp>::clone() const$/;"	f	class:cv::Mat_
clone	core/mat.inl.hpp	/^SparseMat SparseMat::clone() const$/;"	f	class:cv::SparseMat
clone	core/mat.inl.hpp	/^SparseMat_<_Tp> SparseMat_<_Tp>::clone() const$/;"	f	class:cv::SparseMat_
clone	core/mat.inl.hpp	/^UMat UMat::clone() const$/;"	f	class:cv::UMat
clone	core/types_c.h	/^    CvCloneFunc clone; \/**< creates a copy of the object *\/$/;"	m	struct:CvTypeInfo
clone	cudev/ptr2d/detail/gpumat.hpp	/^__host__ GpuMat_<T> GpuMat_<T>::clone() const$/;"	f	class:cv::cudev::GpuMat_
clone	flann/any.h	/^    virtual void clone(void* const* src, void** dest) { *dest = *src; }$/;"	f	struct:cvflann::anyimpl::small_any_policy
clone	flann/any.h	/^    virtual void clone(void* const* src, void** dest)$/;"	f	struct:cvflann::anyimpl::big_any_policy
clone_op	features2d.hpp	/^    static Mat clone_op( Mat m ) { return m.clone(); }$/;"	f	class:cv::DescriptorMatcher
cloud	viz/types.hpp	/^            Mat cloud, colors, normals;$/;"	m	class:cv::viz::Mesh
clusterCount	features2d.hpp	/^    int clusterCount;$/;"	m	class:cv::BOWKMeansTrainer
cn	core/cuda/vec_traits.hpp	/^        enum {cn=1};$/;"	e	enum:cv::cuda::device::VecTraits::__anon246
cn	core/cuda/vec_traits.hpp	/^        enum {cn=1};$/;"	e	enum:cv::cuda::device::VecTraits::__anon247
cn	core/cuda/vec_traits.hpp	/^        enum {cn=1};$/;"	e	enum:cv::cuda::device::VecTraits::__anon248
cn	core/cuda/vec_traits.hpp	/^        enum {cn=2};$/;"	e	enum:cv::cuda::device::VecTraits::__anon249
cn	core/cuda/vec_traits.hpp	/^        enum {cn=3};$/;"	e	enum:cv::cuda::device::VecTraits::__anon250
cn	core/cuda/vec_traits.hpp	/^        enum {cn=4};$/;"	e	enum:cv::cuda::device::VecTraits::__anon251
cn	core/cuda/vec_traits.hpp	/^        enum {cn=8};$/;"	e	enum:cv::cuda::device::VecTraits::__anon252
cn	cudev/grid/detail/reduce.hpp	/^        enum { cn = VecTraits<src_type>::cn };$/;"	e	enum:cv::cudev::grid_reduce_detail::SumReductor::__anon385
cn	cudev/util/vec_traits.hpp	/^    enum {cn=1};$/;"	e	enum:cv::cudev::VecTraits::__anon354
cn	cudev/util/vec_traits.hpp	/^    enum {cn=1};$/;"	e	enum:cv::cudev::VecTraits::__anon355
cn	cudev/util/vec_traits.hpp	/^    enum {cn=2};$/;"	e	enum:cv::cudev::VecTraits::__anon356
cn	cudev/util/vec_traits.hpp	/^    enum {cn=3};$/;"	e	enum:cv::cudev::VecTraits::__anon357
cn	cudev/util/vec_traits.hpp	/^    enum {cn=4};$/;"	e	enum:cv::cudev::VecTraits::__anon358
code	core.hpp	/^    int code; \/\/\/< error code @see CVStatus$/;"	m	class:cv::Exception
code	imgproc/types_c.h	/^    char      code;$/;"	m	struct:CvChainPtReader
code	ts.hpp	/^    int code;$/;"	m	struct:cvtest::TestInfo
code	ts/cuda_perf.hpp	/^        int code;$/;"	m	struct:perf::CvtColorInfo
code	viz/types.hpp	/^            unsigned char code;$/;"	m	class:cv::viz::KeyboardEvent
codec	cudacodec.hpp	/^    Codec codec;$/;"	m	struct:cv::cudacodec::FormatInfo
coeffObjectSizeToTrack	objdetect/detection_based_tracker.hpp	/^            float coeffObjectSizeToTrack;$/;"	m	struct:cv::DetectionBasedTracker::InnerParameters
coeffObjectSpeedUsingInPrediction	objdetect/detection_based_tracker.hpp	/^            float coeffObjectSpeedUsingInPrediction;$/;"	m	struct:cv::DetectionBasedTracker::InnerParameters
coeffTrackingWindowSize	objdetect/detection_based_tracker.hpp	/^            float coeffTrackingWindowSize;$/;"	m	struct:cv::DetectionBasedTracker::InnerParameters
coi	core/types_c.h	/^    int  coi; \/**< 0 - no COI (all channels are selected), 1 - 0th channel is selected ...*\/$/;"	m	struct:_IplROI
col	core/cuda.inl.hpp	/^GpuMat GpuMat::col(int x) const$/;"	f	class:cv::cuda::GpuMat
col	core/mat.inl.hpp	/^Mat Mat::col(int x) const$/;"	f	class:cv::Mat
col	core/mat.inl.hpp	/^Mat_<_Tp> Mat_<_Tp>::col(int x) const$/;"	f	class:cv::Mat_
col	core/mat.inl.hpp	/^UMat UMat::col(int x) const$/;"	f	class:cv::UMat
col	core/matx.hpp	/^Matx<_Tp, m, 1> Matx<_Tp, m, n>::col(int j) const$/;"	f	class:cv::Matx
col	cudev/ptr2d/detail/gpumat.hpp	/^__host__ GpuMat_<T> GpuMat_<T>::col(int x) const$/;"	f	class:cv::cudev::GpuMat_
colRange	core/cuda.inl.hpp	/^GpuMat GpuMat::colRange(Range r) const$/;"	f	class:cv::cuda::GpuMat
colRange	core/cuda.inl.hpp	/^GpuMat GpuMat::colRange(int startcol, int endcol) const$/;"	f	class:cv::cuda::GpuMat
colRange	core/mat.inl.hpp	/^Mat Mat::colRange(const Range& r) const$/;"	f	class:cv::Mat
colRange	core/mat.inl.hpp	/^Mat Mat::colRange(int startcol, int endcol) const$/;"	f	class:cv::Mat
colRange	core/mat.inl.hpp	/^UMat UMat::colRange(const Range& r) const$/;"	f	class:cv::UMat
colRange	core/mat.inl.hpp	/^UMat UMat::colRange(int startcol, int endcol) const$/;"	f	class:cv::UMat
colRange	cudev/ptr2d/detail/gpumat.hpp	/^__host__ GpuMat_<T> GpuMat_<T>::colRange(Range r) const$/;"	f	class:cv::cudev::GpuMat_
colRange	cudev/ptr2d/detail/gpumat.hpp	/^__host__ GpuMat_<T> GpuMat_<T>::colRange(int startcol, int endcol) const$/;"	f	class:cv::cudev::GpuMat_
collb_	videostab/global_motion.hpp	/^    std::vector<double> obj_, collb_, colub_;$/;"	m	class:cv::videostab::MotionEstimatorL1
collb_	videostab/motion_stabilizing.hpp	/^    std::vector<double> obj_, collb_, colub_;$/;"	m	class:cv::videostab::LpMotionStabilizer
collectGarbage	stitching/detail/matchers.hpp	/^    virtual void collectGarbage() {}$/;"	f	class:cv::detail::FeaturesFinder
collectGarbage	stitching/detail/matchers.hpp	/^    virtual void collectGarbage() {}$/;"	f	class:cv::detail::FeaturesMatcher
color	highgui.hpp	/^    Scalar      color;     \/\/ Qt: ColorFont -> cvScalar(blue_component, green_component, red_component[, alpha_component])$/;"	m	struct:cv::QtFont
color	imgproc/imgproc_c.h	/^  CvScalar color;       \/\/Qt:ColorFont -> cvScalar(blue_component, green_component, red_component[, alpha_component])$/;"	m	struct:CvFont
colorModel	core/types_c.h	/^    char colorModel[4];     \/**< Ignored by OpenCV *\/$/;"	m	struct:_IplImage
color_	core/opengl.hpp	/^    Buffer color_;$/;"	m	class:cv::ogl::Arrays
color_cvt_detail	cudev/functional/detail/color_cvt.hpp	/^namespace color_cvt_detail$/;"	n	namespace:cv::cudev
color_detail	core/cuda/detail/color_detail.hpp	/^    namespace color_detail$/;"	n	namespace:cv::cuda::device
colors	viz/types.hpp	/^            Mat cloud, colors, normals;$/;"	m	class:cv::viz::Mesh
cols	core/cuda.hpp	/^    int rows, cols;$/;"	m	class:cv::cuda::GpuMat
cols	core/cuda.hpp	/^    int rows, cols;$/;"	m	class:cv::cuda::HostMem
cols	core/cuda_types.hpp	/^            int cols;$/;"	m	struct:cv::cuda::PtrStepSz
cols	core/mat.hpp	/^    int rows, cols;$/;"	m	class:cv::Mat
cols	core/mat.hpp	/^    int rows, cols;$/;"	m	class:cv::UMat
cols	core/matx.hpp	/^           cols     = n,$/;"	e	enum:cv::Matx::__anon150
cols	core/opengl.hpp	/^int cv::ogl::Buffer::cols() const$/;"	f	class:cv::ogl::Buffer
cols	core/opengl.hpp	/^int cv::ogl::Texture2D::cols() const$/;"	f	class:cv::ogl::Texture2D
cols	core/types_c.h	/^        int cols;$/;"	m	union:CvMat::__anon146
cols	core/types_c.h	/^    int cols;$/;"	m	struct:CvMat
cols	cudev/ptr2d/constant.hpp	/^    int rows, cols;$/;"	m	struct:cv::cudev::ConstantPtrSz
cols	cudev/ptr2d/deriv.hpp	/^    int rows, cols;$/;"	m	struct:cv::cudev::DerivXPtrSz
cols	cudev/ptr2d/deriv.hpp	/^    int rows, cols;$/;"	m	struct:cv::cudev::DerivYPtrSz
cols	cudev/ptr2d/deriv.hpp	/^    int rows, cols;$/;"	m	struct:cv::cudev::LaplacianPtrSz
cols	cudev/ptr2d/deriv.hpp	/^    int rows, cols;$/;"	m	struct:cv::cudev::ScharrXPtrSz
cols	cudev/ptr2d/deriv.hpp	/^    int rows, cols;$/;"	m	struct:cv::cudev::ScharrYPtrSz
cols	cudev/ptr2d/deriv.hpp	/^    int rows, cols;$/;"	m	struct:cv::cudev::SobelXPtrSz
cols	cudev/ptr2d/deriv.hpp	/^    int rows, cols;$/;"	m	struct:cv::cudev::SobelYPtrSz
cols	cudev/ptr2d/extrapolation.hpp	/^    int rows, cols;$/;"	m	struct:cv::cudev::BrdBase
cols	cudev/ptr2d/extrapolation.hpp	/^    int rows, cols;$/;"	m	struct:cv::cudev::BrdConstant
cols	cudev/ptr2d/glob.hpp	/^    int rows, cols;$/;"	m	struct:cv::cudev::GlobPtrSz
cols	cudev/ptr2d/interpolation.hpp	/^    int rows, cols;$/;"	m	struct:cv::cudev::CommonAreaInterPtrSz
cols	cudev/ptr2d/interpolation.hpp	/^    int rows, cols;$/;"	m	struct:cv::cudev::CubicInterPtrSz
cols	cudev/ptr2d/interpolation.hpp	/^    int rows, cols;$/;"	m	struct:cv::cudev::IntegerAreaInterPtrSz
cols	cudev/ptr2d/interpolation.hpp	/^    int rows, cols;$/;"	m	struct:cv::cudev::LinearInterPtrSz
cols	cudev/ptr2d/interpolation.hpp	/^    int rows, cols;$/;"	m	struct:cv::cudev::NearestInterPtrSz
cols	cudev/ptr2d/lut.hpp	/^    int rows, cols;$/;"	m	struct:cv::cudev::LutPtrSz
cols	cudev/ptr2d/mask.hpp	/^    int rows, cols;$/;"	m	struct:cv::cudev::SingleMaskChannelsSz
cols	cudev/ptr2d/remap.hpp	/^    int rows, cols;$/;"	m	struct:cv::cudev::RemapPtr1Sz
cols	cudev/ptr2d/remap.hpp	/^    int rows, cols;$/;"	m	struct:cv::cudev::RemapPtr2Sz
cols	cudev/ptr2d/resize.hpp	/^    int rows, cols;$/;"	m	struct:cv::cudev::ResizePtrSz
cols	cudev/ptr2d/texture.hpp	/^    int rows, cols;$/;"	m	struct:cv::cudev::Texture
cols	cudev/ptr2d/transform.hpp	/^    int rows, cols;$/;"	m	struct:cv::cudev::BinaryTransformPtrSz
cols	cudev/ptr2d/transform.hpp	/^    int rows, cols;$/;"	m	struct:cv::cudev::UnaryTransformPtrSz
cols	cudev/ptr2d/warping.hpp	/^    int rows, cols;$/;"	m	struct:cv::cudev::AffineMapPtrSz
cols	cudev/ptr2d/warping.hpp	/^    int rows, cols;$/;"	m	struct:cv::cudev::PerspectiveMapPtrSz
cols	cudev/ptr2d/zip.hpp	/^    int rows, cols;$/;"	m	struct:cv::cudev::ZipPtrSz
cols	flann/matrix.h	/^    size_t cols;$/;"	m	class:cvflann::Matrix
cols	flann/matrix.h	/^    size_t cols;$/;"	m	class:cvflann::UntypedMatrix
cols	flann/saving.h	/^    size_t cols;$/;"	m	struct:cvflann::IndexHeader
cols_	core/opengl.hpp	/^    int cols_;$/;"	m	class:cv::ogl::Buffer
cols_	core/opengl.hpp	/^    int cols_;$/;"	m	class:cv::ogl::Texture2D
cols_	videostab/global_motion.hpp	/^    std::vector<int> rows_, cols_;$/;"	m	class:cv::videostab::MotionEstimatorL1
cols_	videostab/motion_stabilizing.hpp	/^    std::vector<int> rows_, cols_;$/;"	m	class:cv::videostab::LpMotionStabilizer
colub_	videostab/global_motion.hpp	/^    std::vector<double> obj_, collb_, colub_;$/;"	m	class:cv::videostab::MotionEstimatorL1
colub_	videostab/motion_stabilizing.hpp	/^    std::vector<double> obj_, collb_, colub_;$/;"	m	class:cv::videostab::LpMotionStabilizer
comparators	ts/ts_perf.hpp	/^namespace comparators$/;"	n	namespace:perf
compare	core/cvstd.hpp	/^int String::compare(const String& str) const$/;"	f	class:cv::String
compare	core/cvstd.hpp	/^int String::compare(const char* s) const$/;"	f	class:cv::String
compatible	flann/any.h	/^    bool compatible(const any& x) const$/;"	f	struct:cvflann::any
completeSymmFlag	calib3d/calib3d_c.h	/^    bool completeSymmFlag;$/;"	m	class:CvLevMarq
component	stitching.hpp	/^    std::vector<int> component() const { return indices_; }$/;"	f	class:cv::Stitcher
compose_resol_	stitching.hpp	/^    double compose_resol_;$/;"	m	class:cv::Stitcher
compositingResol	stitching.hpp	/^    CV_WRAP double compositingResol() const { return compose_resol_; }$/;"	f	class:cv::Stitcher
compute	core/operations.hpp	/^    SVD::compute( const Matx<_Tp, m, n>& a, Matx<_Tp, nm, 1>& w, Matx<_Tp, m, nm>& u, Matx<_Tp, n, nm>& vt )$/;"	f	class:cv::SVD
compute	core/operations.hpp	/^SVD::compute( const Matx<_Tp, m, n>& a, Matx<_Tp, nm, 1>& w )$/;"	f	class:cv::SVD
compute2	features2d.hpp	/^    CV_WRAP_AS(compute) void compute2( const Mat& image, std::vector<KeyPoint>& keypoints, CV_OUT Mat& imgDescriptor )$/;"	f	class:cv::BOWImgDescriptorExtractor
computeBoundingBox	flann/kdtree_single_index.h	/^    void computeBoundingBox(BoundingBox& bbox)$/;"	f	class:cvflann::KDTreeSingleIndex
computeClustering	flann/hierarchical_clustering_index.h	/^    void computeClustering(NodePtr node, int* dsindices, int indices_length, int branching, int level)$/;"	f	class:cvflann::HierarchicalClusteringIndex
computeClustering	flann/kmeans_index.h	/^    void computeClustering(KMeansNodePtr node, int* indices, int indices_length, int branching, int level)$/;"	f	class:cvflann::KMeansIndex
computeDistanceRaport	flann/index_testing.h	/^typename Distance::ResultType computeDistanceRaport(const Matrix<typename Distance::ElementType>& inputData, typename Distance::ElementType* target,$/;"	f	namespace:cvflann
computeInitialDistances	flann/kdtree_single_index.h	/^    DistanceType computeInitialDistances(const ElementType* vec, std::vector<DistanceType>& dists)$/;"	f	class:cvflann::KDTreeSingleIndex
computeLabels	flann/hierarchical_clustering_index.h	/^    void computeLabels(int* dsindices, int indices_length,  int* centers, int centers_length, int* labels, DistanceType& cost)$/;"	f	class:cvflann::HierarchicalClusteringIndex
computeMinMax	flann/kdtree_single_index.h	/^    void computeMinMax(int* ind, int count, int dim, ElementType& min_elem, ElementType& max_elem)$/;"	f	class:cvflann::KDTreeSingleIndex
computeNodeStatistics	flann/kmeans_index.h	/^    void computeNodeStatistics(KMeansNodePtr node, int* indices, int indices_length)$/;"	f	class:cvflann::KMeansIndex
compute_ground_truth	flann/ground_truth.h	/^void compute_ground_truth(const Matrix<typename Distance::ElementType>& dataset, const Matrix<typename Distance::ElementType>& testset, Matrix<int>& matches,$/;"	f	namespace:cvflann
concatenate	core/affine.hpp	/^cv::Affine3<T> cv::Affine3<T>::concatenate(const Affine3<T>& affine) const$/;"	f	class:cv::Affine3
confThresh	stitching/detail/motion_estimators.hpp	/^    double confThresh() const { return conf_thresh_; }$/;"	f	class:cv::detail::BundleAdjusterBase
conf_thresh_	stitching.hpp	/^    double conf_thresh_;$/;"	m	class:cv::Stitcher
conf_thresh_	stitching/detail/motion_estimators.hpp	/^    double conf_thresh_;$/;"	m	class:cv::detail::BundleAdjusterBase
confidence	stitching/detail/matchers.hpp	/^    double confidence;                  \/\/!< Confidence two images are from the same panorama$/;"	m	struct:cv::detail::MatchesInfo
confidences	objdetect.hpp	/^   std::vector<double> confidences;$/;"	m	struct:cv::DetectionROI
conj	core/matx.hpp	/^Vec<double, 2> Vec<double, 2>::conj() const$/;"	f	class:cv::Vec
conj	core/matx.hpp	/^Vec<double, 4> Vec<double, 4>::conj() const$/;"	f	class:cv::Vec
conj	core/matx.hpp	/^Vec<float, 2> Vec<float, 2>::conj() const$/;"	f	class:cv::Vec
conj	core/matx.hpp	/^Vec<float, 4> Vec<float, 4>::conj() const$/;"	f	class:cv::Vec
conj	core/types.hpp	/^Complex<_Tp> Complex<_Tp>::conj() const$/;"	f	class:cv::Complex
conj	core/types.hpp	/^Scalar_<_Tp> Scalar_<_Tp>::conj() const$/;"	f	class:cv::Scalar_
conjugate	core/matx.hpp	/^template<typename _Tp> Vec<_Tp, 2> inline conjugate(const Vec<_Tp, 2>& v)$/;"	f	namespace:cv::internal
conjugate	core/matx.hpp	/^template<typename _Tp> Vec<_Tp, 4> inline conjugate(const Vec<_Tp, 4>& v)$/;"	f	namespace:cv::internal
constCast	core/ptr.inl.hpp	/^Ptr<Y> Ptr<T>::constCast() const$/;"	f	class:cv::Ptr
const_iterator	core/core_c.h	/^    typedef SeqIterator<_Tp> const_iterator;$/;"	t	class:cv::Seq
const_iterator	core/cvstd.hpp	/^    typedef const char* const_iterator;$/;"	t	class:cv::String
const_iterator	core/mat.hpp	/^    typedef MatConstIterator_<_Tp> const_iterator;$/;"	t	class:cv::Mat_
const_iterator	core/mat.hpp	/^    typedef SparseMatConstIterator const_iterator;$/;"	t	class:cv::SparseMat
const_iterator	core/mat.hpp	/^    typedef SparseMatConstIterator_<_Tp> const_iterator;$/;"	t	class:cv::SparseMat_
const_iterator	ts/ts_gtest.h	/^  typedef const Element* const_iterator;$/;"	t	class:testing::internal::NativeArray
const_param_type	core.hpp	/^    typedef bool const_param_type;$/;"	t	struct:cv::ParamType
const_param_type	core.hpp	/^    typedef const Mat& const_param_type;$/;"	t	struct:cv::ParamType
const_param_type	core.hpp	/^    typedef const Ptr<Algorithm>& const_param_type;$/;"	t	struct:cv::ParamType
const_param_type	core.hpp	/^    typedef const String& const_param_type;$/;"	t	struct:cv::ParamType
const_param_type	core.hpp	/^    typedef const std::vector<Mat>& const_param_type;$/;"	t	struct:cv::ParamType
const_param_type	core.hpp	/^    typedef double const_param_type;$/;"	t	struct:cv::ParamType
const_param_type	core.hpp	/^    typedef float const_param_type;$/;"	t	struct:cv::ParamType
const_param_type	core.hpp	/^    typedef int const_param_type;$/;"	t	struct:cv::ParamType
const_param_type	core.hpp	/^    typedef uchar const_param_type;$/;"	t	struct:cv::ParamType
const_param_type	core.hpp	/^    typedef uint64 const_param_type;$/;"	t	struct:cv::ParamType
const_param_type	core.hpp	/^    typedef unsigned const_param_type;$/;"	t	struct:cv::ParamType
const_pointer	core/cvstd.hpp	/^    typedef const char* const_pointer;$/;"	t	class:cv::String
const_pointer	core/cvstd.hpp	/^    typedef const value_type* const_pointer;$/;"	t	class:cv::Allocator
const_reference	core/cvstd.hpp	/^    typedef const char& const_reference;$/;"	t	class:cv::String
const_reference	core/cvstd.hpp	/^    typedef const value_type& const_reference;$/;"	t	class:cv::Allocator
constantPtr	cudev/ptr2d/constant.hpp	/^__host__ ConstantPtr<T> constantPtr(T value)$/;"	f	namespace:cv::cudev
constantPtr	cudev/ptr2d/constant.hpp	/^__host__ constantPtr(T value, int rows, int cols)$/;"	f	namespace:cv::cudev
construct	core/cvstd.hpp	/^    void construct(pointer p, const _Tp& v) { new(static_cast<void*>(p)) _Tp(v); }$/;"	f	class:cv::Allocator
container	core/persistence.hpp	/^    const CvFileNode* container;$/;"	m	class:cv::FileNodeIterator
container_	ts/ts_gtest.h	/^  const ContainerType container_;$/;"	m	class:testing::internal::ValuesInIteratorRangeGenerator
contains	core/types.hpp	/^bool Rect_<_Tp>::contains(const Point_<_Tp>& pt) const$/;"	f	class:cv::Rect_
context	ts.hpp	/^    int context;$/;"	m	struct:cvtest::MatComparator
contour	imgproc/imgproc_c.h	/^CVAPI(int)  cvCheckContourConvexity( const CvArr* contour );$/;"	v
contour	imgproc/types_c.h	/^    CvSeq* contour; \/**<optional component boundary$/;"	m	struct:CvConnectedComp
contour1mask_	stitching/detail/seam_finders.hpp	/^    Mat_<uchar> contour1mask_, contour2mask_;$/;"	m	class:cv::detail::DpSeamFinder
contour2mask_	stitching/detail/seam_finders.hpp	/^    Mat_<uchar> contour1mask_, contour2mask_;$/;"	m	class:cv::detail::DpSeamFinder
contours_	stitching/detail/seam_finders.hpp	/^    std::vector<std::vector<Point> > contours_;$/;"	m	class:cv::detail::DpSeamFinder
controlMatrix	video/tracking.hpp	/^    CV_PROP_RW Mat controlMatrix;      \/\/!< control matrix (B) (not used if there is no control)$/;"	m	class:cv::KalmanFilter
control_matrix	video/tracking_c.h	/^    CvMat* control_matrix;      \/* control matrix (B)$/;"	m	struct:CvKalman
converged	flann/kmeans_index.h	/^        bool& converged;$/;"	m	class:cvflann::KMeansIndex::KMeansDistanceComputer
convertTo	core/cuda.inl.hpp	/^void GpuMat::convertTo(OutputArray dst, int rtype) const$/;"	f	class:cv::cuda::GpuMat
convertTo	core/cuda.inl.hpp	/^void GpuMat::convertTo(OutputArray dst, int rtype, double alpha, Stream& stream) const$/;"	f	class:cv::cuda::GpuMat
convertTo	core/cuda.inl.hpp	/^void GpuMat::convertTo(OutputArray dst, int rtype, double alpha, double beta) const$/;"	f	class:cv::cuda::GpuMat
copy	core/cuda/block.hpp	/^        static __device__ __forceinline__ void copy(InIt beg, InIt end, OutIt out)$/;"	f	struct:cv::cuda::device::Block
copy	core/cuda/detail/reduce_key_val.hpp	/^            static __device__ void copy(const PointerTuple& svals, const ReferenceTuple& val, unsigned int tid, unsigned int delta)$/;"	f	struct:cv::cuda::device::reduce_key_val_detail::For
copy	core/cuda/detail/reduce_key_val.hpp	/^            static __device__ void copy(const PointerTuple&, const ReferenceTuple&, unsigned int, unsigned int)$/;"	f	struct:cv::cuda::device::reduce_key_val_detail::For
copy	core/cuda/warp.hpp	/^        static __device__ __forceinline__ OutIt copy(InIt beg, InIt end, OutIt out)$/;"	f	struct:cv::cuda::device::Warp
copy	cudev/block/detail/reduce_key_val.hpp	/^        __device__ static void copy(const PointerTuple& svals, const ReferenceTuple& val, uint tid, uint delta)$/;"	f	struct:cv::cudev::block_reduce_key_val_detail::For
copy	cudev/block/detail/reduce_key_val.hpp	/^        __device__ static void copy(const PointerTuple&, const ReferenceTuple&, uint, uint)$/;"	f	struct:cv::cudev::block_reduce_key_val_detail::For
copy	cudev/grid/detail/copy.hpp	/^        __device__ __forceinline__ static void copy(const SrcPtrTuple&, DstPtrTuple&, const int, const int)$/;"	f	struct:cv::cudev::grid_copy_detail::Unroll
copy	cudev/grid/detail/copy.hpp	/^        __device__ static void copy(const SrcPtrTuple& src, DstPtrTuple& dst, const int y, const int x)$/;"	f	struct:cv::cudev::grid_copy_detail::Unroll
copy	cudev/grid/detail/copy.hpp	/^    __global__ void copy(const SrcPtr src, GlobPtr<DstType> dst, const MaskPtr mask, const int rows, const int cols)$/;"	f	namespace:cv::cudev::grid_copy_detail
copy	cudev/grid/detail/copy.hpp	/^    __host__ void copy(const SrcPtr& src, const GlobPtr<DstType>& dst, const MaskPtr& mask, int rows, int cols, cudaStream_t stream)$/;"	f	namespace:cv::cudev::grid_copy_detail
copy	cudev/warp/detail/reduce_key_val.hpp	/^        __device__ __forceinline__ static void copy(const PointerTuple&, const ReferenceTuple&, uint, uint)$/;"	f	struct:cv::cudev::warp_reduce_key_val_detail::For
copy	cudev/warp/detail/reduce_key_val.hpp	/^        __device__ static void copy(const PointerTuple& svals, const ReferenceTuple& val, uint tid, uint delta)$/;"	f	struct:cv::cudev::warp_reduce_key_val_detail::For
copy	flann/result_set.h	/^    virtual void copy(int* indices, DistanceType* dist, int n_neighbors = -1) const$/;"	f	class:cvflann::UniqueResultSet
copy	ts/ts_gtest.h	/^  template <typename U> void copy(linked_ptr<U> const* ptr) {$/;"	f	class:testing::internal::linked_ptr
copy2D	cudalegacy/NCV.hpp	/^    NCVStatus copy2D(NCVMatrix<T> &dst, NcvSize32u roi, cudaStream_t cuStream) const$/;"	f	class:NCVMatrix
copyHppToMat	core/ippasync.hpp	/^    inline void copyHppToMat(hppiMatrix* src, Mat& dst, hppAccel accel, int cn)$/;"	f	namespace:cv::hpp
copyOnMap	core/mat.inl.hpp	/^inline bool UMatData::copyOnMap() const { return (flags & COPY_ON_MAP) != 0; }$/;"	f	class:cv::UMatData
copyShfl	core/cuda/detail/reduce_key_val.hpp	/^            static __device__ void copyShfl(const ReferenceTuple& val, unsigned int delta, int width)$/;"	f	struct:cv::cuda::device::reduce_key_val_detail::For
copyShfl	core/cuda/detail/reduce_key_val.hpp	/^            static __device__ void copyShfl(const ReferenceTuple&, unsigned int, int)$/;"	f	struct:cv::cuda::device::reduce_key_val_detail::For
copySolid	cudalegacy/NCV.hpp	/^    NCVStatus copySolid(NCVMatrix<T> &dst, cudaStream_t cuStream, size_t howMuch=0) const$/;"	f	class:NCVMatrix
copySolid	cudalegacy/NCV.hpp	/^    NCVStatus copySolid(NCVVector<T> &dst, cudaStream_t cuStream, size_t howMuch=0) const$/;"	f	class:NCVVector
copyTo	core/core_c.h	/^template<typename _Tp> inline void Seq<_Tp>::copyTo(std::vector<_Tp>& vec, const Range& range) const$/;"	f	class:cv::Seq
copyTo	core/cuda.inl.hpp	/^void GpuMat::copyTo(OutputArray dst, InputArray mask) const$/;"	f	class:cv::cuda::GpuMat
copyVals	core/cuda/detail/reduce_key_val.hpp	/^        __device__ __forceinline__ void copyVals(const thrust::tuple<VP0, VP1, VP2, VP3, VP4, VP5, VP6, VP7, VP8, VP9>& svals,$/;"	f	namespace:cv::cuda::device::reduce_key_val_detail
copyVals	core/cuda/detail/reduce_key_val.hpp	/^        __device__ __forceinline__ void copyVals(volatile V* svals, V& val, unsigned int tid, unsigned int delta)$/;"	f	namespace:cv::cuda::device::reduce_key_val_detail
copyVals	cudev/block/detail/reduce_key_val.hpp	/^    __device__ __forceinline__ void copyVals(const tuple<VP0, VP1, VP2, VP3, VP4, VP5, VP6, VP7, VP8, VP9>& svals,$/;"	f	namespace:cv::cudev::block_reduce_key_val_detail
copyVals	cudev/block/detail/reduce_key_val.hpp	/^    __device__ __forceinline__ void copyVals(volatile V* svals, V& val, uint tid, uint delta)$/;"	f	namespace:cv::cudev::block_reduce_key_val_detail
copyVals	cudev/warp/detail/reduce_key_val.hpp	/^    __device__ __forceinline__ void copyVals(const tuple<VP0, VP1, VP2, VP3, VP4, VP5, VP6, VP7, VP8, VP9>& svals,$/;"	f	namespace:cv::cudev::warp_reduce_key_val_detail
copyVals	cudev/warp/detail/reduce_key_val.hpp	/^    __device__ __forceinline__ void copyVals(volatile V* svals, V& val, uint tid, uint delta)$/;"	f	namespace:cv::cudev::warp_reduce_key_val_detail
copyValsShfl	core/cuda/detail/reduce_key_val.hpp	/^        __device__ __forceinline__ void copyValsShfl(V& val, unsigned int delta, int width)$/;"	f	namespace:cv::cuda::device::reduce_key_val_detail
copyValsShfl	core/cuda/detail/reduce_key_val.hpp	/^        __device__ __forceinline__ void copyValsShfl(const thrust::tuple<VR0, VR1, VR2, VR3, VR4, VR5, VR6, VR7, VR8, VR9>& val,$/;"	f	namespace:cv::cuda::device::reduce_key_val_detail
copy_from_value	flann/any.h	/^    virtual void copy_from_value(void const* src, void** dest)$/;"	f	struct:cvflann::anyimpl::big_any_policy
copy_from_value	flann/any.h	/^    virtual void copy_from_value(void const* src, void** dest)$/;"	f	struct:cvflann::anyimpl::small_any_policy
copy_tuple	cudev/grid/detail/copy.hpp	/^    __global__ void copy_tuple(const SrcPtrTuple src, DstPtrTuple dst, const MaskPtr mask, const int rows, const int cols)$/;"	f	namespace:cv::cudev::grid_copy_detail
copy_tuple	cudev/grid/detail/copy.hpp	/^    __host__ void copy_tuple(const SrcPtrTuple& src, const DstPtrTuple& dst, const MaskPtr& mask, int rows, int cols, cudaStream_t stream)$/;"	f	namespace:cv::cudev::grid_copy_detail
corners_	stitching/detail/seam_finders.hpp	/^        const Point *corners_;$/;"	m	class:cv::detail::DpSeamFinder::ImagePairLess
corners_	stitching/detail/seam_finders.hpp	/^    std::vector<Point> corners_;$/;"	m	class:cv::detail::PairwiseSeamFinder
cost	calib3d/calib3d_c.h	/^    CvMat* cost;$/;"	m	struct:CvStereoBMState
costFunc_	stitching/detail/seam_finders.hpp	/^    CostFunction costFunc_;$/;"	m	class:cv::detail::DpSeamFinder
costFunction	stitching/detail/seam_finders.hpp	/^    CostFunction costFunction() const { return costFunc_; }$/;"	f	class:cv::detail::DpSeamFinder
cost_type_	stitching/detail/seam_finders.hpp	/^    int cost_type_;$/;"	m	class:cv::detail::GraphCutSeamFinderGpu
count	core/core_c.h	/^    int count; \/**< number of arrays *\/$/;"	m	struct:CvNArrayIterator
count	core/types_c.h	/^    int    count;             \/**< Number of elements in the block.           *\/$/;"	m	struct:CvSeqBlock
count	flann/heap.h	/^    int count;$/;"	m	class:cvflann::Heap
count	flann/kmeans_index.h	/^        int* count;$/;"	m	class:cvflann::KMeansIndex::KMeansDistanceComputer
count	flann/result_set.h	/^    int count;$/;"	m	class:cvflann::KNNResultSet
count	flann/result_set.h	/^    int count;$/;"	m	class:cvflann::KNNSimpleResultSet
count	flann/result_set.h	/^    size_t count;$/;"	m	class:cvflann::RadiusResultSet
count	imgproc.hpp	/^    int err, count;$/;"	m	class:cv::LineIterator
count	objdetect/objdetect_c.h	/^    int  count;$/;"	m	struct:CvHaarClassifierCascade
count	objdetect/objdetect_c.h	/^    int  count;$/;"	m	struct:CvHaarStageClassifier
count	objdetect/objdetect_c.h	/^    int count;$/;"	m	struct:CvHaarClassifier
countCorrectMatches	flann/index_testing.h	/^inline int countCorrectMatches(int* neighbors, int* groundTruth, int n)$/;"	f	namespace:cvflann
countNonZero_	cudev/expr/reduction.hpp	/^countNonZero_(const SrcPtr& src)$/;"	f	namespace:cv::cudev
counter_	flann/random.h	/^    int counter_;$/;"	m	class:cvflann::UniqueRandom
create	core/cuda.inl.hpp	/^void GpuMat::create(Size size_, int type_)$/;"	f	class:cv::cuda::GpuMat
create	core/cuda.inl.hpp	/^void HostMem::create(Size size_, int type_)$/;"	f	class:cv::cuda::HostMem
create	core/mat.inl.hpp	/^void Mat::create(Size _sz, int _type)$/;"	f	class:cv::Mat
create	core/mat.inl.hpp	/^void Mat::create(int _rows, int _cols, int _type)$/;"	f	class:cv::Mat
create	core/mat.inl.hpp	/^void Mat_<_Tp>::create(Size _sz)$/;"	f	class:cv::Mat_
create	core/mat.inl.hpp	/^void Mat_<_Tp>::create(int _dims, const int* _sz)$/;"	f	class:cv::Mat_
create	core/mat.inl.hpp	/^void Mat_<_Tp>::create(int _rows, int _cols)$/;"	f	class:cv::Mat_
create	core/mat.inl.hpp	/^void SparseMat_<_Tp>::create(int _dims, const int* _sizes)$/;"	f	class:cv::SparseMat_
create	core/mat.inl.hpp	/^void UMat::create(Size _sz, int _type, UMatUsageFlags _usageFlags)$/;"	f	class:cv::UMat
create	core/mat.inl.hpp	/^void UMat::create(int _rows, int _cols, int _type, UMatUsageFlags _usageFlags)$/;"	f	class:cv::UMat
create	core/opengl.hpp	/^void cv::ogl::Buffer::create(Size asize, int atype, Target target, bool autoRelease)$/;"	f	class:cv::ogl::Buffer
create	core/opengl.hpp	/^void cv::ogl::Texture2D::create(Size asize, Format aformat, bool autoRelease)$/;"	f	class:cv::ogl::Texture2D
create	cudalegacy/NCVHaarObjectDetection.hpp	/^    __host__ NCVStatus create(Ncv32f leafValue)$/;"	f	struct:HaarClassifierNodeDescriptor32
create	cudalegacy/NCVHaarObjectDetection.hpp	/^    __host__ NCVStatus create(Ncv32u offsetHaarClassifierNode)$/;"	f	struct:HaarClassifierNodeDescriptor32
create	cudalegacy/NCVHaarObjectDetection.hpp	/^    __host__ NCVStatus create(NcvBool bTilted, NcvBool bLeftLeaf, NcvBool bRightLeaf,$/;"	f	struct:HaarFeatureDescriptor32
create	cudev/ptr2d/detail/gpumat.hpp	/^__host__ void GpuMat_<T>::create(Size asize)$/;"	f	class:cv::cudev::GpuMat_
create	cudev/ptr2d/detail/gpumat.hpp	/^__host__ void GpuMat_<T>::create(int arows, int acols)$/;"	f	class:cv::cudev::GpuMat_
create	flann/all_indices.h	/^    static NNIndex<Distance>* create(const Matrix<typename Distance::ElementType>& dataset, const IndexParams& params, const Distance& distance)$/;"	f	struct:cvflann::index_creator
create	flann/object_factory.h	/^    ObjectCreator create(UniqueIdType id)$/;"	f	class:cvflann::ObjectFactory
create	stitching/detail/util.hpp	/^    void create(int num_vertices) { edges_.assign(num_vertices, std::list<GraphEdge>()); }$/;"	f	class:cv::detail::Graph
create	stitching/warpers.hpp	/^    Ptr<detail::RotationWarper> create(float scale) const { return makePtr<detail::CompressedRectilinearPortraitWarper>(scale, a, b); }$/;"	f	class:cv::CompressedRectilinearPortraitWarper
create	stitching/warpers.hpp	/^    Ptr<detail::RotationWarper> create(float scale) const { return makePtr<detail::CompressedRectilinearWarper>(scale, a, b); }$/;"	f	class:cv::CompressedRectilinearWarper
create	stitching/warpers.hpp	/^    Ptr<detail::RotationWarper> create(float scale) const { return makePtr<detail::CylindricalWarper>(scale); }$/;"	f	class:cv::CylindricalWarper
create	stitching/warpers.hpp	/^    Ptr<detail::RotationWarper> create(float scale) const { return makePtr<detail::CylindricalWarperGpu>(scale); }$/;"	f	class:cv::CylindricalWarperGpu
create	stitching/warpers.hpp	/^    Ptr<detail::RotationWarper> create(float scale) const { return makePtr<detail::FisheyeWarper>(scale); }$/;"	f	class:cv::FisheyeWarper
create	stitching/warpers.hpp	/^    Ptr<detail::RotationWarper> create(float scale) const { return makePtr<detail::MercatorWarper>(scale); }$/;"	f	class:cv::MercatorWarper
create	stitching/warpers.hpp	/^    Ptr<detail::RotationWarper> create(float scale) const { return makePtr<detail::PaniniPortraitWarper>(scale, a, b); }$/;"	f	class:cv::PaniniPortraitWarper
create	stitching/warpers.hpp	/^    Ptr<detail::RotationWarper> create(float scale) const { return makePtr<detail::PaniniWarper>(scale, a, b); }$/;"	f	class:cv::PaniniWarper
create	stitching/warpers.hpp	/^    Ptr<detail::RotationWarper> create(float scale) const { return makePtr<detail::PlaneWarper>(scale); }$/;"	f	class:cv::PlaneWarper
create	stitching/warpers.hpp	/^    Ptr<detail::RotationWarper> create(float scale) const { return makePtr<detail::PlaneWarperGpu>(scale); }$/;"	f	class:cv::PlaneWarperGpu
create	stitching/warpers.hpp	/^    Ptr<detail::RotationWarper> create(float scale) const { return makePtr<detail::SphericalWarper>(scale); }$/;"	f	class:cv::SphericalWarper
create	stitching/warpers.hpp	/^    Ptr<detail::RotationWarper> create(float scale) const { return makePtr<detail::SphericalWarperGpu>(scale); }$/;"	f	class:cv::SphericalWarperGpu
create	stitching/warpers.hpp	/^    Ptr<detail::RotationWarper> create(float scale) const { return makePtr<detail::StereographicWarper>(scale); }$/;"	f	class:cv::StereographicWarper
create	stitching/warpers.hpp	/^    Ptr<detail::RotationWarper> create(float scale) const { return makePtr<detail::TransverseMercatorWarper>(scale); }$/;"	f	class:cv::TransverseMercatorWarper
createContinuous	core/cuda.inl.hpp	/^GpuMat createContinuous(Size size, int type)$/;"	f	namespace:cv::cuda
createContinuous	core/cuda.inl.hpp	/^GpuMat createContinuous(int rows, int cols, int type)$/;"	f	namespace:cv::cuda
createContinuous	core/cuda.inl.hpp	/^void createContinuous(Size size, int type, OutputArray arr)$/;"	f	namespace:cv::cuda
createDataInstance	core/utility.hpp	/^    virtual void* createDataInstance() const { return new T; }$/;"	f	class:cv::TLSData
createMatHeader	core/cuda.inl.hpp	/^Mat HostMem::createMatHeader() const$/;"	f	class:cv::cuda::HostMem
create_index_by_type	flann/all_indices.h	/^NNIndex<Distance>* create_index_by_type(const Matrix<typename Distance::ElementType>& dataset, const IndexParams& params, const Distance& distance)$/;"	f	namespace:cvflann
criteria	calib3d/calib3d_c.h	/^    CvTermCriteria criteria;$/;"	m	class:CvLevMarq
cross	core/mat.inl.hpp	/^Mat_<_Tp> Mat_<_Tp>::cross(const Mat_& m) const$/;"	f	class:cv::Mat_
cross	core/matx.hpp	/^Vec<_Tp, cn> Vec<_Tp, cn>::cross(const Vec<_Tp, cn>&) const$/;"	f	class:cv::Vec
cross	core/matx.hpp	/^Vec<double, 3> Vec<double, 3>::cross(const Vec<double, 3>& v) const$/;"	f	class:cv::Vec
cross	core/matx.hpp	/^Vec<float, 3> Vec<float, 3>::cross(const Vec<float, 3>& v) const$/;"	f	class:cv::Vec
cross	core/types.hpp	/^Point3_<_Tp> Point3_<_Tp>::cross(const Point3_<_Tp>& pt) const$/;"	f	class:cv::Point3_
cross	core/types.hpp	/^double Point_<_Tp>::cross(const Point_& pt) const$/;"	f	class:cv::Point_
crossCheck	features2d.hpp	/^    bool crossCheck;$/;"	m	class:cv::BFMatcher
cstr_	core/cvstd.hpp	/^    char*  cstr_;$/;"	m	class:cv::String
cuda	core/base.hpp	/^namespace cuda$/;"	n	namespace:cv
cuda	core/cuda.hpp	/^namespace cv { namespace cuda {$/;"	n	namespace:cv
cuda	core/cuda.inl.hpp	/^namespace cv { namespace cuda {$/;"	n	namespace:cv
cuda	core/cuda/block.hpp	/^namespace cv { namespace cuda { namespace device$/;"	n	namespace:cv
cuda	core/cuda/border_interpolate.hpp	/^namespace cv { namespace cuda { namespace device$/;"	n	namespace:cv
cuda	core/cuda/color.hpp	/^namespace cv { namespace cuda { namespace device$/;"	n	namespace:cv
cuda	core/cuda/common.hpp	/^namespace cv { namespace cuda {$/;"	n	namespace:cv
cuda	core/cuda/common.hpp	/^namespace cv { namespace cuda$/;"	n	namespace:cv
cuda	core/cuda/datamov_utils.hpp	/^namespace cv { namespace cuda { namespace device$/;"	n	namespace:cv
cuda	core/cuda/detail/color_detail.hpp	/^namespace cv { namespace cuda { namespace device$/;"	n	namespace:cv
cuda	core/cuda/detail/reduce.hpp	/^namespace cv { namespace cuda { namespace device$/;"	n	namespace:cv
cuda	core/cuda/detail/reduce_key_val.hpp	/^namespace cv { namespace cuda { namespace device$/;"	n	namespace:cv
cuda	core/cuda/detail/transform_detail.hpp	/^namespace cv { namespace cuda { namespace device$/;"	n	namespace:cv
cuda	core/cuda/detail/type_traits_detail.hpp	/^namespace cv { namespace cuda { namespace device$/;"	n	namespace:cv
cuda	core/cuda/detail/vec_distance_detail.hpp	/^namespace cv { namespace cuda { namespace device$/;"	n	namespace:cv
cuda	core/cuda/dynamic_smem.hpp	/^namespace cv { namespace cuda { namespace device$/;"	n	namespace:cv
cuda	core/cuda/emulation.hpp	/^namespace cv { namespace cuda { namespace device$/;"	n	namespace:cv
cuda	core/cuda/filters.hpp	/^namespace cv { namespace cuda { namespace device$/;"	n	namespace:cv
cuda	core/cuda/funcattrib.hpp	/^namespace cv { namespace cuda { namespace device$/;"	n	namespace:cv
cuda	core/cuda/functional.hpp	/^namespace cv { namespace cuda { namespace device$/;"	n	namespace:cv
cuda	core/cuda/limits.hpp	/^namespace cv { namespace cuda { namespace device$/;"	n	namespace:cv
cuda	core/cuda/reduce.hpp	/^namespace cv { namespace cuda { namespace device$/;"	n	namespace:cv
cuda	core/cuda/saturate_cast.hpp	/^namespace cv { namespace cuda { namespace device$/;"	n	namespace:cv
cuda	core/cuda/scan.hpp	/^namespace cv { namespace cuda { namespace device$/;"	n	namespace:cv
cuda	core/cuda/simd_functions.hpp	/^namespace cv { namespace cuda { namespace device$/;"	n	namespace:cv
cuda	core/cuda/transform.hpp	/^namespace cv { namespace cuda { namespace device$/;"	n	namespace:cv
cuda	core/cuda/type_traits.hpp	/^namespace cv { namespace cuda { namespace device$/;"	n	namespace:cv
cuda	core/cuda/utility.hpp	/^namespace cv { namespace cuda { namespace device$/;"	n	namespace:cv
cuda	core/cuda/vec_distance.hpp	/^namespace cv { namespace cuda { namespace device$/;"	n	namespace:cv
cuda	core/cuda/vec_math.hpp	/^namespace cv { namespace cuda { namespace device$/;"	n	namespace:cv
cuda	core/cuda/vec_traits.hpp	/^namespace cv { namespace cuda { namespace device$/;"	n	namespace:cv
cuda	core/cuda/warp.hpp	/^namespace cv { namespace cuda { namespace device$/;"	n	namespace:cv
cuda	core/cuda/warp_reduce.hpp	/^namespace cv { namespace cuda { namespace device$/;"	n	namespace:cv
cuda	core/cuda/warp_shuffle.hpp	/^namespace cv { namespace cuda { namespace device$/;"	n	namespace:cv
cuda	core/cuda_stream_accessor.hpp	/^    namespace cuda$/;"	n	namespace:cv
cuda	core/cuda_types.hpp	/^    namespace cuda$/;"	n	namespace:cv
cuda	core/opengl.hpp	/^namespace cv { namespace cuda {$/;"	n	namespace:cv
cuda	core/private.cuda.hpp	/^namespace cv { namespace cuda {$/;"	n	namespace:cv
cuda	cudaarithm.hpp	/^namespace cv { namespace cuda {$/;"	n	namespace:cv
cuda	cudabgsegm.hpp	/^namespace cv { namespace cuda {$/;"	n	namespace:cv
cuda	cudafeatures2d.hpp	/^namespace cv { namespace cuda {$/;"	n	namespace:cv
cuda	cudafilters.hpp	/^namespace cv { namespace cuda {$/;"	n	namespace:cv
cuda	cudaimgproc.hpp	/^namespace cv { namespace cuda {$/;"	n	namespace:cv
cuda	cudalegacy.hpp	/^namespace cv { namespace cuda {$/;"	n	namespace:cv
cuda	cudalegacy/NCVPyramid.hpp	/^namespace cv { namespace cuda { namespace device$/;"	n	namespace:cv
cuda	cudalegacy/private.hpp	/^namespace cv { namespace cuda$/;"	n	namespace:cv
cuda	cudaobjdetect.hpp	/^namespace cv { namespace cuda {$/;"	n	namespace:cv
cuda	cudaoptflow.hpp	/^namespace cv { namespace cuda {$/;"	n	namespace:cv
cuda	cudastereo.hpp	/^namespace cv { namespace cuda {$/;"	n	namespace:cv
cuda	cudawarping.hpp	/^namespace cv { namespace cuda {$/;"	n	namespace:cv
cuda	photo/cuda.hpp	/^namespace cv { namespace cuda {$/;"	n	namespace:cv
cuda	ts/cuda_test.hpp	/^namespace cv { namespace cuda$/;"	n	namespace:cv
cuda	ts/ts_perf.hpp	/^namespace cv { namespace cuda {} namespace ocl {} }$/;"	n	namespace:cv
cudaSafeCall	core/cuda/common.hpp	74;"	d
cudacodec	cudacodec.hpp	/^namespace cv { namespace cudacodec {$/;"	n	namespace:cv
cudev	core/base.hpp	/^namespace cudev$/;"	n	namespace:cv
cudev	cudev/block/block.hpp	/^namespace cv { namespace cudev {$/;"	n	namespace:cv
cudev	cudev/block/detail/reduce.hpp	/^namespace cv { namespace cudev {$/;"	n	namespace:cv
cudev	cudev/block/detail/reduce_key_val.hpp	/^namespace cv { namespace cudev {$/;"	n	namespace:cv
cudev	cudev/block/dynamic_smem.hpp	/^namespace cv { namespace cudev {$/;"	n	namespace:cv
cudev	cudev/block/reduce.hpp	/^namespace cv { namespace cudev {$/;"	n	namespace:cv
cudev	cudev/block/scan.hpp	/^namespace cv { namespace cudev {$/;"	n	namespace:cv
cudev	cudev/block/vec_distance.hpp	/^namespace cv { namespace cudev {$/;"	n	namespace:cv
cudev	cudev/common.hpp	/^namespace cv { namespace cudev {$/;"	n	namespace:cv
cudev	cudev/expr/binary_func.hpp	/^namespace cv { namespace cudev {$/;"	n	namespace:cv
cudev	cudev/expr/binary_op.hpp	/^namespace cv { namespace cudev {$/;"	n	namespace:cv
cudev	cudev/expr/color.hpp	/^namespace cv { namespace cudev {$/;"	n	namespace:cv
cudev	cudev/expr/deriv.hpp	/^namespace cv { namespace cudev {$/;"	n	namespace:cv
cudev	cudev/expr/expr.hpp	/^namespace cv { namespace cudev {$/;"	n	namespace:cv
cudev	cudev/expr/per_element_func.hpp	/^namespace cv { namespace cudev {$/;"	n	namespace:cv
cudev	cudev/expr/reduction.hpp	/^namespace cv { namespace cudev {$/;"	n	namespace:cv
cudev	cudev/expr/unary_func.hpp	/^namespace cv { namespace cudev {$/;"	n	namespace:cv
cudev	cudev/expr/unary_op.hpp	/^namespace cv { namespace cudev {$/;"	n	namespace:cv
cudev	cudev/expr/warping.hpp	/^namespace cv { namespace cudev {$/;"	n	namespace:cv
cudev	cudev/functional/color_cvt.hpp	/^namespace cv { namespace cudev {$/;"	n	namespace:cv
cudev	cudev/functional/detail/color_cvt.hpp	/^namespace cv { namespace cudev {$/;"	n	namespace:cv
cudev	cudev/functional/functional.hpp	/^namespace cv { namespace cudev {$/;"	n	namespace:cv
cudev	cudev/functional/tuple_adapter.hpp	/^namespace cv { namespace cudev {$/;"	n	namespace:cv
cudev	cudev/grid/copy.hpp	/^namespace cv { namespace cudev {$/;"	n	namespace:cv
cudev	cudev/grid/detail/copy.hpp	/^namespace cv { namespace cudev {$/;"	n	namespace:cv
cudev	cudev/grid/detail/histogram.hpp	/^namespace cv { namespace cudev {$/;"	n	namespace:cv
cudev	cudev/grid/detail/integral.hpp	/^namespace cv { namespace cudev {$/;"	n	namespace:cv
cudev	cudev/grid/detail/minmaxloc.hpp	/^namespace cv { namespace cudev {$/;"	n	namespace:cv
cudev	cudev/grid/detail/pyr_down.hpp	/^namespace cv { namespace cudev {$/;"	n	namespace:cv
cudev	cudev/grid/detail/pyr_up.hpp	/^namespace cv { namespace cudev {$/;"	n	namespace:cv
cudev	cudev/grid/detail/reduce.hpp	/^namespace cv { namespace cudev {$/;"	n	namespace:cv
cudev	cudev/grid/detail/reduce_to_column.hpp	/^namespace cv { namespace cudev {$/;"	n	namespace:cv
cudev	cudev/grid/detail/reduce_to_row.hpp	/^namespace cv { namespace cudev {$/;"	n	namespace:cv
cudev	cudev/grid/detail/split_merge.hpp	/^namespace cv { namespace cudev {$/;"	n	namespace:cv
cudev	cudev/grid/detail/transform.hpp	/^namespace cv { namespace cudev {$/;"	n	namespace:cv
cudev	cudev/grid/detail/transpose.hpp	/^namespace cv { namespace cudev {$/;"	n	namespace:cv
cudev	cudev/grid/histogram.hpp	/^namespace cv { namespace cudev {$/;"	n	namespace:cv
cudev	cudev/grid/integral.hpp	/^namespace cv { namespace cudev {$/;"	n	namespace:cv
cudev	cudev/grid/pyramids.hpp	/^namespace cv { namespace cudev {$/;"	n	namespace:cv
cudev	cudev/grid/reduce.hpp	/^namespace cv { namespace cudev {$/;"	n	namespace:cv
cudev	cudev/grid/reduce_to_vec.hpp	/^namespace cv { namespace cudev {$/;"	n	namespace:cv
cudev	cudev/grid/split_merge.hpp	/^namespace cv { namespace cudev {$/;"	n	namespace:cv
cudev	cudev/grid/transform.hpp	/^namespace cv { namespace cudev {$/;"	n	namespace:cv
cudev	cudev/grid/transpose.hpp	/^namespace cv { namespace cudev {$/;"	n	namespace:cv
cudev	cudev/ptr2d/constant.hpp	/^namespace cv { namespace cudev {$/;"	n	namespace:cv
cudev	cudev/ptr2d/deriv.hpp	/^namespace cv { namespace cudev {$/;"	n	namespace:cv
cudev	cudev/ptr2d/detail/gpumat.hpp	/^namespace cv { namespace cudev {$/;"	n	namespace:cv
cudev	cudev/ptr2d/extrapolation.hpp	/^namespace cv { namespace cudev {$/;"	n	namespace:cv
cudev	cudev/ptr2d/glob.hpp	/^namespace cv { namespace cudev {$/;"	n	namespace:cv
cudev	cudev/ptr2d/gpumat.hpp	/^namespace cv { namespace cudev {$/;"	n	namespace:cv
cudev	cudev/ptr2d/interpolation.hpp	/^namespace cv { namespace cudev {$/;"	n	namespace:cv
cudev	cudev/ptr2d/lut.hpp	/^namespace cv { namespace cudev {$/;"	n	namespace:cv
cudev	cudev/ptr2d/mask.hpp	/^namespace cv { namespace cudev {$/;"	n	namespace:cv
cudev	cudev/ptr2d/remap.hpp	/^namespace cv { namespace cudev {$/;"	n	namespace:cv
cudev	cudev/ptr2d/resize.hpp	/^namespace cv { namespace cudev {$/;"	n	namespace:cv
cudev	cudev/ptr2d/texture.hpp	/^namespace cv { namespace cudev {$/;"	n	namespace:cv
cudev	cudev/ptr2d/traits.hpp	/^namespace cv { namespace cudev {$/;"	n	namespace:cv
cudev	cudev/ptr2d/transform.hpp	/^namespace cv { namespace cudev {$/;"	n	namespace:cv
cudev	cudev/ptr2d/warping.hpp	/^namespace cv { namespace cudev {$/;"	n	namespace:cv
cudev	cudev/ptr2d/zip.hpp	/^namespace cv { namespace cudev {$/;"	n	namespace:cv
cudev	cudev/util/atomic.hpp	/^namespace cv { namespace cudev {$/;"	n	namespace:cv
cudev	cudev/util/detail/tuple.hpp	/^namespace cv { namespace cudev {$/;"	n	namespace:cv
cudev	cudev/util/detail/type_traits.hpp	/^namespace cv { namespace cudev {$/;"	n	namespace:cv
cudev	cudev/util/limits.hpp	/^namespace cv { namespace cudev {$/;"	n	namespace:cv
cudev	cudev/util/saturate_cast.hpp	/^namespace cv { namespace cudev {$/;"	n	namespace:cv
cudev	cudev/util/simd_functions.hpp	/^namespace cv { namespace cudev {$/;"	n	namespace:cv
cudev	cudev/util/tuple.hpp	/^namespace cv { namespace cudev {$/;"	n	namespace:cv
cudev	cudev/util/type_traits.hpp	/^namespace cv { namespace cudev {$/;"	n	namespace:cv
cudev	cudev/util/vec_math.hpp	/^namespace cv { namespace cudev {$/;"	n	namespace:cv
cudev	cudev/util/vec_traits.hpp	/^namespace cv { namespace cudev {$/;"	n	namespace:cv
cudev	cudev/warp/detail/reduce.hpp	/^namespace cv { namespace cudev {$/;"	n	namespace:cv
cudev	cudev/warp/detail/reduce_key_val.hpp	/^namespace cv { namespace cudev {$/;"	n	namespace:cv
cudev	cudev/warp/reduce.hpp	/^namespace cv { namespace cudev {$/;"	n	namespace:cv
cudev	cudev/warp/scan.hpp	/^namespace cv { namespace cudev {$/;"	n	namespace:cv
cudev	cudev/warp/shuffle.hpp	/^namespace cv { namespace cudev {$/;"	n	namespace:cv
cudev	cudev/warp/warp.hpp	/^namespace cv { namespace cudev {$/;"	n	namespace:cv
curMask	core/cuda/utility.hpp	/^        PtrStepb curMask;$/;"	m	struct:cv::cuda::device::MaskCollection
curPos_	videostab/stabilizer.hpp	/^    int curPos_;$/;"	m	class:cv::videostab::StabilizerBase
curStabilizedPos_	videostab/stabilizer.hpp	/^    int curStabilizedPos_;$/;"	m	class:cv::videostab::StabilizerBase
curidx	core/types_c.h	/^    int curidx;$/;"	m	struct:CvSparseMatIterator
currAllocator	core/mat.hpp	/^    const MatAllocator* currAllocator;$/;"	m	struct:cv::UMatData
current10_	ts/ts_gtest.h	/^    typename ParamGenerator<T10>::iterator current10_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
current1_	ts/ts_gtest.h	/^    typename ParamGenerator<T1>::iterator current1_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
current1_	ts/ts_gtest.h	/^    typename ParamGenerator<T1>::iterator current1_;$/;"	m	class:testing::internal::CartesianProductGenerator2::Iterator
current1_	ts/ts_gtest.h	/^    typename ParamGenerator<T1>::iterator current1_;$/;"	m	class:testing::internal::CartesianProductGenerator3::Iterator
current1_	ts/ts_gtest.h	/^    typename ParamGenerator<T1>::iterator current1_;$/;"	m	class:testing::internal::CartesianProductGenerator4::Iterator
current1_	ts/ts_gtest.h	/^    typename ParamGenerator<T1>::iterator current1_;$/;"	m	class:testing::internal::CartesianProductGenerator5::Iterator
current1_	ts/ts_gtest.h	/^    typename ParamGenerator<T1>::iterator current1_;$/;"	m	class:testing::internal::CartesianProductGenerator6::Iterator
current1_	ts/ts_gtest.h	/^    typename ParamGenerator<T1>::iterator current1_;$/;"	m	class:testing::internal::CartesianProductGenerator7::Iterator
current1_	ts/ts_gtest.h	/^    typename ParamGenerator<T1>::iterator current1_;$/;"	m	class:testing::internal::CartesianProductGenerator8::Iterator
current1_	ts/ts_gtest.h	/^    typename ParamGenerator<T1>::iterator current1_;$/;"	m	class:testing::internal::CartesianProductGenerator9::Iterator
current2_	ts/ts_gtest.h	/^    typename ParamGenerator<T2>::iterator current2_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
current2_	ts/ts_gtest.h	/^    typename ParamGenerator<T2>::iterator current2_;$/;"	m	class:testing::internal::CartesianProductGenerator2::Iterator
current2_	ts/ts_gtest.h	/^    typename ParamGenerator<T2>::iterator current2_;$/;"	m	class:testing::internal::CartesianProductGenerator3::Iterator
current2_	ts/ts_gtest.h	/^    typename ParamGenerator<T2>::iterator current2_;$/;"	m	class:testing::internal::CartesianProductGenerator4::Iterator
current2_	ts/ts_gtest.h	/^    typename ParamGenerator<T2>::iterator current2_;$/;"	m	class:testing::internal::CartesianProductGenerator5::Iterator
current2_	ts/ts_gtest.h	/^    typename ParamGenerator<T2>::iterator current2_;$/;"	m	class:testing::internal::CartesianProductGenerator6::Iterator
current2_	ts/ts_gtest.h	/^    typename ParamGenerator<T2>::iterator current2_;$/;"	m	class:testing::internal::CartesianProductGenerator7::Iterator
current2_	ts/ts_gtest.h	/^    typename ParamGenerator<T2>::iterator current2_;$/;"	m	class:testing::internal::CartesianProductGenerator8::Iterator
current2_	ts/ts_gtest.h	/^    typename ParamGenerator<T2>::iterator current2_;$/;"	m	class:testing::internal::CartesianProductGenerator9::Iterator
current3_	ts/ts_gtest.h	/^    typename ParamGenerator<T3>::iterator current3_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
current3_	ts/ts_gtest.h	/^    typename ParamGenerator<T3>::iterator current3_;$/;"	m	class:testing::internal::CartesianProductGenerator3::Iterator
current3_	ts/ts_gtest.h	/^    typename ParamGenerator<T3>::iterator current3_;$/;"	m	class:testing::internal::CartesianProductGenerator4::Iterator
current3_	ts/ts_gtest.h	/^    typename ParamGenerator<T3>::iterator current3_;$/;"	m	class:testing::internal::CartesianProductGenerator5::Iterator
current3_	ts/ts_gtest.h	/^    typename ParamGenerator<T3>::iterator current3_;$/;"	m	class:testing::internal::CartesianProductGenerator6::Iterator
current3_	ts/ts_gtest.h	/^    typename ParamGenerator<T3>::iterator current3_;$/;"	m	class:testing::internal::CartesianProductGenerator7::Iterator
current3_	ts/ts_gtest.h	/^    typename ParamGenerator<T3>::iterator current3_;$/;"	m	class:testing::internal::CartesianProductGenerator8::Iterator
current3_	ts/ts_gtest.h	/^    typename ParamGenerator<T3>::iterator current3_;$/;"	m	class:testing::internal::CartesianProductGenerator9::Iterator
current4_	ts/ts_gtest.h	/^    typename ParamGenerator<T4>::iterator current4_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
current4_	ts/ts_gtest.h	/^    typename ParamGenerator<T4>::iterator current4_;$/;"	m	class:testing::internal::CartesianProductGenerator4::Iterator
current4_	ts/ts_gtest.h	/^    typename ParamGenerator<T4>::iterator current4_;$/;"	m	class:testing::internal::CartesianProductGenerator5::Iterator
current4_	ts/ts_gtest.h	/^    typename ParamGenerator<T4>::iterator current4_;$/;"	m	class:testing::internal::CartesianProductGenerator6::Iterator
current4_	ts/ts_gtest.h	/^    typename ParamGenerator<T4>::iterator current4_;$/;"	m	class:testing::internal::CartesianProductGenerator7::Iterator
current4_	ts/ts_gtest.h	/^    typename ParamGenerator<T4>::iterator current4_;$/;"	m	class:testing::internal::CartesianProductGenerator8::Iterator
current4_	ts/ts_gtest.h	/^    typename ParamGenerator<T4>::iterator current4_;$/;"	m	class:testing::internal::CartesianProductGenerator9::Iterator
current5_	ts/ts_gtest.h	/^    typename ParamGenerator<T5>::iterator current5_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
current5_	ts/ts_gtest.h	/^    typename ParamGenerator<T5>::iterator current5_;$/;"	m	class:testing::internal::CartesianProductGenerator5::Iterator
current5_	ts/ts_gtest.h	/^    typename ParamGenerator<T5>::iterator current5_;$/;"	m	class:testing::internal::CartesianProductGenerator6::Iterator
current5_	ts/ts_gtest.h	/^    typename ParamGenerator<T5>::iterator current5_;$/;"	m	class:testing::internal::CartesianProductGenerator7::Iterator
current5_	ts/ts_gtest.h	/^    typename ParamGenerator<T5>::iterator current5_;$/;"	m	class:testing::internal::CartesianProductGenerator8::Iterator
current5_	ts/ts_gtest.h	/^    typename ParamGenerator<T5>::iterator current5_;$/;"	m	class:testing::internal::CartesianProductGenerator9::Iterator
current6_	ts/ts_gtest.h	/^    typename ParamGenerator<T6>::iterator current6_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
current6_	ts/ts_gtest.h	/^    typename ParamGenerator<T6>::iterator current6_;$/;"	m	class:testing::internal::CartesianProductGenerator6::Iterator
current6_	ts/ts_gtest.h	/^    typename ParamGenerator<T6>::iterator current6_;$/;"	m	class:testing::internal::CartesianProductGenerator7::Iterator
current6_	ts/ts_gtest.h	/^    typename ParamGenerator<T6>::iterator current6_;$/;"	m	class:testing::internal::CartesianProductGenerator8::Iterator
current6_	ts/ts_gtest.h	/^    typename ParamGenerator<T6>::iterator current6_;$/;"	m	class:testing::internal::CartesianProductGenerator9::Iterator
current7_	ts/ts_gtest.h	/^    typename ParamGenerator<T7>::iterator current7_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
current7_	ts/ts_gtest.h	/^    typename ParamGenerator<T7>::iterator current7_;$/;"	m	class:testing::internal::CartesianProductGenerator7::Iterator
current7_	ts/ts_gtest.h	/^    typename ParamGenerator<T7>::iterator current7_;$/;"	m	class:testing::internal::CartesianProductGenerator8::Iterator
current7_	ts/ts_gtest.h	/^    typename ParamGenerator<T7>::iterator current7_;$/;"	m	class:testing::internal::CartesianProductGenerator9::Iterator
current8_	ts/ts_gtest.h	/^    typename ParamGenerator<T8>::iterator current8_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
current8_	ts/ts_gtest.h	/^    typename ParamGenerator<T8>::iterator current8_;$/;"	m	class:testing::internal::CartesianProductGenerator8::Iterator
current8_	ts/ts_gtest.h	/^    typename ParamGenerator<T8>::iterator current8_;$/;"	m	class:testing::internal::CartesianProductGenerator9::Iterator
current9_	ts/ts_gtest.h	/^    typename ParamGenerator<T9>::iterator current9_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
current9_	ts/ts_gtest.h	/^    typename ParamGenerator<T9>::iterator current9_;$/;"	m	class:testing::internal::CartesianProductGenerator9::Iterator
currentIter	ts/ts_perf.hpp	/^    unsigned int currentIter;$/;"	m	class:perf::TestBase
currentSize	cudalegacy/NCV.hpp	/^    size_t currentSize;$/;"	m	class:NCVMemNativeAllocator
currentSize	cudalegacy/NCV.hpp	/^    size_t currentSize;$/;"	m	class:NCVMemStackAllocator
currentTestNodeName	ts/ts_perf.hpp	/^    std::string currentTestNodeName;$/;"	m	class:perf::Regression
current_test_info	ts.hpp	/^    TestInfo current_test_info;$/;"	m	class:cvtest::TS
current_value_	ts/ts_gtest.h	/^    ParamType current_value_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
current_value_	ts/ts_gtest.h	/^    ParamType current_value_;$/;"	m	class:testing::internal::CartesianProductGenerator2::Iterator
current_value_	ts/ts_gtest.h	/^    ParamType current_value_;$/;"	m	class:testing::internal::CartesianProductGenerator3::Iterator
current_value_	ts/ts_gtest.h	/^    ParamType current_value_;$/;"	m	class:testing::internal::CartesianProductGenerator4::Iterator
current_value_	ts/ts_gtest.h	/^    ParamType current_value_;$/;"	m	class:testing::internal::CartesianProductGenerator5::Iterator
current_value_	ts/ts_gtest.h	/^    ParamType current_value_;$/;"	m	class:testing::internal::CartesianProductGenerator6::Iterator
current_value_	ts/ts_gtest.h	/^    ParamType current_value_;$/;"	m	class:testing::internal::CartesianProductGenerator7::Iterator
current_value_	ts/ts_gtest.h	/^    ParamType current_value_;$/;"	m	class:testing::internal::CartesianProductGenerator8::Iterator
current_value_	ts/ts_gtest.h	/^    ParamType current_value_;$/;"	m	class:testing::internal::CartesianProductGenerator9::Iterator
cv	calib3d.hpp	/^namespace cv$/;"	n
cv	core.hpp	/^namespace cv {$/;"	n
cv	core/affine.hpp	/^namespace cv$/;"	n
cv	core/base.hpp	/^namespace cv$/;"	n
cv	core/bufferpool.hpp	/^namespace cv$/;"	n
cv	core/core_c.h	/^namespace cv$/;"	n
cv	core/cuda.hpp	/^namespace cv { namespace cuda {$/;"	n
cv	core/cuda.inl.hpp	/^namespace cv { namespace cuda {$/;"	n
cv	core/cuda.inl.hpp	/^namespace cv {$/;"	n
cv	core/cuda/block.hpp	/^namespace cv { namespace cuda { namespace device$/;"	n
cv	core/cuda/border_interpolate.hpp	/^namespace cv { namespace cuda { namespace device$/;"	n
cv	core/cuda/color.hpp	/^namespace cv { namespace cuda { namespace device$/;"	n
cv	core/cuda/common.hpp	/^namespace cv { namespace cuda {$/;"	n
cv	core/cuda/common.hpp	/^namespace cv { namespace cuda$/;"	n
cv	core/cuda/datamov_utils.hpp	/^namespace cv { namespace cuda { namespace device$/;"	n
cv	core/cuda/detail/color_detail.hpp	/^namespace cv { namespace cuda { namespace device$/;"	n
cv	core/cuda/detail/reduce.hpp	/^namespace cv { namespace cuda { namespace device$/;"	n
cv	core/cuda/detail/reduce_key_val.hpp	/^namespace cv { namespace cuda { namespace device$/;"	n
cv	core/cuda/detail/transform_detail.hpp	/^namespace cv { namespace cuda { namespace device$/;"	n
cv	core/cuda/detail/type_traits_detail.hpp	/^namespace cv { namespace cuda { namespace device$/;"	n
cv	core/cuda/detail/vec_distance_detail.hpp	/^namespace cv { namespace cuda { namespace device$/;"	n
cv	core/cuda/dynamic_smem.hpp	/^namespace cv { namespace cuda { namespace device$/;"	n
cv	core/cuda/emulation.hpp	/^namespace cv { namespace cuda { namespace device$/;"	n
cv	core/cuda/filters.hpp	/^namespace cv { namespace cuda { namespace device$/;"	n
cv	core/cuda/funcattrib.hpp	/^namespace cv { namespace cuda { namespace device$/;"	n
cv	core/cuda/functional.hpp	/^namespace cv { namespace cuda { namespace device$/;"	n
cv	core/cuda/limits.hpp	/^namespace cv { namespace cuda { namespace device$/;"	n
cv	core/cuda/reduce.hpp	/^namespace cv { namespace cuda { namespace device$/;"	n
cv	core/cuda/saturate_cast.hpp	/^namespace cv { namespace cuda { namespace device$/;"	n
cv	core/cuda/scan.hpp	/^namespace cv { namespace cuda { namespace device$/;"	n
cv	core/cuda/simd_functions.hpp	/^namespace cv { namespace cuda { namespace device$/;"	n
cv	core/cuda/transform.hpp	/^namespace cv { namespace cuda { namespace device$/;"	n
cv	core/cuda/type_traits.hpp	/^namespace cv { namespace cuda { namespace device$/;"	n
cv	core/cuda/utility.hpp	/^namespace cv { namespace cuda { namespace device$/;"	n
cv	core/cuda/vec_distance.hpp	/^namespace cv { namespace cuda { namespace device$/;"	n
cv	core/cuda/vec_math.hpp	/^namespace cv { namespace cuda { namespace device$/;"	n
cv	core/cuda/vec_traits.hpp	/^namespace cv { namespace cuda { namespace device$/;"	n
cv	core/cuda/warp.hpp	/^namespace cv { namespace cuda { namespace device$/;"	n
cv	core/cuda/warp_reduce.hpp	/^namespace cv { namespace cuda { namespace device$/;"	n
cv	core/cuda/warp_shuffle.hpp	/^namespace cv { namespace cuda { namespace device$/;"	n
cv	core/cuda_stream_accessor.hpp	/^namespace cv$/;"	n
cv	core/cuda_types.hpp	/^namespace cv$/;"	n
cv	core/cvstd.hpp	/^namespace cv {$/;"	n
cv	core/cvstd.hpp	/^namespace cv$/;"	n
cv	core/cvstd.inl.hpp	/^namespace cv$/;"	n
cv	core/directx.hpp	/^namespace cv { namespace directx {$/;"	n
cv	core/eigen.hpp	/^namespace cv$/;"	n
cv	core/ippasync.hpp	/^namespace cv$/;"	n
cv	core/mat.hpp	/^namespace cv$/;"	n
cv	core/mat.inl.hpp	/^namespace cv$/;"	n
cv	core/matx.hpp	/^namespace cv$/;"	n
cv	core/ocl.hpp	/^namespace cv { namespace ocl {$/;"	n
cv	core/ocl_genbase.hpp	/^namespace cv$/;"	n
cv	core/opencl/opencl_svm.hpp	/^namespace cv { namespace ocl { namespace svm {$/;"	n
cv	core/opengl.hpp	/^namespace cv { namespace cuda {$/;"	n
cv	core/opengl.hpp	/^namespace cv { namespace ogl {$/;"	n
cv	core/operations.hpp	/^namespace cv$/;"	n
cv	core/optim.hpp	/^namespace cv$/;"	n
cv	core/persistence.hpp	/^namespace cv {$/;"	n
cv	core/private.cuda.hpp	/^namespace cv { namespace cuda {$/;"	n
cv	core/private.hpp	/^namespace cv$/;"	n
cv	core/ptr.inl.hpp	/^namespace cv {$/;"	n
cv	core/traits.hpp	/^namespace cv$/;"	n
cv	core/types.hpp	/^namespace cv$/;"	n
cv	core/utility.hpp	/^namespace cv$/;"	n
cv	core/wimage.hpp	/^namespace cv {$/;"	n
cv	cudaarithm.hpp	/^namespace cv { namespace cuda {$/;"	n
cv	cudabgsegm.hpp	/^namespace cv { namespace cuda {$/;"	n
cv	cudacodec.hpp	/^namespace cv { namespace cudacodec {$/;"	n
cv	cudafeatures2d.hpp	/^namespace cv { namespace cuda {$/;"	n
cv	cudafilters.hpp	/^namespace cv { namespace cuda {$/;"	n
cv	cudaimgproc.hpp	/^namespace cv { namespace cuda {$/;"	n
cv	cudalegacy.hpp	/^namespace cv { namespace cuda {$/;"	n
cv	cudalegacy/NCVPyramid.hpp	/^namespace cv { namespace cuda { namespace device$/;"	n
cv	cudalegacy/private.hpp	/^namespace cv { namespace cuda$/;"	n
cv	cudaobjdetect.hpp	/^namespace cv { namespace cuda {$/;"	n
cv	cudaoptflow.hpp	/^namespace cv { namespace cuda {$/;"	n
cv	cudastereo.hpp	/^namespace cv { namespace cuda {$/;"	n
cv	cudawarping.hpp	/^namespace cv { namespace cuda {$/;"	n
cv	cudev/block/block.hpp	/^namespace cv { namespace cudev {$/;"	n
cv	cudev/block/detail/reduce.hpp	/^namespace cv { namespace cudev {$/;"	n
cv	cudev/block/detail/reduce_key_val.hpp	/^namespace cv { namespace cudev {$/;"	n
cv	cudev/block/dynamic_smem.hpp	/^namespace cv { namespace cudev {$/;"	n
cv	cudev/block/reduce.hpp	/^namespace cv { namespace cudev {$/;"	n
cv	cudev/block/scan.hpp	/^namespace cv { namespace cudev {$/;"	n
cv	cudev/block/vec_distance.hpp	/^namespace cv { namespace cudev {$/;"	n
cv	cudev/common.hpp	/^namespace cv { namespace cudev {$/;"	n
cv	cudev/expr/binary_func.hpp	/^namespace cv { namespace cudev {$/;"	n
cv	cudev/expr/binary_op.hpp	/^namespace cv { namespace cudev {$/;"	n
cv	cudev/expr/color.hpp	/^namespace cv { namespace cudev {$/;"	n
cv	cudev/expr/deriv.hpp	/^namespace cv { namespace cudev {$/;"	n
cv	cudev/expr/expr.hpp	/^namespace cv { namespace cudev {$/;"	n
cv	cudev/expr/per_element_func.hpp	/^namespace cv { namespace cudev {$/;"	n
cv	cudev/expr/reduction.hpp	/^namespace cv { namespace cudev {$/;"	n
cv	cudev/expr/unary_func.hpp	/^namespace cv { namespace cudev {$/;"	n
cv	cudev/expr/unary_op.hpp	/^namespace cv { namespace cudev {$/;"	n
cv	cudev/expr/warping.hpp	/^namespace cv { namespace cudev {$/;"	n
cv	cudev/functional/color_cvt.hpp	/^namespace cv { namespace cudev {$/;"	n
cv	cudev/functional/detail/color_cvt.hpp	/^namespace cv { namespace cudev {$/;"	n
cv	cudev/functional/functional.hpp	/^namespace cv { namespace cudev {$/;"	n
cv	cudev/functional/tuple_adapter.hpp	/^namespace cv { namespace cudev {$/;"	n
cv	cudev/grid/copy.hpp	/^namespace cv { namespace cudev {$/;"	n
cv	cudev/grid/detail/copy.hpp	/^namespace cv { namespace cudev {$/;"	n
cv	cudev/grid/detail/histogram.hpp	/^namespace cv { namespace cudev {$/;"	n
cv	cudev/grid/detail/integral.hpp	/^namespace cv { namespace cudev {$/;"	n
cv	cudev/grid/detail/minmaxloc.hpp	/^namespace cv { namespace cudev {$/;"	n
cv	cudev/grid/detail/pyr_down.hpp	/^namespace cv { namespace cudev {$/;"	n
cv	cudev/grid/detail/pyr_up.hpp	/^namespace cv { namespace cudev {$/;"	n
cv	cudev/grid/detail/reduce.hpp	/^namespace cv { namespace cudev {$/;"	n
cv	cudev/grid/detail/reduce_to_column.hpp	/^namespace cv { namespace cudev {$/;"	n
cv	cudev/grid/detail/reduce_to_row.hpp	/^namespace cv { namespace cudev {$/;"	n
cv	cudev/grid/detail/split_merge.hpp	/^namespace cv { namespace cudev {$/;"	n
cv	cudev/grid/detail/transform.hpp	/^namespace cv { namespace cudev {$/;"	n
cv	cudev/grid/detail/transpose.hpp	/^namespace cv { namespace cudev {$/;"	n
cv	cudev/grid/histogram.hpp	/^namespace cv { namespace cudev {$/;"	n
cv	cudev/grid/integral.hpp	/^namespace cv { namespace cudev {$/;"	n
cv	cudev/grid/pyramids.hpp	/^namespace cv { namespace cudev {$/;"	n
cv	cudev/grid/reduce.hpp	/^namespace cv { namespace cudev {$/;"	n
cv	cudev/grid/reduce_to_vec.hpp	/^namespace cv { namespace cudev {$/;"	n
cv	cudev/grid/split_merge.hpp	/^namespace cv { namespace cudev {$/;"	n
cv	cudev/grid/transform.hpp	/^namespace cv { namespace cudev {$/;"	n
cv	cudev/grid/transpose.hpp	/^namespace cv { namespace cudev {$/;"	n
cv	cudev/ptr2d/constant.hpp	/^namespace cv { namespace cudev {$/;"	n
cv	cudev/ptr2d/deriv.hpp	/^namespace cv { namespace cudev {$/;"	n
cv	cudev/ptr2d/detail/gpumat.hpp	/^namespace cv { namespace cudev {$/;"	n
cv	cudev/ptr2d/detail/gpumat.hpp	/^namespace cv {$/;"	n
cv	cudev/ptr2d/extrapolation.hpp	/^namespace cv { namespace cudev {$/;"	n
cv	cudev/ptr2d/glob.hpp	/^namespace cv { namespace cudev {$/;"	n
cv	cudev/ptr2d/gpumat.hpp	/^namespace cv { namespace cudev {$/;"	n
cv	cudev/ptr2d/interpolation.hpp	/^namespace cv { namespace cudev {$/;"	n
cv	cudev/ptr2d/lut.hpp	/^namespace cv { namespace cudev {$/;"	n
cv	cudev/ptr2d/mask.hpp	/^namespace cv { namespace cudev {$/;"	n
cv	cudev/ptr2d/remap.hpp	/^namespace cv { namespace cudev {$/;"	n
cv	cudev/ptr2d/resize.hpp	/^namespace cv { namespace cudev {$/;"	n
cv	cudev/ptr2d/texture.hpp	/^namespace cv { namespace cudev {$/;"	n
cv	cudev/ptr2d/traits.hpp	/^namespace cv { namespace cudev {$/;"	n
cv	cudev/ptr2d/transform.hpp	/^namespace cv { namespace cudev {$/;"	n
cv	cudev/ptr2d/warping.hpp	/^namespace cv { namespace cudev {$/;"	n
cv	cudev/ptr2d/zip.hpp	/^namespace cv { namespace cudev {$/;"	n
cv	cudev/util/atomic.hpp	/^namespace cv { namespace cudev {$/;"	n
cv	cudev/util/detail/tuple.hpp	/^namespace cv { namespace cudev {$/;"	n
cv	cudev/util/detail/type_traits.hpp	/^namespace cv { namespace cudev {$/;"	n
cv	cudev/util/limits.hpp	/^namespace cv { namespace cudev {$/;"	n
cv	cudev/util/saturate_cast.hpp	/^namespace cv { namespace cudev {$/;"	n
cv	cudev/util/simd_functions.hpp	/^namespace cv { namespace cudev {$/;"	n
cv	cudev/util/tuple.hpp	/^namespace cv { namespace cudev {$/;"	n
cv	cudev/util/type_traits.hpp	/^namespace cv { namespace cudev {$/;"	n
cv	cudev/util/vec_math.hpp	/^namespace cv { namespace cudev {$/;"	n
cv	cudev/util/vec_traits.hpp	/^namespace cv { namespace cudev {$/;"	n
cv	cudev/util/vec_traits.hpp	/^namespace cv {$/;"	n
cv	cudev/warp/detail/reduce.hpp	/^namespace cv { namespace cudev {$/;"	n
cv	cudev/warp/detail/reduce_key_val.hpp	/^namespace cv { namespace cudev {$/;"	n
cv	cudev/warp/reduce.hpp	/^namespace cv { namespace cudev {$/;"	n
cv	cudev/warp/scan.hpp	/^namespace cv { namespace cudev {$/;"	n
cv	cudev/warp/shuffle.hpp	/^namespace cv { namespace cudev {$/;"	n
cv	cudev/warp/warp.hpp	/^namespace cv { namespace cudev {$/;"	n
cv	features2d.hpp	/^namespace cv$/;"	n
cv	flann.hpp	/^namespace cv$/;"	n
cv	flann/miniflann.hpp	/^namespace cv$/;"	n
cv	hal.hpp	/^namespace cv { namespace hal {$/;"	n
cv	hal/defs.h	/^namespace cv$/;"	n
cv	hal/intrin.hpp	/^namespace cv {$/;"	n
cv	hal/intrin_cpp.hpp	/^namespace cv$/;"	n
cv	hal/intrin_neon.hpp	/^namespace cv$/;"	n
cv	hal/intrin_sse.hpp	/^namespace cv$/;"	n
cv	highgui.hpp	/^namespace cv$/;"	n
cv	imgcodecs.hpp	/^namespace cv$/;"	n
cv	imgproc.hpp	/^namespace cv$/;"	n
cv	ml.hpp	/^namespace cv$/;"	n
cv	objdetect.hpp	/^namespace cv$/;"	n
cv	objdetect/detection_based_tracker.hpp	/^namespace cv$/;"	n
cv	photo.hpp	/^namespace cv$/;"	n
cv	photo/cuda.hpp	/^namespace cv { namespace cuda {$/;"	n
cv	shape/emdL1.hpp	/^namespace cv$/;"	n
cv	shape/hist_cost.hpp	/^namespace cv$/;"	n
cv	shape/shape_distance.hpp	/^namespace cv$/;"	n
cv	shape/shape_transformer.hpp	/^namespace cv$/;"	n
cv	stitching.hpp	/^namespace cv {$/;"	n
cv	stitching/detail/autocalib.hpp	/^namespace cv {$/;"	n
cv	stitching/detail/blenders.hpp	/^namespace cv {$/;"	n
cv	stitching/detail/camera.hpp	/^namespace cv {$/;"	n
cv	stitching/detail/exposure_compensate.hpp	/^namespace cv {$/;"	n
cv	stitching/detail/matchers.hpp	/^namespace cv {$/;"	n
cv	stitching/detail/motion_estimators.hpp	/^namespace cv {$/;"	n
cv	stitching/detail/seam_finders.hpp	/^namespace cv {$/;"	n
cv	stitching/detail/timelapsers.hpp	/^namespace cv {$/;"	n
cv	stitching/detail/util.hpp	/^namespace cv {$/;"	n
cv	stitching/detail/util_inl.hpp	/^namespace cv {$/;"	n
cv	stitching/detail/warpers.hpp	/^namespace cv {$/;"	n
cv	stitching/detail/warpers_inl.hpp	/^namespace cv {$/;"	n
cv	stitching/warpers.hpp	/^namespace cv {$/;"	n
cv	superres.hpp	/^namespace cv$/;"	n
cv	superres/optical_flow.hpp	/^namespace cv$/;"	n
cv	ts/cuda_test.hpp	/^namespace cv { namespace cuda$/;"	n
cv	ts/ts_perf.hpp	/^namespace cv { namespace cuda {} namespace ocl {} }$/;"	n
cv	ts/ts_perf.hpp	/^namespace cv$/;"	n
cv	video/background_segm.hpp	/^namespace cv$/;"	n
cv	video/tracking.hpp	/^namespace cv$/;"	n
cv	videoio.hpp	/^namespace cv$/;"	n
cv	videoio/cap_winrt.hpp	/^namespace cv$/;"	n
cv	videostab/deblurring.hpp	/^namespace cv$/;"	n
cv	videostab/fast_marching.hpp	/^namespace cv$/;"	n
cv	videostab/fast_marching_inl.hpp	/^namespace cv$/;"	n
cv	videostab/frame_source.hpp	/^namespace cv$/;"	n
cv	videostab/global_motion.hpp	/^namespace cv$/;"	n
cv	videostab/inpainting.hpp	/^namespace cv$/;"	n
cv	videostab/log.hpp	/^namespace cv$/;"	n
cv	videostab/motion_core.hpp	/^namespace cv$/;"	n
cv	videostab/motion_stabilizing.hpp	/^namespace cv$/;"	n
cv	videostab/optical_flow.hpp	/^namespace cv$/;"	n
cv	videostab/outlier_rejection.hpp	/^namespace cv$/;"	n
cv	videostab/ring_buffer.hpp	/^namespace cv$/;"	n
cv	videostab/stabilizer.hpp	/^namespace cv$/;"	n
cv	videostab/wobble_suppression.hpp	/^namespace cv$/;"	n
cv	viz/types.hpp	/^namespace cv$/;"	n
cv	viz/viz3d.hpp	/^namespace cv$/;"	n
cv	viz/vizcore.hpp	/^namespace cv$/;"	n
cv	viz/widget_accessor.hpp	/^namespace cv$/;"	n
cv	viz/widgets.hpp	/^namespace cv$/;"	n
cv	world.hpp	/^namespace cv$/;"	n
cv2eigen	core/eigen.hpp	/^void cv2eigen( const Mat& src,$/;"	f	namespace:cv
cv2eigen	core/eigen.hpp	/^void cv2eigen( const Matx<_Tp, 1, _cols>& src,$/;"	f	namespace:cv
cv2eigen	core/eigen.hpp	/^void cv2eigen( const Matx<_Tp, _rows, 1>& src,$/;"	f	namespace:cv
cv2eigen	core/eigen.hpp	/^void cv2eigen( const Matx<_Tp, _rows, _cols>& src,$/;"	f	namespace:cv
cvAXPY	core/core_c.h	1087;"	d
cvAbs	core/core_c.h	1176;"	d
cvAddSearchPath	highgui/highgui_c.h	222;"	d
cvAlign	core/private.hpp	/^static inline int cvAlign( int size, int align )$/;"	f
cvAlignPtr	core/private.hpp	/^static inline void* cvAlignPtr( const void* ptr, int align = 32 )$/;"	f
cvAttrList	core/types_c.h	/^CV_INLINE CvAttrList cvAttrList( const char** attr CV_DEFAULT(NULL),$/;"	f
cvCalcBackProject	imgproc/imgproc_c.h	784;"	d
cvCalcBackProjectPatch	imgproc/imgproc_c.h	810;"	d
cvCalcHist	imgproc/imgproc_c.h	/^CV_INLINE  void  cvCalcHist( IplImage** image, CvHistogram* hist,$/;"	f
cvCaptureFromAVI	videoio/videoio_c.h	395;"	d
cvCaptureFromCAM	videoio/videoio_c.h	394;"	d
cvCaptureFromFile	videoio/videoio_c.h	393;"	d
cvCeil	hal/defs.h	/^CV_INLINE int cvCeil( double value )$/;"	f
cvCeil	hal/defs.h	/^CV_INLINE int cvCeil( float value )$/;"	f
cvCeil	hal/defs.h	/^CV_INLINE int cvCeil( int value )$/;"	f
cvCheckArray	core/core_c.h	1223;"	d
cvCloneSeq	core/core_c.h	/^CV_INLINE CvSeq* cvCloneSeq( const CvSeq* seq, CvMemStorage* storage CV_DEFAULT(NULL))$/;"	f
cvContourPerimeter	imgproc/imgproc_c.h	/^CV_INLINE double cvContourPerimeter( const void* contour )$/;"	f
cvConvert	core/core_c.h	1023;"	d
cvCreateAVIWriter	videoio/videoio_c.h	396;"	d
cvCvtScale	core/core_c.h	1021;"	d
cvCvtScaleAbs	core/core_c.h	1034;"	d
cvDecRefData	core/core_c.h	/^CV_INLINE  void  cvDecRefData( CvArr* arr )$/;"	f
cvDrawCircle	imgproc/imgproc_c.h	1070;"	d
cvDrawEllipse	imgproc/imgproc_c.h	1071;"	d
cvDrawLine	imgproc/imgproc_c.h	1069;"	d
cvDrawPolyLine	imgproc/imgproc_c.h	1072;"	d
cvDrawRect	imgproc/imgproc_c.h	1068;"	d
cvEllipseBox	imgproc/imgproc_c.h	/^CV_INLINE  void  cvEllipseBox( CvArr* img, CvBox2D box, CvScalar color,$/;"	f
cvFFT	core/core_c.h	1524;"	d
cvFloor	hal/defs.h	/^CV_INLINE int cvFloor( double value )$/;"	f
cvFloor	hal/defs.h	/^CV_INLINE int cvFloor( float value )$/;"	f
cvFloor	hal/defs.h	/^CV_INLINE int cvFloor( int value )$/;"	f
cvFont	imgproc/imgproc_c.h	/^CV_INLINE CvFont cvFont( double scale, int thickness CV_DEFAULT(1) )$/;"	f
cvFree	core/core_c.h	89;"	d
cvFuncName	core/core_c.h	2677;"	d
cvGetCol	core/core_c.h	/^CV_INLINE  CvMat*  cvGetCol( const CvArr* arr, CvMat* submat, int col )$/;"	f
cvGetGraphVtx	core/core_c.h	1828;"	d
cvGetMatSize	core/private.hpp	/^static inline cv::Size cvGetMatSize( const CvMat* mat )$/;"	f
cvGetNextSparseNode	core/core_c.h	/^CV_INLINE CvSparseNode* cvGetNextSparseNode( CvSparseMatIterator* mat_iterator )$/;"	f
cvGetRow	core/core_c.h	/^CV_INLINE  CvMat*  cvGetRow( const CvArr* arr, CvMat* submat, int row )$/;"	f
cvGetSetElem	core/core_c.h	/^CV_INLINE CvSetElem* cvGetSetElem( const CvSet* set_header, int idx )$/;"	f
cvGetSubArr	core/core_c.h	358;"	d
cvGraphEdgeIdx	core/core_c.h	1834;"	d
cvGraphFindEdge	core/core_c.h	1815;"	d
cvGraphFindEdgeByPtr	core/core_c.h	1816;"	d
cvGraphGetEdgeCount	core/core_c.h	1837;"	d
cvGraphGetVtxCount	core/core_c.h	1836;"	d
cvGraphVtxIdx	core/core_c.h	1831;"	d
cvIncRefData	core/core_c.h	/^CV_INLINE  int  cvIncRefData( CvArr* arr )$/;"	f
cvInv	core/core_c.h	1351;"	d
cvInvSqrt	core/types_c.h	197;"	d
cvIplDepth	core/types_c.h	/^CV_INLINE int cvIplDepth( int type )$/;"	f
cvIsInf	hal/defs.h	/^CV_INLINE int cvIsInf( double value )$/;"	f
cvIsInf	hal/defs.h	/^CV_INLINE int cvIsInf( float value )$/;"	f
cvIsNaN	hal/defs.h	/^CV_INLINE int cvIsNaN( double value )$/;"	f
cvIsNaN	hal/defs.h	/^CV_INLINE int cvIsNaN( float value )$/;"	f
cvKalmanUpdateByMeasurement	video/tracking_c.h	223;"	d
cvKalmanUpdateByTime	video/tracking_c.h	222;"	d
cvMahalonobis	core/core_c.h	1427;"	d
cvMat	core/types_c.h	/^CV_INLINE CvMat cvMat( int rows, int cols, int type, void* data CV_DEFAULT(NULL))$/;"	f
cvMatMul	core/core_c.h	1284;"	d
cvMatMulAdd	core/core_c.h	1283;"	d
cvMatMulAddEx	core/core_c.h	1294;"	d
cvMatMulAddS	core/core_c.h	1301;"	d
cvMirror	core/core_c.h	1324;"	d
cvPoint	core/types_c.h	/^CV_INLINE  CvPoint  cvPoint( int x, int y )$/;"	f
cvPoint2D32f	core/types_c.h	/^CV_INLINE  CvPoint2D32f  cvPoint2D32f( double x, double y )$/;"	f
cvPoint2D64f	core/types_c.h	/^CV_INLINE  CvPoint2D64f  cvPoint2D64f( double x, double y )$/;"	f
cvPoint3D32f	core/types_c.h	/^CV_INLINE  CvPoint3D32f  cvPoint3D32f( double x, double y, double z )$/;"	f
cvPoint3D64f	core/types_c.h	/^CV_INLINE  CvPoint3D64f  cvPoint3D64f( double x, double y, double z )$/;"	f
cvPointFrom32f	core/types_c.h	/^CV_INLINE  CvPoint  cvPointFrom32f( CvPoint2D32f point )$/;"	f
cvPointTo32f	core/types_c.h	/^CV_INLINE  CvPoint2D32f  cvPointTo32f( CvPoint point )$/;"	f
cvROIToRect	core/types_c.h	/^CV_INLINE  CvRect  cvROIToRect( IplROI roi )$/;"	f
cvRandInt	core/types_c.h	/^CV_INLINE unsigned cvRandInt( CvRNG* rng )$/;"	f
cvRandReal	core/types_c.h	/^CV_INLINE double cvRandReal( CvRNG* rng )$/;"	f
cvReadByName	core/core_c.h	/^CV_INLINE void* cvReadByName( CvFileStorage* fs, const CvFileNode* map,$/;"	f
cvReadInt	core/core_c.h	/^CV_INLINE int cvReadInt( const CvFileNode* node, int default_value CV_DEFAULT(0) )$/;"	f
cvReadIntByName	core/core_c.h	/^CV_INLINE int cvReadIntByName( const CvFileStorage* fs, const CvFileNode* map,$/;"	f
cvReadReal	core/core_c.h	/^CV_INLINE double cvReadReal( const CvFileNode* node, double default_value CV_DEFAULT(0.) )$/;"	f
cvReadRealByName	core/core_c.h	/^CV_INLINE double cvReadRealByName( const CvFileStorage* fs, const CvFileNode* map,$/;"	f
cvReadString	core/core_c.h	/^CV_INLINE const char* cvReadString( const CvFileNode* node,$/;"	f
cvReadStringByName	core/core_c.h	/^CV_INLINE const char* cvReadStringByName( const CvFileStorage* fs, const CvFileNode* map,$/;"	f
cvRealScalar	core/types_c.h	/^CV_INLINE  CvScalar  cvRealScalar( double val0 )$/;"	f
cvRect	core/types_c.h	/^CV_INLINE  CvRect  cvRect( int x, int y, int width, int height )$/;"	f
cvRectToROI	core/types_c.h	/^CV_INLINE  IplROI  cvRectToROI( CvRect rect, int coi )$/;"	f
cvReleaseMatND	core/core_c.h	/^CV_INLINE  void  cvReleaseMatND( CvMatND** mat )$/;"	f
cvReshapeND	core/core_c.h	836;"	d
cvRound	hal/defs.h	/^CV_INLINE int cvRound( int value )$/;"	f
cvRound	hal/defs.h	/^CV_INLINE int cvRound(float value)$/;"	f
cvRound	hal/defs.h	/^cvRound( double value )$/;"	f
cvScalar	core/types_c.h	/^CV_INLINE  CvScalar  cvScalar( double val0, double val1 CV_DEFAULT(0),$/;"	f
cvScalarAll	core/types_c.h	/^CV_INLINE  CvScalar  cvScalarAll( double val0123 )$/;"	f
cvScale	core/core_c.h	1022;"	d
cvSetNew	core/core_c.h	/^CV_INLINE  CvSetElem* cvSetNew( CvSet* set_header )$/;"	f
cvSetPostprocessFuncWin32	highgui/highgui_c.h	241;"	d
cvSetPreprocessFuncWin32	highgui/highgui_c.h	240;"	d
cvSetRemoveByPtr	core/core_c.h	/^CV_INLINE  void cvSetRemoveByPtr( CvSet* set_header, void* elem )$/;"	f
cvSize	core/types_c.h	/^CV_INLINE  CvSize  cvSize( int width, int height )$/;"	f
cvSize2D32f	core/types_c.h	/^CV_INLINE  CvSize2D32f  cvSize2D32f( double width, double height )$/;"	f
cvSlice	core/types_c.h	/^CV_INLINE  CvSlice  cvSlice( int start, int end )$/;"	f
cvSqrt	core/types_c.h	198;"	d
cvSubS	core/core_c.h	/^CV_INLINE  void  cvSubS( const CvArr* src, CvScalar value, CvArr* dst,$/;"	f
cvT	core/core_c.h	1314;"	d
cvTermCriteria	core/types_c.h	/^CV_INLINE  CvTermCriteria  cvTermCriteria( int type, int max_iter, double epsilon )$/;"	f
cvWriteToAVI	videoio/videoio_c.h	397;"	d
cvZero	core/core_c.h	980;"	d
cv_abs	core/base.hpp	/^inline int cv_abs(schar x) { return std::abs(x); }$/;"	f	namespace:cv
cv_abs	core/base.hpp	/^inline int cv_abs(short x) { return std::abs(x); }$/;"	f	namespace:cv
cv_abs	core/base.hpp	/^inline int cv_abs(uchar x) { return x; }$/;"	f	namespace:cv
cv_abs	core/base.hpp	/^inline int cv_abs(ushort x) { return x; }$/;"	f	namespace:cv
cv_abs	core/base.hpp	/^template<typename _Tp> inline _Tp cv_abs(_Tp x) { return std::abs(x); }$/;"	f	namespace:cv
cv_vrecp_f32	core/base.hpp	/^inline float32x2_t cv_vrecp_f32(float32x2_t val)$/;"	f	namespace:cv
cv_vrecpq_f32	core/base.hpp	/^inline float32x4_t cv_vrecpq_f32(float32x4_t val)$/;"	f	namespace:cv
cv_vrnd_s32_f32	core/base.hpp	/^inline int32x2_t cv_vrnd_s32_f32(float32x2_t v)$/;"	f	namespace:cv
cv_vrnd_u32_f32	core/base.hpp	/^inline uint32x2_t cv_vrnd_u32_f32(float32x2_t v)$/;"	f	namespace:cv
cv_vrndq_s32_f32	core/base.hpp	/^inline int32x4_t cv_vrndq_s32_f32(float32x4_t v)$/;"	f	namespace:cv
cv_vrndq_u32_f32	core/base.hpp	/^inline uint32x4_t cv_vrndq_u32_f32(float32x4_t v)$/;"	f	namespace:cv
cv_vrsqrt_f32	core/base.hpp	/^inline float32x2_t cv_vrsqrt_f32(float32x2_t val)$/;"	f	namespace:cv
cv_vrsqrtq_f32	core/base.hpp	/^inline float32x4_t cv_vrsqrtq_f32(float32x4_t val)$/;"	f	namespace:cv
cv_vsqrt_f32	core/base.hpp	/^inline float32x2_t cv_vsqrt_f32(float32x2_t val)$/;"	f	namespace:cv
cv_vsqrtq_f32	core/base.hpp	/^inline float32x4_t cv_vsqrtq_f32(float32x4_t val)$/;"	f	namespace:cv
cvarrToMatND	core/core_c.h	/^static inline Mat cvarrToMatND(const CvArr* arr, bool copyData=false, int coiMode=0)$/;"	f	namespace:cv
cvflann	flann.hpp	/^namespace cvflann$/;"	n
cvflann	flann/all_indices.h	/^namespace cvflann$/;"	n
cvflann	flann/allocator.h	/^namespace cvflann$/;"	n
cvflann	flann/any.h	/^namespace cvflann$/;"	n
cvflann	flann/autotuned_index.h	/^namespace cvflann$/;"	n
cvflann	flann/composite_index.h	/^namespace cvflann$/;"	n
cvflann	flann/defines.h	/^namespace cvflann {$/;"	n
cvflann	flann/dist.h	/^namespace cvflann$/;"	n
cvflann	flann/dummy.h	/^namespace cvflann$/;"	n
cvflann	flann/dynamic_bitset.h	/^namespace cvflann {$/;"	n
cvflann	flann/flann_base.hpp	/^namespace cvflann$/;"	n
cvflann	flann/general.h	/^namespace cvflann$/;"	n
cvflann	flann/ground_truth.h	/^namespace cvflann$/;"	n
cvflann	flann/hdf5.h	/^namespace cvflann$/;"	n
cvflann	flann/heap.h	/^namespace cvflann$/;"	n
cvflann	flann/hierarchical_clustering_index.h	/^namespace cvflann$/;"	n
cvflann	flann/index_testing.h	/^namespace cvflann$/;"	n
cvflann	flann/kdtree_index.h	/^namespace cvflann$/;"	n
cvflann	flann/kdtree_single_index.h	/^namespace cvflann$/;"	n
cvflann	flann/kmeans_index.h	/^namespace cvflann$/;"	n
cvflann	flann/linear_index.h	/^namespace cvflann$/;"	n
cvflann	flann/logger.h	/^namespace cvflann$/;"	n
cvflann	flann/lsh_index.h	/^namespace cvflann$/;"	n
cvflann	flann/lsh_table.h	/^namespace cvflann$/;"	n
cvflann	flann/matrix.h	/^namespace cvflann$/;"	n
cvflann	flann/nn_index.h	/^namespace cvflann$/;"	n
cvflann	flann/object_factory.h	/^namespace cvflann$/;"	n
cvflann	flann/params.h	/^namespace cvflann$/;"	n
cvflann	flann/random.h	/^namespace cvflann$/;"	n
cvflann	flann/result_set.h	/^namespace cvflann$/;"	n
cvflann	flann/sampling.h	/^namespace cvflann$/;"	n
cvflann	flann/saving.h	/^namespace cvflann$/;"	n
cvflann	flann/simplex_downhill.h	/^namespace cvflann$/;"	n
cvflann	flann/timer.h	/^namespace cvflann$/;"	n
cvmGet	core/types_c.h	/^CV_INLINE  double  cvmGet( const CvMat* mat, int row, int col )$/;"	f
cvmSet	core/types_c.h	/^CV_INLINE  void  cvmSet( CvMat* mat, int row, int col, double value )$/;"	f
cvmat_allowed	ts.hpp	/^    bool cvmat_allowed;$/;"	m	class:cvtest::ArrayTest
cvt	core/cuda/detail/color_detail.hpp	/^            static __device__ __forceinline__ uchar cvt(uint t)$/;"	f	struct:cv::cuda::device::color_detail::RGB5x52GrayConverter
cvt	core/cuda/detail/color_detail.hpp	/^            static __device__ __forceinline__ ushort cvt(const uchar3& src)$/;"	f	struct:cv::cuda::device::color_detail::RGB2RGB5x5Converter
cvt	core/cuda/detail/color_detail.hpp	/^            static __device__ __forceinline__ ushort cvt(uint src)$/;"	f	struct:cv::cuda::device::color_detail::RGB2RGB5x5Converter
cvt	core/cuda/detail/color_detail.hpp	/^            static __device__ __forceinline__ ushort cvt(uint t)$/;"	f	struct:cv::cuda::device::color_detail::Gray2RGB5x5Converter
cvt	core/cuda/detail/color_detail.hpp	/^            static __device__ __forceinline__ void cvt(uint src, uchar3& dst)$/;"	f	struct:cv::cuda::device::color_detail::RGB5x52RGBConverter
cvt	core/cuda/detail/color_detail.hpp	/^            static __device__ __forceinline__ void cvt(uint src, uint& dst)$/;"	f	struct:cv::cuda::device::color_detail::RGB5x52RGBConverter
cvt_	cudev/expr/per_element_func.hpp	/^cvt_(const SrcPtr& src)$/;"	f	namespace:cv::cudev
cvtest	ts.hpp	/^namespace cvtest { namespace ocl {$/;"	n
cvtest	ts.hpp	/^namespace cvtest$/;"	n
cvtest	ts/cuda_test.hpp	/^namespace cvtest$/;"	n
cvtest	ts/ocl_perf.hpp	/^namespace cvtest {$/;"	n
cvtest	ts/ocl_test.hpp	/^namespace cvtest {$/;"	n
cvtest	ts/ts_perf.hpp	/^namespace cvtest { namespace ocl {$/;"	n
cvvAddSearchPath	highgui/highgui_c.h	229;"	d
cvvConvertImage	imgcodecs/imgcodecs_c.h	129;"	d
cvvCreateTrackbar	highgui/highgui_c.h	228;"	d
cvvDestroyWindow	highgui/highgui_c.h	227;"	d
cvvInitSystem	highgui/highgui_c.h	223;"	d
cvvLoadImage	imgcodecs/imgcodecs_c.h	127;"	d
cvvNamedWindow	highgui/highgui_c.h	224;"	d
cvvResizeWindow	highgui/highgui_c.h	226;"	d
cvvSaveImage	imgcodecs/imgcodecs_c.h	128;"	d
cvvShowImage	highgui/highgui_c.h	225;"	d
cvvWaitKey	highgui/highgui_c.h	230;"	d
cvvWaitKeyEx	highgui/highgui_c.h	231;"	d
cyan	viz/types.hpp	/^inline cv::viz::Color cv::viz::Color::cyan()    { return Color(255, 255,   0); }$/;"	f	class:cv::viz::Color
cyrillic	highgui.hpp	/^    const int*  cyrillic;$/;"	m	struct:cv::QtFont
cyrillic	imgproc/imgproc_c.h	/^    const int*  cyrillic;$/;"	m	struct:CvFont
d_dst_	stitching/detail/warpers.hpp	/^    cuda::GpuMat d_xmap_, d_ymap_, d_src_, d_dst_;$/;"	m	class:cv::detail::CylindricalWarperGpu
d_dst_	stitching/detail/warpers.hpp	/^    cuda::GpuMat d_xmap_, d_ymap_, d_src_, d_dst_;$/;"	m	class:cv::detail::PlaneWarperGpu
d_dst_	stitching/detail/warpers.hpp	/^    cuda::GpuMat d_xmap_, d_ymap_, d_src_, d_dst_;$/;"	m	class:cv::detail::SphericalWarperGpu
d_src_	stitching/detail/warpers.hpp	/^    cuda::GpuMat d_xmap_, d_ymap_, d_src_, d_dst_;$/;"	m	class:cv::detail::CylindricalWarperGpu
d_src_	stitching/detail/warpers.hpp	/^    cuda::GpuMat d_xmap_, d_ymap_, d_src_, d_dst_;$/;"	m	class:cv::detail::PlaneWarperGpu
d_src_	stitching/detail/warpers.hpp	/^    cuda::GpuMat d_xmap_, d_ymap_, d_src_, d_dst_;$/;"	m	class:cv::detail::SphericalWarperGpu
d_xmap_	stitching/detail/warpers.hpp	/^    cuda::GpuMat d_xmap_, d_ymap_, d_src_, d_dst_;$/;"	m	class:cv::detail::CylindricalWarperGpu
d_xmap_	stitching/detail/warpers.hpp	/^    cuda::GpuMat d_xmap_, d_ymap_, d_src_, d_dst_;$/;"	m	class:cv::detail::PlaneWarperGpu
d_xmap_	stitching/detail/warpers.hpp	/^    cuda::GpuMat d_xmap_, d_ymap_, d_src_, d_dst_;$/;"	m	class:cv::detail::SphericalWarperGpu
d_ymap_	stitching/detail/warpers.hpp	/^    cuda::GpuMat d_xmap_, d_ymap_, d_src_, d_dst_;$/;"	m	class:cv::detail::CylindricalWarperGpu
d_ymap_	stitching/detail/warpers.hpp	/^    cuda::GpuMat d_xmap_, d_ymap_, d_src_, d_dst_;$/;"	m	class:cv::detail::PlaneWarperGpu
d_ymap_	stitching/detail/warpers.hpp	/^    cuda::GpuMat d_xmap_, d_ymap_, d_src_, d_dst_;$/;"	m	class:cv::detail::SphericalWarperGpu
data	core/cuda.hpp	/^    uchar* data;$/;"	m	class:cv::cuda::GpuMat
data	core/cuda.hpp	/^    uchar* data;$/;"	m	class:cv::cuda::HostMem
data	core/cuda_types.hpp	/^            T* data;$/;"	m	struct:cv::cuda::DevPtr
data	core/mat.hpp	/^    uchar* data;$/;"	m	class:cv::Mat
data	core/mat.hpp	/^    uchar* data;$/;"	m	struct:cv::UMatData
data	core/types_c.h	/^    schar* data;              \/**< Pointer to the first element of the block. *\/$/;"	m	struct:CvSeqBlock
data	core/types_c.h	/^    } data;$/;"	m	struct:CvFileNode	typeref:union:CvFileNode::__anon149
data	core/types_c.h	/^    } data;$/;"	m	struct:CvMat	typeref:union:CvMat::__anon144
data	core/types_c.h	/^    } data;$/;"	m	struct:CvMatND	typeref:union:CvMatND::__anon147
data	cudev/ptr2d/glob.hpp	/^    T* data;$/;"	m	struct:cv::cudev::GlobPtr
data	flann/matrix.h	/^    T* data;$/;"	m	class:cvflann::Matrix
data	flann/matrix.h	/^    void* data;$/;"	m	class:cvflann::UntypedMatrix
dataOrder	core/types_c.h	/^    int  dataOrder;         \/**< 0 - interleaved color channels, 1 - separate color channels.$/;"	m	struct:_IplImage
data_	flann/kdtree_single_index.h	/^    Matrix<ElementType> data_;$/;"	m	class:cvflann::KDTreeSingleIndex
data_	ts/ts_gtest.h	/^  AssertHelperData* const data_;$/;"	m	class:testing::internal::AssertHelper
data_path	ts.hpp	/^    string data_path;$/;"	m	class:cvtest::TS
data_type	flann/saving.h	/^    flann_datatype_t data_type;$/;"	m	struct:cvflann::IndexHeader
dataend	core/cuda.hpp	/^    const uchar* dataend;$/;"	m	class:cv::cuda::GpuMat
dataend	core/cuda.hpp	/^    const uchar* dataend;$/;"	m	class:cv::cuda::HostMem
dataend	core/mat.hpp	/^    const uchar* dataend;$/;"	m	class:cv::Mat
datalimit	core/mat.hpp	/^    const uchar* datalimit;$/;"	m	class:cv::Mat
dataset	flann/hierarchical_clustering_index.h	/^    const Matrix<ElementType> dataset;$/;"	m	class:cvflann::HierarchicalClusteringIndex
dataset	flann/kmeans_index.h	/^        const Matrix<ElementType>& dataset;$/;"	m	class:cvflann::KMeansIndex::KMeansDistanceComputer
dataset_	flann/autotuned_index.h	/^    const Matrix<ElementType> dataset_;$/;"	m	class:cvflann::AutotunedIndex
dataset_	flann/kdtree_index.h	/^    const Matrix<ElementType> dataset_;$/;"	m	class:cvflann::KDTreeIndex
dataset_	flann/kdtree_single_index.h	/^    const Matrix<ElementType> dataset_;$/;"	m	class:cvflann::KDTreeSingleIndex
dataset_	flann/kmeans_index.h	/^    const Matrix<ElementType> dataset_;$/;"	m	class:cvflann::KMeansIndex
dataset_	flann/linear_index.h	/^    const Matrix<ElementType> dataset_;$/;"	m	class:cvflann::LinearIndex
dataset_	flann/lsh_index.h	/^    Matrix<ElementType> dataset_;$/;"	m	class:cvflann::LshIndex
datastart	core/cuda.hpp	/^    uchar* datastart;$/;"	m	class:cv::cuda::GpuMat
datastart	core/cuda.hpp	/^    uchar* datastart;$/;"	m	class:cv::cuda::HostMem
datastart	core/mat.hpp	/^    const uchar* datastart;$/;"	m	class:cv::Mat
db	core/types_c.h	/^        double* db;$/;"	m	union:CvMat::__anon144
db	core/types_c.h	/^        double* db;$/;"	m	union:CvMatND::__anon147
dcenters	flann/kmeans_index.h	/^        const Matrix<double>& dcenters;$/;"	m	class:cvflann::KMeansIndex::KMeansDistanceComputer
dcn	ts/cuda_perf.hpp	/^        int dcn;$/;"	m	struct:perf::CvtColorInfo
ddot	core/matx.hpp	/^double Matx<_Tp, m, n>::ddot(const Matx<_Tp, m, n>& M) const$/;"	f	class:cv::Matx
ddot	core/types.hpp	/^double Point3_<_Tp>::ddot(const Point3_& pt) const$/;"	f	class:cv::Point3_
ddot	core/types.hpp	/^double Point_<_Tp>::ddot(const Point_& pt) const$/;"	f	class:cv::Point_
deallocate	core/cvstd.hpp	/^    void deallocate(pointer p, size_type) { fastFree(p); }$/;"	f	class:cv::Allocator
deallocate	core/utility.hpp	/^AutoBuffer<_Tp, fixed_size>::deallocate()$/;"	f	class:cv::AutoBuffer
death_test_count	ts/ts_gtest.h	/^  int death_test_count() const { return death_test_count_; }$/;"	f	class:testing::TestResult
death_test_count_	ts/ts_gtest.h	/^  int death_test_count_;$/;"	m	class:testing::TestResult
deblur	videostab/deblurring.hpp	/^    virtual void deblur(int \/*idx*\/, Mat &\/*frame*\/) {}$/;"	f	class:cv::videostab::NullDeblurer
deblurer_	videostab/stabilizer.hpp	/^    Ptr<DeblurerBase> deblurer_;$/;"	m	class:cv::videostab::StabilizerBase
deblurrer	videostab/stabilizer.hpp	/^    Ptr<DeblurerBase> deblurrer() const { return deblurer_; }$/;"	f	class:cv::videostab::StabilizerBase
decRef	core/ptr.inl.hpp	/^    void decRef()$/;"	f	struct:cv::detail::PtrOwner
declare	ts/ts_perf.hpp	/^    _declareHelper declare;$/;"	m	class:perf::TestBase
default2dMotion	videostab/motion_core.hpp	/^    static RansacParams default2dMotion(MotionModel model)$/;"	f	struct:cv::videostab::RansacParams
defaultAVCaptureDevicePosition	videoio/cap_ios.h	/^@property (nonatomic, assign) AVCaptureDevicePosition defaultAVCaptureDevicePosition;$/;"	v
defaultAVCaptureSessionPreset	videoio/cap_ios.h	/^@property (nonatomic, strong) NSString *const defaultAVCaptureSessionPreset;$/;"	v
defaultAVCaptureVideoOrientation	videoio/cap_ios.h	/^@property (nonatomic, assign) AVCaptureVideoOrientation defaultAVCaptureVideoOrientation;$/;"	v
defaultDir	ml.hpp	/^        int defaultDir; \/\/!< Default direction where to go (-1: left or +1: right). It helps in the$/;"	m	class:cv::ml::DTrees::Node
defaultFPS	videoio/cap_ios.h	/^@property (nonatomic, assign) int defaultFPS;$/;"	v
default_	ts/ts_gtest.h	/^  const T default_;  \/\/ The default value for each thread.$/;"	m	class:std::tr1::ThreadLocal
default_func_addr	core/types_c.h	/^    void* default_func_addr;$/;"	m	struct:CvPluginFuncInfo
default_result_printer	ts/ts_gtest.h	/^  TestEventListener* default_result_printer() const {$/;"	f	class:testing::TestEventListeners
default_result_printer_	ts/ts_gtest.h	/^  TestEventListener* default_result_printer_;$/;"	m	class:testing::TestEventListeners
default_xml_generator	ts/ts_gtest.h	/^  TestEventListener* default_xml_generator() const {$/;"	f	class:testing::TestEventListeners
default_xml_generator_	ts/ts_gtest.h	/^  TestEventListener* default_xml_generator_;$/;"	m	class:testing::TestEventListeners
defined_test_names_	ts/ts_gtest.h	/^  ::std::set<const char*> defined_test_names_;$/;"	m	class:testing::internal::TypedTestCasePState
delegate	videoio/cap_ios.h	/^@property (nonatomic, assign) id<CvPhotoCameraDelegate> delegate;$/;"	v
delegate	videoio/cap_ios.h	/^@property (nonatomic, assign) id<CvVideoCameraDelegate> delegate;$/;"	v
deleteDataInstance	core/utility.hpp	/^    virtual void deleteDataInstance(void* data) const { delete (T*)data; }$/;"	f	class:cv::TLSData
deleteSelf	core/ptr.inl.hpp	/^    void deleteSelf()$/;"	f	struct:cv::detail::PtrOwnerImpl
deleter	core/ptr.inl.hpp	/^    D deleter;$/;"	m	struct:cv::detail::PtrOwnerImpl
delta	cudalegacy.hpp	/^    float delta;   \/\/!< Affects color and color co-occurrence quantization, typically set to 2.$/;"	m	struct:cv::cuda::FGDParams
delta	hal/intrin.hpp	/^    enum { delta = 0, shift = 0 };$/;"	e	enum:cv::V_TypeTraits::__anon85
delta	hal/intrin.hpp	/^    enum { delta = 128, shift = 8 };$/;"	e	enum:cv::V_TypeTraits::__anon86
delta	hal/intrin.hpp	/^    enum { delta = 128, shift = 8 };$/;"	e	enum:cv::V_TypeTraits::__anon87
delta	hal/intrin.hpp	/^    enum { delta = 128, shift = 8 };$/;"	e	enum:cv::V_TypeTraits::__anon89
delta	hal/intrin.hpp	/^    enum { delta = 32768, shift = 16 };$/;"	e	enum:cv::V_TypeTraits::__anon88
delta_index	core/persistence.hpp	/^      int          delta_index;\/* = seq->first->start_index   *\/$/;"	m	struct:cv::FileNodeIterator::SeqReader
deltas	imgproc/types_c.h	/^    schar     deltas[8][2];$/;"	m	struct:CvChainPtReader
depart	ts/ts_gtest.h	/^  void depart() {$/;"	f	class:testing::internal::linked_ptr
depth	core/affine.hpp	/^               depth        = DataType<channel_type>::depth,$/;"	e	enum:cv::DataType::__anon162
depth	core/core_c.h	/^template<typename _Tp> inline int Seq<_Tp>::depth() const$/;"	f	class:cv::Seq
depth	core/cuda.inl.hpp	/^int GpuMat::depth() const$/;"	f	class:cv::cuda::GpuMat
depth	core/cuda.inl.hpp	/^int HostMem::depth() const$/;"	f	class:cv::cuda::HostMem
depth	core/cvstd.inl.hpp	/^           depth        = DataType<channel_type>::depth,$/;"	e	enum:cv::DataType::__anon161
depth	core/mat.inl.hpp	/^int Mat::depth() const$/;"	f	class:cv::Mat
depth	core/mat.inl.hpp	/^int Mat_<_Tp>::depth() const$/;"	f	class:cv::Mat_
depth	core/mat.inl.hpp	/^int SparseMat::depth() const$/;"	f	class:cv::SparseMat
depth	core/mat.inl.hpp	/^int SparseMat_<_Tp>::depth() const$/;"	f	class:cv::SparseMat_
depth	core/mat.inl.hpp	/^int UMat::depth() const$/;"	f	class:cv::UMat
depth	core/matx.hpp	/^           depth        = DataType<channel_type>::depth,$/;"	e	enum:cv::DataType::__anon151
depth	core/matx.hpp	/^           depth        = DataType<channel_type>::depth,$/;"	e	enum:cv::DataType::__anon153
depth	core/matx.hpp	/^    enum { depth    = DataType<_Tp>::depth,$/;"	e	enum:cv::Matx::__anon150
depth	core/matx.hpp	/^    enum { depth    = Matx<_Tp, cn, 1>::depth,$/;"	e	enum:cv::Vec::__anon152
depth	core/opengl.hpp	/^int cv::ogl::Buffer::depth() const$/;"	f	class:cv::ogl::Buffer
depth	core/traits.hpp	/^           depth        = -1,$/;"	e	enum:cv::DataType::__anon101
depth	core/traits.hpp	/^           depth        = CV_16S,$/;"	e	enum:cv::DataType::__anon107
depth	core/traits.hpp	/^           depth        = CV_16U,$/;"	e	enum:cv::DataType::__anon106
depth	core/traits.hpp	/^           depth        = CV_32F,$/;"	e	enum:cv::DataType::__anon109
depth	core/traits.hpp	/^           depth        = CV_32S,$/;"	e	enum:cv::DataType::__anon108
depth	core/traits.hpp	/^           depth        = CV_64F,$/;"	e	enum:cv::DataType::__anon110
depth	core/traits.hpp	/^           depth        = CV_8S,$/;"	e	enum:cv::DataType::__anon104
depth	core/traits.hpp	/^           depth        = CV_8S,$/;"	e	enum:cv::DataType::__anon105
depth	core/traits.hpp	/^           depth        = CV_8U,$/;"	e	enum:cv::DataType::__anon102
depth	core/traits.hpp	/^           depth        = CV_8U,$/;"	e	enum:cv::DataType::__anon103
depth	core/traits.hpp	/^    enum { depth = CV_16S };$/;"	e	enum:cv::TypeDepth::__anon116
depth	core/traits.hpp	/^    enum { depth = CV_16U };$/;"	e	enum:cv::TypeDepth::__anon115
depth	core/traits.hpp	/^    enum { depth = CV_32F };$/;"	e	enum:cv::TypeDepth::__anon118
depth	core/traits.hpp	/^    enum { depth = CV_32S };$/;"	e	enum:cv::TypeDepth::__anon117
depth	core/traits.hpp	/^    enum { depth = CV_64F };$/;"	e	enum:cv::TypeDepth::__anon119
depth	core/traits.hpp	/^    enum { depth = CV_8S };$/;"	e	enum:cv::TypeDepth::__anon114
depth	core/traits.hpp	/^    enum { depth = CV_8U };$/;"	e	enum:cv::TypeDepth::__anon113
depth	core/traits.hpp	/^    enum { depth = CV_USRTYPE1 };$/;"	e	enum:cv::TypeDepth::__anon112
depth	core/types.hpp	/^           depth        = DataType<channel_type>::depth,$/;"	e	enum:cv::DataType::__anon120
depth	core/types.hpp	/^           depth        = DataType<channel_type>::depth,$/;"	e	enum:cv::DataType::__anon121
depth	core/types.hpp	/^           depth        = DataType<channel_type>::depth,$/;"	e	enum:cv::DataType::__anon122
depth	core/types.hpp	/^           depth        = DataType<channel_type>::depth,$/;"	e	enum:cv::DataType::__anon123
depth	core/types.hpp	/^           depth        = DataType<channel_type>::depth,$/;"	e	enum:cv::DataType::__anon124
depth	core/types.hpp	/^           depth        = DataType<channel_type>::depth,$/;"	e	enum:cv::DataType::__anon125
depth	core/types.hpp	/^           depth        = DataType<channel_type>::depth,$/;"	e	enum:cv::DataType::__anon126
depth	core/types.hpp	/^           depth        = DataType<channel_type>::depth,$/;"	e	enum:cv::DataType::__anon127
depth	core/types.hpp	/^           depth        = DataType<channel_type>::depth,$/;"	e	enum:cv::DataType::__anon128
depth	core/types.hpp	/^           depth        = DataType<channel_type>::depth,$/;"	e	enum:cv::DataType::__anon129
depth	core/types.hpp	/^           depth        = DataType<channel_type>::depth,$/;"	e	enum:cv::DataType::__anon130
depth	core/types_c.h	/^    int  depth;             \/**< Pixel depth in bits: IPL_DEPTH_8U, IPL_DEPTH_8S, IPL_DEPTH_16S,$/;"	m	struct:_IplImage
depth	cudev/ptr2d/detail/gpumat.hpp	/^__host__ int GpuMat_<T>::depth() const$/;"	f	class:cv::cudev::GpuMat_
depth	cudev/util/vec_traits.hpp	/^           depth        = CV_32S,$/;"	e	enum:cv::DataType::__anon359
depth	cudev/util/vec_traits.hpp	/^           depth        = DataType<channel_type>::depth,$/;"	e	enum:cv::DataType::__anon360
depth	cudev/util/vec_traits.hpp	/^           depth        = DataType<channel_type>::depth,$/;"	e	enum:cv::DataType::__anon361
depth	cudev/util/vec_traits.hpp	/^           depth        = DataType<channel_type>::depth,$/;"	e	enum:cv::DataType::__anon362
depth	cudev/util/vec_traits.hpp	/^           depth        = DataType<channel_type>::depth,$/;"	e	enum:cv::DataType::__anon363
depth	imgproc/types_c.h	/^    float depth; \/**< distance between the farthest point and the convex hull *\/$/;"	m	struct:CvConvexityDefect
depth_point	imgproc/types_c.h	/^    CvPoint* depth_point; \/**< the farthest from the convex hull point within the defect *\/$/;"	m	struct:CvConvexityDefect
derivAperture	objdetect.hpp	/^    CV_PROP int derivAperture;$/;"	m	struct:cv::HOGDescriptor
derivXPtr	cudev/ptr2d/deriv.hpp	/^__host__ DerivXPtrSz<typename PtrTraits<SrcPtr>::ptr_type> derivXPtr(const SrcPtr& src)$/;"	f	namespace:cv::cudev
derivX_	cudev/expr/deriv.hpp	/^derivX_(const SrcPtr& src)$/;"	f	namespace:cv::cudev
derivYPtr	cudev/ptr2d/deriv.hpp	/^__host__ DerivYPtrSz<typename PtrTraits<SrcPtr>::ptr_type> derivYPtr(const SrcPtr& src)$/;"	f	namespace:cv::cudev
derivY_	cudev/expr/deriv.hpp	/^derivY_(const SrcPtr& src)$/;"	f	namespace:cv::cudev
desc	cudalegacy/NCVHaarObjectDetection.hpp	/^    Ncv32u desc;$/;"	m	struct:HaarFeatureDescriptor32
descriptors	features2d.hpp	/^    std::vector<Mat> descriptors;$/;"	m	class:cv::BOWTrainer
descriptors	stitching/detail/matchers.hpp	/^    UMat descriptors;$/;"	m	struct:cv::detail::ImageFeatures
descriptors_	stitching/detail/matchers.hpp	/^    cuda::GpuMat descriptors_;$/;"	m	class:cv::detail::SurfFeaturesFinderGpu
destroy	core/cvstd.hpp	/^    void destroy(pointer p) { p->~_Tp(); }$/;"	f	class:cv::Allocator
detail	core/cvstd.hpp	/^namespace detail$/;"	n	namespace:cv
detail	core/ptr.inl.hpp	/^namespace detail$/;"	n	namespace:cv
detail	stitching/detail/autocalib.hpp	/^namespace detail {$/;"	n	namespace:cv
detail	stitching/detail/blenders.hpp	/^namespace detail {$/;"	n	namespace:cv
detail	stitching/detail/camera.hpp	/^namespace detail {$/;"	n	namespace:cv
detail	stitching/detail/exposure_compensate.hpp	/^namespace detail {$/;"	n	namespace:cv
detail	stitching/detail/matchers.hpp	/^namespace detail {$/;"	n	namespace:cv
detail	stitching/detail/motion_estimators.hpp	/^namespace detail {$/;"	n	namespace:cv
detail	stitching/detail/seam_finders.hpp	/^namespace detail {$/;"	n	namespace:cv
detail	stitching/detail/timelapsers.hpp	/^namespace detail {$/;"	n	namespace:cv
detail	stitching/detail/util.hpp	/^namespace detail {$/;"	n	namespace:cv
detail	stitching/detail/util_inl.hpp	/^namespace detail {$/;"	n	namespace:cv
detail	stitching/detail/warpers.hpp	/^namespace detail {$/;"	n	namespace:cv
detail	stitching/detail/warpers_inl.hpp	/^namespace detail {$/;"	n	namespace:cv
detectResultRoi	stitching/detail/warpers.hpp	/^    void detectResultRoi(Size src_size, Point &dst_tl, Point &dst_br)$/;"	f	class:cv::detail::CylindricalPortraitWarper
detectResultRoi	stitching/detail/warpers.hpp	/^    void detectResultRoi(Size src_size, Point &dst_tl, Point &dst_br)$/;"	f	class:cv::detail::CylindricalWarper
detectResultRoi	stitching/detail/warpers.hpp	/^    void detectResultRoi(Size src_size, Point &dst_tl, Point &dst_br)$/;"	f	class:cv::detail::PlanePortraitWarper
detectResultRoi	stitching/detail/warpers_inl.hpp	/^void RotationWarperBase<P>::detectResultRoi(Size src_size, Point &dst_tl, Point &dst_br)$/;"	f	class:cv::detail::RotationWarperBase
detectResultRoiByBorder	stitching/detail/warpers_inl.hpp	/^void RotationWarperBase<P>::detectResultRoiByBorder(Size src_size, Point &dst_tl, Point &dst_br)$/;"	f	class:cv::detail::RotationWarperBase
detector	videostab/global_motion.hpp	/^    Ptr<FeatureDetector> detector() const { return detector_; }$/;"	f	class:cv::videostab::KeypointBasedMotionEstimator
detector_	stitching/detail/matchers.hpp	/^    Ptr<FeatureDetector> detector_;$/;"	m	class:cv::detail::SurfFeaturesFinder
detector_	videostab/global_motion.hpp	/^    Ptr<FeatureDetector> detector_;$/;"	m	class:cv::videostab::KeypointBasedMotionEstimator
detector_	videostab/global_motion.hpp	/^    Ptr<cuda::CornersDetector> detector_;$/;"	m	class:cv::videostab::KeypointBasedMotionEstimatorGpu
determinant	core/matx.hpp	/^double determinant(const Matx<_Tp, m, m>& a)$/;"	f	namespace:cv
device	core/cuda/block.hpp	/^namespace cv { namespace cuda { namespace device$/;"	n	namespace:cv::cuda
device	core/cuda/border_interpolate.hpp	/^namespace cv { namespace cuda { namespace device$/;"	n	namespace:cv::cuda
device	core/cuda/color.hpp	/^namespace cv { namespace cuda { namespace device$/;"	n	namespace:cv::cuda
device	core/cuda/common.hpp	/^    namespace device$/;"	n	namespace:cv::cuda
device	core/cuda/datamov_utils.hpp	/^namespace cv { namespace cuda { namespace device$/;"	n	namespace:cv::cuda
device	core/cuda/detail/color_detail.hpp	/^namespace cv { namespace cuda { namespace device$/;"	n	namespace:cv::cuda
device	core/cuda/detail/reduce.hpp	/^namespace cv { namespace cuda { namespace device$/;"	n	namespace:cv::cuda
device	core/cuda/detail/reduce_key_val.hpp	/^namespace cv { namespace cuda { namespace device$/;"	n	namespace:cv::cuda
device	core/cuda/detail/transform_detail.hpp	/^namespace cv { namespace cuda { namespace device$/;"	n	namespace:cv::cuda
device	core/cuda/detail/type_traits_detail.hpp	/^namespace cv { namespace cuda { namespace device$/;"	n	namespace:cv::cuda
device	core/cuda/detail/vec_distance_detail.hpp	/^namespace cv { namespace cuda { namespace device$/;"	n	namespace:cv::cuda
device	core/cuda/dynamic_smem.hpp	/^namespace cv { namespace cuda { namespace device$/;"	n	namespace:cv::cuda
device	core/cuda/emulation.hpp	/^namespace cv { namespace cuda { namespace device$/;"	n	namespace:cv::cuda
device	core/cuda/filters.hpp	/^namespace cv { namespace cuda { namespace device$/;"	n	namespace:cv::cuda
device	core/cuda/funcattrib.hpp	/^namespace cv { namespace cuda { namespace device$/;"	n	namespace:cv::cuda
device	core/cuda/functional.hpp	/^namespace cv { namespace cuda { namespace device$/;"	n	namespace:cv::cuda
device	core/cuda/limits.hpp	/^namespace cv { namespace cuda { namespace device$/;"	n	namespace:cv::cuda
device	core/cuda/reduce.hpp	/^namespace cv { namespace cuda { namespace device$/;"	n	namespace:cv::cuda
device	core/cuda/saturate_cast.hpp	/^namespace cv { namespace cuda { namespace device$/;"	n	namespace:cv::cuda
device	core/cuda/scan.hpp	/^namespace cv { namespace cuda { namespace device$/;"	n	namespace:cv::cuda
device	core/cuda/simd_functions.hpp	/^namespace cv { namespace cuda { namespace device$/;"	n	namespace:cv::cuda
device	core/cuda/transform.hpp	/^namespace cv { namespace cuda { namespace device$/;"	n	namespace:cv::cuda
device	core/cuda/type_traits.hpp	/^namespace cv { namespace cuda { namespace device$/;"	n	namespace:cv::cuda
device	core/cuda/utility.hpp	/^namespace cv { namespace cuda { namespace device$/;"	n	namespace:cv::cuda
device	core/cuda/vec_distance.hpp	/^namespace cv { namespace cuda { namespace device$/;"	n	namespace:cv::cuda
device	core/cuda/vec_math.hpp	/^namespace cv { namespace cuda { namespace device$/;"	n	namespace:cv::cuda
device	core/cuda/vec_traits.hpp	/^namespace cv { namespace cuda { namespace device$/;"	n	namespace:cv::cuda
device	core/cuda/warp.hpp	/^namespace cv { namespace cuda { namespace device$/;"	n	namespace:cv::cuda
device	core/cuda/warp_reduce.hpp	/^namespace cv { namespace cuda { namespace device$/;"	n	namespace:cv::cuda
device	core/cuda/warp_shuffle.hpp	/^namespace cv { namespace cuda { namespace device$/;"	n	namespace:cv::cuda
device	cudalegacy/NCVPyramid.hpp	/^namespace cv { namespace cuda { namespace device$/;"	n	namespace:cv::cuda
deviceCopyObsolete	core/mat.inl.hpp	/^inline bool UMatData::deviceCopyObsolete() const { return (flags & DEVICE_COPY_OBSOLETE) != 0; }$/;"	f	class:cv::UMatData
deviceID	core/cuda.inl.hpp	/^int DeviceInfo::deviceID() const$/;"	f	class:cv::cuda::DeviceInfo
deviceMemMapped	core/mat.inl.hpp	/^inline bool UMatData::deviceMemMapped() const { return (flags & DEVICE_MEM_MAPPED) != 0; }$/;"	f	class:cv::UMatData
device_id_	core/cuda.hpp	/^    int device_id_;$/;"	m	class:cv::cuda::DeviceInfo
devices_	ts/cuda_test.hpp	/^        std::vector<cv::cuda::DeviceInfo> devices_;$/;"	m	class:cvtest::DeviceManager
dextractor	features2d.hpp	/^    Ptr<DescriptorExtractor> dextractor;$/;"	m	class:cv::BOWImgDescriptorExtractor
diag	core/mat.inl.hpp	/^Mat_<_Tp> Mat_<_Tp>::diag(int d) const$/;"	f	class:cv::Mat_
diag	core/matx.hpp	/^Matx<_Tp,m,n> Matx<_Tp,m,n>::diag(const typename Matx<_Tp,m,n>::diag_type& d)$/;"	f	class:cv::Matx
diag	core/matx.hpp	/^typename Matx<_Tp, m, n>::diag_type Matx<_Tp, m, n>::diag() const$/;"	f	class:cv::Matx
diag_type	core/matx.hpp	/^    typedef Matx<_Tp, shortdim, 1> diag_type;$/;"	t	class:cv::Matx
difference_type	core/cvstd.hpp	/^    typedef ptrdiff_t difference_type;$/;"	t	class:cv::Allocator
difference_type	core/cvstd.hpp	/^    typedef ptrdiff_t difference_type;$/;"	t	class:cv::String
difference_type	core/mat.hpp	/^    typedef ptrdiff_t difference_type;$/;"	t	class:cv::MatConstIterator
difference_type	core/mat.hpp	/^    typedef ptrdiff_t difference_type;$/;"	t	class:cv::MatConstIterator_
difference_type	ts/ts_gtest.h	/^  typedef ptrdiff_t difference_type;$/;"	t	class:testing::internal::ParamIterator
dim	core/types_c.h	/^    dim[CV_MAX_DIM];$/;"	m	struct:CvMatND	typeref:struct:CvMatND::__anon148
dim_	flann/kdtree_single_index.h	/^    size_t dim_;$/;"	m	class:cvflann::KDTreeSingleIndex
dims	core/core_c.h	/^    int dims; \/**< number of dimensions to iterate *\/$/;"	m	struct:CvNArrayIterator
dims	core/mat.hpp	/^        int dims;$/;"	m	struct:cv::SparseMat::Hdr
dims	core/mat.hpp	/^    int dims;$/;"	m	class:cv::Mat
dims	core/mat.hpp	/^    int dims;$/;"	m	class:cv::UMat
dims	core/mat.inl.hpp	/^int SparseMat::dims() const$/;"	f	class:cv::SparseMat
dims	core/types_c.h	/^    int dims;$/;"	m	struct:CvMatND
dims	core/types_c.h	/^    int dims;$/;"	m	struct:CvSparseMat
direction_func	cudev/functional/functional.hpp	/^template <typename T, bool angleInDegrees> struct direction_func : binary_function<T, T, T>$/;"	s	namespace:cv::cudev
directx	core/directx.hpp	/^namespace cv { namespace directx {$/;"	n	namespace:cv
disp	calib3d/calib3d_c.h	/^    CvMat* disp;$/;"	m	struct:CvStereoBMState
disp12MaxDiff	calib3d/calib3d_c.h	/^    int disp12MaxDiff;$/;"	m	struct:CvStereoBMState
dist	videostab/fast_marching.hpp	/^        float dist;$/;"	m	struct:cv::videostab::FastMarchingMethod::DXY
distThresh	videostab/inpainting.hpp	/^    float distThresh() const { return distThresh_; }$/;"	f	class:cv::videostab::MotionInpainter
distThresh_	videostab/inpainting.hpp	/^    float distThresh_;$/;"	m	class:cv::videostab::MotionInpainter
distType	flann/miniflann.hpp	/^    cvflann::flann_distance_t distType;$/;"	m	class:cv::flann::Index
dist_	flann/result_set.h	/^        DistanceType dist_;$/;"	m	struct:cvflann::UniqueResultSet::DistIndex
dist_	videostab/fast_marching.hpp	/^    cv::Mat_<float> dist_; \/\/ distance map$/;"	m	class:cv::videostab::FastMarchingMethod
dist_indices_	flann/result_set.h	/^    std::set<DistIndex> dist_indices_;$/;"	m	class:cvflann::UniqueResultSet
distance	core/types.hpp	/^    CV_PROP_RW float distance;$/;"	m	class:cv::DMatch
distance	flann/hierarchical_clustering_index.h	/^    Distance distance;$/;"	m	class:cvflann::HierarchicalClusteringIndex
distance	flann/kmeans_index.h	/^        Distance distance;$/;"	m	class:cvflann::KMeansIndex::KMeansDistanceComputer
distanceMap	videostab/fast_marching.hpp	/^    Mat distanceMap() const { return dist_; }$/;"	f	class:cv::videostab::FastMarchingMethod
distance_	flann/autotuned_index.h	/^    Distance distance_;$/;"	m	class:cvflann::AutotunedIndex
distance_	flann/kdtree_index.h	/^    Distance distance_;$/;"	m	class:cvflann::KDTreeIndex
distance_	flann/kdtree_single_index.h	/^    Distance distance_;$/;"	m	class:cvflann::KDTreeSingleIndex
distance_	flann/kmeans_index.h	/^    Distance distance_;$/;"	m	class:cvflann::KMeansIndex
distance_	flann/linear_index.h	/^    Distance distance_;$/;"	m	class:cvflann::LinearIndex
distance_	flann/lsh_index.h	/^    Distance distance_;$/;"	m	class:cvflann::LshIndex
dists	flann/result_set.h	/^    DistanceType* dists;$/;"	m	class:cvflann::KNNResultSet
dists	flann/result_set.h	/^    DistanceType* dists;$/;"	m	class:cvflann::KNNSimpleResultSet
dists	flann/result_set.h	/^    DistanceType* dists;$/;"	m	class:cvflann::RadiusResultSet
div	core/matx.hpp	/^Matx<_Tp, m, n> Matx<_Tp, m, n>::div(const Matx<_Tp, m, n>& a) const$/;"	f	class:cv::Matx
divUp	core/cuda/common.hpp	/^        __host__ __device__ __forceinline__ int divUp(int total, int grain)$/;"	f	namespace:cv::cuda::device
divUp	cudev/common.hpp	/^__host__ __device__ __forceinline__ int divUp(int total, int grain)$/;"	f	namespace:cv::cudev
divfeat	flann/kdtree_index.h	/^        int divfeat;$/;"	m	struct:cvflann::KDTreeIndex::Node
divfeat	flann/kdtree_single_index.h	/^        int divfeat;$/;"	m	struct:cvflann::KDTreeSingleIndex::Node
divhigh	flann/kdtree_single_index.h	/^        DistanceType divlow, divhigh;$/;"	m	struct:cvflann::KDTreeSingleIndex::Node
divideTree	flann/kdtree_index.h	/^    NodePtr divideTree(int* ind, int count)$/;"	f	class:cvflann::KDTreeIndex
divideTree	flann/kdtree_single_index.h	/^    NodePtr divideTree(int left, int right, BoundingBox& bbox)$/;"	f	class:cvflann::KDTreeSingleIndex
divides	core/cuda/functional.hpp	/^        __host__ __device__ __forceinline__ divides() {}$/;"	f	struct:cv::cuda::device::divides
divides	core/cuda/functional.hpp	/^        __host__ __device__ __forceinline__ divides(const divides&) {}$/;"	f	struct:cv::cuda::device::divides
divides	core/cuda/functional.hpp	/^    template <typename T> struct divides : binary_function<T, T, T>$/;"	s	namespace:cv::cuda::device
divides	cudev/functional/functional.hpp	/^template <typename T> struct divides : binary_function<T, T, T>$/;"	s	namespace:cv::cudev
divlow	flann/kdtree_single_index.h	/^        DistanceType divlow, divhigh;$/;"	m	struct:cvflann::KDTreeSingleIndex::Node
divval	flann/kdtree_index.h	/^        DistanceType divval;$/;"	m	struct:cvflann::KDTreeIndex::Node
dmatcher	features2d.hpp	/^    Ptr<DescriptorMatcher> dmatcher;$/;"	m	class:cv::BOWImgDescriptorExtractor
doCorrectionForInclusion	videostab/stabilizer.hpp	/^    bool doCorrectionForInclusion() const { return doCorrectionForInclusion_; }$/;"	f	class:cv::videostab::StabilizerBase
doCorrectionForInclusion_	videostab/stabilizer.hpp	/^    bool doCorrectionForInclusion_;$/;"	m	class:cv::videostab::StabilizerBase
doDeblurring_	videostab/stabilizer.hpp	/^    bool doDeblurring_;$/;"	m	class:cv::videostab::StabilizerBase
doInpainting_	videostab/stabilizer.hpp	/^    bool doInpainting_;$/;"	m	class:cv::videostab::StabilizerBase
doWobbleSuppression_	videostab/stabilizer.hpp	/^    bool doWobbleSuppression_;$/;"	m	class:cv::videostab::TwoPassStabilizer
do_wave_correct_	stitching.hpp	/^    bool do_wave_correct_;$/;"	m	class:cv::Stitcher
dot	core/matx.hpp	/^_Tp Matx<_Tp, m, n>::dot(const Matx<_Tp, m, n>& M) const$/;"	f	class:cv::Matx
dot	core/types.hpp	/^_Tp Point3_<_Tp>::dot(const Point3_& pt) const$/;"	f	class:cv::Point3_
dot	core/types.hpp	/^_Tp Point_<_Tp>::dot(const Point_& pt) const$/;"	f	class:cv::Point_
double8	core/cuda/vec_traits.hpp	/^    struct double8$/;"	s	namespace:cv::cuda::device
dst	core/core_c.h	/^    CvGraphVtx* dst;       \/* current graph edge destination vertex *\/$/;"	m	struct:CvGraphScanner
dst	core/matx.hpp	/^    Matx<_Tp, m, n>* dst;$/;"	m	class:cv::MatxCommaInitializer
dst_	stitching/detail/blenders.hpp	/^    UMat dst_, dst_mask_;$/;"	m	class:cv::detail::Blender
dst_	stitching/detail/timelapsers.hpp	/^    UMat dst_;$/;"	m	class:cv::detail::Timelapser
dst_band_weights_	stitching/detail/blenders.hpp	/^    std::vector<UMat> dst_band_weights_;$/;"	m	class:cv::detail::MultiBandBlender
dst_img_idx	stitching/detail/matchers.hpp	/^    int src_img_idx, dst_img_idx;       \/\/!< Images indices (optional)$/;"	m	struct:cv::detail::MatchesInfo
dst_mask_	stitching/detail/blenders.hpp	/^    UMat dst_, dst_mask_;$/;"	m	class:cv::detail::Blender
dst_pyr_laplace_	stitching/detail/blenders.hpp	/^    std::vector<UMat> dst_pyr_laplace_;$/;"	m	class:cv::detail::MultiBandBlender
dst_roi_	stitching/detail/blenders.hpp	/^    Rect dst_roi_;$/;"	m	class:cv::detail::Blender
dst_roi_	stitching/detail/timelapsers.hpp	/^    Rect dst_roi_;$/;"	m	class:cv::detail::Timelapser
dst_roi_final_	stitching/detail/blenders.hpp	/^    Rect dst_roi_final_;$/;"	m	class:cv::detail::MultiBandBlender
dst_weight_map_	stitching/detail/blenders.hpp	/^    UMat dst_weight_map_;$/;"	m	class:cv::detail::FeatherBlender
dummy_	ts/ts_gtest.h	/^  static bool dummy_;$/;"	m	class:testing::internal::TypeIdHelper
dummy_	ts/ts_gtest.h	/^bool TypeIdHelper<T>::dummy_ = false;$/;"	m	class:testing::internal::TypeIdHelper
dx	highgui.hpp	/^    float       dx;        \/\/ horizontal interval between letters$/;"	m	struct:cv::QtFont
dx	imgproc/imgproc_c.h	/^    float       dx;       \/\/!< horizontal interval between letters$/;"	m	struct:CvFont
dx_	stitching/detail/seam_finders.hpp	/^    std::vector<Mat> dx_, dy_;$/;"	m	class:cv::detail::GraphCutSeamFinderGpu
dy_	stitching/detail/seam_finders.hpp	/^    std::vector<Mat> dx_, dy_;$/;"	m	class:cv::detail::GraphCutSeamFinderGpu
dynamicCast	core/ptr.inl.hpp	/^Ptr<Y> Ptr<T>::dynamicCast() const$/;"	f	class:cv::Ptr
edge	core/core_c.h	/^    CvGraphEdge* edge;     \/* current edge *\/$/;"	m	struct:CvGraphScanner
edges_	stitching/detail/motion_estimators.hpp	/^    std::vector<std::pair<int,int> > edges_;$/;"	m	class:cv::detail::BundleAdjusterBase
edges_	stitching/detail/seam_finders.hpp	/^    std::set<std::pair<int, int> > edges_;$/;"	m	class:cv::detail::DpSeamFinder
edges_	stitching/detail/util.hpp	/^    std::vector< std::list<GraphEdge> > edges_;$/;"	m	class:cv::detail::Graph
eigen2cv	core/eigen.hpp	/^void eigen2cv( const Eigen::Matrix<_Tp, _rows, _cols, _options, _maxRows, _maxCols>& src, Mat& dst )$/;"	f	namespace:cv
eigen2cv	core/eigen.hpp	/^void eigen2cv( const Eigen::Matrix<_Tp, _rows, _cols, _options, _maxRows, _maxCols>& src,$/;"	f	namespace:cv
eigenvalues	core.hpp	/^    Mat eigenvalues() const { return _eigenvalues; }$/;"	f	class:cv::LDA
eigenvalues	core.hpp	/^    Mat eigenvalues; \/\/!< eigenvalues of the covariation matrix$/;"	m	class:cv::PCA
eigenvectors	core.hpp	/^    Mat eigenvectors() const { return _eigenvectors; }$/;"	f	class:cv::LDA
eigenvectors	core.hpp	/^    Mat eigenvectors; \/\/!< eigenvectors of the covariation matrix$/;"	m	class:cv::PCA
elapsed_time	ts/ts_gtest.h	/^  TimeInMillis elapsed_time() const { return elapsed_time_; }$/;"	f	class:testing::TestCase
elapsed_time	ts/ts_gtest.h	/^  TimeInMillis elapsed_time() const { return elapsed_time_; }$/;"	f	class:testing::TestResult
elapsed_time_	ts/ts_gtest.h	/^  TimeInMillis elapsed_time_;$/;"	m	class:testing::TestCase
elapsed_time_	ts/ts_gtest.h	/^  TimeInMillis elapsed_time_;$/;"	m	class:testing::TestResult
elemSize	core/core_c.h	/^template<typename _Tp> inline size_t Seq<_Tp>::elemSize() const$/;"	f	class:cv::Seq
elemSize	core/cuda.inl.hpp	/^size_t GpuMat::elemSize() const$/;"	f	class:cv::cuda::GpuMat
elemSize	core/cuda.inl.hpp	/^size_t HostMem::elemSize() const$/;"	f	class:cv::cuda::HostMem
elemSize	core/cuda_types.hpp	/^            __CV_CUDA_HOST_DEVICE__ size_t elemSize() const { return elem_size; }$/;"	f	struct:cv::cuda::DevPtr
elemSize	core/mat.hpp	/^    size_t elemSize;$/;"	m	class:cv::MatConstIterator
elemSize	core/mat.inl.hpp	/^size_t Mat::elemSize() const$/;"	f	class:cv::Mat
elemSize	core/mat.inl.hpp	/^size_t Mat_<_Tp>::elemSize() const$/;"	f	class:cv::Mat_
elemSize	core/mat.inl.hpp	/^size_t SparseMat::elemSize() const$/;"	f	class:cv::SparseMat
elemSize	core/mat.inl.hpp	/^size_t UMat::elemSize() const$/;"	f	class:cv::UMat
elemSize	core/opengl.hpp	/^int cv::ogl::Buffer::elemSize() const$/;"	f	class:cv::ogl::Buffer
elemSize	cudev/ptr2d/detail/gpumat.hpp	/^__host__ size_t GpuMat_<T>::elemSize() const$/;"	f	class:cv::cudev::GpuMat_
elemSize	imgproc.hpp	/^    int step, elemSize;$/;"	m	class:cv::LineIterator
elemSize1	core/cuda.inl.hpp	/^size_t GpuMat::elemSize1() const$/;"	f	class:cv::cuda::GpuMat
elemSize1	core/cuda.inl.hpp	/^size_t HostMem::elemSize1() const$/;"	f	class:cv::cuda::HostMem
elemSize1	core/mat.inl.hpp	/^size_t Mat::elemSize1() const$/;"	f	class:cv::Mat
elemSize1	core/mat.inl.hpp	/^size_t Mat_<_Tp>::elemSize1() const$/;"	f	class:cv::Mat_
elemSize1	core/mat.inl.hpp	/^size_t SparseMat::elemSize1() const$/;"	f	class:cv::SparseMat
elemSize1	core/mat.inl.hpp	/^size_t UMat::elemSize1() const$/;"	f	class:cv::UMat
elemSize1	core/opengl.hpp	/^int cv::ogl::Buffer::elemSize1() const$/;"	f	class:cv::ogl::Buffer
elemSize1	cudev/ptr2d/detail/gpumat.hpp	/^__host__ size_t GpuMat_<T>::elemSize1() const$/;"	f	class:cv::cudev::GpuMat_
elem_size	core/cuda_types.hpp	/^            enum { elem_size = sizeof(elem_type) };$/;"	e	enum:cv::cuda::DevPtr::__anon163
elem_type	core/cuda/border_interpolate.hpp	/^        typedef typename B::result_type elem_type;$/;"	t	struct:cv::cuda::device::BorderReader
elem_type	core/cuda/border_interpolate.hpp	/^        typedef typename BrdConstant<D>::result_type elem_type;$/;"	t	struct:cv::cuda::device::BorderReader
elem_type	core/cuda/filters.hpp	/^        typedef typename Ptr2D::elem_type elem_type;$/;"	t	struct:cv::cuda::device::AreaFilter
elem_type	core/cuda/filters.hpp	/^        typedef typename Ptr2D::elem_type elem_type;$/;"	t	struct:cv::cuda::device::CubicFilter
elem_type	core/cuda/filters.hpp	/^        typedef typename Ptr2D::elem_type elem_type;$/;"	t	struct:cv::cuda::device::IntegerAreaFilter
elem_type	core/cuda/filters.hpp	/^        typedef typename Ptr2D::elem_type elem_type;$/;"	t	struct:cv::cuda::device::LinearFilter
elem_type	core/cuda/filters.hpp	/^        typedef typename Ptr2D::elem_type elem_type;$/;"	t	struct:cv::cuda::device::PointFilter
elem_type	core/cuda/vec_traits.hpp	/^        typedef char elem_type;$/;"	t	struct:cv::cuda::device::VecTraits
elem_type	core/cuda/vec_traits.hpp	/^        typedef schar elem_type;$/;"	t	struct:cv::cuda::device::VecTraits
elem_type	core/cuda_types.hpp	/^            typedef T elem_type;$/;"	t	struct:cv::cuda::DevPtr
elem_type	cudev/util/vec_traits.hpp	/^    typedef schar elem_type;$/;"	t	struct:cv::cudev::VecTraits
element	imgproc/imgproc_c.h	/^CVAPI(void)  cvReleaseStructuringElement( IplConvKernel** element );$/;"	v
element_type	core/cvstd.hpp	/^    typedef T element_type;$/;"	t	struct:cv::Ptr
element_type	ts/ts_gtest.h	/^  typedef T element_type;$/;"	t	class:testing::internal::linked_ptr
element_wise_relative_error	ts.hpp	/^    bool element_wise_relative_error;$/;"	m	class:cvtest::ArrayTest
elems_	videostab/global_motion.hpp	/^    std::vector<double> elems_, rowlb_, rowub_;$/;"	m	class:cv::videostab::MotionEstimatorL1
elems_	videostab/motion_stabilizing.hpp	/^    std::vector<double> elems_, rowlb_, rowub_;$/;"	m	class:cv::videostab::LpMotionStabilizer
elname	core/persistence.hpp	/^    String elname; \/\/!< the currently written element$/;"	m	class:cv::FileStorage
empty	core.hpp	/^    virtual bool empty() const { return false; }$/;"	f	class:cv::Algorithm
empty	core/core_c.h	/^template<typename _Tp> inline bool Seq<_Tp>::empty() const$/;"	f	class:cv::Seq
empty	core/cuda.inl.hpp	/^bool GpuMat::empty() const$/;"	f	class:cv::cuda::GpuMat
empty	core/cuda.inl.hpp	/^bool HostMem::empty() const$/;"	f	class:cv::cuda::HostMem
empty	core/cvstd.hpp	/^bool String::empty() const$/;"	f	class:cv::String
empty	core/mat.inl.hpp	/^bool Mat::empty() const$/;"	f	class:cv::Mat
empty	core/mat.inl.hpp	/^bool UMat::empty() const$/;"	f	class:cv::UMat
empty	core/opengl.hpp	/^bool cv::ogl::Arrays::empty() const$/;"	f	class:cv::ogl::Arrays
empty	core/opengl.hpp	/^bool cv::ogl::Buffer::empty() const$/;"	f	class:cv::ogl::Buffer
empty	core/opengl.hpp	/^bool cv::ogl::Texture2D::empty() const$/;"	f	class:cv::ogl::Texture2D
empty	core/persistence.hpp	/^inline bool FileNode::empty() const    { return node   == 0;    }$/;"	f	class:cv::FileNode
empty	core/ptr.inl.hpp	/^bool Ptr<T>::empty() const$/;"	f	class:cv::Ptr
empty	core/types.hpp	/^bool Range::empty() const$/;"	f	class:cv::Range
empty	flann/any.h	/^    bool empty() const$/;"	f	struct:cvflann::any
empty	flann/dynamic_bitset.h	/^    bool empty() const$/;"	f	class:cvflann::DynamicBitset
empty	flann/heap.h	/^    bool empty()$/;"	f	class:cvflann::Heap
empty	videostab/inpainting.hpp	/^    bool empty() const { return inpainters_.empty(); }$/;"	f	class:cv::videostab::InpaintingPipeline
empty	videostab/motion_stabilizing.hpp	/^    bool empty() const { return stabilizers_.empty(); }$/;"	f	class:cv::videostab::MotionStabilizationPipeline
empty_any	flann/any.h	/^struct empty_any$/;"	s	namespace:cvflann::anyimpl
end	core/core_c.h	/^template<typename _Tp> inline SeqIterator<_Tp> Seq<_Tp>::end() const$/;"	f	class:cv::Seq
end	core/cvstd.hpp	/^const char* String::end() const$/;"	f	class:cv::String
end	core/mat.inl.hpp	/^MatConstIterator_<_Tp> Mat::end() const$/;"	f	class:cv::Mat
end	core/mat.inl.hpp	/^MatConstIterator_<_Tp> Mat_<_Tp>::end() const$/;"	f	class:cv::Mat_
end	core/mat.inl.hpp	/^MatIterator_<_Tp> Mat::end()$/;"	f	class:cv::Mat
end	core/mat.inl.hpp	/^MatIterator_<_Tp> Mat_<_Tp>::end()$/;"	f	class:cv::Mat_
end	core/mat.inl.hpp	/^SparseMatConstIterator SparseMat::end() const$/;"	f	class:cv::SparseMat
end	core/mat.inl.hpp	/^SparseMatConstIterator_<_Tp> SparseMat::end() const$/;"	f	class:cv::SparseMat
end	core/mat.inl.hpp	/^SparseMatConstIterator_<_Tp> SparseMat_<_Tp>::end() const$/;"	f	class:cv::SparseMat_
end	core/mat.inl.hpp	/^SparseMatIterator SparseMat::end()$/;"	f	class:cv::SparseMat
end	core/mat.inl.hpp	/^SparseMatIterator_<_Tp> SparseMat::end()$/;"	f	class:cv::SparseMat
end	core/mat.inl.hpp	/^SparseMatIterator_<_Tp> SparseMat_<_Tp>::end()$/;"	f	class:cv::SparseMat_
end	core/persistence.hpp	/^inline FileNodeIterator FileNode::end() const   { return FileNodeIterator(fs, node, size()); }$/;"	f	class:cv::FileNode
end	core/types.hpp	/^    int start, end;$/;"	m	class:cv::Range
end	cudalegacy/NCV.hpp	/^    Ncv8u *end;$/;"	m	class:NCVMemStackAllocator
end	imgproc/types_c.h	/^    CvPoint* end; \/**< point of the contour where the defect ends *\/$/;"	m	struct:CvConvexityDefect
end	ts/ts_gtest.h	/^  const_iterator end() const { return array_ + size_; }$/;"	f	class:testing::internal::NativeArray
end	ts/ts_gtest.h	/^  iterator end() const { return iterator(impl_->End()); }$/;"	f	class:testing::internal::ParamGenerator
end10_	ts/ts_gtest.h	/^    const typename ParamGenerator<T10>::iterator end10_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
end1_	ts/ts_gtest.h	/^    const typename ParamGenerator<T1>::iterator end1_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
end1_	ts/ts_gtest.h	/^    const typename ParamGenerator<T1>::iterator end1_;$/;"	m	class:testing::internal::CartesianProductGenerator2::Iterator
end1_	ts/ts_gtest.h	/^    const typename ParamGenerator<T1>::iterator end1_;$/;"	m	class:testing::internal::CartesianProductGenerator3::Iterator
end1_	ts/ts_gtest.h	/^    const typename ParamGenerator<T1>::iterator end1_;$/;"	m	class:testing::internal::CartesianProductGenerator4::Iterator
end1_	ts/ts_gtest.h	/^    const typename ParamGenerator<T1>::iterator end1_;$/;"	m	class:testing::internal::CartesianProductGenerator5::Iterator
end1_	ts/ts_gtest.h	/^    const typename ParamGenerator<T1>::iterator end1_;$/;"	m	class:testing::internal::CartesianProductGenerator6::Iterator
end1_	ts/ts_gtest.h	/^    const typename ParamGenerator<T1>::iterator end1_;$/;"	m	class:testing::internal::CartesianProductGenerator7::Iterator
end1_	ts/ts_gtest.h	/^    const typename ParamGenerator<T1>::iterator end1_;$/;"	m	class:testing::internal::CartesianProductGenerator8::Iterator
end1_	ts/ts_gtest.h	/^    const typename ParamGenerator<T1>::iterator end1_;$/;"	m	class:testing::internal::CartesianProductGenerator9::Iterator
end2_	ts/ts_gtest.h	/^    const typename ParamGenerator<T2>::iterator end2_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
end2_	ts/ts_gtest.h	/^    const typename ParamGenerator<T2>::iterator end2_;$/;"	m	class:testing::internal::CartesianProductGenerator2::Iterator
end2_	ts/ts_gtest.h	/^    const typename ParamGenerator<T2>::iterator end2_;$/;"	m	class:testing::internal::CartesianProductGenerator3::Iterator
end2_	ts/ts_gtest.h	/^    const typename ParamGenerator<T2>::iterator end2_;$/;"	m	class:testing::internal::CartesianProductGenerator4::Iterator
end2_	ts/ts_gtest.h	/^    const typename ParamGenerator<T2>::iterator end2_;$/;"	m	class:testing::internal::CartesianProductGenerator5::Iterator
end2_	ts/ts_gtest.h	/^    const typename ParamGenerator<T2>::iterator end2_;$/;"	m	class:testing::internal::CartesianProductGenerator6::Iterator
end2_	ts/ts_gtest.h	/^    const typename ParamGenerator<T2>::iterator end2_;$/;"	m	class:testing::internal::CartesianProductGenerator7::Iterator
end2_	ts/ts_gtest.h	/^    const typename ParamGenerator<T2>::iterator end2_;$/;"	m	class:testing::internal::CartesianProductGenerator8::Iterator
end2_	ts/ts_gtest.h	/^    const typename ParamGenerator<T2>::iterator end2_;$/;"	m	class:testing::internal::CartesianProductGenerator9::Iterator
end3_	ts/ts_gtest.h	/^    const typename ParamGenerator<T3>::iterator end3_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
end3_	ts/ts_gtest.h	/^    const typename ParamGenerator<T3>::iterator end3_;$/;"	m	class:testing::internal::CartesianProductGenerator3::Iterator
end3_	ts/ts_gtest.h	/^    const typename ParamGenerator<T3>::iterator end3_;$/;"	m	class:testing::internal::CartesianProductGenerator4::Iterator
end3_	ts/ts_gtest.h	/^    const typename ParamGenerator<T3>::iterator end3_;$/;"	m	class:testing::internal::CartesianProductGenerator5::Iterator
end3_	ts/ts_gtest.h	/^    const typename ParamGenerator<T3>::iterator end3_;$/;"	m	class:testing::internal::CartesianProductGenerator6::Iterator
end3_	ts/ts_gtest.h	/^    const typename ParamGenerator<T3>::iterator end3_;$/;"	m	class:testing::internal::CartesianProductGenerator7::Iterator
end3_	ts/ts_gtest.h	/^    const typename ParamGenerator<T3>::iterator end3_;$/;"	m	class:testing::internal::CartesianProductGenerator8::Iterator
end3_	ts/ts_gtest.h	/^    const typename ParamGenerator<T3>::iterator end3_;$/;"	m	class:testing::internal::CartesianProductGenerator9::Iterator
end4_	ts/ts_gtest.h	/^    const typename ParamGenerator<T4>::iterator end4_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
end4_	ts/ts_gtest.h	/^    const typename ParamGenerator<T4>::iterator end4_;$/;"	m	class:testing::internal::CartesianProductGenerator4::Iterator
end4_	ts/ts_gtest.h	/^    const typename ParamGenerator<T4>::iterator end4_;$/;"	m	class:testing::internal::CartesianProductGenerator5::Iterator
end4_	ts/ts_gtest.h	/^    const typename ParamGenerator<T4>::iterator end4_;$/;"	m	class:testing::internal::CartesianProductGenerator6::Iterator
end4_	ts/ts_gtest.h	/^    const typename ParamGenerator<T4>::iterator end4_;$/;"	m	class:testing::internal::CartesianProductGenerator7::Iterator
end4_	ts/ts_gtest.h	/^    const typename ParamGenerator<T4>::iterator end4_;$/;"	m	class:testing::internal::CartesianProductGenerator8::Iterator
end4_	ts/ts_gtest.h	/^    const typename ParamGenerator<T4>::iterator end4_;$/;"	m	class:testing::internal::CartesianProductGenerator9::Iterator
end5_	ts/ts_gtest.h	/^    const typename ParamGenerator<T5>::iterator end5_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
end5_	ts/ts_gtest.h	/^    const typename ParamGenerator<T5>::iterator end5_;$/;"	m	class:testing::internal::CartesianProductGenerator5::Iterator
end5_	ts/ts_gtest.h	/^    const typename ParamGenerator<T5>::iterator end5_;$/;"	m	class:testing::internal::CartesianProductGenerator6::Iterator
end5_	ts/ts_gtest.h	/^    const typename ParamGenerator<T5>::iterator end5_;$/;"	m	class:testing::internal::CartesianProductGenerator7::Iterator
end5_	ts/ts_gtest.h	/^    const typename ParamGenerator<T5>::iterator end5_;$/;"	m	class:testing::internal::CartesianProductGenerator8::Iterator
end5_	ts/ts_gtest.h	/^    const typename ParamGenerator<T5>::iterator end5_;$/;"	m	class:testing::internal::CartesianProductGenerator9::Iterator
end6_	ts/ts_gtest.h	/^    const typename ParamGenerator<T6>::iterator end6_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
end6_	ts/ts_gtest.h	/^    const typename ParamGenerator<T6>::iterator end6_;$/;"	m	class:testing::internal::CartesianProductGenerator6::Iterator
end6_	ts/ts_gtest.h	/^    const typename ParamGenerator<T6>::iterator end6_;$/;"	m	class:testing::internal::CartesianProductGenerator7::Iterator
end6_	ts/ts_gtest.h	/^    const typename ParamGenerator<T6>::iterator end6_;$/;"	m	class:testing::internal::CartesianProductGenerator8::Iterator
end6_	ts/ts_gtest.h	/^    const typename ParamGenerator<T6>::iterator end6_;$/;"	m	class:testing::internal::CartesianProductGenerator9::Iterator
end7_	ts/ts_gtest.h	/^    const typename ParamGenerator<T7>::iterator end7_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
end7_	ts/ts_gtest.h	/^    const typename ParamGenerator<T7>::iterator end7_;$/;"	m	class:testing::internal::CartesianProductGenerator7::Iterator
end7_	ts/ts_gtest.h	/^    const typename ParamGenerator<T7>::iterator end7_;$/;"	m	class:testing::internal::CartesianProductGenerator8::Iterator
end7_	ts/ts_gtest.h	/^    const typename ParamGenerator<T7>::iterator end7_;$/;"	m	class:testing::internal::CartesianProductGenerator9::Iterator
end8_	ts/ts_gtest.h	/^    const typename ParamGenerator<T8>::iterator end8_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
end8_	ts/ts_gtest.h	/^    const typename ParamGenerator<T8>::iterator end8_;$/;"	m	class:testing::internal::CartesianProductGenerator8::Iterator
end8_	ts/ts_gtest.h	/^    const typename ParamGenerator<T8>::iterator end8_;$/;"	m	class:testing::internal::CartesianProductGenerator9::Iterator
end9_	ts/ts_gtest.h	/^    const typename ParamGenerator<T9>::iterator end9_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
end9_	ts/ts_gtest.h	/^    const typename ParamGenerator<T9>::iterator end9_;$/;"	m	class:testing::internal::CartesianProductGenerator9::Iterator
end_	ts/ts_gtest.h	/^  const T end_;$/;"	m	class:testing::internal::RangeGenerator
end_index	core/types_c.h	/^    int  start_index, end_index;$/;"	m	struct:CvSlice
end_index_	ts/ts_gtest.h	/^  const int end_index_;$/;"	m	class:testing::internal::RangeGenerator
ensureSimpleDistance	flann/dist.h	/^typename Distance::ResultType ensureSimpleDistance( typename Distance::ResultType dist )$/;"	f	namespace:cvflann
ensureSizeIsEnough	core/cuda.inl.hpp	/^void ensureSizeIsEnough(Size size, int type, OutputArray arr)$/;"	f	namespace:cv::cuda
ensureSquareDistance	flann/dist.h	/^typename Distance::ResultType ensureSquareDistance( typename Distance::ResultType dist )$/;"	f	namespace:cvflann
eps	objdetect.hpp	/^    double eps;$/;"	m	class:cv::SimilarRects
eps	videostab/motion_core.hpp	/^    float eps; \/\/!< max outliers ratio$/;"	m	struct:cv::videostab::RansacParams
epsilon	core/cuda/limits.hpp	/^    __device__ __forceinline__ static double epsilon() { return DBL_EPSILON; }$/;"	f	struct:cv::cuda::device::numeric_limits
epsilon	core/cuda/limits.hpp	/^    __device__ __forceinline__ static float epsilon() { return FLT_EPSILON; }$/;"	f	struct:cv::cuda::device::numeric_limits
epsilon	core/types.hpp	/^    double epsilon; \/\/ the desired accuracy$/;"	m	class:cv::TermCriteria
epsilon	core/types_c.h	/^    double epsilon;$/;"	m	struct:CvTermCriteria
epsilon	cudev/util/limits.hpp	/^    __device__ __forceinline__ static double epsilon() { return DBL_EPSILON; }$/;"	f	struct:cv::cudev::numeric_limits
epsilon	cudev/util/limits.hpp	/^    __device__ __forceinline__ static float epsilon() { return FLT_EPSILON; }$/;"	f	struct:cv::cudev::numeric_limits
equal_to	core/cuda/functional.hpp	/^        __host__ __device__ __forceinline__ equal_to() {}$/;"	f	struct:cv::cuda::device::equal_to
equal_to	core/cuda/functional.hpp	/^        __host__ __device__ __forceinline__ equal_to(const equal_to&) {}$/;"	f	struct:cv::cuda::device::equal_to
equal_to	core/cuda/functional.hpp	/^    template <typename T> struct equal_to : binary_function<T, T, bool>$/;"	s	namespace:cv::cuda::device
equal_to	cudev/functional/functional.hpp	/^template <typename T> struct equal_to : binary_function<T, T, typename MakeVec<uchar, VecTraits<T>::cn>::type>$/;"	s	namespace:cv::cudev
err	calib3d/calib3d_c.h	/^    cv::Ptr<CvMat> err;$/;"	m	class:CvLevMarq
err	core.hpp	/^    String err; \/\/\/< error description$/;"	m	class:cv::Exception
err	core/types_c.h	/^    int  err;$/;"	m	struct:CvLineIterator
err	imgproc.hpp	/^    int err, count;$/;"	m	class:cv::LineIterator
err1_	stitching/detail/motion_estimators.hpp	/^    Mat err1_, err2_;$/;"	m	class:cv::detail::BundleAdjusterRay
err1_	stitching/detail/motion_estimators.hpp	/^    Mat err1_, err2_;$/;"	m	class:cv::detail::BundleAdjusterReproj
err2_	stitching/detail/motion_estimators.hpp	/^    Mat err1_, err2_;$/;"	m	class:cv::detail::BundleAdjusterRay
err2_	stitching/detail/motion_estimators.hpp	/^    Mat err1_, err2_;$/;"	m	class:cv::detail::BundleAdjusterReproj
errNorm	calib3d/calib3d_c.h	/^    double prevErrNorm, errNorm;$/;"	m	class:CvLevMarq
errorCovPost	video/tracking.hpp	/^    CV_PROP_RW Mat errorCovPost;       \/\/!< posteriori error estimate covariance matrix (P(k)): P(k)=(I-K(k)*H)*P'(k)$/;"	m	class:cv::KalmanFilter
errorCovPre	video/tracking.hpp	/^    CV_PROP_RW Mat errorCovPre;        \/\/!< priori error estimate covariance matrix (P'(k)): P'(k)=A*P(k-1)*At + Q)*\/$/;"	m	class:cv::KalmanFilter
errorNoReturn	core/base.hpp	/^CV_INLINE CV_NORETURN void errorNoReturn(int _code, const String& _err, const char* _func, const char* _file, int _line)$/;"	f	namespace:cv
error_cov_post	video/tracking_c.h	/^    CvMat* error_cov_post;      \/* posteriori error estimate covariance matrix (P(k)):$/;"	m	struct:CvKalman
error_cov_pre	video/tracking_c.h	/^    CvMat* error_cov_pre;       \/* priori error estimate covariance matrix (P'(k)):$/;"	m	struct:CvKalman
errors_	videostab/optical_flow.hpp	/^    cuda::GpuMat frame0_, frame1_, flowX_, flowY_, errors_;$/;"	m	class:cv::videostab::DensePyrLkOptFlowEstimatorGpu
errors_	videostab/optical_flow.hpp	/^    cuda::GpuMat frame0_, frame1_, points0_, points1_, status_, errors_;$/;"	m	class:cv::videostab::SparsePyrLkOptFlowEstimatorGpu
estimateBuildParams	flann/autotuned_index.h	/^    IndexParams estimateBuildParams()$/;"	f	class:cvflann::AutotunedIndex
estimateSearchParams	flann/autotuned_index.h	/^    float estimateSearchParams(SearchParams& searchParams)$/;"	f	class:cvflann::AutotunedIndex
evaluate_kdtree	flann/autotuned_index.h	/^    void evaluate_kdtree(CostData& cost)$/;"	f	class:cvflann::AutotunedIndex
evaluate_kmeans	flann/autotuned_index.h	/^    void evaluate_kmeans(CostData& cost)$/;"	f	class:cvflann::AutotunedIndex
exit_code_	ts/ts_gtest.h	/^  const int exit_code_;$/;"	m	class:testing::ExitedWithCode
exploreNodeBranches	flann/kmeans_index.h	/^    int exploreNodeBranches(KMeansNodePtr node, const ElementType* q, DistanceType* domain_distances, Heap<BranchSt>* heap)$/;"	f	class:cvflann::KMeansIndex
exponent_bits	ts/ts_gtest.h	/^  Bits exponent_bits() const { return kExponentBitMask & u_.bits_; }$/;"	f	class:testing::internal::FloatingPoint
exposureCompensator	stitching.hpp	/^    Ptr<detail::ExposureCompensator> exposureCompensator() { return exposure_comp_; }$/;"	f	class:cv::Stitcher
exposureCompensator	stitching.hpp	/^    const Ptr<detail::ExposureCompensator> exposureCompensator() const { return exposure_comp_; }$/;"	f	class:cv::Stitcher
exposure_comp_	stitching.hpp	/^    Ptr<detail::ExposureCompensator> exposure_comp_;$/;"	m	class:cv::Stitcher
extended_I0	cudalegacy.hpp	/^    GpuMat extended_I0;$/;"	m	class:cv::cuda::FastOpticalFlowBM
extended_I1	cudalegacy.hpp	/^    GpuMat extended_I1;$/;"	m	class:cv::cuda::FastOpticalFlowBM
extractor_	stitching/detail/matchers.hpp	/^    Ptr<DescriptorExtractor> extractor_;$/;"	m	class:cv::detail::SurfFeaturesFinder
eye	core/mat.inl.hpp	/^MatExpr Mat_<_Tp>::eye(Size sz)$/;"	f	class:cv::Mat_
eye	core/mat.inl.hpp	/^MatExpr Mat_<_Tp>::eye(int rows, int cols)$/;"	f	class:cv::Mat_
eye	core/matx.hpp	/^Matx<_Tp,m,n> Matx<_Tp,m,n>::eye()$/;"	f	class:cv::Matx
f	core/types_c.h	/^        double f; \/**< scalar floating-point number *\/$/;"	m	union:CvFileNode::__anon149
f	hal/defs.h	/^    double f;$/;"	m	union:Cv64suf
f	hal/defs.h	/^    float f;$/;"	m	union:Cv32suf
f0	ts/ts_gtest.h	/^  explicit tuple(GTEST_BY_REF_(T0) f0, GTEST_BY_REF_(T1) f1,$/;"	m	class:std::tr1::tuple
f0_	ts/ts_gtest.h	/^  T0 f0_;$/;"	m	class:std::tr1::tuple
f1	ts/ts_gtest.h	/^  explicit tuple(GTEST_BY_REF_(T0) f0, GTEST_BY_REF_(T1) f1,$/;"	m	class:std::tr1::tuple
f1_	ts/ts_gtest.h	/^  T1 f1_;$/;"	m	class:std::tr1::tuple
f2	ts/ts_gtest.h	/^      GTEST_BY_REF_(T2) f2, GTEST_BY_REF_(T3) f3, GTEST_BY_REF_(T4) f4,$/;"	m	class:std::tr1::tuple
f2_	ts/ts_gtest.h	/^  T2 f2_;$/;"	m	class:std::tr1::tuple
f3	ts/ts_gtest.h	/^      GTEST_BY_REF_(T2) f2, GTEST_BY_REF_(T3) f3, GTEST_BY_REF_(T4) f4,$/;"	m	class:std::tr1::tuple
f3_	ts/ts_gtest.h	/^  T3 f3_;$/;"	m	class:std::tr1::tuple
f4	ts/ts_gtest.h	/^      GTEST_BY_REF_(T2) f2, GTEST_BY_REF_(T3) f3, GTEST_BY_REF_(T4) f4,$/;"	m	class:std::tr1::tuple
f4_	ts/ts_gtest.h	/^  T4 f4_;$/;"	m	class:std::tr1::tuple
f5	ts/ts_gtest.h	/^      GTEST_BY_REF_(T5) f5, GTEST_BY_REF_(T6) f6, GTEST_BY_REF_(T7) f7,$/;"	m	class:std::tr1::tuple
f5_	ts/ts_gtest.h	/^  T5 f5_;$/;"	m	class:std::tr1::tuple
f6	ts/ts_gtest.h	/^      GTEST_BY_REF_(T5) f5, GTEST_BY_REF_(T6) f6, GTEST_BY_REF_(T7) f7,$/;"	m	class:std::tr1::tuple
f6_	ts/ts_gtest.h	/^  T6 f6_;$/;"	m	class:std::tr1::tuple
f7	ts/ts_gtest.h	/^      GTEST_BY_REF_(T5) f5, GTEST_BY_REF_(T6) f6, GTEST_BY_REF_(T7) f7,$/;"	m	class:std::tr1::tuple
f7_	ts/ts_gtest.h	/^  T7 f7_;$/;"	m	class:std::tr1::tuple
f8	ts/ts_gtest.h	/^      GTEST_BY_REF_(T8) f8, GTEST_BY_REF_(T9) f9) : f0_(f0), f1_(f1), f2_(f2),$/;"	m	class:std::tr1::tuple
f8_	ts/ts_gtest.h	/^  T8 f8_;$/;"	m	class:std::tr1::tuple
f9_	ts/ts_gtest.h	/^      f3_(f3), f4_(f4), f5_(f5), f6_(f6), f7_(f7), f8_(f8), f9_(f9) {}$/;"	f	class:std::tr1::tuple
f9_	ts/ts_gtest.h	/^      f9_(t.f9_) {}$/;"	f	class:std::tr1::tuple
f9_	ts/ts_gtest.h	/^  T9 f9_;$/;"	m	class:std::tr1::tuple
factory_	ts/ts_gtest.h	/^  internal::TestFactoryBase* const factory_;  \/\/ The factory that creates$/;"	m	class:testing::TestInfo::internal
failed	ts/ts_gtest.h	/^  bool failed() const { return type_ != kSuccess; }$/;"	f	class:testing::TestPartResult
failure_message	ts/ts_gtest.h	/^  const char* failure_message() const { return message(); }$/;"	f	class:testing::AssertionResult
false_type	ts/ts_gtest.h	/^typedef bool_constant<false> false_type;$/;"	t	namespace:std::tr1
fatally_failed	ts/ts_gtest.h	/^  bool fatally_failed() const { return type_ == kFatalFailure; }$/;"	f	class:testing::TestPartResult
featureType	flann/miniflann.hpp	/^    int featureType;$/;"	m	class:cv::flann::Index
feature_size_	flann/lsh_index.h	/^    unsigned int feature_size_;$/;"	m	class:cvflann::LshIndex
featuresFinder	stitching.hpp	/^    Ptr<detail::FeaturesFinder> featuresFinder() { return features_finder_; }$/;"	f	class:cv::Stitcher
featuresFinder	stitching.hpp	/^    const Ptr<detail::FeaturesFinder> featuresFinder() const { return features_finder_; }$/;"	f	class:cv::Stitcher
featuresMatcher	stitching.hpp	/^    Ptr<detail::FeaturesMatcher> featuresMatcher() { return features_matcher_; }$/;"	f	class:cv::Stitcher
featuresMatcher	stitching.hpp	/^    const Ptr<detail::FeaturesMatcher> featuresMatcher() const { return features_matcher_; }$/;"	f	class:cv::Stitcher
features_	stitching.hpp	/^    std::vector<detail::ImageFeatures> features_;$/;"	m	class:cv::Stitcher
features_	stitching/detail/motion_estimators.hpp	/^    const ImageFeatures *features_;$/;"	m	class:cv::detail::BundleAdjusterBase
features_finder_	stitching.hpp	/^    Ptr<detail::FeaturesFinder> features_finder_;$/;"	m	class:cv::Stitcher
features_matcher_	stitching.hpp	/^    Ptr<detail::FeaturesMatcher> features_matcher_;$/;"	m	class:cv::Stitcher
feed	stitching/detail/exposure_compensate.hpp	/^    void feed(const std::vector<Point> &\/*corners*\/, const std::vector<UMat> &\/*images*\/,$/;"	f	class:cv::detail::NoExposureCompensator
file	core.hpp	/^    String file; \/\/\/< source file name where the error has occured$/;"	m	class:cv::Exception
file	ts/ts_gtest.h	/^    const char*        const file;$/;"	m	struct:testing::internal::AssertHelper::AssertHelperData
file	ts/ts_gtest.h	/^  const std::string& file() const { return file_; }$/;"	f	class:testing::internal::InternalRunDeathTestFlag
file_	ts/ts_gtest.h	/^  std::string file_;$/;"	m	class:testing::internal::InternalRunDeathTestFlag
file_	videostab/global_motion.hpp	/^    std::ifstream file_;$/;"	m	class:cv::videostab::FromFileMotionReader
file_	videostab/global_motion.hpp	/^    std::ofstream file_;$/;"	m	class:cv::videostab::ToFileMotionWriter
file_name	ts/ts_gtest.h	/^  const char* file_name() const {$/;"	f	class:testing::TestPartResult
file_name_	ts/ts_gtest.h	/^  std::string file_name_;$/;"	m	class:testing::TestPartResult
fill	core/cuda/block.hpp	/^        static __device__ __forceinline__ void fill(It beg, It end, const T& value)$/;"	f	struct:cv::cuda::device::Block
fill	core/cuda/warp.hpp	/^        static __device__ __forceinline__ void fill(It beg, It end, const T& value)$/;"	f	struct:cv::cuda::device::Warp
fill_xor_mask	flann/lsh_index.h	/^    void fill_xor_mask(lsh::BucketKey key, int lowest_index, unsigned int level,$/;"	f	class:cvflann::LshIndex
filterByArea	features2d.hpp	/^      CV_PROP_RW bool filterByArea;$/;"	m	struct:cv::SimpleBlobDetector::Params
filterByCircularity	features2d.hpp	/^      CV_PROP_RW bool filterByCircularity;$/;"	m	struct:cv::SimpleBlobDetector::Params
filterByColor	features2d.hpp	/^      CV_PROP_RW bool filterByColor;$/;"	m	struct:cv::SimpleBlobDetector::Params
filterByConvexity	features2d.hpp	/^      CV_PROP_RW bool filterByConvexity;$/;"	m	struct:cv::SimpleBlobDetector::Params
filterByInertia	features2d.hpp	/^      CV_PROP_RW bool filterByInertia;$/;"	m	struct:cv::SimpleBlobDetector::Params
finalFrame_	videostab/stabilizer.hpp	/^    Mat finalFrame_;$/;"	m	class:cv::videostab::StabilizerBase
find	core/cvstd.hpp	/^size_t String::find(char c, size_t pos) const$/;"	f	class:cv::String
find	core/cvstd.hpp	/^size_t String::find(const String& str, size_t pos) const$/;"	f	class:cv::String
find	core/cvstd.hpp	/^size_t String::find(const char* s, size_t pos) const$/;"	f	class:cv::String
find	core/cvstd.hpp	/^size_t String::find(const char* s, size_t pos, size_t n) const$/;"	f	class:cv::String
find	core/mat.inl.hpp	/^const _Tp* SparseMat::find(const int* idx, size_t* hashval) const$/;"	f	class:cv::SparseMat
find	core/mat.inl.hpp	/^const _Tp* SparseMat::find(int i0, int i1, int i2, size_t* hashval) const$/;"	f	class:cv::SparseMat
find	core/mat.inl.hpp	/^const _Tp* SparseMat::find(int i0, int i1, size_t* hashval) const$/;"	f	class:cv::SparseMat
find	core/mat.inl.hpp	/^const _Tp* SparseMat::find(int i0, size_t* hashval) const$/;"	f	class:cv::SparseMat
find	stitching/detail/seam_finders.hpp	/^    void find(const std::vector<UMat>&, const std::vector<Point>&, std::vector<UMat>&) {}$/;"	f	class:cv::detail::NoSeamFinder
findExactNN	flann/kmeans_index.h	/^    void findExactNN(KMeansNodePtr node, ResultSet<DistanceType>& result, const ElementType* vec)$/;"	f	class:cvflann::KMeansIndex
findNN	flann/hierarchical_clustering_index.h	/^    void findNN(NodePtr node, ResultSet<DistanceType>& result, const ElementType* vec, int& checks, int maxChecks,$/;"	f	class:cvflann::HierarchicalClusteringIndex
findNN	flann/kmeans_index.h	/^    void findNN(KMeansNodePtr node, ResultSet<DistanceType>& result, const ElementType* vec, int& checks, int maxChecks,$/;"	f	class:cvflann::KMeansIndex
findNeighbors	flann/autotuned_index.h	/^    virtual void findNeighbors(ResultSet<DistanceType>& result, const ElementType* vec, const SearchParams& searchParams)$/;"	f	class:cvflann::AutotunedIndex
findNeighbors	flann/composite_index.h	/^    void findNeighbors(ResultSet<DistanceType>& result, const ElementType* vec, const SearchParams& searchParams)$/;"	f	class:cvflann::CompositeIndex
findNeighbors	flann/flann_base.hpp	/^    void findNeighbors(ResultSet<DistanceType>& result, const ElementType* vec, const SearchParams& searchParams)$/;"	f	class:cvflann::Index
findNeighbors	flann/hierarchical_clustering_index.h	/^    void findNeighbors(ResultSet<DistanceType>& result, const ElementType* vec, const SearchParams& searchParams)$/;"	f	class:cvflann::HierarchicalClusteringIndex
findNeighbors	flann/kdtree_index.h	/^    void findNeighbors(ResultSet<DistanceType>& result, const ElementType* vec, const SearchParams& searchParams)$/;"	f	class:cvflann::KDTreeIndex
findNeighbors	flann/kdtree_single_index.h	/^    void findNeighbors(ResultSet<DistanceType>& result, const ElementType* vec, const SearchParams& searchParams)$/;"	f	class:cvflann::KDTreeSingleIndex
findNeighbors	flann/kmeans_index.h	/^    void findNeighbors(ResultSet<DistanceType>& result, const ElementType* vec, const SearchParams& searchParams)$/;"	f	class:cvflann::KMeansIndex
findNeighbors	flann/linear_index.h	/^    void findNeighbors(ResultSet<DistanceType>& resultSet, const ElementType* vec, const SearchParams& \/*searchParams*\/)$/;"	f	class:cvflann::LinearIndex
findNeighbors	flann/lsh_index.h	/^    void findNeighbors(ResultSet<DistanceType>& result, const ElementType* vec, const SearchParams& \/*searchParams*\/)$/;"	f	class:cvflann::LshIndex
find_first_of	core/cvstd.hpp	/^size_t String::find_first_of(char c, size_t pos) const$/;"	f	class:cv::String
find_first_of	core/cvstd.hpp	/^size_t String::find_first_of(const String& str, size_t pos) const$/;"	f	class:cv::String
find_first_of	core/cvstd.hpp	/^size_t String::find_first_of(const char* s, size_t pos) const$/;"	f	class:cv::String
find_first_of	core/cvstd.hpp	/^size_t String::find_first_of(const char* s, size_t pos, size_t n) const$/;"	f	class:cv::String
find_last_of	core/cvstd.hpp	/^size_t String::find_last_of(char c, size_t pos) const$/;"	f	class:cv::String
find_last_of	core/cvstd.hpp	/^size_t String::find_last_of(const String& str, size_t pos) const$/;"	f	class:cv::String
find_last_of	core/cvstd.hpp	/^size_t String::find_last_of(const char* s, size_t pos) const$/;"	f	class:cv::String
find_last_of	core/cvstd.hpp	/^size_t String::find_last_of(const char* s, size_t pos, size_t n) const$/;"	f	class:cv::String
find_nearest	flann/ground_truth.h	/^void find_nearest(const Matrix<typename Distance::ElementType>& dataset, typename Distance::ElementType* query, int* matches, int nn,$/;"	f	namespace:cvflann
finished_	ts/ts_gtest.h	/^  bool finished_;  \/\/ true iff we know that the thread function has finished.$/;"	m	class:std::tr1::ThreadWithParam
first	core/core_c.h	/^    static CvTypeInfo* first;$/;"	m	struct:CvType
firstCall_	superres.hpp	/^            bool firstCall_;$/;"	m	class:cv::superres::SuperResolution
firstEdge	imgproc.hpp	/^        int firstEdge;$/;"	m	struct:cv::Subdiv2D::Vertex
first_argument_type	cudev/functional/functional.hpp	/^    typedef _Arg1   first_argument_type;$/;"	t	struct:cv::cudev::binary_function
fisheye	calib3d.hpp	/^namespace fisheye$/;"	n	namespace:cv
fixture_class_id_	ts/ts_gtest.h	/^  const internal::TypeId fixture_class_id_;   \/\/ ID of the test fixture class$/;"	m	class:testing::TestInfo
fl	core/types_c.h	/^        float* fl;$/;"	m	union:CvMat::__anon144
fl	core/types_c.h	/^        float* fl;$/;"	m	union:CvMatND::__anon147
flag_	videostab/fast_marching.hpp	/^    cv::Mat_<uchar> flag_; \/\/ flag map$/;"	m	class:cv::videostab::FastMarchingMethod
flags	core/cuda.hpp	/^    int flags;$/;"	m	class:cv::cuda::GpuMat
flags	core/cuda.hpp	/^    int flags;$/;"	m	class:cv::cuda::HostMem
flags	core/mat.hpp	/^    int flags;$/;"	m	class:cv::Mat
flags	core/mat.hpp	/^    int flags;$/;"	m	class:cv::MatExpr
flags	core/mat.hpp	/^    int flags;$/;"	m	class:cv::SparseMat
flags	core/mat.hpp	/^    int flags;$/;"	m	class:cv::UMat
flags	core/mat.hpp	/^    int flags;$/;"	m	class:cv::_InputArray
flags	core/mat.hpp	/^    int flags;$/;"	m	struct:cv::UMatData
flags	core/ocl.hpp	/^    int flags;$/;"	m	class:cv::ocl::KernelArg
flags	core/types_c.h	/^    int flags; \/**< not used *\/$/;"	m	struct:CvTypeInfo
flags	features2d.hpp	/^    int flags;$/;"	m	class:cv::BOWKMeansTrainer
flags	objdetect/objdetect_c.h	/^    int  flags;$/;"	m	struct:CvHaarClassifierCascade
flagsToVars	ts/ts_perf.hpp	/^    void flagsToVars(int flags)$/;"	f	struct:perf::ImplData
flann	flann.hpp	/^namespace flann$/;"	n	namespace:cv
flann	flann/miniflann.hpp	/^namespace flann$/;"	n	namespace:cv
flannIndex	features2d.hpp	/^    Ptr<flann::Index> flannIndex;$/;"	m	class:cv::FlannBasedMatcher
flann_algorithm_t	flann/defines.h	/^enum flann_algorithm_t$/;"	g	namespace:cvflann
flann_centers_init_t	flann/defines.h	/^enum flann_centers_init_t$/;"	g	namespace:cvflann
flann_datatype_t	flann/defines.h	/^enum flann_datatype_t$/;"	g	namespace:cvflann
flann_distance_t	flann/defines.h	/^enum flann_distance_t$/;"	g	namespace:cvflann
flann_log_level_t	flann/defines.h	/^enum flann_log_level_t$/;"	g	namespace:cvflann
flattenedThreadId	core/cuda/block.hpp	/^        static __device__ __forceinline__ int flattenedThreadId()$/;"	f	struct:cv::cuda::device::Block
float_type	core/affine.hpp	/^        typedef T float_type;$/;"	t	class:cv::Affine3
flowErrorThreshold	videostab/inpainting.hpp	/^    float flowErrorThreshold() const { return flowErrorThreshold_; }$/;"	f	class:cv::videostab::MotionInpainter
flowErrorThreshold_	videostab/inpainting.hpp	/^    float flowErrorThreshold_;$/;"	m	class:cv::videostab::MotionInpainter
flowErrors_	videostab/inpainting.hpp	/^    Mat_<float> flowX_, flowY_, flowErrors_;$/;"	m	class:cv::videostab::MotionInpainter
flowMask_	videostab/inpainting.hpp	/^    Mat_<uchar> flowMask_;$/;"	m	class:cv::videostab::MotionInpainter
flowX_	videostab/inpainting.hpp	/^    Mat_<float> flowX_, flowY_, flowErrors_;$/;"	m	class:cv::videostab::MotionInpainter
flowX_	videostab/optical_flow.hpp	/^    cuda::GpuMat frame0_, frame1_, flowX_, flowY_, errors_;$/;"	m	class:cv::videostab::DensePyrLkOptFlowEstimatorGpu
flowY_	videostab/inpainting.hpp	/^    Mat_<float> flowX_, flowY_, flowErrors_;$/;"	m	class:cv::videostab::MotionInpainter
flowY_	videostab/optical_flow.hpp	/^    cuda::GpuMat frame0_, frame1_, flowX_, flowY_, errors_;$/;"	m	class:cv::videostab::DensePyrLkOptFlowEstimatorGpu
fmm_	videostab/inpainting.hpp	/^    FastMarchingMethod fmm_;$/;"	m	class:cv::videostab::ColorAverageInpainter
fmm_	videostab/inpainting.hpp	/^    FastMarchingMethod fmm_;$/;"	m	class:cv::videostab::MotionInpainter
fmt	core/affine.hpp	/^               fmt          = DataType<channel_type>::fmt + ((channels - 1) << 8),$/;"	e	enum:cv::DataType::__anon162
fmt	core/cvstd.inl.hpp	/^           fmt          = DataType<channel_type>::fmt + ((channels - 1) << 8),$/;"	e	enum:cv::DataType::__anon161
fmt	core/matx.hpp	/^           fmt          = DataType<channel_type>::fmt + ((channels - 1) << 8),$/;"	e	enum:cv::DataType::__anon151
fmt	core/matx.hpp	/^           fmt          = DataType<channel_type>::fmt + ((channels - 1) << 8),$/;"	e	enum:cv::DataType::__anon153
fmt	core/traits.hpp	/^           fmt          = (int)'c',$/;"	e	enum:cv::DataType::__anon104
fmt	core/traits.hpp	/^           fmt          = (int)'c',$/;"	e	enum:cv::DataType::__anon105
fmt	core/traits.hpp	/^           fmt          = (int)'d',$/;"	e	enum:cv::DataType::__anon110
fmt	core/traits.hpp	/^           fmt          = (int)'f',$/;"	e	enum:cv::DataType::__anon109
fmt	core/traits.hpp	/^           fmt          = (int)'i',$/;"	e	enum:cv::DataType::__anon108
fmt	core/traits.hpp	/^           fmt          = (int)'s',$/;"	e	enum:cv::DataType::__anon107
fmt	core/traits.hpp	/^           fmt          = (int)'u',$/;"	e	enum:cv::DataType::__anon102
fmt	core/traits.hpp	/^           fmt          = (int)'u',$/;"	e	enum:cv::DataType::__anon103
fmt	core/traits.hpp	/^           fmt          = (int)'w',$/;"	e	enum:cv::DataType::__anon106
fmt	core/traits.hpp	/^           fmt          = 0,$/;"	e	enum:cv::DataType::__anon101
fmt	core/traits.hpp	/^        fmt   = DataType<_Tp>::fmt$/;"	e	enum:cv::DataDepth::__anon111
fmt	core/types.hpp	/^           fmt          = DataType<channel_type>::fmt + ((channels - 1) << 8),$/;"	e	enum:cv::DataType::__anon120
fmt	core/types.hpp	/^           fmt          = DataType<channel_type>::fmt + ((channels - 1) << 8),$/;"	e	enum:cv::DataType::__anon121
fmt	core/types.hpp	/^           fmt          = DataType<channel_type>::fmt + ((channels - 1) << 8),$/;"	e	enum:cv::DataType::__anon122
fmt	core/types.hpp	/^           fmt          = DataType<channel_type>::fmt + ((channels - 1) << 8),$/;"	e	enum:cv::DataType::__anon123
fmt	core/types.hpp	/^           fmt          = DataType<channel_type>::fmt + ((channels - 1) << 8),$/;"	e	enum:cv::DataType::__anon124
fmt	core/types.hpp	/^           fmt          = DataType<channel_type>::fmt + ((channels - 1) << 8),$/;"	e	enum:cv::DataType::__anon125
fmt	core/types.hpp	/^           fmt          = DataType<channel_type>::fmt + ((channels - 1) << 8),$/;"	e	enum:cv::DataType::__anon126
fmt	core/types.hpp	/^           fmt          = DataType<channel_type>::fmt + ((channels - 1) << 8),$/;"	e	enum:cv::DataType::__anon127
fmt	core/types.hpp	/^           fmt          = DataType<channel_type>::fmt + ((channels - 1) << 8),$/;"	e	enum:cv::DataType::__anon128
fmt	core/types.hpp	/^           fmt          = DataType<channel_type>::fmt + ((channels - 1) << 8),$/;"	e	enum:cv::DataType::__anon129
fmt	core/types.hpp	/^           fmt          = DataType<channel_type>::fmt + ((channels - 1) << 8),$/;"	e	enum:cv::DataType::__anon130
fmt	cudev/util/vec_traits.hpp	/^           fmt          = (int)'i',$/;"	e	enum:cv::DataType::__anon359
fmt	cudev/util/vec_traits.hpp	/^           fmt          = DataType<channel_type>::fmt + ((channels - 1) << 8),$/;"	e	enum:cv::DataType::__anon360
fmt	cudev/util/vec_traits.hpp	/^           fmt          = DataType<channel_type>::fmt + ((channels - 1) << 8),$/;"	e	enum:cv::DataType::__anon361
fmt	cudev/util/vec_traits.hpp	/^           fmt          = DataType<channel_type>::fmt + ((channels - 1) << 8),$/;"	e	enum:cv::DataType::__anon362
fmt	cudev/util/vec_traits.hpp	/^           fmt          = DataType<channel_type>::fmt + ((channels - 1) << 8),$/;"	e	enum:cv::DataType::__anon363
fn_clEnqueueSVMMap	core/opencl/opencl_svm.hpp	/^    clEnqueueSVMMapAMD_fn fn_clEnqueueSVMMap;$/;"	m	struct:cv::ocl::svm::SVMFunctions
fn_clEnqueueSVMMemFill	core/opencl/opencl_svm.hpp	/^    clEnqueueSVMMemFillAMD_fn fn_clEnqueueSVMMemFill;$/;"	m	struct:cv::ocl::svm::SVMFunctions
fn_clEnqueueSVMMemcpy	core/opencl/opencl_svm.hpp	/^    clEnqueueSVMMemcpyAMD_fn fn_clEnqueueSVMMemcpy;$/;"	m	struct:cv::ocl::svm::SVMFunctions
fn_clEnqueueSVMUnmap	core/opencl/opencl_svm.hpp	/^    clEnqueueSVMUnmapAMD_fn fn_clEnqueueSVMUnmap;$/;"	m	struct:cv::ocl::svm::SVMFunctions
fn_clSVMAlloc	core/opencl/opencl_svm.hpp	/^    clSVMAllocAMD_fn fn_clSVMAlloc;$/;"	m	struct:cv::ocl::svm::SVMFunctions
fn_clSVMFree	core/opencl/opencl_svm.hpp	/^    clSVMFreeAMD_fn fn_clSVMFree;$/;"	m	struct:cv::ocl::svm::SVMFunctions
fn_clSetKernelArgSVMPointer	core/opencl/opencl_svm.hpp	/^    clSetKernelArgSVMPointerAMD_fn fn_clSetKernelArgSVMPointer;$/;"	m	struct:cv::ocl::svm::SVMFunctions
focal	stitching/detail/camera.hpp	/^    double focal; \/\/ Focal length$/;"	m	struct:cv::detail::CameraParams
focal_	viz/types.hpp	/^            Vec2d focal_;$/;"	m	class:cv::viz::Camera
font_face	highgui.hpp	/^    int         font_face; \/\/ Qt: bool italic$/;"	m	struct:cv::QtFont
font_face	imgproc/imgproc_c.h	/^    int         font_face;    \/\/Qt: bool italic         \/** =CV_FONT_* *\/$/;"	m	struct:CvFont
forEach	core/mat.inl.hpp	/^void Mat::forEach(const Functor& operation) const {$/;"	f	class:cv::Mat
forEach	core/mat.inl.hpp	/^void Mat::forEach(const Functor& operation) {$/;"	f	class:cv::Mat
forEach	core/mat.inl.hpp	/^void Mat_<_Tp>::forEach(const Functor& operation) const {$/;"	f	class:cv::Mat_
forEach	core/mat.inl.hpp	/^void Mat_<_Tp>::forEach(const Functor& operation) {$/;"	f	class:cv::Mat_
forEach	stitching/detail/util_inl.hpp	/^B Graph::forEach(B body) const$/;"	f	class:cv::detail::Graph
forEach_impl	core/utility.hpp	/^void Mat::forEach_impl(const Functor& operation) {$/;"	f	class:cv::Mat
format	core/opengl.hpp	/^cv::ogl::Texture2D::Format cv::ogl::Texture2D::format() const$/;"	f	class:cv::ogl::Texture2D
format	core/operations.hpp	/^Ptr<Formatted> format(InputArray mtx, int fmt)$/;"	f	namespace:cv
format_	core/opengl.hpp	/^    Format format_;$/;"	m	class:cv::ogl::Texture2D
fov_	viz/types.hpp	/^            Vec2d fov_;$/;"	m	class:cv::viz::Camera
fraction_bits	ts/ts_gtest.h	/^  Bits fraction_bits() const { return kFractionBitMask & u_.bits_; }$/;"	f	class:testing::internal::FloatingPoint
frame0_	videostab/global_motion.hpp	/^    cuda::GpuMat frame0_, grayFrame0_, frame1_;$/;"	m	class:cv::videostab::KeypointBasedMotionEstimatorGpu
frame0_	videostab/optical_flow.hpp	/^    cuda::GpuMat frame0_, frame1_, flowX_, flowY_, errors_;$/;"	m	class:cv::videostab::DensePyrLkOptFlowEstimatorGpu
frame0_	videostab/optical_flow.hpp	/^    cuda::GpuMat frame0_, frame1_, points0_, points1_, status_, errors_;$/;"	m	class:cv::videostab::SparsePyrLkOptFlowEstimatorGpu
frame1_	videostab/global_motion.hpp	/^    cuda::GpuMat frame0_, grayFrame0_, frame1_;$/;"	m	class:cv::videostab::KeypointBasedMotionEstimatorGpu
frame1_	videostab/inpainting.hpp	/^    Mat frame1_, transformedFrame1_;$/;"	m	class:cv::videostab::MotionInpainter
frame1_	videostab/optical_flow.hpp	/^    cuda::GpuMat frame0_, frame1_, flowX_, flowY_, errors_;$/;"	m	class:cv::videostab::DensePyrLkOptFlowEstimatorGpu
frame1_	videostab/optical_flow.hpp	/^    cuda::GpuMat frame0_, frame1_, points0_, points1_, status_, errors_;$/;"	m	class:cv::videostab::SparsePyrLkOptFlowEstimatorGpu
frameCount	videostab/wobble_suppression.hpp	/^    virtual int frameCount() const { return frameCount_; }$/;"	f	class:cv::videostab::WobbleSuppressorBase
frameCount_	videostab/stabilizer.hpp	/^    int frameCount_;$/;"	m	class:cv::videostab::TwoPassStabilizer
frameCount_	videostab/wobble_suppression.hpp	/^    int frameCount_;$/;"	m	class:cv::videostab::WobbleSuppressorBase
frameDevice_	videostab/wobble_suppression.hpp	/^    cuda::GpuMat frameDevice_, resultDevice_;$/;"	m	class:cv::videostab::MoreAccurateMotionWobbleSuppressorGpu
frameMask_	videostab/stabilizer.hpp	/^    Mat frameMask_;$/;"	m	class:cv::videostab::StabilizerBase
frameSize	videostab/motion_stabilizing.hpp	/^    Size frameSize() const { return frameSize_; }$/;"	f	class:cv::videostab::LpMotionStabilizer
frameSize_	videostab/motion_stabilizing.hpp	/^    Size frameSize_;$/;"	m	class:cv::videostab::LpMotionStabilizer
frameSize_	videostab/stabilizer.hpp	/^    Size frameSize_;$/;"	m	class:cv::videostab::StabilizerBase
frameSource	videostab/stabilizer.hpp	/^    Ptr<IFrameSource> frameSource() const { return frameSource_; }$/;"	f	class:cv::videostab::StabilizerBase
frameSource_	superres.hpp	/^            Ptr<FrameSource> frameSource_;$/;"	m	class:cv::superres::SuperResolution
frameSource_	videostab/stabilizer.hpp	/^    Ptr<IFrameSource> frameSource_;$/;"	m	class:cv::videostab::StabilizerBase
frames	videostab/deblurring.hpp	/^    virtual const std::vector<Mat>& frames() const { return *frames_; }$/;"	f	class:cv::videostab::DeblurerBase
frames	videostab/inpainting.hpp	/^    virtual const std::vector<Mat>& frames() const { return *frames_; }$/;"	f	class:cv::videostab::InpainterBase
frames_	videostab/deblurring.hpp	/^    const std::vector<Mat> *frames_;$/;"	m	class:cv::videostab::DeblurerBase
frames_	videostab/inpainting.hpp	/^    const std::vector<Mat> *frames_;$/;"	m	class:cv::videostab::InpainterBase
frames_	videostab/stabilizer.hpp	/^    std::vector<Mat> frames_;$/;"	m	class:cv::videostab::StabilizerBase
free	flann/matrix.h	/^    FLANN_DEPRECATED void free()$/;"	f	class:cvflann::Matrix
freeList	core/mat.hpp	/^        size_t freeList;$/;"	m	struct:cv::SparseMat::Hdr
freeMemory	core/cuda.inl.hpp	/^size_t DeviceInfo::freeMemory() const$/;"	f	class:cv::cuda::DeviceInfo
freePoint	imgproc.hpp	/^    int freePoint;$/;"	m	class:cv::Subdiv2D
freeQEdge	imgproc.hpp	/^    int freeQEdge;$/;"	m	class:cv::Subdiv2D
free_centers	flann/kmeans_index.h	/^    void free_centers(KMeansNodePtr node)$/;"	f	class:cvflann::KMeansIndex
free_coef	objdetect.hpp	/^    float free_coef;$/;"	m	struct:cv::HOGDescriptor
free_elements	flann/hierarchical_clustering_index.h	/^    void free_elements()$/;"	f	class:cvflann::HierarchicalClusteringIndex
free_space	core/types_c.h	/^    int free_space;               \/**< Remaining free space in current block.   *\/$/;"	m	struct:CvMemStorage
free_space	core/types_c.h	/^    int free_space;$/;"	m	struct:CvMemStoragePos
frequency	ts/ts_perf.hpp	/^    double frequency;$/;"	m	struct:perf::performance_metrics
from	stitching/detail/util.hpp	/^    int from, to;$/;"	m	struct:cv::detail::GraphEdge
front	core/core_c.h	/^template<typename _Tp> inline _Tp& Seq<_Tp>::front()$/;"	f	class:cv::Seq
front	core/core_c.h	/^template<typename _Tp> inline const _Tp& Seq<_Tp>::front() const$/;"	f	class:cv::Seq
fs	core/core_c.h	/^CVAPI(void) cvEndWriteStruct( CvFileStorage* fs );$/;"	v
fs	core/core_c.h	/^CVAPI(void) cvReleaseFileStorage( CvFileStorage** fs );$/;"	v
fs	core/core_c.h	/^CVAPI(void) cvStartNextStream( CvFileStorage* fs );$/;"	v
fs	core/persistence.hpp	/^        FileStorage* fs;$/;"	m	class:cv::internal::VecWriterProxy
fs	core/persistence.hpp	/^        FileStorage* fs;$/;"	m	class:cv::internal::WriteStructContext
fs	core/persistence.hpp	/^    Ptr<CvFileStorage> fs; \/\/!< the underlying C FileStorage structure$/;"	m	class:cv::FileStorage
fs	core/persistence.hpp	/^    const CvFileStorage* fs;$/;"	m	class:cv::FileNode
fs	core/persistence.hpp	/^    const CvFileStorage* fs;$/;"	m	class:cv::FileNodeIterator
full	flann/result_set.h	/^    bool full() const$/;"	f	class:cvflann::KNNResultSet
full	flann/result_set.h	/^    bool full() const$/;"	f	class:cvflann::KNNSimpleResultSet
full	flann/result_set.h	/^    bool full() const$/;"	f	class:cvflann::RadiusResultSet
full	flann/result_set.h	/^    inline bool full() const$/;"	f	class:cvflann::RadiusUniqueResultSet
full	flann/result_set.h	/^    inline bool full() const$/;"	f	class:cvflann::UniqueResultSet
full_img_sizes_	stitching.hpp	/^    std::vector<cv::Size> full_img_sizes_;$/;"	m	class:cv::Stitcher
full_pattern_	ts/ts_gtest.h	/^  const char* full_pattern_;  \/\/ For FullMatch();$/;"	m	class:std::tr1::RE
full_regex_	ts/ts_gtest.h	/^  regex_t full_regex_;     \/\/ For FullMatch().$/;"	m	class:std::tr1::RE
funName	ts/ts_perf.hpp	/^    std::vector<cv::String> funName;$/;"	m	struct:perf::ImplData
func	core.hpp	/^    String func; \/\/\/< function name. Available only when the compiler supports getting it$/;"	m	class:cv::Exception
func_	ts/ts_gtest.h	/^  const UserThreadFunc func_;  \/\/ User-supplied thread function.$/;"	m	class:std::tr1::ThreadWithParam
func_addr	core/types_c.h	/^    void** func_addr;$/;"	m	struct:CvPluginFuncInfo
func_names	core/types_c.h	/^    const char* func_names;$/;"	m	struct:CvPluginFuncInfo
func_tab	core/types_c.h	/^    CvPluginFuncInfo* func_tab;$/;"	m	struct:CvModuleInfo
functional_detail	core/cuda/functional.hpp	/^    namespace functional_detail$/;"	n	namespace:cv::cuda::device
functional_detail	cudev/functional/functional.hpp	/^namespace functional_detail$/;"	n	namespace:cv::cudev
fx	cudev/ptr2d/resize.hpp	/^    float fx, fy;$/;"	m	struct:cv::cudev::ResizePtr
fy	cudev/ptr2d/resize.hpp	/^    float fx, fy;$/;"	m	struct:cv::cudev::ResizePtr
g10_	ts/ts_gtest.h	/^  const Generator10 g10_;$/;"	m	class:testing::internal::CartesianProductHolder10
g10_	ts/ts_gtest.h	/^  const ParamGenerator<T10> g10_;$/;"	m	class:testing::internal::CartesianProductGenerator10
g1_	ts/ts_gtest.h	/^  const Generator1 g1_;$/;"	m	class:testing::internal::CartesianProductHolder10
g1_	ts/ts_gtest.h	/^  const Generator1 g1_;$/;"	m	class:testing::internal::CartesianProductHolder2
g1_	ts/ts_gtest.h	/^  const Generator1 g1_;$/;"	m	class:testing::internal::CartesianProductHolder3
g1_	ts/ts_gtest.h	/^  const Generator1 g1_;$/;"	m	class:testing::internal::CartesianProductHolder4
g1_	ts/ts_gtest.h	/^  const Generator1 g1_;$/;"	m	class:testing::internal::CartesianProductHolder5
g1_	ts/ts_gtest.h	/^  const Generator1 g1_;$/;"	m	class:testing::internal::CartesianProductHolder6
g1_	ts/ts_gtest.h	/^  const Generator1 g1_;$/;"	m	class:testing::internal::CartesianProductHolder7
g1_	ts/ts_gtest.h	/^  const Generator1 g1_;$/;"	m	class:testing::internal::CartesianProductHolder8
g1_	ts/ts_gtest.h	/^  const Generator1 g1_;$/;"	m	class:testing::internal::CartesianProductHolder9
g1_	ts/ts_gtest.h	/^  const ParamGenerator<T1> g1_;$/;"	m	class:testing::internal::CartesianProductGenerator10
g1_	ts/ts_gtest.h	/^  const ParamGenerator<T1> g1_;$/;"	m	class:testing::internal::CartesianProductGenerator2
g1_	ts/ts_gtest.h	/^  const ParamGenerator<T1> g1_;$/;"	m	class:testing::internal::CartesianProductGenerator3
g1_	ts/ts_gtest.h	/^  const ParamGenerator<T1> g1_;$/;"	m	class:testing::internal::CartesianProductGenerator4
g1_	ts/ts_gtest.h	/^  const ParamGenerator<T1> g1_;$/;"	m	class:testing::internal::CartesianProductGenerator5
g1_	ts/ts_gtest.h	/^  const ParamGenerator<T1> g1_;$/;"	m	class:testing::internal::CartesianProductGenerator6
g1_	ts/ts_gtest.h	/^  const ParamGenerator<T1> g1_;$/;"	m	class:testing::internal::CartesianProductGenerator7
g1_	ts/ts_gtest.h	/^  const ParamGenerator<T1> g1_;$/;"	m	class:testing::internal::CartesianProductGenerator8
g1_	ts/ts_gtest.h	/^  const ParamGenerator<T1> g1_;$/;"	m	class:testing::internal::CartesianProductGenerator9
g2_	ts/ts_gtest.h	/^  const Generator2 g2_;$/;"	m	class:testing::internal::CartesianProductHolder10
g2_	ts/ts_gtest.h	/^  const Generator2 g2_;$/;"	m	class:testing::internal::CartesianProductHolder2
g2_	ts/ts_gtest.h	/^  const Generator2 g2_;$/;"	m	class:testing::internal::CartesianProductHolder3
g2_	ts/ts_gtest.h	/^  const Generator2 g2_;$/;"	m	class:testing::internal::CartesianProductHolder4
g2_	ts/ts_gtest.h	/^  const Generator2 g2_;$/;"	m	class:testing::internal::CartesianProductHolder5
g2_	ts/ts_gtest.h	/^  const Generator2 g2_;$/;"	m	class:testing::internal::CartesianProductHolder6
g2_	ts/ts_gtest.h	/^  const Generator2 g2_;$/;"	m	class:testing::internal::CartesianProductHolder7
g2_	ts/ts_gtest.h	/^  const Generator2 g2_;$/;"	m	class:testing::internal::CartesianProductHolder8
g2_	ts/ts_gtest.h	/^  const Generator2 g2_;$/;"	m	class:testing::internal::CartesianProductHolder9
g2_	ts/ts_gtest.h	/^  const ParamGenerator<T2> g2_;$/;"	m	class:testing::internal::CartesianProductGenerator10
g2_	ts/ts_gtest.h	/^  const ParamGenerator<T2> g2_;$/;"	m	class:testing::internal::CartesianProductGenerator2
g2_	ts/ts_gtest.h	/^  const ParamGenerator<T2> g2_;$/;"	m	class:testing::internal::CartesianProductGenerator3
g2_	ts/ts_gtest.h	/^  const ParamGenerator<T2> g2_;$/;"	m	class:testing::internal::CartesianProductGenerator4
g2_	ts/ts_gtest.h	/^  const ParamGenerator<T2> g2_;$/;"	m	class:testing::internal::CartesianProductGenerator5
g2_	ts/ts_gtest.h	/^  const ParamGenerator<T2> g2_;$/;"	m	class:testing::internal::CartesianProductGenerator6
g2_	ts/ts_gtest.h	/^  const ParamGenerator<T2> g2_;$/;"	m	class:testing::internal::CartesianProductGenerator7
g2_	ts/ts_gtest.h	/^  const ParamGenerator<T2> g2_;$/;"	m	class:testing::internal::CartesianProductGenerator8
g2_	ts/ts_gtest.h	/^  const ParamGenerator<T2> g2_;$/;"	m	class:testing::internal::CartesianProductGenerator9
g3_	ts/ts_gtest.h	/^  const Generator3 g3_;$/;"	m	class:testing::internal::CartesianProductHolder10
g3_	ts/ts_gtest.h	/^  const Generator3 g3_;$/;"	m	class:testing::internal::CartesianProductHolder3
g3_	ts/ts_gtest.h	/^  const Generator3 g3_;$/;"	m	class:testing::internal::CartesianProductHolder4
g3_	ts/ts_gtest.h	/^  const Generator3 g3_;$/;"	m	class:testing::internal::CartesianProductHolder5
g3_	ts/ts_gtest.h	/^  const Generator3 g3_;$/;"	m	class:testing::internal::CartesianProductHolder6
g3_	ts/ts_gtest.h	/^  const Generator3 g3_;$/;"	m	class:testing::internal::CartesianProductHolder7
g3_	ts/ts_gtest.h	/^  const Generator3 g3_;$/;"	m	class:testing::internal::CartesianProductHolder8
g3_	ts/ts_gtest.h	/^  const Generator3 g3_;$/;"	m	class:testing::internal::CartesianProductHolder9
g3_	ts/ts_gtest.h	/^  const ParamGenerator<T3> g3_;$/;"	m	class:testing::internal::CartesianProductGenerator10
g3_	ts/ts_gtest.h	/^  const ParamGenerator<T3> g3_;$/;"	m	class:testing::internal::CartesianProductGenerator3
g3_	ts/ts_gtest.h	/^  const ParamGenerator<T3> g3_;$/;"	m	class:testing::internal::CartesianProductGenerator4
g3_	ts/ts_gtest.h	/^  const ParamGenerator<T3> g3_;$/;"	m	class:testing::internal::CartesianProductGenerator5
g3_	ts/ts_gtest.h	/^  const ParamGenerator<T3> g3_;$/;"	m	class:testing::internal::CartesianProductGenerator6
g3_	ts/ts_gtest.h	/^  const ParamGenerator<T3> g3_;$/;"	m	class:testing::internal::CartesianProductGenerator7
g3_	ts/ts_gtest.h	/^  const ParamGenerator<T3> g3_;$/;"	m	class:testing::internal::CartesianProductGenerator8
g3_	ts/ts_gtest.h	/^  const ParamGenerator<T3> g3_;$/;"	m	class:testing::internal::CartesianProductGenerator9
g4_	ts/ts_gtest.h	/^  const Generator4 g4_;$/;"	m	class:testing::internal::CartesianProductHolder10
g4_	ts/ts_gtest.h	/^  const Generator4 g4_;$/;"	m	class:testing::internal::CartesianProductHolder4
g4_	ts/ts_gtest.h	/^  const Generator4 g4_;$/;"	m	class:testing::internal::CartesianProductHolder5
g4_	ts/ts_gtest.h	/^  const Generator4 g4_;$/;"	m	class:testing::internal::CartesianProductHolder6
g4_	ts/ts_gtest.h	/^  const Generator4 g4_;$/;"	m	class:testing::internal::CartesianProductHolder7
g4_	ts/ts_gtest.h	/^  const Generator4 g4_;$/;"	m	class:testing::internal::CartesianProductHolder8
g4_	ts/ts_gtest.h	/^  const Generator4 g4_;$/;"	m	class:testing::internal::CartesianProductHolder9
g4_	ts/ts_gtest.h	/^  const ParamGenerator<T4> g4_;$/;"	m	class:testing::internal::CartesianProductGenerator10
g4_	ts/ts_gtest.h	/^  const ParamGenerator<T4> g4_;$/;"	m	class:testing::internal::CartesianProductGenerator4
g4_	ts/ts_gtest.h	/^  const ParamGenerator<T4> g4_;$/;"	m	class:testing::internal::CartesianProductGenerator5
g4_	ts/ts_gtest.h	/^  const ParamGenerator<T4> g4_;$/;"	m	class:testing::internal::CartesianProductGenerator6
g4_	ts/ts_gtest.h	/^  const ParamGenerator<T4> g4_;$/;"	m	class:testing::internal::CartesianProductGenerator7
g4_	ts/ts_gtest.h	/^  const ParamGenerator<T4> g4_;$/;"	m	class:testing::internal::CartesianProductGenerator8
g4_	ts/ts_gtest.h	/^  const ParamGenerator<T4> g4_;$/;"	m	class:testing::internal::CartesianProductGenerator9
g5_	ts/ts_gtest.h	/^  const Generator5 g5_;$/;"	m	class:testing::internal::CartesianProductHolder10
g5_	ts/ts_gtest.h	/^  const Generator5 g5_;$/;"	m	class:testing::internal::CartesianProductHolder5
g5_	ts/ts_gtest.h	/^  const Generator5 g5_;$/;"	m	class:testing::internal::CartesianProductHolder6
g5_	ts/ts_gtest.h	/^  const Generator5 g5_;$/;"	m	class:testing::internal::CartesianProductHolder7
g5_	ts/ts_gtest.h	/^  const Generator5 g5_;$/;"	m	class:testing::internal::CartesianProductHolder8
g5_	ts/ts_gtest.h	/^  const Generator5 g5_;$/;"	m	class:testing::internal::CartesianProductHolder9
g5_	ts/ts_gtest.h	/^  const ParamGenerator<T5> g5_;$/;"	m	class:testing::internal::CartesianProductGenerator10
g5_	ts/ts_gtest.h	/^  const ParamGenerator<T5> g5_;$/;"	m	class:testing::internal::CartesianProductGenerator5
g5_	ts/ts_gtest.h	/^  const ParamGenerator<T5> g5_;$/;"	m	class:testing::internal::CartesianProductGenerator6
g5_	ts/ts_gtest.h	/^  const ParamGenerator<T5> g5_;$/;"	m	class:testing::internal::CartesianProductGenerator7
g5_	ts/ts_gtest.h	/^  const ParamGenerator<T5> g5_;$/;"	m	class:testing::internal::CartesianProductGenerator8
g5_	ts/ts_gtest.h	/^  const ParamGenerator<T5> g5_;$/;"	m	class:testing::internal::CartesianProductGenerator9
g6_	ts/ts_gtest.h	/^  const Generator6 g6_;$/;"	m	class:testing::internal::CartesianProductHolder10
g6_	ts/ts_gtest.h	/^  const Generator6 g6_;$/;"	m	class:testing::internal::CartesianProductHolder6
g6_	ts/ts_gtest.h	/^  const Generator6 g6_;$/;"	m	class:testing::internal::CartesianProductHolder7
g6_	ts/ts_gtest.h	/^  const Generator6 g6_;$/;"	m	class:testing::internal::CartesianProductHolder8
g6_	ts/ts_gtest.h	/^  const Generator6 g6_;$/;"	m	class:testing::internal::CartesianProductHolder9
g6_	ts/ts_gtest.h	/^  const ParamGenerator<T6> g6_;$/;"	m	class:testing::internal::CartesianProductGenerator10
g6_	ts/ts_gtest.h	/^  const ParamGenerator<T6> g6_;$/;"	m	class:testing::internal::CartesianProductGenerator6
g6_	ts/ts_gtest.h	/^  const ParamGenerator<T6> g6_;$/;"	m	class:testing::internal::CartesianProductGenerator7
g6_	ts/ts_gtest.h	/^  const ParamGenerator<T6> g6_;$/;"	m	class:testing::internal::CartesianProductGenerator8
g6_	ts/ts_gtest.h	/^  const ParamGenerator<T6> g6_;$/;"	m	class:testing::internal::CartesianProductGenerator9
g7_	ts/ts_gtest.h	/^  const Generator7 g7_;$/;"	m	class:testing::internal::CartesianProductHolder10
g7_	ts/ts_gtest.h	/^  const Generator7 g7_;$/;"	m	class:testing::internal::CartesianProductHolder7
g7_	ts/ts_gtest.h	/^  const Generator7 g7_;$/;"	m	class:testing::internal::CartesianProductHolder8
g7_	ts/ts_gtest.h	/^  const Generator7 g7_;$/;"	m	class:testing::internal::CartesianProductHolder9
g7_	ts/ts_gtest.h	/^  const ParamGenerator<T7> g7_;$/;"	m	class:testing::internal::CartesianProductGenerator10
g7_	ts/ts_gtest.h	/^  const ParamGenerator<T7> g7_;$/;"	m	class:testing::internal::CartesianProductGenerator7
g7_	ts/ts_gtest.h	/^  const ParamGenerator<T7> g7_;$/;"	m	class:testing::internal::CartesianProductGenerator8
g7_	ts/ts_gtest.h	/^  const ParamGenerator<T7> g7_;$/;"	m	class:testing::internal::CartesianProductGenerator9
g8_	ts/ts_gtest.h	/^  const Generator8 g8_;$/;"	m	class:testing::internal::CartesianProductHolder10
g8_	ts/ts_gtest.h	/^  const Generator8 g8_;$/;"	m	class:testing::internal::CartesianProductHolder8
g8_	ts/ts_gtest.h	/^  const Generator8 g8_;$/;"	m	class:testing::internal::CartesianProductHolder9
g8_	ts/ts_gtest.h	/^  const ParamGenerator<T8> g8_;$/;"	m	class:testing::internal::CartesianProductGenerator10
g8_	ts/ts_gtest.h	/^  const ParamGenerator<T8> g8_;$/;"	m	class:testing::internal::CartesianProductGenerator8
g8_	ts/ts_gtest.h	/^  const ParamGenerator<T8> g8_;$/;"	m	class:testing::internal::CartesianProductGenerator9
g9_	ts/ts_gtest.h	/^  const Generator9 g9_;$/;"	m	class:testing::internal::CartesianProductHolder10
g9_	ts/ts_gtest.h	/^  const Generator9 g9_;$/;"	m	class:testing::internal::CartesianProductHolder9
g9_	ts/ts_gtest.h	/^  const ParamGenerator<T9> g9_;$/;"	m	class:testing::internal::CartesianProductGenerator10
g9_	ts/ts_gtest.h	/^  const ParamGenerator<T9> g9_;$/;"	m	class:testing::internal::CartesianProductGenerator9
gSum_	videostab/deblurring.hpp	/^    Mat_<float> bSum_, gSum_, rSum_, wSum_;$/;"	m	class:cv::videostab::WeightingDeblurer
gain	video/tracking.hpp	/^    CV_PROP_RW Mat gain;               \/\/!< Kalman gain matrix (K(k)): K(k)=P'(k)*Ht*inv(H*P'(k)*Ht+R)$/;"	m	class:cv::KalmanFilter
gain	video/tracking_c.h	/^    CvMat* gain;                \/* Kalman gain matrix (K(k)):$/;"	m	struct:CvKalman
gain_maps_	stitching/detail/exposure_compensate.hpp	/^    std::vector<UMat> gain_maps_;$/;"	m	class:cv::detail::BlocksGainCompensator
gains_	stitching/detail/exposure_compensate.hpp	/^    Mat_<double> gains_;$/;"	m	class:cv::detail::GainCompensator
gamma	cudalegacy/NCVBroxOpticalFlow.hpp	/^    Ncv32f gamma;$/;"	m	struct:NCVBroxOpticalFlowDescriptor
gammaCorrection	objdetect.hpp	/^    CV_PROP bool gammaCorrection;$/;"	m	struct:cv::HOGDescriptor
gamma_shift	core/cuda/detail/color_detail.hpp	/^            gamma_shift = 3,$/;"	e	enum:cv::cuda::device::color_detail::__anon241
gamma_shift	cudev/functional/detail/color_cvt.hpp	/^        gamma_shift = 3,$/;"	e	enum:cv::cudev::color_cvt_detail::__anon397
generic_type	core/affine.hpp	/^        enum { generic_type = 0,$/;"	e	enum:cv::DataType::__anon162
generic_type	core/cvstd.inl.hpp	/^    enum { generic_type = 0,$/;"	e	enum:cv::DataType::__anon161
generic_type	core/matx.hpp	/^    enum { generic_type = 0,$/;"	e	enum:cv::DataType::__anon151
generic_type	core/matx.hpp	/^    enum { generic_type = 0,$/;"	e	enum:cv::DataType::__anon153
generic_type	core/traits.hpp	/^    enum { generic_type = 0,$/;"	e	enum:cv::DataType::__anon102
generic_type	core/traits.hpp	/^    enum { generic_type = 0,$/;"	e	enum:cv::DataType::__anon103
generic_type	core/traits.hpp	/^    enum { generic_type = 0,$/;"	e	enum:cv::DataType::__anon104
generic_type	core/traits.hpp	/^    enum { generic_type = 0,$/;"	e	enum:cv::DataType::__anon105
generic_type	core/traits.hpp	/^    enum { generic_type = 0,$/;"	e	enum:cv::DataType::__anon106
generic_type	core/traits.hpp	/^    enum { generic_type = 0,$/;"	e	enum:cv::DataType::__anon107
generic_type	core/traits.hpp	/^    enum { generic_type = 0,$/;"	e	enum:cv::DataType::__anon108
generic_type	core/traits.hpp	/^    enum { generic_type = 0,$/;"	e	enum:cv::DataType::__anon109
generic_type	core/traits.hpp	/^    enum { generic_type = 0,$/;"	e	enum:cv::DataType::__anon110
generic_type	core/traits.hpp	/^    enum { generic_type = 1,$/;"	e	enum:cv::DataType::__anon101
generic_type	core/types.hpp	/^    enum { generic_type = 0,$/;"	e	enum:cv::DataType::__anon120
generic_type	core/types.hpp	/^    enum { generic_type = 0,$/;"	e	enum:cv::DataType::__anon121
generic_type	core/types.hpp	/^    enum { generic_type = 0,$/;"	e	enum:cv::DataType::__anon122
generic_type	core/types.hpp	/^    enum { generic_type = 0,$/;"	e	enum:cv::DataType::__anon123
generic_type	core/types.hpp	/^    enum { generic_type = 0,$/;"	e	enum:cv::DataType::__anon124
generic_type	core/types.hpp	/^    enum { generic_type = 0,$/;"	e	enum:cv::DataType::__anon125
generic_type	core/types.hpp	/^    enum { generic_type = 0,$/;"	e	enum:cv::DataType::__anon126
generic_type	core/types.hpp	/^    enum { generic_type = 0,$/;"	e	enum:cv::DataType::__anon127
generic_type	core/types.hpp	/^    enum { generic_type = 0,$/;"	e	enum:cv::DataType::__anon128
generic_type	core/types.hpp	/^    enum { generic_type = 0,$/;"	e	enum:cv::DataType::__anon129
generic_type	core/types.hpp	/^    enum { generic_type = 0,$/;"	e	enum:cv::DataType::__anon130
generic_type	cudev/util/vec_traits.hpp	/^    enum { generic_type = 0,$/;"	e	enum:cv::DataType::__anon359
generic_type	cudev/util/vec_traits.hpp	/^    enum { generic_type = 0,$/;"	e	enum:cv::DataType::__anon360
generic_type	cudev/util/vec_traits.hpp	/^    enum { generic_type = 0,$/;"	e	enum:cv::DataType::__anon361
generic_type	cudev/util/vec_traits.hpp	/^    enum { generic_type = 0,$/;"	e	enum:cv::DataType::__anon362
generic_type	cudev/util/vec_traits.hpp	/^    enum { generic_type = 0,$/;"	e	enum:cv::DataType::__anon363
get	core/ptr.inl.hpp	/^T* Ptr<T>::get() const$/;"	f	class:cv::Ptr
get	core/utility.hpp	/^    T get(const String& name, bool space_delete = true) const$/;"	f	class:cv::CommandLineParser
get	core/utility.hpp	/^    T get(int index, bool space_delete = true) const$/;"	f	class:cv::CommandLineParser
get	core/utility.hpp	/^    inline T* get() const { return (T*)getData(); }$/;"	f	class:cv::TLSData
get	core/utility.hpp	/^template<> inline std::string CommandLineParser::get<std::string>(const String& name, bool space_delete) const$/;"	f	class:cv::CommandLineParser
get	core/utility.hpp	/^template<> inline std::string CommandLineParser::get<std::string>(int index, bool space_delete) const$/;"	f	class:cv::CommandLineParser
get	hal/intrin_cpp.hpp	/^    _Tp get(const int i) const { return s[i]; }$/;"	f	struct:cv::v_reg
get	ts/ts_gtest.h	/^  T* get() const { return ptr_; }$/;"	f	struct:std::tr1::tuple_element
get	ts/ts_gtest.h	/^  T* get() const { return value_; }$/;"	f	class:testing::internal::linked_ptr
get	ts/ts_gtest.h	/^  const T& get() const { return *pointer(); }$/;"	f	class:std::tr1::ThreadLocal
get	ts/ts_gtest.h	/^  const T& get() const { return value_; }$/;"	f	class:std::tr1::ThreadLocal
get0	hal/intrin_cpp.hpp	/^    _Tp get0() const { return s[0]; }$/;"	f	struct:cv::v_reg
get0	hal/intrin_neon.hpp	/^    float get0() const$/;"	f	struct:cv::v_float32x4
get0	hal/intrin_neon.hpp	/^    int get0() const$/;"	f	struct:cv::v_int32x4
get0	hal/intrin_neon.hpp	/^    int64 get0() const$/;"	f	struct:cv::v_int64x2
get0	hal/intrin_neon.hpp	/^    schar get0() const$/;"	f	struct:cv::v_int8x16
get0	hal/intrin_neon.hpp	/^    short get0() const$/;"	f	struct:cv::v_int16x8
get0	hal/intrin_neon.hpp	/^    uchar get0() const$/;"	f	struct:cv::v_uint8x16
get0	hal/intrin_neon.hpp	/^    uint64 get0() const$/;"	f	struct:cv::v_uint64x2
get0	hal/intrin_neon.hpp	/^    unsigned get0() const$/;"	f	struct:cv::v_uint32x4
get0	hal/intrin_neon.hpp	/^    ushort get0() const$/;"	f	struct:cv::v_uint16x8
get0	hal/intrin_sse.hpp	/^    double get0() const$/;"	f	struct:cv::v_float64x2
get0	hal/intrin_sse.hpp	/^    float get0() const$/;"	f	struct:cv::v_float32x4
get0	hal/intrin_sse.hpp	/^    int get0() const$/;"	f	struct:cv::v_int32x4
get0	hal/intrin_sse.hpp	/^    int64 get0() const$/;"	f	struct:cv::v_int64x2
get0	hal/intrin_sse.hpp	/^    schar get0() const$/;"	f	struct:cv::v_int8x16
get0	hal/intrin_sse.hpp	/^    short get0() const$/;"	f	struct:cv::v_int16x8
get0	hal/intrin_sse.hpp	/^    uchar get0() const$/;"	f	struct:cv::v_uint8x16
get0	hal/intrin_sse.hpp	/^    uint64 get0() const$/;"	f	struct:cv::v_uint64x2
get0	hal/intrin_sse.hpp	/^    unsigned get0() const$/;"	f	struct:cv::v_uint32x4
get0	hal/intrin_sse.hpp	/^    ushort get0() const$/;"	f	struct:cv::v_uint16x8
getAllocatorsAlignment	cudalegacy/NCV.hpp	/^    Ncv32u getAllocatorsAlignment() const$/;"	f	class:NCVMatrixAlloc
getAllocatorsAlignment	cudalegacy/NCV.hpp	/^    Ncv32u getAllocatorsAlignment() const$/;"	f	class:NCVVectorAlloc
getAlpha	core/cuda/detail/color_detail.hpp	/^        template <typename T> static __device__ __forceinline__ T getAlpha(const typename TypeVec<T, 3>::vec_type& vec)$/;"	f	namespace:cv::cuda::device::color_detail
getAlpha	core/cuda/detail/color_detail.hpp	/^        template <typename T> static __device__ __forceinline__ T getAlpha(const typename TypeVec<T, 4>::vec_type& vec)$/;"	f	namespace:cv::cuda::device::color_detail
getAlpha	cudev/functional/detail/color_cvt.hpp	/^    template <typename T> __device__ __forceinline__ T getAlpha(const typename MakeVec<T, 3>::type& vec)$/;"	f	namespace:cv::cudev::color_cvt_detail
getAlpha	cudev/functional/detail/color_cvt.hpp	/^    template <typename T> __device__ __forceinline__ T getAlpha(const typename MakeVec<T, 4>::type& vec)$/;"	f	namespace:cv::cudev::color_cvt_detail
getBucketFromKey	flann/lsh_table.h	/^    inline const Bucket* getBucketFromKey(BucketKey key) const$/;"	f	class:cvflann::lsh::LshTable
getCenterOrdering	flann/kmeans_index.h	/^    void getCenterOrdering(KMeansNodePtr node, const ElementType* q, int* sort_indices)$/;"	f	class:cvflann::KMeansIndex
getClip	viz/types.hpp	/^            const Vec2d & getClip() const { return clip_; }$/;"	f	class:cv::viz::Camera
getClusterCenters	flann/kmeans_index.h	/^    int getClusterCenters(Matrix<DistanceType>& centers)$/;"	f	class:cvflann::KMeansIndex
getCols	cudev/expr/expr.hpp	/^    __host__ static int getCols(const Expr<Body>& expr)$/;"	f	struct:cv::cudev::PtrTraits
getCols	cudev/ptr2d/traits.hpp	/^    __host__ static int getCols(const Ptr2DSz& ptr)$/;"	f	struct:cv::cudev::PtrTraitsBase
getCols	cudev/ptr2d/traits.hpp	/^__host__ int getCols(const Ptr2DSz& ptr)$/;"	f	namespace:cv::cudev
getDistanceToBorder	flann/kmeans_index.h	/^    DistanceType getDistanceToBorder(DistanceType* p, DistanceType* c, DistanceType* q)$/;"	f	class:cvflann::KMeansIndex
getDst	stitching/detail/timelapsers.hpp	/^    virtual const UMat& getDst() {return dst_;}$/;"	f	class:cv::detail::Timelapser
getElemSize	core/utility.hpp	/^static inline size_t getElemSize(int type) { return CV_ELEM_SIZE(type); }$/;"	f	namespace:cv
getExactNeighbors	flann/kdtree_index.h	/^    void getExactNeighbors(ResultSet<DistanceType>& result, const ElementType* vec, float epsError)$/;"	f	class:cvflann::KDTreeIndex
getFeatureDesc	cudalegacy/NCVHaarObjectDetection.hpp	/^    __host__ __device__ HaarFeatureDescriptor32 getFeatureDesc(void)$/;"	f	struct:HaarClassifierNode128
getFeaturesOffset	cudalegacy/NCVHaarObjectDetection.hpp	/^    __device__ __host__ Ncv32u getFeaturesOffset(void)$/;"	f	struct:HaarFeatureDescriptor32
getFirstTopLevelNode	core/persistence.hpp	/^inline FileNode FileStorage::getFirstTopLevelNode() const { FileNode r = root(); FileNodeIterator it = r.begin(); return it != r.end() ? *it : FileNode(); }$/;"	f	class:cv::FileStorage
getFlags	core/mat.inl.hpp	/^inline int _InputArray::getFlags() const { return flags; }$/;"	f	class:cv::_InputArray
getFocalLength	viz/types.hpp	/^            const Vec2d& getFocalLength() const { return focal_; }$/;"	f	class:cv::viz::Camera
getFov	viz/types.hpp	/^            const Vec2d& getFov() const { return fov_; }$/;"	f	class:cv::viz::Camera
getHpp	core/ippasync.hpp	/^    inline hppiMatrix* getHpp(const Mat& src, hppAccel accel)$/;"	f	namespace:cv::hpp
getIndex	flann/flann_base.hpp	/^    FLANN_DEPRECATED NNIndex<Distance>* getIndex()$/;"	f	class:cvflann::Index
getIndexParameters	flann.hpp	/^        FLANN_DEPRECATED const ::cvflann::IndexParams* getIndexParameters() { return nnIndex->getIndexParameters(); }$/;"	f	class:cv::flann::GenericIndex
getIndexParameters	flann.hpp	/^        FLANN_DEPRECATED const ::cvflann::IndexParams* getIndexParameters()$/;"	f	class:cv::flann::Index_
getIndexParameters	flann/flann_base.hpp	/^    FLANN_DEPRECATED  const IndexParams* getIndexParameters()$/;"	f	class:cvflann::Index
getKey	flann/lsh_table.h	/^    size_t getKey(const ElementType* \/*feature*\/) const$/;"	f	class:cvflann::lsh::LshTable
getKey	flann/lsh_table.h	/^inline size_t LshTable<unsigned char>::getKey(const unsigned char* feature) const$/;"	f	class:cvflann::lsh::LshTable
getLaunchCfg	cudev/grid/detail/minmaxloc.hpp	/^    void getLaunchCfg(int rows, int cols, dim3& block, dim3& grid)$/;"	f	namespace:cv::cudev::grid_minmaxloc_detail
getLeafValue	cudalegacy/NCVHaarObjectDetection.hpp	/^    __device__ Ncv32f getLeafValue(void)$/;"	f	struct:HaarClassifierNodeDescriptor32
getLeafValueHost	cudalegacy/NCVHaarObjectDetection.hpp	/^    __host__ Ncv32f getLeafValueHost(void)$/;"	f	struct:HaarClassifierNodeDescriptor32
getLeftNodeDesc	cudalegacy/NCVHaarObjectDetection.hpp	/^    __host__ __device__ HaarClassifierNodeDescriptor32 getLeftNodeDesc(void)$/;"	f	struct:HaarClassifierNode128
getMat	core/ippasync.hpp	/^    inline Mat getMat(hppiMatrix* src, hppAccel accel, int cn)$/;"	f	namespace:cv::hpp
getMat	core/mat.inl.hpp	/^inline Mat _InputArray::getMat(int i) const$/;"	f	class:cv::_InputArray
getMaxObjectSize	objdetect/detection_based_tracker.hpp	/^                cv::Size getMaxObjectSize() const$/;"	f	class:cv::DetectionBasedTracker::IDetector
getMinNeighbours	objdetect/detection_based_tracker.hpp	/^                int getMinNeighbours()$/;"	f	class:cv::DetectionBasedTracker::IDetector
getMinObjectSize	objdetect/detection_based_tracker.hpp	/^                cv::Size getMinObjectSize() const$/;"	f	class:cv::DetectionBasedTracker::IDetector
getMinVarianceClusters	flann/kmeans_index.h	/^    int getMinVarianceClusters(KMeansNodePtr root, KMeansNodePtr* clusters, int clusters_length, DistanceType& varianceValue)$/;"	f	class:cvflann::KMeansIndex
getNeighbors	flann/kdtree_index.h	/^    void getNeighbors(ResultSet<DistanceType>& result, const ElementType* vec, int maxCheck, float epsError)$/;"	f	class:cvflann::KDTreeIndex
getNeighbors	flann/lsh_index.h	/^    void getNeighbors(const ElementType* vec, ResultSet<DistanceType>& result)$/;"	f	class:cvflann::LshIndex
getNeighbors	flann/lsh_index.h	/^    void getNeighbors(const ElementType* vec, bool \/*do_radius*\/, float radius, bool do_k, unsigned int k_nn,$/;"	f	class:cvflann::LshIndex
getNextId	objdetect/detection_based_tracker.hpp	/^            static int getNextId()$/;"	f	struct:cv::DetectionBasedTracker::TrackedObject
getNextNodeOffset	cudalegacy/NCVHaarObjectDetection.hpp	/^    __device__ __host__ Ncv32u getNextNodeOffset(void)$/;"	f	struct:HaarClassifierNodeDescriptor32
getNumClassifierRootNodes	cudalegacy/NCVHaarObjectDetection.hpp	/^    __host__ __device__ Ncv32u getNumClassifierRootNodes(void)$/;"	f	struct:HaarStage64
getNumFeatures	cudalegacy/NCVHaarObjectDetection.hpp	/^    __device__ __host__ Ncv32u getNumFeatures(void)$/;"	f	struct:HaarFeatureDescriptor32
getObj	core/mat.inl.hpp	/^inline void* _InputArray::getObj() const { return obj; }$/;"	f	class:cv::_InputArray
getOutputMat	core/private.cuda.hpp	/^    static inline GpuMat getOutputMat(OutputArray _dst, Size size, int type, Stream& stream)$/;"	f	namespace:cv::cuda
getParameters	flann.hpp	/^        ::cvflann::IndexParams getParameters() { return nnIndex->getParameters(); }$/;"	f	class:cv::flann::GenericIndex
getParameters	flann.hpp	/^        ::cvflann::IndexParams getParameters()$/;"	f	class:cv::flann::Index_
getParameters	flann/autotuned_index.h	/^    IndexParams getParameters() const$/;"	f	class:cvflann::AutotunedIndex
getParameters	flann/composite_index.h	/^    IndexParams getParameters() const$/;"	f	class:cvflann::CompositeIndex
getParameters	flann/flann_base.hpp	/^    IndexParams getParameters() const$/;"	f	class:cvflann::Index
getParameters	flann/hierarchical_clustering_index.h	/^    IndexParams getParameters() const$/;"	f	class:cvflann::HierarchicalClusteringIndex
getParameters	flann/kdtree_index.h	/^    IndexParams getParameters() const$/;"	f	class:cvflann::KDTreeIndex
getParameters	flann/kdtree_single_index.h	/^    IndexParams getParameters() const$/;"	f	class:cvflann::KDTreeSingleIndex
getParameters	flann/kmeans_index.h	/^    IndexParams getParameters() const$/;"	f	class:cvflann::KMeansIndex
getParameters	flann/linear_index.h	/^    IndexParams getParameters() const$/;"	f	class:cvflann::LinearIndex
getParameters	flann/lsh_index.h	/^    IndexParams getParameters() const$/;"	f	class:cvflann::LshIndex
getPrincipalPoint	viz/types.hpp	/^            const Vec2d& getPrincipalPoint() const { return principal_point_; }$/;"	f	class:cv::viz::Camera
getRect	cudalegacy/NCVHaarObjectDetection.hpp	/^    __device__ __host__ void getRect(Ncv32u *rectX, Ncv32u *rectY, Ncv32u *rectWidth, Ncv32u *rectHeight)$/;"	f	struct:HaarFeature64
getRightNodeDesc	cudalegacy/NCVHaarObjectDetection.hpp	/^    __host__ __device__ HaarClassifierNodeDescriptor32 getRightNodeDesc(void)$/;"	f	struct:HaarClassifierNode128
getRows	cudev/expr/expr.hpp	/^    __host__ static int getRows(const Expr<Body>& expr)$/;"	f	struct:cv::cudev::PtrTraits
getRows	cudev/ptr2d/traits.hpp	/^    __host__ static int getRows(const Ptr2DSz& ptr)$/;"	f	struct:cv::cudev::PtrTraitsBase
getRows	cudev/ptr2d/traits.hpp	/^__host__ int getRows(const Ptr2DSz& ptr)$/;"	f	namespace:cv::cudev
getScale	stitching/detail/warpers.hpp	/^    float getScale() const { return projector_.scale; }$/;"	f	class:cv::detail::RotationWarperBase
getScale	stitching/detail/warpers.hpp	/^    virtual float getScale() const { return 1.f; }$/;"	f	class:cv::detail::RotationWarper
getScaleFactor	objdetect/detection_based_tracker.hpp	/^                float getScaleFactor()$/;"	f	class:cv::DetectionBasedTracker::IDetector
getSearchParameters	flann/autotuned_index.h	/^    SearchParams getSearchParameters() const$/;"	f	class:cvflann::AutotunedIndex
getSegment	cudalegacy/NCV.hpp	/^    NCVMemSegment getSegment() const$/;"	f	class:NCVMatrixAlloc
getSegment	cudalegacy/NCV.hpp	/^    NCVMemSegment getSegment() const$/;"	f	class:NCVVectorAlloc
getSpeedup	flann/autotuned_index.h	/^    float getSpeedup() const$/;"	f	class:cvflann::AutotunedIndex
getStageThreshold	cudalegacy/NCVHaarObjectDetection.hpp	/^    __host__ __device__ Ncv32f getStageThreshold(void)$/;"	f	struct:HaarStage64
getStartClassifierRootNodeOffset	cudalegacy/NCVHaarObjectDetection.hpp	/^    __host__ __device__ Ncv32u getStartClassifierRootNodeOffset(void)$/;"	f	struct:HaarStage64
getStats	flann/lsh_table.h	/^inline LshStats LshTable<unsigned char>::getStats() const$/;"	f	class:cvflann::lsh::LshTable
getSz	core/mat.inl.hpp	/^inline Size _InputArray::getSz() const { return sz; }$/;"	f	class:cv::_InputArray
getThreshold	cudalegacy/NCVHaarObjectDetection.hpp	/^    __host__ __device__ Ncv32f getThreshold(void)$/;"	f	struct:HaarClassifierNode128
getType	flann/autotuned_index.h	/^    virtual flann_algorithm_t getType() const$/;"	f	class:cvflann::AutotunedIndex
getType	flann/composite_index.h	/^    flann_algorithm_t getType() const$/;"	f	class:cvflann::CompositeIndex
getType	flann/flann_base.hpp	/^    flann_algorithm_t getType() const$/;"	f	class:cvflann::Index
getType	flann/hierarchical_clustering_index.h	/^    flann_algorithm_t getType() const$/;"	f	class:cvflann::HierarchicalClusteringIndex
getType	flann/kdtree_index.h	/^    flann_algorithm_t getType() const$/;"	f	class:cvflann::KDTreeIndex
getType	flann/kdtree_single_index.h	/^    flann_algorithm_t getType() const$/;"	f	class:cvflann::KDTreeSingleIndex
getType	flann/kmeans_index.h	/^    flann_algorithm_t getType() const$/;"	f	class:cvflann::KMeansIndex
getType	flann/linear_index.h	/^    flann_algorithm_t getType() const$/;"	f	class:cvflann::LinearIndex
getType	flann/lsh_index.h	/^    flann_algorithm_t getType() const$/;"	f	class:cvflann::LshIndex
getWeight	cudalegacy/NCVHaarObjectDetection.hpp	/^    __device__ __host__ Ncv32f getWeight(void)$/;"	f	struct:HaarFeature64
getWindowSize	viz/types.hpp	/^            const Size & getWindowSize() const { return window_size_; }$/;"	f	class:cv::viz::Camera
get_current_test_info	ts.hpp	/^    const TestInfo* get_current_test_info() { return &current_test_info; }$/;"	f	class:cvtest::TS
get_data_path	ts.hpp	/^    const string& get_data_path() const { return data_path; }$/;"	f	class:cvtest::TS
get_err_code	ts.hpp	/^    TS::FailureCode get_err_code() { return TS::FailureCode(current_test_info.code); }$/;"	f	class:cvtest::TS
get_hdf5_type	flann/hdf5.h	/^hid_t get_hdf5_type()$/;"	f	namespace:cvflann::__anon28
get_hdf5_type	flann/hdf5.h	/^hid_t get_hdf5_type<char>() { return H5T_NATIVE_CHAR; }$/;"	f	namespace:cvflann::__anon28
get_hdf5_type	flann/hdf5.h	/^hid_t get_hdf5_type<double>() { return H5T_NATIVE_DOUBLE; }$/;"	f	namespace:cvflann::__anon28
get_hdf5_type	flann/hdf5.h	/^hid_t get_hdf5_type<float>() { return H5T_NATIVE_FLOAT; }$/;"	f	namespace:cvflann::__anon28
get_hdf5_type	flann/hdf5.h	/^hid_t get_hdf5_type<int>() { return H5T_NATIVE_INT; }$/;"	f	namespace:cvflann::__anon28
get_hdf5_type	flann/hdf5.h	/^hid_t get_hdf5_type<long>() { return H5T_NATIVE_LONG; }$/;"	f	namespace:cvflann::__anon28
get_hdf5_type	flann/hdf5.h	/^hid_t get_hdf5_type<short int>() { return H5T_NATIVE_SHORT; }$/;"	f	namespace:cvflann::__anon28
get_hdf5_type	flann/hdf5.h	/^hid_t get_hdf5_type<unsigned char>() { return H5T_NATIVE_UCHAR; }$/;"	f	namespace:cvflann::__anon28
get_hdf5_type	flann/hdf5.h	/^hid_t get_hdf5_type<unsigned int>() { return H5T_NATIVE_UINT; }$/;"	f	namespace:cvflann::__anon28
get_hdf5_type	flann/hdf5.h	/^hid_t get_hdf5_type<unsigned long>() { return H5T_NATIVE_ULONG; }$/;"	f	namespace:cvflann::__anon28
get_hdf5_type	flann/hdf5.h	/^hid_t get_hdf5_type<unsigned short int>() { return H5T_NATIVE_USHORT; }$/;"	f	namespace:cvflann::__anon28
get_minor	core/matx.hpp	/^Matx<_Tp, m1, n1> Matx<_Tp, m, n>::get_minor(int i, int j) const$/;"	f	class:cv::Matx
get_name	ts.hpp	/^    const string& get_name() const { return name; }$/;"	f	class:cvtest::BaseTest
get_param	flann/params.h	/^T get_param(const IndexParams& params, cv::String name)$/;"	f	namespace:cvflann
get_param	flann/params.h	/^T get_param(const IndexParams& params, cv::String name, const T& default_value)$/;"	f	namespace:cvflann
get_policy	flann/any.h	/^inline base_any_policy* SinglePolicy<T>::get_policy() { return &policy; }$/;"	f	class:cvflann::anyimpl::SinglePolicy
get_rng	ts.hpp	/^    RNG& get_rng() { return rng; }$/;"	f	class:cvtest::TS
get_size	flann/any.h	/^    virtual ::size_t get_size() { return sizeof(T); }$/;"	f	struct:cvflann::anyimpl::typed_base_any_policy
get_test_case_count_scale	ts.hpp	/^    double get_test_case_count_scale() { return params.test_case_count_scale; }$/;"	f	class:cvtest::TS
get_value	flann/any.h	/^    virtual const void* get_value(void* const * src) { return *src; }$/;"	f	struct:cvflann::anyimpl::big_any_policy
get_value	flann/any.h	/^    virtual const void* get_value(void* const * src) { return reinterpret_cast<const void*>(src); }$/;"	f	struct:cvflann::anyimpl::small_any_policy
get_value	flann/any.h	/^    virtual void* get_value(void** src) { return *src; }$/;"	f	struct:cvflann::anyimpl::big_any_policy
get_value	flann/any.h	/^    virtual void* get_value(void** src) { return reinterpret_cast<void*>(src); }$/;"	f	struct:cvflann::anyimpl::small_any_policy
glob	core/cuda/emulation.hpp	/^        struct glob$/;"	s	struct:cv::cuda::device::Emulation
globPtr	cudev/ptr2d/glob.hpp	/^__host__ GlobPtrSz<T> globPtr(const GpuMat& mat)$/;"	f	namespace:cv::cudev
globPtr	cudev/ptr2d/glob.hpp	/^__host__ __device__ GlobPtr<T> globPtr(T* data, size_t step)$/;"	f	namespace:cv::cudev
globPtr	cudev/ptr2d/glob.hpp	/^__host__ __device__ GlobPtrSz<T> globPtr(T* data, size_t step, int rows, int cols)$/;"	f	namespace:cv::cudev
gmean	ts/ts_perf.hpp	/^    double gmean;$/;"	m	struct:perf::performance_metrics
gold	viz/types.hpp	/^inline cv::viz::Color cv::viz::Color::gold()       { return Color(0,   215, 255); }$/;"	f	class:cv::viz::Color
gradx1_	stitching/detail/seam_finders.hpp	/^    Mat_<float> gradx1_, grady1_;$/;"	m	class:cv::detail::DpSeamFinder
gradx2_	stitching/detail/seam_finders.hpp	/^    Mat_<float> gradx2_, grady2_;$/;"	m	class:cv::detail::DpSeamFinder
grady1_	stitching/detail/seam_finders.hpp	/^    Mat_<float> gradx1_, grady1_;$/;"	m	class:cv::detail::DpSeamFinder
grady2_	stitching/detail/seam_finders.hpp	/^    Mat_<float> gradx2_, grady2_;$/;"	m	class:cv::detail::DpSeamFinder
graph	core/core_c.h	/^    CvGraph* graph;        \/* the graph *\/$/;"	m	struct:CvGraphScanner
graph	core/core_c.h	/^CVAPI(void)  cvClearGraph( CvGraph* graph );$/;"	v
gray	viz/types.hpp	/^inline cv::viz::Color cv::viz::Color::gray()    { return Color(128, 128, 128); }$/;"	f	class:cv::viz::Color
grayFrame0_	videostab/global_motion.hpp	/^    cuda::GpuMat frame0_, grayFrame0_, frame1_;$/;"	m	class:cv::videostab::KeypointBasedMotionEstimatorGpu
grayFrame_	videostab/inpainting.hpp	/^    Mat_<uchar> grayFrame_, transformedGrayFrame1_;$/;"	m	class:cv::videostab::MotionInpainter
gray_image_	stitching/detail/matchers.hpp	/^    cuda::GpuMat gray_image_;$/;"	m	class:cv::detail::SurfFeaturesFinderGpu
grayscaleMode	videoio/cap_ios.h	/^@property (nonatomic, assign) BOOL grayscaleMode;$/;"	v
greater	core/cuda/functional.hpp	/^        __host__ __device__ __forceinline__ greater() {}$/;"	f	struct:cv::cuda::device::greater
greater	core/cuda/functional.hpp	/^        __host__ __device__ __forceinline__ greater(const greater&) {}$/;"	f	struct:cv::cuda::device::greater
greater	core/cuda/functional.hpp	/^    template <typename T> struct greater : binary_function<T, T, bool>$/;"	s	namespace:cv::cuda::device
greater	cudev/functional/functional.hpp	/^template <typename T> struct greater : binary_function<T, T, typename MakeVec<uchar, VecTraits<T>::cn>::type>$/;"	s	namespace:cv::cudev
greater_equal	core/cuda/functional.hpp	/^        __host__ __device__ __forceinline__ greater_equal() {}$/;"	f	struct:cv::cuda::device::greater_equal
greater_equal	core/cuda/functional.hpp	/^        __host__ __device__ __forceinline__ greater_equal(const greater_equal&) {}$/;"	f	struct:cv::cuda::device::greater_equal
greater_equal	core/cuda/functional.hpp	/^    template <typename T> struct greater_equal : binary_function<T, T, bool>$/;"	s	namespace:cv::cuda::device
greater_equal	cudev/functional/functional.hpp	/^template <typename T> struct greater_equal : binary_function<T, T, typename MakeVec<uchar, VecTraits<T>::cn>::type>$/;"	s	namespace:cv::cudev
greek	highgui.hpp	/^    const int*  greek;$/;"	m	struct:cv::QtFont
greek	imgproc/imgproc_c.h	/^    const int*  greek;$/;"	m	struct:CvFont
green	viz/types.hpp	/^inline cv::viz::Color cv::viz::Color::green()   { return Color(  0, 255,   0); }$/;"	f	class:cv::viz::Color
gridCalcSum	cudev/grid/reduce.hpp	/^__host__ void gridCalcSum(const SrcPtr& src, GpuMat_<ResType>& dst, Stream& stream = Stream::Null())$/;"	f	namespace:cv::cudev
gridCalcSum	cudev/grid/reduce.hpp	/^__host__ void gridCalcSum(const SrcPtr& src, GpuMat_<ResType>& dst, const MaskPtr& mask, Stream& stream = Stream::Null())$/;"	f	namespace:cv::cudev
gridCalcSum_	cudev/grid/reduce.hpp	/^__host__ void gridCalcSum_(const SrcPtr& src, GpuMat_<ResType>& dst, Stream& stream = Stream::Null())$/;"	f	namespace:cv::cudev
gridCalcSum_	cudev/grid/reduce.hpp	/^__host__ void gridCalcSum_(const SrcPtr& src, GpuMat_<ResType>& dst, const MaskPtr& mask, Stream& stream = Stream::Null())$/;"	f	namespace:cv::cudev
gridCopy	cudev/grid/copy.hpp	/^__host__ void gridCopy(const SrcPtr& src, GpuMat_<DstType>& dst, Stream& stream = Stream::Null())$/;"	f	namespace:cv::cudev
gridCopy	cudev/grid/copy.hpp	/^__host__ void gridCopy(const SrcPtr& src, GpuMat_<DstType>& dst, const MaskPtr& mask, Stream& stream = Stream::Null())$/;"	f	namespace:cv::cudev
gridCopy	cudev/grid/copy.hpp	/^__host__ void gridCopy(const SrcPtr& src, const GlobPtrSz<DstType>& dst, Stream& stream = Stream::Null())$/;"	f	namespace:cv::cudev
gridCopy	cudev/grid/copy.hpp	/^__host__ void gridCopy(const SrcPtr& src, const GlobPtrSz<DstType>& dst, const MaskPtr& mask, Stream& stream = Stream::Null())$/;"	f	namespace:cv::cudev
gridCopy	cudev/grid/copy.hpp	/^__host__ void gridCopy(const SrcPtrTuple& src, const tuple< GlobPtrSz<D0>, GlobPtrSz<D1> >& dst, Stream& stream = Stream::Null())$/;"	f	namespace:cv::cudev
gridCopy	cudev/grid/copy.hpp	/^__host__ void gridCopy(const SrcPtrTuple& src, const tuple< GlobPtrSz<D0>, GlobPtrSz<D1> >& dst, const MaskPtr& mask, Stream& stream = Stream::Null())$/;"	f	namespace:cv::cudev
gridCopy	cudev/grid/copy.hpp	/^__host__ void gridCopy(const SrcPtrTuple& src, const tuple< GlobPtrSz<D0>, GlobPtrSz<D1>, GlobPtrSz<D2> >& dst, Stream& stream = Stream::Null())$/;"	f	namespace:cv::cudev
gridCopy	cudev/grid/copy.hpp	/^__host__ void gridCopy(const SrcPtrTuple& src, const tuple< GlobPtrSz<D0>, GlobPtrSz<D1>, GlobPtrSz<D2> >& dst, const MaskPtr& mask, Stream& stream = Stream::Null())$/;"	f	namespace:cv::cudev
gridCopy	cudev/grid/copy.hpp	/^__host__ void gridCopy(const SrcPtrTuple& src, const tuple< GlobPtrSz<D0>, GlobPtrSz<D1>, GlobPtrSz<D2>, GlobPtrSz<D3> >& dst, const MaskPtr& mask, Stream& stream = Stream::Null())$/;"	f	namespace:cv::cudev
gridCopy	cudev/grid/copy.hpp	/^__host__ void gridCopy(const SrcPtrTuple& src, const tuple< GpuMat_<D0>&, GpuMat_<D1>& >& dst, Stream& stream = Stream::Null())$/;"	f	namespace:cv::cudev
gridCopy	cudev/grid/copy.hpp	/^__host__ void gridCopy(const SrcPtrTuple& src, const tuple< GpuMat_<D0>&, GpuMat_<D1>& >& dst, const MaskPtr& mask, Stream& stream = Stream::Null())$/;"	f	namespace:cv::cudev
gridCopy	cudev/grid/copy.hpp	/^__host__ void gridCopy(const SrcPtrTuple& src, const tuple< GpuMat_<D0>&, GpuMat_<D1>&, GpuMat_<D2>& >& dst, Stream& stream = Stream::Null())$/;"	f	namespace:cv::cudev
gridCopy	cudev/grid/copy.hpp	/^__host__ void gridCopy(const SrcPtrTuple& src, const tuple< GpuMat_<D0>&, GpuMat_<D1>&, GpuMat_<D2>& >& dst, const MaskPtr& mask, Stream& stream = Stream::Null())$/;"	f	namespace:cv::cudev
gridCopy	cudev/grid/copy.hpp	/^__host__ void gridCopy(const SrcPtrTuple& src, const tuple< GpuMat_<D0>&, GpuMat_<D1>&, GpuMat_<D2>&, GpuMat_<D3>& >& dst, const MaskPtr& mask, Stream& stream = Stream::Null())$/;"	f	namespace:cv::cudev
gridCopy_	cudev/grid/copy.hpp	/^__host__ void gridCopy_(const SrcPtr& src, GpuMat_<DstType>& dst, Stream& stream = Stream::Null())$/;"	f	namespace:cv::cudev
gridCopy_	cudev/grid/copy.hpp	/^__host__ void gridCopy_(const SrcPtr& src, GpuMat_<DstType>& dst, const MaskPtr& mask, Stream& stream = Stream::Null())$/;"	f	namespace:cv::cudev
gridCopy_	cudev/grid/copy.hpp	/^__host__ void gridCopy_(const SrcPtr& src, const GlobPtrSz<DstType>& dst, Stream& stream = Stream::Null())$/;"	f	namespace:cv::cudev
gridCopy_	cudev/grid/copy.hpp	/^__host__ void gridCopy_(const SrcPtr& src, const GlobPtrSz<DstType>& dst, const MaskPtr& mask, Stream& stream = Stream::Null())$/;"	f	namespace:cv::cudev
gridCopy_	cudev/grid/copy.hpp	/^__host__ void gridCopy_(const SrcPtrTuple& src, const tuple< GlobPtrSz<D0>, GlobPtrSz<D1> >& dst, Stream& stream = Stream::Null())$/;"	f	namespace:cv::cudev
gridCopy_	cudev/grid/copy.hpp	/^__host__ void gridCopy_(const SrcPtrTuple& src, const tuple< GlobPtrSz<D0>, GlobPtrSz<D1> >& dst, const MaskPtr& mask, Stream& stream = Stream::Null())$/;"	f	namespace:cv::cudev
gridCopy_	cudev/grid/copy.hpp	/^__host__ void gridCopy_(const SrcPtrTuple& src, const tuple< GlobPtrSz<D0>, GlobPtrSz<D1>, GlobPtrSz<D2> >& dst, Stream& stream = Stream::Null())$/;"	f	namespace:cv::cudev
gridCopy_	cudev/grid/copy.hpp	/^__host__ void gridCopy_(const SrcPtrTuple& src, const tuple< GlobPtrSz<D0>, GlobPtrSz<D1>, GlobPtrSz<D2> >& dst, const MaskPtr& mask, Stream& stream = Stream::Null())$/;"	f	namespace:cv::cudev
gridCopy_	cudev/grid/copy.hpp	/^__host__ void gridCopy_(const SrcPtrTuple& src, const tuple< GlobPtrSz<D0>, GlobPtrSz<D1>, GlobPtrSz<D2>, GlobPtrSz<D3> >& dst, Stream& stream = Stream::Null())$/;"	f	namespace:cv::cudev
gridCopy_	cudev/grid/copy.hpp	/^__host__ void gridCopy_(const SrcPtrTuple& src, const tuple< GlobPtrSz<D0>, GlobPtrSz<D1>, GlobPtrSz<D2>, GlobPtrSz<D3> >& dst, const MaskPtr& mask, Stream& stream = Stream::Null())$/;"	f	namespace:cv::cudev
gridCopy_	cudev/grid/copy.hpp	/^__host__ void gridCopy_(const SrcPtrTuple& src, const tuple< GpuMat_<D0>&, GpuMat_<D1>& >& dst, Stream& stream = Stream::Null())$/;"	f	namespace:cv::cudev
gridCopy_	cudev/grid/copy.hpp	/^__host__ void gridCopy_(const SrcPtrTuple& src, const tuple< GpuMat_<D0>&, GpuMat_<D1>& >& dst, const MaskPtr& mask, Stream& stream = Stream::Null())$/;"	f	namespace:cv::cudev
gridCopy_	cudev/grid/copy.hpp	/^__host__ void gridCopy_(const SrcPtrTuple& src, const tuple< GpuMat_<D0>&, GpuMat_<D1>&, GpuMat_<D2>& >& dst, Stream& stream = Stream::Null())$/;"	f	namespace:cv::cudev
gridCopy_	cudev/grid/copy.hpp	/^__host__ void gridCopy_(const SrcPtrTuple& src, const tuple< GpuMat_<D0>&, GpuMat_<D1>&, GpuMat_<D2>& >& dst, const MaskPtr& mask, Stream& stream = Stream::Null())$/;"	f	namespace:cv::cudev
gridCopy_	cudev/grid/copy.hpp	/^__host__ void gridCopy_(const SrcPtrTuple& src, const tuple< GpuMat_<D0>&, GpuMat_<D1>&, GpuMat_<D2>&, GpuMat_<D3>& >& dst, Stream& stream = Stream::Null())$/;"	f	namespace:cv::cudev
gridCopy_	cudev/grid/copy.hpp	/^__host__ void gridCopy_(const SrcPtrTuple& src, const tuple< GpuMat_<D0>&, GpuMat_<D1>&, GpuMat_<D2>&, GpuMat_<D3>& >& dst, const MaskPtr& mask, Stream& stream = Stream::Null())$/;"	f	namespace:cv::cudev
gridCountNonZero	cudev/grid/reduce.hpp	/^__host__ void gridCountNonZero(const SrcPtr& src, GpuMat_<ResType>& dst, Stream& stream = Stream::Null())$/;"	f	namespace:cv::cudev
gridCountNonZero	cudev/grid/reduce.hpp	/^__host__ void gridCountNonZero(const SrcPtr& src, GpuMat_<ResType>& dst, const MaskPtr& mask, Stream& stream = Stream::Null())$/;"	f	namespace:cv::cudev
gridCountNonZero_	cudev/grid/reduce.hpp	/^__host__ void gridCountNonZero_(const SrcPtr& src, GpuMat_<ResType>& dst, Stream& stream = Stream::Null())$/;"	f	namespace:cv::cudev
gridCountNonZero_	cudev/grid/reduce.hpp	/^__host__ void gridCountNonZero_(const SrcPtr& src, GpuMat_<ResType>& dst, const MaskPtr& mask, Stream& stream = Stream::Null())$/;"	f	namespace:cv::cudev
gridFindMaxVal	cudev/grid/reduce.hpp	/^__host__ void gridFindMaxVal(const SrcPtr& src, GpuMat_<ResType>& dst, Stream& stream = Stream::Null())$/;"	f	namespace:cv::cudev
gridFindMaxVal	cudev/grid/reduce.hpp	/^__host__ void gridFindMaxVal(const SrcPtr& src, GpuMat_<ResType>& dst, const MaskPtr& mask, Stream& stream = Stream::Null())$/;"	f	namespace:cv::cudev
gridFindMaxVal_	cudev/grid/reduce.hpp	/^__host__ void gridFindMaxVal_(const SrcPtr& src, GpuMat_<ResType>& dst, Stream& stream = Stream::Null())$/;"	f	namespace:cv::cudev
gridFindMaxVal_	cudev/grid/reduce.hpp	/^__host__ void gridFindMaxVal_(const SrcPtr& src, GpuMat_<ResType>& dst, const MaskPtr& mask, Stream& stream = Stream::Null())$/;"	f	namespace:cv::cudev
gridFindMinMaxVal	cudev/grid/reduce.hpp	/^__host__ void gridFindMinMaxVal(const SrcPtr& src, GpuMat_<ResType>& dst, Stream& stream = Stream::Null())$/;"	f	namespace:cv::cudev
gridFindMinMaxVal	cudev/grid/reduce.hpp	/^__host__ void gridFindMinMaxVal(const SrcPtr& src, GpuMat_<ResType>& dst, const MaskPtr& mask, Stream& stream = Stream::Null())$/;"	f	namespace:cv::cudev
gridFindMinMaxVal_	cudev/grid/reduce.hpp	/^__host__ void gridFindMinMaxVal_(const SrcPtr& src, GpuMat_<ResType>& dst, Stream& stream = Stream::Null())$/;"	f	namespace:cv::cudev
gridFindMinMaxVal_	cudev/grid/reduce.hpp	/^__host__ void gridFindMinMaxVal_(const SrcPtr& src, GpuMat_<ResType>& dst, const MaskPtr& mask, Stream& stream = Stream::Null())$/;"	f	namespace:cv::cudev
gridFindMinVal	cudev/grid/reduce.hpp	/^__host__ void gridFindMinVal(const SrcPtr& src, GpuMat_<ResType>& dst, Stream& stream = Stream::Null())$/;"	f	namespace:cv::cudev
gridFindMinVal	cudev/grid/reduce.hpp	/^__host__ void gridFindMinVal(const SrcPtr& src, GpuMat_<ResType>& dst, const MaskPtr& mask, Stream& stream = Stream::Null())$/;"	f	namespace:cv::cudev
gridFindMinVal_	cudev/grid/reduce.hpp	/^__host__ void gridFindMinVal_(const SrcPtr& src, GpuMat_<ResType>& dst, Stream& stream = Stream::Null())$/;"	f	namespace:cv::cudev
gridFindMinVal_	cudev/grid/reduce.hpp	/^__host__ void gridFindMinVal_(const SrcPtr& src, GpuMat_<ResType>& dst, const MaskPtr& mask, Stream& stream = Stream::Null())$/;"	f	namespace:cv::cudev
gridHistogram	cudev/grid/histogram.hpp	/^__host__ void gridHistogram(const SrcPtr& src, GpuMat_<ResType>& dst, Stream& stream = Stream::Null())$/;"	f	namespace:cv::cudev
gridHistogram	cudev/grid/histogram.hpp	/^__host__ void gridHistogram(const SrcPtr& src, GpuMat_<ResType>& dst, const MaskPtr& mask, Stream& stream = Stream::Null())$/;"	f	namespace:cv::cudev
gridHistogram_	cudev/grid/histogram.hpp	/^__host__ void gridHistogram_(const SrcPtr& src, GpuMat_<ResType>& dst, Stream& stream = Stream::Null())$/;"	f	namespace:cv::cudev
gridHistogram_	cudev/grid/histogram.hpp	/^__host__ void gridHistogram_(const SrcPtr& src, GpuMat_<ResType>& dst, const MaskPtr& mask, Stream& stream = Stream::Null())$/;"	f	namespace:cv::cudev
gridIntegral	cudev/grid/integral.hpp	/^__host__ void gridIntegral(const SrcPtr& src, GpuMat_<DstType>& dst, Stream& stream = Stream::Null())$/;"	f	namespace:cv::cudev
gridMerge	cudev/grid/split_merge.hpp	/^__host__ void gridMerge(const SrcPtrTuple& src, GpuMat_<DstType>& dst, Stream& stream = Stream::Null())$/;"	f	namespace:cv::cudev
gridMerge	cudev/grid/split_merge.hpp	/^__host__ void gridMerge(const SrcPtrTuple& src, GpuMat_<DstType>& dst, const MaskPtr& mask, Stream& stream = Stream::Null())$/;"	f	namespace:cv::cudev
gridMerge	cudev/grid/split_merge.hpp	/^__host__ void gridMerge(const SrcPtrTuple& src, const GlobPtrSz<DstType>& dst, Stream& stream = Stream::Null())$/;"	f	namespace:cv::cudev
gridMerge	cudev/grid/split_merge.hpp	/^__host__ void gridMerge(const SrcPtrTuple& src, const GlobPtrSz<DstType>& dst, const MaskPtr& mask, Stream& stream = Stream::Null())$/;"	f	namespace:cv::cudev
gridMerge_	cudev/grid/split_merge.hpp	/^__host__ void gridMerge_(const SrcPtrTuple& src, GpuMat_<DstType>& dst, Stream& stream = Stream::Null())$/;"	f	namespace:cv::cudev
gridMerge_	cudev/grid/split_merge.hpp	/^__host__ void gridMerge_(const SrcPtrTuple& src, GpuMat_<DstType>& dst, const MaskPtr& mask, Stream& stream = Stream::Null())$/;"	f	namespace:cv::cudev
gridMerge_	cudev/grid/split_merge.hpp	/^__host__ void gridMerge_(const SrcPtrTuple& src, const GlobPtrSz<DstType>& dst, Stream& stream = Stream::Null())$/;"	f	namespace:cv::cudev
gridMerge_	cudev/grid/split_merge.hpp	/^__host__ void gridMerge_(const SrcPtrTuple& src, const GlobPtrSz<DstType>& dst, const MaskPtr& mask, Stream& stream = Stream::Null())$/;"	f	namespace:cv::cudev
gridMinMaxLoc	cudev/grid/reduce.hpp	/^__host__ void gridMinMaxLoc(const SrcPtr& src, GpuMat_<ResType>& valBuf, GpuMat_<int>& locBuf, Stream& stream = Stream::Null())$/;"	f	namespace:cv::cudev
gridMinMaxLoc	cudev/grid/reduce.hpp	/^__host__ void gridMinMaxLoc(const SrcPtr& src, GpuMat_<ResType>& valBuf, GpuMat_<int>& locBuf, const MaskPtr& mask, Stream& stream = Stream::Null())$/;"	f	namespace:cv::cudev
gridMinMaxLoc_	cudev/grid/reduce.hpp	/^__host__ void gridMinMaxLoc_(const SrcPtr& src, GpuMat_<ResType>& valBuf, GpuMat_<int>& locBuf, Stream& stream = Stream::Null())$/;"	f	namespace:cv::cudev
gridMinMaxLoc_	cudev/grid/reduce.hpp	/^__host__ void gridMinMaxLoc_(const SrcPtr& src, GpuMat_<ResType>& valBuf, GpuMat_<int>& locBuf, const MaskPtr& mask, Stream& stream = Stream::Null())$/;"	f	namespace:cv::cudev
gridPyrDown	cudev/grid/pyramids.hpp	/^__host__ void gridPyrDown(const SrcPtr& src, GpuMat_<DstType>& dst, Stream& stream = Stream::Null())$/;"	f	namespace:cv::cudev
gridPyrDown_	cudev/grid/pyramids.hpp	/^__host__ void gridPyrDown_(const SrcPtr& src, GpuMat_<DstType>& dst, Stream& stream = Stream::Null())$/;"	f	namespace:cv::cudev
gridPyrUp	cudev/grid/pyramids.hpp	/^__host__ void gridPyrUp(const SrcPtr& src, GpuMat_<DstType>& dst, Stream& stream = Stream::Null())$/;"	f	namespace:cv::cudev
gridReduceToColumn	cudev/grid/reduce_to_vec.hpp	/^__host__ void gridReduceToColumn(const SrcPtr& src, GpuMat_<ResType>& dst, Stream& stream = Stream::Null())$/;"	f	namespace:cv::cudev
gridReduceToColumn	cudev/grid/reduce_to_vec.hpp	/^__host__ void gridReduceToColumn(const SrcPtr& src, GpuMat_<ResType>& dst, const MaskPtr& mask, Stream& stream = Stream::Null())$/;"	f	namespace:cv::cudev
gridReduceToColumn_	cudev/grid/reduce_to_vec.hpp	/^__host__ void gridReduceToColumn_(const SrcPtr& src, GpuMat_<ResType>& dst, Stream& stream = Stream::Null())$/;"	f	namespace:cv::cudev
gridReduceToColumn_	cudev/grid/reduce_to_vec.hpp	/^__host__ void gridReduceToColumn_(const SrcPtr& src, GpuMat_<ResType>& dst, const MaskPtr& mask, Stream& stream = Stream::Null())$/;"	f	namespace:cv::cudev
gridReduceToRow	cudev/grid/reduce_to_vec.hpp	/^__host__ void gridReduceToRow(const SrcPtr& src, GpuMat_<ResType>& dst, Stream& stream = Stream::Null())$/;"	f	namespace:cv::cudev
gridReduceToRow	cudev/grid/reduce_to_vec.hpp	/^__host__ void gridReduceToRow(const SrcPtr& src, GpuMat_<ResType>& dst, const MaskPtr& mask, Stream& stream = Stream::Null())$/;"	f	namespace:cv::cudev
gridSplit	cudev/grid/split_merge.hpp	/^__host__ void gridSplit(const SrcPtr& src, GlobPtrSz<DstType> (&dst)[COUNT], Stream& stream = Stream::Null())$/;"	f	namespace:cv::cudev
gridSplit	cudev/grid/split_merge.hpp	/^__host__ void gridSplit(const SrcPtr& src, GlobPtrSz<DstType> (&dst)[COUNT], const MaskPtr& mask, Stream& stream = Stream::Null())$/;"	f	namespace:cv::cudev
gridSplit	cudev/grid/split_merge.hpp	/^__host__ void gridSplit(const SrcPtr& src, GpuMat_<DstType> (&dst)[COUNT], Stream& stream = Stream::Null())$/;"	f	namespace:cv::cudev
gridSplit	cudev/grid/split_merge.hpp	/^__host__ void gridSplit(const SrcPtr& src, GpuMat_<DstType> (&dst)[COUNT], const MaskPtr& mask, Stream& stream = Stream::Null())$/;"	f	namespace:cv::cudev
gridSplit	cudev/grid/split_merge.hpp	/^__host__ void gridSplit(const SrcPtr& src, const tuple< GpuMat_<DstType>&, GpuMat_<DstType>& >& dst, Stream& stream = Stream::Null())$/;"	f	namespace:cv::cudev
gridSplit	cudev/grid/split_merge.hpp	/^__host__ void gridSplit(const SrcPtr& src, const tuple< GpuMat_<DstType>&, GpuMat_<DstType>& >& dst, const MaskPtr& mask, Stream& stream = Stream::Null())$/;"	f	namespace:cv::cudev
gridSplit	cudev/grid/split_merge.hpp	/^__host__ void gridSplit(const SrcPtr& src, const tuple< GpuMat_<DstType>&, GpuMat_<DstType>&, GpuMat_<DstType>& >& dst, Stream& stream = Stream::Null())$/;"	f	namespace:cv::cudev
gridSplit	cudev/grid/split_merge.hpp	/^__host__ void gridSplit(const SrcPtr& src, const tuple< GpuMat_<DstType>&, GpuMat_<DstType>&, GpuMat_<DstType>& >& dst, const MaskPtr& mask, Stream& stream = Stream::Null())$/;"	f	namespace:cv::cudev
gridSplit	cudev/grid/split_merge.hpp	/^__host__ void gridSplit(const SrcPtr& src, const tuple< GpuMat_<DstType>&, GpuMat_<DstType>&, GpuMat_<DstType>&, GpuMat_<DstType>& >& dst, Stream& stream = Stream::Null())$/;"	f	namespace:cv::cudev
gridSplit	cudev/grid/split_merge.hpp	/^__host__ void gridSplit(const SrcPtr& src, const tuple< GpuMat_<DstType>&, GpuMat_<DstType>&, GpuMat_<DstType>&, GpuMat_<DstType>& >& dst, const MaskPtr& mask, Stream& stream = Stream::Null())$/;"	f	namespace:cv::cudev
gridSplit_	cudev/grid/split_merge.hpp	/^__host__ void gridSplit_(const SrcPtr& src, GlobPtrSz<DstType> (&dst)[2], Stream& stream = Stream::Null())$/;"	f	namespace:cv::cudev
gridSplit_	cudev/grid/split_merge.hpp	/^__host__ void gridSplit_(const SrcPtr& src, GlobPtrSz<DstType> (&dst)[2], const MaskPtr& mask, Stream& stream = Stream::Null())$/;"	f	namespace:cv::cudev
gridSplit_	cudev/grid/split_merge.hpp	/^__host__ void gridSplit_(const SrcPtr& src, GlobPtrSz<DstType> (&dst)[3], Stream& stream = Stream::Null())$/;"	f	namespace:cv::cudev
gridSplit_	cudev/grid/split_merge.hpp	/^__host__ void gridSplit_(const SrcPtr& src, GlobPtrSz<DstType> (&dst)[3], const MaskPtr& mask, Stream& stream = Stream::Null())$/;"	f	namespace:cv::cudev
gridSplit_	cudev/grid/split_merge.hpp	/^__host__ void gridSplit_(const SrcPtr& src, GlobPtrSz<DstType> (&dst)[4], Stream& stream = Stream::Null())$/;"	f	namespace:cv::cudev
gridSplit_	cudev/grid/split_merge.hpp	/^__host__ void gridSplit_(const SrcPtr& src, GlobPtrSz<DstType> (&dst)[4], const MaskPtr& mask, Stream& stream = Stream::Null())$/;"	f	namespace:cv::cudev
gridSplit_	cudev/grid/split_merge.hpp	/^__host__ void gridSplit_(const SrcPtr& src, GpuMat_<DstType> (&dst)[2], Stream& stream = Stream::Null())$/;"	f	namespace:cv::cudev
gridSplit_	cudev/grid/split_merge.hpp	/^__host__ void gridSplit_(const SrcPtr& src, GpuMat_<DstType> (&dst)[2], const MaskPtr& mask, Stream& stream = Stream::Null())$/;"	f	namespace:cv::cudev
gridSplit_	cudev/grid/split_merge.hpp	/^__host__ void gridSplit_(const SrcPtr& src, GpuMat_<DstType> (&dst)[3], Stream& stream = Stream::Null())$/;"	f	namespace:cv::cudev
gridSplit_	cudev/grid/split_merge.hpp	/^__host__ void gridSplit_(const SrcPtr& src, GpuMat_<DstType> (&dst)[3], const MaskPtr& mask, Stream& stream = Stream::Null())$/;"	f	namespace:cv::cudev
gridSplit_	cudev/grid/split_merge.hpp	/^__host__ void gridSplit_(const SrcPtr& src, GpuMat_<DstType> (&dst)[4], Stream& stream = Stream::Null())$/;"	f	namespace:cv::cudev
gridSplit_	cudev/grid/split_merge.hpp	/^__host__ void gridSplit_(const SrcPtr& src, GpuMat_<DstType> (&dst)[4], const MaskPtr& mask, Stream& stream = Stream::Null())$/;"	f	namespace:cv::cudev
gridSplit_	cudev/grid/split_merge.hpp	/^__host__ void gridSplit_(const SrcPtr& src, const tuple< GpuMat_<DstType>&, GpuMat_<DstType>& >& dst, Stream& stream = Stream::Null())$/;"	f	namespace:cv::cudev
gridSplit_	cudev/grid/split_merge.hpp	/^__host__ void gridSplit_(const SrcPtr& src, const tuple< GpuMat_<DstType>&, GpuMat_<DstType>& >& dst, const MaskPtr& mask, Stream& stream = Stream::Null())$/;"	f	namespace:cv::cudev
gridSplit_	cudev/grid/split_merge.hpp	/^__host__ void gridSplit_(const SrcPtr& src, const tuple< GpuMat_<DstType>&, GpuMat_<DstType>&, GpuMat_<DstType>& >& dst, Stream& stream = Stream::Null())$/;"	f	namespace:cv::cudev
gridSplit_	cudev/grid/split_merge.hpp	/^__host__ void gridSplit_(const SrcPtr& src, const tuple< GpuMat_<DstType>&, GpuMat_<DstType>&, GpuMat_<DstType>& >& dst, const MaskPtr& mask, Stream& stream = Stream::Null())$/;"	f	namespace:cv::cudev
gridSplit_	cudev/grid/split_merge.hpp	/^__host__ void gridSplit_(const SrcPtr& src, const tuple< GpuMat_<DstType>&, GpuMat_<DstType>&, GpuMat_<DstType>&, GpuMat_<DstType>& >& dst, Stream& stream = Stream::Null())$/;"	f	namespace:cv::cudev
gridSplit_	cudev/grid/split_merge.hpp	/^__host__ void gridSplit_(const SrcPtr& src, const tuple< GpuMat_<DstType>&, GpuMat_<DstType>&, GpuMat_<DstType>&, GpuMat_<DstType>& >& dst, const MaskPtr& mask, Stream& stream = Stream::Null())$/;"	f	namespace:cv::cudev
gridTransformBinary	cudev/grid/transform.hpp	/^__host__ void gridTransformBinary(const SrcPtr1& src1, const SrcPtr2& src2, GpuMat_<DstType>& dst, const Op& op, Stream& stream = Stream::Null())$/;"	f	namespace:cv::cudev
gridTransformBinary	cudev/grid/transform.hpp	/^__host__ void gridTransformBinary(const SrcPtr1& src1, const SrcPtr2& src2, GpuMat_<DstType>& dst, const Op& op, const MaskPtr& mask, Stream& stream = Stream::Null())$/;"	f	namespace:cv::cudev
gridTransformBinary	cudev/grid/transform.hpp	/^__host__ void gridTransformBinary(const SrcPtr1& src1, const SrcPtr2& src2, const GlobPtrSz<DstType>& dst, const Op& op, Stream& stream = Stream::Null())$/;"	f	namespace:cv::cudev
gridTransformBinary	cudev/grid/transform.hpp	/^__host__ void gridTransformBinary(const SrcPtr1& src1, const SrcPtr2& src2, const GlobPtrSz<DstType>& dst, const Op& op, const MaskPtr& mask, Stream& stream = Stream::Null())$/;"	f	namespace:cv::cudev
gridTransformBinary_	cudev/grid/transform.hpp	/^__host__ void gridTransformBinary_(const SrcPtr1& src1, const SrcPtr2& src2, GpuMat_<DstType>& dst, const BinOp& op, Stream& stream = Stream::Null())$/;"	f	namespace:cv::cudev
gridTransformBinary_	cudev/grid/transform.hpp	/^__host__ void gridTransformBinary_(const SrcPtr1& src1, const SrcPtr2& src2, GpuMat_<DstType>& dst, const BinOp& op, const MaskPtr& mask, Stream& stream = Stream::Null())$/;"	f	namespace:cv::cudev
gridTransformBinary_	cudev/grid/transform.hpp	/^__host__ void gridTransformBinary_(const SrcPtr1& src1, const SrcPtr2& src2, const GlobPtrSz<DstType>& dst, const BinOp& op, Stream& stream = Stream::Null())$/;"	f	namespace:cv::cudev
gridTransformBinary_	cudev/grid/transform.hpp	/^__host__ void gridTransformBinary_(const SrcPtr1& src1, const SrcPtr2& src2, const GlobPtrSz<DstType>& dst, const BinOp& op, const MaskPtr& mask, Stream& stream = Stream::Null())$/;"	f	namespace:cv::cudev
gridTransformTuple	cudev/grid/transform.hpp	/^__host__ void gridTransformTuple(const SrcPtr& src, const tuple< GlobPtrSz<D0>, GlobPtrSz<D1> >& dst, const OpTuple& op, Stream& stream = Stream::Null())$/;"	f	namespace:cv::cudev
gridTransformTuple	cudev/grid/transform.hpp	/^__host__ void gridTransformTuple(const SrcPtr& src, const tuple< GlobPtrSz<D0>, GlobPtrSz<D1> >& dst, const OpTuple& op, const MaskPtr& mask, Stream& stream = Stream::Null())$/;"	f	namespace:cv::cudev
gridTransformTuple	cudev/grid/transform.hpp	/^__host__ void gridTransformTuple(const SrcPtr& src, const tuple< GlobPtrSz<D0>, GlobPtrSz<D1>, GlobPtrSz<D2> >& dst, const OpTuple& op, Stream& stream = Stream::Null())$/;"	f	namespace:cv::cudev
gridTransformTuple	cudev/grid/transform.hpp	/^__host__ void gridTransformTuple(const SrcPtr& src, const tuple< GlobPtrSz<D0>, GlobPtrSz<D1>, GlobPtrSz<D2> >& dst, const OpTuple& op, const MaskPtr& mask, Stream& stream = Stream::Null())$/;"	f	namespace:cv::cudev
gridTransformTuple	cudev/grid/transform.hpp	/^__host__ void gridTransformTuple(const SrcPtr& src, const tuple< GlobPtrSz<D0>, GlobPtrSz<D1>, GlobPtrSz<D2>, GlobPtrSz<D3> >& dst, const OpTuple& op, Stream& stream = Stream::Null())$/;"	f	namespace:cv::cudev
gridTransformTuple	cudev/grid/transform.hpp	/^__host__ void gridTransformTuple(const SrcPtr& src, const tuple< GlobPtrSz<D0>, GlobPtrSz<D1>, GlobPtrSz<D2>, GlobPtrSz<D3> >& dst, const OpTuple& op, const MaskPtr& mask, Stream& stream = Stream::Null())$/;"	f	namespace:cv::cudev
gridTransformTuple	cudev/grid/transform.hpp	/^__host__ void gridTransformTuple(const SrcPtr& src, const tuple< GpuMat_<D0>&, GpuMat_<D1>& >& dst, const OpTuple& op, Stream& stream = Stream::Null())$/;"	f	namespace:cv::cudev
gridTransformTuple	cudev/grid/transform.hpp	/^__host__ void gridTransformTuple(const SrcPtr& src, const tuple< GpuMat_<D0>&, GpuMat_<D1>& >& dst, const OpTuple& op, const MaskPtr& mask, Stream& stream = Stream::Null())$/;"	f	namespace:cv::cudev
gridTransformTuple	cudev/grid/transform.hpp	/^__host__ void gridTransformTuple(const SrcPtr& src, const tuple< GpuMat_<D0>&, GpuMat_<D1>&, GpuMat_<D2>& >& dst, const OpTuple& op, Stream& stream = Stream::Null())$/;"	f	namespace:cv::cudev
gridTransformTuple	cudev/grid/transform.hpp	/^__host__ void gridTransformTuple(const SrcPtr& src, const tuple< GpuMat_<D0>&, GpuMat_<D1>&, GpuMat_<D2>& >& dst, const OpTuple& op, const MaskPtr& mask, Stream& stream = Stream::Null())$/;"	f	namespace:cv::cudev
gridTransformTuple	cudev/grid/transform.hpp	/^__host__ void gridTransformTuple(const SrcPtr& src, const tuple< GpuMat_<D0>&, GpuMat_<D1>&, GpuMat_<D2>&, GpuMat_<D3>& >& dst, const OpTuple& op, Stream& stream = Stream::Null())$/;"	f	namespace:cv::cudev
gridTransformTuple	cudev/grid/transform.hpp	/^__host__ void gridTransformTuple(const SrcPtr& src, const tuple< GpuMat_<D0>&, GpuMat_<D1>&, GpuMat_<D2>&, GpuMat_<D3>& >& dst, const OpTuple& op, const MaskPtr& mask, Stream& stream = Stream::Null())$/;"	f	namespace:cv::cudev
gridTransformTuple_	cudev/grid/transform.hpp	/^__host__ void gridTransformTuple_(const SrcPtr& src, const tuple< GlobPtrSz<D0>, GlobPtrSz<D1> >& dst, const OpTuple& op, Stream& stream = Stream::Null())$/;"	f	namespace:cv::cudev
gridTransformTuple_	cudev/grid/transform.hpp	/^__host__ void gridTransformTuple_(const SrcPtr& src, const tuple< GlobPtrSz<D0>, GlobPtrSz<D1> >& dst, const OpTuple& op, const MaskPtr& mask, Stream& stream = Stream::Null())$/;"	f	namespace:cv::cudev
gridTransformTuple_	cudev/grid/transform.hpp	/^__host__ void gridTransformTuple_(const SrcPtr& src, const tuple< GlobPtrSz<D0>, GlobPtrSz<D1>, GlobPtrSz<D2> >& dst, const OpTuple& op, Stream& stream = Stream::Null())$/;"	f	namespace:cv::cudev
gridTransformTuple_	cudev/grid/transform.hpp	/^__host__ void gridTransformTuple_(const SrcPtr& src, const tuple< GlobPtrSz<D0>, GlobPtrSz<D1>, GlobPtrSz<D2> >& dst, const OpTuple& op, const MaskPtr& mask, Stream& stream = Stream::Null())$/;"	f	namespace:cv::cudev
gridTransformTuple_	cudev/grid/transform.hpp	/^__host__ void gridTransformTuple_(const SrcPtr& src, const tuple< GlobPtrSz<D0>, GlobPtrSz<D1>, GlobPtrSz<D2>, GlobPtrSz<D3> >& dst, const OpTuple& op, Stream& stream = Stream::Null())$/;"	f	namespace:cv::cudev
gridTransformTuple_	cudev/grid/transform.hpp	/^__host__ void gridTransformTuple_(const SrcPtr& src, const tuple< GlobPtrSz<D0>, GlobPtrSz<D1>, GlobPtrSz<D2>, GlobPtrSz<D3> >& dst, const OpTuple& op, const MaskPtr& mask, Stream& stream = Stream::Null())$/;"	f	namespace:cv::cudev
gridTransformTuple_	cudev/grid/transform.hpp	/^__host__ void gridTransformTuple_(const SrcPtr& src, const tuple< GpuMat_<D0>&, GpuMat_<D1>& >& dst, const OpTuple& op, Stream& stream = Stream::Null())$/;"	f	namespace:cv::cudev
gridTransformTuple_	cudev/grid/transform.hpp	/^__host__ void gridTransformTuple_(const SrcPtr& src, const tuple< GpuMat_<D0>&, GpuMat_<D1>& >& dst, const OpTuple& op, const MaskPtr& mask, Stream& stream = Stream::Null())$/;"	f	namespace:cv::cudev
gridTransformTuple_	cudev/grid/transform.hpp	/^__host__ void gridTransformTuple_(const SrcPtr& src, const tuple< GpuMat_<D0>&, GpuMat_<D1>&, GpuMat_<D2>& >& dst, const OpTuple& op, Stream& stream = Stream::Null())$/;"	f	namespace:cv::cudev
gridTransformTuple_	cudev/grid/transform.hpp	/^__host__ void gridTransformTuple_(const SrcPtr& src, const tuple< GpuMat_<D0>&, GpuMat_<D1>&, GpuMat_<D2>& >& dst, const OpTuple& op, const MaskPtr& mask, Stream& stream = Stream::Null())$/;"	f	namespace:cv::cudev
gridTransformTuple_	cudev/grid/transform.hpp	/^__host__ void gridTransformTuple_(const SrcPtr& src, const tuple< GpuMat_<D0>&, GpuMat_<D1>&, GpuMat_<D2>&, GpuMat_<D3>& >& dst, const OpTuple& op, Stream& stream = Stream::Null())$/;"	f	namespace:cv::cudev
gridTransformTuple_	cudev/grid/transform.hpp	/^__host__ void gridTransformTuple_(const SrcPtr& src, const tuple< GpuMat_<D0>&, GpuMat_<D1>&, GpuMat_<D2>&, GpuMat_<D3>& >& dst, const OpTuple& op, const MaskPtr& mask, Stream& stream = Stream::Null())$/;"	f	namespace:cv::cudev
gridTransformUnary	cudev/grid/transform.hpp	/^__host__ void gridTransformUnary(const SrcPtr& src, GpuMat_<DstType>& dst, const Op& op, Stream& stream = Stream::Null())$/;"	f	namespace:cv::cudev
gridTransformUnary	cudev/grid/transform.hpp	/^__host__ void gridTransformUnary(const SrcPtr& src, GpuMat_<DstType>& dst, const Op& op, const MaskPtr& mask, Stream& stream = Stream::Null())$/;"	f	namespace:cv::cudev
gridTransformUnary	cudev/grid/transform.hpp	/^__host__ void gridTransformUnary(const SrcPtr& src, const GlobPtrSz<DstType>& dst, const Op& op, Stream& stream = Stream::Null())$/;"	f	namespace:cv::cudev
gridTransformUnary	cudev/grid/transform.hpp	/^__host__ void gridTransformUnary(const SrcPtr& src, const GlobPtrSz<DstType>& dst, const Op& op, const MaskPtr& mask, Stream& stream = Stream::Null())$/;"	f	namespace:cv::cudev
gridTransformUnary_	cudev/grid/transform.hpp	/^__host__ void gridTransformUnary_(const SrcPtr& src, GpuMat_<DstType>& dst, const UnOp& op, Stream& stream = Stream::Null())$/;"	f	namespace:cv::cudev
gridTransformUnary_	cudev/grid/transform.hpp	/^__host__ void gridTransformUnary_(const SrcPtr& src, GpuMat_<DstType>& dst, const UnOp& op, const MaskPtr& mask, Stream& stream = Stream::Null())$/;"	f	namespace:cv::cudev
gridTransformUnary_	cudev/grid/transform.hpp	/^__host__ void gridTransformUnary_(const SrcPtr& src, const GlobPtrSz<DstType>& dst, const UnOp& op, Stream& stream = Stream::Null())$/;"	f	namespace:cv::cudev
gridTransformUnary_	cudev/grid/transform.hpp	/^__host__ void gridTransformUnary_(const SrcPtr& src, const GlobPtrSz<DstType>& dst, const UnOp& op, const MaskPtr& mask, Stream& stream = Stream::Null())$/;"	f	namespace:cv::cudev
gridTranspose	cudev/grid/transpose.hpp	/^__host__ void gridTranspose(const SrcPtr& src, GpuMat_<DstType>& dst, Stream& stream = Stream::Null())$/;"	f	namespace:cv::cudev
gridTranspose	cudev/grid/transpose.hpp	/^__host__ void gridTranspose(const SrcPtr& src, const GlobPtrSz<DstType>& dst, Stream& stream = Stream::Null())$/;"	f	namespace:cv::cudev
gridTranspose_	cudev/grid/transpose.hpp	/^__host__ void gridTranspose_(const SrcPtr& src, GpuMat_<DstType>& dst, Stream& stream = Stream::Null())$/;"	f	namespace:cv::cudev
gridTranspose_	cudev/grid/transpose.hpp	/^__host__ void gridTranspose_(const SrcPtr& src, const GlobPtrSz<DstType>& dst, Stream& stream = Stream::Null())$/;"	f	namespace:cv::cudev
grid_	videostab/outlier_rejection.hpp	/^    std::vector<Cell> grid_;$/;"	m	class:cv::videostab::TranslationBasedLocalOutlierRejector
grid_copy_detail	cudev/grid/detail/copy.hpp	/^namespace grid_copy_detail$/;"	n	namespace:cv::cudev
grid_histogram_detail	cudev/grid/detail/histogram.hpp	/^namespace grid_histogram_detail$/;"	n	namespace:cv::cudev
grid_minmaxloc_detail	cudev/grid/detail/minmaxloc.hpp	/^namespace grid_minmaxloc_detail$/;"	n	namespace:cv::cudev
grid_reduce_detail	cudev/grid/detail/reduce.hpp	/^namespace grid_reduce_detail$/;"	n	namespace:cv::cudev
grid_reduce_to_vec_detail	cudev/grid/detail/reduce_to_column.hpp	/^namespace grid_reduce_to_vec_detail$/;"	n	namespace:cv::cudev
grid_reduce_to_vec_detail	cudev/grid/detail/reduce_to_row.hpp	/^namespace grid_reduce_to_vec_detail$/;"	n	namespace:cv::cudev
grid_size	stitching/detail/matchers.hpp	/^    Size grid_size;$/;"	m	class:cv::detail::OrbFeaturesFinder
grid_split_merge_detail	cudev/grid/detail/split_merge.hpp	/^namespace grid_split_merge_detail$/;"	n	namespace:cv::cudev
grid_transform_detail	cudev/grid/detail/transform.hpp	/^namespace grid_transform_detail$/;"	n	namespace:cv::cudev
gstddev	ts/ts_perf.hpp	/^    double gstddev;\/\/stddev for log(time)$/;"	m	struct:perf::performance_metrics
gt_matches_	flann/autotuned_index.h	/^    Matrix<int> gt_matches_;$/;"	m	class:cvflann::AutotunedIndex
gtest_flag_saver_	ts/ts_gtest.h	/^  const internal::GTestFlagSaver* const gtest_flag_saver_;$/;"	m	class:testing::Test::internal
gtest_internal	ts/ts_gtest.h	/^namespace gtest_internal {$/;"	n	namespace:std::tr1
haar_feature	objdetect/objdetect_c.h	/^    CvHaarFeature* haar_feature;$/;"	m	struct:CvHaarClassifier
haight	core/cuda/filters.hpp	/^        int width, haight;$/;"	m	struct:cv::cuda::device::AreaFilter
hal	hal.hpp	/^namespace cv { namespace hal {$/;"	n	namespace:cv
half	core/cuda/detail/color_detail.hpp	/^            static __device__ __forceinline__ T half() { return (T)(max()\/2 + 1); }$/;"	f	struct:cv::cuda::device::color_detail::ColorChannel
half	core/cuda/detail/color_detail.hpp	/^            static __device__ __forceinline__ float half() { return 0.5f; }$/;"	f	struct:cv::cuda::device::color_detail::ColorChannel
half	cudev/functional/detail/color_cvt.hpp	/^        __device__ __forceinline__ static T half() { return (T)(max()\/2 + 1); }$/;"	f	struct:cv::cudev::color_cvt_detail::ColorChannel
half	cudev/functional/detail/color_cvt.hpp	/^        __device__ __forceinline__ static float half() { return 0.5f; }$/;"	f	struct:cv::cudev::color_cvt_detail::ColorChannel
handle	core/mat.hpp	/^    void* handle;$/;"	m	struct:cv::UMatData
has	core/cuda.inl.hpp	/^bool TargetArchs::has(int major, int minor)$/;"	f	class:cv::cuda::TargetArchs
hasEqualOrGreater	core/cuda.inl.hpp	/^bool TargetArchs::hasEqualOrGreater(int major, int minor)$/;"	f	class:cv::cuda::TargetArchs
has_new_fatal_failure	ts/ts_gtest.h	/^  bool has_new_fatal_failure() const { return has_new_fatal_failure_; }$/;"	f	class:testing::internal::HasNewFatalFailureHelper
has_new_fatal_failure_	ts/ts_gtest.h	/^  bool has_new_fatal_failure_;$/;"	m	class:testing::internal::HasNewFatalFailureHelper
has_owner_	ts/ts_gtest.h	/^  bool has_owner_;$/;"	m	class:std::tr1::MutexBase
has_type	flann/any.h	/^    bool has_type()$/;"	f	struct:cvflann::any
hash	core/mat.inl.hpp	/^size_t SparseMat::hash(const int* idx) const$/;"	f	class:cv::SparseMat
hash	core/mat.inl.hpp	/^size_t SparseMat::hash(int i0) const$/;"	f	class:cv::SparseMat
hash	core/mat.inl.hpp	/^size_t SparseMat::hash(int i0, int i1) const$/;"	f	class:cv::SparseMat
hash	core/mat.inl.hpp	/^size_t SparseMat::hash(int i0, int i1, int i2) const$/;"	f	class:cv::SparseMat
hash_t	core/ocl.hpp	/^    typedef uint64 hash_t;$/;"	t	class:cv::ocl::ProgramSource
hashidx	core/mat.hpp	/^    size_t hashidx;$/;"	m	class:cv::SparseMatConstIterator
hashsize	core/types_c.h	/^    int hashsize;$/;"	m	struct:CvSparseMat
hashtab	core/mat.hpp	/^        std::vector<size_t> hashtab;$/;"	m	struct:cv::SparseMat::Hdr
hashtable	core/types_c.h	/^    void** hashtable;$/;"	m	struct:CvSparseMat
hashval	core/mat.hpp	/^        size_t hashval;$/;"	m	struct:cv::SparseMat::Node
hashval	core/types_c.h	/^    unsigned hashval;$/;"	m	struct:CvSparseNode
hashval	core/types_c.h	/^    unsigned hashval;$/;"	m	struct:CvStringHashNode
hdr	core/core_c.h	/^    CvMatND* hdr[CV_MAX_ARR]; \/**< pointers to the headers of the$/;"	m	struct:CvNArrayIterator
hdr	core/mat.hpp	/^    Hdr* hdr;$/;"	m	class:cv::SparseMat
hdr_refcount	core/types_c.h	/^    int hdr_refcount;$/;"	m	struct:CvMat
hdr_refcount	core/types_c.h	/^    int hdr_refcount;$/;"	m	struct:CvMatND
hdr_refcount	core/types_c.h	/^    int hdr_refcount;$/;"	m	struct:CvSparseMat
header_	core/wimage.hpp	/^    IplImage header_;$/;"	m	class:cv::WImageView
header_	core/wimage.hpp	/^    IplImage header_;$/;"	m	class:cv::WImageViewC
header_size	core/persistence.hpp	/^      int          header_size;$/;"	m	struct:cv::FileNodeIterator::SeqReader
header_size	core/types_c.h	/^    int header_size; \/**< sizeof(CvTypeInfo) *\/$/;"	m	struct:CvTypeInfo
heap	core/types_c.h	/^    struct CvSet* heap;$/;"	m	struct:CvSparseMat	typeref:struct:CvSparseMat::CvSet
heap	flann/heap.h	/^    std::vector<T> heap;$/;"	m	class:cvflann::Heap
height	core/cuda/border_interpolate.hpp	/^        int height;$/;"	m	struct:cv::cuda::device::BorderReader
height	core/cuda/border_interpolate.hpp	/^        int height;$/;"	m	struct:cv::cuda::device::BrdColConstant
height	core/cuda/border_interpolate.hpp	/^        int height;$/;"	m	struct:cv::cuda::device::BrdColWrap
height	core/cuda/border_interpolate.hpp	/^        int height;$/;"	m	struct:cv::cuda::device::BrdConstant
height	core/cuda/border_interpolate.hpp	/^        int height;$/;"	m	struct:cv::cuda::device::BrdWrap
height	core/types.hpp	/^    _Tp width, height; \/\/ the width and the height$/;"	m	class:cv::Size_
height	core/types.hpp	/^    _Tp x, y, width, height; \/\/< the top-left corner, as well as width and height of the rectangle$/;"	m	class:cv::Rect_
height	core/types_c.h	/^        int height;$/;"	m	union:CvMat::__anon145
height	core/types_c.h	/^    float height;$/;"	m	struct:CvSize2D32f
height	core/types_c.h	/^    int  height;            \/**< Image height in pixels.                          *\/$/;"	m	struct:_IplImage
height	core/types_c.h	/^    int  height;$/;"	m	struct:_IplROI
height	core/types_c.h	/^    int height;$/;"	m	struct:CvRect
height	core/types_c.h	/^    int height;$/;"	m	struct:CvSize
height	cudacodec.hpp	/^    int height;$/;"	m	struct:cv::cudacodec::FormatInfo
height	cudalegacy/NCV.hpp	/^    Ncv32s height;     \/\/\/< Rectangle height.$/;"	m	struct:NcvRect32s
height	cudalegacy/NCV.hpp	/^    Ncv32s height; \/\/\/< Rectangle height.$/;"	m	struct:NcvSize32s
height	cudalegacy/NCV.hpp	/^    Ncv32u height() const {return this->_height;}$/;"	f	class:NCVMatrix
height	cudalegacy/NCV.hpp	/^    Ncv32u height;     \/\/\/< Rectangle height.$/;"	m	struct:NcvRect32u
height	cudalegacy/NCV.hpp	/^    Ncv32u height; \/\/\/< Rectangle height.$/;"	m	struct:NcvSize32u
height	cudalegacy/NCV.hpp	/^    Ncv8u height;$/;"	m	struct:NcvRect8u
hid_cascade	objdetect/objdetect_c.h	/^    CvHidHaarClassifierCascade* hid_cascade;$/;"	m	struct:CvHaarClassifierCascade
hierarchicalClustering	flann.hpp	/^FLANN_DEPRECATED int hierarchicalClustering(const Mat& features, Mat& centers, const ::cvflann::KMeansIndexParams& params)$/;"	f	namespace:cv::flann
hierarchicalClustering	flann.hpp	/^int hierarchicalClustering(const Mat& features, Mat& centers, const ::cvflann::KMeansIndexParams& params,$/;"	f	namespace:cv::flann
hierarchicalClustering	flann/flann_base.hpp	/^int hierarchicalClustering(const Matrix<typename Distance::ElementType>& points, Matrix<typename Distance::ResultType>& centers,$/;"	f	namespace:cvflann
high	flann/kdtree_single_index.h	/^        DistanceType low, high;$/;"	m	struct:cvflann::KDTreeSingleIndex::Interval
high	hal/intrin_cpp.hpp	/^    v_reg<_Tp, n> high() const$/;"	f	struct:cv::v_reg
hist	imgproc/imgproc_c.h	/^CVAPI(void)  cvClearHist( CvHistogram* hist );$/;"	v
hist	imgproc/imgproc_c.h	/^CVAPI(void)  cvReleaseHist( CvHistogram** hist );$/;"	v
histogram	cudev/grid/detail/histogram.hpp	/^    __global__ void histogram(const SrcPtr src, ResType* hist, const MaskPtr mask, const int rows, const int cols)$/;"	f	namespace:cv::cudev::grid_histogram_detail
histogram	cudev/grid/detail/histogram.hpp	/^    __host__ void histogram(const SrcPtr& src, ResType* hist, const MaskPtr& mask, int rows, int cols, cudaStream_t stream)$/;"	f	namespace:cv::cudev::grid_histogram_detail
histogramNormType	objdetect.hpp	/^    CV_PROP int histogramNormType;$/;"	m	struct:cv::HOGDescriptor
histogram_	cudev/expr/reduction.hpp	/^histogram_(const SrcPtr& src)$/;"	f	namespace:cv::cudev
horisontal_pass_8u_shfl	cudev/grid/detail/integral.hpp	/^    __host__ static void horisontal_pass_8u_shfl(const GlobPtr<uchar> src, GlobPtr<uint> integral, int rows, int cols, cudaStream_t stream)$/;"	f	namespace:cv::cudev::integral_detail
horisontal_pass_8u_shfl_kernel	cudev/grid/detail/integral.hpp	/^    __global__ static void horisontal_pass_8u_shfl_kernel(const GlobPtr<uint4> img, GlobPtr<uint4> integral)$/;"	f	namespace:cv::cudev::integral_detail
horizontal_pass	cudev/grid/detail/integral.hpp	/^    __global__ void horizontal_pass(const GlobPtr<T> src, GlobPtr<D> dst, const int cols)$/;"	f	namespace:cv::cudev::integral_detail
horizontal_pass	cudev/grid/detail/integral.hpp	/^    __global__ void horizontal_pass(const SrcPtr src, GlobPtr<D> dst, const int cols)$/;"	f	namespace:cv::cudev::integral_detail
horizontal_pass	cudev/grid/detail/integral.hpp	/^    __host__ void horizontal_pass(const SrcPtr& src, const GlobPtr<D>& dst, int rows, int cols, cudaStream_t stream)$/;"	f	namespace:cv::cudev::integral_detail
hostCopyObsolete	core/mat.inl.hpp	/^inline bool UMatData::hostCopyObsolete() const { return (flags & HOST_COPY_OBSOLETE) != 0; }$/;"	f	class:cv::UMatData
hostPointsPrevTmp_	videostab/global_motion.hpp	/^    std::vector<Point2f> hostPointsPrevTmp_, hostPointsTmp_;$/;"	m	class:cv::videostab::KeypointBasedMotionEstimatorGpu
hostPointsPrev_	videostab/global_motion.hpp	/^    Mat hostPointsPrev_, hostPoints_;$/;"	m	class:cv::videostab::KeypointBasedMotionEstimatorGpu
hostPointsTmp_	videostab/global_motion.hpp	/^    std::vector<Point2f> hostPointsPrevTmp_, hostPointsTmp_;$/;"	m	class:cv::videostab::KeypointBasedMotionEstimatorGpu
hostPoints_	videostab/global_motion.hpp	/^    Mat hostPointsPrev_, hostPoints_;$/;"	m	class:cv::videostab::KeypointBasedMotionEstimatorGpu
hpp	core/ippasync.hpp	/^namespace hpp$/;"	n	namespace:cv
hscale	highgui.hpp	/^    float       hscale, vscale;$/;"	m	struct:cv::QtFont
hscale	imgproc/imgproc_c.h	/^    float       hscale, vscale;$/;"	m	struct:CvFont
hu1	imgproc/types_c.h	/^    double hu1, hu2, hu3, hu4, hu5, hu6, hu7; \/**< Hu invariants *\/$/;"	m	struct:CvHuMoments
hu2	imgproc/types_c.h	/^    double hu1, hu2, hu3, hu4, hu5, hu6, hu7; \/**< Hu invariants *\/$/;"	m	struct:CvHuMoments
hu3	imgproc/types_c.h	/^    double hu1, hu2, hu3, hu4, hu5, hu6, hu7; \/**< Hu invariants *\/$/;"	m	struct:CvHuMoments
hu4	imgproc/types_c.h	/^    double hu1, hu2, hu3, hu4, hu5, hu6, hu7; \/**< Hu invariants *\/$/;"	m	struct:CvHuMoments
hu5	imgproc/types_c.h	/^    double hu1, hu2, hu3, hu4, hu5, hu6, hu7; \/**< Hu invariants *\/$/;"	m	struct:CvHuMoments
hu6	imgproc/types_c.h	/^    double hu1, hu2, hu3, hu4, hu5, hu6, hu7; \/**< Hu invariants *\/$/;"	m	struct:CvHuMoments
hu7	imgproc/types_c.h	/^    double hu1, hu2, hu3, hu4, hu5, hu6, hu7; \/**< Hu invariants *\/$/;"	m	struct:CvHuMoments
hypot_sqr_func	core/cuda/functional.hpp	/^        __host__ __device__ __forceinline__ hypot_sqr_func() {}$/;"	f	struct:cv::cuda::device::hypot_sqr_func
hypot_sqr_func	core/cuda/functional.hpp	/^        __host__ __device__ __forceinline__ hypot_sqr_func(const hypot_sqr_func&) {}$/;"	f	struct:cv::cuda::device::hypot_sqr_func
hypot_sqr_func	core/cuda/functional.hpp	/^    template<typename T> struct hypot_sqr_func : binary_function<T, T, float>$/;"	s	namespace:cv::cuda::device
i	core/types_c.h	/^        int i;    \/**< scalar integer number *\/$/;"	m	union:CvFileNode::__anon149
i	core/types_c.h	/^        int* i;$/;"	m	union:CvMat::__anon144
i	core/types_c.h	/^        int* i;$/;"	m	union:CvMatND::__anon147
i	hal/defs.h	/^    int i;$/;"	m	union:Cv32suf
i	hal/defs.h	/^    int64 i;$/;"	m	union:Cv64suf
icap	videoio.hpp	/^    Ptr<IVideoCapture> icap;$/;"	m	class:cv::VideoCapture
icv	ts/ts_perf.hpp	/^    bool icv;$/;"	m	struct:perf::ImplData
id	core/cuda/block.hpp	/^        static __device__ __forceinline__ unsigned int id()$/;"	f	struct:cv::cuda::device::Block
id	objdetect/detection_based_tracker.hpp	/^            int id;$/;"	m	struct:cv::DetectionBasedTracker::ExtObject
id	objdetect/detection_based_tracker.hpp	/^            int id;$/;"	m	struct:cv::DetectionBasedTracker::TrackedObject
identity	core/cuda/functional.hpp	/^        __host__ __device__ __forceinline__ identity() {}$/;"	f	struct:cv::cuda::device::identity
identity	core/cuda/functional.hpp	/^        __host__ __device__ __forceinline__ identity(const identity&) {}$/;"	f	struct:cv::cuda::device::identity
identity	core/cuda/functional.hpp	/^    template <typename T> struct identity : unary_function<T, T>$/;"	s	namespace:cv::cuda::device
identity	cudev/functional/functional.hpp	/^template <typename T> struct identity : unary_function<T, T>$/;"	s	namespace:cv::cudev
idx	core/mat.hpp	/^        int idx[MAX_DIM];$/;"	m	struct:cv::SparseMat::Node
idx	core/mat.hpp	/^    size_t idx;$/;"	m	class:cv::NAryMatIterator
idx	core/matx.hpp	/^    int idx;$/;"	m	class:cv::MatxCommaInitializer
idx_col	core/cuda/border_interpolate.hpp	/^        __device__ __forceinline__ int idx_col(int x) const$/;"	f	struct:cv::cuda::device::BrdReflect
idx_col	core/cuda/border_interpolate.hpp	/^        __device__ __forceinline__ int idx_col(int x) const$/;"	f	struct:cv::cuda::device::BrdReflect101
idx_col	core/cuda/border_interpolate.hpp	/^        __device__ __forceinline__ int idx_col(int x) const$/;"	f	struct:cv::cuda::device::BrdReplicate
idx_col	core/cuda/border_interpolate.hpp	/^        __device__ __forceinline__ int idx_col(int x) const$/;"	f	struct:cv::cuda::device::BrdRowReflect
idx_col	core/cuda/border_interpolate.hpp	/^        __device__ __forceinline__ int idx_col(int x) const$/;"	f	struct:cv::cuda::device::BrdRowReflect101
idx_col	core/cuda/border_interpolate.hpp	/^        __device__ __forceinline__ int idx_col(int x) const$/;"	f	struct:cv::cuda::device::BrdRowReplicate
idx_col	core/cuda/border_interpolate.hpp	/^        __device__ __forceinline__ int idx_col(int x) const$/;"	f	struct:cv::cuda::device::BrdRowWrap
idx_col	core/cuda/border_interpolate.hpp	/^        __device__ __forceinline__ int idx_col(int x) const$/;"	f	struct:cv::cuda::device::BrdWrap
idx_col	cudev/ptr2d/extrapolation.hpp	/^    __device__ __forceinline__ int idx_col(int x) const$/;"	f	struct:cv::cudev::BrdBase
idx_col_high	core/cuda/border_interpolate.hpp	/^        __device__ __forceinline__ int idx_col_high(int x) const$/;"	f	struct:cv::cuda::device::BrdReflect
idx_col_high	core/cuda/border_interpolate.hpp	/^        __device__ __forceinline__ int idx_col_high(int x) const$/;"	f	struct:cv::cuda::device::BrdReflect101
idx_col_high	core/cuda/border_interpolate.hpp	/^        __device__ __forceinline__ int idx_col_high(int x) const$/;"	f	struct:cv::cuda::device::BrdReplicate
idx_col_high	core/cuda/border_interpolate.hpp	/^        __device__ __forceinline__ int idx_col_high(int x) const$/;"	f	struct:cv::cuda::device::BrdRowReflect
idx_col_high	core/cuda/border_interpolate.hpp	/^        __device__ __forceinline__ int idx_col_high(int x) const$/;"	f	struct:cv::cuda::device::BrdRowReflect101
idx_col_high	core/cuda/border_interpolate.hpp	/^        __device__ __forceinline__ int idx_col_high(int x) const$/;"	f	struct:cv::cuda::device::BrdRowReplicate
idx_col_high	core/cuda/border_interpolate.hpp	/^        __device__ __forceinline__ int idx_col_high(int x) const$/;"	f	struct:cv::cuda::device::BrdRowWrap
idx_col_high	core/cuda/border_interpolate.hpp	/^        __device__ __forceinline__ int idx_col_high(int x) const$/;"	f	struct:cv::cuda::device::BrdWrap
idx_col_low	core/cuda/border_interpolate.hpp	/^        __device__ __forceinline__ int idx_col_low(int x) const$/;"	f	struct:cv::cuda::device::BrdReflect
idx_col_low	core/cuda/border_interpolate.hpp	/^        __device__ __forceinline__ int idx_col_low(int x) const$/;"	f	struct:cv::cuda::device::BrdReflect101
idx_col_low	core/cuda/border_interpolate.hpp	/^        __device__ __forceinline__ int idx_col_low(int x) const$/;"	f	struct:cv::cuda::device::BrdReplicate
idx_col_low	core/cuda/border_interpolate.hpp	/^        __device__ __forceinline__ int idx_col_low(int x) const$/;"	f	struct:cv::cuda::device::BrdRowReflect
idx_col_low	core/cuda/border_interpolate.hpp	/^        __device__ __forceinline__ int idx_col_low(int x) const$/;"	f	struct:cv::cuda::device::BrdRowReflect101
idx_col_low	core/cuda/border_interpolate.hpp	/^        __device__ __forceinline__ int idx_col_low(int x) const$/;"	f	struct:cv::cuda::device::BrdRowReplicate
idx_col_low	core/cuda/border_interpolate.hpp	/^        __device__ __forceinline__ int idx_col_low(int x) const$/;"	f	struct:cv::cuda::device::BrdRowWrap
idx_col_low	core/cuda/border_interpolate.hpp	/^        __device__ __forceinline__ int idx_col_low(int x) const$/;"	f	struct:cv::cuda::device::BrdWrap
idx_high	cudev/ptr2d/extrapolation.hpp	/^    __device__ __forceinline__ static int idx_high(int i, int len)$/;"	f	struct:cv::cudev::BrdReflect
idx_high	cudev/ptr2d/extrapolation.hpp	/^    __device__ __forceinline__ static int idx_high(int i, int len)$/;"	f	struct:cv::cudev::BrdReflect101
idx_high	cudev/ptr2d/extrapolation.hpp	/^    __device__ __forceinline__ static int idx_high(int i, int len)$/;"	f	struct:cv::cudev::BrdReplicate
idx_high	cudev/ptr2d/extrapolation.hpp	/^    __device__ __forceinline__ static int idx_high(int i, int len)$/;"	f	struct:cv::cudev::BrdWrap
idx_low	cudev/ptr2d/extrapolation.hpp	/^    __device__ __forceinline__ static int idx_low(int i, int len)$/;"	f	struct:cv::cudev::BrdReflect
idx_low	cudev/ptr2d/extrapolation.hpp	/^    __device__ __forceinline__ static int idx_low(int i, int len)$/;"	f	struct:cv::cudev::BrdReflect101
idx_low	cudev/ptr2d/extrapolation.hpp	/^    __device__ __forceinline__ static int idx_low(int i, int len)$/;"	f	struct:cv::cudev::BrdReplicate
idx_low	cudev/ptr2d/extrapolation.hpp	/^    __device__ __forceinline__ static int idx_low(int i, int len)$/;"	f	struct:cv::cudev::BrdWrap
idx_row	core/cuda/border_interpolate.hpp	/^        __device__ __forceinline__ int idx_row(int y) const$/;"	f	struct:cv::cuda::device::BrdColReflect
idx_row	core/cuda/border_interpolate.hpp	/^        __device__ __forceinline__ int idx_row(int y) const$/;"	f	struct:cv::cuda::device::BrdColReflect101
idx_row	core/cuda/border_interpolate.hpp	/^        __device__ __forceinline__ int idx_row(int y) const$/;"	f	struct:cv::cuda::device::BrdColReplicate
idx_row	core/cuda/border_interpolate.hpp	/^        __device__ __forceinline__ int idx_row(int y) const$/;"	f	struct:cv::cuda::device::BrdColWrap
idx_row	core/cuda/border_interpolate.hpp	/^        __device__ __forceinline__ int idx_row(int y) const$/;"	f	struct:cv::cuda::device::BrdReflect
idx_row	core/cuda/border_interpolate.hpp	/^        __device__ __forceinline__ int idx_row(int y) const$/;"	f	struct:cv::cuda::device::BrdReflect101
idx_row	core/cuda/border_interpolate.hpp	/^        __device__ __forceinline__ int idx_row(int y) const$/;"	f	struct:cv::cuda::device::BrdReplicate
idx_row	core/cuda/border_interpolate.hpp	/^        __device__ __forceinline__ int idx_row(int y) const$/;"	f	struct:cv::cuda::device::BrdWrap
idx_row	cudev/ptr2d/extrapolation.hpp	/^    __device__ __forceinline__ int idx_row(int y) const$/;"	f	struct:cv::cudev::BrdBase
idx_row_high	core/cuda/border_interpolate.hpp	/^        __device__ __forceinline__ int idx_row_high(int y) const$/;"	f	struct:cv::cuda::device::BrdColReflect
idx_row_high	core/cuda/border_interpolate.hpp	/^        __device__ __forceinline__ int idx_row_high(int y) const$/;"	f	struct:cv::cuda::device::BrdColReflect101
idx_row_high	core/cuda/border_interpolate.hpp	/^        __device__ __forceinline__ int idx_row_high(int y) const$/;"	f	struct:cv::cuda::device::BrdColReplicate
idx_row_high	core/cuda/border_interpolate.hpp	/^        __device__ __forceinline__ int idx_row_high(int y) const$/;"	f	struct:cv::cuda::device::BrdColWrap
idx_row_high	core/cuda/border_interpolate.hpp	/^        __device__ __forceinline__ int idx_row_high(int y) const$/;"	f	struct:cv::cuda::device::BrdReflect
idx_row_high	core/cuda/border_interpolate.hpp	/^        __device__ __forceinline__ int idx_row_high(int y) const$/;"	f	struct:cv::cuda::device::BrdReflect101
idx_row_high	core/cuda/border_interpolate.hpp	/^        __device__ __forceinline__ int idx_row_high(int y) const$/;"	f	struct:cv::cuda::device::BrdReplicate
idx_row_high	core/cuda/border_interpolate.hpp	/^        __device__ __forceinline__ int idx_row_high(int y) const$/;"	f	struct:cv::cuda::device::BrdWrap
idx_row_low	core/cuda/border_interpolate.hpp	/^        __device__ __forceinline__ int idx_row_low(int y) const$/;"	f	struct:cv::cuda::device::BrdColReflect
idx_row_low	core/cuda/border_interpolate.hpp	/^        __device__ __forceinline__ int idx_row_low(int y) const$/;"	f	struct:cv::cuda::device::BrdColReflect101
idx_row_low	core/cuda/border_interpolate.hpp	/^        __device__ __forceinline__ int idx_row_low(int y) const$/;"	f	struct:cv::cuda::device::BrdColReplicate
idx_row_low	core/cuda/border_interpolate.hpp	/^        __device__ __forceinline__ int idx_row_low(int y) const$/;"	f	struct:cv::cuda::device::BrdColWrap
idx_row_low	core/cuda/border_interpolate.hpp	/^        __device__ __forceinline__ int idx_row_low(int y) const$/;"	f	struct:cv::cuda::device::BrdReflect
idx_row_low	core/cuda/border_interpolate.hpp	/^        __device__ __forceinline__ int idx_row_low(int y) const$/;"	f	struct:cv::cuda::device::BrdReflect101
idx_row_low	core/cuda/border_interpolate.hpp	/^        __device__ __forceinline__ int idx_row_low(int y) const$/;"	f	struct:cv::cuda::device::BrdReplicate
idx_row_low	core/cuda/border_interpolate.hpp	/^        __device__ __forceinline__ int idx_row_low(int y) const$/;"	f	struct:cv::cuda::device::BrdWrap
idxoffset	core/types_c.h	/^    int idxoffset;$/;"	m	struct:CvSparseMat
im	core/types.hpp	/^    _Tp re, im; \/\/< the real and the imaginary parts$/;"	m	class:cv::Complex
image	core/core_c.h	/^CVAPI(CvRect) cvGetImageROI( const IplImage* image );$/;"	v
image	core/core_c.h	/^CVAPI(IplImage*) cvCloneImage( const IplImage* image );$/;"	v
image	core/core_c.h	/^CVAPI(int)  cvGetImageCOI( const IplImage* image );$/;"	v
image	core/core_c.h	/^CVAPI(void)  cvReleaseImage( IplImage** image );$/;"	v
image	core/core_c.h	/^CVAPI(void)  cvReleaseImageHeader( IplImage** image );$/;"	v
image	core/core_c.h	/^CVAPI(void)  cvResetImageROI( IplImage* image );$/;"	v
imageData	core/types_c.h	/^    char *imageData;        \/**< Pointer to aligned image data.         *\/$/;"	m	struct:_IplImage
imageDataOrigin	core/types_c.h	/^    char *imageDataOrigin;  \/**< Pointer to very origin of image data$/;"	m	struct:_IplImage
imageHeight	videoio/cap_ios.h	/^@property (nonatomic, assign) int imageHeight;$/;"	v
imageId	core/types_c.h	/^    void  *imageId;                 \/**< "           " *\/$/;"	m	struct:_IplImage
imageSize	core/types_c.h	/^    int  imageSize;         \/**< Image data size in bytes$/;"	m	struct:_IplImage
imageWidth	videoio/cap_ios.h	/^@property (nonatomic, assign) int imageWidth;$/;"	v
image_	core/wimage.hpp	/^    IplImage* image_;$/;"	m	class:cv::WImage
image_	stitching/detail/matchers.hpp	/^    cuda::GpuMat image_;$/;"	m	class:cv::detail::SurfFeaturesFinderGpu
images_	stitching/detail/seam_finders.hpp	/^    std::vector<UMat> images_;$/;"	m	class:cv::detail::PairwiseSeamFinder
imgIdx	core/types.hpp	/^    CV_PROP_RW int imgIdx;   \/\/ train image index$/;"	m	class:cv::DMatch
img_idx	stitching/detail/matchers.hpp	/^    int img_idx;$/;"	m	struct:cv::detail::ImageFeatures
img_size	stitching/detail/matchers.hpp	/^    Size img_size;$/;"	m	struct:cv::detail::ImageFeatures
imgs_	stitching.hpp	/^    std::vector<cv::UMat> imgs_;$/;"	m	class:cv::Stitcher
impl	core/utility.hpp	/^    Impl* impl;$/;"	m	class:cv::CommandLineParser
impl	core/utility.hpp	/^    Impl* impl;$/;"	m	class:cv::Mutex
impl	ts/ts_gtest.h	/^  const internal::UnitTestImpl* impl() const { return impl_; }$/;"	f	class:testing::UnitTest
impl	ts/ts_gtest.h	/^  internal::UnitTestImpl* impl() { return impl_; }$/;"	f	class:testing::UnitTest
impl	videostab/frame_source.hpp	/^    Ptr<IFrameSource> impl;$/;"	m	class:cv::videostab::VideoFileSource
implCode	ts/ts_perf.hpp	/^    std::vector<int> implCode;$/;"	m	struct:perf::ImplData
implConf	ts/ts_perf.hpp	/^    ImplData implConf;$/;"	m	class:perf::TestBase
impl_	core/cuda.hpp	/^    Ptr<Impl> impl_;$/;"	m	class:cv::cuda::Event
impl_	core/cuda.hpp	/^    Ptr<Impl> impl_;$/;"	m	class:cv::cuda::Stream
impl_	core/opengl.hpp	/^    Ptr<Impl> impl_;$/;"	m	class:cv::ogl::Buffer
impl_	core/opengl.hpp	/^    Ptr<Impl> impl_;$/;"	m	class:cv::ogl::Texture2D
impl_	stitching/detail/matchers.hpp	/^    Ptr<FeaturesMatcher> impl_;$/;"	m	class:cv::detail::BestOf2NearestMatcher
impl_	stitching/detail/seam_finders.hpp	/^    Ptr<PairwiseSeamFinder> impl_;$/;"	m	class:cv::detail::GraphCutSeamFinder
impl_	ts/ts_gtest.h	/^  internal::UnitTestImpl* impl_;$/;"	m	class:testing::UnitTest
impl_	ts/ts_gtest.h	/^  linked_ptr<const ParamGeneratorInterface<T> > impl_;$/;"	m	class:testing::internal::ParamGenerator
impl_	ts/ts_gtest.h	/^  scoped_ptr<ParamIteratorInterface<T> > impl_;$/;"	m	class:testing::internal::ParamIterator
impl_	viz/viz3d.hpp	/^            VizImpl* impl_;$/;"	m	class:cv::viz::Viz3d
impl_	viz/widgets.hpp	/^            Impl *impl_;$/;"	m	class:cv::viz::Widget
incRef	core/ptr.inl.hpp	/^    void incRef()$/;"	f	struct:cv::detail::PtrOwner
increment_death_test_count	ts/ts_gtest.h	/^  int increment_death_test_count() { return ++death_test_count_; }$/;"	f	class:testing::TestResult
increment_death_test_count	ts/ts_gtest.h	/^  int increment_death_test_count() {$/;"	f	class:testing::TestInfo
index	core/core_c.h	/^    int      index;        \/* the lower bound of certainly visited vertices *\/$/;"	m	struct:CvGraphScanner
index	core/core_c.h	/^    int index;$/;"	m	class:cv::SeqIterator
index	core/core_c.h	/^template<typename _Tp> inline size_t Seq<_Tp>::index(const _Tp& elem) const$/;"	f	class:cv::Seq
index	core/cuda/scan.hpp	/^        __device__ __forceinline__ unsigned int index(const unsigned int tid)$/;"	f	struct:cv::cuda::device::WarpScan
index	core/cuda/scan.hpp	/^        __device__ __forceinline__ unsigned int index(const unsigned int tid)$/;"	f	struct:cv::cuda::device::WarpScanNoComp
index	flann/miniflann.hpp	/^    void* index;$/;"	m	class:cv::flann::Index
index	ts/ts_gtest.h	/^  int index() const { return index_; }$/;"	f	class:testing::internal::InternalRunDeathTestFlag
indexOf	videostab/fast_marching.hpp	/^    int& indexOf(const DXY &dxy) { return index_(dxy.y, dxy.x); }$/;"	f	class:cv::videostab::FastMarchingMethod
indexParams	features2d.hpp	/^    Ptr<flann::IndexParams> indexParams;$/;"	m	class:cv::FlannBasedMatcher
index_	flann/result_set.h	/^        unsigned int index_;$/;"	m	struct:cvflann::UniqueResultSet::DistIndex
index_	ts/ts_gtest.h	/^    int index_;$/;"	m	class:testing::internal::RangeGenerator::Iterator
index_	ts/ts_gtest.h	/^  int index_;$/;"	m	class:testing::internal::InternalRunDeathTestFlag
index_	videostab/fast_marching.hpp	/^    cv::Mat_<int> index_; \/\/ index of point in the narrow band$/;"	m	class:cv::videostab::FastMarchingMethod
index_creator	flann/all_indices.h	/^struct index_creator$/;"	s	namespace:cvflann
index_creator	flann/all_indices.h	/^struct index_creator<False,False,Distance>$/;"	s	namespace:cvflann
index_creator	flann/all_indices.h	/^struct index_creator<False,VectorSpace,Distance>$/;"	s	namespace:cvflann
index_params_	flann/composite_index.h	/^    const IndexParams index_params_;$/;"	m	class:cvflann::CompositeIndex
index_params_	flann/flann_base.hpp	/^    IndexParams index_params_;$/;"	m	class:cvflann::Index
index_params_	flann/kdtree_index.h	/^    IndexParams index_params_;$/;"	m	class:cvflann::KDTreeIndex
index_params_	flann/kdtree_single_index.h	/^    IndexParams index_params_;$/;"	m	class:cvflann::KDTreeSingleIndex
index_params_	flann/kmeans_index.h	/^    IndexParams index_params_;$/;"	m	class:cvflann::KMeansIndex
index_params_	flann/linear_index.h	/^    IndexParams index_params_;$/;"	m	class:cvflann::LinearIndex
index_params_	flann/lsh_index.h	/^    IndexParams index_params_;$/;"	m	class:cvflann::LshIndex
index_type	core/cuda/border_interpolate.hpp	/^        typedef typename Ptr2D::index_type index_type;$/;"	t	struct:cv::cuda::device::BorderReader
index_type	core/cuda/filters.hpp	/^        typedef float index_type;$/;"	t	struct:cv::cuda::device::AreaFilter
index_type	core/cuda/filters.hpp	/^        typedef float index_type;$/;"	t	struct:cv::cuda::device::CubicFilter
index_type	core/cuda/filters.hpp	/^        typedef float index_type;$/;"	t	struct:cv::cuda::device::IntegerAreaFilter
index_type	core/cuda/filters.hpp	/^        typedef float index_type;$/;"	t	struct:cv::cuda::device::LinearFilter
index_type	core/cuda/filters.hpp	/^        typedef float index_type;$/;"	t	struct:cv::cuda::device::PointFilter
index_type	core/cuda_types.hpp	/^            typedef int index_type;$/;"	t	struct:cv::cuda::DevPtr
index_type	cudev/ptr2d/constant.hpp	/^    typedef int index_type;$/;"	t	struct:cv::cudev::ConstantPtr
index_type	cudev/ptr2d/deriv.hpp	/^    typedef int                                    index_type;$/;"	t	struct:cv::cudev::DerivXPtr
index_type	cudev/ptr2d/deriv.hpp	/^    typedef int                                    index_type;$/;"	t	struct:cv::cudev::DerivYPtr
index_type	cudev/ptr2d/deriv.hpp	/^    typedef int                                    index_type;$/;"	t	struct:cv::cudev::LaplacianPtr
index_type	cudev/ptr2d/deriv.hpp	/^    typedef int                                    index_type;$/;"	t	struct:cv::cudev::ScharrXPtr
index_type	cudev/ptr2d/deriv.hpp	/^    typedef int                                    index_type;$/;"	t	struct:cv::cudev::ScharrYPtr
index_type	cudev/ptr2d/deriv.hpp	/^    typedef int                                    index_type;$/;"	t	struct:cv::cudev::SobelXPtr
index_type	cudev/ptr2d/deriv.hpp	/^    typedef int                                    index_type;$/;"	t	struct:cv::cudev::SobelYPtr
index_type	cudev/ptr2d/extrapolation.hpp	/^    typedef int                                    index_type;$/;"	t	struct:cv::cudev::BrdBase
index_type	cudev/ptr2d/extrapolation.hpp	/^    typedef int                                    index_type;$/;"	t	struct:cv::cudev::BrdConstant
index_type	cudev/ptr2d/glob.hpp	/^    typedef int index_type;$/;"	t	struct:cv::cudev::GlobPtr
index_type	cudev/ptr2d/interpolation.hpp	/^    typedef float                                  index_type;$/;"	t	struct:cv::cudev::CommonAreaInterPtr
index_type	cudev/ptr2d/interpolation.hpp	/^    typedef float                                  index_type;$/;"	t	struct:cv::cudev::CubicInterPtr
index_type	cudev/ptr2d/interpolation.hpp	/^    typedef float                                  index_type;$/;"	t	struct:cv::cudev::IntegerAreaInterPtr
index_type	cudev/ptr2d/interpolation.hpp	/^    typedef float                                  index_type;$/;"	t	struct:cv::cudev::LinearInterPtr
index_type	cudev/ptr2d/interpolation.hpp	/^    typedef float                                  index_type;$/;"	t	struct:cv::cudev::NearestInterPtr
index_type	cudev/ptr2d/lut.hpp	/^    typedef typename PtrTraits<SrcPtr>::index_type   index_type;$/;"	t	struct:cv::cudev::LutPtr
index_type	cudev/ptr2d/mask.hpp	/^    typedef int  index_type;$/;"	t	struct:cv::cudev::WithOutMask
index_type	cudev/ptr2d/mask.hpp	/^    typedef typename PtrTraits<MaskPtr>::index_type index_type;$/;"	t	struct:cv::cudev::SingleMaskChannels
index_type	cudev/ptr2d/remap.hpp	/^    typedef typename PtrTraits<MapPtr>::index_type index_type;$/;"	t	struct:cv::cudev::RemapPtr1
index_type	cudev/ptr2d/remap.hpp	/^    typedef typename PtrTraits<MapXPtr>::index_type index_type;$/;"	t	struct:cv::cudev::RemapPtr2
index_type	cudev/ptr2d/resize.hpp	/^    typedef typename PtrTraits<SrcPtr>::index_type index_type;$/;"	t	struct:cv::cudev::ResizePtr
index_type	cudev/ptr2d/texture.hpp	/^    typedef float index_type;$/;"	t	struct:cv::cudev::TexturePtr
index_type	cudev/ptr2d/traits.hpp	/^    typedef typename Ptr2D::index_type index_type;$/;"	t	struct:cv::cudev::PtrTraitsBase
index_type	cudev/ptr2d/transform.hpp	/^    typedef typename PtrTraits<Src1Ptr>::index_type index_type;$/;"	t	struct:cv::cudev::BinaryTransformPtr
index_type	cudev/ptr2d/transform.hpp	/^    typedef typename PtrTraits<SrcPtr>::index_type index_type;$/;"	t	struct:cv::cudev::UnaryTransformPtr
index_type	cudev/ptr2d/warping.hpp	/^    typedef float  index_type;$/;"	t	struct:cv::cudev::AffineMapPtr
index_type	cudev/ptr2d/warping.hpp	/^    typedef float  index_type;$/;"	t	struct:cv::cudev::PerspectiveMapPtr
index_type	cudev/ptr2d/zip.hpp	/^    typedef typename PtrTraits<Ptr0>::index_type        index_type;$/;"	t	struct:cv::cudev::ZipPtr
index_type	flann/saving.h	/^    flann_algorithm_t index_type;$/;"	m	struct:cvflann::IndexHeader
indices	flann/hierarchical_clustering_index.h	/^        int* indices;$/;"	m	struct:cvflann::HierarchicalClusteringIndex::Node
indices	flann/hierarchical_clustering_index.h	/^    int** indices;$/;"	m	class:cvflann::HierarchicalClusteringIndex
indices	flann/kmeans_index.h	/^        const int* indices;$/;"	m	class:cvflann::KMeansIndex::KMeansDistanceComputer
indices	flann/kmeans_index.h	/^        int* indices;$/;"	m	struct:cvflann::KMeansIndex::KMeansNode
indices	flann/result_set.h	/^    int* indices;$/;"	m	class:cvflann::KNNResultSet
indices	flann/result_set.h	/^    int* indices;$/;"	m	class:cvflann::KNNSimpleResultSet
indices	flann/result_set.h	/^    int* indices;$/;"	m	class:cvflann::RadiusResultSet
indices_	flann/kmeans_index.h	/^    int* indices_;$/;"	m	class:cvflann::KMeansIndex
indices_	stitching.hpp	/^    std::vector<int> indices_;$/;"	m	class:cv::Stitcher
indigo	viz/types.hpp	/^inline cv::viz::Color cv::viz::Color::indigo()     { return Color(130,   0,  75); }$/;"	f	class:cv::viz::Color
inf_	videostab/fast_marching.hpp	/^    float inf_;$/;"	m	class:cv::videostab::FastMarchingMethod
info	core/core_c.h	/^    CvTypeInfo* info;$/;"	m	struct:CvType
info	core/core_c.h	/^CVAPI(void) cvRegisterType( const CvTypeInfo* info );$/;"	v
info	core/types_c.h	/^    struct CvTypeInfo* info; \/**< type information$/;"	m	struct:CvFileNode	typeref:struct:CvFileNode::CvTypeInfo
init	core/cuda/scan.hpp	/^        __device__ __forceinline__ void init(volatile T *ptr)$/;"	f	struct:cv::cuda::device::WarpScanNoComp
init	core/cuda/scan.hpp	/^        __device__ __forceinline__ void init(volatile T *ptr){}$/;"	f	struct:cv::cuda::device::WarpScan
init	core/mat.inl.hpp	/^inline void _InputArray::init(int _flags, const void* _obj)$/;"	f	class:cv::_InputArray
init	core/mat.inl.hpp	/^inline void _InputArray::init(int _flags, const void* _obj, Size _sz)$/;"	f	class:cv::_InputArray
init	flann/random.h	/^    void init(int n)$/;"	f	class:cvflann::UniqueRandom
init	flann/result_set.h	/^    void init()$/;"	f	class:cvflann::RadiusResultSet
init	flann/result_set.h	/^    void init(int* indices_, DistanceType* dists_)$/;"	f	class:cvflann::KNNResultSet
init	flann/result_set.h	/^    void init(int* indices_, DistanceType* dists_)$/;"	f	class:cvflann::KNNSimpleResultSet
initial	cudev/grid/detail/reduce.hpp	/^        __device__ __forceinline__ static T initial()$/;"	f	struct:cv::cudev::grid_reduce_detail::maxop
initial	cudev/grid/detail/reduce.hpp	/^        __device__ __forceinline__ static T initial()$/;"	f	struct:cv::cudev::grid_reduce_detail::minop
initialValue	cudev/grid/reduce_to_vec.hpp	/^    __device__ __forceinline__ static T initialValue()$/;"	f	struct:cv::cudev::Avg
initialValue	cudev/grid/reduce_to_vec.hpp	/^    __device__ __forceinline__ static T initialValue()$/;"	f	struct:cv::cudev::Max
initialValue	cudev/grid/reduce_to_vec.hpp	/^    __device__ __forceinline__ static T initialValue()$/;"	f	struct:cv::cudev::Min
initialValue	cudev/grid/reduce_to_vec.hpp	/^    __device__ __forceinline__ static T initialValue()$/;"	f	struct:cv::cudev::Sum
initialize	flann/lsh_table.h	/^    void initialize(size_t key_size)$/;"	f	class:cvflann::lsh::LshTable
initializeMask	objdetect.hpp	/^        virtual void initializeMask(const Mat& \/*src*\/) { }$/;"	f	class:cv::BaseCascadeClassifier::MaskGenerator
inliers_mask	stitching/detail/matchers.hpp	/^    std::vector<uchar> inliers_mask;    \/\/!< Geometrically consistent matches mask$/;"	m	struct:cv::detail::MatchesInfo
innerParameters	objdetect/detection_based_tracker.hpp	/^        InnerParameters innerParameters;$/;"	m	class:cv::DetectionBasedTracker
inpaint	videostab/inpainting.hpp	/^    virtual void inpaint(int \/*idx*\/, Mat &\/*frame*\/, Mat &\/*mask*\/) {}$/;"	f	class:cv::videostab::NullInpainter
inpainter	videostab/stabilizer.hpp	/^    Ptr<InpainterBase> inpainter() const { return inpainter_; }$/;"	f	class:cv::videostab::StabilizerBase
inpainter_	videostab/stabilizer.hpp	/^    Ptr<InpainterBase> inpainter_;$/;"	m	class:cv::videostab::StabilizerBase
inpainters_	videostab/inpainting.hpp	/^    std::vector<Ptr<InpainterBase> > inpainters_;$/;"	m	class:cv::videostab::InpaintingPipeline
inpaintingMask_	videostab/stabilizer.hpp	/^    Mat inpaintingMask_;$/;"	m	class:cv::videostab::StabilizerBase
inputData	ts/ts_perf.hpp	/^    SizeVector inputData;$/;"	m	class:perf::TestBase
insert	core/core_c.h	/^template<typename _Tp> inline void Seq<_Tp>::insert(int idx, const _Tp& elem)$/;"	f	class:cv::Seq
insert	core/core_c.h	/^template<typename _Tp> inline void Seq<_Tp>::insert(int idx, const _Tp* elems, size_t count)$/;"	f	class:cv::Seq
insert	flann/heap.h	/^    void insert(T value)$/;"	f	class:cvflann::Heap
inside	core/types.hpp	/^Point_<_Tp>::inside( const Rect_<_Tp>& r ) const$/;"	f	class:cv::Point_
instance	flann/logger.h	/^    static Logger& instance()$/;"	f	class:cvflann::Logger
instance	flann/object_factory.h	/^    static ThisClass& instance()$/;"	f	class:cvflann::ObjectFactory
instantiations_	ts/ts_gtest.h	/^  InstantiationContainer instantiations_;$/;"	m	class:testing::internal::ParameterizedTestCaseInfo
int64	hal/defs.h	/^   typedef __int64 int64;$/;"	t
int64	hal/defs.h	/^   typedef int64_t int64;$/;"	t
int_to_uchar4	cudev/grid/detail/integral.hpp	/^    __device__ static uchar4 int_to_uchar4(unsigned int in)$/;"	f	namespace:cv::cudev::integral_detail
int_type	hal/intrin.hpp	/^    typedef _Tp int_type;$/;"	t	struct:cv::V_TypeTraits
int_type	hal/intrin.hpp	/^    typedef int int_type;$/;"	t	struct:cv::V_TypeTraits
int_type	hal/intrin.hpp	/^    typedef int64 int_type;$/;"	t	struct:cv::V_TypeTraits
int_type	hal/intrin.hpp	/^    typedef schar int_type;$/;"	t	struct:cv::V_TypeTraits
int_type	hal/intrin.hpp	/^    typedef short int_type;$/;"	t	struct:cv::V_TypeTraits
int_vec	hal/intrin_cpp.hpp	/^    typedef v_reg<typename V_TypeTraits<_Tp>::int_type, n> int_vec;$/;"	t	struct:cv::v_reg
integral	cudev/grid/detail/integral.hpp	/^    __host__ __forceinline__ void integral(const GlobPtr<uchar>& src, const GlobPtr<int>& dst, int rows, int cols, cudaStream_t stream)$/;"	f	namespace:cv::cudev::integral_detail
integral	cudev/grid/detail/integral.hpp	/^    __host__ static void integral(const GlobPtr<uchar>& src, const GlobPtr<uint>& dst, int rows, int cols, cudaStream_t stream)$/;"	f	namespace:cv::cudev::integral_detail
integral	cudev/grid/detail/integral.hpp	/^    __host__ void integral(const SrcPtr& src, const GlobPtr<D>& dst, int rows, int cols, cudaStream_t stream)$/;"	f	namespace:cv::cudev::integral_detail
integral_	cudev/expr/reduction.hpp	/^integral_(const SrcPtr& src)$/;"	f	namespace:cv::cudev
integral_detail	cudev/grid/detail/integral.hpp	/^namespace integral_detail$/;"	n	namespace:cv::cudev
interArea	cudev/ptr2d/interpolation.hpp	/^__host__ CommonAreaInterPtrSz<typename PtrTraits<SrcPtr>::ptr_type> interArea(const SrcPtr& src, Size2f areaSize)$/;"	f	namespace:cv::cudev
interArea	cudev/ptr2d/interpolation.hpp	/^__host__ IntegerAreaInterPtrSz<typename PtrTraits<SrcPtr>::ptr_type> interArea(const SrcPtr& src, Size areaSize)$/;"	f	namespace:cv::cudev
interCubic	cudev/ptr2d/interpolation.hpp	/^__host__ CubicInterPtrSz<typename PtrTraits<SrcPtr>::ptr_type> interCubic(const SrcPtr& src)$/;"	f	namespace:cv::cudev
interLinear	cudev/ptr2d/interpolation.hpp	/^__host__ LinearInterPtrSz<typename PtrTraits<SrcPtr>::ptr_type> interLinear(const SrcPtr& src)$/;"	f	namespace:cv::cudev
interNearest	cudev/ptr2d/interpolation.hpp	/^__host__ NearestInterPtrSz<typename PtrTraits<SrcPtr>::ptr_type> interNearest(const SrcPtr& src)$/;"	f	namespace:cv::cudev
internal	core/matx.hpp	/^namespace internal$/;"	n	namespace:cv
internal	core/ocl.hpp	/^namespace internal {$/;"	n	namespace:cv::ocl
internal	core/operations.hpp	/^namespace internal$/;"	n	namespace:cv
internal	core/persistence.hpp	/^namespace internal$/;"	n	namespace:cv
internal	ts/ts_gtest.h	/^namespace internal {$/;"	n	namespace:testing
internal2	ts/ts_gtest.h	/^namespace internal2 {$/;"	n	namespace:testing
inv	core/affine.hpp	/^cv::Affine3<T> cv::Affine3<T>::inv(int method) const$/;"	f	class:cv::Affine3
inv	core/operations.hpp	/^Matx<_Tp, n, m> Matx<_Tp, m, n>::inv(int method, bool *p_is_ok \/*= NULL*\/) const$/;"	f	class:cv::Matx
invMask_	videostab/inpainting.hpp	/^    Mat invMask_;$/;"	m	class:cv::videostab::ColorInpainter
inv_sqrt_m00	imgproc/types_c.h	/^    double  inv_sqrt_m00; \/**< m00 != 0 ? 1\/sqrt(m00) : 0 *\/$/;"	m	struct:CvMoments
inversed	ml.hpp	/^        bool inversed; \/\/!< If true, then the inverse split rule is used (i.e. left and right$/;"	m	class:cv::ml::DTrees::Split
iplimage_allowed	ts.hpp	/^    bool iplimage_allowed;$/;"	m	class:cvtest::ArrayTest
ipp	core/base.hpp	/^namespace ipp$/;"	n	namespace:cv
ipp	ts/ts_perf.hpp	/^    bool ipp;$/;"	m	struct:perf::ImplData
ipp_mt	ts/ts_perf.hpp	/^    bool ipp_mt;$/;"	m	struct:perf::ImplData
ippiGetBorderType	core/private.hpp	/^static inline IppiBorderType ippiGetBorderType(int borderTypeNI)$/;"	f
ippiGetDataType	core/private.hpp	/^static inline IppDataType ippiGetDataType(int depth)$/;"	f
ippiSize	core/private.hpp	/^static inline IppiSize ippiSize(const cv::Size & _size)$/;"	f
ippiSize	core/private.hpp	/^static inline IppiSize ippiSize(int width, int height)$/;"	f
isAMD	core/ocl.hpp	/^    inline bool isAMD() const { return vendorID() == VENDOR_AMD; }$/;"	f	class:cv::ocl::Device
isAligned	core/cuda/common.hpp	/^    static inline bool isAligned(size_t step, size_t size)$/;"	f	namespace:cv::cuda
isAligned	core/cuda/common.hpp	/^    template <typename T> static inline bool isAligned(const T* ptr, size_t size)$/;"	f	namespace:cv::cuda
isAligned	cudev/grid/detail/transform.hpp	/^        __host__ static bool isAligned(const T* ptr, size_t size)$/;"	f	struct:cv::cudev::grid_transform_detail::TransformDispatcher
isAligned	cudev/grid/detail/transform.hpp	/^        __host__ static bool isAligned(size_t step, size_t size)$/;"	f	struct:cv::cudev::grid_transform_detail::TransformDispatcher
isArith	core/cuda/type_traits.hpp	/^        enum { isArith          = isIntegral || isFloat };$/;"	e	enum:cv::cuda::device::TypeTraits::__anon280
isConst	core/cuda/type_traits.hpp	/^        enum { isConst          = type_traits_detail::UnConst<T>::value };$/;"	e	enum:cv::cuda::device::TypeTraits::__anon272
isContinuous	core/cuda.inl.hpp	/^bool GpuMat::isContinuous() const$/;"	f	class:cv::cuda::GpuMat
isContinuous	core/cuda.inl.hpp	/^bool HostMem::isContinuous() const$/;"	f	class:cv::cuda::HostMem
isContinuous	core/mat.inl.hpp	/^bool Mat::isContinuous() const$/;"	f	class:cv::Mat
isContinuous	core/mat.inl.hpp	/^bool UMat::isContinuous() const$/;"	f	class:cv::UMat
isFloat	core/cuda/type_traits.hpp	/^        enum { isFloat          = type_traits_detail::IsFloat<UnqualifiedType>::value };$/;"	e	enum:cv::cuda::device::TypeTraits::__anon279
isInt	core/persistence.hpp	/^inline bool FileNode::isInt() const    { return type() == INT;  }$/;"	f	class:cv::FileNode
isIntegral	core/cuda/type_traits.hpp	/^        enum { isIntegral       = type_traits_detail::IsIntegral<UnqualifiedType>::value };$/;"	e	enum:cv::cuda::device::TypeTraits::__anon278
isIntel	core/ocl.hpp	/^    inline bool isIntel() const { return vendorID() == VENDOR_INTEL; }$/;"	f	class:cv::ocl::Device
isLeftNodeLeaf	cudalegacy/NCVHaarObjectDetection.hpp	/^    __device__ __host__ NcvBool isLeftNodeLeaf(void)$/;"	f	struct:HaarFeatureDescriptor32
isMap	core/persistence.hpp	/^inline bool FileNode::isMap() const    { return type() == MAP;  }$/;"	f	class:cv::FileNode
isMaskSupported	features2d.hpp	/^    virtual bool isMaskSupported() const { return true; }$/;"	f	class:cv::BFMatcher
isMat	core/mat.inl.hpp	/^inline bool _InputArray::isMat() const { return kind() == _InputArray::MAT; }$/;"	f	class:cv::_InputArray
isMatVector	core/mat.inl.hpp	/^inline bool _InputArray::isMatVector() const { return kind() == _InputArray::STD_VECTOR_MAT; }$/;"	f	class:cv::_InputArray
isMatx	core/mat.inl.hpp	/^inline bool _InputArray::isMatx() const { return kind() == _InputArray::MATX; }$/;"	f	class:cv::_InputArray
isMemAllocated	cudalegacy/NCV.hpp	/^    NcvBool isMemAllocated() const$/;"	f	class:NCVMatrixAlloc
isMemAllocated	cudalegacy/NCV.hpp	/^    NcvBool isMemAllocated() const$/;"	f	class:NCVVectorAlloc
isMemReused	cudalegacy/NCV.hpp	/^    NcvBool isMemReused() const$/;"	f	class:NCVMatrixReuse
isMemReused	cudalegacy/NCV.hpp	/^    NcvBool isMemReused() const$/;"	f	class:NCVVectorReuse
isNVidia	core/ocl.hpp	/^    inline bool isNVidia() const { return vendorID() == VENDOR_NVIDIA; }$/;"	f	class:cv::ocl::Device
isNan	viz/vizcore.hpp	/^        inline bool isNan(double x)$/;"	f	namespace:cv::viz
isNan	viz/vizcore.hpp	/^        inline bool isNan(float x)$/;"	f	namespace:cv::viz
isNan	viz/vizcore.hpp	/^        template<typename _Tp, int cn> inline bool isNan(const Vec<_Tp, cn>& v)$/;"	f	namespace:cv::viz
isNan	viz/vizcore.hpp	/^        template<typename _Tp> inline bool isNan(const Point3_<_Tp>& p)$/;"	f	namespace:cv::viz
isNoSVMSupport	core/opencl/opencl_svm.hpp	/^    inline bool isNoSVMSupport() const { return value_ == 0; }$/;"	f	struct:cv::ocl::svm::SVMCapabilities
isNone	core/persistence.hpp	/^inline bool FileNode::isNone() const   { return type() == NONE; }$/;"	f	class:cv::FileNode
isPointer	core/cuda/type_traits.hpp	/^        enum { isPointer        = type_traits_detail::PointerTraits<typename type_traits_detail::ReferenceTraits<UnqualifiedType>::type>::value };$/;"	e	enum:cv::cuda::device::TypeTraits::__anon275
isPrePassDone_	videostab/stabilizer.hpp	/^    bool isPrePassDone_;$/;"	m	class:cv::videostab::TwoPassStabilizer
isReal	core/persistence.hpp	/^inline bool FileNode::isReal() const   { return type() == REAL; }$/;"	f	class:cv::FileNode
isReal	core/types.hpp	/^bool Scalar_<_Tp>::isReal() const$/;"	f	class:cv::Scalar_
isReference	core/cuda/type_traits.hpp	/^        enum { isReference      = type_traits_detail::ReferenceTraits<UnqualifiedType>::value };$/;"	e	enum:cv::cuda::device::TypeTraits::__anon274
isRightNodeLeaf	cudalegacy/NCVHaarObjectDetection.hpp	/^    __device__ __host__ NcvBool isRightNodeLeaf(void)$/;"	f	struct:HaarFeatureDescriptor32
isSeq	core/persistence.hpp	/^inline bool FileNode::isSeq() const    { return type() == SEQ;  }$/;"	f	class:cv::FileNode
isSignedInt	core/cuda/type_traits.hpp	/^        enum { isSignedInt      = type_traits_detail::IsSignedIntergral<UnqualifiedType>::value };$/;"	e	enum:cv::cuda::device::TypeTraits::__anon277
isString	core/persistence.hpp	/^inline bool FileNode::isString() const { return type() == STR;  }$/;"	f	class:cv::FileNode
isSubmatrix	core/mat.inl.hpp	/^bool Mat::isSubmatrix() const$/;"	f	class:cv::Mat
isSubmatrix	core/mat.inl.hpp	/^bool UMat::isSubmatrix() const$/;"	f	class:cv::UMat
isSupportAtomics	core/opencl/opencl_svm.hpp	/^    inline bool isSupportAtomics() const { return (value_ & SVM_ATOMICS) != 0; }$/;"	f	struct:cv::ocl::svm::SVMCapabilities
isSupportCoarseGrainBuffer	core/opencl/opencl_svm.hpp	/^    inline bool isSupportCoarseGrainBuffer() const { return (value_ & SVM_COARSE_GRAIN_BUFFER) != 0; }$/;"	f	struct:cv::ocl::svm::SVMCapabilities
isSupportFineGrainBuffer	core/opencl/opencl_svm.hpp	/^    inline bool isSupportFineGrainBuffer() const { return (value_ & SVM_FINE_GRAIN_BUFFER) != 0; }$/;"	f	struct:cv::ocl::svm::SVMCapabilities
isSupportFineGrainSystem	core/opencl/opencl_svm.hpp	/^    inline bool isSupportFineGrainSystem() const { return (value_ & SVM_FINE_GRAIN_SYSTEM) != 0; }$/;"	f	struct:cv::ocl::svm::SVMCapabilities
isThreadSafe	stitching/detail/matchers.hpp	/^    bool isThreadSafe() const { return is_thread_safe_; }$/;"	f	class:cv::detail::FeaturesMatcher
isTilted	cudalegacy/NCVHaarObjectDetection.hpp	/^    __device__ __host__ NcvBool isTilted(void)$/;"	f	struct:HaarFeatureDescriptor32
isUMat	core/mat.inl.hpp	/^inline bool _InputArray::isUMat() const  { return kind() == _InputArray::UMAT; }$/;"	f	class:cv::_InputArray
isUMatVector	core/mat.inl.hpp	/^inline bool _InputArray::isUMatVector() const  { return kind() == _InputArray::STD_VECTOR_UMAT; }$/;"	f	class:cv::_InputArray
isUmat_	superres.hpp	/^            bool isUmat_;$/;"	m	class:cv::superres::SuperResolution
isUnsignedInt	core/cuda/type_traits.hpp	/^        enum { isUnsignedInt    = type_traits_detail::IsUnsignedIntegral<UnqualifiedType>::value };$/;"	e	enum:cv::cuda::device::TypeTraits::__anon276
isValid	core/opencl/opencl_svm.hpp	/^    inline bool isValid() const$/;"	f	struct:cv::ocl::svm::SVMFunctions
isVec	core/cuda/type_traits.hpp	/^        enum { isVec            = type_traits_detail::IsVec<UnqualifiedType>::value };$/;"	e	enum:cv::cuda::device::TypeTraits::__anon281
isVolatile	core/cuda/type_traits.hpp	/^        enum { isVolatile       = type_traits_detail::UnVolatile<T>::value };$/;"	e	enum:cv::cuda::device::TypeTraits::__anon273
is_const	cudev/util/type_traits.hpp	/^    enum { is_const          = type_traits_detail::UnConst<T>::value };$/;"	e	enum:cv::cudev::TypeTraits::__anon374
is_disabled_	ts/ts_gtest.h	/^  bool is_disabled_;                \/\/ True iff this test is disabled$/;"	m	class:testing::TestInfo
is_float	cudev/util/type_traits.hpp	/^    enum { is_float          = type_traits_detail::IsFloat<unqualified_type>::value };$/;"	e	enum:cv::cudev::TypeTraits::__anon381
is_focals_estimated_	stitching/detail/motion_estimators.hpp	/^    bool is_focals_estimated_;$/;"	m	class:cv::detail::HomographyBasedEstimator
is_full_	flann/result_set.h	/^    bool is_full_;$/;"	m	class:cvflann::UniqueResultSet
is_instance	core/types_c.h	/^    CvIsInstanceFunc is_instance; \/**< checks if the passed object belongs to the type *\/$/;"	m	struct:CvTypeInfo
is_integral	cudev/util/type_traits.hpp	/^    enum { is_integral       = type_traits_detail::IsIntegral<unqualified_type>::value };$/;"	e	enum:cv::cudev::TypeTraits::__anon380
is_kdtree_distance	flann/dist.h	/^    typedef False is_kdtree_distance;$/;"	t	struct:cvflann::Hamming
is_kdtree_distance	flann/dist.h	/^    typedef False is_kdtree_distance;$/;"	t	struct:cvflann::Hamming2
is_kdtree_distance	flann/dist.h	/^    typedef False is_kdtree_distance;$/;"	t	struct:cvflann::HammingLUT
is_kdtree_distance	flann/dist.h	/^    typedef False is_kdtree_distance;$/;"	t	struct:cvflann::MaxDistance
is_kdtree_distance	flann/dist.h	/^    typedef True is_kdtree_distance;$/;"	t	struct:cvflann::ChiSquareDistance
is_kdtree_distance	flann/dist.h	/^    typedef True is_kdtree_distance;$/;"	t	struct:cvflann::HellingerDistance
is_kdtree_distance	flann/dist.h	/^    typedef True is_kdtree_distance;$/;"	t	struct:cvflann::HistIntersectionDistance
is_kdtree_distance	flann/dist.h	/^    typedef True is_kdtree_distance;$/;"	t	struct:cvflann::KL_Divergence
is_kdtree_distance	flann/dist.h	/^    typedef True is_kdtree_distance;$/;"	t	struct:cvflann::L1
is_kdtree_distance	flann/dist.h	/^    typedef True is_kdtree_distance;$/;"	t	struct:cvflann::L2
is_kdtree_distance	flann/dist.h	/^    typedef True is_kdtree_distance;$/;"	t	struct:cvflann::L2_Simple
is_kdtree_distance	flann/dist.h	/^    typedef True is_kdtree_distance;$/;"	t	struct:cvflann::MinkowskiDistance
is_nan	ts/ts_gtest.h	/^  bool is_nan() const {$/;"	f	class:testing::internal::FloatingPoint
is_obj_without_holes	cudalegacy.hpp	/^    bool is_obj_without_holes; \/\/!< If TRUE we ignore holes within foreground blobs. Defaults to TRUE.$/;"	m	struct:cv::cuda::FGDParams
is_pointer	cudev/util/type_traits.hpp	/^    enum { is_pointer        = type_traits_detail::PointerTraits<typename type_traits_detail::ReferenceTraits<unqualified_type>::type>::value };$/;"	e	enum:cv::cudev::TypeTraits::__anon377
is_pointer	ts/ts_gtest.h	/^struct is_pointer : public false_type {};$/;"	s	namespace:std::tr1
is_pointer	ts/ts_gtest.h	/^struct is_pointer<T*> : public true_type {};$/;"	s	namespace:std::tr1
is_reference	cudev/util/type_traits.hpp	/^    enum { is_reference      = type_traits_detail::ReferenceTraits<unqualified_type>::value };$/;"	e	enum:cv::cudev::TypeTraits::__anon376
is_reportable	ts/ts_gtest.h	/^  bool is_reportable() const {$/;"	f	class:testing::TestInfo
is_scalar	cudev/util/type_traits.hpp	/^    enum { is_scalar         = is_integral || is_float };$/;"	e	enum:cv::cudev::TypeTraits::__anon382
is_signed	core/cuda/limits.hpp	/^    static const bool is_signed = false;$/;"	m	struct:cv::cuda::device::numeric_limits
is_signed	core/cuda/limits.hpp	/^    static const bool is_signed = true;$/;"	m	struct:cv::cuda::device::numeric_limits
is_signed	cudev/util/limits.hpp	/^    static const bool is_signed = false;$/;"	m	struct:cv::cudev::numeric_limits
is_signed	cudev/util/limits.hpp	/^    static const bool is_signed = true;$/;"	m	struct:cv::cudev::numeric_limits
is_signed_int	cudev/util/type_traits.hpp	/^    enum { is_signed_int     = type_traits_detail::IsSignedIntergral<unqualified_type>::value };$/;"	e	enum:cv::cudev::TypeTraits::__anon379
is_thread_safe_	stitching/detail/matchers.hpp	/^    bool is_thread_safe_;$/;"	m	class:cv::detail::FeaturesMatcher
is_tuple	cudev/util/tuple.hpp	/^    enum { is_tuple = 0 };$/;"	e	enum:cv::cudev::TupleTraits::__anon364
is_tuple	cudev/util/tuple.hpp	/^    enum { is_tuple = 1 };$/;"	e	enum:cv::cudev::TupleTraits::__anon366
is_unsigned_int	cudev/util/type_traits.hpp	/^    enum { is_unsigned_int   = type_traits_detail::IsUnsignedIntegral<unqualified_type>::value };$/;"	e	enum:cv::cudev::TypeTraits::__anon378
is_valid_	ts/ts_gtest.h	/^  bool is_valid_;$/;"	m	class:std::tr1::RE
is_vec	cudev/util/type_traits.hpp	/^    enum { is_vec            = type_traits_detail::IsVec<unqualified_type>::value };$/;"	e	enum:cv::cudev::TypeTraits::__anon383
is_vector_space_distance	flann/dist.h	/^    typedef False is_vector_space_distance;$/;"	t	struct:cvflann::Hamming
is_vector_space_distance	flann/dist.h	/^    typedef False is_vector_space_distance;$/;"	t	struct:cvflann::Hamming2
is_vector_space_distance	flann/dist.h	/^    typedef False is_vector_space_distance;$/;"	t	struct:cvflann::HammingLUT
is_vector_space_distance	flann/dist.h	/^    typedef True is_vector_space_distance;$/;"	t	struct:cvflann::ChiSquareDistance
is_vector_space_distance	flann/dist.h	/^    typedef True is_vector_space_distance;$/;"	t	struct:cvflann::HellingerDistance
is_vector_space_distance	flann/dist.h	/^    typedef True is_vector_space_distance;$/;"	t	struct:cvflann::HistIntersectionDistance
is_vector_space_distance	flann/dist.h	/^    typedef True is_vector_space_distance;$/;"	t	struct:cvflann::KL_Divergence
is_vector_space_distance	flann/dist.h	/^    typedef True is_vector_space_distance;$/;"	t	struct:cvflann::L1
is_vector_space_distance	flann/dist.h	/^    typedef True is_vector_space_distance;$/;"	t	struct:cvflann::L2
is_vector_space_distance	flann/dist.h	/^    typedef True is_vector_space_distance;$/;"	t	struct:cvflann::L2_Simple
is_vector_space_distance	flann/dist.h	/^    typedef True is_vector_space_distance;$/;"	t	struct:cvflann::MaxDistance
is_vector_space_distance	flann/dist.h	/^    typedef True is_vector_space_distance;$/;"	t	struct:cvflann::MinkowskiDistance
is_volatile	cudev/util/type_traits.hpp	/^    enum { is_volatile       = type_traits_detail::UnVolatile<T>::value };$/;"	e	enum:cv::cudev::TypeTraits::__anon375
it	core/mat.hpp	/^    MatIterator_<_Tp> it;$/;"	m	class:cv::MatCommaInitializer_
it	core/persistence.hpp	/^        FileNodeIterator* it;$/;"	m	class:cv::internal::VecReaderProxy
iterationsLimitDefault	ts/ts_perf.hpp	/^    static unsigned int iterationsLimitDefault;$/;"	m	class:perf::TestBase
iterations_	flann/kmeans_index.h	/^    int iterations_;$/;"	m	class:cvflann::KMeansIndex
iterator	core/core_c.h	/^    typedef SeqIterator<_Tp> iterator;$/;"	t	class:cv::Seq
iterator	core/cvstd.hpp	/^    typedef char* iterator;$/;"	t	class:cv::String
iterator	core/mat.hpp	/^    typedef MatIterator_<_Tp> iterator;$/;"	t	class:cv::Mat_
iterator	core/mat.hpp	/^    typedef SparseMatIterator iterator;$/;"	t	class:cv::SparseMat
iterator	core/mat.hpp	/^    typedef SparseMatIterator_<_Tp> iterator;$/;"	t	class:cv::SparseMat_
iterator	ts/ts_gtest.h	/^  typedef Element* iterator;$/;"	t	class:testing::internal::NativeArray
iterator	ts/ts_gtest.h	/^  typedef ParamIterator<T> iterator;$/;"	t	class:testing::internal::ParamGenerator
iterator_	ts/ts_gtest.h	/^    typename ContainerType::const_iterator iterator_;$/;"	m	class:testing::internal::ValuesInIteratorRangeGenerator::Iterator
iterator_category	core/mat.hpp	/^    typedef std::forward_iterator_tag iterator_category;$/;"	t	class:cv::SparseMatConstIterator_
iterator_category	core/mat.hpp	/^    typedef std::forward_iterator_tag iterator_category;$/;"	t	class:cv::SparseMatIterator_
iterator_category	core/mat.hpp	/^    typedef std::random_access_iterator_tag iterator_category;$/;"	t	class:cv::MatConstIterator
iterator_category	core/mat.hpp	/^    typedef std::random_access_iterator_tag iterator_category;$/;"	t	class:cv::MatConstIterator_
iterator_category	core/mat.hpp	/^    typedef std::random_access_iterator_tag iterator_category;$/;"	t	class:cv::MatIterator_
iterdepth	core/mat.hpp	/^    int iterdepth;$/;"	m	class:cv::NAryMatIterator
iters	calib3d/calib3d_c.h	/^    int iters;$/;"	m	class:CvLevMarq
iwriter	videoio.hpp	/^    Ptr<IVideoWriter> iwriter;$/;"	m	class:cv::VideoWriter
iwscale	core/ocl.hpp	/^    int wscale, iwscale;$/;"	m	class:cv::ocl::KernelArg
join_new	ts/ts_gtest.h	/^  void join_new() {$/;"	f	class:testing::internal::linked_ptr_internal
k	stitching/detail/warpers.hpp	/^    float k[9];$/;"	m	struct:cv::detail::ProjectorBase
kArray	flann/lsh_table.h	/^        kArray, kBitsetHash, kHash$/;"	e	enum:cvflann::lsh::LshTable::SpeedLevel
kBitCount	ts/ts_gtest.h	/^  static const size_t kBitCount = 8*sizeof(RawType);$/;"	m	class:testing::internal::FloatingPoint
kBitsetHash	flann/lsh_table.h	/^        kArray, kBitsetHash, kHash$/;"	e	enum:cvflann::lsh::LshTable::SpeedLevel
kBytes	features2d.hpp	/^    enum { kBytes = 32, HARRIS_SCORE=0, FAST_SCORE=1 };$/;"	e	enum:cv::ORB::__anon282
kChannels	core/wimage.hpp	/^    enum { kChannels = C };$/;"	e	enum:cv::WImageBufferC::__anon132
kChannels	core/wimage.hpp	/^    enum { kChannels = C };$/;"	e	enum:cv::WImageC::__anon131
kChannels	core/wimage.hpp	/^    enum { kChannels = C };$/;"	e	enum:cv::WImageViewC::__anon133
kConvertibleToInteger	ts/ts_gtest.h	/^  kConvertibleToInteger,  \/\/ a type implicitly convertible to BiggestInt$/;"	e	enum:testing::internal2::TypeKind
kCopy	ts/ts_gtest.h	/^  kCopy        \/\/ The NativeArray makes a copy of the native array and$/;"	e	enum:testing::internal::RelationToSource
kDeathTestStyleFlag	ts/ts_gtest.h	/^const char kDeathTestStyleFlag[] = "death_test_style";$/;"	m	namespace:testing::internal
kDeathTestUseFork	ts/ts_gtest.h	/^const char kDeathTestUseFork[] = "death_test_use_fork";$/;"	m	namespace:testing::internal
kExponentBitCount	ts/ts_gtest.h	/^  static const size_t kExponentBitCount = kBitCount - 1 - kFractionBitCount;$/;"	m	class:testing::internal::FloatingPoint
kExponentBitMask	ts/ts_gtest.h	/^  static const Bits kExponentBitMask = ~(kSignBitMask | kFractionBitMask);$/;"	m	class:testing::internal::FloatingPoint
kFatalFailure	ts/ts_gtest.h	/^    kFatalFailure      \/\/ Failed and the test should be terminated.$/;"	e	enum:testing::TestPartResult::Type
kFractionBitCount	ts/ts_gtest.h	/^  static const size_t kFractionBitCount =$/;"	m	class:testing::internal::FloatingPoint
kFractionBitMask	ts/ts_gtest.h	/^  static const Bits kFractionBitMask =$/;"	m	class:testing::internal::FloatingPoint
kHash	flann/lsh_table.h	/^        kArray, kBitsetHash, kHash$/;"	e	enum:cvflann::lsh::LshTable::SpeedLevel
kInternalRunDeathTestFlag	ts/ts_gtest.h	/^const char kInternalRunDeathTestFlag[] = "internal_run_death_test";$/;"	m	namespace:testing::internal
kMaxBiggestInt	ts/ts_gtest.h	/^const BiggestInt kMaxBiggestInt =$/;"	m	namespace:std::tr1
kMaxRange	ts/ts_gtest.h	/^  static const UInt32 kMaxRange = 1u << 31;$/;"	m	class:testing::internal::Random
kMaxStackTraceDepth	ts/ts_gtest.h	/^const int kMaxStackTraceDepth = 100;$/;"	m	namespace:testing
kMaxUlps	ts/ts_gtest.h	/^  static const size_t kMaxUlps = 4;$/;"	m	class:testing::internal::FloatingPoint
kNonFatalFailure	ts/ts_gtest.h	/^    kNonFatalFailure,  \/\/ Failed but the test can continue.$/;"	e	enum:testing::TestPartResult::Type
kOtherType	ts/ts_gtest.h	/^  kOtherType              \/\/ anything else$/;"	e	enum:testing::internal2::TypeKind
kProtobuf	ts/ts_gtest.h	/^  kProtobuf,              \/\/ a protobuf type$/;"	e	enum:testing::internal2::TypeKind
kProtobufOneLinerMaxLength	ts/ts_gtest.h	/^const size_t kProtobufOneLinerMaxLength = 50;$/;"	m	namespace:testing::internal2
kReference	ts/ts_gtest.h	/^  kReference,  \/\/ The NativeArray references the native array.$/;"	e	enum:testing::internal::RelationToSource
kSignBitMask	ts/ts_gtest.h	/^  static const Bits kSignBitMask = static_cast<Bits>(1) << (kBitCount - 1);$/;"	m	class:testing::internal::FloatingPoint
kSuccess	ts/ts_gtest.h	/^    kSuccess,          \/\/ Succeeded.$/;"	e	enum:testing::TestPartResult::Type
k_rinv	stitching/detail/warpers.hpp	/^    float k_rinv[9];$/;"	m	struct:cv::detail::ProjectorBase
kalman	video/tracking_c.h	/^CVAPI(void)  cvReleaseKalman( CvKalman** kalman);$/;"	v
kdtree_index_	flann/composite_index.h	/^    KDTreeIndex<Distance>* kdtree_index_;$/;"	m	class:cvflann::CompositeIndex
key	ts/ts_gtest.h	/^  const char* key() const {$/;"	f	class:testing::TestProperty
key_	core/utility.hpp	/^    int key_;$/;"	m	class:cv::TLSDataContainer
key_	ts/ts_gtest.h	/^  const pthread_key_t key_;$/;"	m	class:std::tr1::ThreadLocal
key_	ts/ts_gtest.h	/^  std::string key_;$/;"	m	class:testing::TestProperty
key_bitset_	flann/lsh_table.h	/^    DynamicBitset key_bitset_;$/;"	m	class:cvflann::lsh::LshTable
key_size_	flann/lsh_index.h	/^    unsigned int key_size_;$/;"	m	class:cvflann::LshIndex
key_size_	flann/lsh_table.h	/^    unsigned int key_size_;$/;"	m	class:cvflann::lsh::LshTable
keypoints	stitching/detail/matchers.hpp	/^    std::vector<KeyPoint> keypoints;$/;"	m	struct:cv::detail::ImageFeatures
keypointsPrev_	videostab/global_motion.hpp	/^    std::vector<KeyPoint> keypointsPrev_;$/;"	m	class:cv::videostab::KeypointBasedMotionEstimator
keypoints_	stitching/detail/matchers.hpp	/^    cuda::GpuMat keypoints_;$/;"	m	class:cv::detail::SurfFeaturesFinderGpu
kmeans_index_	flann/composite_index.h	/^    KMeansIndex<Distance>* kmeans_index_;$/;"	m	class:cvflann::CompositeIndex
knnSearch	flann.hpp	/^void GenericIndex<Distance>::knnSearch(const Mat& queries, Mat& indices, Mat& dists, int knn, const ::cvflann::SearchParams& searchParams)$/;"	f	class:cv::flann::GenericIndex
knnSearch	flann.hpp	/^void GenericIndex<Distance>::knnSearch(const std::vector<ElementType>& query, std::vector<int>& indices, std::vector<DistanceType>& dists, int knn, const ::cvflann::SearchParams& searchParams)$/;"	f	class:cv::flann::GenericIndex
knnSearch	flann.hpp	/^void Index_<T>::knnSearch(const Mat& queries, Mat& indices, Mat& dists, int knn, const ::cvflann::SearchParams& searchParams)$/;"	f	class:cv::flann::Index_
knnSearch	flann.hpp	/^void Index_<T>::knnSearch(const std::vector<ElementType>& query, std::vector<int>& indices, std::vector<DistanceType>& dists, int knn, const ::cvflann::SearchParams& searchParams)$/;"	f	class:cv::flann::Index_
knnSearch	flann/flann_base.hpp	/^    void knnSearch(const Matrix<ElementType>& queries, Matrix<int>& indices, Matrix<DistanceType>& dists, int knn, const SearchParams& params)$/;"	f	class:cvflann::Index
knnSearch	flann/kdtree_single_index.h	/^    void knnSearch(const Matrix<ElementType>& queries, Matrix<int>& indices, Matrix<DistanceType>& dists, int knn, const SearchParams& params)$/;"	f	class:cvflann::KDTreeSingleIndex
knnSearch	flann/lsh_index.h	/^    virtual void knnSearch(const Matrix<ElementType>& queries, Matrix<int>& indices, Matrix<DistanceType>& dists, int knn, const SearchParams& params)$/;"	f	class:cvflann::LshIndex
knnSearch	flann/nn_index.h	/^    virtual void knnSearch(const Matrix<ElementType>& queries, Matrix<int>& indices, Matrix<DistanceType>& dists, int knn, const SearchParams& params)$/;"	f	class:cvflann::NNIndex
lab_shift	core/cuda/detail/color_detail.hpp	/^            lab_shift = xyz_shift,$/;"	e	enum:cv::cuda::device::color_detail::__anon241
lab_shift	cudev/functional/detail/color_cvt.hpp	/^        lab_shift = xyz_shift,$/;"	e	enum:cv::cudev::color_cvt_detail::__anon397
lab_shift2	core/cuda/detail/color_detail.hpp	/^            lab_shift2 = (lab_shift + gamma_shift),$/;"	e	enum:cv::cuda::device::color_detail::__anon241
lab_shift2	cudev/functional/detail/color_cvt.hpp	/^        lab_shift2 = (lab_shift + gamma_shift),$/;"	e	enum:cv::cudev::color_cvt_detail::__anon397
labels_	stitching/detail/seam_finders.hpp	/^    Mat_<int> labels_;$/;"	m	class:cv::detail::DpSeamFinder
lambdaLg10	calib3d/calib3d_c.h	/^    int lambdaLg10;$/;"	m	class:CvLevMarq
laneId	core/cuda/warp.hpp	/^        static __device__ __forceinline__ unsigned int laneId()$/;"	f	struct:cv::cuda::device::Warp
laneId	cudev/warp/warp.hpp	/^    __device__ __forceinline__ static uint laneId()$/;"	f	struct:cv::cudev::Warp
lane_type	hal/intrin_cpp.hpp	/^    typedef _Tp lane_type;$/;"	t	struct:cv::v_reg
lane_type	hal/intrin_neon.hpp	/^    typedef float lane_type;$/;"	t	struct:cv::v_float32x4
lane_type	hal/intrin_neon.hpp	/^    typedef int lane_type;$/;"	t	struct:cv::v_int32x4
lane_type	hal/intrin_neon.hpp	/^    typedef int64 lane_type;$/;"	t	struct:cv::v_int64x2
lane_type	hal/intrin_neon.hpp	/^    typedef schar lane_type;$/;"	t	struct:cv::v_int8x16
lane_type	hal/intrin_neon.hpp	/^    typedef short lane_type;$/;"	t	struct:cv::v_int16x8
lane_type	hal/intrin_neon.hpp	/^    typedef uchar lane_type;$/;"	t	struct:cv::v_uint8x16
lane_type	hal/intrin_neon.hpp	/^    typedef uint64 lane_type;$/;"	t	struct:cv::v_uint64x2
lane_type	hal/intrin_neon.hpp	/^    typedef unsigned lane_type;$/;"	t	struct:cv::v_uint32x4
lane_type	hal/intrin_neon.hpp	/^    typedef ushort lane_type;$/;"	t	struct:cv::v_uint16x8
lane_type	hal/intrin_sse.hpp	/^    typedef double lane_type;$/;"	t	struct:cv::v_float64x2
lane_type	hal/intrin_sse.hpp	/^    typedef float lane_type;$/;"	t	struct:cv::v_float32x4
lane_type	hal/intrin_sse.hpp	/^    typedef int lane_type;$/;"	t	struct:cv::v_int32x4
lane_type	hal/intrin_sse.hpp	/^    typedef int64 lane_type;$/;"	t	struct:cv::v_int64x2
lane_type	hal/intrin_sse.hpp	/^    typedef schar lane_type;$/;"	t	struct:cv::v_int8x16
lane_type	hal/intrin_sse.hpp	/^    typedef short lane_type;$/;"	t	struct:cv::v_int16x8
lane_type	hal/intrin_sse.hpp	/^    typedef uchar lane_type;$/;"	t	struct:cv::v_uint8x16
lane_type	hal/intrin_sse.hpp	/^    typedef uint64 lane_type;$/;"	t	struct:cv::v_uint64x2
lane_type	hal/intrin_sse.hpp	/^    typedef unsigned lane_type;$/;"	t	struct:cv::v_uint32x4
lane_type	hal/intrin_sse.hpp	/^    typedef ushort lane_type;$/;"	t	struct:cv::v_uint16x8
laplacianPtr	cudev/ptr2d/deriv.hpp	/^__host__ LaplacianPtrSz<ksize, typename PtrTraits<SrcPtr>::ptr_type> laplacianPtr(const SrcPtr& src)$/;"	f	namespace:cv::cudev
laplacian_	cudev/expr/deriv.hpp	/^laplacian_(const SrcPtr& src)$/;"	f	namespace:cv::cudev
last	core/core_c.h	/^    static CvTypeInfo* last;$/;"	m	struct:CvType
lastPositions	objdetect/detection_based_tracker.hpp	/^            PositionsVector lastPositions;$/;"	m	struct:cv::DetectionBasedTracker::TrackedObject
lastTime	ts/ts_perf.hpp	/^    int64 lastTime;$/;"	m	class:perf::TestBase
last_col	core/cuda/border_interpolate.hpp	/^        int last_col;$/;"	m	struct:cv::cuda::device::BrdReflect
last_col	core/cuda/border_interpolate.hpp	/^        int last_col;$/;"	m	struct:cv::cuda::device::BrdReflect101
last_col	core/cuda/border_interpolate.hpp	/^        int last_col;$/;"	m	struct:cv::cuda::device::BrdReplicate
last_col	core/cuda/border_interpolate.hpp	/^        int last_col;$/;"	m	struct:cv::cuda::device::BrdRowReflect
last_col	core/cuda/border_interpolate.hpp	/^        int last_col;$/;"	m	struct:cv::cuda::device::BrdRowReflect101
last_col	core/cuda/border_interpolate.hpp	/^        int last_col;$/;"	m	struct:cv::cuda::device::BrdRowReplicate
last_death_test_message_	ts/ts_gtest.h	/^  static std::string last_death_test_message_;$/;"	m	class:testing::internal::DeathTest
last_row	core/cuda/border_interpolate.hpp	/^        int last_row;$/;"	m	struct:cv::cuda::device::BrdColReflect
last_row	core/cuda/border_interpolate.hpp	/^        int last_row;$/;"	m	struct:cv::cuda::device::BrdColReflect101
last_row	core/cuda/border_interpolate.hpp	/^        int last_row;$/;"	m	struct:cv::cuda::device::BrdColReplicate
last_row	core/cuda/border_interpolate.hpp	/^        int last_row;$/;"	m	struct:cv::cuda::device::BrdReflect
last_row	core/cuda/border_interpolate.hpp	/^        int last_row;$/;"	m	struct:cv::cuda::device::BrdReflect101
last_row	core/cuda/border_interpolate.hpp	/^        int last_row;$/;"	m	struct:cv::cuda::device::BrdReplicate
leaf_max_size_	flann/kdtree_single_index.h	/^    int leaf_max_size_;$/;"	m	class:cvflann::KDTreeSingleIndex
leaf_size_	flann/hierarchical_clustering_index.h	/^    int leaf_size_;$/;"	m	class:cvflann::HierarchicalClusteringIndex
lef	ts/ocl_test.hpp	/^        int top, bot, lef, rig;$/;"	m	struct:cvtest::ocl::TestUtils::Border
left	flann/kdtree_single_index.h	/^        int left, right;$/;"	m	struct:cvflann::KDTreeSingleIndex::Node
left	ml.hpp	/^        int left; \/\/!< Index of the left child node$/;"	m	class:cv::ml::DTrees::Node
left	objdetect/objdetect_c.h	/^    int* left;$/;"	m	struct:CvHaarClassifier
len	core/types_c.h	/^    int len;$/;"	m	struct:CvString
len_	core/cvstd.hpp	/^    size_t len_;$/;"	m	class:cv::String
length	core/cvstd.hpp	/^size_t String::length() const$/;"	f	class:cv::String
length	cudalegacy/NCV.hpp	/^    size_t length() const {return this->_length;}$/;"	f	class:NCVVector
length	flann/heap.h	/^    int length;$/;"	m	class:cvflann::Heap
less	core/cuda/functional.hpp	/^        __host__ __device__ __forceinline__ less() {}$/;"	f	struct:cv::cuda::device::less
less	core/cuda/functional.hpp	/^        __host__ __device__ __forceinline__ less(const less&) {}$/;"	f	struct:cv::cuda::device::less
less	core/cuda/functional.hpp	/^    template <typename T> struct less : binary_function<T, T, bool>$/;"	s	namespace:cv::cuda::device
less	cudev/functional/functional.hpp	/^template <typename T> struct less : binary_function<T, T, typename MakeVec<uchar, VecTraits<T>::cn>::type>$/;"	s	namespace:cv::cudev
less_equal	core/cuda/functional.hpp	/^        __host__ __device__ __forceinline__ less_equal() {}$/;"	f	struct:cv::cuda::device::less_equal
less_equal	core/cuda/functional.hpp	/^        __host__ __device__ __forceinline__ less_equal(const less_equal&) {}$/;"	f	struct:cv::cuda::device::less_equal
less_equal	core/cuda/functional.hpp	/^    template <typename T> struct less_equal : binary_function<T, T, bool>$/;"	s	namespace:cv::cuda::device
less_equal	cudev/functional/functional.hpp	/^template <typename T> struct less_equal : binary_function<T, T, typename MakeVec<uchar, VecTraits<T>::cn>::type>$/;"	s	namespace:cv::cudev
level	core/core_c.h	/^    int level;$/;"	m	struct:CvTreeNodeIterator
level	flann/hierarchical_clustering_index.h	/^        int level;$/;"	m	struct:cvflann::HierarchicalClusteringIndex::Node
level	flann/kmeans_index.h	/^        int level;$/;"	m	struct:cvflann::KMeansIndex::KMeansNode
lime	viz/types.hpp	/^inline cv::viz::Color cv::viz::Color::lime()       { return Color(0,   255, 191); }$/;"	f	class:cv::viz::Color
line	core.hpp	/^    int line; \/\/\/< line number in the source file where the error has occured$/;"	m	class:cv::Exception
line	ts/ts_gtest.h	/^    int                const line;$/;"	m	struct:testing::internal::AssertHelper::AssertHelperData
line	ts/ts_gtest.h	/^  int line() const { return line_; }$/;"	f	class:testing::internal::InternalRunDeathTestFlag
line_	ts/ts_gtest.h	/^  int line_;$/;"	m	class:testing::internal::InternalRunDeathTestFlag
line_number	ts/ts_gtest.h	/^  int line_number() const { return line_number_; }$/;"	f	class:testing::TestPartResult
line_number_	ts/ts_gtest.h	/^  int line_number_;$/;"	m	class:testing::TestPartResult
line_type	highgui.hpp	/^    int         line_type; \/\/ Qt: PointSize$/;"	m	struct:cv::QtFont
line_type	imgproc/imgproc_c.h	/^    int         line_type;    \/\/!< Qt: PointSize$/;"	m	struct:CvFont
linear	core/affine.hpp	/^typename cv::Affine3<T>::Mat3 cv::Affine3<T>::linear() const$/;"	f	class:cv::Affine3
linear	core/affine.hpp	/^void cv::Affine3<T>::linear(const Mat3& L)$/;"	f	class:cv::Affine3
link_	ts/ts_gtest.h	/^  linked_ptr_internal link_;$/;"	m	class:testing::internal::linked_ptr
linked_ptr	ts/ts_gtest.h	/^  explicit linked_ptr(T* ptr = NULL) { capture(ptr); }$/;"	f	class:testing::internal::linked_ptr
linked_ptr	ts/ts_gtest.h	/^  linked_ptr(linked_ptr const& ptr) {  \/\/ NOLINT$/;"	f	class:testing::internal::linked_ptr
linked_ptr	ts/ts_gtest.h	/^  template <typename U> linked_ptr(linked_ptr<U> const& ptr) { copy(&ptr); }$/;"	f	class:testing::internal::linked_ptr
linked_ptr	ts/ts_gtest.h	/^class linked_ptr {$/;"	c	namespace:testing::internal
linked_ptr_internal	ts/ts_gtest.h	/^class linked_ptr_internal {$/;"	c	namespace:testing::internal
load	core.hpp	/^    template<typename _Tp> static Ptr<_Tp> load(const String& filename, const String& objname=String())$/;"	f	class:cv::Algorithm
loadFromSmem	core/cuda/detail/reduce.hpp	/^            static __device__ void loadFromSmem(const PointerTuple& smem, const ValTuple& val, unsigned int tid)$/;"	f	struct:cv::cuda::device::reduce_detail::For
loadFromSmem	core/cuda/detail/reduce.hpp	/^            static __device__ void loadFromSmem(const PointerTuple&, const ValTuple&, unsigned int)$/;"	f	struct:cv::cuda::device::reduce_detail::For
loadFromSmem	core/cuda/detail/reduce.hpp	/^        __device__ __forceinline__ void loadFromSmem(const thrust::tuple<P0, P1, P2, P3, P4, P5, P6, P7, P8, P9>& smem,$/;"	f	namespace:cv::cuda::device::reduce_detail
loadFromSmem	core/cuda/detail/reduce.hpp	/^        __device__ __forceinline__ void loadFromSmem(volatile T* smem, T& val, unsigned int tid)$/;"	f	namespace:cv::cuda::device::reduce_detail
loadFromSmem	core/cuda/detail/reduce_key_val.hpp	/^            static __device__ void loadFromSmem(const PointerTuple& smem, const ReferenceTuple& data, unsigned int tid)$/;"	f	struct:cv::cuda::device::reduce_key_val_detail::For
loadFromSmem	core/cuda/detail/reduce_key_val.hpp	/^            static __device__ void loadFromSmem(const PointerTuple&, const ReferenceTuple&, unsigned int)$/;"	f	struct:cv::cuda::device::reduce_key_val_detail::For
loadFromSmem	core/cuda/detail/reduce_key_val.hpp	/^        __device__ __forceinline__ void loadFromSmem(const thrust::tuple<VP0, VP1, VP2, VP3, VP4, VP5, VP6, VP7, VP8, VP9>& smem,$/;"	f	namespace:cv::cuda::device::reduce_key_val_detail
loadFromSmem	core/cuda/detail/reduce_key_val.hpp	/^        __device__ __forceinline__ void loadFromSmem(volatile T* smem, T& data, unsigned int tid)$/;"	f	namespace:cv::cuda::device::reduce_key_val_detail
loadFromSmem	cudev/block/detail/reduce.hpp	/^        __device__ __forceinline__ static void loadFromSmem(const PointerTuple&, const ValTuple&, uint)$/;"	f	struct:cv::cudev::block_reduce_detail::For
loadFromSmem	cudev/block/detail/reduce.hpp	/^        __device__ static void loadFromSmem(const PointerTuple& smem, const ValTuple& val, uint tid)$/;"	f	struct:cv::cudev::block_reduce_detail::For
loadFromSmem	cudev/block/detail/reduce.hpp	/^    __device__ __forceinline__ void loadFromSmem(const tuple<P0, P1, P2, P3, P4, P5, P6, P7, P8, P9>& smem,$/;"	f	namespace:cv::cudev::block_reduce_detail
loadFromSmem	cudev/block/detail/reduce.hpp	/^    __device__ __forceinline__ void loadFromSmem(volatile T* smem, T& val, uint tid)$/;"	f	namespace:cv::cudev::block_reduce_detail
loadFromSmem	cudev/block/detail/reduce_key_val.hpp	/^        __device__ static void loadFromSmem(const PointerTuple& smem, const ReferenceTuple& data, uint tid)$/;"	f	struct:cv::cudev::block_reduce_key_val_detail::For
loadFromSmem	cudev/block/detail/reduce_key_val.hpp	/^        __device__ static void loadFromSmem(const PointerTuple&, const ReferenceTuple&, uint)$/;"	f	struct:cv::cudev::block_reduce_key_val_detail::For
loadFromSmem	cudev/block/detail/reduce_key_val.hpp	/^    __device__ __forceinline__ void loadFromSmem(const tuple<VP0, VP1, VP2, VP3, VP4, VP5, VP6, VP7, VP8, VP9>& smem,$/;"	f	namespace:cv::cudev::block_reduce_key_val_detail
loadFromSmem	cudev/block/detail/reduce_key_val.hpp	/^    __device__ __forceinline__ void loadFromSmem(volatile T* smem, T& data, uint tid)$/;"	f	namespace:cv::cudev::block_reduce_key_val_detail
loadFromString	core.hpp	/^    template<typename _Tp> static Ptr<_Tp> loadFromString(const String& strModel, const String& objname=String())$/;"	f	class:cv::Algorithm
loadIndex	flann/autotuned_index.h	/^    virtual void loadIndex(FILE* stream)$/;"	f	class:cvflann::AutotunedIndex
loadIndex	flann/composite_index.h	/^    void loadIndex(FILE* stream)$/;"	f	class:cvflann::CompositeIndex
loadIndex	flann/flann_base.hpp	/^    virtual void loadIndex(FILE* stream)$/;"	f	class:cvflann::Index
loadIndex	flann/hierarchical_clustering_index.h	/^    void loadIndex(FILE* stream)$/;"	f	class:cvflann::HierarchicalClusteringIndex
loadIndex	flann/kdtree_index.h	/^    void loadIndex(FILE* stream)$/;"	f	class:cvflann::KDTreeIndex
loadIndex	flann/kdtree_single_index.h	/^    void loadIndex(FILE* stream)$/;"	f	class:cvflann::KDTreeSingleIndex
loadIndex	flann/kmeans_index.h	/^    void loadIndex(FILE* stream)$/;"	f	class:cvflann::KMeansIndex
loadIndex	flann/linear_index.h	/^    void loadIndex(FILE*)$/;"	f	class:cvflann::LinearIndex
loadIndex	flann/lsh_index.h	/^    void loadIndex(FILE* stream)$/;"	f	class:cvflann::LshIndex
loadToSmem	core/cuda/detail/reduce.hpp	/^            static __device__ void loadToSmem(const PointerTuple& smem, const ValTuple& val, unsigned int tid)$/;"	f	struct:cv::cuda::device::reduce_detail::For
loadToSmem	core/cuda/detail/reduce.hpp	/^            static __device__ void loadToSmem(const PointerTuple&, const ValTuple&, unsigned int)$/;"	f	struct:cv::cuda::device::reduce_detail::For
loadToSmem	core/cuda/detail/reduce.hpp	/^        __device__ __forceinline__ void loadToSmem(const thrust::tuple<P0, P1, P2, P3, P4, P5, P6, P7, P8, P9>& smem,$/;"	f	namespace:cv::cuda::device::reduce_detail
loadToSmem	core/cuda/detail/reduce.hpp	/^        __device__ __forceinline__ void loadToSmem(volatile T* smem, T& val, unsigned int tid)$/;"	f	namespace:cv::cuda::device::reduce_detail
loadToSmem	core/cuda/detail/reduce_key_val.hpp	/^            static __device__ void loadToSmem(const PointerTuple& smem, const ReferenceTuple& data, unsigned int tid)$/;"	f	struct:cv::cuda::device::reduce_key_val_detail::For
loadToSmem	core/cuda/detail/reduce_key_val.hpp	/^            static __device__ void loadToSmem(const PointerTuple&, const ReferenceTuple&, unsigned int)$/;"	f	struct:cv::cuda::device::reduce_key_val_detail::For
loadToSmem	core/cuda/detail/reduce_key_val.hpp	/^        __device__ __forceinline__ void loadToSmem(const thrust::tuple<VP0, VP1, VP2, VP3, VP4, VP5, VP6, VP7, VP8, VP9>& smem,$/;"	f	namespace:cv::cuda::device::reduce_key_val_detail
loadToSmem	core/cuda/detail/reduce_key_val.hpp	/^        __device__ __forceinline__ void loadToSmem(volatile T* smem, T& data, unsigned int tid)$/;"	f	namespace:cv::cuda::device::reduce_key_val_detail
loadToSmem	cudev/block/detail/reduce.hpp	/^        __device__ __forceinline__ static void loadToSmem(const PointerTuple&, const ValTuple&, uint)$/;"	f	struct:cv::cudev::block_reduce_detail::For
loadToSmem	cudev/block/detail/reduce.hpp	/^        __device__ static void loadToSmem(const PointerTuple& smem, const ValTuple& val, uint tid)$/;"	f	struct:cv::cudev::block_reduce_detail::For
loadToSmem	cudev/block/detail/reduce.hpp	/^    __device__ __forceinline__ void loadToSmem(const tuple<P0, P1, P2, P3, P4, P5, P6, P7, P8, P9>& smem,$/;"	f	namespace:cv::cudev::block_reduce_detail
loadToSmem	cudev/block/detail/reduce.hpp	/^    __device__ __forceinline__ void loadToSmem(volatile T* smem, T& val, uint tid)$/;"	f	namespace:cv::cudev::block_reduce_detail
loadToSmem	cudev/block/detail/reduce_key_val.hpp	/^        __device__ static void loadToSmem(const PointerTuple& smem, const ReferenceTuple& data, uint tid)$/;"	f	struct:cv::cudev::block_reduce_key_val_detail::For
loadToSmem	cudev/block/detail/reduce_key_val.hpp	/^        __device__ static void loadToSmem(const PointerTuple&, const ReferenceTuple&, uint)$/;"	f	struct:cv::cudev::block_reduce_key_val_detail::For
loadToSmem	cudev/block/detail/reduce_key_val.hpp	/^    __device__ __forceinline__ void loadToSmem(const tuple<VP0, VP1, VP2, VP3, VP4, VP5, VP6, VP7, VP8, VP9>& smem,$/;"	f	namespace:cv::cudev::block_reduce_key_val_detail
loadToSmem	cudev/block/detail/reduce_key_val.hpp	/^    __device__ __forceinline__ void loadToSmem(volatile T* smem, T& data, uint tid)$/;"	f	namespace:cv::cudev::block_reduce_key_val_detail
loadToSmem	cudev/warp/detail/reduce.hpp	/^        __device__ __forceinline__ static void loadToSmem(const PointerTuple&, const ValTuple&, uint)$/;"	f	struct:cv::cudev::warp_reduce_detail::For
loadToSmem	cudev/warp/detail/reduce.hpp	/^        __device__ static void loadToSmem(const PointerTuple& smem, const ValTuple& val, uint tid)$/;"	f	struct:cv::cudev::warp_reduce_detail::For
loadToSmem	cudev/warp/detail/reduce.hpp	/^    __device__ __forceinline__ void loadToSmem(const tuple<P0, P1, P2, P3, P4, P5, P6, P7, P8, P9>& smem,$/;"	f	namespace:cv::cudev::warp_reduce_detail
loadToSmem	cudev/warp/detail/reduce.hpp	/^    __device__ __forceinline__ void loadToSmem(volatile T* smem, T& val, uint tid)$/;"	f	namespace:cv::cudev::warp_reduce_detail
loadToSmem	cudev/warp/detail/reduce_key_val.hpp	/^        __device__ __forceinline__ static void loadToSmem(const PointerTuple&, const ReferenceTuple&, uint)$/;"	f	struct:cv::cudev::warp_reduce_key_val_detail::For
loadToSmem	cudev/warp/detail/reduce_key_val.hpp	/^        __device__ static void loadToSmem(const PointerTuple& smem, const ReferenceTuple& data, uint tid)$/;"	f	struct:cv::cudev::warp_reduce_key_val_detail::For
loadToSmem	cudev/warp/detail/reduce_key_val.hpp	/^    __device__ __forceinline__ void loadToSmem(const tuple<VP0, VP1, VP2, VP3, VP4, VP5, VP6, VP7, VP8, VP9>& smem,$/;"	f	namespace:cv::cudev::warp_reduce_key_val_detail
loadToSmem	cudev/warp/detail/reduce_key_val.hpp	/^    __device__ __forceinline__ void loadToSmem(volatile T* smem, T& data, uint tid)$/;"	f	namespace:cv::cudev::warp_reduce_key_val_detail
load_from_file	flann/hdf5.h	/^void load_from_file(cvflann::Matrix<T>& dataset, const String& filename, const String& name)$/;"	f	namespace:cvflann
load_from_file	flann/hdf5.h	/^void load_from_file(cvflann::Matrix<T>& dataset, const String& filename, const String& name)$/;"	f	namespace:cvflann::mpi
load_header	flann/saving.h	/^inline IndexHeader load_header(FILE* stream)$/;"	f	namespace:cvflann
load_saved_index	flann/flann_base.hpp	/^NNIndex<Distance>* load_saved_index(const Matrix<typename Distance::ElementType>& dataset, const cv::String& filename, Distance distance)$/;"	f	namespace:cvflann
load_tree	flann/hierarchical_clustering_index.h	/^    void load_tree(FILE* stream, NodePtr& node, int num)$/;"	f	class:cvflann::HierarchicalClusteringIndex
load_tree	flann/kdtree_index.h	/^    void load_tree(FILE* stream, NodePtr& tree)$/;"	f	class:cvflann::KDTreeIndex
load_tree	flann/kdtree_single_index.h	/^    void load_tree(FILE* stream, NodePtr& tree)$/;"	f	class:cvflann::KDTreeSingleIndex
load_tree	flann/kmeans_index.h	/^    void load_tree(FILE* stream, KMeansNodePtr& node)$/;"	f	class:cvflann::KMeansIndex
load_value	flann/saving.h	/^void load_value(FILE* stream, T& value, size_t count = 1)$/;"	f	namespace:cvflann
load_value	flann/saving.h	/^void load_value(FILE* stream, cvflann::Matrix<T>& value)$/;"	f	namespace:cvflann
load_value	flann/saving.h	/^void load_value(FILE* stream, std::vector<T>& value)$/;"	f	namespace:cvflann
loaded_	flann/flann_base.hpp	/^    bool loaded_;$/;"	m	class:cvflann::Index
loaded_from	core/types_c.h	/^    int loaded_from;$/;"	m	struct:CvPluginFuncInfo
loc	flann/allocator.h	/^    void*   loc;      \/* Current location in block to next allocate memory. *\/$/;"	m	class:cvflann::PooledAllocator
loc0	ts.hpp	/^    vector<int> loc0;$/;"	m	struct:cvtest::MatComparator
location	objdetect/detection_based_tracker.hpp	/^            cv::Rect location;$/;"	m	struct:cv::DetectionBasedTracker::ExtObject
locations	objdetect.hpp	/^   std::vector<cv::Point> locations;$/;"	m	struct:cv::DetectionROI
log	flann/logger.h	/^    static int log(int level, const char* fmt, ...)$/;"	f	class:cvflann::Logger
log	videostab/stabilizer.hpp	/^    Ptr<ILog> log() const { return log_; }$/;"	f	class:cv::videostab::StabilizerBase
logLevel	flann/logger.h	/^    int logLevel;$/;"	m	class:cvflann::Logger
logStep	ml.hpp	/^    double logStep;$/;"	m	class:cv::ml::ParamGrid
log_	videostab/stabilizer.hpp	/^    Ptr<ILog> log_;$/;"	m	class:cv::videostab::StabilizerBase
log_verbosity	flann/flann_base.hpp	/^inline void log_verbosity(int level)$/;"	f	namespace:cvflann
logical_and	core/cuda/functional.hpp	/^        __host__ __device__ __forceinline__ logical_and() {}$/;"	f	struct:cv::cuda::device::logical_and
logical_and	core/cuda/functional.hpp	/^        __host__ __device__ __forceinline__ logical_and(const logical_and&) {}$/;"	f	struct:cv::cuda::device::logical_and
logical_and	core/cuda/functional.hpp	/^    template <typename T> struct logical_and : binary_function<T, T, bool>$/;"	s	namespace:cv::cuda::device
logical_and	cudev/functional/functional.hpp	/^template <typename T> struct logical_and : binary_function<T, T, typename MakeVec<uchar, VecTraits<T>::cn>::type>$/;"	s	namespace:cv::cudev
logical_not	core/cuda/functional.hpp	/^        __host__ __device__ __forceinline__ logical_not() {}$/;"	f	struct:cv::cuda::device::logical_not
logical_not	core/cuda/functional.hpp	/^        __host__ __device__ __forceinline__ logical_not(const logical_not&) {}$/;"	f	struct:cv::cuda::device::logical_not
logical_not	core/cuda/functional.hpp	/^    template <typename T> struct logical_not : unary_function<T, bool>$/;"	s	namespace:cv::cuda::device
logical_not	cudev/functional/functional.hpp	/^template <typename T> struct logical_not : unary_function<T, typename MakeVec<uchar, VecTraits<T>::cn>::type>$/;"	s	namespace:cv::cudev
logical_or	core/cuda/functional.hpp	/^        __host__ __device__ __forceinline__ logical_or() {}$/;"	f	struct:cv::cuda::device::logical_or
logical_or	core/cuda/functional.hpp	/^        __host__ __device__ __forceinline__ logical_or(const logical_or&) {}$/;"	f	struct:cv::cuda::device::logical_or
logical_or	core/cuda/functional.hpp	/^    template <typename T> struct logical_or : binary_function<T, T, bool>$/;"	s	namespace:cv::cuda::device
logical_or	cudev/functional/functional.hpp	/^template <typename T> struct logical_or : binary_function<T, T, typename MakeVec<uchar, VecTraits<T>::cn>::type>$/;"	s	namespace:cv::cudev
loop	core/cuda/detail/reduce.hpp	/^            static __device__ void loop(Pointer smem, Reference val, unsigned int tid, Op op)$/;"	f	struct:cv::cuda::device::reduce_detail::Unroll
loop	core/cuda/detail/reduce.hpp	/^            static __device__ void loop(Pointer, Reference, unsigned int, Op)$/;"	f	struct:cv::cuda::device::reduce_detail::Unroll
loop	core/cuda/detail/reduce_key_val.hpp	/^            static __device__ void loop(KP skeys, KR key, VP svals, VR val, unsigned int tid, Cmp cmp)$/;"	f	struct:cv::cuda::device::reduce_key_val_detail::Unroll
loop	core/cuda/detail/reduce_key_val.hpp	/^            static __device__ void loop(KP, KR, VP, VR, unsigned int, Cmp)$/;"	f	struct:cv::cuda::device::reduce_key_val_detail::Unroll
loop	cudev/block/detail/reduce.hpp	/^        __device__ __forceinline__ static void loop(Pointer, Reference, uint, Op)$/;"	f	struct:cv::cudev::block_reduce_detail::Unroll
loop	cudev/block/detail/reduce.hpp	/^        __device__ static void loop(Pointer smem, Reference val, uint tid, Op op)$/;"	f	struct:cv::cudev::block_reduce_detail::Unroll
loop	cudev/block/detail/reduce_key_val.hpp	/^        __device__ __forceinline__ static void loop(KP, KR, VP, VR, uint, Cmp)$/;"	f	struct:cv::cudev::block_reduce_key_val_detail::Unroll
loop	cudev/block/detail/reduce_key_val.hpp	/^        __device__ static void loop(KP skeys, KR key, VP svals, VR val, uint tid, Cmp cmp)$/;"	f	struct:cv::cudev::block_reduce_key_val_detail::Unroll
loopShfl	core/cuda/detail/reduce.hpp	/^            static __device__ void loopShfl(Reference val, Op op, unsigned int N)$/;"	f	struct:cv::cuda::device::reduce_detail::Unroll
loopShfl	core/cuda/detail/reduce.hpp	/^            static __device__ void loopShfl(Reference, Op, unsigned int)$/;"	f	struct:cv::cuda::device::reduce_detail::Unroll
loopShfl	core/cuda/detail/reduce_key_val.hpp	/^            static __device__ void loopShfl(KR key, VR val, Cmp cmp, unsigned int N)$/;"	f	struct:cv::cuda::device::reduce_key_val_detail::Unroll
loopShfl	core/cuda/detail/reduce_key_val.hpp	/^            static __device__ void loopShfl(KR, VR, Cmp, unsigned int)$/;"	f	struct:cv::cuda::device::reduce_key_val_detail::Unroll
loopShfl	cudev/block/detail/reduce.hpp	/^        __device__ __forceinline__ static void loopShfl(Reference, Op, uint)$/;"	f	struct:cv::cudev::block_reduce_detail::Unroll
loopShfl	cudev/block/detail/reduce.hpp	/^        __device__ static void loopShfl(Reference val, Op op, uint N)$/;"	f	struct:cv::cudev::block_reduce_detail::Unroll
low	flann/kdtree_single_index.h	/^        DistanceType low, high;$/;"	m	struct:cvflann::KDTreeSingleIndex::Interval
lsh	flann/lsh_table.h	/^namespace lsh$/;"	n	namespace:cvflann
lutPtr	cudev/ptr2d/lut.hpp	/^__host__ LutPtrSz<typename PtrTraits<SrcPtr>::ptr_type, typename PtrTraits<TablePtr>::ptr_type> lutPtr(const SrcPtr& src, const TablePtr& tbl)$/;"	f	namespace:cv::cudev
lut_	cudev/expr/per_element_func.hpp	/^lut_(const SrcPtr& src, const TablePtr& tbl)$/;"	f	namespace:cv::cudev
m	core/mat.hpp	/^    const Mat* m;$/;"	m	class:cv::MatConstIterator
m	core/mat.hpp	/^    const SparseMat* m;$/;"	m	class:cv::SparseMatConstIterator
m	core/ocl.hpp	/^    UMat* m;$/;"	m	class:cv::ocl::KernelArg
m	ts.hpp	/^    const Mat* m;$/;"	m	struct:cvtest::MatInfo
m00	core/types.hpp	/^    CV_PROP_RW double  m00, m10, m01, m20, m11, m02, m30, m21, m12, m03;$/;"	m	class:cv::Moments
m00	imgproc/types_c.h	/^    double  m00, m10, m01, m20, m11, m02, m30, m21, m12, m03; \/**< spatial moments *\/$/;"	m	struct:CvMoments
m01	core/types.hpp	/^    CV_PROP_RW double  m00, m10, m01, m20, m11, m02, m30, m21, m12, m03;$/;"	m	class:cv::Moments
m01	imgproc/types_c.h	/^    double  m00, m10, m01, m20, m11, m02, m30, m21, m12, m03; \/**< spatial moments *\/$/;"	m	struct:CvMoments
m02	core/types.hpp	/^    CV_PROP_RW double  m00, m10, m01, m20, m11, m02, m30, m21, m12, m03;$/;"	m	class:cv::Moments
m02	imgproc/types_c.h	/^    double  m00, m10, m01, m20, m11, m02, m30, m21, m12, m03; \/**< spatial moments *\/$/;"	m	struct:CvMoments
m03	core/types.hpp	/^    CV_PROP_RW double  m00, m10, m01, m20, m11, m02, m30, m21, m12, m03;$/;"	m	class:cv::Moments
m03	imgproc/types_c.h	/^    double  m00, m10, m01, m20, m11, m02, m30, m21, m12, m03; \/**< spatial moments *\/$/;"	m	struct:CvMoments
m10	core/types.hpp	/^    CV_PROP_RW double  m00, m10, m01, m20, m11, m02, m30, m21, m12, m03;$/;"	m	class:cv::Moments
m10	imgproc/types_c.h	/^    double  m00, m10, m01, m20, m11, m02, m30, m21, m12, m03; \/**< spatial moments *\/$/;"	m	struct:CvMoments
m11	core/types.hpp	/^    CV_PROP_RW double  m00, m10, m01, m20, m11, m02, m30, m21, m12, m03;$/;"	m	class:cv::Moments
m11	imgproc/types_c.h	/^    double  m00, m10, m01, m20, m11, m02, m30, m21, m12, m03; \/**< spatial moments *\/$/;"	m	struct:CvMoments
m12	core/types.hpp	/^    CV_PROP_RW double  m00, m10, m01, m20, m11, m02, m30, m21, m12, m03;$/;"	m	class:cv::Moments
m12	imgproc/types_c.h	/^    double  m00, m10, m01, m20, m11, m02, m30, m21, m12, m03; \/**< spatial moments *\/$/;"	m	struct:CvMoments
m20	core/types.hpp	/^    CV_PROP_RW double  m00, m10, m01, m20, m11, m02, m30, m21, m12, m03;$/;"	m	class:cv::Moments
m20	imgproc/types_c.h	/^    double  m00, m10, m01, m20, m11, m02, m30, m21, m12, m03; \/**< spatial moments *\/$/;"	m	struct:CvMoments
m21	core/types.hpp	/^    CV_PROP_RW double  m00, m10, m01, m20, m11, m02, m30, m21, m12, m03;$/;"	m	class:cv::Moments
m21	imgproc/types_c.h	/^    double  m00, m10, m01, m20, m11, m02, m30, m21, m12, m03; \/**< spatial moments *\/$/;"	m	struct:CvMoments
m30	core/types.hpp	/^    CV_PROP_RW double  m00, m10, m01, m20, m11, m02, m30, m21, m12, m03;$/;"	m	class:cv::Moments
m30	imgproc/types_c.h	/^    double  m00, m10, m01, m20, m11, m02, m30, m21, m12, m03; \/**< spatial moments *\/$/;"	m	struct:CvMoments
magenta	viz/types.hpp	/^inline cv::viz::Color cv::viz::Color::magenta() { return Color(255,   0, 255); }$/;"	f	class:cv::viz::Color
magnitude_func	cudev/functional/functional.hpp	/^template <typename T> struct magnitude_func : binary_function<T, T, typename functional_detail::FloatType<T>::type>$/;"	s	namespace:cv::cudev
magnitude_sqr_func	cudev/functional/functional.hpp	/^template <typename T> struct magnitude_sqr_func : binary_function<T, T, typename functional_detail::FloatType<T>::type>$/;"	s	namespace:cv::cudev
make	core/cuda/vec_traits.hpp	/^        static __device__ __host__ __forceinline__ char make(char x) {return x;}$/;"	f	struct:cv::cuda::device::VecTraits
make	core/cuda/vec_traits.hpp	/^        static __device__ __host__ __forceinline__ char make(const char* x) {return *x;}$/;"	f	struct:cv::cuda::device::VecTraits
make	core/cuda/vec_traits.hpp	/^        static __device__ __host__ __forceinline__ char1 make(const schar* v) {return make_char1(v[0]);}$/;"	f	struct:cv::cuda::device::VecTraits
make	core/cuda/vec_traits.hpp	/^        static __device__ __host__ __forceinline__ char1 make(schar x) {return make_char1(x);}$/;"	f	struct:cv::cuda::device::VecTraits
make	core/cuda/vec_traits.hpp	/^        static __device__ __host__ __forceinline__ char2 make(const schar* v) {return make_char2(v[0], v[1]);}$/;"	f	struct:cv::cuda::device::VecTraits
make	core/cuda/vec_traits.hpp	/^        static __device__ __host__ __forceinline__ char2 make(schar x, schar y) {return make_char2(x, y);}$/;"	f	struct:cv::cuda::device::VecTraits
make	core/cuda/vec_traits.hpp	/^        static __device__ __host__ __forceinline__ char3 make(const schar* v) {return make_char3(v[0], v[1], v[2]);}$/;"	f	struct:cv::cuda::device::VecTraits
make	core/cuda/vec_traits.hpp	/^        static __device__ __host__ __forceinline__ char3 make(schar x, schar y, schar z) {return make_char3(x, y, z);}$/;"	f	struct:cv::cuda::device::VecTraits
make	core/cuda/vec_traits.hpp	/^        static __device__ __host__ __forceinline__ char4 make(const schar* v) {return make_char4(v[0], v[1], v[2], v[3]);}$/;"	f	struct:cv::cuda::device::VecTraits
make	core/cuda/vec_traits.hpp	/^        static __device__ __host__ __forceinline__ char4 make(schar x, schar y, schar z, schar w) {return make_char4(x, y, z, w);}$/;"	f	struct:cv::cuda::device::VecTraits
make	core/cuda/vec_traits.hpp	/^        static __device__ __host__ __forceinline__ char8 make(const schar* v) {return make_char8(v[0], v[1], v[2], v[3], v[4], v[5], v[6], v[7]);}$/;"	f	struct:cv::cuda::device::VecTraits
make	core/cuda/vec_traits.hpp	/^        static __device__ __host__ __forceinline__ char8 make(schar a0, schar a1, schar a2, schar a3, schar a4, schar a5, schar a6, schar a7) {return make_char8(a0, a1, a2, a3, a4, a5, a6, a7);}$/;"	f	struct:cv::cuda::device::VecTraits
make	core/cuda/vec_traits.hpp	/^        static __device__ __host__ __forceinline__ schar make(const schar* x) {return *x;}$/;"	f	struct:cv::cuda::device::VecTraits
make	core/cuda/vec_traits.hpp	/^        static __device__ __host__ __forceinline__ schar make(schar x) {return x;}$/;"	f	struct:cv::cuda::device::VecTraits
make	cudev/util/vec_traits.hpp	/^    __host__ __device__ __forceinline__ static char1 make(const schar* v) {return make_char1(v[0]);}$/;"	f	struct:cv::cudev::VecTraits
make	cudev/util/vec_traits.hpp	/^    __host__ __device__ __forceinline__ static char1 make(schar x) {return make_char1(x);}$/;"	f	struct:cv::cudev::VecTraits
make	cudev/util/vec_traits.hpp	/^    __host__ __device__ __forceinline__ static char2 make(const schar* v) {return make_char2(v[0], v[1]);}$/;"	f	struct:cv::cudev::VecTraits
make	cudev/util/vec_traits.hpp	/^    __host__ __device__ __forceinline__ static char2 make(schar x, schar y) {return make_char2(x, y);}$/;"	f	struct:cv::cudev::VecTraits
make	cudev/util/vec_traits.hpp	/^    __host__ __device__ __forceinline__ static char3 make(const schar* v) {return make_char3(v[0], v[1], v[2]);}$/;"	f	struct:cv::cudev::VecTraits
make	cudev/util/vec_traits.hpp	/^    __host__ __device__ __forceinline__ static char3 make(schar x, schar y, schar z) {return make_char3(x, y, z);}$/;"	f	struct:cv::cudev::VecTraits
make	cudev/util/vec_traits.hpp	/^    __host__ __device__ __forceinline__ static char4 make(const schar* v) {return make_char4(v[0], v[1], v[2], v[3]);}$/;"	f	struct:cv::cudev::VecTraits
make	cudev/util/vec_traits.hpp	/^    __host__ __device__ __forceinline__ static char4 make(schar x, schar y, schar z, schar w) {return make_char4(x, y, z, w);}$/;"	f	struct:cv::cudev::VecTraits
make	cudev/util/vec_traits.hpp	/^    __host__ __device__ __forceinline__ static schar make(const schar* x) {return *x;}$/;"	f	struct:cv::cudev::VecTraits
make	cudev/util/vec_traits.hpp	/^    __host__ __device__ __forceinline__ static schar make(schar x) {return x;}$/;"	f	struct:cv::cudev::VecTraits
makeExpr	cudev/expr/expr.hpp	/^__host__ Expr<Body> makeExpr(const Body& body)$/;"	f	namespace:cv::cudev
makePtr	core/ptr.inl.hpp	/^Ptr<T> makePtr()$/;"	f	namespace:cv
makePtr	core/ptr.inl.hpp	/^Ptr<T> makePtr(const A1& a1)$/;"	f	namespace:cv
makePtr	core/ptr.inl.hpp	/^Ptr<T> makePtr(const A1& a1, const A2& a2)$/;"	f	namespace:cv
makePtr	core/ptr.inl.hpp	/^Ptr<T> makePtr(const A1& a1, const A2& a2, const A3& a3)$/;"	f	namespace:cv
makePtr	core/ptr.inl.hpp	/^Ptr<T> makePtr(const A1& a1, const A2& a2, const A3& a3, const A4& a4)$/;"	f	namespace:cv
makePtr	core/ptr.inl.hpp	/^Ptr<T> makePtr(const A1& a1, const A2& a2, const A3& a3, const A4& a4, const A5& a5)$/;"	f	namespace:cv
makePtr	core/ptr.inl.hpp	/^Ptr<T> makePtr(const A1& a1, const A2& a2, const A3& a3, const A4& a4, const A5& a5, const A6& a6)$/;"	f	namespace:cv
makePtr	core/ptr.inl.hpp	/^Ptr<T> makePtr(const A1& a1, const A2& a2, const A3& a3, const A4& a4, const A5& a5, const A6& a6, const A7& a7)$/;"	f	namespace:cv
makePtr	core/ptr.inl.hpp	/^Ptr<T> makePtr(const A1& a1, const A2& a2, const A3& a3, const A4& a4, const A5& a5, const A6& a6, const A7& a7, const A8& a8)$/;"	f	namespace:cv
makePtr	core/ptr.inl.hpp	/^Ptr<T> makePtr(const A1& a1, const A2& a2, const A3& a3, const A4& a4, const A5& a5, const A6& a6, const A7& a7, const A8& a8, const A9& a9)$/;"	f	namespace:cv
makePtr	core/ptr.inl.hpp	/^Ptr<T> makePtr(const A1& a1, const A2& a2, const A3& a3, const A4& a4, const A5& a5, const A6& a6, const A7& a7, const A8& a8, const A9& a9, const A10& a10)$/;"	f	namespace:cv
make_char8	core/cuda/vec_traits.hpp	/^    static __host__ __device__ __forceinline__ char8 make_char8(schar a0, schar a1, schar a2, schar a3, schar a4, schar a5, schar a6, schar a7)$/;"	f	namespace:cv::cuda::device
make_double8	core/cuda/vec_traits.hpp	/^    static __host__ __device__ __forceinline__ double8 make_double8(double a0, double a1, double a2, double a3, double a4, double a5, double a6, double a7)$/;"	f	namespace:cv::cuda::device
make_float8	core/cuda/vec_traits.hpp	/^    static __host__ __device__ __forceinline__ float8 make_float8(float a0, float a1, float a2, float a3, float a4, float a5, float a6, float a7)$/;"	f	namespace:cv::cuda::device
make_int8	core/cuda/vec_traits.hpp	/^    static __host__ __device__ __forceinline__ int8 make_int8(int a0, int a1, int a2, int a3, int a4, int a5, int a6, int a7)$/;"	f	namespace:cv::cuda::device
make_linked_ptr	ts/ts_gtest.h	/^linked_ptr<T> make_linked_ptr(T* ptr) {$/;"	f	namespace:testing::internal
make_short8	core/cuda/vec_traits.hpp	/^    static __host__ __device__ __forceinline__ short8 make_short8(short a0, short a1, short a2, short a3, short a4, short a5, short a6, short a7)$/;"	f	namespace:cv::cuda::device
make_tuple	ts/ts_gtest.h	/^inline GTEST_10_TUPLE_(T) make_tuple(const T0& f0, const T1& f1, const T2& f2,$/;"	f	namespace:std::tr1
make_tuple	ts/ts_gtest.h	/^inline GTEST_1_TUPLE_(T) make_tuple(const T0& f0) {$/;"	f	namespace:std::tr1
make_tuple	ts/ts_gtest.h	/^inline GTEST_2_TUPLE_(T) make_tuple(const T0& f0, const T1& f1) {$/;"	f	namespace:std::tr1
make_tuple	ts/ts_gtest.h	/^inline GTEST_3_TUPLE_(T) make_tuple(const T0& f0, const T1& f1, const T2& f2) {$/;"	f	namespace:std::tr1
make_tuple	ts/ts_gtest.h	/^inline GTEST_4_TUPLE_(T) make_tuple(const T0& f0, const T1& f1, const T2& f2,$/;"	f	namespace:std::tr1
make_tuple	ts/ts_gtest.h	/^inline GTEST_5_TUPLE_(T) make_tuple(const T0& f0, const T1& f1, const T2& f2,$/;"	f	namespace:std::tr1
make_tuple	ts/ts_gtest.h	/^inline GTEST_6_TUPLE_(T) make_tuple(const T0& f0, const T1& f1, const T2& f2,$/;"	f	namespace:std::tr1
make_tuple	ts/ts_gtest.h	/^inline GTEST_7_TUPLE_(T) make_tuple(const T0& f0, const T1& f1, const T2& f2,$/;"	f	namespace:std::tr1
make_tuple	ts/ts_gtest.h	/^inline GTEST_8_TUPLE_(T) make_tuple(const T0& f0, const T1& f1, const T2& f2,$/;"	f	namespace:std::tr1
make_tuple	ts/ts_gtest.h	/^inline GTEST_9_TUPLE_(T) make_tuple(const T0& f0, const T1& f1, const T2& f2,$/;"	f	namespace:std::tr1
make_tuple	ts/ts_gtest.h	/^inline tuple<> make_tuple() { return tuple<>(); }$/;"	f	namespace:std::tr1
make_uchar8	core/cuda/vec_traits.hpp	/^    static __host__ __device__ __forceinline__ uchar8 make_uchar8(uchar a0, uchar a1, uchar a2, uchar a3, uchar a4, uchar a5, uchar a6, uchar a7)$/;"	f	namespace:cv::cuda::device
make_uint8	core/cuda/vec_traits.hpp	/^    static __host__ __device__ __forceinline__ uint8 make_uint8(uint a0, uint a1, uint a2, uint a3, uint a4, uint a5, uint a6, uint a7)$/;"	f	namespace:cv::cuda::device
make_ushort8	core/cuda/vec_traits.hpp	/^    static __host__ __device__ __forceinline__ ushort8 make_ushort8(ushort a0, ushort a1, ushort a2, ushort a3, ushort a4, ushort a5, ushort a6, ushort a7)$/;"	f	namespace:cv::cuda::device
map	core/types_c.h	/^        CvFileNodeHash* map; \/**< map (collection of named file nodes) *\/$/;"	m	union:CvFileNode::__anon149
map	cudev/ptr2d/remap.hpp	/^    MapPtr map;$/;"	m	struct:cv::cudev::RemapPtr1
mapBackward	stitching/detail/warpers_inl.hpp	/^void CompressedRectilinearPortraitProjector::mapBackward(float u, float v, float &x, float &y)$/;"	f	class:cv::detail::CompressedRectilinearPortraitProjector
mapBackward	stitching/detail/warpers_inl.hpp	/^void CompressedRectilinearProjector::mapBackward(float u, float v, float &x, float &y)$/;"	f	class:cv::detail::CompressedRectilinearProjector
mapBackward	stitching/detail/warpers_inl.hpp	/^void CylindricalPortraitProjector::mapBackward(float u0, float v0, float &x, float &y)$/;"	f	class:cv::detail::CylindricalPortraitProjector
mapBackward	stitching/detail/warpers_inl.hpp	/^void CylindricalProjector::mapBackward(float u, float v, float &x, float &y)$/;"	f	class:cv::detail::CylindricalProjector
mapBackward	stitching/detail/warpers_inl.hpp	/^void FisheyeProjector::mapBackward(float u, float v, float &x, float &y)$/;"	f	class:cv::detail::FisheyeProjector
mapBackward	stitching/detail/warpers_inl.hpp	/^void MercatorProjector::mapBackward(float u, float v, float &x, float &y)$/;"	f	class:cv::detail::MercatorProjector
mapBackward	stitching/detail/warpers_inl.hpp	/^void PaniniPortraitProjector::mapBackward(float u, float v, float &x, float &y)$/;"	f	class:cv::detail::PaniniPortraitProjector
mapBackward	stitching/detail/warpers_inl.hpp	/^void PaniniProjector::mapBackward(float u, float v, float &x, float &y)$/;"	f	class:cv::detail::PaniniProjector
mapBackward	stitching/detail/warpers_inl.hpp	/^void PlanePortraitProjector::mapBackward(float u0, float v0, float &x, float &y)$/;"	f	class:cv::detail::PlanePortraitProjector
mapBackward	stitching/detail/warpers_inl.hpp	/^void PlaneProjector::mapBackward(float u, float v, float &x, float &y)$/;"	f	class:cv::detail::PlaneProjector
mapBackward	stitching/detail/warpers_inl.hpp	/^void SphericalPortraitProjector::mapBackward(float u0, float v0, float &x, float &y)$/;"	f	class:cv::detail::SphericalPortraitProjector
mapBackward	stitching/detail/warpers_inl.hpp	/^void SphericalProjector::mapBackward(float u, float v, float &x, float &y)$/;"	f	class:cv::detail::SphericalProjector
mapBackward	stitching/detail/warpers_inl.hpp	/^void StereographicProjector::mapBackward(float u, float v, float &x, float &y)$/;"	f	class:cv::detail::StereographicProjector
mapBackward	stitching/detail/warpers_inl.hpp	/^void TransverseMercatorProjector::mapBackward(float u, float v, float &x, float &y)$/;"	f	class:cv::detail::TransverseMercatorProjector
mapForward	stitching/detail/warpers_inl.hpp	/^void CompressedRectilinearPortraitProjector::mapForward(float x, float y, float &u, float &v)$/;"	f	class:cv::detail::CompressedRectilinearPortraitProjector
mapForward	stitching/detail/warpers_inl.hpp	/^void CompressedRectilinearProjector::mapForward(float x, float y, float &u, float &v)$/;"	f	class:cv::detail::CompressedRectilinearProjector
mapForward	stitching/detail/warpers_inl.hpp	/^void CylindricalPortraitProjector::mapForward(float x, float y, float &u0, float &v0)$/;"	f	class:cv::detail::CylindricalPortraitProjector
mapForward	stitching/detail/warpers_inl.hpp	/^void CylindricalProjector::mapForward(float x, float y, float &u, float &v)$/;"	f	class:cv::detail::CylindricalProjector
mapForward	stitching/detail/warpers_inl.hpp	/^void FisheyeProjector::mapForward(float x, float y, float &u, float &v)$/;"	f	class:cv::detail::FisheyeProjector
mapForward	stitching/detail/warpers_inl.hpp	/^void MercatorProjector::mapForward(float x, float y, float &u, float &v)$/;"	f	class:cv::detail::MercatorProjector
mapForward	stitching/detail/warpers_inl.hpp	/^void PaniniPortraitProjector::mapForward(float x, float y, float &u, float &v)$/;"	f	class:cv::detail::PaniniPortraitProjector
mapForward	stitching/detail/warpers_inl.hpp	/^void PaniniProjector::mapForward(float x, float y, float &u, float &v)$/;"	f	class:cv::detail::PaniniProjector
mapForward	stitching/detail/warpers_inl.hpp	/^void PlanePortraitProjector::mapForward(float x, float y, float &u0, float &v0)$/;"	f	class:cv::detail::PlanePortraitProjector
mapForward	stitching/detail/warpers_inl.hpp	/^void PlaneProjector::mapForward(float x, float y, float &u, float &v)$/;"	f	class:cv::detail::PlaneProjector
mapForward	stitching/detail/warpers_inl.hpp	/^void SphericalPortraitProjector::mapForward(float x, float y, float &u0, float &v0)$/;"	f	class:cv::detail::SphericalPortraitProjector
mapForward	stitching/detail/warpers_inl.hpp	/^void SphericalProjector::mapForward(float x, float y, float &u, float &v)$/;"	f	class:cv::detail::SphericalProjector
mapForward	stitching/detail/warpers_inl.hpp	/^void StereographicProjector::mapForward(float x, float y, float &u, float &v)$/;"	f	class:cv::detail::StereographicProjector
mapForward	stitching/detail/warpers_inl.hpp	/^void TransverseMercatorProjector::mapForward(float x, float y, float &u, float &v)$/;"	f	class:cv::detail::TransverseMercatorProjector
mapx	cudev/ptr2d/remap.hpp	/^    MapXPtr mapx;$/;"	m	struct:cv::cudev::RemapPtr2
mapx_	videostab/wobble_suppression.hpp	/^    Mat_<float> mapx_, mapy_;$/;"	m	class:cv::videostab::MoreAccurateMotionWobbleSuppressor
mapx_	videostab/wobble_suppression.hpp	/^    cuda::GpuMat mapx_, mapy_;$/;"	m	class:cv::videostab::MoreAccurateMotionWobbleSuppressorGpu
mapy	cudev/ptr2d/remap.hpp	/^    MapYPtr mapy;$/;"	m	struct:cv::cudev::RemapPtr2
mapy_	videostab/wobble_suppression.hpp	/^    Mat_<float> mapx_, mapy_;$/;"	m	class:cv::videostab::MoreAccurateMotionWobbleSuppressor
mapy_	videostab/wobble_suppression.hpp	/^    cuda::GpuMat mapx_, mapy_;$/;"	m	class:cv::videostab::MoreAccurateMotionWobbleSuppressorGpu
markDeviceCopyObsolete	core/mat.inl.hpp	/^inline void UMatData::markDeviceCopyObsolete(bool flag)$/;"	f	class:cv::UMatData
markDeviceMemMapped	core/mat.inl.hpp	/^inline void UMatData::markDeviceMemMapped(bool flag)$/;"	f	class:cv::UMatData
markHostCopyObsolete	core/mat.inl.hpp	/^inline void UMatData::markHostCopyObsolete(bool flag)$/;"	f	class:cv::UMatData
maroon	viz/types.hpp	/^inline cv::viz::Color cv::viz::Color::maroon()     { return Color(0,     0, 128); }$/;"	f	class:cv::viz::Color
mask	calib3d/calib3d_c.h	/^    cv::Ptr<CvMat> mask;$/;"	m	class:CvLevMarq
mask	core/core_c.h	/^    int      mask;         \/* event mask *\/$/;"	m	struct:CvGraphScanner
mask	core/cuda/utility.hpp	/^        PtrStepb mask;$/;"	m	struct:cv::cuda::device::SingleMask
mask	core/cuda/utility.hpp	/^        PtrStepb mask;$/;"	m	struct:cv::cuda::device::SingleMaskChannels
mask	cudev/ptr2d/mask.hpp	/^    MaskPtr mask;$/;"	m	struct:cv::cudev::SingleMaskChannels
mask1_	stitching/detail/seam_finders.hpp	/^    Mat_<uchar> mask1_, mask2_;$/;"	m	class:cv::detail::DpSeamFinder
mask1_	videostab/inpainting.hpp	/^    Mat_<uchar> mask1_, transformedMask1_;$/;"	m	class:cv::videostab::MotionInpainter
mask2_	stitching/detail/seam_finders.hpp	/^    Mat_<uchar> mask1_, mask2_;$/;"	m	class:cv::detail::DpSeamFinder
maskCollection	core/cuda/utility.hpp	/^        const PtrStepb* maskCollection;$/;"	m	struct:cv::cuda::device::MaskCollection
maskROI	core/types_c.h	/^    struct _IplImage *maskROI;      \/**< Must be NULL. *\/$/;"	m	struct:_IplImage	typeref:struct:_IplImage::_IplImage
mask_	flann/lsh_table.h	/^    std::vector<size_t> mask_;$/;"	m	class:cvflann::lsh::LshTable
masks_	stitching/detail/seam_finders.hpp	/^    std::vector<UMat> masks_;$/;"	m	class:cv::detail::PairwiseSeamFinder
mat	core/core_c.h	/^CVAPI(CvMat*) cvCloneMat( const CvMat* mat );$/;"	v
mat	core/core_c.h	/^CVAPI(CvMatND*) cvCloneMatND( const CvMatND* mat );$/;"	v
mat	core/core_c.h	/^CVAPI(CvScalar) cvTrace( const CvArr* mat );$/;"	v
mat	core/core_c.h	/^CVAPI(CvSparseMat*) cvCloneSparseMat( const CvSparseMat* mat );$/;"	v
mat	core/core_c.h	/^CVAPI(double) cvDet( const CvArr* mat );$/;"	v
mat	core/core_c.h	/^CVAPI(void)  cvReleaseMat( CvMat** mat );$/;"	v
mat	core/core_c.h	/^CVAPI(void)  cvReleaseSparseMat( CvSparseMat** mat );$/;"	v
mat	core/types_c.h	/^    CvMatND mat;                    \/**< Embedded matrix header for array histograms. *\/$/;"	m	struct:CvHistogram
mat	core/types_c.h	/^    CvSparseMat* mat;$/;"	m	struct:CvSparseMatIterator
mat_type	core/matx.hpp	/^    typedef Matx<_Tp, m, n>               mat_type;$/;"	t	class:cv::Matx
matches	stitching/detail/matchers.hpp	/^    std::vector<DMatch> matches;$/;"	m	struct:cv::detail::MatchesInfo
matches_filter_	ts/ts_gtest.h	/^  bool matches_filter_;             \/\/ True if this test matches the$/;"	m	class:testing::TestInfo
matchingMask	stitching.hpp	/^    const cv::UMat& matchingMask() const { return matching_mask_; }$/;"	f	class:cv::Stitcher
matching_mask_	stitching.hpp	/^    cv::UMat matching_mask_;$/;"	m	class:cv::Stitcher
matrix	core/affine.hpp	/^        Mat4 matrix;$/;"	m	class:cv::Affine3
max	core/cuda/detail/color_detail.hpp	/^            static __device__ __forceinline__ T max() { return numeric_limits<T>::max(); }$/;"	f	struct:cv::cuda::device::color_detail::ColorChannel
max	core/cuda/detail/color_detail.hpp	/^            static __device__ __forceinline__ float max() { return 1.f; }$/;"	f	struct:cv::cuda::device::color_detail::ColorChannel
max	core/cuda/limits.hpp	/^    __device__ __forceinline__ static bool max() { return true;  }$/;"	f	struct:cv::cuda::device::numeric_limits
max	core/cuda/limits.hpp	/^    __device__ __forceinline__ static double max() { return DBL_MAX; }$/;"	f	struct:cv::cuda::device::numeric_limits
max	core/cuda/limits.hpp	/^    __device__ __forceinline__ static float max() { return FLT_MAX; }$/;"	f	struct:cv::cuda::device::numeric_limits
max	core/cuda/limits.hpp	/^    __device__ __forceinline__ static int max() { return INT_MAX; }$/;"	f	struct:cv::cuda::device::numeric_limits
max	core/cuda/limits.hpp	/^    __device__ __forceinline__ static short max() { return SHRT_MAX; }$/;"	f	struct:cv::cuda::device::numeric_limits
max	core/cuda/limits.hpp	/^    __device__ __forceinline__ static signed char max() { return SCHAR_MAX; }$/;"	f	struct:cv::cuda::device::numeric_limits
max	core/cuda/limits.hpp	/^    __device__ __forceinline__ static unsigned char max() { return UCHAR_MAX; }$/;"	f	struct:cv::cuda::device::numeric_limits
max	core/cuda/limits.hpp	/^    __device__ __forceinline__ static unsigned int max() { return UINT_MAX; }$/;"	f	struct:cv::cuda::device::numeric_limits
max	core/cuda/limits.hpp	/^    __device__ __forceinline__ static unsigned short max() { return USHRT_MAX; }$/;"	f	struct:cv::cuda::device::numeric_limits
max	core/cvdef.h	55;"	d
max	core/mat.inl.hpp	/^MatExpr max(const Mat_<_Tp>& a, const Mat_<_Tp>& b)$/;"	f	namespace:cv
max	core/mat.inl.hpp	/^MatExpr max(const Mat_<_Tp>& a, double s)$/;"	f	namespace:cv
max	core/mat.inl.hpp	/^MatExpr max(double s, const Mat_<_Tp>& a)$/;"	f	namespace:cv
max	core/private.hpp	68;"	d
max	cudev/functional/detail/color_cvt.hpp	/^        __device__ __forceinline__ static T max() { return numeric_limits<T>::max(); }$/;"	f	struct:cv::cudev::color_cvt_detail::ColorChannel
max	cudev/functional/detail/color_cvt.hpp	/^        __device__ __forceinline__ static float max() { return 1.f; }$/;"	f	struct:cv::cudev::color_cvt_detail::ColorChannel
max	cudev/grid/detail/reduce.hpp	/^        __device__ __forceinline__ static void max(R* ptr, R val)$/;"	f	struct:cv::cudev::grid_reduce_detail::AtomicUnroll
max	cudev/grid/detail/reduce.hpp	/^        __device__ __forceinline__ static void max(R* ptr, val_type val)$/;"	f	struct:cv::cudev::grid_reduce_detail::AtomicUnroll
max	cudev/util/limits.hpp	/^    __device__ __forceinline__ static bool max() { return true;  }$/;"	f	struct:cv::cudev::numeric_limits
max	cudev/util/limits.hpp	/^    __device__ __forceinline__ static double max() { return DBL_MAX; }$/;"	f	struct:cv::cudev::numeric_limits
max	cudev/util/limits.hpp	/^    __device__ __forceinline__ static float max() { return FLT_MAX; }$/;"	f	struct:cv::cudev::numeric_limits
max	cudev/util/limits.hpp	/^    __device__ __forceinline__ static int max() { return INT_MAX; }$/;"	f	struct:cv::cudev::numeric_limits
max	cudev/util/limits.hpp	/^    __device__ __forceinline__ static schar max() { return SCHAR_MAX; }$/;"	f	struct:cv::cudev::numeric_limits
max	cudev/util/limits.hpp	/^    __device__ __forceinline__ static short max() { return SHRT_MAX; }$/;"	f	struct:cv::cudev::numeric_limits
max	cudev/util/limits.hpp	/^    __device__ __forceinline__ static uchar max() { return UCHAR_MAX; }$/;"	f	struct:cv::cudev::numeric_limits
max	cudev/util/limits.hpp	/^    __device__ __forceinline__ static uint max() { return UINT_MAX; }$/;"	f	struct:cv::cudev::numeric_limits
max	cudev/util/limits.hpp	/^    __device__ __forceinline__ static ushort max() { return USHRT_MAX; }$/;"	f	struct:cv::cudev::numeric_limits
maxArea	features2d.hpp	/^      CV_PROP_RW float minArea, maxArea;$/;"	m	struct:cv::SimpleBlobDetector::Params
maxCircularity	features2d.hpp	/^      CV_PROP_RW float minCircularity, maxCircularity;$/;"	m	struct:cv::SimpleBlobDetector::Params
maxConvexity	features2d.hpp	/^      CV_PROP_RW float minConvexity, maxConvexity;$/;"	m	struct:cv::SimpleBlobDetector::Params
maxCount	core/types.hpp	/^    int maxCount; \/\/ the maximum number of iterations\/elements$/;"	m	class:cv::TermCriteria
maxInertiaRatio	features2d.hpp	/^      CV_PROP_RW float minInertiaRatio, maxInertiaRatio;$/;"	m	struct:cv::SimpleBlobDetector::Params
maxLevel	videostab/optical_flow.hpp	/^    virtual int maxLevel() const { return maxLevel_; }$/;"	f	class:cv::videostab::PyrLkOptFlowEstimatorBase
maxLevel_	videostab/optical_flow.hpp	/^    int maxLevel_;$/;"	m	class:cv::videostab::PyrLkOptFlowEstimatorBase
maxObjSize	objdetect/detection_based_tracker.hpp	/^                cv::Size maxObjSize;$/;"	m	class:cv::DetectionBasedTracker::IDetector
maxThreshold	features2d.hpp	/^      CV_PROP_RW float maxThreshold;$/;"	m	struct:cv::SimpleBlobDetector::Params
maxTrackLifetime	objdetect/detection_based_tracker.hpp	/^            int maxTrackLifetime;$/;"	m	struct:cv::DetectionBasedTracker::Parameters
maxVal	core/cuda/functional.hpp	/^        T maxVal;$/;"	m	struct:cv::cuda::device::thresh_binary_func
maxVal	core/cuda/functional.hpp	/^        T maxVal;$/;"	m	struct:cv::cuda::device::thresh_binary_inv_func
maxVal	cudev/functional/functional.hpp	/^    T maxVal;$/;"	m	struct:cv::cudev::ThreshBinaryFunc
maxVal	cudev/functional/functional.hpp	/^    T maxVal;$/;"	m	struct:cv::cudev::ThreshBinaryInvFunc
maxVal	cudev/grid/detail/reduce.hpp	/^    __host__ void maxVal(const SrcPtr& src, ResType* result, const MaskPtr& mask, int rows, int cols, cudaStream_t stream)$/;"	f	namespace:cv::cudev::grid_reduce_detail
maxVal	ml.hpp	/^    double maxVal; \/\/!< Maximum value of the statmodel parameter. Default value is 0.$/;"	m	class:cv::ml::ParamGrid
maxVal_	cudev/expr/reduction.hpp	/^maxVal_(const SrcPtr& src)$/;"	f	namespace:cv::cudev
max_	cudev/expr/per_element_func.hpp	/^max_(const SrcPtr1& src1, const SrcPtr2& src2)$/;"	f	namespace:cv::cudev
max_iter	core/types_c.h	/^    int    max_iter;$/;"	m	struct:CvTermCriteria
max_level	core/core_c.h	/^    int max_level;$/;"	m	struct:CvTreeNodeIterator
max_log_array_size	ts.hpp	/^    int max_log_array_size;$/;"	m	class:cvtest::ArrayTest
max_size	core/cvstd.hpp	/^    size_type max_size() const { return cv::max(static_cast<_Tp>(-1)\/sizeof(_Tp), 1); }$/;"	f	class:cv::Allocator
maxdiff	ts.hpp	/^    double maxdiff;$/;"	m	struct:cvtest::MatComparator
maximum	core/cuda/functional.hpp	/^        __host__ __device__ __forceinline__ maximum() {}$/;"	f	struct:cv::cuda::device::maximum
maximum	core/cuda/functional.hpp	/^        __host__ __device__ __forceinline__ maximum(const maximum&) {}$/;"	f	struct:cv::cuda::device::maximum
maximum	core/cuda/functional.hpp	/^    template <typename T> struct maximum : binary_function<T, T, T>$/;"	s	namespace:cv::cuda::device
maximum	cudev/functional/functional.hpp	/^template <typename T> struct maximum : binary_function<T, T, T>$/;"	s	namespace:cv::cudev
maxop	cudev/grid/detail/reduce.hpp	/^    template <typename T> struct maxop : maximum<T>$/;"	s	namespace:cv::cudev::grid_reduce_detail
mean	core.hpp	/^    Mat mean; \/\/!< mean value subtracted before the projection and added after the back projection$/;"	m	class:cv::PCA
mean	ts/ts_perf.hpp	/^    double mean;$/;"	m	struct:perf::performance_metrics
meanSplit	flann/kdtree_index.h	/^    void meanSplit(int* ind, int count, int& index, int& cutfeat, DistanceType& cutval)$/;"	f	class:cvflann::KDTreeIndex
mean_	flann/kdtree_index.h	/^    DistanceType* mean_;$/;"	m	class:cvflann::KDTreeIndex
mean_radius	flann/kmeans_index.h	/^        DistanceType mean_radius;$/;"	m	struct:cvflann::KMeansIndex::KMeansNode
measurementMatrix	video/tracking.hpp	/^    CV_PROP_RW Mat measurementMatrix;  \/\/!< measurement matrix (H)$/;"	m	class:cv::KalmanFilter
measurementNoiseCov	video/tracking.hpp	/^    CV_PROP_RW Mat measurementNoiseCov;\/\/!< measurement noise covariance matrix (R)$/;"	m	class:cv::KalmanFilter
measurement_matrix	video/tracking_c.h	/^    CvMat* measurement_matrix;  \/* measurement matrix (H) *\/$/;"	m	struct:CvKalman
measurement_noise_cov	video/tracking_c.h	/^    CvMat* measurement_noise_cov; \/* measurement noise covariance matrix (R) *\/$/;"	m	struct:CvKalman
median	ts/ts_perf.hpp	/^    double median;$/;"	m	struct:perf::performance_metrics
memType	cudalegacy/NCV.hpp	/^    NCVMemoryType memType() const {return this->_memtype;}$/;"	f	class:NCVMatrix
memType	cudalegacy/NCV.hpp	/^    NCVMemoryType memType() const {return this->_memtype;}$/;"	f	class:NCVVector
member_type	core.hpp	/^    typedef Mat member_type;$/;"	t	struct:cv::ParamType
member_type	core.hpp	/^    typedef Ptr<Algorithm> member_type;$/;"	t	struct:cv::ParamType
member_type	core.hpp	/^    typedef String member_type;$/;"	t	struct:cv::ParamType
member_type	core.hpp	/^    typedef bool member_type;$/;"	t	struct:cv::ParamType
member_type	core.hpp	/^    typedef double member_type;$/;"	t	struct:cv::ParamType
member_type	core.hpp	/^    typedef float member_type;$/;"	t	struct:cv::ParamType
member_type	core.hpp	/^    typedef int member_type;$/;"	t	struct:cv::ParamType
member_type	core.hpp	/^    typedef std::vector<Mat> member_type;$/;"	t	struct:cv::ParamType
member_type	core.hpp	/^    typedef uchar member_type;$/;"	t	struct:cv::ParamType
member_type	core.hpp	/^    typedef uint64 member_type;$/;"	t	struct:cv::ParamType
member_type	core.hpp	/^    typedef unsigned member_type;$/;"	t	struct:cv::ParamType
memoryCost	flann/autotuned_index.h	/^        float memoryCost;$/;"	m	struct:cvflann::AutotunedIndex::CostData
memoryCounter	flann/hierarchical_clustering_index.h	/^    int memoryCounter;$/;"	m	class:cvflann::HierarchicalClusteringIndex
memoryCounter_	flann/kmeans_index.h	/^    int memoryCounter_;$/;"	m	class:cvflann::KMeansIndex
memory_weight_	flann/autotuned_index.h	/^    float memory_weight_;$/;"	m	class:cvflann::AutotunedIndex
memtype	cudalegacy/NCV.hpp	/^    NCVMemoryType memtype;$/;"	m	struct:NCVMemPtr
merge	core/cuda/detail/reduce.hpp	/^            static __device__ void merge(const PointerTuple& smem, const ValTuple& val, unsigned int tid, unsigned int delta, const OpTuple& op)$/;"	f	struct:cv::cuda::device::reduce_detail::For
merge	core/cuda/detail/reduce.hpp	/^            static __device__ void merge(const PointerTuple&, const ValTuple&, unsigned int, unsigned int, const OpTuple&)$/;"	f	struct:cv::cuda::device::reduce_detail::For
merge	core/cuda/detail/reduce.hpp	/^        __device__ __forceinline__ void merge(const thrust::tuple<P0, P1, P2, P3, P4, P5, P6, P7, P8, P9>& smem,$/;"	f	namespace:cv::cuda::device::reduce_detail
merge	core/cuda/detail/reduce.hpp	/^        __device__ __forceinline__ void merge(volatile T* smem, T& val, unsigned int tid, unsigned int delta, const Op& op)$/;"	f	namespace:cv::cuda::device::reduce_detail
merge	core/cuda/detail/reduce_key_val.hpp	/^            static __device__ void merge(const KeyPointerTuple& skeys, const KeyReferenceTuple& key,$/;"	f	struct:cv::cuda::device::reduce_key_val_detail::For
merge	core/cuda/detail/reduce_key_val.hpp	/^            static __device__ void merge(const KeyPointerTuple&, const KeyReferenceTuple&,$/;"	f	struct:cv::cuda::device::reduce_key_val_detail::For
merge	core/cuda/detail/reduce_key_val.hpp	/^        __device__ __forceinline__ void merge(const thrust::tuple<KP0, KP1, KP2, KP3, KP4, KP5, KP6, KP7, KP8, KP9>& skeys,$/;"	f	namespace:cv::cuda::device::reduce_key_val_detail
merge	core/cuda/detail/reduce_key_val.hpp	/^        __device__ __forceinline__ void merge(volatile K* skeys, K& key, volatile V* svals, V& val, const Cmp& cmp, unsigned int tid, unsigned int delta)$/;"	f	namespace:cv::cuda::device::reduce_key_val_detail
merge	core/cuda/detail/reduce_key_val.hpp	/^        __device__ __forceinline__ void merge(volatile K* skeys, K& key,$/;"	f	namespace:cv::cuda::device::reduce_key_val_detail
merge	core/cuda/scan.hpp	/^        typedef WarpScan<INCLUSIVE, T, F>  merge;$/;"	t	struct:cv::cuda::device::WarpScan
merge	core/cuda/scan.hpp	/^        typedef WarpScanNoComp<INCLUSIVE, T, F> merge;$/;"	t	struct:cv::cuda::device::WarpScanNoComp
merge	cudev/block/detail/reduce.hpp	/^        __device__ __forceinline__ static void merge(const PointerTuple&, const ValTuple&, uint, uint, const OpTuple&)$/;"	f	struct:cv::cudev::block_reduce_detail::For
merge	cudev/block/detail/reduce.hpp	/^        __device__ static void merge(const PointerTuple& smem, const ValTuple& val, uint tid, uint delta, const OpTuple& op)$/;"	f	struct:cv::cudev::block_reduce_detail::For
merge	cudev/block/detail/reduce.hpp	/^    __device__ __forceinline__ void merge(const tuple<P0, P1, P2, P3, P4, P5, P6, P7, P8, P9>& smem,$/;"	f	namespace:cv::cudev::block_reduce_detail
merge	cudev/block/detail/reduce.hpp	/^    __device__ __forceinline__ void merge(volatile T* smem, T& val, uint tid, uint delta, const Op& op)$/;"	f	namespace:cv::cudev::block_reduce_detail
merge	cudev/block/detail/reduce_key_val.hpp	/^        __device__ static void merge(const KeyPointerTuple& skeys, const KeyReferenceTuple& key,$/;"	f	struct:cv::cudev::block_reduce_key_val_detail::For
merge	cudev/block/detail/reduce_key_val.hpp	/^        __device__ static void merge(const KeyPointerTuple&, const KeyReferenceTuple&,$/;"	f	struct:cv::cudev::block_reduce_key_val_detail::For
merge	cudev/block/detail/reduce_key_val.hpp	/^    __device__ __forceinline__ void merge(const tuple<KP0, KP1, KP2, KP3, KP4, KP5, KP6, KP7, KP8, KP9>& skeys,$/;"	f	namespace:cv::cudev::block_reduce_key_val_detail
merge	cudev/block/detail/reduce_key_val.hpp	/^    __device__ void merge(volatile K* skeys, K& key, volatile V* svals, V& val, const Cmp& cmp, uint tid, uint delta)$/;"	f	namespace:cv::cudev::block_reduce_key_val_detail
merge	cudev/block/detail/reduce_key_val.hpp	/^    __device__ void merge(volatile K* skeys, K& key,$/;"	f	namespace:cv::cudev::block_reduce_key_val_detail
merge	cudev/grid/detail/split_merge.hpp	/^        __host__ static void merge(const SrcPtrTuple& src, const GlobPtr<DstType>& dst, const MaskPtr& mask, int rows, int cols, cudaStream_t stream)$/;"	f	struct:cv::cudev::grid_split_merge_detail::MergeImpl
merge	cudev/warp/detail/reduce.hpp	/^        __device__ __forceinline__ static void merge(const PointerTuple&, const ValTuple&, uint, uint, const OpTuple&)$/;"	f	struct:cv::cudev::warp_reduce_detail::For
merge	cudev/warp/detail/reduce.hpp	/^        __device__ static void merge(const PointerTuple& smem, const ValTuple& val, uint tid, uint delta, const OpTuple& op)$/;"	f	struct:cv::cudev::warp_reduce_detail::For
merge	cudev/warp/detail/reduce.hpp	/^    __device__ __forceinline__ void merge(const tuple<P0, P1, P2, P3, P4, P5, P6, P7, P8, P9>& smem,$/;"	f	namespace:cv::cudev::warp_reduce_detail
merge	cudev/warp/detail/reduce.hpp	/^    __device__ __forceinline__ void merge(volatile T* smem, T& val, uint tid, uint delta, const Op& op)$/;"	f	namespace:cv::cudev::warp_reduce_detail
merge	cudev/warp/detail/reduce_key_val.hpp	/^        __device__ __forceinline__ static void merge(const KeyPointerTuple&, const KeyReferenceTuple&,$/;"	f	struct:cv::cudev::warp_reduce_key_val_detail::For
merge	cudev/warp/detail/reduce_key_val.hpp	/^        __device__ static void merge(const KeyPointerTuple& skeys, const KeyReferenceTuple& key,$/;"	f	struct:cv::cudev::warp_reduce_key_val_detail::For
merge	cudev/warp/detail/reduce_key_val.hpp	/^    __device__ __forceinline__ void merge(const tuple<KP0, KP1, KP2, KP3, KP4, KP5, KP6, KP7, KP8, KP9>& skeys,$/;"	f	namespace:cv::cudev::warp_reduce_key_val_detail
merge	cudev/warp/detail/reduce_key_val.hpp	/^    __device__ void merge(volatile K* skeys, K& key, volatile V* svals, V& val, const Cmp& cmp, uint tid, uint delta)$/;"	f	namespace:cv::cudev::warp_reduce_key_val_detail
merge	cudev/warp/detail/reduce_key_val.hpp	/^    __device__ void merge(volatile K* skeys, K& key,$/;"	f	namespace:cv::cudev::warp_reduce_key_val_detail
mergeC2	cudev/grid/detail/split_merge.hpp	/^    __global__ void mergeC2(const Src1Ptr src1, const Src2Ptr src2, GlobPtr<DstType> dst, const MaskPtr mask, const int rows, const int cols)$/;"	f	namespace:cv::cudev::grid_split_merge_detail
mergeC2	cudev/grid/detail/split_merge.hpp	/^    __host__ void mergeC2(const Src1Ptr& src1, const Src2Ptr& src2, const GlobPtr<DstType>& dst, const MaskPtr& mask, int rows, int cols, cudaStream_t stream)$/;"	f	namespace:cv::cudev::grid_split_merge_detail
mergeC3	cudev/grid/detail/split_merge.hpp	/^    __global__ void mergeC3(const Src1Ptr src1, const Src2Ptr src2, const Src3Ptr src3, GlobPtr<DstType> dst, const MaskPtr mask, const int rows, const int cols)$/;"	f	namespace:cv::cudev::grid_split_merge_detail
mergeC3	cudev/grid/detail/split_merge.hpp	/^    __host__ void mergeC3(const Src1Ptr& src1, const Src2Ptr& src2, const Src3Ptr& src3, const GlobPtr<DstType>& dst, const MaskPtr& mask, int rows, int cols, cudaStream_t stream)$/;"	f	namespace:cv::cudev::grid_split_merge_detail
mergeC4	cudev/grid/detail/split_merge.hpp	/^    __global__ void mergeC4(const Src1Ptr src1, const Src2Ptr src2, const Src3Ptr src3, const Src4Ptr src4, GlobPtr<DstType> dst, const MaskPtr mask, const int rows, const int cols)$/;"	f	namespace:cv::cudev::grid_split_merge_detail
mergeC4	cudev/grid/detail/split_merge.hpp	/^    __host__ void mergeC4(const Src1Ptr& src1, const Src2Ptr& src2, const Src3Ptr& src3, const Src4Ptr& src4, const GlobPtr<DstType>& dst, const MaskPtr& mask, int rows, int cols, cudaStream_t stream)$/;"	f	namespace:cv::cudev::grid_split_merge_detail
mergeShfl	core/cuda/detail/reduce.hpp	/^            static __device__ void mergeShfl(const ValTuple& val, unsigned int delta, unsigned int width, const OpTuple& op)$/;"	f	struct:cv::cuda::device::reduce_detail::For
mergeShfl	core/cuda/detail/reduce.hpp	/^            static __device__ void mergeShfl(const ValTuple&, unsigned int, unsigned int, const OpTuple&)$/;"	f	struct:cv::cuda::device::reduce_detail::For
mergeShfl	core/cuda/detail/reduce.hpp	/^        __device__ __forceinline__ void mergeShfl(T& val, unsigned int delta, unsigned int width, const Op& op)$/;"	f	namespace:cv::cuda::device::reduce_detail
mergeShfl	core/cuda/detail/reduce.hpp	/^        __device__ __forceinline__ void mergeShfl(const thrust::tuple<R0, R1, R2, R3, R4, R5, R6, R7, R8, R9>& val,$/;"	f	namespace:cv::cuda::device::reduce_detail
mergeShfl	core/cuda/detail/reduce_key_val.hpp	/^            static __device__ void mergeShfl(const KeyReferenceTuple& key, const ValReferenceTuple& val, const CmpTuple& cmp, unsigned int delta, int width)$/;"	f	struct:cv::cuda::device::reduce_key_val_detail::For
mergeShfl	core/cuda/detail/reduce_key_val.hpp	/^            static __device__ void mergeShfl(const KeyReferenceTuple&, const ValReferenceTuple&, const CmpTuple&, unsigned int, int)$/;"	f	struct:cv::cuda::device::reduce_key_val_detail::For
mergeShfl	core/cuda/detail/reduce_key_val.hpp	/^        __device__ __forceinline__ void mergeShfl(K& key, V& val, const Cmp& cmp, unsigned int delta, int width)$/;"	f	namespace:cv::cuda::device::reduce_key_val_detail
mergeShfl	core/cuda/detail/reduce_key_val.hpp	/^        __device__ __forceinline__ void mergeShfl(K& key,$/;"	f	namespace:cv::cuda::device::reduce_key_val_detail
mergeShfl	core/cuda/detail/reduce_key_val.hpp	/^        __device__ __forceinline__ void mergeShfl(const thrust::tuple<KR0, KR1, KR2, KR3, KR4, KR5, KR6, KR7, KR8, KR9>& key,$/;"	f	namespace:cv::cuda::device::reduce_key_val_detail
mergeShfl	cudev/block/detail/reduce.hpp	/^        __device__ __forceinline__ static void mergeShfl(const ValTuple&, uint, uint, const OpTuple&)$/;"	f	struct:cv::cudev::block_reduce_detail::For
mergeShfl	cudev/block/detail/reduce.hpp	/^        __device__ static void mergeShfl(const ValTuple& val, uint delta, uint width, const OpTuple& op)$/;"	f	struct:cv::cudev::block_reduce_detail::For
mergeShfl	cudev/block/detail/reduce.hpp	/^    __device__ __forceinline__ void mergeShfl(T& val, uint delta, uint width, const Op& op)$/;"	f	namespace:cv::cudev::block_reduce_detail
mergeShfl	cudev/block/detail/reduce.hpp	/^    __device__ __forceinline__ void mergeShfl(const tuple<R0, R1, R2, R3, R4, R5, R6, R7, R8, R9>& val,$/;"	f	namespace:cv::cudev::block_reduce_detail
mergeShfl	cudev/warp/detail/reduce.hpp	/^        __device__ __forceinline__ static void mergeShfl(const ValTuple&, uint, uint, const OpTuple&)$/;"	f	struct:cv::cudev::warp_reduce_detail::For
mergeShfl	cudev/warp/detail/reduce.hpp	/^        __device__ static void mergeShfl(const ValTuple& val, uint delta, uint width, const OpTuple& op)$/;"	f	struct:cv::cudev::warp_reduce_detail::For
mergeShfl	cudev/warp/detail/reduce.hpp	/^    __device__ __forceinline__ void mergeShfl(T& val, uint delta, uint width, const Op& op)$/;"	f	namespace:cv::cudev::warp_reduce_detail
mergeShfl	cudev/warp/detail/reduce.hpp	/^    __device__ __forceinline__ void mergeShfl(const tuple<R0, R1, R2, R3, R4, R5, R6, R7, R8, R9>& val,$/;"	f	namespace:cv::cudev::warp_reduce_detail
mergedDescriptors	features2d.hpp	/^        Mat mergedDescriptors;$/;"	m	class:cv::DescriptorMatcher::DescriptorCollection
mergedDescriptors	features2d.hpp	/^    DescriptorCollection mergedDescriptors;$/;"	m	class:cv::FlannBasedMatcher
message	ts/ts_gtest.h	/^    std::string const message;$/;"	m	class:testing::internal::AssertHelper::AssertHelperData::std
message	ts/ts_gtest.h	/^  const char* message() const { return message_.c_str(); }$/;"	f	class:testing::TestPartResult
message	ts/ts_gtest.h	/^  const char* message() const {$/;"	f	class:testing::AssertionResult
message_	ts/ts_gtest.h	/^  internal::scoped_ptr< ::std::string> message_;$/;"	m	class:testing::AssertionResult
message_	ts/ts_gtest.h	/^  std::string message_;  \/\/ The test failure message.$/;"	m	class:testing::TestPartResult
method_	videostab/inpainting.hpp	/^    int method_;$/;"	m	class:cv::videostab::ColorInpainter
metrics	ts/ts_perf.hpp	/^    performance_metrics metrics;$/;"	m	class:perf::TestBase
middleSplit	flann/kdtree_single_index.h	/^    void middleSplit(int* ind, int count, int& index, int& cutfeat, DistanceType& cutval, const BoundingBox& bbox)$/;"	f	class:cvflann::KDTreeSingleIndex
middleSplit_	flann/kdtree_single_index.h	/^    void middleSplit_(int* ind, int count, int& index, int& cutfeat, DistanceType& cutval, const BoundingBox& bbox)$/;"	f	class:cvflann::KDTreeSingleIndex
min	core/cuda/limits.hpp	/^    __device__ __forceinline__ static bool min() { return false; }$/;"	f	struct:cv::cuda::device::numeric_limits
min	core/cuda/limits.hpp	/^    __device__ __forceinline__ static double min() { return DBL_MIN; }$/;"	f	struct:cv::cuda::device::numeric_limits
min	core/cuda/limits.hpp	/^    __device__ __forceinline__ static float min() { return FLT_MIN; }$/;"	f	struct:cv::cuda::device::numeric_limits
min	core/cuda/limits.hpp	/^    __device__ __forceinline__ static int min() { return INT_MIN; }$/;"	f	struct:cv::cuda::device::numeric_limits
min	core/cuda/limits.hpp	/^    __device__ __forceinline__ static short min() { return SHRT_MIN; }$/;"	f	struct:cv::cuda::device::numeric_limits
min	core/cuda/limits.hpp	/^    __device__ __forceinline__ static signed char min() { return SCHAR_MIN; }$/;"	f	struct:cv::cuda::device::numeric_limits
min	core/cuda/limits.hpp	/^    __device__ __forceinline__ static unsigned char min() { return 0; }$/;"	f	struct:cv::cuda::device::numeric_limits
min	core/cuda/limits.hpp	/^    __device__ __forceinline__ static unsigned int min() { return 0; }$/;"	f	struct:cv::cuda::device::numeric_limits
min	core/cuda/limits.hpp	/^    __device__ __forceinline__ static unsigned short min() { return 0; }$/;"	f	struct:cv::cuda::device::numeric_limits
min	core/cvdef.h	54;"	d
min	core/mat.inl.hpp	/^MatExpr min(const Mat_<_Tp>& a, const Mat_<_Tp>& b)$/;"	f	namespace:cv
min	core/mat.inl.hpp	/^MatExpr min(const Mat_<_Tp>& a, double s)$/;"	f	namespace:cv
min	core/mat.inl.hpp	/^MatExpr min(double s, const Mat_<_Tp>& a)$/;"	f	namespace:cv
min	core/private.hpp	67;"	d
min	cudev/grid/detail/reduce.hpp	/^        __device__ __forceinline__ static void min(R* ptr, R val)$/;"	f	struct:cv::cudev::grid_reduce_detail::AtomicUnroll
min	cudev/grid/detail/reduce.hpp	/^        __device__ __forceinline__ static void min(R* ptr, val_type val)$/;"	f	struct:cv::cudev::grid_reduce_detail::AtomicUnroll
min	cudev/util/limits.hpp	/^    __device__ __forceinline__ static bool min() { return false; }$/;"	f	struct:cv::cudev::numeric_limits
min	cudev/util/limits.hpp	/^    __device__ __forceinline__ static double min() { return DBL_MIN; }$/;"	f	struct:cv::cudev::numeric_limits
min	cudev/util/limits.hpp	/^    __device__ __forceinline__ static float min() { return FLT_MIN; }$/;"	f	struct:cv::cudev::numeric_limits
min	cudev/util/limits.hpp	/^    __device__ __forceinline__ static int min() { return INT_MIN; }$/;"	f	struct:cv::cudev::numeric_limits
min	cudev/util/limits.hpp	/^    __device__ __forceinline__ static schar min() { return SCHAR_MIN; }$/;"	f	struct:cv::cudev::numeric_limits
min	cudev/util/limits.hpp	/^    __device__ __forceinline__ static short min() { return SHRT_MIN; }$/;"	f	struct:cv::cudev::numeric_limits
min	cudev/util/limits.hpp	/^    __device__ __forceinline__ static uchar min() { return 0; }$/;"	f	struct:cv::cudev::numeric_limits
min	cudev/util/limits.hpp	/^    __device__ __forceinline__ static uint min() { return 0; }$/;"	f	struct:cv::cudev::numeric_limits
min	cudev/util/limits.hpp	/^    __device__ __forceinline__ static ushort min() { return 0; }$/;"	f	struct:cv::cudev::numeric_limits
min	ts/ts_perf.hpp	/^    double min;$/;"	m	struct:perf::performance_metrics
minArea	cudalegacy.hpp	/^    float minArea; \/\/!< Discard foreground blobs whose bounding box is smaller than this threshold.$/;"	m	struct:cv::cuda::FGDParams
minArea	features2d.hpp	/^      CV_PROP_RW float minArea, maxArea;$/;"	m	struct:cv::SimpleBlobDetector::Params
minCircularity	features2d.hpp	/^      CV_PROP_RW float minCircularity, maxCircularity;$/;"	m	struct:cv::SimpleBlobDetector::Params
minConvexity	features2d.hpp	/^      CV_PROP_RW float minConvexity, maxConvexity;$/;"	m	struct:cv::SimpleBlobDetector::Params
minDetectionPeriod	objdetect/detection_based_tracker.hpp	/^            int minDetectionPeriod; \/\/the minimal time between run of the big object detector (on the whole frame) in ms (1000 mean 1 sec), default=0$/;"	m	struct:cv::DetectionBasedTracker::Parameters
minDisparity	calib3d/calib3d_c.h	/^    int minDisparity;  \/\/ minimum disparity (can be negative)$/;"	m	struct:CvStereoBMState
minDistBetweenBlobs	features2d.hpp	/^      CV_PROP_RW float minDistBetweenBlobs;$/;"	m	struct:cv::SimpleBlobDetector::Params
minDist_	stitching/detail/seam_finders.hpp	/^        int minDist_;$/;"	m	class:cv::detail::DpSeamFinder::ClosePoints
minInertiaRatio	features2d.hpp	/^      CV_PROP_RW float minInertiaRatio, maxInertiaRatio;$/;"	m	struct:cv::SimpleBlobDetector::Params
minInlierRatio	videostab/global_motion.hpp	/^    float minInlierRatio() const { return minInlierRatio_; }$/;"	f	class:cv::videostab::MotionEstimatorRansacL2
minInlierRatio_	videostab/global_motion.hpp	/^    float minInlierRatio_;$/;"	m	class:cv::videostab::MotionEstimatorRansacL2
minIters	ts/ts_perf.hpp	/^    unsigned int minIters;$/;"	m	class:perf::TestBase
minMaxLoc	cudev/grid/detail/minmaxloc.hpp	/^    __host__ void minMaxLoc(const SrcPtr& src, ResType* minVal, ResType* maxVal, int* minLoc, int* maxLoc, const MaskPtr& mask, int rows, int cols, cudaStream_t stream)$/;"	f	namespace:cv::cudev::grid_minmaxloc_detail
minMaxLoc_pass_1	cudev/grid/detail/minmaxloc.hpp	/^    __global__ void minMaxLoc_pass_1(const SrcPtr src, ResType* minVal, ResType* maxVal, int* minLoc, int* maxLoc, const MaskPtr mask, const int rows, const int cols, const int patch_y, const int patch_x)$/;"	f	namespace:cv::cudev::grid_minmaxloc_detail
minMaxLoc_pass_2	cudev/grid/detail/minmaxloc.hpp	/^    __global__ void minMaxLoc_pass_2(T* minMal, T* maxVal, int* minLoc, int* maxLoc, int count)$/;"	f	namespace:cv::cudev::grid_minmaxloc_detail
minMaxVal	cudev/grid/detail/reduce.hpp	/^    __host__ void minMaxVal(const SrcPtr& src, ResType* result, const MaskPtr& mask, int rows, int cols, cudaStream_t stream)$/;"	f	namespace:cv::cudev::grid_reduce_detail
minMaxVal_	cudev/expr/reduction.hpp	/^minMaxVal_(const SrcPtr& src)$/;"	f	namespace:cv::cudev
minNeighbours	objdetect/detection_based_tracker.hpp	/^                int minNeighbours;$/;"	m	class:cv::DetectionBasedTracker::IDetector
minObjSize	objdetect/detection_based_tracker.hpp	/^                cv::Size minObjSize;$/;"	m	class:cv::DetectionBasedTracker::IDetector
minRepeatability	features2d.hpp	/^      CV_PROP_RW size_t minRepeatability;$/;"	m	struct:cv::SimpleBlobDetector::Params
minThreshold	features2d.hpp	/^      CV_PROP_RW float minThreshold;$/;"	m	struct:cv::SimpleBlobDetector::Params
minVal	cudev/grid/detail/reduce.hpp	/^    __host__ void minVal(const SrcPtr& src, ResType* result, const MaskPtr& mask, int rows, int cols, cudaStream_t stream)$/;"	f	namespace:cv::cudev::grid_reduce_detail
minVal	ml.hpp	/^    double minVal; \/\/!< Minimum value of the statmodel parameter. Default value is 0.$/;"	m	class:cv::ml::ParamGrid
minVal_	cudev/expr/reduction.hpp	/^minVal_(const SrcPtr& src)$/;"	f	namespace:cv::cudev
min_	cudev/expr/per_element_func.hpp	/^min_(const SrcPtr1& src1, const SrcPtr2& src2)$/;"	f	namespace:cv::cudev
min_log_array_size	ts.hpp	/^    int min_log_array_size;$/;"	m	class:cvtest::ArrayTest
mindist	flann/result_set.h	/^    DistanceType mindist;     \/* Minimum distance to query for all nodes below. *\/$/;"	m	struct:cvflann::BranchStruct
minimum	core/cuda/functional.hpp	/^        __host__ __device__ __forceinline__ minimum() {}$/;"	f	struct:cv::cuda::device::minimum
minimum	core/cuda/functional.hpp	/^        __host__ __device__ __forceinline__ minimum(const minimum&) {}$/;"	f	struct:cv::cuda::device::minimum
minimum	core/cuda/functional.hpp	/^    template <typename T> struct minimum : binary_function<T, T, T>$/;"	s	namespace:cv::cuda::device
minimum	cudev/functional/functional.hpp	/^template <typename T> struct minimum : binary_function<T, T, T>$/;"	s	namespace:cv::cudev
minop	cudev/grid/detail/reduce.hpp	/^    template <typename T> struct minop : minimum<T>$/;"	s	namespace:cv::cudev::grid_reduce_detail
minus	core/cuda/functional.hpp	/^        __host__ __device__ __forceinline__ minus() {}$/;"	f	struct:cv::cuda::device::minus
minus	core/cuda/functional.hpp	/^        __host__ __device__ __forceinline__ minus(const minus&) {}$/;"	f	struct:cv::cuda::device::minus
minus	core/cuda/functional.hpp	/^    template <typename T> struct minus : binary_function<T, T, T>$/;"	s	namespace:cv::cuda::device
minus	cudev/functional/functional.hpp	/^template <typename T> struct minus : binary_function<T, T, T>$/;"	s	namespace:cv::cudev
minusDelta	imgproc.hpp	/^    int minusDelta, plusDelta;$/;"	m	class:cv::LineIterator
minusStep	imgproc.hpp	/^    int minusStep, plusStep;$/;"	m	class:cv::LineIterator
minus_delta	core/types_c.h	/^    int  minus_delta;$/;"	m	struct:CvLineIterator
minus_step	core/types_c.h	/^    int  minus_step;$/;"	m	struct:CvLineIterator
missingValue	ml.hpp	/^    static inline float missingValue() { return FLT_MAX; }$/;"	f	class:cv::ml::TrainData
ml	ml.hpp	/^namespace ml$/;"	n	namespace:cv
mlab	viz/types.hpp	/^inline cv::viz::Color cv::viz::Color::mlab()    { return Color(255, 128, 128); }$/;"	f	class:cv::viz::Color
model_	videostab/motion_stabilizing.hpp	/^    MotionModel model_;$/;"	m	class:cv::videostab::LpMotionStabilizer
modifiers	viz/types.hpp	/^            int modifiers;$/;"	m	class:cv::viz::KeyboardEvent
modifiers	viz/types.hpp	/^            int modifiers;$/;"	m	class:cv::viz::MouseEvent
modulus	core/cuda/functional.hpp	/^        __host__ __device__ __forceinline__ modulus() {}$/;"	f	struct:cv::cuda::device::modulus
modulus	core/cuda/functional.hpp	/^        __host__ __device__ __forceinline__ modulus(const modulus&) {}$/;"	f	struct:cv::cuda::device::modulus
modulus	core/cuda/functional.hpp	/^    template <typename T> struct modulus : binary_function<T, T, T>$/;"	s	namespace:cv::cuda::device
modulus	cudev/functional/functional.hpp	/^template <typename T> struct modulus : binary_function<T, T, T>$/;"	s	namespace:cv::cudev
morphologyDefaultBorderValue	imgproc.hpp	/^static inline Scalar morphologyDefaultBorderValue() { return Scalar::all(DBL_MAX); }$/;"	f	namespace:cv
motionEstimator	videostab/stabilizer.hpp	/^    Ptr<ImageMotionEstimatorBase> motionEstimator() const { return motionEstimator_; }$/;"	f	class:cv::videostab::StabilizerBase
motionEstimator	videostab/wobble_suppression.hpp	/^    Ptr<ImageMotionEstimatorBase> motionEstimator() const { return motionEstimator_; }$/;"	f	class:cv::videostab::WobbleSuppressorBase
motionEstimator_	videostab/global_motion.hpp	/^    Ptr<ImageMotionEstimatorBase> motionEstimator_;$/;"	m	class:cv::videostab::ToFileMotionWriter
motionEstimator_	videostab/global_motion.hpp	/^    Ptr<MotionEstimatorBase> motionEstimator_;$/;"	m	class:cv::videostab::KeypointBasedMotionEstimator
motionEstimator_	videostab/global_motion.hpp	/^    Ptr<MotionEstimatorBase> motionEstimator_;$/;"	m	class:cv::videostab::KeypointBasedMotionEstimatorGpu
motionEstimator_	videostab/stabilizer.hpp	/^    Ptr<ImageMotionEstimatorBase> motionEstimator_;$/;"	m	class:cv::videostab::StabilizerBase
motionEstimator_	videostab/wobble_suppression.hpp	/^    Ptr<ImageMotionEstimatorBase> motionEstimator_;$/;"	m	class:cv::videostab::WobbleSuppressorBase
motionFilter	videostab/stabilizer.hpp	/^    Ptr<MotionFilterBase> motionFilter() const { return motionFilter_; }$/;"	f	class:cv::videostab::OnePassStabilizer
motionFilter_	videostab/stabilizer.hpp	/^    Ptr<MotionFilterBase> motionFilter_;$/;"	m	class:cv::videostab::OnePassStabilizer
motionModel	videostab/global_motion.hpp	/^    virtual MotionModel motionModel() const { return motionEstimator_->motionModel(); }$/;"	f	class:cv::videostab::KeypointBasedMotionEstimator
motionModel	videostab/global_motion.hpp	/^    virtual MotionModel motionModel() const { return motionEstimator_->motionModel(); }$/;"	f	class:cv::videostab::KeypointBasedMotionEstimatorGpu
motionModel	videostab/global_motion.hpp	/^    virtual MotionModel motionModel() const { return motionEstimator_->motionModel(); }$/;"	f	class:cv::videostab::ToFileMotionWriter
motionModel	videostab/global_motion.hpp	/^    virtual MotionModel motionModel() const { return motionModel_; }$/;"	f	class:cv::videostab::ImageMotionEstimatorBase
motionModel	videostab/global_motion.hpp	/^    virtual MotionModel motionModel() const { return motionModel_; }$/;"	f	class:cv::videostab::MotionEstimatorBase
motionModel	videostab/inpainting.hpp	/^    virtual MotionModel motionModel() const { return motionModel_; }$/;"	f	class:cv::videostab::InpainterBase
motionModel	videostab/motion_stabilizing.hpp	/^    MotionModel motionModel() const { return model_; }$/;"	f	class:cv::videostab::LpMotionStabilizer
motionModel_	videostab/global_motion.hpp	/^    MotionModel motionModel_;$/;"	m	class:cv::videostab::ImageMotionEstimatorBase
motionModel_	videostab/global_motion.hpp	/^    MotionModel motionModel_;$/;"	m	class:cv::videostab::MotionEstimatorBase
motionModel_	videostab/inpainting.hpp	/^    MotionModel motionModel_;$/;"	m	class:cv::videostab::InpainterBase
motionStabilizer	videostab/stabilizer.hpp	/^    Ptr<IMotionStabilizer> motionStabilizer() const { return motionStabilizer_; }$/;"	f	class:cv::videostab::TwoPassStabilizer
motionStabilizer_	videostab/stabilizer.hpp	/^    Ptr<IMotionStabilizer> motionStabilizer_;$/;"	m	class:cv::videostab::TwoPassStabilizer
motions	videostab/deblurring.hpp	/^    virtual const std::vector<Mat>& motions() const { return *motions_; }$/;"	f	class:cv::videostab::DeblurerBase
motions	videostab/inpainting.hpp	/^    virtual const std::vector<Mat>& motions() const { return *motions_; }$/;"	f	class:cv::videostab::InpainterBase
motions	videostab/wobble_suppression.hpp	/^    virtual const std::vector<Mat>& motions() const { return *motions_; }$/;"	f	class:cv::videostab::WobbleSuppressorBase
motions2	videostab/wobble_suppression.hpp	/^    virtual const std::vector<Mat>& motions2() const { return *motions2_; }$/;"	f	class:cv::videostab::WobbleSuppressorBase
motions2_	videostab/stabilizer.hpp	/^    std::vector<Mat> motions2_;$/;"	m	class:cv::videostab::TwoPassStabilizer
motions2_	videostab/wobble_suppression.hpp	/^    const std::vector<Mat> *motions2_;$/;"	m	class:cv::videostab::WobbleSuppressorBase
motions_	videostab/deblurring.hpp	/^    const std::vector<Mat> *motions_;$/;"	m	class:cv::videostab::DeblurerBase
motions_	videostab/inpainting.hpp	/^    const std::vector<Mat> *motions_;$/;"	m	class:cv::videostab::InpainterBase
motions_	videostab/stabilizer.hpp	/^    std::vector<Mat> motions_; \/\/ motions_[i] is the motion from i-th to i+1-th frame$/;"	m	class:cv::videostab::StabilizerBase
motions_	videostab/wobble_suppression.hpp	/^    const std::vector<Mat> *motions_;$/;"	m	class:cv::videostab::WobbleSuppressorBase
move	flann/any.h	/^    virtual void move(void* const* src, void** dest) { *dest = *src; }$/;"	f	struct:cvflann::anyimpl::small_any_policy
move	flann/any.h	/^    virtual void move(void* const* src, void** dest)$/;"	f	struct:cvflann::anyimpl::big_any_policy
mpi	flann/hdf5.h	/^namespace mpi$/;"	n	namespace:cvflann
msg	core.hpp	/^    String msg; \/\/\/< the formatted error message$/;"	m	class:cv::Exception
mti	core.hpp	/^    int mti;$/;"	m	class:cv::RNG_MT19937
mtx	flann/kmeans_index.h	/^        cv::Mutex& mtx;$/;"	m	class:cvflann::KMeansIndex::KMeansDistanceComputer
mu02	core/types.hpp	/^    CV_PROP_RW double  mu20, mu11, mu02, mu30, mu21, mu12, mu03;$/;"	m	class:cv::Moments
mu02	imgproc/types_c.h	/^    double  mu20, mu11, mu02, mu30, mu21, mu12, mu03; \/**< central moments *\/$/;"	m	struct:CvMoments
mu03	core/types.hpp	/^    CV_PROP_RW double  mu20, mu11, mu02, mu30, mu21, mu12, mu03;$/;"	m	class:cv::Moments
mu03	imgproc/types_c.h	/^    double  mu20, mu11, mu02, mu30, mu21, mu12, mu03; \/**< central moments *\/$/;"	m	struct:CvMoments
mu11	core/types.hpp	/^    CV_PROP_RW double  mu20, mu11, mu02, mu30, mu21, mu12, mu03;$/;"	m	class:cv::Moments
mu11	imgproc/types_c.h	/^    double  mu20, mu11, mu02, mu30, mu21, mu12, mu03; \/**< central moments *\/$/;"	m	struct:CvMoments
mu12	core/types.hpp	/^    CV_PROP_RW double  mu20, mu11, mu02, mu30, mu21, mu12, mu03;$/;"	m	class:cv::Moments
mu12	imgproc/types_c.h	/^    double  mu20, mu11, mu02, mu30, mu21, mu12, mu03; \/**< central moments *\/$/;"	m	struct:CvMoments
mu20	core/types.hpp	/^    CV_PROP_RW double  mu20, mu11, mu02, mu30, mu21, mu12, mu03;$/;"	m	class:cv::Moments
mu20	imgproc/types_c.h	/^    double  mu20, mu11, mu02, mu30, mu21, mu12, mu03; \/**< central moments *\/$/;"	m	struct:CvMoments
mu21	core/types.hpp	/^    CV_PROP_RW double  mu20, mu11, mu02, mu30, mu21, mu12, mu03;$/;"	m	class:cv::Moments
mu21	imgproc/types_c.h	/^    double  mu20, mu11, mu02, mu30, mu21, mu12, mu03; \/**< central moments *\/$/;"	m	struct:CvMoments
mu30	core/types.hpp	/^    CV_PROP_RW double  mu20, mu11, mu02, mu30, mu21, mu12, mu03;$/;"	m	class:cv::Moments
mu30	imgproc/types_c.h	/^    double  mu20, mu11, mu02, mu30, mu21, mu12, mu03; \/**< central moments *\/$/;"	m	struct:CvMoments
mul	core/matx.hpp	/^Matx<_Tp, m, n> Matx<_Tp, m, n>::mul(const Matx<_Tp, m, n>& a) const$/;"	f	class:cv::Matx
mul	core/matx.hpp	/^Vec<_Tp, cn> Vec<_Tp, cn>::mul(const Vec<_Tp, cn>& v) const$/;"	f	class:cv::Vec
mul	core/types.hpp	/^Scalar_<_Tp> Scalar_<_Tp>::mul(const Scalar_<_Tp>& a, double scale ) const$/;"	f	class:cv::Scalar_
multi_probe_level_	flann/lsh_index.h	/^    unsigned int multi_probe_level_;$/;"	m	class:cvflann::LshIndex
multiplies	core/cuda/functional.hpp	/^        __host__ __device__ __forceinline__ multiplies() {}$/;"	f	struct:cv::cuda::device::multiplies
multiplies	core/cuda/functional.hpp	/^        __host__ __device__ __forceinline__ multiplies(const multiplies&) {}$/;"	f	struct:cv::cuda::device::multiplies
multiplies	core/cuda/functional.hpp	/^    template <typename T> struct multiplies : binary_function<T, T, T>$/;"	s	namespace:cv::cuda::device
multiplies	cudev/functional/functional.hpp	/^template <typename T> struct multiplies : binary_function<T, T, T>$/;"	s	namespace:cv::cudev
mustEstTrimRatio_	videostab/stabilizer.hpp	/^    bool mustEstTrimRatio_;$/;"	m	class:cv::videostab::TwoPassStabilizer
mustEstimateTrimaRatio	videostab/stabilizer.hpp	/^    bool mustEstimateTrimaRatio() const { return mustEstTrimRatio_; }$/;"	f	class:cv::videostab::TwoPassStabilizer
mutex	core/utility.hpp	/^    Mutex* mutex;$/;"	m	class:cv::AutoLock
mutex_	ts/ts_gtest.h	/^  MutexBase* const mutex_;$/;"	m	class:std::tr1::GTestMutexLock
mutex_	ts/ts_gtest.h	/^  mutable internal::Mutex mutex_;$/;"	m	class:testing::UnitTest
mutex_	ts/ts_gtest.h	/^  pthread_mutex_t mutex_;  \/\/ The underlying pthread mutex.$/;"	m	class:std::tr1::MutexBase
mutex_	ts/ts_gtest.h	/^  pthread_mutex_t mutex_;$/;"	m	class:std::tr1::Notification
mySum	core/cuda/vec_distance.hpp	/^        float mySum;$/;"	m	struct:cv::cuda::device::L1Dist
mySum	core/cuda/vec_distance.hpp	/^        float mySum;$/;"	m	struct:cv::cuda::device::L2Dist
mySum	core/cuda/vec_distance.hpp	/^        int mySum;$/;"	m	struct:cv::cuda::device::HammingDist
mySum	core/cuda/vec_distance.hpp	/^        int mySum;$/;"	m	struct:cv::cuda::device::L1Dist
mySum	cudev/block/vec_distance.hpp	/^    result_type mySum;$/;"	m	struct:cv::cudev::NormHamming
mySum	cudev/block/vec_distance.hpp	/^    result_type mySum;$/;"	m	struct:cv::cudev::NormL1
mySum	cudev/block/vec_distance.hpp	/^    result_type mySum;$/;"	m	struct:cv::cudev::NormL2
mymax	cudev/grid/detail/reduce.hpp	/^        work_type mymax;$/;"	m	struct:cv::cudev::grid_reduce_detail::MinMaxReductor
mymin	cudev/grid/detail/reduce.hpp	/^        work_type mymin;$/;"	m	struct:cv::cudev::grid_reduce_detail::MinMaxReductor
myval	cudev/grid/detail/reduce.hpp	/^        work_type myval;$/;"	m	struct:cv::cudev::grid_reduce_detail::MinMaxReductor
nChannels	core/types_c.h	/^    int  nChannels;         \/**< Most of OpenCV functions support 1,2,3 or 4 channels *\/$/;"	m	struct:_IplImage
nCols	core/types_c.h	/^    int  nCols;$/;"	m	struct:_IplConvKernel
nCols	core/types_c.h	/^    int  nCols;$/;"	m	struct:_IplConvKernelFP
nIters	ts/ts_perf.hpp	/^    unsigned int nIters;$/;"	m	class:perf::TestBase
nRows	core/types_c.h	/^    int  nRows;$/;"	m	struct:_IplConvKernel
nRows	core/types_c.h	/^    int  nRows;$/;"	m	struct:_IplConvKernelFP
nShiftR	core/types_c.h	/^    int  nShiftR;$/;"	m	struct:_IplConvKernel
nSize	core/types_c.h	/^    int  nSize;             \/**< sizeof(IplImage) *\/$/;"	m	struct:_IplImage
nStep	cudalegacy/NPP_staging.hpp	/^    Ncv32u nStep;         \/\/\/< pitch$/;"	m	struct:NppStInterpolationState
n_buckets_	flann/lsh_table.h	/^    size_t n_buckets_;$/;"	m	struct:cvflann::lsh::LshStats
n_type	hal/intrin.hpp	/^    typedef schar n_type;$/;"	t	struct:cv::V_TypeTraits
n_type	hal/intrin.hpp	/^    typedef short n_type;$/;"	t	struct:cv::V_TypeTraits
name	core/ocl_genbase.hpp	/^    const char* name;$/;"	m	struct:cv::ocl::ProgramEntry
name	core/types_c.h	/^    const char* name;$/;"	m	struct:CvModuleInfo
name	ts.hpp	/^    string name;$/;"	m	class:cvtest::BaseTest
name	ts/ts_gtest.h	/^  const char* name() const { return name_.c_str(); }$/;"	f	class:testing::TestCase
name	ts/ts_gtest.h	/^  const char* name() const { return name_.c_str(); }$/;"	f	class:testing::TestInfo
nameFont	highgui.hpp	/^    const char* nameFont;  \/\/ Qt: nameFont$/;"	m	struct:cv::QtFont
nameFont	imgproc/imgproc_c.h	/^  const char* nameFont;   \/\/Qt:nameFont$/;"	m	struct:CvFont
name_	ts/ts_gtest.h	/^  const std::string name_;               \/\/ Test name$/;"	m	class:testing::TestInfo
name_	ts/ts_gtest.h	/^  std::string name_;$/;"	m	class:testing::TestCase
narrays	core/mat.hpp	/^    int narrays;$/;"	m	class:cv::NAryMatIterator
narrowBand_	videostab/fast_marching.hpp	/^    std::vector<DXY> narrowBand_; \/\/ narrow band heap$/;"	m	class:cv::videostab::FastMarchingMethod
navy	viz/types.hpp	/^inline cv::viz::Color cv::viz::Color::navy()       { return Color(0,     0, 128); }$/;"	f	class:cv::viz::Color
nbins	objdetect.hpp	/^    CV_PROP int nbins;$/;"	m	struct:cv::HOGDescriptor
ncomps_	stitching/detail/seam_finders.hpp	/^    int ncomps_;$/;"	m	class:cv::detail::DpSeamFinder
ncvAssertCUDALastErrorReturn	cudalegacy/NCV.hpp	301;"	d
ncvAssertCUDAReturn	cudalegacy/NCV.hpp	292;"	d
ncvAssertPrintCheck	cudalegacy/NCV.hpp	256;"	d
ncvAssertPrintReturn	cudalegacy/NCV.hpp	267;"	d
ncvAssertReturn	cudalegacy/NCV.hpp	275;"	d
ncvAssertReturnNcvStat	cudalegacy/NCV.hpp	283;"	d
ncvSafeCall	cudalegacy/private.hpp	92;"	d
ncvSafeMatAlloc	cudalegacy/NCV.hpp	1026;"	d
negate	core/cuda/functional.hpp	/^        __host__ __device__ __forceinline__ negate() {}$/;"	f	struct:cv::cuda::device::negate
negate	core/cuda/functional.hpp	/^        __host__ __device__ __forceinline__ negate(const negate&) {}$/;"	f	struct:cv::cuda::device::negate
negate	core/cuda/functional.hpp	/^    template <typename T> struct negate : unary_function<T, T>$/;"	s	namespace:cv::cuda::device
negate	cudev/functional/functional.hpp	/^template <typename T> struct negate : unary_function<T, T>$/;"	s	namespace:cv::cudev
neighbors	objdetect/objdetect_c.h	/^    int neighbors;$/;"	m	struct:CvAvgComp
next	core/cuda/utility.hpp	/^        __device__ __forceinline__ void next() const$/;"	f	struct:cv::cuda::device::WithOutMask
next	core/cuda/utility.hpp	/^        __device__ __forceinline__ void next()$/;"	f	struct:cv::cuda::device::MaskCollection
next	core/mat.hpp	/^        size_t next;$/;"	m	struct:cv::SparseMat::Node
next	core/operations.hpp	/^inline unsigned RNG::next()$/;"	f	class:cv::RNG
next	core/types_c.h	/^    struct CvAttrList* next;   \/**< Pointer to next chunk of the attributes list.                    *\/$/;"	m	struct:CvAttrList	typeref:struct:CvAttrList::CvAttrList
next	core/types_c.h	/^    struct CvMemBlock*  next;$/;"	m	struct:CvMemBlock	typeref:struct:CvMemBlock::CvMemBlock
next	core/types_c.h	/^    struct CvModuleInfo* next;$/;"	m	struct:CvModuleInfo	typeref:struct:CvModuleInfo::CvModuleInfo
next	core/types_c.h	/^    struct CvSeqBlock*  next; \/**< Next sequence block.                       *\/$/;"	m	struct:CvSeqBlock	typeref:struct:CvSeqBlock::CvSeqBlock
next	core/types_c.h	/^    struct CvSparseNode* next;$/;"	m	struct:CvSparseNode	typeref:struct:CvSparseNode::CvSparseNode
next	core/types_c.h	/^    struct CvStringHashNode* next;$/;"	m	struct:CvStringHashNode	typeref:struct:CvStringHashNode::CvStringHashNode
next	core/types_c.h	/^    struct CvTypeInfo* next; \/**< next registered type in the list *\/$/;"	m	struct:CvTypeInfo	typeref:struct:CvTypeInfo::CvTypeInfo
next	flann/random.h	/^    int next()$/;"	f	class:cvflann::UniqueRandom
next	imgproc.hpp	/^        int next[4];$/;"	m	struct:cv::Subdiv2D::QuadEdge
next	ml.hpp	/^        int next; \/\/!< Index of the next split in the list of splits for the node$/;"	m	class:cv::ml::DTrees::Split
next	objdetect/objdetect_c.h	/^    int next;$/;"	m	struct:CvHaarStageClassifier
nextFrame	videostab/frame_source.hpp	/^    virtual Mat nextFrame() { return Mat(); }$/;"	f	class:cv::videostab::NullFrameSource
nextFrame	videostab/stabilizer.hpp	/^    virtual Mat nextFrame() { return nextStabilizedFrame(); }$/;"	f	class:cv::videostab::OnePassStabilizer
next_	ts/ts_gtest.h	/^  mutable linked_ptr_internal const* next_;$/;"	m	class:testing::internal::linked_ptr_internal
niters	videostab/motion_core.hpp	/^    int niters() const$/;"	f	struct:cv::videostab::RansacParams
nlanes	hal/intrin_cpp.hpp	/^    enum { nlanes = n };$/;"	e	enum:cv::v_reg::__anon75
nlanes	hal/intrin_neon.hpp	/^    enum { nlanes = 16 };$/;"	e	enum:cv::v_int8x16::__anon77
nlanes	hal/intrin_neon.hpp	/^    enum { nlanes = 16 };$/;"	e	enum:cv::v_uint8x16::__anon76
nlanes	hal/intrin_neon.hpp	/^    enum { nlanes = 2 };$/;"	e	enum:cv::v_int64x2::__anon84
nlanes	hal/intrin_neon.hpp	/^    enum { nlanes = 2 };$/;"	e	enum:cv::v_uint64x2::__anon83
nlanes	hal/intrin_neon.hpp	/^    enum { nlanes = 4 };$/;"	e	enum:cv::v_float32x4::__anon82
nlanes	hal/intrin_neon.hpp	/^    enum { nlanes = 4 };$/;"	e	enum:cv::v_int32x4::__anon81
nlanes	hal/intrin_neon.hpp	/^    enum { nlanes = 4 };$/;"	e	enum:cv::v_uint32x4::__anon80
nlanes	hal/intrin_neon.hpp	/^    enum { nlanes = 8 };$/;"	e	enum:cv::v_int16x8::__anon79
nlanes	hal/intrin_neon.hpp	/^    enum { nlanes = 8 };$/;"	e	enum:cv::v_uint16x8::__anon78
nlanes	hal/intrin_sse.hpp	/^    enum { nlanes = 16 };$/;"	e	enum:cv::v_int8x16::__anon91
nlanes	hal/intrin_sse.hpp	/^    enum { nlanes = 16 };$/;"	e	enum:cv::v_uint8x16::__anon90
nlanes	hal/intrin_sse.hpp	/^    enum { nlanes = 2 };$/;"	e	enum:cv::v_float64x2::__anon99
nlanes	hal/intrin_sse.hpp	/^    enum { nlanes = 2 };$/;"	e	enum:cv::v_int64x2::__anon98
nlanes	hal/intrin_sse.hpp	/^    enum { nlanes = 2 };$/;"	e	enum:cv::v_uint64x2::__anon97
nlanes	hal/intrin_sse.hpp	/^    enum { nlanes = 4 };$/;"	e	enum:cv::v_float32x4::__anon96
nlanes	hal/intrin_sse.hpp	/^    enum { nlanes = 4 };$/;"	e	enum:cv::v_int32x4::__anon95
nlanes	hal/intrin_sse.hpp	/^    enum { nlanes = 4 };$/;"	e	enum:cv::v_uint32x4::__anon94
nlanes	hal/intrin_sse.hpp	/^    enum { nlanes = 8 };$/;"	e	enum:cv::v_int16x8::__anon93
nlanes	hal/intrin_sse.hpp	/^    enum { nlanes = 8 };$/;"	e	enum:cv::v_uint16x8::__anon92
nlevels	objdetect.hpp	/^    CV_PROP int nlevels;$/;"	m	struct:cv::HOGDescriptor
nnIndex	flann.hpp	/^        ::cvflann::Index<Distance>* nnIndex;$/;"	m	class:cv::flann::GenericIndex
nnIndex_	flann/flann_base.hpp	/^    NNIndex<Distance>* nnIndex_;$/;"	m	class:cvflann::Index
nnIndex_L1	flann.hpp	/^        ::cvflann::Index< L1<ElementType> >* nnIndex_L1;$/;"	m	class:cv::flann::Index_
nnIndex_L2	flann.hpp	/^        ::cvflann::Index< L2<ElementType> >* nnIndex_L2;$/;"	m	class:cv::flann::Index_
node	core/core_c.h	/^    const void* node;$/;"	m	struct:CvTreeNodeIterator
node	core/core_c.h	/^CVAPI(const char*) cvGetFileNodeName( const CvFileNode* node );$/;"	v
node	core/mat.inl.hpp	/^SparseMat::Node* SparseMat::node(size_t nidx)$/;"	f	class:cv::SparseMat
node	core/mat.inl.hpp	/^SparseMat::Node* SparseMatIterator::node() const$/;"	f	class:cv::SparseMatIterator
node	core/mat.inl.hpp	/^const SparseMat::Node* SparseMat::node(size_t nidx) const$/;"	f	class:cv::SparseMat
node	core/mat.inl.hpp	/^const SparseMat::Node* SparseMatConstIterator::node() const$/;"	f	class:cv::SparseMatConstIterator
node	core/persistence.hpp	/^    const CvFileNode* node;$/;"	m	class:cv::FileNode
node	core/types_c.h	/^    CvSparseNode* node;$/;"	m	struct:CvSparseMatIterator
node	flann/result_set.h	/^    T node;           \/* Tree node at which search resumes *\/$/;"	m	struct:cvflann::BranchStruct
nodeCount	core/mat.hpp	/^        size_t nodeCount;$/;"	m	struct:cv::SparseMat::Hdr
nodeSize	core/mat.hpp	/^        size_t nodeSize;$/;"	m	struct:cv::SparseMat::Hdr
non_const_type	cudev/util/type_traits.hpp	/^    typedef typename type_traits_detail::UnConst<T>::type                                                non_const_type;$/;"	t	struct:cv::cudev::TypeTraits
non_volatile_type	cudev/util/type_traits.hpp	/^    typedef typename type_traits_detail::UnVolatile<T>::type                                             non_volatile_type;$/;"	t	struct:cv::cudev::TypeTraits
nonfatally_failed	ts/ts_gtest.h	/^  bool nonfatally_failed() const { return type_ == kNonFatalFailure; }$/;"	f	class:testing::TestPartResult
norm	core/matx.hpp	/^double norm(const Matx<_Tp, m, n>& M)$/;"	f	namespace:cv
norm	core/matx.hpp	/^double norm(const Matx<_Tp, m, n>& M, int normType)$/;"	f	namespace:cv
norm	core/types.hpp	/^double norm(const Point3_<_Tp>& pt)$/;"	f	namespace:cv
norm	core/types.hpp	/^double norm(const Point_<_Tp>& pt)$/;"	f	namespace:cv
normInf	core/base.hpp	/^_AccTp normInf(const _Tp* a, const _Tp* b, int n)$/;"	f	namespace:cv
normInf	core/base.hpp	/^_AccTp normInf(const _Tp* a, int n)$/;"	f	namespace:cv
normL1	core/base.hpp	/^_AccTp normL1(const _Tp* a, const _Tp* b, int n)$/;"	f	namespace:cv
normL1	core/base.hpp	/^_AccTp normL1(const _Tp* a, int n)$/;"	f	namespace:cv
normL1	core/base.hpp	/^inline float normL1(const float* a, const float* b, int n)$/;"	f	namespace:cv
normL1	core/base.hpp	/^inline int normL1(const uchar* a, const uchar* b, int n)$/;"	f	namespace:cv
normL2	stitching/detail/util_inl.hpp	/^float normL2(const Point3f& a)$/;"	f	namespace:cv::detail
normL2	stitching/detail/util_inl.hpp	/^float normL2(const Point3f& a, const Point3f& b)$/;"	f	namespace:cv::detail
normL2Sqr	core/base.hpp	/^_AccTp normL2Sqr(const _Tp* a, const _Tp* b, int n)$/;"	f	namespace:cv
normL2Sqr	core/base.hpp	/^_AccTp normL2Sqr(const _Tp* a, int n)$/;"	f	namespace:cv
normL2Sqr	core/base.hpp	/^static inline float normL2Sqr(const float* a, const float* b, int n)$/;"	f	namespace:cv
normL2sq	stitching/detail/util_inl.hpp	/^double normL2sq(const Mat &r)$/;"	f	namespace:cv::detail
normType	core/base.hpp	/^    enum { normType = NORM_HAMMING };$/;"	e	enum:cv::Hamming::__anon165
normType	features2d.hpp	/^    enum { normType = NORM_L1 };$/;"	e	enum:cv::L1::__anon289
normType	features2d.hpp	/^    enum { normType = NORM_L2 };$/;"	e	enum:cv::L2::__anon288
normType	features2d.hpp	/^    enum { normType = NORM_L2SQR };$/;"	e	enum:cv::SL2::__anon287
normType	features2d.hpp	/^    int normType;$/;"	m	class:cv::BFMatcher
normal_	core/opengl.hpp	/^    Buffer normal_;$/;"	m	class:cv::ogl::Arrays
normalize	core/matx.hpp	/^Vec<_Tp, cn> normalize(const Vec<_Tp, cn>& v)$/;"	f	namespace:cv
normals	viz/types.hpp	/^            Mat cloud, colors, normals;$/;"	m	class:cv::viz::Mesh
not1	core/cuda/functional.hpp	/^    template <typename Predicate> __host__ __device__ __forceinline__ unary_negate<Predicate> not1(const Predicate& pred)$/;"	f	namespace:cv::cuda::device
not1	cudev/functional/functional.hpp	/^__host__ __device__ UnaryNegate<Predicate> not1(const Predicate& pred)$/;"	f	namespace:cv::cudev
not2	core/cuda/functional.hpp	/^    template <typename BinaryPredicate> __host__ __device__ __forceinline__ binary_negate<BinaryPredicate> not2(const BinaryPredicate& pred)$/;"	f	namespace:cv::cuda::device
not2	cudev/functional/functional.hpp	/^__host__ __device__ BinaryNegate<Predicate> not2(const Predicate& pred)$/;"	f	namespace:cv::cudev
not_equal_to	core/cuda/functional.hpp	/^        __host__ __device__ __forceinline__ not_equal_to() {}$/;"	f	struct:cv::cuda::device::not_equal_to
not_equal_to	core/cuda/functional.hpp	/^        __host__ __device__ __forceinline__ not_equal_to(const not_equal_to&) {}$/;"	f	struct:cv::cuda::device::not_equal_to
not_equal_to	core/cuda/functional.hpp	/^    template <typename T> struct not_equal_to : binary_function<T, T, bool>$/;"	s	namespace:cv::cuda::device
not_equal_to	cudev/functional/functional.hpp	/^template <typename T> struct not_equal_to : binary_function<T, T, typename MakeVec<uchar, VecTraits<T>::cn>::type>$/;"	s	namespace:cv::cudev
not_set	viz/types.hpp	/^inline cv::viz::Color cv::viz::Color::not_set()        { return Color(-1, -1, -1); }$/;"	f	class:cv::viz::Color
notified_	ts/ts_gtest.h	/^  bool notified_;$/;"	m	class:std::tr1::Notification
nplanes	core/mat.hpp	/^    size_t nplanes;$/;"	m	class:cv::NAryMatIterator
npos	core/cvstd.hpp	/^    static const size_t npos = size_t(-1);$/;"	m	class:cv::String
nppStBicubic	cudalegacy/NPP_staging.hpp	/^    nppStBicubic      \/\/\/< Bicubic convolution filter, a = -0.5 (cubic Hermite spline)$/;"	e	enum:NppStInterpMode
nppStBorderClamp	cudalegacy/NPP_staging.hpp	/^    nppStBorderClamp  = 1, \/\/\/< Clamp out of range position to borders$/;"	e	enum:NppStBorderType
nppStBorderMirror	cudalegacy/NPP_staging.hpp	/^    nppStBorderMirror = 3  \/\/\/< reflect out of range position across borders$/;"	e	enum:NppStBorderType
nppStBorderNone	cudalegacy/NPP_staging.hpp	/^    nppStBorderNone   = 0, \/\/\/< There is no need to define additional pixels, image is extended already$/;"	e	enum:NppStBorderType
nppStBorderWrap	cudalegacy/NPP_staging.hpp	/^    nppStBorderWrap   = 2, \/\/\/< Wrap out of range position. Image becomes periodic.$/;"	e	enum:NppStBorderType
nppStSupersample	cudalegacy/NPP_staging.hpp	/^    nppStSupersample, \/\/\/< Supersampling. For downscaling only$/;"	e	enum:NppStInterpMode
nu02	core/types.hpp	/^    CV_PROP_RW double  nu20, nu11, nu02, nu30, nu21, nu12, nu03;$/;"	m	class:cv::Moments
nu03	core/types.hpp	/^    CV_PROP_RW double  nu20, nu11, nu02, nu30, nu21, nu12, nu03;$/;"	m	class:cv::Moments
nu11	core/types.hpp	/^    CV_PROP_RW double  nu20, nu11, nu02, nu30, nu21, nu12, nu03;$/;"	m	class:cv::Moments
nu12	core/types.hpp	/^    CV_PROP_RW double  nu20, nu11, nu02, nu30, nu21, nu12, nu03;$/;"	m	class:cv::Moments
nu20	core/types.hpp	/^    CV_PROP_RW double  nu20, nu11, nu02, nu30, nu21, nu12, nu03;$/;"	m	class:cv::Moments
nu21	core/types.hpp	/^    CV_PROP_RW double  nu20, nu11, nu02, nu30, nu21, nu12, nu03;$/;"	m	class:cv::Moments
nu30	core/types.hpp	/^    CV_PROP_RW double  nu20, nu11, nu02, nu30, nu21, nu12, nu03;$/;"	m	class:cv::Moments
nu_type	hal/intrin.hpp	/^    typedef int nu_type;$/;"	t	struct:cv::V_TypeTraits
nu_type	hal/intrin.hpp	/^    typedef uchar nu_type;$/;"	t	struct:cv::V_TypeTraits
nu_type	hal/intrin.hpp	/^    typedef unsigned nu_type;$/;"	t	struct:cv::V_TypeTraits
nu_type	hal/intrin.hpp	/^    typedef ushort nu_type;$/;"	t	struct:cv::V_TypeTraits
numBands	stitching/detail/blenders.hpp	/^    int numBands() const { return actual_num_bands_; }$/;"	f	class:cv::detail::MultiBandBlender
numDetectedFrames	objdetect/detection_based_tracker.hpp	/^            int numDetectedFrames;$/;"	m	struct:cv::DetectionBasedTracker::TrackedObject
numFramesNotDetected	objdetect/detection_based_tracker.hpp	/^            int numFramesNotDetected;$/;"	m	struct:cv::DetectionBasedTracker::TrackedObject
numLastPositionsToTrack	objdetect/detection_based_tracker.hpp	/^            int numLastPositionsToTrack;$/;"	m	struct:cv::DetectionBasedTracker::InnerParameters
numStepsToShowWithoutDetecting	objdetect/detection_based_tracker.hpp	/^            int numStepsToShowWithoutDetecting;$/;"	m	struct:cv::DetectionBasedTracker::InnerParameters
numStepsToTrackWithoutDetectingIfObjectHasNotBeenShown	objdetect/detection_based_tracker.hpp	/^            int numStepsToTrackWithoutDetectingIfObjectHasNotBeenShown;$/;"	m	struct:cv::DetectionBasedTracker::InnerParameters
numStepsToWaitBeforeFirstShow	objdetect/detection_based_tracker.hpp	/^            int numStepsToWaitBeforeFirstShow;$/;"	m	struct:cv::DetectionBasedTracker::InnerParameters
numTrackedSteps	objdetect/detection_based_tracker.hpp	/^        int numTrackedSteps;$/;"	m	class:cv::DetectionBasedTracker
numVertices	stitching/detail/util.hpp	/^    int numVertices() const { return static_cast<int>(edges_.size()); }$/;"	f	class:cv::detail::Graph
num_bands_	stitching/detail/blenders.hpp	/^    int actual_num_bands_, num_bands_;$/;"	m	class:cv::detail::MultiBandBlender
num_errs_per_measurement_	stitching/detail/motion_estimators.hpp	/^    int num_errs_per_measurement_;$/;"	m	class:cv::detail::BundleAdjusterBase
num_images_	stitching/detail/motion_estimators.hpp	/^    int num_images_;$/;"	m	class:cv::detail::BundleAdjusterBase
num_inliers	stitching/detail/matchers.hpp	/^    int num_inliers;                    \/\/!< Number of geometrically consistent matches$/;"	m	struct:cv::detail::MatchesInfo
num_layers_	stitching/detail/matchers.hpp	/^    int num_octaves_, num_layers_;$/;"	m	class:cv::detail::SurfFeaturesFinderGpu
num_layers_descr_	stitching/detail/matchers.hpp	/^    int num_octaves_descr_, num_layers_descr_;$/;"	m	class:cv::detail::SurfFeaturesFinderGpu
num_matches_thresh1_	stitching/detail/matchers.hpp	/^    int num_matches_thresh1_;$/;"	m	class:cv::detail::BestOf2NearestMatcher
num_matches_thresh2_	stitching/detail/matchers.hpp	/^    int num_matches_thresh2_;$/;"	m	class:cv::detail::BestOf2NearestMatcher
num_octaves_	stitching/detail/matchers.hpp	/^    int num_octaves_, num_layers_;$/;"	m	class:cv::detail::SurfFeaturesFinderGpu
num_octaves_descr_	stitching/detail/matchers.hpp	/^    int num_octaves_descr_, num_layers_descr_;$/;"	m	class:cv::detail::SurfFeaturesFinderGpu
num_params_per_cam_	stitching/detail/motion_estimators.hpp	/^    int num_params_per_cam_;$/;"	m	class:cv::detail::BundleAdjusterBase
numberOfDisparities	calib3d/calib3d_c.h	/^    int numberOfDisparities; \/\/ maximum disparity - minimum disparity (> 0)$/;"	m	struct:CvStereoBMState
number_of_inner_iterations	cudalegacy/NCVBroxOpticalFlow.hpp	/^    Ncv32u number_of_inner_iterations;$/;"	m	struct:NCVBroxOpticalFlowDescriptor
number_of_outer_iterations	cudalegacy/NCVBroxOpticalFlow.hpp	/^    Ncv32u number_of_outer_iterations;$/;"	m	struct:NCVBroxOpticalFlowDescriptor
number_of_solver_iterations	cudalegacy/NCVBroxOpticalFlow.hpp	/^    Ncv32u number_of_solver_iterations;$/;"	m	struct:NCVBroxOpticalFlowDescriptor
numeric_limits	core/cuda/limits.hpp	/^template <> struct numeric_limits<bool>$/;"	s	namespace:cv::cuda::device
numeric_limits	core/cuda/limits.hpp	/^template <> struct numeric_limits<double>$/;"	s	namespace:cv::cuda::device
numeric_limits	core/cuda/limits.hpp	/^template <> struct numeric_limits<float>$/;"	s	namespace:cv::cuda::device
numeric_limits	core/cuda/limits.hpp	/^template <> struct numeric_limits<int>$/;"	s	namespace:cv::cuda::device
numeric_limits	core/cuda/limits.hpp	/^template <> struct numeric_limits<short>$/;"	s	namespace:cv::cuda::device
numeric_limits	core/cuda/limits.hpp	/^template <> struct numeric_limits<signed char>$/;"	s	namespace:cv::cuda::device
numeric_limits	core/cuda/limits.hpp	/^template <> struct numeric_limits<unsigned char>$/;"	s	namespace:cv::cuda::device
numeric_limits	core/cuda/limits.hpp	/^template <> struct numeric_limits<unsigned int>$/;"	s	namespace:cv::cuda::device
numeric_limits	core/cuda/limits.hpp	/^template <> struct numeric_limits<unsigned short>$/;"	s	namespace:cv::cuda::device
numeric_limits	cudev/util/limits.hpp	/^template <> struct numeric_limits<bool>$/;"	s	namespace:cv::cudev
numeric_limits	cudev/util/limits.hpp	/^template <> struct numeric_limits<double>$/;"	s	namespace:cv::cudev
numeric_limits	cudev/util/limits.hpp	/^template <> struct numeric_limits<float>$/;"	s	namespace:cv::cudev
numeric_limits	cudev/util/limits.hpp	/^template <> struct numeric_limits<int>$/;"	s	namespace:cv::cudev
numeric_limits	cudev/util/limits.hpp	/^template <> struct numeric_limits<schar>$/;"	s	namespace:cv::cudev
numeric_limits	cudev/util/limits.hpp	/^template <> struct numeric_limits<short>$/;"	s	namespace:cv::cudev
numeric_limits	cudev/util/limits.hpp	/^template <> struct numeric_limits<uchar>$/;"	s	namespace:cv::cudev
numeric_limits	cudev/util/limits.hpp	/^template <> struct numeric_limits<uint>$/;"	s	namespace:cv::cudev
numeric_limits	cudev/util/limits.hpp	/^template <> struct numeric_limits<ushort>$/;"	s	namespace:cv::cudev
nzcount	core/mat.inl.hpp	/^size_t SparseMat::nzcount() const$/;"	f	class:cv::SparseMat
obj	core/mat.hpp	/^    void* obj;$/;"	m	class:cv::_InputArray
obj	core/ocl.hpp	/^    const void* obj;$/;"	m	class:cv::ocl::KernelArg
obj_	videostab/global_motion.hpp	/^    std::vector<double> obj_, collb_, colub_;$/;"	m	class:cv::videostab::MotionEstimatorL1
obj_	videostab/motion_stabilizing.hpp	/^    std::vector<double> obj_, collb_, colub_;$/;"	m	class:cv::videostab::LpMotionStabilizer
object	flann/any.h	/^    void* object;$/;"	m	struct:cvflann::any
object_registry	flann/object_factory.h	/^    ObjectRegistry object_registry;$/;"	m	class:cvflann::ObjectFactory
ocl	core/directx.hpp	/^namespace ocl {$/;"	n	namespace:cv::directx
ocl	core/ocl.hpp	/^namespace cv { namespace ocl {$/;"	n	namespace:cv
ocl	core/ocl_genbase.hpp	/^namespace ocl$/;"	n	namespace:cv
ocl	core/opencl/opencl_svm.hpp	/^namespace cv { namespace ocl { namespace svm {$/;"	n	namespace:cv
ocl	ts.hpp	/^namespace cvtest { namespace ocl {$/;"	n	namespace:cvtest
ocl	ts/ocl_perf.hpp	/^namespace ocl {$/;"	n	namespace:cvtest
ocl	ts/ocl_test.hpp	/^namespace ocl {$/;"	n	namespace:cvtest
ocl	ts/ts_perf.hpp	/^    bool ocl;$/;"	m	struct:perf::ImplData
ocl	ts/ts_perf.hpp	/^namespace cv { namespace cuda {} namespace ocl {} }$/;"	n	namespace:cv
ocl	ts/ts_perf.hpp	/^namespace cvtest { namespace ocl {$/;"	n	namespace:cvtest
oclSvmDetector	objdetect.hpp	/^    UMat oclSvmDetector;$/;"	m	struct:cv::HOGDescriptor
octave	core/types.hpp	/^    CV_PROP_RW int octave; \/\/!< octave (pyramid layer) from which the keypoint has been extracted$/;"	m	class:cv::KeyPoint
offset	core/mat.hpp	/^    size_t offset;$/;"	m	class:cv::UMat
ogl	core/base.hpp	/^namespace ogl$/;"	n	namespace:cv
ogl	core/opengl.hpp	/^namespace cv { namespace ogl {$/;"	n	namespace:cv
oldStream	cudalegacy/private.hpp	/^        cudaStream_t oldStream;$/;"	m	class:cv::cuda::NppStStreamHandler
old_state	ts.hpp	/^    const uint64 old_state;$/;"	m	struct:cvtest::DefaultRngAuto
olive	viz/types.hpp	/^inline cv::viz::Color cv::viz::Color::olive()      { return Color(0,   128, 128); }$/;"	f	class:cv::viz::Color
ones	core/mat.inl.hpp	/^MatExpr Mat_<_Tp>::ones(Size sz)$/;"	f	class:cv::Mat_
ones	core/mat.inl.hpp	/^MatExpr Mat_<_Tp>::ones(int rows, int cols)$/;"	f	class:cv::Mat_
ones	core/matx.hpp	/^Matx<_Tp,m,n> Matx<_Tp,m,n>::ones()$/;"	f	class:cv::Matx
op	core/cuda/functional.hpp	/^        Op op;$/;"	m	struct:cv::cuda::device::binder1st
op	core/cuda/functional.hpp	/^        Op op;$/;"	m	struct:cv::cuda::device::binder2nd
op	core/mat.hpp	/^    const MatOp* op;$/;"	m	class:cv::MatExpr
op	cudev/functional/functional.hpp	/^    Op op;$/;"	m	struct:cv::cudev::Binder1st
op	cudev/functional/functional.hpp	/^    Op op;$/;"	m	struct:cv::cudev::Binder2nd
op	cudev/functional/tuple_adapter.hpp	/^    Op op;$/;"	m	struct:cv::cudev::BinaryTupleAdapter
op	cudev/functional/tuple_adapter.hpp	/^    Op op;$/;"	m	struct:cv::cudev::UnaryTupleAdapter
op	cudev/grid/detail/reduce.hpp	/^        __device__ __forceinline__ static const Op& op(const Op& aop)$/;"	f	struct:cv::cudev::grid_reduce_detail::Unroll
op	cudev/grid/detail/reduce.hpp	/^        __device__ __forceinline__ static tuple<Op, Op, Op, Op> op(const Op& aop)$/;"	f	struct:cv::cudev::grid_reduce_detail::Unroll
op	cudev/grid/detail/reduce.hpp	/^        __device__ __forceinline__ static tuple<Op, Op, Op> op(const Op& aop)$/;"	f	struct:cv::cudev::grid_reduce_detail::Unroll
op	cudev/grid/detail/reduce.hpp	/^        __device__ __forceinline__ static tuple<Op, Op> op(const Op& aop)$/;"	f	struct:cv::cudev::grid_reduce_detail::Unroll
op	cudev/ptr2d/transform.hpp	/^    Op op;$/;"	m	struct:cv::cudev::BinaryTransformPtr
op	cudev/ptr2d/transform.hpp	/^    Op op;$/;"	m	struct:cv::cudev::UnaryTransformPtr
operator !	core/types.hpp	/^bool operator !(const Range& r)$/;"	f	namespace:cv
operator !=	core/core_c.h	/^template<typename _Tp> inline bool operator != (const SeqIterator<_Tp>& a,$/;"	f	namespace:cv
operator !=	core/cvstd.hpp	/^static inline bool operator!= (const String& lhs, const String& rhs) { return 0 != lhs.compare(rhs); }$/;"	f	namespace:cv
operator !=	core/cvstd.hpp	/^static inline bool operator!= (const String& lhs, const char*   rhs) { return 0 != lhs.compare(rhs); }$/;"	f	namespace:cv
operator !=	core/cvstd.hpp	/^static inline bool operator!= (const char*   lhs, const String& rhs) { return 0 != rhs.compare(lhs); }$/;"	f	namespace:cv
operator !=	core/mat.inl.hpp	/^bool MatSize::operator != (const MatSize& sz) const$/;"	f	class:cv::MatSize
operator !=	core/mat.inl.hpp	/^bool operator != (const MatConstIterator& a, const MatConstIterator& b)$/;"	f	namespace:cv
operator !=	core/mat.inl.hpp	/^bool operator != (const MatConstIterator_<_Tp>& a, const MatConstIterator_<_Tp>& b)$/;"	f	namespace:cv
operator !=	core/mat.inl.hpp	/^bool operator != (const MatIterator_<_Tp>& a, const MatIterator_<_Tp>& b)$/;"	f	namespace:cv
operator !=	core/mat.inl.hpp	/^bool operator != (const SparseMatConstIterator& it1, const SparseMatConstIterator& it2)$/;"	f	namespace:cv
operator !=	core/matx.hpp	/^bool operator != (const Matx<_Tp, m, n>& a, const Matx<_Tp, m, n>& b)$/;"	f	namespace:cv
operator !=	core/persistence.hpp	/^bool operator != (const FileNodeIterator& it1, const FileNodeIterator& it2)$/;"	f	namespace:cv
operator !=	core/ptr.inl.hpp	/^bool operator != (const Ptr<T>& ptr1, const Ptr<T>& ptr2)$/;"	f	namespace:cv
operator !=	core/types.hpp	/^bool operator != ( const Scalar_<_Tp>& a, const Scalar_<_Tp>& b )$/;"	f	namespace:cv
operator !=	core/types.hpp	/^bool operator != (const Complex<_Tp>& a, const Complex<_Tp>& b)$/;"	f	namespace:cv
operator !=	core/types.hpp	/^bool operator != (const Point3_<_Tp>& a, const Point3_<_Tp>& b)$/;"	f	namespace:cv
operator !=	core/types.hpp	/^bool operator != (const Point_<_Tp>& a, const Point_<_Tp>& b)$/;"	f	namespace:cv
operator !=	core/types.hpp	/^bool operator != (const Range& r1, const Range& r2)$/;"	f	namespace:cv
operator !=	core/types.hpp	/^bool operator != (const Rect_<_Tp>& a, const Rect_<_Tp>& b)$/;"	f	namespace:cv
operator !=	core/types.hpp	/^bool operator != (const Size_<_Tp>& a, const Size_<_Tp>& b)$/;"	f	namespace:cv
operator !=	ts/ts_gtest.h	/^  bool operator!=(T* p) const { return value_ != p; }$/;"	f	class:testing::internal::linked_ptr
operator !=	ts/ts_gtest.h	/^  bool operator!=(const ParamIterator& other) const {$/;"	f	class:testing::internal::ParamIterator
operator !=	ts/ts_gtest.h	/^  bool operator!=(linked_ptr<U> const& ptr) const {$/;"	f	class:testing::internal::linked_ptr
operator !=	ts/ts_gtest.h	/^bool operator!=(T* ptr, const linked_ptr<T>& x) {$/;"	f	namespace:testing::internal
operator &	core/types.hpp	/^Range operator & (const Range& r1, const Range& r2)$/;"	f	namespace:cv
operator &	core/types.hpp	/^Rect_<_Tp> operator & (const Rect_<_Tp>& a, const Rect_<_Tp>& b)$/;"	f	namespace:cv
operator &=	core/types.hpp	/^Range& operator &= (Range& r1, const Range& r2)$/;"	f	namespace:cv
operator &=	core/types.hpp	/^Rect_<_Tp>& operator &= ( Rect_<_Tp>& a, const Rect_<_Tp>& b )$/;"	f	namespace:cv
operator ()	core/cuda.inl.hpp	/^GpuMat GpuMat::operator ()(Range rowRange_, Range colRange_) const$/;"	f	class:cv::cuda::GpuMat
operator ()	core/cuda.inl.hpp	/^GpuMat GpuMat::operator ()(Rect roi) const$/;"	f	class:cv::cuda::GpuMat
operator ()	core/cuda/border_interpolate.hpp	/^        __device__ __forceinline__ D operator ()(index_type y, index_type x) const$/;"	f	struct:cv::cuda::device::BorderReader
operator ()	core/cuda/border_interpolate.hpp	/^        __device__ __forceinline__ elem_type operator ()(index_type y, index_type x) const$/;"	f	struct:cv::cuda::device::BorderReader
operator ()	core/cuda/detail/color_detail.hpp	/^            __device__ __forceinline__ T operator()(const typename TypeVec<T, scn>::vec_type& src) const$/;"	f	struct:cv::cuda::device::color_detail::RGB2Gray
operator ()	core/cuda/detail/color_detail.hpp	/^            __device__ __forceinline__ typename TypeVec<T, dcn>::vec_type operator ()(const typename TypeVec<T, scn>::vec_type& src) const$/;"	f	struct:cv::cuda::device::color_detail::RGB2YCrCb
operator ()	core/cuda/detail/color_detail.hpp	/^            __device__ __forceinline__ typename TypeVec<T, dcn>::vec_type operator ()(const typename TypeVec<T, scn>::vec_type& src) const$/;"	f	struct:cv::cuda::device::color_detail::RGB2YUV
operator ()	core/cuda/detail/color_detail.hpp	/^            __device__ __forceinline__ typename TypeVec<T, dcn>::vec_type operator ()(const typename TypeVec<T, scn>::vec_type& src) const$/;"	f	struct:cv::cuda::device::color_detail::YCrCb2RGB
operator ()	core/cuda/detail/color_detail.hpp	/^            __device__ __forceinline__ typename TypeVec<T, dcn>::vec_type operator ()(const typename TypeVec<T, scn>::vec_type& src) const$/;"	f	struct:cv::cuda::device::color_detail::YUV2RGB
operator ()	core/cuda/detail/color_detail.hpp	/^            __device__ __forceinline__ typename TypeVec<T, dcn>::vec_type operator()(T src) const$/;"	f	struct:cv::cuda::device::color_detail::Gray2RGB
operator ()	core/cuda/detail/color_detail.hpp	/^            __device__ __forceinline__ typename TypeVec<T, dcn>::vec_type operator()(const typename TypeVec<T, scn>::vec_type& src) const$/;"	f	struct:cv::cuda::device::color_detail::HLS2RGB
operator ()	core/cuda/detail/color_detail.hpp	/^            __device__ __forceinline__ typename TypeVec<T, dcn>::vec_type operator()(const typename TypeVec<T, scn>::vec_type& src) const$/;"	f	struct:cv::cuda::device::color_detail::HSV2RGB
operator ()	core/cuda/detail/color_detail.hpp	/^            __device__ __forceinline__ typename TypeVec<T, dcn>::vec_type operator()(const typename TypeVec<T, scn>::vec_type& src) const$/;"	f	struct:cv::cuda::device::color_detail::RGB2HLS
operator ()	core/cuda/detail/color_detail.hpp	/^            __device__ __forceinline__ typename TypeVec<T, dcn>::vec_type operator()(const typename TypeVec<T, scn>::vec_type& src) const$/;"	f	struct:cv::cuda::device::color_detail::RGB2HSV
operator ()	core/cuda/detail/color_detail.hpp	/^            __device__ __forceinline__ typename TypeVec<T, dcn>::vec_type operator()(const typename TypeVec<T, scn>::vec_type& src) const$/;"	f	struct:cv::cuda::device::color_detail::RGB2XYZ
operator ()	core/cuda/detail/color_detail.hpp	/^            __device__ __forceinline__ typename TypeVec<T, dcn>::vec_type operator()(const typename TypeVec<T, scn>::vec_type& src) const$/;"	f	struct:cv::cuda::device::color_detail::XYZ2RGB
operator ()	core/cuda/detail/color_detail.hpp	/^            __device__ __forceinline__ typename TypeVec<float, dcn>::vec_type operator ()(const typename TypeVec<float, scn>::vec_type& src) const$/;"	f	struct:cv::cuda::device::color_detail::Lab2RGB
operator ()	core/cuda/detail/color_detail.hpp	/^            __device__ __forceinline__ typename TypeVec<float, dcn>::vec_type operator ()(const typename TypeVec<float, scn>::vec_type& src) const$/;"	f	struct:cv::cuda::device::color_detail::Luv2RGB
operator ()	core/cuda/detail/color_detail.hpp	/^            __device__ __forceinline__ typename TypeVec<float, dcn>::vec_type operator ()(const typename TypeVec<float, scn>::vec_type& src) const$/;"	f	struct:cv::cuda::device::color_detail::RGB2Lab
operator ()	core/cuda/detail/color_detail.hpp	/^            __device__ __forceinline__ typename TypeVec<float, dcn>::vec_type operator ()(const typename TypeVec<float, scn>::vec_type& src) const$/;"	f	struct:cv::cuda::device::color_detail::RGB2Luv
operator ()	core/cuda/detail/color_detail.hpp	/^            __device__ __forceinline__ typename TypeVec<uchar, dcn>::vec_type operator ()(const typename TypeVec<uchar, scn>::vec_type& src) const$/;"	f	struct:cv::cuda::device::color_detail::Lab2RGB
operator ()	core/cuda/detail/color_detail.hpp	/^            __device__ __forceinline__ typename TypeVec<uchar, dcn>::vec_type operator ()(const typename TypeVec<uchar, scn>::vec_type& src) const$/;"	f	struct:cv::cuda::device::color_detail::Luv2RGB
operator ()	core/cuda/detail/color_detail.hpp	/^            __device__ __forceinline__ typename TypeVec<uchar, dcn>::vec_type operator ()(const typename TypeVec<uchar, scn>::vec_type& src) const$/;"	f	struct:cv::cuda::device::color_detail::RGB2Lab
operator ()	core/cuda/detail/color_detail.hpp	/^            __device__ __forceinline__ typename TypeVec<uchar, dcn>::vec_type operator ()(const typename TypeVec<uchar, scn>::vec_type& src) const$/;"	f	struct:cv::cuda::device::color_detail::RGB2Luv
operator ()	core/cuda/detail/color_detail.hpp	/^            __device__ __forceinline__ uchar operator()(uint src) const$/;"	f	struct:cv::cuda::device::color_detail::RGB2Gray
operator ()	core/cuda/detail/color_detail.hpp	/^            __device__ __forceinline__ uchar operator()(uint src) const$/;"	f	struct:cv::cuda::device::color_detail::RGB5x52Gray
operator ()	core/cuda/detail/color_detail.hpp	/^            __device__ __forceinline__ uchar3 operator()(ushort src) const$/;"	f	struct:cv::cuda::device::color_detail::RGB5x52RGB
operator ()	core/cuda/detail/color_detail.hpp	/^            __device__ __forceinline__ uint operator ()(uint src) const$/;"	f	struct:cv::cuda::device::color_detail::RGB2YCrCb
operator ()	core/cuda/detail/color_detail.hpp	/^            __device__ __forceinline__ uint operator ()(uint src) const$/;"	f	struct:cv::cuda::device::color_detail::YCrCb2RGB
operator ()	core/cuda/detail/color_detail.hpp	/^            __device__ __forceinline__ uint operator ()(uint src) const$/;"	f	struct:cv::cuda::device::color_detail::YUV2RGB
operator ()	core/cuda/detail/color_detail.hpp	/^            __device__ __forceinline__ uint operator()(uint src) const$/;"	f	struct:cv::cuda::device::color_detail::Gray2RGB
operator ()	core/cuda/detail/color_detail.hpp	/^            __device__ __forceinline__ uint operator()(uint src) const$/;"	f	struct:cv::cuda::device::color_detail::HLS2RGB
operator ()	core/cuda/detail/color_detail.hpp	/^            __device__ __forceinline__ uint operator()(uint src) const$/;"	f	struct:cv::cuda::device::color_detail::HSV2RGB
operator ()	core/cuda/detail/color_detail.hpp	/^            __device__ __forceinline__ uint operator()(uint src) const$/;"	f	struct:cv::cuda::device::color_detail::RGB2HLS
operator ()	core/cuda/detail/color_detail.hpp	/^            __device__ __forceinline__ uint operator()(uint src) const$/;"	f	struct:cv::cuda::device::color_detail::RGB2HSV
operator ()	core/cuda/detail/color_detail.hpp	/^            __device__ __forceinline__ uint operator()(uint src) const$/;"	f	struct:cv::cuda::device::color_detail::RGB2XYZ
operator ()	core/cuda/detail/color_detail.hpp	/^            __device__ __forceinline__ uint operator()(uint src) const$/;"	f	struct:cv::cuda::device::color_detail::XYZ2RGB
operator ()	core/cuda/detail/color_detail.hpp	/^            __device__ __forceinline__ uint operator()(ushort src) const$/;"	f	struct:cv::cuda::device::color_detail::RGB5x52RGB
operator ()	core/cuda/detail/color_detail.hpp	/^            __device__ __forceinline__ ushort operator()(const uchar3& src) const$/;"	f	struct:cv::cuda::device::color_detail::RGB2RGB5x5
operator ()	core/cuda/detail/color_detail.hpp	/^            __device__ __forceinline__ ushort operator()(uint src) const$/;"	f	struct:cv::cuda::device::color_detail::Gray2RGB5x5
operator ()	core/cuda/detail/color_detail.hpp	/^            __device__ __forceinline__ ushort operator()(uint src) const$/;"	f	struct:cv::cuda::device::color_detail::RGB2RGB5x5
operator ()	core/cuda/detail/color_detail.hpp	/^            __device__ typename TypeVec<T, dcn>::vec_type operator()(const typename TypeVec<T, scn>::vec_type& src) const$/;"	f	struct:cv::cuda::device::color_detail::RGB2RGB
operator ()	core/cuda/detail/color_detail.hpp	/^            __device__ uint operator()(uint src) const$/;"	f	struct:cv::cuda::device::color_detail::RGB2RGB
operator ()	core/cuda/filters.hpp	/^        __device__ __forceinline__ elem_type operator ()(float y, float x) const$/;"	f	struct:cv::cuda::device::AreaFilter
operator ()	core/cuda/filters.hpp	/^        __device__ __forceinline__ elem_type operator ()(float y, float x) const$/;"	f	struct:cv::cuda::device::IntegerAreaFilter
operator ()	core/cuda/filters.hpp	/^        __device__ __forceinline__ elem_type operator ()(float y, float x) const$/;"	f	struct:cv::cuda::device::LinearFilter
operator ()	core/cuda/filters.hpp	/^        __device__ __forceinline__ elem_type operator ()(float y, float x) const$/;"	f	struct:cv::cuda::device::PointFilter
operator ()	core/cuda/filters.hpp	/^        __device__ elem_type operator ()(float y, float x) const$/;"	f	struct:cv::cuda::device::CubicFilter
operator ()	core/cuda/functional.hpp	/^        __device__ __forceinline__ D operator ()(typename TypeTraits<T>::ParameterType v) const$/;"	f	struct:cv::cuda::device::saturate_cast_func
operator ()	core/cuda/functional.hpp	/^        __device__ __forceinline__ T operator ()(typename TypeTraits<T>::ParameterType a) const$/;"	f	struct:cv::cuda::device::negate
operator ()	core/cuda/functional.hpp	/^        __device__ __forceinline__ T operator ()(typename TypeTraits<T>::ParameterType a,$/;"	f	struct:cv::cuda::device::bit_and
operator ()	core/cuda/functional.hpp	/^        __device__ __forceinline__ T operator ()(typename TypeTraits<T>::ParameterType a,$/;"	f	struct:cv::cuda::device::bit_or
operator ()	core/cuda/functional.hpp	/^        __device__ __forceinline__ T operator ()(typename TypeTraits<T>::ParameterType a,$/;"	f	struct:cv::cuda::device::bit_xor
operator ()	core/cuda/functional.hpp	/^        __device__ __forceinline__ T operator ()(typename TypeTraits<T>::ParameterType a,$/;"	f	struct:cv::cuda::device::divides
operator ()	core/cuda/functional.hpp	/^        __device__ __forceinline__ T operator ()(typename TypeTraits<T>::ParameterType a,$/;"	f	struct:cv::cuda::device::minus
operator ()	core/cuda/functional.hpp	/^        __device__ __forceinline__ T operator ()(typename TypeTraits<T>::ParameterType a,$/;"	f	struct:cv::cuda::device::modulus
operator ()	core/cuda/functional.hpp	/^        __device__ __forceinline__ T operator ()(typename TypeTraits<T>::ParameterType a,$/;"	f	struct:cv::cuda::device::multiplies
operator ()	core/cuda/functional.hpp	/^        __device__ __forceinline__ T operator ()(typename TypeTraits<T>::ParameterType a,$/;"	f	struct:cv::cuda::device::plus
operator ()	core/cuda/functional.hpp	/^        __device__ __forceinline__ T operator ()(typename TypeTraits<T>::ParameterType src1, typename TypeTraits<T>::ParameterType src2) const$/;"	f	struct:cv::cuda::device::hypot_sqr_func
operator ()	core/cuda/functional.hpp	/^        __device__ __forceinline__ T operator ()(typename TypeTraits<T>::ParameterType v) const$/;"	f	struct:cv::cuda::device::bit_not
operator ()	core/cuda/functional.hpp	/^        __device__ __forceinline__ T operator ()(typename TypeTraits<T>::ParameterType x) const$/;"	f	struct:cv::cuda::device::abs_func
operator ()	core/cuda/functional.hpp	/^        __device__ __forceinline__ T operator()(typename TypeTraits<T>::ParameterType lhs, typename TypeTraits<T>::ParameterType rhs) const$/;"	f	struct:cv::cuda::device::maximum
operator ()	core/cuda/functional.hpp	/^        __device__ __forceinline__ T operator()(typename TypeTraits<T>::ParameterType lhs, typename TypeTraits<T>::ParameterType rhs) const$/;"	f	struct:cv::cuda::device::minimum
operator ()	core/cuda/functional.hpp	/^        __device__ __forceinline__ T operator()(typename TypeTraits<T>::ParameterType src) const$/;"	f	struct:cv::cuda::device::thresh_binary_func
operator ()	core/cuda/functional.hpp	/^        __device__ __forceinline__ T operator()(typename TypeTraits<T>::ParameterType src) const$/;"	f	struct:cv::cuda::device::thresh_binary_inv_func
operator ()	core/cuda/functional.hpp	/^        __device__ __forceinline__ T operator()(typename TypeTraits<T>::ParameterType src) const$/;"	f	struct:cv::cuda::device::thresh_to_zero_func
operator ()	core/cuda/functional.hpp	/^        __device__ __forceinline__ T operator()(typename TypeTraits<T>::ParameterType src) const$/;"	f	struct:cv::cuda::device::thresh_to_zero_inv_func
operator ()	core/cuda/functional.hpp	/^        __device__ __forceinline__ T operator()(typename TypeTraits<T>::ParameterType src) const$/;"	f	struct:cv::cuda::device::thresh_trunc_func
operator ()	core/cuda/functional.hpp	/^        __device__ __forceinline__ bool operator ()(typename TypeTraits<T>::ParameterType a) const$/;"	f	struct:cv::cuda::device::logical_not
operator ()	core/cuda/functional.hpp	/^        __device__ __forceinline__ bool operator ()(typename TypeTraits<T>::ParameterType a,$/;"	f	struct:cv::cuda::device::equal_to
operator ()	core/cuda/functional.hpp	/^        __device__ __forceinline__ bool operator ()(typename TypeTraits<T>::ParameterType a,$/;"	f	struct:cv::cuda::device::greater
operator ()	core/cuda/functional.hpp	/^        __device__ __forceinline__ bool operator ()(typename TypeTraits<T>::ParameterType a,$/;"	f	struct:cv::cuda::device::greater_equal
operator ()	core/cuda/functional.hpp	/^        __device__ __forceinline__ bool operator ()(typename TypeTraits<T>::ParameterType a,$/;"	f	struct:cv::cuda::device::less
operator ()	core/cuda/functional.hpp	/^        __device__ __forceinline__ bool operator ()(typename TypeTraits<T>::ParameterType a,$/;"	f	struct:cv::cuda::device::less_equal
operator ()	core/cuda/functional.hpp	/^        __device__ __forceinline__ bool operator ()(typename TypeTraits<T>::ParameterType a,$/;"	f	struct:cv::cuda::device::logical_and
operator ()	core/cuda/functional.hpp	/^        __device__ __forceinline__ bool operator ()(typename TypeTraits<T>::ParameterType a,$/;"	f	struct:cv::cuda::device::logical_or
operator ()	core/cuda/functional.hpp	/^        __device__ __forceinline__ bool operator ()(typename TypeTraits<T>::ParameterType a,$/;"	f	struct:cv::cuda::device::not_equal_to
operator ()	core/cuda/functional.hpp	/^        __device__ __forceinline__ bool operator()(typename TypeTraits<typename Predicate::first_argument_type>::ParameterType x,$/;"	f	struct:cv::cuda::device::binary_negate
operator ()	core/cuda/functional.hpp	/^        __device__ __forceinline__ char operator ()(char x) const$/;"	f	struct:cv::cuda::device::abs_func
operator ()	core/cuda/functional.hpp	/^        __device__ __forceinline__ double operator ()(double x) const$/;"	f	struct:cv::cuda::device::abs_func
operator ()	core/cuda/functional.hpp	/^        __device__ __forceinline__ float operator ()(float x) const$/;"	f	struct:cv::cuda::device::abs_func
operator ()	core/cuda/functional.hpp	/^        __device__ __forceinline__ int operator ()(int x) const$/;"	f	struct:cv::cuda::device::abs_func
operator ()	core/cuda/functional.hpp	/^        __device__ __forceinline__ short operator ()(short x) const$/;"	f	struct:cv::cuda::device::abs_func
operator ()	core/cuda/functional.hpp	/^        __device__ __forceinline__ signed char operator ()(signed char x) const$/;"	f	struct:cv::cuda::device::abs_func
operator ()	core/cuda/functional.hpp	/^        __device__ __forceinline__ typename Op::result_type operator ()(typename TypeTraits<typename Op::second_argument_type>::ParameterType a) const$/;"	f	struct:cv::cuda::device::binder1st
operator ()	core/cuda/functional.hpp	/^        __device__ __forceinline__ typename TypeTraits<T1>::ParameterType operator()(typename TypeTraits<T1>::ParameterType lhs, typename TypeTraits<T2>::ParameterType rhs) const$/;"	f	struct:cv::cuda::device::project1st
operator ()	core/cuda/functional.hpp	/^        __device__ __forceinline__ typename TypeTraits<T2>::ParameterType operator()(typename TypeTraits<T1>::ParameterType lhs, typename TypeTraits<T2>::ParameterType rhs) const$/;"	f	struct:cv::cuda::device::project2nd
operator ()	core/cuda/functional.hpp	/^        __device__ __forceinline__ typename TypeTraits<T>::ParameterType operator()(typename TypeTraits<T>::ParameterType x) const$/;"	f	struct:cv::cuda::device::identity
operator ()	core/cuda/functional.hpp	/^        __device__ __forceinline__ unsigned char operator ()(unsigned char x) const$/;"	f	struct:cv::cuda::device::abs_func
operator ()	core/cuda/functional.hpp	/^        __device__ __forceinline__ unsigned int operator ()(unsigned int x) const$/;"	f	struct:cv::cuda::device::abs_func
operator ()	core/cuda/functional.hpp	/^        __device__ __forceinline__ unsigned short operator ()(unsigned short x) const$/;"	f	struct:cv::cuda::device::abs_func
operator ()	core/cuda/functional.hpp	/^        __forceinline__ __device__ typename Op::result_type operator ()(typename TypeTraits<typename Op::first_argument_type>::ParameterType a) const$/;"	f	struct:cv::cuda::device::binder2nd
operator ()	core/cuda/functional.hpp	/^      __device__ __forceinline__ bool operator()(typename TypeTraits<typename Predicate::argument_type>::ParameterType x) const$/;"	f	struct:cv::cuda::device::unary_negate
operator ()	core/cuda/scan.hpp	/^        __device__ __forceinline__ T operator()( volatile T *ptr , const unsigned int idx)$/;"	f	struct:cv::cuda::device::WarpScan
operator ()	core/cuda/scan.hpp	/^        __device__ __forceinline__ T operator()( volatile T *ptr , const unsigned int idx)$/;"	f	struct:cv::cuda::device::WarpScanNoComp
operator ()	core/cuda/scan.hpp	/^        __device__ __forceinline__ T operator()(volatile T *ptr)$/;"	f	struct:cv::cuda::device::BlockScan
operator ()	core/cuda/utility.hpp	/^        __device__ __forceinline__ bool operator()(int y, int x) const$/;"	f	struct:cv::cuda::device::MaskCollection
operator ()	core/cuda/utility.hpp	/^        __device__ __forceinline__ bool operator()(int y, int x) const$/;"	f	struct:cv::cuda::device::SingleMask
operator ()	core/cuda/utility.hpp	/^        __device__ __forceinline__ bool operator()(int y, int x) const$/;"	f	struct:cv::cuda::device::SingleMaskChannels
operator ()	core/cuda/utility.hpp	/^        __device__ __forceinline__ bool operator()(int, int) const$/;"	f	struct:cv::cuda::device::WithOutMask
operator ()	core/cuda/utility.hpp	/^        __device__ __forceinline__ bool operator()(int, int, int) const$/;"	f	struct:cv::cuda::device::WithOutMask
operator ()	core/cuda_types.hpp	/^            __CV_CUDA_HOST_DEVICE__       T& operator ()(int y, int x)       { return ptr(y)[x]; }$/;"	f	struct:cv::cuda::PtrStep
operator ()	core/cuda_types.hpp	/^            __CV_CUDA_HOST_DEVICE__ const T& operator ()(int y, int x) const { return ptr(y)[x]; }$/;"	f	struct:cv::cuda::PtrStep
operator ()	core/mat.inl.hpp	/^Mat Mat::operator()( Range _rowRange, Range _colRange ) const$/;"	f	class:cv::Mat
operator ()	core/mat.inl.hpp	/^Mat Mat::operator()( const Rect& roi ) const$/;"	f	class:cv::Mat
operator ()	core/mat.inl.hpp	/^Mat Mat::operator()(const Range* ranges) const$/;"	f	class:cv::Mat
operator ()	core/mat.inl.hpp	/^Mat_<_Tp> Mat_<_Tp>::operator()( const Range& _rowRange, const Range& _colRange ) const$/;"	f	class:cv::Mat_
operator ()	core/mat.inl.hpp	/^Mat_<_Tp> Mat_<_Tp>::operator()( const Range* ranges ) const$/;"	f	class:cv::Mat_
operator ()	core/mat.inl.hpp	/^Mat_<_Tp> Mat_<_Tp>::operator()( const Rect& roi ) const$/;"	f	class:cv::Mat_
operator ()	core/mat.inl.hpp	/^Size MatSize::operator()() const$/;"	f	class:cv::MatSize
operator ()	core/mat.inl.hpp	/^UMat UMat::operator()( Range _rowRange, Range _colRange ) const$/;"	f	class:cv::UMat
operator ()	core/mat.inl.hpp	/^UMat UMat::operator()( const Rect& roi ) const$/;"	f	class:cv::UMat
operator ()	core/mat.inl.hpp	/^UMat UMat::operator()(const Range* ranges) const$/;"	f	class:cv::UMat
operator ()	core/mat.inl.hpp	/^_Tp SparseMat_<_Tp>::operator()(const int* idx, size_t* hashval) const$/;"	f	class:cv::SparseMat_
operator ()	core/mat.inl.hpp	/^_Tp SparseMat_<_Tp>::operator()(int i0, int i1, int i2, size_t* hashval) const$/;"	f	class:cv::SparseMat_
operator ()	core/mat.inl.hpp	/^_Tp SparseMat_<_Tp>::operator()(int i0, int i1, size_t* hashval) const$/;"	f	class:cv::SparseMat_
operator ()	core/mat.inl.hpp	/^_Tp SparseMat_<_Tp>::operator()(int i0, size_t* hashval) const$/;"	f	class:cv::SparseMat_
operator ()	core/mat.inl.hpp	/^_Tp& Mat_<_Tp>::operator ()(Point pt)$/;"	f	class:cv::Mat_
operator ()	core/mat.inl.hpp	/^_Tp& Mat_<_Tp>::operator ()(const Vec<int, n>& idx)$/;"	f	class:cv::Mat_
operator ()	core/mat.inl.hpp	/^_Tp& Mat_<_Tp>::operator ()(const int* idx)$/;"	f	class:cv::Mat_
operator ()	core/mat.inl.hpp	/^_Tp& Mat_<_Tp>::operator ()(int i0)$/;"	f	class:cv::Mat_
operator ()	core/mat.inl.hpp	/^_Tp& Mat_<_Tp>::operator ()(int i0, int i1)$/;"	f	class:cv::Mat_
operator ()	core/mat.inl.hpp	/^_Tp& Mat_<_Tp>::operator ()(int i0, int i1, int i2)$/;"	f	class:cv::Mat_
operator ()	core/mat.inl.hpp	/^const _Tp& Mat_<_Tp>::operator ()(Point pt) const$/;"	f	class:cv::Mat_
operator ()	core/mat.inl.hpp	/^const _Tp& Mat_<_Tp>::operator ()(const Vec<int, n>& idx) const$/;"	f	class:cv::Mat_
operator ()	core/mat.inl.hpp	/^const _Tp& Mat_<_Tp>::operator ()(const int* idx) const$/;"	f	class:cv::Mat_
operator ()	core/mat.inl.hpp	/^const _Tp& Mat_<_Tp>::operator ()(int i0) const$/;"	f	class:cv::Mat_
operator ()	core/mat.inl.hpp	/^const _Tp& Mat_<_Tp>::operator ()(int i0, int i1) const$/;"	f	class:cv::Mat_
operator ()	core/mat.inl.hpp	/^const _Tp& Mat_<_Tp>::operator ()(int i0, int i1, int i2) const$/;"	f	class:cv::Mat_
operator ()	core/matx.hpp	/^    double operator ()(const Matx<_Tp, 1, 1>& a) const$/;"	f	struct:cv::internal::Matx_DetOp
operator ()	core/matx.hpp	/^    double operator ()(const Matx<_Tp, 2, 2>& a) const$/;"	f	struct:cv::internal::Matx_DetOp
operator ()	core/matx.hpp	/^    double operator ()(const Matx<_Tp, 3, 3>& a) const$/;"	f	struct:cv::internal::Matx_DetOp
operator ()	core/matx.hpp	/^    double operator ()(const Matx<_Tp, m, m>& a) const$/;"	f	struct:cv::internal::Matx_DetOp
operator ()	core/matx.hpp	/^_Tp& Matx<_Tp, m, n>::operator ()(int i)$/;"	f	class:cv::Matx
operator ()	core/matx.hpp	/^_Tp& Matx<_Tp, m, n>::operator ()(int i, int j)$/;"	f	class:cv::Matx
operator ()	core/matx.hpp	/^_Tp& Vec<_Tp, cn>::operator ()(int i)$/;"	f	class:cv::Vec
operator ()	core/matx.hpp	/^const _Tp& Matx<_Tp, m, n>::operator ()(int i) const$/;"	f	class:cv::Matx
operator ()	core/matx.hpp	/^const _Tp& Matx<_Tp, m, n>::operator()(int i, int j) const$/;"	f	class:cv::Matx
operator ()	core/matx.hpp	/^const _Tp& Vec<_Tp, cn>::operator ()(int i) const$/;"	f	class:cv::Vec
operator ()	core/operations.hpp	/^    bool operator()(const Matx<_Tp, 2, 2>& a, Matx<_Tp, 2, 2>& b, int) const$/;"	f	struct:cv::internal::Matx_FastInvOp
operator ()	core/operations.hpp	/^    bool operator()(const Matx<_Tp, 2, 2>& a, const Matx<_Tp, 2, 1>& b,$/;"	f	struct:cv::internal::Matx_FastSolveOp
operator ()	core/operations.hpp	/^    bool operator()(const Matx<_Tp, 3, 3>& a, Matx<_Tp, 3, 3>& b, int) const$/;"	f	struct:cv::internal::Matx_FastInvOp
operator ()	core/operations.hpp	/^    bool operator()(const Matx<_Tp, 3, 3>& a, const Matx<_Tp, 3, 1>& b,$/;"	f	struct:cv::internal::Matx_FastSolveOp
operator ()	core/operations.hpp	/^    bool operator()(const Matx<_Tp, m, m>& a, Matx<_Tp, m, m>& b, int method) const$/;"	f	struct:cv::internal::Matx_FastInvOp
operator ()	core/operations.hpp	/^    bool operator()(const Matx<_Tp, m, m>& a, const Matx<_Tp, m, n>& b,$/;"	f	struct:cv::internal::Matx_FastSolveOp
operator ()	core/operations.hpp	/^inline unsigned RNG::operator ()()           { return next(); }$/;"	f	class:cv::RNG
operator ()	core/operations.hpp	/^inline unsigned RNG::operator ()(unsigned N) { return (unsigned)uniform(0,N); }$/;"	f	class:cv::RNG
operator ()	core/persistence.hpp	/^        void operator()(const std::vector<_Tp>& vec) const$/;"	f	class:cv::internal::VecWriterProxy
operator ()	core/persistence.hpp	/^        void operator()(std::vector<_Tp>& vec, size_t count) const$/;"	f	class:cv::internal::VecReaderProxy
operator ()	core/ptr.inl.hpp	/^void DefaultDeleter<Y>::operator () (Y* p) const$/;"	f	class:cv::DefaultDeleter
operator ()	core/wimage.hpp	/^    inline T* operator() (int c, int r)  {$/;"	f	class:cv::WImage
operator ()	core/wimage.hpp	/^    inline const T* operator() (int c, int r) const  {$/;"	f	class:cv::WImage
operator ()	cudev/functional/detail/color_cvt.hpp	/^        __device__ T operator ()(const typename MakeVec<T, scn>::type& src) const$/;"	f	struct:cv::cudev::color_cvt_detail::RGB2Gray
operator ()	cudev/functional/detail/color_cvt.hpp	/^        __device__ float operator ()(const typename MakeVec<float, scn>::type& src) const$/;"	f	struct:cv::cudev::color_cvt_detail::RGB2Gray
operator ()	cudev/functional/detail/color_cvt.hpp	/^        __device__ typename MakeVec<T, dcn>::type operator ()(T src) const$/;"	f	struct:cv::cudev::color_cvt_detail::Gray2RGB
operator ()	cudev/functional/detail/color_cvt.hpp	/^        __device__ typename MakeVec<T, dcn>::type operator ()(const typename MakeVec<T, scn>::type& src) const$/;"	f	struct:cv::cudev::color_cvt_detail::RGB2RGB
operator ()	cudev/functional/detail/color_cvt.hpp	/^        __device__ typename MakeVec<T, dcn>::type operator ()(const typename MakeVec<T, scn>::type& src) const$/;"	f	struct:cv::cudev::color_cvt_detail::RGB2XYZ
operator ()	cudev/functional/detail/color_cvt.hpp	/^        __device__ typename MakeVec<T, dcn>::type operator ()(const typename MakeVec<T, scn>::type& src) const$/;"	f	struct:cv::cudev::color_cvt_detail::RGB2YCrCb
operator ()	cudev/functional/detail/color_cvt.hpp	/^        __device__ typename MakeVec<T, dcn>::type operator ()(const typename MakeVec<T, scn>::type& src) const$/;"	f	struct:cv::cudev::color_cvt_detail::RGB2YUV
operator ()	cudev/functional/detail/color_cvt.hpp	/^        __device__ typename MakeVec<T, dcn>::type operator ()(const typename MakeVec<T, scn>::type& src) const$/;"	f	struct:cv::cudev::color_cvt_detail::XYZ2RGB
operator ()	cudev/functional/detail/color_cvt.hpp	/^        __device__ typename MakeVec<T, dcn>::type operator ()(const typename MakeVec<T, scn>::type& src) const$/;"	f	struct:cv::cudev::color_cvt_detail::YCrCb2RGB
operator ()	cudev/functional/detail/color_cvt.hpp	/^        __device__ typename MakeVec<T, dcn>::type operator ()(const typename MakeVec<T, scn>::type& src) const$/;"	f	struct:cv::cudev::color_cvt_detail::YUV2RGB
operator ()	cudev/functional/detail/color_cvt.hpp	/^        __device__ typename MakeVec<float, dcn>::type operator ()(const typename MakeVec<float, scn>::type& src) const$/;"	f	struct:cv::cudev::color_cvt_detail::HLS2RGB
operator ()	cudev/functional/detail/color_cvt.hpp	/^        __device__ typename MakeVec<float, dcn>::type operator ()(const typename MakeVec<float, scn>::type& src) const$/;"	f	struct:cv::cudev::color_cvt_detail::HSV2RGB
operator ()	cudev/functional/detail/color_cvt.hpp	/^        __device__ typename MakeVec<float, dcn>::type operator ()(const typename MakeVec<float, scn>::type& src) const$/;"	f	struct:cv::cudev::color_cvt_detail::Lab2RGB
operator ()	cudev/functional/detail/color_cvt.hpp	/^        __device__ typename MakeVec<float, dcn>::type operator ()(const typename MakeVec<float, scn>::type& src) const$/;"	f	struct:cv::cudev::color_cvt_detail::Luv2RGB
operator ()	cudev/functional/detail/color_cvt.hpp	/^        __device__ typename MakeVec<float, dcn>::type operator ()(const typename MakeVec<float, scn>::type& src) const$/;"	f	struct:cv::cudev::color_cvt_detail::RGB2HLS
operator ()	cudev/functional/detail/color_cvt.hpp	/^        __device__ typename MakeVec<float, dcn>::type operator ()(const typename MakeVec<float, scn>::type& src) const$/;"	f	struct:cv::cudev::color_cvt_detail::RGB2HSV
operator ()	cudev/functional/detail/color_cvt.hpp	/^        __device__ typename MakeVec<float, dcn>::type operator ()(const typename MakeVec<float, scn>::type& src) const$/;"	f	struct:cv::cudev::color_cvt_detail::RGB2Lab
operator ()	cudev/functional/detail/color_cvt.hpp	/^        __device__ typename MakeVec<float, dcn>::type operator ()(const typename MakeVec<float, scn>::type& src) const$/;"	f	struct:cv::cudev::color_cvt_detail::RGB2Luv
operator ()	cudev/functional/detail/color_cvt.hpp	/^        __device__ typename MakeVec<float, dcn>::type operator ()(const typename MakeVec<float, scn>::type& src) const$/;"	f	struct:cv::cudev::color_cvt_detail::RGB2XYZ
operator ()	cudev/functional/detail/color_cvt.hpp	/^        __device__ typename MakeVec<float, dcn>::type operator ()(const typename MakeVec<float, scn>::type& src) const$/;"	f	struct:cv::cudev::color_cvt_detail::RGB2YCrCb
operator ()	cudev/functional/detail/color_cvt.hpp	/^        __device__ typename MakeVec<float, dcn>::type operator ()(const typename MakeVec<float, scn>::type& src) const$/;"	f	struct:cv::cudev::color_cvt_detail::RGB2YUV
operator ()	cudev/functional/detail/color_cvt.hpp	/^        __device__ typename MakeVec<float, dcn>::type operator ()(const typename MakeVec<float, scn>::type& src) const$/;"	f	struct:cv::cudev::color_cvt_detail::XYZ2RGB
operator ()	cudev/functional/detail/color_cvt.hpp	/^        __device__ typename MakeVec<float, dcn>::type operator ()(const typename MakeVec<float, scn>::type& src) const$/;"	f	struct:cv::cudev::color_cvt_detail::YCrCb2RGB
operator ()	cudev/functional/detail/color_cvt.hpp	/^        __device__ typename MakeVec<float, dcn>::type operator ()(const typename MakeVec<float, scn>::type& src) const$/;"	f	struct:cv::cudev::color_cvt_detail::YUV2RGB
operator ()	cudev/functional/detail/color_cvt.hpp	/^        __device__ typename MakeVec<uchar, dcn>::type operator ()(const typename MakeVec<uchar, scn>::type& src) const$/;"	f	struct:cv::cudev::color_cvt_detail::HLS2RGB
operator ()	cudev/functional/detail/color_cvt.hpp	/^        __device__ typename MakeVec<uchar, dcn>::type operator ()(const typename MakeVec<uchar, scn>::type& src) const$/;"	f	struct:cv::cudev::color_cvt_detail::HSV2RGB
operator ()	cudev/functional/detail/color_cvt.hpp	/^        __device__ typename MakeVec<uchar, dcn>::type operator ()(const typename MakeVec<uchar, scn>::type& src) const$/;"	f	struct:cv::cudev::color_cvt_detail::Lab2RGB
operator ()	cudev/functional/detail/color_cvt.hpp	/^        __device__ typename MakeVec<uchar, dcn>::type operator ()(const typename MakeVec<uchar, scn>::type& src) const$/;"	f	struct:cv::cudev::color_cvt_detail::Luv2RGB
operator ()	cudev/functional/detail/color_cvt.hpp	/^        __device__ typename MakeVec<uchar, dcn>::type operator ()(const typename MakeVec<uchar, scn>::type& src) const$/;"	f	struct:cv::cudev::color_cvt_detail::RGB2HLS
operator ()	cudev/functional/detail/color_cvt.hpp	/^        __device__ typename MakeVec<uchar, dcn>::type operator ()(const typename MakeVec<uchar, scn>::type& src) const$/;"	f	struct:cv::cudev::color_cvt_detail::RGB2HSV
operator ()	cudev/functional/detail/color_cvt.hpp	/^        __device__ typename MakeVec<uchar, dcn>::type operator ()(const typename MakeVec<uchar, scn>::type& src) const$/;"	f	struct:cv::cudev::color_cvt_detail::RGB2Lab
operator ()	cudev/functional/detail/color_cvt.hpp	/^        __device__ typename MakeVec<uchar, dcn>::type operator ()(const typename MakeVec<uchar, scn>::type& src) const$/;"	f	struct:cv::cudev::color_cvt_detail::RGB2Luv
operator ()	cudev/functional/detail/color_cvt.hpp	/^        __device__ uchar operator ()(ushort src) const$/;"	f	struct:cv::cudev::color_cvt_detail::RGB5x52Gray
operator ()	cudev/functional/detail/color_cvt.hpp	/^        __device__ uchar3 operator ()(ushort src) const$/;"	f	struct:cv::cudev::color_cvt_detail::RGB5x52RGB
operator ()	cudev/functional/detail/color_cvt.hpp	/^        __device__ uchar4 operator ()(ushort src) const$/;"	f	struct:cv::cudev::color_cvt_detail::RGB5x52RGB
operator ()	cudev/functional/detail/color_cvt.hpp	/^        __device__ ushort operator ()(const typename MakeVec<uchar, scn>::type& src) const$/;"	f	struct:cv::cudev::color_cvt_detail::RGB2RGB5x5
operator ()	cudev/functional/detail/color_cvt.hpp	/^        __device__ ushort operator ()(const uchar3& src) const$/;"	f	struct:cv::cudev::color_cvt_detail::RGB2RGB5x5
operator ()	cudev/functional/detail/color_cvt.hpp	/^        __device__ ushort operator ()(const uchar4& src) const$/;"	f	struct:cv::cudev::color_cvt_detail::RGB2RGB5x5
operator ()	cudev/functional/detail/color_cvt.hpp	/^        __device__ ushort operator ()(uchar src) const$/;"	f	struct:cv::cudev::color_cvt_detail::Gray2RGB5x5
operator ()	cudev/functional/functional.hpp	/^                                    operator ()(typename TypeTraits<T>::parameter_type a) const$/;"	f	struct:cv::cudev::logical_not
operator ()	cudev/functional/functional.hpp	/^                                    operator ()(typename TypeTraits<T>::parameter_type a,$/;"	f	struct:cv::cudev::equal_to
operator ()	cudev/functional/functional.hpp	/^                                    operator ()(typename TypeTraits<T>::parameter_type a,$/;"	f	struct:cv::cudev::greater
operator ()	cudev/functional/functional.hpp	/^                                    operator ()(typename TypeTraits<T>::parameter_type a,$/;"	f	struct:cv::cudev::greater_equal
operator ()	cudev/functional/functional.hpp	/^                                    operator ()(typename TypeTraits<T>::parameter_type a,$/;"	f	struct:cv::cudev::less
operator ()	cudev/functional/functional.hpp	/^                                    operator ()(typename TypeTraits<T>::parameter_type a,$/;"	f	struct:cv::cudev::less_equal
operator ()	cudev/functional/functional.hpp	/^                                    operator ()(typename TypeTraits<T>::parameter_type a,$/;"	f	struct:cv::cudev::logical_and
operator ()	cudev/functional/functional.hpp	/^                                    operator ()(typename TypeTraits<T>::parameter_type a,$/;"	f	struct:cv::cudev::logical_or
operator ()	cudev/functional/functional.hpp	/^                                    operator ()(typename TypeTraits<T>::parameter_type a,$/;"	f	struct:cv::cudev::not_equal_to
operator ()	cudev/functional/functional.hpp	/^                    operator ()(typename TypeTraits<T1>::parameter_type lhs,$/;"	f	struct:cv::cudev::project1st
operator ()	cudev/functional/functional.hpp	/^                    operator ()(typename TypeTraits<T1>::parameter_type,$/;"	f	struct:cv::cudev::project2nd
operator ()	cudev/functional/functional.hpp	/^    __device__ T operator ()(T x, T y) const$/;"	f	struct:cv::cudev::direction_func
operator ()	cudev/functional/functional.hpp	/^    __device__ __forceinline__ D operator ()(typename TypeTraits<T>::parameter_type v) const$/;"	f	struct:cv::cudev::saturate_cast_func
operator ()	cudev/functional/functional.hpp	/^    __device__ __forceinline__ T operator ()(typename TypeTraits<T>::parameter_type a) const$/;"	f	struct:cv::cudev::negate
operator ()	cudev/functional/functional.hpp	/^    __device__ __forceinline__ T operator ()(typename TypeTraits<T>::parameter_type a, typename TypeTraits<T>::parameter_type b) const$/;"	f	struct:cv::cudev::absdiff_func
operator ()	cudev/functional/functional.hpp	/^    __device__ __forceinline__ T operator ()(typename TypeTraits<T>::parameter_type a,$/;"	f	struct:cv::cudev::bit_and
operator ()	cudev/functional/functional.hpp	/^    __device__ __forceinline__ T operator ()(typename TypeTraits<T>::parameter_type a,$/;"	f	struct:cv::cudev::bit_lshift
operator ()	cudev/functional/functional.hpp	/^    __device__ __forceinline__ T operator ()(typename TypeTraits<T>::parameter_type a,$/;"	f	struct:cv::cudev::bit_or
operator ()	cudev/functional/functional.hpp	/^    __device__ __forceinline__ T operator ()(typename TypeTraits<T>::parameter_type a,$/;"	f	struct:cv::cudev::bit_rshift
operator ()	cudev/functional/functional.hpp	/^    __device__ __forceinline__ T operator ()(typename TypeTraits<T>::parameter_type a,$/;"	f	struct:cv::cudev::bit_xor
operator ()	cudev/functional/functional.hpp	/^    __device__ __forceinline__ T operator ()(typename TypeTraits<T>::parameter_type a,$/;"	f	struct:cv::cudev::divides
operator ()	cudev/functional/functional.hpp	/^    __device__ __forceinline__ T operator ()(typename TypeTraits<T>::parameter_type a,$/;"	f	struct:cv::cudev::maximum
operator ()	cudev/functional/functional.hpp	/^    __device__ __forceinline__ T operator ()(typename TypeTraits<T>::parameter_type a,$/;"	f	struct:cv::cudev::minimum
operator ()	cudev/functional/functional.hpp	/^    __device__ __forceinline__ T operator ()(typename TypeTraits<T>::parameter_type a,$/;"	f	struct:cv::cudev::minus
operator ()	cudev/functional/functional.hpp	/^    __device__ __forceinline__ T operator ()(typename TypeTraits<T>::parameter_type a,$/;"	f	struct:cv::cudev::modulus
operator ()	cudev/functional/functional.hpp	/^    __device__ __forceinline__ T operator ()(typename TypeTraits<T>::parameter_type a,$/;"	f	struct:cv::cudev::multiplies
operator ()	cudev/functional/functional.hpp	/^    __device__ __forceinline__ T operator ()(typename TypeTraits<T>::parameter_type a,$/;"	f	struct:cv::cudev::plus
operator ()	cudev/functional/functional.hpp	/^    __device__ __forceinline__ T operator ()(typename TypeTraits<T>::parameter_type src) const$/;"	f	struct:cv::cudev::ThreshBinaryFunc
operator ()	cudev/functional/functional.hpp	/^    __device__ __forceinline__ T operator ()(typename TypeTraits<T>::parameter_type src) const$/;"	f	struct:cv::cudev::ThreshBinaryInvFunc
operator ()	cudev/functional/functional.hpp	/^    __device__ __forceinline__ T operator ()(typename TypeTraits<T>::parameter_type src) const$/;"	f	struct:cv::cudev::ThreshToZeroFunc
operator ()	cudev/functional/functional.hpp	/^    __device__ __forceinline__ T operator ()(typename TypeTraits<T>::parameter_type src) const$/;"	f	struct:cv::cudev::ThreshToZeroInvFunc
operator ()	cudev/functional/functional.hpp	/^    __device__ __forceinline__ T operator ()(typename TypeTraits<T>::parameter_type src) const$/;"	f	struct:cv::cudev::ThreshTruncFunc
operator ()	cudev/functional/functional.hpp	/^    __device__ __forceinline__ T operator ()(typename TypeTraits<T>::parameter_type v) const$/;"	f	struct:cv::cudev::bit_not
operator ()	cudev/functional/functional.hpp	/^    __device__ __forceinline__ T operator ()(typename TypeTraits<T>::parameter_type x) const$/;"	f	struct:cv::cudev::abs_func
operator ()	cudev/functional/functional.hpp	/^    __device__ __forceinline__ T operator ()(typename TypeTraits<T>::parameter_type x) const$/;"	f	struct:cv::cudev::identity
operator ()	cudev/functional/functional.hpp	/^    __device__ __forceinline__ T operator ()(typename TypeTraits<T>::parameter_type x) const$/;"	f	struct:cv::cudev::sqr_func
operator ()	cudev/functional/functional.hpp	/^    __device__ __forceinline__ double operator ()(double val, double power) const$/;"	f	struct:cv::cudev::pow_func
operator ()	cudev/functional/functional.hpp	/^    __device__ __forceinline__ double operator ()(double x) const$/;"	f	struct:cv::cudev::abs_func
operator ()	cudev/functional/functional.hpp	/^    __device__ __forceinline__ float operator ()(T val, float power) const$/;"	f	struct:cv::cudev::pow_func
operator ()	cudev/functional/functional.hpp	/^    __device__ __forceinline__ float operator ()(float x) const$/;"	f	struct:cv::cudev::abs_func
operator ()	cudev/functional/functional.hpp	/^    __device__ __forceinline__ int operator ()(int x) const$/;"	f	struct:cv::cudev::abs_func
operator ()	cudev/functional/functional.hpp	/^    __device__ __forceinline__ schar operator ()(schar x) const$/;"	f	struct:cv::cudev::abs_func
operator ()	cudev/functional/functional.hpp	/^    __device__ __forceinline__ short operator ()(short x) const$/;"	f	struct:cv::cudev::abs_func
operator ()	cudev/functional/functional.hpp	/^    __device__ __forceinline__ typename Op::result_type operator ()($/;"	f	struct:cv::cudev::Binder1st
operator ()	cudev/functional/functional.hpp	/^    __device__ __forceinline__ typename Op::result_type operator ()($/;"	f	struct:cv::cudev::Binder2nd
operator ()	cudev/functional/functional.hpp	/^    __device__ __forceinline__ typename Predicate::result_type operator ()($/;"	f	struct:cv::cudev::BinaryNegate
operator ()	cudev/functional/functional.hpp	/^    __device__ __forceinline__ typename Predicate::result_type operator ()($/;"	f	struct:cv::cudev::UnaryNegate
operator ()	cudev/functional/functional.hpp	/^    __device__ __forceinline__ typename functional_detail::FloatType<T>::type operator ()(typename TypeTraits<T>::parameter_type a, typename TypeTraits<T>::parameter_type b) const$/;"	f	struct:cv::cudev::magnitude_func
operator ()	cudev/functional/functional.hpp	/^    __device__ __forceinline__ typename functional_detail::FloatType<T>::type operator ()(typename TypeTraits<T>::parameter_type a, typename TypeTraits<T>::parameter_type b) const$/;"	f	struct:cv::cudev::magnitude_sqr_func
operator ()	cudev/functional/functional.hpp	/^    __device__ __forceinline__ uchar operator ()(uchar x) const$/;"	f	struct:cv::cudev::abs_func
operator ()	cudev/functional/functional.hpp	/^    __device__ __forceinline__ uint operator ()(uint x) const$/;"	f	struct:cv::cudev::abs_func
operator ()	cudev/functional/functional.hpp	/^    __device__ __forceinline__ ushort operator ()(ushort x) const$/;"	f	struct:cv::cudev::abs_func
operator ()	cudev/functional/tuple_adapter.hpp	/^    __device__ __forceinline__ typename Op::result_type operator ()(const Tuple& t) const$/;"	f	struct:cv::cudev::BinaryTupleAdapter
operator ()	cudev/functional/tuple_adapter.hpp	/^    __device__ __forceinline__ typename Op::result_type operator ()(const Tuple& t) const$/;"	f	struct:cv::cudev::UnaryTupleAdapter
operator ()	cudev/ptr2d/constant.hpp	/^    __device__ __forceinline__ T operator ()(int, int) const { return value; }$/;"	f	struct:cv::cudev::ConstantPtr
operator ()	cudev/ptr2d/deriv.hpp	/^    __device__ __forceinline__ typename PtrTraits<SrcPtr>::value_type operator ()(int y, int x) const$/;"	f	struct:cv::cudev::DerivXPtr
operator ()	cudev/ptr2d/deriv.hpp	/^    __device__ __forceinline__ typename PtrTraits<SrcPtr>::value_type operator ()(int y, int x) const$/;"	f	struct:cv::cudev::DerivYPtr
operator ()	cudev/ptr2d/deriv.hpp	/^    __device__ typename PtrTraits<SrcPtr>::value_type operator ()(int y, int x) const$/;"	f	struct:cv::cudev::LaplacianPtr
operator ()	cudev/ptr2d/deriv.hpp	/^    __device__ typename PtrTraits<SrcPtr>::value_type operator ()(int y, int x) const$/;"	f	struct:cv::cudev::ScharrXPtr
operator ()	cudev/ptr2d/deriv.hpp	/^    __device__ typename PtrTraits<SrcPtr>::value_type operator ()(int y, int x) const$/;"	f	struct:cv::cudev::ScharrYPtr
operator ()	cudev/ptr2d/deriv.hpp	/^    __device__ typename PtrTraits<SrcPtr>::value_type operator ()(int y, int x) const$/;"	f	struct:cv::cudev::SobelXPtr
operator ()	cudev/ptr2d/deriv.hpp	/^    __device__ typename PtrTraits<SrcPtr>::value_type operator ()(int y, int x) const$/;"	f	struct:cv::cudev::SobelYPtr
operator ()	cudev/ptr2d/deriv.hpp	/^   __device__ typename PtrTraits<SrcPtr>::value_type operator ()(int y, int x) const$/;"	f	struct:cv::cudev::LaplacianPtr
operator ()	cudev/ptr2d/detail/gpumat.hpp	/^__host__ GpuMat_<T> GpuMat_<T>::operator ()(Range _rowRange, Range _colRange) const$/;"	f	class:cv::cudev::GpuMat_
operator ()	cudev/ptr2d/detail/gpumat.hpp	/^__host__ GpuMat_<T> GpuMat_<T>::operator ()(Rect roi) const$/;"	f	class:cv::cudev::GpuMat_
operator ()	cudev/ptr2d/extrapolation.hpp	/^    __device__ __forceinline__ typename PtrTraits<SrcPtr>::value_type operator ()(int y, int x) const$/;"	f	struct:cv::cudev::BrdBase
operator ()	cudev/ptr2d/extrapolation.hpp	/^    __device__ __forceinline__ typename PtrTraits<SrcPtr>::value_type operator ()(int y, int x) const$/;"	f	struct:cv::cudev::BrdConstant
operator ()	cudev/ptr2d/glob.hpp	/^    __device__ __forceinline__       T& operator ()(int y, int x)       { return row(y)[x]; }$/;"	f	struct:cv::cudev::GlobPtr
operator ()	cudev/ptr2d/glob.hpp	/^    __device__ __forceinline__ const T& operator ()(int y, int x) const { return row(y)[x]; }$/;"	f	struct:cv::cudev::GlobPtr
operator ()	cudev/ptr2d/interpolation.hpp	/^    __device__ __forceinline__ typename PtrTraits<SrcPtr>::value_type operator ()(float y, float x) const$/;"	f	struct:cv::cudev::NearestInterPtr
operator ()	cudev/ptr2d/interpolation.hpp	/^    __device__ typename PtrTraits<SrcPtr>::value_type operator ()(float y, float x) const$/;"	f	struct:cv::cudev::CommonAreaInterPtr
operator ()	cudev/ptr2d/interpolation.hpp	/^    __device__ typename PtrTraits<SrcPtr>::value_type operator ()(float y, float x) const$/;"	f	struct:cv::cudev::CubicInterPtr
operator ()	cudev/ptr2d/interpolation.hpp	/^    __device__ typename PtrTraits<SrcPtr>::value_type operator ()(float y, float x) const$/;"	f	struct:cv::cudev::IntegerAreaInterPtr
operator ()	cudev/ptr2d/interpolation.hpp	/^    __device__ typename PtrTraits<SrcPtr>::value_type operator ()(float y, float x) const$/;"	f	struct:cv::cudev::LinearInterPtr
operator ()	cudev/ptr2d/lut.hpp	/^    __device__ __forceinline__ typename PtrTraits<TablePtr>::value_type operator ()(typename PtrTraits<SrcPtr>::index_type y, typename PtrTraits<SrcPtr>::index_type x) const$/;"	f	struct:cv::cudev::LutPtr
operator ()	cudev/ptr2d/mask.hpp	/^    __device__ __forceinline__ bool operator ()(int, int) const$/;"	f	struct:cv::cudev::WithOutMask
operator ()	cudev/ptr2d/mask.hpp	/^    __device__ __forceinline__ value_type operator()(index_type y, index_type x) const$/;"	f	struct:cv::cudev::SingleMaskChannels
operator ()	cudev/ptr2d/remap.hpp	/^    __device__ __forceinline__ typename PtrTraits<SrcPtr>::value_type operator ()(typename PtrTraits<MapPtr>::index_type y, typename PtrTraits<MapPtr>::index_type x) const$/;"	f	struct:cv::cudev::RemapPtr1
operator ()	cudev/ptr2d/remap.hpp	/^    __device__ __forceinline__ typename PtrTraits<SrcPtr>::value_type operator ()(typename PtrTraits<MapXPtr>::index_type y, typename PtrTraits<MapXPtr>::index_type x) const$/;"	f	struct:cv::cudev::RemapPtr2
operator ()	cudev/ptr2d/resize.hpp	/^    __device__ __forceinline__ typename PtrTraits<SrcPtr>::value_type operator ()(typename PtrTraits<SrcPtr>::index_type y, typename PtrTraits<SrcPtr>::index_type x) const$/;"	f	struct:cv::cudev::ResizePtr
operator ()	cudev/ptr2d/texture.hpp	/^    __device__ __forceinline__ T operator ()(float y, float x) const$/;"	f	struct:cv::cudev::TexturePtr
operator ()	cudev/ptr2d/transform.hpp	/^    __device__ __forceinline__ typename Op::result_type operator ()(typename PtrTraits<Src1Ptr>::index_type y, typename PtrTraits<Src1Ptr>::index_type x) const$/;"	f	struct:cv::cudev::BinaryTransformPtr
operator ()	cudev/ptr2d/transform.hpp	/^    __device__ __forceinline__ typename Op::result_type operator ()(typename PtrTraits<SrcPtr>::index_type y, typename PtrTraits<SrcPtr>::index_type x) const$/;"	f	struct:cv::cudev::UnaryTransformPtr
operator ()	cudev/ptr2d/warping.hpp	/^    __device__ __forceinline__ float2 operator ()(float y, float x) const$/;"	f	struct:cv::cudev::AffineMapPtr
operator ()	cudev/ptr2d/warping.hpp	/^    __device__ __forceinline__ float2 operator ()(float y, float x) const$/;"	f	struct:cv::cudev::PerspectiveMapPtr
operator ()	cudev/ptr2d/zip.hpp	/^    __device__ __forceinline__ value_type operator ()(index_type y, index_type x) const$/;"	f	struct:cv::cudev::ZipPtr
operator ()	features2d.hpp	/^    ResultType operator()( const T* a, const T* b, int size ) const$/;"	f	struct:cv::L1
operator ()	features2d.hpp	/^    ResultType operator()( const T* a, const T* b, int size ) const$/;"	f	struct:cv::L2
operator ()	features2d.hpp	/^    ResultType operator()( const T* a, const T* b, int size ) const$/;"	f	struct:cv::SL2
operator ()	flann/dist.h	/^    ResultType operator()( ResultType dist ) { return dist*dist; }$/;"	f	struct:cvflann::squareDistance
operator ()	flann/dist.h	/^    ResultType operator()( ResultType dist ) { return dist; }$/;"	f	struct:cvflann::simpleDistance
operator ()	flann/dist.h	/^    ResultType operator()( ResultType dist ) { return dist; }$/;"	f	struct:cvflann::squareDistance
operator ()	flann/dist.h	/^    ResultType operator()( ResultType dist ) { return sqrt(dist); }$/;"	f	struct:cvflann::simpleDistance
operator ()	flann/dist.h	/^    ResultType operator()(Iterator1 a, Iterator2 b, size_t size, ResultType \/*worst_dist*\/ = -1) const$/;"	f	struct:cvflann::Hamming
operator ()	flann/dist.h	/^    ResultType operator()(Iterator1 a, Iterator2 b, size_t size, ResultType \/*worst_dist*\/ = -1) const$/;"	f	struct:cvflann::Hamming2
operator ()	flann/dist.h	/^    ResultType operator()(Iterator1 a, Iterator2 b, size_t size, ResultType \/*worst_dist*\/ = -1) const$/;"	f	struct:cvflann::HellingerDistance
operator ()	flann/dist.h	/^    ResultType operator()(Iterator1 a, Iterator2 b, size_t size, ResultType \/*worst_dist*\/ = -1) const$/;"	f	struct:cvflann::L2_Simple
operator ()	flann/dist.h	/^    ResultType operator()(Iterator1 a, Iterator2 b, size_t size, ResultType worst_dist = -1) const$/;"	f	struct:cvflann::ChiSquareDistance
operator ()	flann/dist.h	/^    ResultType operator()(Iterator1 a, Iterator2 b, size_t size, ResultType worst_dist = -1) const$/;"	f	struct:cvflann::HistIntersectionDistance
operator ()	flann/dist.h	/^    ResultType operator()(Iterator1 a, Iterator2 b, size_t size, ResultType worst_dist = -1) const$/;"	f	struct:cvflann::KL_Divergence
operator ()	flann/dist.h	/^    ResultType operator()(Iterator1 a, Iterator2 b, size_t size, ResultType worst_dist = -1) const$/;"	f	struct:cvflann::L1
operator ()	flann/dist.h	/^    ResultType operator()(Iterator1 a, Iterator2 b, size_t size, ResultType worst_dist = -1) const$/;"	f	struct:cvflann::L2
operator ()	flann/dist.h	/^    ResultType operator()(Iterator1 a, Iterator2 b, size_t size, ResultType worst_dist = -1) const$/;"	f	struct:cvflann::MaxDistance
operator ()	flann/dist.h	/^    ResultType operator()(Iterator1 a, Iterator2 b, size_t size, ResultType worst_dist = -1) const$/;"	f	struct:cvflann::MinkowskiDistance
operator ()	flann/dist.h	/^    ResultType operator()(const unsigned char* a, const unsigned char* b, size_t size) const$/;"	f	struct:cvflann::HammingLUT
operator ()	flann/heap.h	/^        bool operator()(const T& t_1, const T& t_2) const$/;"	f	struct:cvflann::Heap::CompareT
operator ()	flann/kmeans_index.h	/^        void operator()(const cv::Range& range) const$/;"	f	class:cvflann::KMeansIndex::KMeansDistanceComputer
operator ()	flann/lsh_index.h	/^        bool operator()(const ScoreIndexPair& left, const ScoreIndexPair& right) const$/;"	f	struct:cvflann::LshIndex::SortScoreIndexPairOnSecond
operator ()	objdetect.hpp	/^    inline bool operator()(const Rect& r1, const Rect& r2) const$/;"	f	class:cv::SimilarRects
operator ()	stitching/detail/matchers.hpp	/^    void operator ()(const ImageFeatures &features1, const ImageFeatures &features2,$/;"	f	class:cv::detail::FeaturesMatcher
operator ()	stitching/detail/motion_estimators.hpp	/^    bool operator ()(const std::vector<ImageFeatures> &features,$/;"	f	class:cv::detail::Estimator
operator ()	stitching/detail/seam_finders.hpp	/^        bool operator() (const Point &p1, const Point &p2) const$/;"	f	class:cv::detail::DpSeamFinder::ClosePoints
operator ()	stitching/detail/seam_finders.hpp	/^        bool operator() (const std::pair<size_t, size_t> &l, const std::pair<size_t, size_t> &r) const$/;"	f	class:cv::detail::DpSeamFinder::ImagePairLess
operator ()	ts/ts_perf.hpp	/^    bool operator()(const cv::KeyPoint& kp1, const cv::KeyPoint& kp2) const$/;"	f	struct:perf::comparators::KeypointGreater
operator ()	ts/ts_perf.hpp	/^  bool operator()(const cv::Rect_<T>& r1, const cv::Rect_<T>& r2) const$/;"	f	struct:perf::comparators::RectLess_
operator *	core/affine.hpp	/^V cv::operator*(const cv::Affine3<T>& affine, const V& v)$/;"	f	class:cv
operator *	core/affine.hpp	/^cv::Affine3<T> cv::operator*(const cv::Affine3<T>& affine1, const cv::Affine3<T>& affine2)$/;"	f	class:cv
operator *	core/affine.hpp	/^cv::Vec3d cv::operator*(const cv::Affine3d& affine, const cv::Vec3d& v)$/;"	f	class:cv
operator *	core/affine.hpp	/^cv::Vec3f cv::operator*(const cv::Affine3f& affine, const cv::Vec3f& v)$/;"	f	class:cv
operator *	core/core_c.h	/^template<typename _Tp> inline _Tp& SeqIterator<_Tp>::operator *()$/;"	f	class:cv::SeqIterator
operator *	core/core_c.h	/^template<typename _Tp> inline const _Tp& SeqIterator<_Tp>::operator *() const$/;"	f	class:cv::SeqIterator
operator *	core/mat.inl.hpp	/^_Tp MatConstIterator_<_Tp>::operator *() const$/;"	f	class:cv::MatConstIterator_
operator *	core/mat.inl.hpp	/^_Tp& MatIterator_<_Tp>::operator *() const$/;"	f	class:cv::MatIterator_
operator *	core/mat.inl.hpp	/^_Tp& SparseMatIterator_<_Tp>::operator *() const$/;"	f	class:cv::SparseMatIterator_
operator *	core/mat.inl.hpp	/^const _Tp& SparseMatConstIterator_<_Tp>::operator *() const$/;"	f	class:cv::SparseMatConstIterator_
operator *	core/mat.inl.hpp	/^const uchar* MatConstIterator::operator *() const$/;"	f	class:cv::MatConstIterator
operator *	core/matx.hpp	/^Matx<_Tp, m, n> MatxCommaInitializer<_Tp, m, n>::operator *() const$/;"	f	class:cv::MatxCommaInitializer
operator *	core/matx.hpp	/^Matx<_Tp, m, n> operator * (const Matx<_Tp, m, l>& a, const Matx<_Tp, l, n>& b)$/;"	f	namespace:cv
operator *	core/matx.hpp	/^Matx<_Tp, m, n> operator * (const Matx<_Tp, m, n>& a, double alpha)$/;"	f	namespace:cv
operator *	core/matx.hpp	/^Matx<_Tp, m, n> operator * (const Matx<_Tp, m, n>& a, float alpha)$/;"	f	namespace:cv
operator *	core/matx.hpp	/^Matx<_Tp, m, n> operator * (const Matx<_Tp, m, n>& a, int alpha)$/;"	f	namespace:cv
operator *	core/matx.hpp	/^Matx<_Tp, m, n> operator * (double alpha, const Matx<_Tp, m, n>& a)$/;"	f	namespace:cv
operator *	core/matx.hpp	/^Matx<_Tp, m, n> operator * (float alpha, const Matx<_Tp, m, n>& a)$/;"	f	namespace:cv
operator *	core/matx.hpp	/^Matx<_Tp, m, n> operator * (int alpha, const Matx<_Tp, m, n>& a)$/;"	f	namespace:cv
operator *	core/matx.hpp	/^Vec<_Tp, cn> VecCommaInitializer<_Tp, cn>::operator *() const$/;"	f	class:cv::VecCommaInitializer
operator *	core/matx.hpp	/^Vec<_Tp, cn> operator * (const Vec<_Tp, cn>& a, double alpha)$/;"	f	namespace:cv
operator *	core/matx.hpp	/^Vec<_Tp, cn> operator * (const Vec<_Tp, cn>& a, float alpha)$/;"	f	namespace:cv
operator *	core/matx.hpp	/^Vec<_Tp, cn> operator * (const Vec<_Tp, cn>& a, int alpha)$/;"	f	namespace:cv
operator *	core/matx.hpp	/^Vec<_Tp, cn> operator * (double alpha, const Vec<_Tp, cn>& a)$/;"	f	namespace:cv
operator *	core/matx.hpp	/^Vec<_Tp, cn> operator * (float alpha, const Vec<_Tp, cn>& a)$/;"	f	namespace:cv
operator *	core/matx.hpp	/^Vec<_Tp, cn> operator * (int alpha, const Vec<_Tp, cn>& a)$/;"	f	namespace:cv
operator *	core/matx.hpp	/^Vec<_Tp, m> operator * (const Matx<_Tp, m, n>& a, const Vec<_Tp, n>& b)$/;"	f	namespace:cv
operator *	core/matx.hpp	/^template<typename _Tp> inline Vec<_Tp, 4> operator * (const Vec<_Tp, 4>& v1, const Vec<_Tp, 4>& v2)$/;"	f	namespace:cv
operator *	core/persistence.hpp	/^    CvFileStorage* operator *() { return fs.get(); }$/;"	f	class:cv::FileStorage
operator *	core/persistence.hpp	/^    const CvFileStorage* operator *() const { return fs.get(); }$/;"	f	class:cv::FileStorage
operator *	core/persistence.hpp	/^inline CvFileNode* FileNode::operator *() { return (CvFileNode*)node; }$/;"	f	class:cv::FileNode
operator *	core/persistence.hpp	/^inline FileNode FileNodeIterator::operator *() const  { return FileNode(fs, (const CvFileNode*)(const void*)reader.ptr); }$/;"	f	class:cv::FileNodeIterator
operator *	core/persistence.hpp	/^inline const CvFileNode* FileNode::operator* () const { return node; }$/;"	f	class:cv::FileNode
operator *	core/ptr.inl.hpp	/^typename detail::RefOrVoid<T>::type Ptr<T>::operator * () const$/;"	f	class:cv::Ptr
operator *	core/types.hpp	/^Complex<_Tp> operator * (_Tp b, const Complex<_Tp>& a)$/;"	f	namespace:cv
operator *	core/types.hpp	/^Complex<_Tp> operator * (const Complex<_Tp>& a, _Tp b)$/;"	f	namespace:cv
operator *	core/types.hpp	/^Complex<_Tp> operator * (const Complex<_Tp>& a, const Complex<_Tp>& b)$/;"	f	namespace:cv
operator *	core/types.hpp	/^Matx<_Tp, 4, 1> operator * (const Matx<_Tp, 4, 4>& a, const Point3_<_Tp>& b)$/;"	f	namespace:cv
operator *	core/types.hpp	/^Point3_<_Tp> operator * (const Matx<_Tp, 3, 3>& a, const Point3_<_Tp>& b)$/;"	f	namespace:cv
operator *	core/types.hpp	/^Point3_<_Tp> operator * (const Matx<_Tp, 3, 3>& a, const Point_<_Tp>& b)$/;"	f	namespace:cv
operator *	core/types.hpp	/^Point3_<_Tp> operator * (const Point3_<_Tp>& a, double b)$/;"	f	namespace:cv
operator *	core/types.hpp	/^Point3_<_Tp> operator * (const Point3_<_Tp>& a, float b)$/;"	f	namespace:cv
operator *	core/types.hpp	/^Point3_<_Tp> operator * (const Point3_<_Tp>& a, int b)$/;"	f	namespace:cv
operator *	core/types.hpp	/^Point3_<_Tp> operator * (double a, const Point3_<_Tp>& b)$/;"	f	namespace:cv
operator *	core/types.hpp	/^Point3_<_Tp> operator * (float a, const Point3_<_Tp>& b)$/;"	f	namespace:cv
operator *	core/types.hpp	/^Point3_<_Tp> operator * (int a, const Point3_<_Tp>& b)$/;"	f	namespace:cv
operator *	core/types.hpp	/^Point_<_Tp> operator * (const Matx<_Tp, 2, 2>& a, const Point_<_Tp>& b)$/;"	f	namespace:cv
operator *	core/types.hpp	/^Point_<_Tp> operator * (const Point_<_Tp>& a, double b)$/;"	f	namespace:cv
operator *	core/types.hpp	/^Point_<_Tp> operator * (const Point_<_Tp>& a, float b)$/;"	f	namespace:cv
operator *	core/types.hpp	/^Point_<_Tp> operator * (const Point_<_Tp>& a, int b)$/;"	f	namespace:cv
operator *	core/types.hpp	/^Point_<_Tp> operator * (double a, const Point_<_Tp>& b)$/;"	f	namespace:cv
operator *	core/types.hpp	/^Point_<_Tp> operator * (float a, const Point_<_Tp>& b)$/;"	f	namespace:cv
operator *	core/types.hpp	/^Point_<_Tp> operator * (int a, const Point_<_Tp>& b)$/;"	f	namespace:cv
operator *	core/types.hpp	/^Scalar operator * (const Matx<_Tp, 4, 4>& a, const Scalar& b)$/;"	f	namespace:cv
operator *	core/types.hpp	/^Scalar operator * (const Matx<double, 4, 4>& a, const Scalar& b)$/;"	f	namespace:cv
operator *	core/types.hpp	/^Scalar_<_Tp> operator * (_Tp alpha, const Scalar_<_Tp>& a)$/;"	f	namespace:cv
operator *	core/types.hpp	/^Scalar_<_Tp> operator * (const Scalar_<_Tp>& a, _Tp alpha)$/;"	f	namespace:cv
operator *	core/types.hpp	/^Scalar_<_Tp> operator * (const Scalar_<_Tp>& a, const Scalar_<_Tp>& b)$/;"	f	namespace:cv
operator *	core/types.hpp	/^Size_<_Tp> operator * (const Size_<_Tp>& a, _Tp b)$/;"	f	namespace:cv
operator *	flann/dist.h	/^    T operator*()$/;"	f	struct:cvflann::ZeroIterator
operator *	hal/intrin_sse.hpp	/^inline v_int32x4 operator * (const v_int32x4& a, const v_int32x4& b)$/;"	f	namespace:cv
operator *	hal/intrin_sse.hpp	/^inline v_uint32x4 operator * (const v_uint32x4& a, const v_uint32x4& b)$/;"	f	namespace:cv
operator *	imgproc.hpp	/^uchar* LineIterator::operator *()$/;"	f	class:cv::LineIterator
operator *	ts/ts_gtest.h	/^  T& operator*() const { return *value_; }$/;"	f	class:testing::internal::linked_ptr
operator *	ts/ts_gtest.h	/^  const T& operator*() const { return *impl_->Current(); }$/;"	f	class:testing::internal::ParamIterator
operator *=	core/mat.inl.hpp	/^Mat& operator *= (Mat& a, const MatExpr& b)$/;"	f	namespace:cv
operator *=	core/mat.inl.hpp	/^Mat_<_Tp>& operator *= (Mat_<_Tp>& a, const MatExpr& b)$/;"	f	namespace:cv
operator *=	core/mat.inl.hpp	/^const Mat& operator *= (const Mat& a, const MatExpr& b)$/;"	f	namespace:cv
operator *=	core/mat.inl.hpp	/^const Mat_<_Tp>& operator *= (const Mat_<_Tp>& a, const MatExpr& b)$/;"	f	namespace:cv
operator *=	core/matx.hpp	/^Matx<_Tp, m, n>& operator *= (Matx<_Tp, m, n>& a, double alpha)$/;"	f	namespace:cv
operator *=	core/matx.hpp	/^Matx<_Tp, m, n>& operator *= (Matx<_Tp, m, n>& a, float alpha)$/;"	f	namespace:cv
operator *=	core/matx.hpp	/^Matx<_Tp, m, n>& operator *= (Matx<_Tp, m, n>& a, int alpha)$/;"	f	namespace:cv
operator *=	core/matx.hpp	/^Vec<_Tp, cn>& operator *= (Vec<_Tp, cn>& a, double alpha)$/;"	f	namespace:cv
operator *=	core/matx.hpp	/^Vec<_Tp, cn>& operator *= (Vec<_Tp, cn>& a, float alpha)$/;"	f	namespace:cv
operator *=	core/matx.hpp	/^Vec<_Tp, cn>& operator *= (Vec<_Tp, cn>& a, int alpha)$/;"	f	namespace:cv
operator *=	core/matx.hpp	/^template<typename _Tp> inline Vec<_Tp, 4>& operator *= (Vec<_Tp, 4>& v1, const Vec<_Tp, 4>& v2)$/;"	f	namespace:cv
operator *=	core/types.hpp	/^Complex<_Tp>& operator *= (Complex<_Tp>& a, _Tp b)$/;"	f	namespace:cv
operator *=	core/types.hpp	/^Point3_<_Tp>& operator *= (Point3_<_Tp>& a, double b)$/;"	f	namespace:cv
operator *=	core/types.hpp	/^Point3_<_Tp>& operator *= (Point3_<_Tp>& a, float b)$/;"	f	namespace:cv
operator *=	core/types.hpp	/^Point3_<_Tp>& operator *= (Point3_<_Tp>& a, int b)$/;"	f	namespace:cv
operator *=	core/types.hpp	/^Point_<_Tp>& operator *= (Point_<_Tp>& a, double b)$/;"	f	namespace:cv
operator *=	core/types.hpp	/^Point_<_Tp>& operator *= (Point_<_Tp>& a, float b)$/;"	f	namespace:cv
operator *=	core/types.hpp	/^Point_<_Tp>& operator *= (Point_<_Tp>& a, int b)$/;"	f	namespace:cv
operator *=	core/types.hpp	/^Scalar_<_Tp>& operator *= ( Scalar_<_Tp>& a, _Tp v )$/;"	f	namespace:cv
operator *=	core/types.hpp	/^Scalar_<_Tp>& operator *= (Scalar_<_Tp>& a, const Scalar_<_Tp>& b)$/;"	f	namespace:cv
operator *=	core/types.hpp	/^Size_<_Tp>& operator *= (Size_<_Tp>& a, _Tp b)$/;"	f	namespace:cv
operator *=	hal/intrin_sse.hpp	/^inline v_int32x4& operator *= (v_int32x4& a, const v_int32x4& b)$/;"	f	namespace:cv
operator *=	hal/intrin_sse.hpp	/^inline v_uint32x4& operator *= (v_uint32x4& a, const v_uint32x4& b)$/;"	f	namespace:cv
operator +	core/cvstd.hpp	/^String operator + (char lhs, const String& rhs)$/;"	f	namespace:cv
operator +	core/cvstd.hpp	/^String operator + (const String& lhs, char rhs)$/;"	f	namespace:cv
operator +	core/cvstd.hpp	/^String operator + (const String& lhs, const String& rhs)$/;"	f	namespace:cv
operator +	core/cvstd.hpp	/^String operator + (const String& lhs, const char* rhs)$/;"	f	namespace:cv
operator +	core/cvstd.hpp	/^String operator + (const char* lhs, const String& rhs)$/;"	f	namespace:cv
operator +	core/cvstd.inl.hpp	/^String operator + (const String& lhs, const std::string& rhs)$/;"	f	namespace:cv
operator +	core/cvstd.inl.hpp	/^String operator + (const std::string& lhs, const String& rhs)$/;"	f	namespace:cv
operator +	core/mat.inl.hpp	/^MatConstIterator operator + (const MatConstIterator& a, ptrdiff_t ofs)$/;"	f	namespace:cv
operator +	core/mat.inl.hpp	/^MatConstIterator operator + (ptrdiff_t ofs, const MatConstIterator& a)$/;"	f	namespace:cv
operator +	core/mat.inl.hpp	/^MatConstIterator_<_Tp> operator + (const MatConstIterator_<_Tp>& a, ptrdiff_t ofs)$/;"	f	namespace:cv
operator +	core/mat.inl.hpp	/^MatConstIterator_<_Tp> operator + (ptrdiff_t ofs, const MatConstIterator_<_Tp>& a)$/;"	f	namespace:cv
operator +	core/mat.inl.hpp	/^MatIterator_<_Tp> operator + (const MatIterator_<_Tp>& a, ptrdiff_t ofs)$/;"	f	namespace:cv
operator +	core/mat.inl.hpp	/^MatIterator_<_Tp> operator + (ptrdiff_t ofs, const MatIterator_<_Tp>& a)$/;"	f	namespace:cv
operator +	core/matx.hpp	/^Matx<_Tp, m, n> operator + (const Matx<_Tp, m, n>& a, const Matx<_Tp, m, n>& b)$/;"	f	namespace:cv
operator +	core/matx.hpp	/^Vec<_Tp, cn> operator + (const Vec<_Tp, cn>& a, const Vec<_Tp, cn>& b)$/;"	f	namespace:cv
operator +	core/types.hpp	/^Complex<_Tp> operator + (_Tp b, const Complex<_Tp>& a)$/;"	f	namespace:cv
operator +	core/types.hpp	/^Complex<_Tp> operator + (const Complex<_Tp>& a, _Tp b)$/;"	f	namespace:cv
operator +	core/types.hpp	/^Complex<_Tp> operator + (const Complex<_Tp>& a, const Complex<_Tp>& b)$/;"	f	namespace:cv
operator +	core/types.hpp	/^Point3_<_Tp> operator + (const Point3_<_Tp>& a, const Point3_<_Tp>& b)$/;"	f	namespace:cv
operator +	core/types.hpp	/^Point_<_Tp> operator + (const Point_<_Tp>& a, const Point_<_Tp>& b)$/;"	f	namespace:cv
operator +	core/types.hpp	/^Range operator + (const Range& r1, int delta)$/;"	f	namespace:cv
operator +	core/types.hpp	/^Range operator + (int delta, const Range& r1)$/;"	f	namespace:cv
operator +	core/types.hpp	/^Rect_<_Tp> operator + (const Rect_<_Tp>& a, const Point_<_Tp>& b)$/;"	f	namespace:cv
operator +	core/types.hpp	/^Rect_<_Tp> operator + (const Rect_<_Tp>& a, const Size_<_Tp>& b)$/;"	f	namespace:cv
operator +	core/types.hpp	/^Scalar_<_Tp> operator + (const Scalar_<_Tp>& a, const Scalar_<_Tp>& b)$/;"	f	namespace:cv
operator +	core/types.hpp	/^Size_<_Tp> operator + (const Size_<_Tp>& a, const Size_<_Tp>& b)$/;"	f	namespace:cv
operator ++	core/core_c.h	/^template<typename _Tp> inline SeqIterator<_Tp> SeqIterator<_Tp>::operator ++(int) const$/;"	f	class:cv::SeqIterator
operator ++	core/core_c.h	/^template<typename _Tp> inline SeqIterator<_Tp>& SeqIterator<_Tp>::operator ++()$/;"	f	class:cv::SeqIterator
operator ++	core/mat.inl.hpp	/^MatConstIterator& MatConstIterator::operator ++()$/;"	f	class:cv::MatConstIterator
operator ++	core/mat.inl.hpp	/^MatConstIterator_<_Tp> MatConstIterator_<_Tp>::operator ++(int)$/;"	f	class:cv::MatConstIterator_
operator ++	core/mat.inl.hpp	/^MatConstIterator_<_Tp>& MatConstIterator_<_Tp>::operator ++()$/;"	f	class:cv::MatConstIterator_
operator ++	core/mat.inl.hpp	/^MatIterator_<_Tp> MatIterator_<_Tp>::operator ++(int)$/;"	f	class:cv::MatIterator_
operator ++	core/mat.inl.hpp	/^MatIterator_<_Tp>& MatIterator_<_Tp>::operator ++()$/;"	f	class:cv::MatIterator_
operator ++	core/mat.inl.hpp	/^SparseMatConstIterator SparseMatConstIterator::operator ++(int)$/;"	f	class:cv::SparseMatConstIterator
operator ++	core/mat.inl.hpp	/^SparseMatConstIterator_<_Tp> SparseMatConstIterator_<_Tp>::operator ++(int)$/;"	f	class:cv::SparseMatConstIterator_
operator ++	core/mat.inl.hpp	/^SparseMatConstIterator_<_Tp>& SparseMatConstIterator_<_Tp>::operator ++()$/;"	f	class:cv::SparseMatConstIterator_
operator ++	core/mat.inl.hpp	/^SparseMatIterator SparseMatIterator::operator ++(int)$/;"	f	class:cv::SparseMatIterator
operator ++	core/mat.inl.hpp	/^SparseMatIterator& SparseMatIterator::operator ++()$/;"	f	class:cv::SparseMatIterator
operator ++	core/mat.inl.hpp	/^SparseMatIterator_<_Tp> SparseMatIterator_<_Tp>::operator ++(int)$/;"	f	class:cv::SparseMatIterator_
operator ++	core/mat.inl.hpp	/^SparseMatIterator_<_Tp>& SparseMatIterator_<_Tp>::operator ++()$/;"	f	class:cv::SparseMatIterator_
operator ++	core/mat.inl.hpp	/^inline MatConstIterator MatConstIterator::operator ++(int)$/;"	f	class:cv::MatConstIterator
operator ++	flann/dist.h	/^    ZeroIterator<T> operator ++(int)$/;"	f	struct:cvflann::ZeroIterator
operator ++	flann/dist.h	/^    const ZeroIterator<T>& operator ++()$/;"	f	struct:cvflann::ZeroIterator
operator ++	imgproc.hpp	/^LineIterator LineIterator::operator ++(int)$/;"	f	class:cv::LineIterator
operator ++	imgproc.hpp	/^LineIterator& LineIterator::operator ++()$/;"	f	class:cv::LineIterator
operator ++	ts/ts_gtest.h	/^  ParamIterator operator++(int \/*unused*\/) {$/;"	f	class:testing::internal::ParamIterator
operator ++	ts/ts_gtest.h	/^  ParamIterator& operator++() {$/;"	f	class:testing::internal::ParamIterator
operator +=	core/core_c.h	/^template<typename _Tp> inline SeqIterator<_Tp>& SeqIterator<_Tp>::operator +=(int delta)$/;"	f	class:cv::SeqIterator
operator +=	core/cvstd.hpp	/^String& String::operator+=(char c)$/;"	f	class:cv::String
operator +=	core/cvstd.hpp	/^String& String::operator+=(const String& str)$/;"	f	class:cv::String
operator +=	core/cvstd.hpp	/^String& String::operator+=(const char* s)$/;"	f	class:cv::String
operator +=	core/cvstd.inl.hpp	/^String& String::operator += (const std::string& str)$/;"	f	class:cv::String
operator +=	core/mat.inl.hpp	/^Mat& operator += (Mat& a, const MatExpr& b)$/;"	f	namespace:cv
operator +=	core/mat.inl.hpp	/^MatConstIterator_<_Tp>& MatConstIterator_<_Tp>::operator += (ptrdiff_t ofs)$/;"	f	class:cv::MatConstIterator_
operator +=	core/mat.inl.hpp	/^MatIterator_<_Tp>& MatIterator_<_Tp>::operator += (ptrdiff_t ofs)$/;"	f	class:cv::MatIterator_
operator +=	core/mat.inl.hpp	/^Mat_<_Tp>& operator += (Mat_<_Tp>& a, const MatExpr& b)$/;"	f	namespace:cv
operator +=	core/mat.inl.hpp	/^const Mat& operator += (const Mat& a, const MatExpr& b)$/;"	f	namespace:cv
operator +=	core/mat.inl.hpp	/^const Mat_<_Tp>& operator += (const Mat_<_Tp>& a, const MatExpr& b)$/;"	f	namespace:cv
operator +=	core/mat.inl.hpp	/^inline MatConstIterator& MatConstIterator::operator += (ptrdiff_t ofs)$/;"	f	class:cv::MatConstIterator
operator +=	core/matx.hpp	/^Matx<_Tp1, m, n>& operator += (Matx<_Tp1, m, n>& a, const Matx<_Tp2, m, n>& b)$/;"	f	namespace:cv
operator +=	core/matx.hpp	/^Vec<_Tp1, cn>& operator += (Vec<_Tp1, cn>& a, const Vec<_Tp2, cn>& b)$/;"	f	namespace:cv
operator +=	core/types.hpp	/^Complex<_Tp>& operator += (Complex<_Tp>& a, _Tp b)$/;"	f	namespace:cv
operator +=	core/types.hpp	/^Complex<_Tp>& operator += (Complex<_Tp>& a, const Complex<_Tp>& b)$/;"	f	namespace:cv
operator +=	core/types.hpp	/^Point3_<_Tp>& operator += (Point3_<_Tp>& a, const Point3_<_Tp>& b)$/;"	f	namespace:cv
operator +=	core/types.hpp	/^Point_<_Tp>& operator += (Point_<_Tp>& a, const Point_<_Tp>& b)$/;"	f	namespace:cv
operator +=	core/types.hpp	/^Rect_<_Tp>& operator += ( Rect_<_Tp>& a, const Point_<_Tp>& b )$/;"	f	namespace:cv
operator +=	core/types.hpp	/^Rect_<_Tp>& operator += ( Rect_<_Tp>& a, const Size_<_Tp>& b )$/;"	f	namespace:cv
operator +=	core/types.hpp	/^Scalar_<_Tp>& operator += (Scalar_<_Tp>& a, const Scalar_<_Tp>& b)$/;"	f	namespace:cv
operator +=	core/types.hpp	/^Size_<_Tp>& operator += (Size_<_Tp>& a, const Size_<_Tp>& b)$/;"	f	namespace:cv
operator +=	flann/dist.h	/^    ZeroIterator<T>& operator+=(int)$/;"	f	struct:cvflann::ZeroIterator
operator ,	core/mat.inl.hpp	/^MatCommaInitializer_<_Tp>& MatCommaInitializer_<_Tp>::operator , (T2 v)$/;"	f	class:cv::MatCommaInitializer_
operator ,	core/matx.hpp	/^MatxCommaInitializer<_Tp, m, n>& MatxCommaInitializer<_Tp, m, n>::operator , (_T2 value)$/;"	f	class:cv::MatxCommaInitializer
operator ,	core/matx.hpp	/^VecCommaInitializer<_Tp, cn>& VecCommaInitializer<_Tp, cn>::operator , (_T2 value)$/;"	f	class:cv::VecCommaInitializer
operator -	core/core_c.h	/^template<typename _Tp> inline ptrdiff_t operator - (const SeqIterator<_Tp>& a,$/;"	f	namespace:cv
operator -	core/mat.inl.hpp	/^MatConstIterator operator - (const MatConstIterator& a, ptrdiff_t ofs)$/;"	f	namespace:cv
operator -	core/mat.inl.hpp	/^MatConstIterator_<_Tp> operator - (const MatConstIterator_<_Tp>& a, ptrdiff_t ofs)$/;"	f	namespace:cv
operator -	core/mat.inl.hpp	/^MatIterator_<_Tp> operator - (const MatIterator_<_Tp>& a, ptrdiff_t ofs)$/;"	f	namespace:cv
operator -	core/mat.inl.hpp	/^ptrdiff_t operator - (const MatConstIterator& b, const MatConstIterator& a)$/;"	f	namespace:cv
operator -	core/matx.hpp	/^Matx<_Tp, m, n> operator - (const Matx<_Tp, m, n>& a)$/;"	f	namespace:cv
operator -	core/matx.hpp	/^Matx<_Tp, m, n> operator - (const Matx<_Tp, m, n>& a, const Matx<_Tp, m, n>& b)$/;"	f	namespace:cv
operator -	core/matx.hpp	/^Vec<_Tp, cn> operator - (const Vec<_Tp, cn>& a)$/;"	f	namespace:cv
operator -	core/matx.hpp	/^Vec<_Tp, cn> operator - (const Vec<_Tp, cn>& a, const Vec<_Tp, cn>& b)$/;"	f	namespace:cv
operator -	core/persistence.hpp	/^ptrdiff_t operator - (const FileNodeIterator& it1, const FileNodeIterator& it2)$/;"	f	namespace:cv
operator -	core/types.hpp	/^Complex<_Tp> operator - (_Tp b, const Complex<_Tp>& a)$/;"	f	namespace:cv
operator -	core/types.hpp	/^Complex<_Tp> operator - (const Complex<_Tp>& a)$/;"	f	namespace:cv
operator -	core/types.hpp	/^Complex<_Tp> operator - (const Complex<_Tp>& a, _Tp b)$/;"	f	namespace:cv
operator -	core/types.hpp	/^Complex<_Tp> operator - (const Complex<_Tp>& a, const Complex<_Tp>& b)$/;"	f	namespace:cv
operator -	core/types.hpp	/^Point3_<_Tp> operator - (const Point3_<_Tp>& a)$/;"	f	namespace:cv
operator -	core/types.hpp	/^Point3_<_Tp> operator - (const Point3_<_Tp>& a, const Point3_<_Tp>& b)$/;"	f	namespace:cv
operator -	core/types.hpp	/^Point_<_Tp> operator - (const Point_<_Tp>& a)$/;"	f	namespace:cv
operator -	core/types.hpp	/^Point_<_Tp> operator - (const Point_<_Tp>& a, const Point_<_Tp>& b)$/;"	f	namespace:cv
operator -	core/types.hpp	/^Range operator - (const Range& r1, int delta)$/;"	f	namespace:cv
operator -	core/types.hpp	/^Rect_<_Tp> operator - (const Rect_<_Tp>& a, const Point_<_Tp>& b)$/;"	f	namespace:cv
operator -	core/types.hpp	/^Scalar_<_Tp> operator - (const Scalar_<_Tp>& a)$/;"	f	namespace:cv
operator -	core/types.hpp	/^Scalar_<_Tp> operator - (const Scalar_<_Tp>& a, const Scalar_<_Tp>& b)$/;"	f	namespace:cv
operator -	core/types.hpp	/^Size_<_Tp> operator - (const Size_<_Tp>& a, const Size_<_Tp>& b)$/;"	f	namespace:cv
operator --	core/core_c.h	/^template<typename _Tp> inline SeqIterator<_Tp> SeqIterator<_Tp>::operator --(int) const$/;"	f	class:cv::SeqIterator
operator --	core/core_c.h	/^template<typename _Tp> inline SeqIterator<_Tp>& SeqIterator<_Tp>::operator --()$/;"	f	class:cv::SeqIterator
operator --	core/mat.inl.hpp	/^MatConstIterator MatConstIterator::operator --(int)$/;"	f	class:cv::MatConstIterator
operator --	core/mat.inl.hpp	/^MatConstIterator& MatConstIterator::operator --()$/;"	f	class:cv::MatConstIterator
operator --	core/mat.inl.hpp	/^MatConstIterator_<_Tp> MatConstIterator_<_Tp>::operator --(int)$/;"	f	class:cv::MatConstIterator_
operator --	core/mat.inl.hpp	/^MatConstIterator_<_Tp>& MatConstIterator_<_Tp>::operator --()$/;"	f	class:cv::MatConstIterator_
operator --	core/mat.inl.hpp	/^MatIterator_<_Tp> MatIterator_<_Tp>::operator --(int)$/;"	f	class:cv::MatIterator_
operator --	core/mat.inl.hpp	/^MatIterator_<_Tp>& MatIterator_<_Tp>::operator --()$/;"	f	class:cv::MatIterator_
operator -=	core/core_c.h	/^template<typename _Tp> inline SeqIterator<_Tp>& SeqIterator<_Tp>::operator -=(int delta)$/;"	f	class:cv::SeqIterator
operator -=	core/mat.inl.hpp	/^Mat& operator -= (Mat& a, const MatExpr& b)$/;"	f	namespace:cv
operator -=	core/mat.inl.hpp	/^MatConstIterator& MatConstIterator::operator -= (ptrdiff_t ofs)$/;"	f	class:cv::MatConstIterator
operator -=	core/mat.inl.hpp	/^MatConstIterator_<_Tp>& MatConstIterator_<_Tp>::operator -= (ptrdiff_t ofs)$/;"	f	class:cv::MatConstIterator_
operator -=	core/mat.inl.hpp	/^MatIterator_<_Tp>& MatIterator_<_Tp>::operator -= (ptrdiff_t ofs)$/;"	f	class:cv::MatIterator_
operator -=	core/mat.inl.hpp	/^Mat_<_Tp>& operator -= (Mat_<_Tp>& a, const MatExpr& b)$/;"	f	namespace:cv
operator -=	core/mat.inl.hpp	/^const Mat& operator -= (const Mat& a, const MatExpr& b)$/;"	f	namespace:cv
operator -=	core/mat.inl.hpp	/^const Mat_<_Tp>& operator -= (const Mat_<_Tp>& a, const MatExpr& b)$/;"	f	namespace:cv
operator -=	core/matx.hpp	/^Matx<_Tp1, m, n>& operator -= (Matx<_Tp1, m, n>& a, const Matx<_Tp2, m, n>& b)$/;"	f	namespace:cv
operator -=	core/matx.hpp	/^Vec<_Tp1, cn>& operator -= (Vec<_Tp1, cn>& a, const Vec<_Tp2, cn>& b)$/;"	f	namespace:cv
operator -=	core/types.hpp	/^Complex<_Tp>& operator -= (Complex<_Tp>& a, _Tp b)$/;"	f	namespace:cv
operator -=	core/types.hpp	/^Complex<_Tp>& operator -= (Complex<_Tp>& a, const Complex<_Tp>& b)$/;"	f	namespace:cv
operator -=	core/types.hpp	/^Point3_<_Tp>& operator -= (Point3_<_Tp>& a, const Point3_<_Tp>& b)$/;"	f	namespace:cv
operator -=	core/types.hpp	/^Point_<_Tp>& operator -= (Point_<_Tp>& a, const Point_<_Tp>& b)$/;"	f	namespace:cv
operator -=	core/types.hpp	/^Rect_<_Tp>& operator -= ( Rect_<_Tp>& a, const Point_<_Tp>& b )$/;"	f	namespace:cv
operator -=	core/types.hpp	/^Rect_<_Tp>& operator -= ( Rect_<_Tp>& a, const Size_<_Tp>& b )$/;"	f	namespace:cv
operator -=	core/types.hpp	/^Scalar_<_Tp>& operator -= (Scalar_<_Tp>& a, const Scalar_<_Tp>& b)$/;"	f	namespace:cv
operator -=	core/types.hpp	/^Size_<_Tp>& operator -= (Size_<_Tp>& a, const Size_<_Tp>& b)$/;"	f	namespace:cv
operator ->	core/persistence.hpp	/^inline FileNode FileNodeIterator::operator ->() const { return FileNode(fs, (const CvFileNode*)(const void*)reader.ptr); }$/;"	f	class:cv::FileNodeIterator
operator ->	core/ptr.inl.hpp	/^T* Ptr<T>::operator -> () const$/;"	f	class:cv::Ptr
operator ->	ts/ts_gtest.h	/^  T* operator->() const { return value_; }$/;"	f	class:testing::internal::linked_ptr
operator ->	ts/ts_gtest.h	/^  const T* operator->() const { return impl_->Current(); }$/;"	f	class:testing::internal::ParamIterator
operator /	core/matx.hpp	/^Vec<_Tp, cn> operator \/ (const Vec<_Tp, cn>& a, double alpha)$/;"	f	namespace:cv
operator /	core/matx.hpp	/^Vec<_Tp, cn> operator \/ (const Vec<_Tp, cn>& a, float alpha)$/;"	f	namespace:cv
operator /	core/matx.hpp	/^Vec<_Tp, cn> operator \/ (const Vec<_Tp, cn>& a, int alpha)$/;"	f	namespace:cv
operator /	core/types.hpp	/^Complex<_Tp> operator \/ (_Tp b, const Complex<_Tp>& a)$/;"	f	namespace:cv
operator /	core/types.hpp	/^Complex<_Tp> operator \/ (const Complex<_Tp>& a, _Tp b)$/;"	f	namespace:cv
operator /	core/types.hpp	/^Complex<_Tp> operator \/ (const Complex<_Tp>& a, const Complex<_Tp>& b)$/;"	f	namespace:cv
operator /	core/types.hpp	/^Point3_<_Tp> operator \/ (const Point3_<_Tp>& a, double b)$/;"	f	namespace:cv
operator /	core/types.hpp	/^Point3_<_Tp> operator \/ (const Point3_<_Tp>& a, float b)$/;"	f	namespace:cv
operator /	core/types.hpp	/^Point3_<_Tp> operator \/ (const Point3_<_Tp>& a, int b)$/;"	f	namespace:cv
operator /	core/types.hpp	/^Point_<_Tp> operator \/ (const Point_<_Tp>& a, double b)$/;"	f	namespace:cv
operator /	core/types.hpp	/^Point_<_Tp> operator \/ (const Point_<_Tp>& a, float b)$/;"	f	namespace:cv
operator /	core/types.hpp	/^Point_<_Tp> operator \/ (const Point_<_Tp>& a, int b)$/;"	f	namespace:cv
operator /	core/types.hpp	/^Scalar_<_Tp> operator \/ (_Tp a, const Scalar_<_Tp>& b)$/;"	f	namespace:cv
operator /	core/types.hpp	/^Scalar_<_Tp> operator \/ (const Scalar_<_Tp>& a, _Tp alpha)$/;"	f	namespace:cv
operator /	core/types.hpp	/^Scalar_<_Tp> operator \/ (const Scalar_<_Tp>& a, const Scalar_<_Tp>& b)$/;"	f	namespace:cv
operator /	core/types.hpp	/^Scalar_<double> operator \/ (const Scalar_<double>& a, double alpha)$/;"	f	namespace:cv
operator /	core/types.hpp	/^Scalar_<float> operator \/ (const Scalar_<float>& a, float alpha)$/;"	f	namespace:cv
operator /	core/types.hpp	/^Size_<_Tp> operator \/ (const Size_<_Tp>& a, _Tp b)$/;"	f	namespace:cv
operator /	hal/intrin_neon.hpp	/^inline v_float32x4 operator \/ (const v_float32x4& a, const v_float32x4& b)$/;"	f	namespace:cv
operator /=	core/mat.inl.hpp	/^Mat& operator \/= (Mat& a, const MatExpr& b)$/;"	f	namespace:cv
operator /=	core/mat.inl.hpp	/^Mat_<_Tp>& operator \/= (Mat_<_Tp>& a, const MatExpr& b)$/;"	f	namespace:cv
operator /=	core/mat.inl.hpp	/^const Mat& operator \/= (const Mat& a, const MatExpr& b)$/;"	f	namespace:cv
operator /=	core/mat.inl.hpp	/^const Mat_<_Tp>& operator \/= (const Mat_<_Tp>& a, const MatExpr& b)$/;"	f	namespace:cv
operator /=	core/matx.hpp	/^Vec<_Tp, cn>& operator \/= (Vec<_Tp, cn>& a, double alpha)$/;"	f	namespace:cv
operator /=	core/matx.hpp	/^Vec<_Tp, cn>& operator \/= (Vec<_Tp, cn>& a, float alpha)$/;"	f	namespace:cv
operator /=	core/matx.hpp	/^Vec<_Tp, cn>& operator \/= (Vec<_Tp, cn>& a, int alpha)$/;"	f	namespace:cv
operator /=	core/types.hpp	/^Complex<_Tp> operator \/= (const Complex<_Tp>& a, _Tp b)$/;"	f	namespace:cv
operator /=	core/types.hpp	/^Complex<_Tp>& operator \/= (Complex<_Tp>& a, const Complex<_Tp>& b)$/;"	f	namespace:cv
operator /=	core/types.hpp	/^Point3_<_Tp>& operator \/= (Point3_<_Tp>& a, double b)$/;"	f	namespace:cv
operator /=	core/types.hpp	/^Point3_<_Tp>& operator \/= (Point3_<_Tp>& a, float b)$/;"	f	namespace:cv
operator /=	core/types.hpp	/^Point3_<_Tp>& operator \/= (Point3_<_Tp>& a, int b)$/;"	f	namespace:cv
operator /=	core/types.hpp	/^Point_<_Tp>& operator \/= (Point_<_Tp>& a, double b)$/;"	f	namespace:cv
operator /=	core/types.hpp	/^Point_<_Tp>& operator \/= (Point_<_Tp>& a, float b)$/;"	f	namespace:cv
operator /=	core/types.hpp	/^Point_<_Tp>& operator \/= (Point_<_Tp>& a, int b)$/;"	f	namespace:cv
operator /=	core/types.hpp	/^Scalar_<_Tp>& operator \/= (Scalar_<_Tp>& a, _Tp alpha)$/;"	f	namespace:cv
operator /=	core/types.hpp	/^Scalar_<_Tp>& operator \/= (Scalar_<_Tp>& a, const Scalar_<_Tp>& b)$/;"	f	namespace:cv
operator /=	core/types.hpp	/^Size_<_Tp>& operator \/= (Size_<_Tp>& a, _Tp b)$/;"	f	namespace:cv
operator /=	hal/intrin_neon.hpp	/^inline v_float32x4& operator \/= (v_float32x4& a, const v_float32x4& b)$/;"	f	namespace:cv
operator <	core/cvstd.hpp	/^static inline bool operator<  (const String& lhs, const String& rhs) { return lhs.compare(rhs) <  0; }$/;"	f	namespace:cv
operator <	core/cvstd.hpp	/^static inline bool operator<  (const String& lhs, const char*   rhs) { return lhs.compare(rhs) <  0; }$/;"	f	namespace:cv
operator <	core/cvstd.hpp	/^static inline bool operator<  (const char*   lhs, const String& rhs) { return rhs.compare(lhs) >  0; }$/;"	f	namespace:cv
operator <	core/mat.inl.hpp	/^bool operator < (const MatConstIterator& a, const MatConstIterator& b)$/;"	f	namespace:cv
operator <	core/persistence.hpp	/^bool operator < (const FileNodeIterator& it1, const FileNodeIterator& it2)$/;"	f	namespace:cv
operator <	core/types.hpp	/^bool DMatch::operator < (const DMatch &m) const$/;"	f	class:cv::DMatch
operator <	flann/result_set.h	/^        bool operator<(const DistIndex dist_index) const$/;"	f	struct:cvflann::UniqueResultSet::DistIndex
operator <	flann/result_set.h	/^    bool operator<(const BranchStruct<T, DistanceType>& rhs) const$/;"	f	struct:cvflann::BranchStruct
operator <	stitching/detail/util.hpp	/^    bool operator <(const GraphEdge& other) const { return weight < other.weight; }$/;"	f	struct:cv::detail::GraphEdge
operator <	videostab/fast_marching.hpp	/^        bool operator <(const DXY &dxy) const { return dist < dxy.dist; }$/;"	f	struct:cv::videostab::FastMarchingMethod::DXY
operator <<	core/cvstd.inl.hpp	/^FileStorage& operator << (FileStorage& fs, const std::string& value)$/;"	f	namespace:cv
operator <<	core/cvstd.inl.hpp	/^std::ostream& operator << (std::ostream& os, const String& str)$/;"	f	namespace:cv
operator <<	core/cvstd.inl.hpp	/^std::ostream& operator << (std::ostream& out, Ptr<Formatted> fmtd)$/;"	f	namespace:cv
operator <<	core/cvstd.inl.hpp	/^std::ostream& operator << (std::ostream& out, const Mat& mtx)$/;"	f	namespace:cv
operator <<	core/cvstd.inl.hpp	/^std::ostream& operator << (std::ostream& out, const Matx<_Tp, m, n>& matx)$/;"	f	namespace:cv
operator <<	core/cvstd.inl.hpp	/^std::ostream& operator << (std::ostream& out, const Point3_<_Tp>& p)$/;"	f	namespace:cv
operator <<	core/cvstd.inl.hpp	/^std::ostream& operator << (std::ostream& out, const Point_<_Tp>& p)$/;"	f	namespace:cv
operator <<	core/cvstd.inl.hpp	/^std::ostream& operator << (std::ostream& out, const Rect_<_Tp>& rect)$/;"	f	namespace:cv
operator <<	core/cvstd.inl.hpp	/^std::ostream& operator << (std::ostream& out, const Size_<_Tp>& size)$/;"	f	namespace:cv
operator <<	core/cvstd.inl.hpp	/^std::ostream& operator << (std::ostream& out, const Vec<_Tp, n>& vec)$/;"	f	namespace:cv
operator <<	core/cvstd.inl.hpp	/^std::ostream& operator << (std::ostream& out, const std::vector<Point3_<_Tp> >& vec)$/;"	f	namespace:cv
operator <<	core/cvstd.inl.hpp	/^std::ostream& operator << (std::ostream& out, const std::vector<Point_<_Tp> >& vec)$/;"	f	namespace:cv
operator <<	core/mat.inl.hpp	/^MatCommaInitializer_<_Tp> operator << (const Mat_<_Tp>& m, T2 val)$/;"	f	namespace:cv
operator <<	core/matx.hpp	/^MatxCommaInitializer<_Tp, m, n> operator << (const Matx<_Tp, m, n>& mtx, _T2 val)$/;"	f	namespace:cv
operator <<	core/matx.hpp	/^VecCommaInitializer<_Tp, cn> operator << (const Vec<_Tp, cn>& vec, _T2 val)$/;"	f	namespace:cv
operator <<	core/persistence.hpp	/^FileStorage& operator << (FileStorage& fs, char* value)$/;"	f	namespace:cv
operator <<	core/persistence.hpp	/^FileStorage& operator << (FileStorage& fs, const _Tp& value)$/;"	f	namespace:cv
operator <<	core/persistence.hpp	/^FileStorage& operator << (FileStorage& fs, const char* str)$/;"	f	namespace:cv
operator <<	flann/any.h	/^inline std::ostream& operator <<(std::ostream& out, const any& any_val)$/;"	f	namespace:cvflann
operator <<	flann/any.h	/^inline std::ostream& operator <<(std::ostream& out, const empty_any&)$/;"	f	namespace:cvflann::anyimpl
operator <<	flann/lsh_table.h	/^inline std::ostream& operator <<(std::ostream& out, const LshStats& stats)$/;"	f	namespace:cvflann::lsh
operator <<	ts/ts_gtest.h	/^  Message& operator <<(BasicNarrowIoManip val) {$/;"	f	class:testing::Message
operator <<	ts/ts_gtest.h	/^  Message& operator <<(bool b) {$/;"	f	class:testing::Message
operator <<	ts/ts_gtest.h	/^  inline Message& operator <<(T* const& pointer) {  \/\/ NOLINT$/;"	f	class:testing::Message
operator <<	ts/ts_gtest.h	/^  inline Message& operator <<(const T& val) {$/;"	f	class:testing::Message
operator <<	ts/ts_gtest.h	/^  inline Message& operator <<(const T& value) {$/;"	f	class:testing::Message
operator <<	ts/ts_gtest.h	/^  template <typename T> AssertionResult& operator<<(const T& value) {$/;"	f	class:testing::AssertionResult
operator <<	ts/ts_gtest.h	/^::std::basic_ostream<Char, CharTraits>& operator<<($/;"	f	namespace:testing::internal2
operator <<	ts/ts_gtest.h	/^inline std::ostream& operator <<(std::ostream& os, const Message& sb) {$/;"	f	namespace:testing
operator <=	core/cvstd.hpp	/^static inline bool operator<= (const String& lhs, const String& rhs) { return lhs.compare(rhs) <= 0; }$/;"	f	namespace:cv
operator <=	core/cvstd.hpp	/^static inline bool operator<= (const String& lhs, const char*   rhs) { return lhs.compare(rhs) <= 0; }$/;"	f	namespace:cv
operator <=	core/cvstd.hpp	/^static inline bool operator<= (const char*   lhs, const String& rhs) { return rhs.compare(lhs) >= 0; }$/;"	f	namespace:cv
operator <=	core/mat.inl.hpp	/^bool operator <= (const MatConstIterator& a, const MatConstIterator& b)$/;"	f	namespace:cv
operator =	core/cuda.inl.hpp	/^GpuMat& GpuMat::operator =(const GpuMat& m)$/;"	f	class:cv::cuda::GpuMat
operator =	core/cuda.inl.hpp	/^HostMem& HostMem::operator =(const HostMem& m)$/;"	f	class:cv::cuda::HostMem
operator =	core/cvstd.hpp	/^String& String::operator=(char c)$/;"	f	class:cv::String
operator =	core/cvstd.hpp	/^String& String::operator=(const String& str)$/;"	f	class:cv::String
operator =	core/cvstd.hpp	/^String& String::operator=(const char* s)$/;"	f	class:cv::String
operator =	core/cvstd.inl.hpp	/^String& String::operator = (const std::string& str)$/;"	f	class:cv::String
operator =	core/mat.inl.hpp	/^Mat& Mat::operator = (const Mat& m)$/;"	f	class:cv::Mat
operator =	core/mat.inl.hpp	/^Mat& Mat::operator = (const MatExpr& e)$/;"	f	class:cv::Mat
operator =	core/mat.inl.hpp	/^MatConstIterator& MatConstIterator::operator = (const MatConstIterator& it )$/;"	f	class:cv::MatConstIterator
operator =	core/mat.inl.hpp	/^MatConstIterator_<_Tp>& MatConstIterator_<_Tp>::operator = (const MatConstIterator_& it )$/;"	f	class:cv::MatConstIterator_
operator =	core/mat.inl.hpp	/^MatIterator_<_Tp>& MatIterator_<_Tp>::operator = (const MatIterator_<_Tp>& it )$/;"	f	class:cv::MatIterator_
operator =	core/mat.inl.hpp	/^Mat_<_Tp>& Mat_<_Tp>::operator = (const Mat& m)$/;"	f	class:cv::Mat_
operator =	core/mat.inl.hpp	/^Mat_<_Tp>& Mat_<_Tp>::operator = (const MatExpr& e)$/;"	f	class:cv::Mat_
operator =	core/mat.inl.hpp	/^Mat_<_Tp>& Mat_<_Tp>::operator = (const Mat_& m)$/;"	f	class:cv::Mat_
operator =	core/mat.inl.hpp	/^Mat_<_Tp>& Mat_<_Tp>::operator = (const _Tp& s)$/;"	f	class:cv::Mat_
operator =	core/mat.inl.hpp	/^SparseMat& SparseMat::operator = (const Mat& m)$/;"	f	class:cv::SparseMat
operator =	core/mat.inl.hpp	/^SparseMat& SparseMat::operator = (const SparseMat& m)$/;"	f	class:cv::SparseMat
operator =	core/mat.inl.hpp	/^SparseMatConstIterator_<_Tp>& SparseMatConstIterator_<_Tp>::operator = (const SparseMatConstIterator_<_Tp>& it)$/;"	f	class:cv::SparseMatConstIterator_
operator =	core/mat.inl.hpp	/^SparseMatIterator& SparseMatIterator::operator = (const SparseMatIterator& it)$/;"	f	class:cv::SparseMatIterator
operator =	core/mat.inl.hpp	/^SparseMatIterator_<_Tp>& SparseMatIterator_<_Tp>::operator = (const SparseMatIterator_<_Tp>& it)$/;"	f	class:cv::SparseMatIterator_
operator =	core/mat.inl.hpp	/^SparseMat_<_Tp>& SparseMat_<_Tp>::operator = (const Mat& m)$/;"	f	class:cv::SparseMat_
operator =	core/mat.inl.hpp	/^SparseMat_<_Tp>& SparseMat_<_Tp>::operator = (const SparseMat& m)$/;"	f	class:cv::SparseMat_
operator =	core/mat.inl.hpp	/^SparseMat_<_Tp>& SparseMat_<_Tp>::operator = (const SparseMat_<_Tp>& m)$/;"	f	class:cv::SparseMat_
operator =	core/mat.inl.hpp	/^UMat& UMat::operator = (const UMat& m)$/;"	f	class:cv::UMat
operator =	core/mat.inl.hpp	/^inline MatStep& MatStep::operator = (size_t s)$/;"	f	class:cv::MatStep
operator =	core/mat.inl.hpp	/^inline SparseMatConstIterator& SparseMatConstIterator::operator = (const SparseMatConstIterator& it)$/;"	f	class:cv::SparseMatConstIterator
operator =	core/ptr.inl.hpp	/^Ptr<T>& Ptr<T>::operator = (const Ptr<T>& o)$/;"	f	class:cv::Ptr
operator =	core/ptr.inl.hpp	/^Ptr<T>& Ptr<T>::operator = (const Ptr<Y>& o)$/;"	f	class:cv::Ptr
operator =	core/types.hpp	/^Point3_<_Tp>& Point3_<_Tp>::operator = (const Point3_& pt)$/;"	f	class:cv::Point3_
operator =	core/types.hpp	/^Point_<_Tp>& Point_<_Tp>::operator = (const Point_& pt)$/;"	f	class:cv::Point_
operator =	core/types.hpp	/^Rect_<_Tp>& Rect_<_Tp>::operator = ( const Rect_<_Tp>& r )$/;"	f	class:cv::Rect_
operator =	core/types.hpp	/^Size_<_Tp>& Size_<_Tp>::operator = (const Size_<_Tp>& sz)$/;"	f	class:cv::Size_
operator =	core/utility.hpp	/^AutoBuffer<_Tp, fixed_size>::operator = (const AutoBuffer<_Tp, fixed_size>& abuf)$/;"	f	class:cv::AutoBuffer
operator =	core/wimage.hpp	/^    WImageView& operator=(const WImage<T>& img) {$/;"	f	class:cv::WImageView
operator =	core/wimage.hpp	/^    WImageViewC& operator=(const WImageC<T, C>& img) {$/;"	f	class:cv::WImageViewC
operator =	core/wimage.hpp	/^    WImageViewC& operator=(const WImageViewC<T, C>& img) {$/;"	f	class:cv::WImageViewC
operator =	cudev/ptr2d/detail/gpumat.hpp	/^__host__ GpuMat_<T>& GpuMat_<T>::operator =(const Expr<Body>& expr)$/;"	f	class:cv::cudev::GpuMat_
operator =	cudev/ptr2d/detail/gpumat.hpp	/^__host__ GpuMat_<T>& GpuMat_<T>::operator =(const GpuMat_& m)$/;"	f	class:cv::cudev::GpuMat_
operator =	flann/any.h	/^    any& operator=(const T& x)$/;"	f	struct:cvflann::any
operator =	flann/any.h	/^    any& operator=(const char* x)$/;"	f	struct:cvflann::any
operator =	flann/kmeans_index.h	/^        KMeansDistanceComputer& operator=( const KMeansDistanceComputer & ) { return *this; }$/;"	f	class:cvflann::KMeansIndex::KMeansDistanceComputer
operator =	ts/ts_gtest.h	/^  FilePath& operator=(const FilePath& rhs) {$/;"	f	class:testing::internal::FilePath
operator =	ts/ts_gtest.h	/^  ParamGenerator& operator=(const ParamGenerator& other) {$/;"	f	class:testing::internal::ParamGenerator
operator =	ts/ts_gtest.h	/^  ParamIterator& operator=(const ParamIterator& other) {$/;"	f	class:testing::internal::ParamIterator
operator =	ts/ts_gtest.h	/^  linked_ptr& operator=(linked_ptr const& ptr) {$/;"	f	class:testing::internal::linked_ptr
operator =	ts/ts_gtest.h	/^  template <typename U> linked_ptr& operator=(linked_ptr<U> const& ptr) {$/;"	f	class:testing::internal::linked_ptr
operator =	ts/ts_gtest.h	/^  tuple& operator=(const tuple& \/* t *\/) { return *this; }$/;"	f	class:std::tr1::tuple
operator =	ts/ts_gtest.h	/^  tuple& operator=(const tuple& t) { return CopyFrom(t); }$/;"	f	class:std::tr1::tuple
operator ==	core/core_c.h	/^template<typename _Tp> inline bool operator == (const SeqIterator<_Tp>& a,$/;"	f	namespace:cv
operator ==	core/cvstd.hpp	/^static inline bool operator== (const String& lhs, const String& rhs) { return 0 == lhs.compare(rhs); }$/;"	f	namespace:cv
operator ==	core/cvstd.hpp	/^static inline bool operator== (const String& lhs, const char*   rhs) { return 0 == lhs.compare(rhs); }$/;"	f	namespace:cv
operator ==	core/cvstd.hpp	/^static inline bool operator== (const char*   lhs, const String& rhs) { return 0 == rhs.compare(lhs); }$/;"	f	namespace:cv
operator ==	core/mat.inl.hpp	/^bool MatSize::operator == (const MatSize& sz) const$/;"	f	class:cv::MatSize
operator ==	core/mat.inl.hpp	/^bool operator == (const MatConstIterator& a, const MatConstIterator& b)$/;"	f	namespace:cv
operator ==	core/mat.inl.hpp	/^bool operator == (const MatConstIterator_<_Tp>& a, const MatConstIterator_<_Tp>& b)$/;"	f	namespace:cv
operator ==	core/mat.inl.hpp	/^bool operator == (const MatIterator_<_Tp>& a, const MatIterator_<_Tp>& b)$/;"	f	namespace:cv
operator ==	core/mat.inl.hpp	/^bool operator == (const SparseMatConstIterator& it1, const SparseMatConstIterator& it2)$/;"	f	namespace:cv
operator ==	core/matx.hpp	/^bool operator == (const Matx<_Tp, m, n>& a, const Matx<_Tp, m, n>& b)$/;"	f	namespace:cv
operator ==	core/persistence.hpp	/^bool operator == (const FileNodeIterator& it1, const FileNodeIterator& it2)$/;"	f	namespace:cv
operator ==	core/ptr.inl.hpp	/^bool operator == (const Ptr<T>& ptr1, const Ptr<T>& ptr2)$/;"	f	namespace:cv
operator ==	core/types.hpp	/^bool operator == ( const Scalar_<_Tp>& a, const Scalar_<_Tp>& b )$/;"	f	namespace:cv
operator ==	core/types.hpp	/^bool operator == (const Complex<_Tp>& a, const Complex<_Tp>& b)$/;"	f	namespace:cv
operator ==	core/types.hpp	/^bool operator == (const Point3_<_Tp>& a, const Point3_<_Tp>& b)$/;"	f	namespace:cv
operator ==	core/types.hpp	/^bool operator == (const Point_<_Tp>& a, const Point_<_Tp>& b)$/;"	f	namespace:cv
operator ==	core/types.hpp	/^bool operator == (const Range& r1, const Range& r2)$/;"	f	namespace:cv
operator ==	core/types.hpp	/^bool operator == (const Rect_<_Tp>& a, const Rect_<_Tp>& b)$/;"	f	namespace:cv
operator ==	core/types.hpp	/^bool operator == (const Size_<_Tp>& a, const Size_<_Tp>& b)$/;"	f	namespace:cv
operator ==	cudalegacy/NCV.hpp	/^    __host__ __device__ bool operator == (const NcvSize32u &another) const {return this->width == another.width && this->height == another.height;}$/;"	f	struct:NcvSize32u
operator ==	ts/ts_gtest.h	/^  bool operator==(T* p) const { return value_ == p; }$/;"	f	class:testing::internal::linked_ptr
operator ==	ts/ts_gtest.h	/^  bool operator==(const NativeArray& rhs) const {$/;"	f	class:testing::internal::NativeArray
operator ==	ts/ts_gtest.h	/^  bool operator==(const ParamIterator& other) const {$/;"	f	class:testing::internal::ParamIterator
operator ==	ts/ts_gtest.h	/^  bool operator==(linked_ptr<U> const& ptr) const {$/;"	f	class:testing::internal::linked_ptr
operator ==	ts/ts_gtest.h	/^bool operator==(T* ptr, const linked_ptr<T>& x) {$/;"	f	namespace:testing::internal
operator >	core/cvstd.hpp	/^static inline bool operator>  (const String& lhs, const String& rhs) { return lhs.compare(rhs) >  0; }$/;"	f	namespace:cv
operator >	core/cvstd.hpp	/^static inline bool operator>  (const String& lhs, const char*   rhs) { return lhs.compare(rhs) >  0; }$/;"	f	namespace:cv
operator >	core/cvstd.hpp	/^static inline bool operator>  (const char*   lhs, const String& rhs) { return rhs.compare(lhs) <  0; }$/;"	f	namespace:cv
operator >	core/mat.inl.hpp	/^bool operator > (const MatConstIterator& a, const MatConstIterator& b)$/;"	f	namespace:cv
operator >	stitching/detail/util.hpp	/^    bool operator >(const GraphEdge& other) const { return weight > other.weight; }$/;"	f	struct:cv::detail::GraphEdge
operator >=	core/cvstd.hpp	/^static inline bool operator>= (const String& lhs, const String& rhs) { return lhs.compare(rhs) >= 0; }$/;"	f	namespace:cv
operator >=	core/cvstd.hpp	/^static inline bool operator>= (const String& lhs, const char*   rhs) { return lhs.compare(rhs) >= 0; }$/;"	f	namespace:cv
operator >=	core/cvstd.hpp	/^static inline bool operator>= (const char*   lhs, const String& rhs) { return rhs.compare(lhs) <= 0; }$/;"	f	namespace:cv
operator >=	core/mat.inl.hpp	/^bool operator >= (const MatConstIterator& a, const MatConstIterator& b)$/;"	f	namespace:cv
operator >>	core/cvstd.inl.hpp	/^void operator >> (const FileNode& n, std::string& value)$/;"	f	namespace:cv
operator >>	core/persistence.hpp	/^FileNodeIterator& operator >> (FileNodeIterator& it, _Tp& value)$/;"	f	namespace:cv
operator >>	core/persistence.hpp	/^FileNodeIterator& operator >> (FileNodeIterator& it, std::vector<_Tp>& vec)$/;"	f	namespace:cv
operator >>	core/persistence.hpp	/^void operator >> (const FileNode& n, _Tp& value)$/;"	f	namespace:cv
operator >>	core/persistence.hpp	/^void operator >> (const FileNode& n, std::vector<_Tp>& vec)$/;"	f	namespace:cv
operator Affine3<Y>	core/affine.hpp	/^cv::Affine3<T>::operator Affine3<Y>() const$/;"	f	class:cv::Affine3
operator Complex<T2>	core/types.hpp	/^Complex<_Tp>::operator Complex<T2>() const$/;"	f	class:cv::Complex
operator Eigen::Transform<T, 3, Eigen::Affine,	core/affine.hpp	/^cv::Affine3<T>::operator Eigen::Transform<T, 3, Eigen::Affine, (Eigen::RowMajor)>() const$/;"	f	class:cv::Affine3
operator Eigen::Transform<T, 3, Eigen::Affine>	core/affine.hpp	/^cv::Affine3<T>::operator Eigen::Transform<T, 3, Eigen::Affine>() const$/;"	f	class:cv::Affine3
operator GlobPtr<T>	cudev/ptr2d/detail/gpumat.hpp	/^__host__ GpuMat_<T>::operator GlobPtr<T>() const$/;"	f	class:cv::cudev::GpuMat_
operator GlobPtrSz<T>	cudev/ptr2d/detail/gpumat.hpp	/^__host__ GpuMat_<T>::operator GlobPtrSz<T>() const$/;"	f	class:cv::cudev::GpuMat_
operator Mat	core/mat.inl.hpp	/^MatExpr::operator Mat() const$/;"	f	class:cv::MatExpr
operator Mat_<T2>	core/mat.inl.hpp	/^Mat_<_Tp>::operator Mat_<T2>() const$/;"	f	class:cv::Mat_
operator Mat_<_Tp>	core/mat.inl.hpp	/^MatCommaInitializer_<_Tp>::operator Mat_<_Tp>() const$/;"	f	class:cv::MatCommaInitializer_
operator Mat_<_Tp>	core/mat.inl.hpp	/^MatExpr::operator Mat_<_Tp>() const$/;"	f	class:cv::MatExpr
operator Matx<T2, m, n>	core/matx.hpp	/^inline Matx<_Tp, m, n>::operator Matx<T2, m, n>() const$/;"	f	class:cv::Matx
operator Matx<_Tp, m, n>	core/mat.inl.hpp	/^Mat::operator Matx<_Tp, m, n>() const$/;"	f	class:cv::Mat
operator Matx<typename DataType<_Tp>::channel_type, m, n>	core/mat.inl.hpp	/^Mat_<_Tp>::operator Matx<typename DataType<_Tp>::channel_type, m, n>() const$/;"	f	class:cv::Mat_
operator ParamGenerator< ::std::tr1::tuple<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> >	ts/ts_gtest.h	/^  operator ParamGenerator< ::std::tr1::tuple<T1, T2, T3, T4, T5, T6, T7, T8,$/;"	f	class:testing::internal::CartesianProductHolder10
operator ParamGenerator< ::std::tr1::tuple<T1, T2, T3, T4, T5, T6, T7, T8, T9> >	ts/ts_gtest.h	/^  operator ParamGenerator< ::std::tr1::tuple<T1, T2, T3, T4, T5, T6, T7, T8,$/;"	f	class:testing::internal::CartesianProductHolder9
operator ParamGenerator< ::std::tr1::tuple<T1, T2, T3, T4, T5, T6, T7, T8> >	ts/ts_gtest.h	/^  operator ParamGenerator< ::std::tr1::tuple<T1, T2, T3, T4, T5, T6, T7,$/;"	f	class:testing::internal::CartesianProductHolder8
operator ParamGenerator< ::std::tr1::tuple<T1, T2, T3, T4, T5, T6, T7> >	ts/ts_gtest.h	/^  operator ParamGenerator< ::std::tr1::tuple<T1, T2, T3, T4, T5, T6,$/;"	f	class:testing::internal::CartesianProductHolder7
operator ParamGenerator< ::std::tr1::tuple<T1, T2, T3, T4, T5, T6> >	ts/ts_gtest.h	/^  operator ParamGenerator< ::std::tr1::tuple<T1, T2, T3, T4, T5, T6> >() const {$/;"	f	class:testing::internal::CartesianProductHolder6
operator ParamGenerator< ::std::tr1::tuple<T1, T2, T3, T4, T5> >	ts/ts_gtest.h	/^  operator ParamGenerator< ::std::tr1::tuple<T1, T2, T3, T4, T5> >() const {$/;"	f	class:testing::internal::CartesianProductHolder5
operator ParamGenerator< ::std::tr1::tuple<T1, T2, T3, T4> >	ts/ts_gtest.h	/^  operator ParamGenerator< ::std::tr1::tuple<T1, T2, T3, T4> >() const {$/;"	f	class:testing::internal::CartesianProductHolder4
operator ParamGenerator< ::std::tr1::tuple<T1, T2, T3> >	ts/ts_gtest.h	/^  operator ParamGenerator< ::std::tr1::tuple<T1, T2, T3> >() const {$/;"	f	class:testing::internal::CartesianProductHolder3
operator ParamGenerator< ::std::tr1::tuple<T1, T2> >	ts/ts_gtest.h	/^  operator ParamGenerator< ::std::tr1::tuple<T1, T2> >() const {$/;"	f	class:testing::internal::CartesianProductHolder2
operator ParamGenerator<T>	ts/ts_gtest.h	/^  operator ParamGenerator<T>() const { return ValuesIn(&v1_, &v1_ + 1); }$/;"	f	class:testing::internal::ValueArray1
operator ParamGenerator<T>	ts/ts_gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray10
operator ParamGenerator<T>	ts/ts_gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray11
operator ParamGenerator<T>	ts/ts_gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray12
operator ParamGenerator<T>	ts/ts_gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray13
operator ParamGenerator<T>	ts/ts_gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray14
operator ParamGenerator<T>	ts/ts_gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray15
operator ParamGenerator<T>	ts/ts_gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray16
operator ParamGenerator<T>	ts/ts_gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray17
operator ParamGenerator<T>	ts/ts_gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray18
operator ParamGenerator<T>	ts/ts_gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray19
operator ParamGenerator<T>	ts/ts_gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray2
operator ParamGenerator<T>	ts/ts_gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray20
operator ParamGenerator<T>	ts/ts_gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray21
operator ParamGenerator<T>	ts/ts_gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray22
operator ParamGenerator<T>	ts/ts_gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray23
operator ParamGenerator<T>	ts/ts_gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray24
operator ParamGenerator<T>	ts/ts_gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray25
operator ParamGenerator<T>	ts/ts_gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray26
operator ParamGenerator<T>	ts/ts_gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray27
operator ParamGenerator<T>	ts/ts_gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray28
operator ParamGenerator<T>	ts/ts_gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray29
operator ParamGenerator<T>	ts/ts_gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray3
operator ParamGenerator<T>	ts/ts_gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray30
operator ParamGenerator<T>	ts/ts_gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray31
operator ParamGenerator<T>	ts/ts_gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray32
operator ParamGenerator<T>	ts/ts_gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray33
operator ParamGenerator<T>	ts/ts_gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray34
operator ParamGenerator<T>	ts/ts_gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray35
operator ParamGenerator<T>	ts/ts_gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray36
operator ParamGenerator<T>	ts/ts_gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray37
operator ParamGenerator<T>	ts/ts_gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray38
operator ParamGenerator<T>	ts/ts_gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray39
operator ParamGenerator<T>	ts/ts_gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray4
operator ParamGenerator<T>	ts/ts_gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray40
operator ParamGenerator<T>	ts/ts_gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray41
operator ParamGenerator<T>	ts/ts_gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray42
operator ParamGenerator<T>	ts/ts_gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray43
operator ParamGenerator<T>	ts/ts_gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray44
operator ParamGenerator<T>	ts/ts_gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray45
operator ParamGenerator<T>	ts/ts_gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray46
operator ParamGenerator<T>	ts/ts_gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray47
operator ParamGenerator<T>	ts/ts_gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray48
operator ParamGenerator<T>	ts/ts_gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray49
operator ParamGenerator<T>	ts/ts_gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray5
operator ParamGenerator<T>	ts/ts_gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray50
operator ParamGenerator<T>	ts/ts_gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray6
operator ParamGenerator<T>	ts/ts_gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray7
operator ParamGenerator<T>	ts/ts_gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray8
operator ParamGenerator<T>	ts/ts_gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray9
operator Point3_<_Tp2>	core/types.hpp	/^Point3_<_Tp>::operator Point3_<_Tp2>() const$/;"	f	class:cv::Point3_
operator Point_<_Tp2>	core/types.hpp	/^Point_<_Tp>::operator Point_<_Tp2>() const$/;"	f	class:cv::Point_
operator PtrStep<T>	core/cuda.inl.hpp	/^GpuMat::operator PtrStep<T>() const$/;"	f	class:cv::cuda::GpuMat
operator PtrStepSz<T>	core/cuda.inl.hpp	/^GpuMat::operator PtrStepSz<T>() const$/;"	f	class:cv::cuda::GpuMat
operator Rect_<_Tp2>	core/types.hpp	/^Rect_<_Tp>::operator Rect_<_Tp2>() const$/;"	f	class:cv::Rect_
operator Scalar_<T2>	core/types.hpp	/^Scalar_<_Tp>::operator Scalar_<T2>() const$/;"	f	class:cv::Scalar_
operator Size_<_Tp2>	core/types.hpp	/^Size_<_Tp>::operator Size_<_Tp2>() const$/;"	f	class:cv::Size_
operator String	core/persistence.hpp	/^inline FileNode::operator String() const { String value; read(*this, value, value); return value; }$/;"	f	class:cv::FileNode
operator T*	core/cuda/dynamic_smem.hpp	/^        __device__ __forceinline__ operator T*()$/;"	f	struct:cv::cuda::device::DynamicSharedMem
operator T*	core/cuda_types.hpp	/^            __CV_CUDA_HOST_DEVICE__ operator       T*()       { return data; }$/;"	f	struct:cv::cuda::DevPtr
operator T*	core/ptr.inl.hpp	/^Ptr<T>::operator T* () const$/;"	f	class:cv::Ptr
operator T*	cudev/block/dynamic_smem.hpp	/^    __device__ __forceinline__ operator T*()$/;"	f	struct:cv::cudev::DynamicSharedMem
operator Vec<T2, cn>	core/matx.hpp	/^Vec<_Tp, cn>::operator Vec<T2, cn>() const$/;"	f	class:cv::Vec
operator Vec<_Tp, 2>	core/types.hpp	/^Point_<_Tp>::operator Vec<_Tp, 2>() const$/;"	f	class:cv::Point_
operator Vec<_Tp, 3>	core/types.hpp	/^Point3_<_Tp>::operator Vec<_Tp, 3>() const$/;"	f	class:cv::Point3_
operator Vec<_Tp, n>	core/mat.inl.hpp	/^Mat::operator Vec<_Tp, n>() const$/;"	f	class:cv::Mat
operator Vec<typename DataType<_Tp>::channel_type, n>	core/mat.inl.hpp	/^Mat_<_Tp>::operator Vec<typename DataType<_Tp>::channel_type, n>() const$/;"	f	class:cv::Mat_
operator []	core/core_c.h	/^template<typename _Tp> inline _Tp& Seq<_Tp>::operator [](int idx)$/;"	f	class:cv::Seq
operator []	core/core_c.h	/^template<typename _Tp> inline const _Tp& Seq<_Tp>::operator [](int idx) const$/;"	f	class:cv::Seq
operator []	core/cvstd.hpp	/^char String::operator[](int idx) const$/;"	f	class:cv::String
operator []	core/cvstd.hpp	/^char String::operator[](size_t idx) const$/;"	f	class:cv::String
operator []	core/mat.inl.hpp	/^_Tp MatConstIterator_<_Tp>::operator [](ptrdiff_t i) const$/;"	f	class:cv::MatConstIterator_
operator []	core/mat.inl.hpp	/^_Tp& MatIterator_<_Tp>::operator [](ptrdiff_t i) const$/;"	f	class:cv::MatIterator_
operator []	core/mat.inl.hpp	/^_Tp* Mat_<_Tp>::operator [](int y)$/;"	f	class:cv::Mat_
operator []	core/mat.inl.hpp	/^const _Tp* Mat_<_Tp>::operator [](int y) const$/;"	f	class:cv::Mat_
operator []	core/mat.inl.hpp	/^const int& MatSize::operator[](int i) const$/;"	f	class:cv::MatSize
operator []	core/mat.inl.hpp	/^const size_t& MatStep::operator[](int i) const$/;"	f	class:cv::MatStep
operator []	core/mat.inl.hpp	/^const uchar* MatConstIterator::operator [](ptrdiff_t i) const$/;"	f	class:cv::MatConstIterator
operator []	core/mat.inl.hpp	/^int& MatSize::operator[](int i)$/;"	f	class:cv::MatSize
operator []	core/mat.inl.hpp	/^size_t& MatStep::operator[](int i)$/;"	f	class:cv::MatStep
operator []	core/matx.hpp	/^_Tp& Vec<_Tp, cn>::operator [](int i)$/;"	f	class:cv::Vec
operator []	core/matx.hpp	/^const _Tp& Vec<_Tp, cn>::operator [](int i) const$/;"	f	class:cv::Vec
operator []	cudev/ptr2d/detail/gpumat.hpp	/^__host__ T* GpuMat_<T>::operator [](int y)$/;"	f	class:cv::cudev::GpuMat_
operator []	cudev/ptr2d/detail/gpumat.hpp	/^__host__ const T* GpuMat_<T>::operator [](int y) const$/;"	f	class:cv::cudev::GpuMat_
operator []	flann/dist.h	/^    T operator[](int)$/;"	f	struct:cvflann::ZeroIterator
operator []	flann/matrix.h	/^    T* operator[](size_t index) const$/;"	f	class:cvflann::Matrix
operator _Tp*	core/utility.hpp	/^AutoBuffer<_Tp, fixed_size>::operator _Tp* ()$/;"	f	class:cv::AutoBuffer
operator bool	ts/cuda_test.hpp	/^        inline operator bool() const { return val_; }$/;"	f	class:cvtest::Inverse
operator bool	ts/cuda_test.hpp	/^        inline operator bool() const { return val_; }$/;"	f	class:cvtest::UseRoi
operator bool	ts/ts_gtest.h	/^  operator bool() const { return success_; }  \/\/ NOLINT$/;"	f	class:testing::AssertionResult
operator bool	ts/ts_gtest.h	/^  operator bool() const { return true; }$/;"	f	struct:testing::internal::ConstCharPtr
operator const T*	core/cuda/dynamic_smem.hpp	/^        __device__ __forceinline__ operator const T*() const$/;"	f	struct:cv::cuda::device::DynamicSharedMem
operator const T*	core/cuda_types.hpp	/^            __CV_CUDA_HOST_DEVICE__ operator const T*() const { return data; }$/;"	f	struct:cv::cuda::DevPtr
operator const T*	cudev/block/dynamic_smem.hpp	/^    __device__ __forceinline__ operator const T*() const$/;"	f	struct:cv::cudev::DynamicSharedMem
operator const _Tp*	core/utility.hpp	/^AutoBuffer<_Tp, fixed_size>::operator const _Tp* () const$/;"	f	class:cv::AutoBuffer
operator const double*	core/cuda/dynamic_smem.hpp	/^        __device__ __forceinline__ operator const double*() const$/;"	f	struct:cv::cuda::device::DynamicSharedMem
operator const double*	cudev/block/dynamic_smem.hpp	/^    __device__ __forceinline__ operator const double*() const$/;"	f	struct:cv::cudev::DynamicSharedMem
operator const int*	core/mat.inl.hpp	/^MatSize::operator const int*() const$/;"	f	class:cv::MatSize
operator cv::Moments	imgproc/types_c.h	/^    operator cv::Moments() const$/;"	f	struct:CvMoments
operator cv::Point3_<_Tp>	core/types_c.h	/^    operator cv::Point3_<_Tp>() const { return cv::Point3_<_Tp>(cv::saturate_cast<_Tp>(x), cv::saturate_cast<_Tp>(y), cv::saturate_cast<_Tp>(z)); }$/;"	f	struct:CvPoint3D32f
operator cv::Point_<_Tp>	core/types_c.h	/^    operator cv::Point_<_Tp>() const { return cv::Point_<_Tp>(cv::saturate_cast<_Tp>(x), cv::saturate_cast<_Tp>(y)); }$/;"	f	struct:CvPoint
operator cv::Point_<_Tp>	core/types_c.h	/^    operator cv::Point_<_Tp>() const { return cv::Point_<_Tp>(cv::saturate_cast<_Tp>(x), cv::saturate_cast<_Tp>(y)); }$/;"	f	struct:CvPoint2D32f
operator cv::Range	core/types_c.h	/^    operator cv::Range() const { return (start_index == 0 && end_index == CV_WHOLE_SEQ_END_INDEX ) ? cv::Range::all() : cv::Range(start_index, end_index); }$/;"	f	struct:CvSlice
operator cv::Rect_<_Tp>	core/types_c.h	/^    operator cv::Rect_<_Tp>() const { return cv::Rect_<_Tp>((_Tp)x, (_Tp)y, (_Tp)width, (_Tp)height); }$/;"	f	struct:CvRect
operator cv::RotatedRect	core/types_c.h	/^    operator cv::RotatedRect() const { return cv::RotatedRect(center, size, angle); }$/;"	f	struct:CvBox2D
operator cv::Scalar_<_Tp>	core/types_c.h	/^    operator cv::Scalar_<_Tp>() const { return cv::Scalar_<_Tp>(cv::saturate_cast<_Tp>(val[0]), cv::saturate_cast<_Tp>(val[1]), cv::saturate_cast<_Tp>(val[2]), cv::saturate_cast<_Tp>(val[3])); }$/;"	f	struct:CvScalar
operator cv::Size_<_Tp>	core/types_c.h	/^    operator cv::Size_<_Tp>() const { return cv::Size_<_Tp>(cv::saturate_cast<_Tp>(width), cv::saturate_cast<_Tp>(height)); }$/;"	f	struct:CvSize
operator cv::Size_<_Tp>	core/types_c.h	/^    operator cv::Size_<_Tp>() const { return cv::Size_<_Tp>(cv::saturate_cast<_Tp>(width), cv::saturate_cast<_Tp>(height)); }$/;"	f	struct:CvSize2D32f
operator cv::TermCriteria	core/types_c.h	/^    operator cv::TermCriteria() const { return cv::TermCriteria(type, max_iter, epsilon); }$/;"	f	struct:CvTermCriteria
operator cv::Vec3b	viz/types.hpp	/^inline cv::viz::Color::operator cv::Vec3b() const { return cv::Vec3d(val); }$/;"	f	class:cv::viz::Color
operator double	core/operations.hpp	/^inline RNG::operator double()   { unsigned t = next(); return (((uint64)t << 32) | next()) * 5.4210108624275221700372640043497e-20; }$/;"	f	class:cv::RNG
operator double	core/persistence.hpp	/^inline FileNode::operator double() const { double value; read(*this, value, 0.);    return value; }$/;"	f	class:cv::FileNode
operator double*	core/cuda/dynamic_smem.hpp	/^        __device__ __forceinline__ operator double*()$/;"	f	struct:cv::cuda::device::DynamicSharedMem
operator double*	cudev/block/dynamic_smem.hpp	/^    __device__ __forceinline__ operator double*()$/;"	f	struct:cv::cudev::DynamicSharedMem
operator float	core/cuda/vec_distance.hpp	/^        __device__ __forceinline__ operator float() const$/;"	f	struct:cv::cuda::device::L1Dist
operator float	core/cuda/vec_distance.hpp	/^        __device__ __forceinline__ operator float() const$/;"	f	struct:cv::cuda::device::L2Dist
operator float	core/operations.hpp	/^inline RNG::operator float()    { return next()*2.3283064365386962890625e-10f; }$/;"	f	class:cv::RNG
operator float	core/persistence.hpp	/^inline FileNode::operator float() const  { float value;  read(*this, value, 0.f);   return value; }$/;"	f	class:cv::FileNode
operator int	core/cuda/vec_distance.hpp	/^        __device__ __forceinline__ operator int() const$/;"	f	struct:cv::cuda::device::HammingDist
operator int	core/cuda/vec_distance.hpp	/^        __device__ __forceinline__ operator int() const$/;"	f	struct:cv::cuda::device::L1Dist
operator int	core/opencl/opencl_svm.hpp	/^    operator int() const { return value_; }$/;"	f	struct:cv::ocl::svm::SVMCapabilities
operator int	core/operations.hpp	/^inline RNG::operator int()      { return (int)next(); }$/;"	f	class:cv::RNG
operator int	core/persistence.hpp	/^inline FileNode::operator int() const    { int value;    read(*this, value, 0);     return value; }$/;"	f	class:cv::FileNode
operator int	ts/ts_perf.hpp	/^    operator int() const {return _type;}$/;"	f	class:perf::MatType
operator result_type	cudev/block/vec_distance.hpp	/^    __device__ __forceinline__ operator result_type() const$/;"	f	struct:cv::cudev::NormHamming
operator result_type	cudev/block/vec_distance.hpp	/^    __device__ __forceinline__ operator result_type() const$/;"	f	struct:cv::cudev::NormL1
operator result_type	cudev/block/vec_distance.hpp	/^    __device__ __forceinline__ operator result_type() const$/;"	f	struct:cv::cudev::NormL2
operator schar	core/operations.hpp	/^inline RNG::operator schar()    { return (schar)next(); }$/;"	f	class:cv::RNG
operator short	core/operations.hpp	/^inline RNG::operator short()    { return (short)next(); }$/;"	f	class:cv::RNG
operator size_t	core/mat.inl.hpp	/^inline MatStep::operator size_t() const$/;"	f	class:cv::MatStep
operator std::string	core/cvstd.inl.hpp	/^FileNode::operator std::string() const$/;"	f	class:cv::FileNode
operator std::string	core/cvstd.inl.hpp	/^String::operator std::string() const$/;"	f	class:cv::String
operator std::vector<_Tp>	core/core_c.h	/^template<typename _Tp> inline Seq<_Tp>::operator std::vector<_Tp>() const$/;"	f	class:cv::Seq
operator std::vector<_Tp>	core/mat.inl.hpp	/^Mat::operator std::vector<_Tp>() const$/;"	f	class:cv::Mat
operator std::vector<_Tp>	core/mat.inl.hpp	/^Mat_<_Tp>::operator std::vector<_Tp>() const$/;"	f	class:cv::Mat_
operator uchar	core/operations.hpp	/^inline RNG::operator uchar()    { return (uchar)next(); }$/;"	f	class:cv::RNG
operator unsigned	core/operations.hpp	/^inline RNG::operator unsigned() { return next(); }$/;"	f	class:cv::RNG
operator ushort	core/operations.hpp	/^inline RNG::operator ushort()   { return (ushort)next(); }$/;"	f	class:cv::RNG
operator |	core/types.hpp	/^Rect_<_Tp> operator | (const Rect_<_Tp>& a, const Rect_<_Tp>& b)$/;"	f	namespace:cv
operator |=	core/types.hpp	/^Rect_<_Tp>& operator |= ( Rect_<_Tp>& a, const Rect_<_Tp>& b )$/;"	f	namespace:cv
operator ~	hal/intrin_cpp.hpp	/^template<typename _Tp, int n> inline v_reg<_Tp, n> operator ~ (const v_reg<_Tp, n>& a)$/;"	f	namespace:cv
operator ~	hal/intrin_neon.hpp	/^inline v_float32x4 operator ~ (const v_float32x4& a)$/;"	f	namespace:cv
optFlowEstimator	videostab/inpainting.hpp	/^    Ptr<IDenseOptFlowEstimator> optFlowEstimator() const { return optFlowEstimator_; }$/;"	f	class:cv::videostab::MotionInpainter
optFlowEstimator_	videostab/global_motion.hpp	/^    Ptr<ISparseOptFlowEstimator> optFlowEstimator_;$/;"	m	class:cv::videostab::KeypointBasedMotionEstimator
optFlowEstimator_	videostab/global_motion.hpp	/^    SparsePyrLkOptFlowEstimatorGpu optFlowEstimator_;$/;"	m	class:cv::videostab::KeypointBasedMotionEstimatorGpu
optFlowEstimator_	videostab/inpainting.hpp	/^    Ptr<IDenseOptFlowEstimator> optFlowEstimator_;$/;"	m	class:cv::videostab::MotionInpainter
optFlowEstimator_	videostab/optical_flow.hpp	/^    Ptr<cuda::DensePyrLKOpticalFlow> optFlowEstimator_;$/;"	m	class:cv::videostab::DensePyrLkOptFlowEstimatorGpu
optFlowEstimator_	videostab/optical_flow.hpp	/^    Ptr<cuda::SparsePyrLKOpticalFlow> optFlowEstimator_;$/;"	m	class:cv::videostab::SparsePyrLkOptFlowEstimatorGpu
opticalFlowEstimator	videostab/global_motion.hpp	/^    Ptr<ISparseOptFlowEstimator> opticalFlowEstimator() const { return optFlowEstimator_; }$/;"	f	class:cv::videostab::KeypointBasedMotionEstimator
optimize	flann/lsh_table.h	/^    void optimize()$/;"	f	class:cvflann::lsh::LshTable
optimizeKDTree	flann/autotuned_index.h	/^    void optimizeKDTree(std::vector<CostData>& costs)$/;"	f	class:cvflann::AutotunedIndex
optimizeKMeans	flann/autotuned_index.h	/^    void optimizeKMeans(std::vector<CostData>& costs)$/;"	f	class:cvflann::AutotunedIndex
optimizeSimplexDownhill	flann/simplex_downhill.h	/^float optimizeSimplexDownhill(T* points, int n, F func, float* vals = NULL )$/;"	f	namespace:cvflann
optional_mask	ts.hpp	/^    bool optional_mask;$/;"	m	class:cvtest::ArrayTest
orange	viz/types.hpp	/^inline cv::viz::Color cv::viz::Color::orange()     { return Color(0,   165, 255); }$/;"	f	class:cv::viz::Color
orange_red	viz/types.hpp	/^inline cv::viz::Color cv::viz::Color::orange_red() { return Color(0,    69, 255); }$/;"	f	class:cv::viz::Color
orb	stitching/detail/matchers.hpp	/^    Ptr<ORB> orb;$/;"	m	class:cv::detail::OrbFeaturesFinder
order	flann/dist.h	/^    int order;$/;"	m	struct:cvflann::MinkowskiDistance
orig_window_size	objdetect/objdetect_c.h	/^    CvSize orig_window_size;$/;"	m	struct:CvHaarClassifierCascade
origdata	core/mat.hpp	/^    uchar* origdata;$/;"	m	struct:cv::UMatData
origin	core/types_c.h	/^    CvPoint  origin;$/;"	m	struct:CvChain
origin	core/types_c.h	/^    int  origin;            \/**< 0 - top-left origin,$/;"	m	struct:_IplImage
original_reporter_	ts/ts_gtest.h	/^  TestPartResultReporterInterface* original_reporter_;$/;"	m	class:testing::internal::HasNewFatalFailureHelper
other	core/cvstd.hpp	/^    template<typename U> class rebind { typedef Allocator<U> other; };$/;"	t	class:cv::Allocator::rebind
other	cudev/grid/reduce_to_vec.hpp	/^        typedef Avg<U> other;$/;"	t	struct:cv::cudev::Avg::rebind
other	cudev/grid/reduce_to_vec.hpp	/^        typedef Max<U> other;$/;"	t	struct:cv::cudev::Max::rebind
other	cudev/grid/reduce_to_vec.hpp	/^        typedef Min<U> other;$/;"	t	struct:cv::cudev::Min::rebind
other	cudev/grid/reduce_to_vec.hpp	/^        typedef Sum<U> other;$/;"	t	struct:cv::cudev::Sum::rebind
outlierRejector	videostab/global_motion.hpp	/^    Ptr<IOutlierRejector> outlierRejector() const { return outlierRejector_; }$/;"	f	class:cv::videostab::KeypointBasedMotionEstimator
outlierRejector	videostab/global_motion.hpp	/^    Ptr<IOutlierRejector> outlierRejector() const { return outlierRejector_; }$/;"	f	class:cv::videostab::KeypointBasedMotionEstimatorGpu
outlierRejector_	videostab/global_motion.hpp	/^    Ptr<IOutlierRejector> outlierRejector_;$/;"	m	class:cv::videostab::KeypointBasedMotionEstimator
outlierRejector_	videostab/global_motion.hpp	/^    Ptr<IOutlierRejector> outlierRejector_;$/;"	m	class:cv::videostab::KeypointBasedMotionEstimatorGpu
outliers	ts/ts_perf.hpp	/^    unsigned int outliers;$/;"	m	struct:perf::performance_metrics
outputData	ts/ts_perf.hpp	/^    SizeVector outputData;$/;"	m	class:perf::TestBase
output_buf	ts.hpp	/^    std::string output_buf[MAX_IDX];$/;"	m	class:cvtest::TS
owned	core/ptr.inl.hpp	/^    Y* owned;$/;"	m	struct:cv::detail::PtrOwnerImpl
owner	core/cvstd.hpp	/^    detail::PtrOwner* owner;$/;"	m	struct:cv::Ptr
owner_	ts/ts_gtest.h	/^  pthread_t owner_;  \/\/ The thread holding the mutex.$/;"	m	class:std::tr1::MutexBase
p	core/mat.hpp	/^    int* p;$/;"	m	struct:cv::MatSize
p	core/mat.hpp	/^    size_t* p;$/;"	m	struct:cv::MatStep
p	core/ocl.hpp	/^    Impl* p;$/;"	m	class:cv::ocl::Context
p	core/ocl.hpp	/^    Impl* p;$/;"	m	class:cv::ocl::Device
p	core/ocl.hpp	/^    Impl* p;$/;"	m	class:cv::ocl::Image2D
p	core/ocl.hpp	/^    Impl* p;$/;"	m	class:cv::ocl::Kernel
p	core/ocl.hpp	/^    Impl* p;$/;"	m	class:cv::ocl::Platform
p	core/ocl.hpp	/^    Impl* p;$/;"	m	class:cv::ocl::PlatformInfo
p	core/ocl.hpp	/^    Impl* p;$/;"	m	class:cv::ocl::Program
p	core/ocl.hpp	/^    Impl* p;$/;"	m	class:cv::ocl::ProgramSource
p	core/ocl.hpp	/^    Impl* p;$/;"	m	class:cv::ocl::Queue
pBU	cudalegacy/NPP_staging.hpp	/^    Ncv32f *pBU;          \/\/\/< backward horizontal displacement$/;"	m	struct:NppStInterpolationState
pBV	cudalegacy/NPP_staging.hpp	/^    Ncv32f *pBV;          \/\/\/< backward vertical displacement$/;"	m	struct:NppStInterpolationState
pFU	cudalegacy/NPP_staging.hpp	/^    Ncv32f *pFU;          \/\/\/< forward horizontal displacement$/;"	m	struct:NppStInterpolationState
pFV	cudalegacy/NPP_staging.hpp	/^    Ncv32f *pFV;          \/\/\/< forward vertical displacement$/;"	m	struct:NppStInterpolationState
pNewFrame	cudalegacy/NPP_staging.hpp	/^    Ncv32f *pNewFrame;    \/\/\/< new frame$/;"	m	struct:NppStInterpolationState
pSrcFrame0	cudalegacy/NPP_staging.hpp	/^    Ncv32f *pSrcFrame0;   \/\/\/< frame 0$/;"	m	struct:NppStInterpolationState
pSrcFrame1	cudalegacy/NPP_staging.hpp	/^    Ncv32f *pSrcFrame1;   \/\/\/< frame 1$/;"	m	struct:NppStInterpolationState
pairwise_matches_	stitching.hpp	/^    std::vector<detail::MatchesInfo> pairwise_matches_;$/;"	m	class:cv::Stitcher
pairwise_matches_	stitching/detail/motion_estimators.hpp	/^    const MatchesInfo *pairwise_matches_;$/;"	m	class:cv::detail::BundleAdjusterBase
panoConfidenceThresh	stitching.hpp	/^    CV_WRAP double panoConfidenceThresh() const { return conf_thresh_; }$/;"	f	class:cv::Stitcher
parallel_for	core/private.hpp	/^    void parallel_for( const BlockedRange& range, const Body& body )$/;"	f	namespace:cv
parallel_reduce	core/private.hpp	/^    void parallel_reduce( const BlockedRange& range, Body& body )$/;"	f	namespace:cv
param	calib3d/calib3d_c.h	/^    cv::Ptr<CvMat> param;$/;"	m	class:CvLevMarq
param_	ts/ts_gtest.h	/^  const T param_;  \/\/ User-supplied parameter to the thread function.$/;"	m	class:std::tr1::ThreadWithParam
parameter_	ts/ts_gtest.h	/^  const ParamType parameter_;$/;"	m	class:testing::internal::ParameterizedTestFactory
parameter_	ts/ts_gtest.h	/^  static const ParamType* parameter_;$/;"	m	class:testing::WithParamInterface
parameter_	ts/ts_gtest.h	/^const T* WithParamInterface<T>::parameter_ = NULL;$/;"	m	class:testing::WithParamInterface
parameter_type	cudev/util/type_traits.hpp	/^        T, typename type_traits_detail::AddParameterType<T>::type>::type parameter_type;$/;"	t	struct:cv::cudev::TypeTraits
parameters	objdetect/detection_based_tracker.hpp	/^        Parameters parameters;$/;"	m	class:cv::DetectionBasedTracker
params	flann/autotuned_index.h	/^        IndexParams params;$/;"	m	struct:cvflann::AutotunedIndex::CostData
params	flann/hierarchical_clustering_index.h	/^    IndexParams params;$/;"	m	class:cvflann::HierarchicalClusteringIndex
params	flann/miniflann.hpp	/^    void* params;$/;"	m	struct:cv::flann::IndexParams
params	ts.hpp	/^    TSParams params;$/;"	m	class:cvtest::TS
parent	core/core_c.h	/^CVAPI(CvMemStorage*)  cvCreateChildMemStorage( CvMemStorage* parent );$/;"	v
parent	core/types_c.h	/^    struct  CvMemStorage* parent; \/**< We get new blocks from parent as needed. *\/$/;"	m	struct:CvMemStorage	typeref:struct:CvMemStorage::CvMemStorage
parent	ml.hpp	/^        int parent; \/\/!< Index of the parent node$/;"	m	class:cv::ml::DTrees::Node
parent	objdetect/objdetect_c.h	/^    int parent;$/;"	m	struct:CvHaarStageClassifier
parent	stitching/detail/util.hpp	/^    std::vector<int> parent;$/;"	m	class:cv::detail::DisjointSets
parentView	videoio/cap_ios.h	/^@property (nonatomic, retain) UIView* parentView;$/;"	v
partial_regex_	ts/ts_gtest.h	/^  regex_t partial_regex_;  \/\/ For PartialMatch().$/;"	m	class:std::tr1::RE
partition	core/operations.hpp	/^partition( const std::vector<_Tp>& _vec, std::vector<int>& labels,$/;"	f	namespace:cv
passed	ts/ts_gtest.h	/^  bool passed() const { return type_ == kSuccess; }$/;"	f	class:testing::TestPartResult
patch_size_x	cudev/grid/reduce.hpp	/^        patch_size_x = 4,$/;"	e	enum:cv::cudev::DefaultGlobReducePolicy::__anon390
patch_size_y	cudev/grid/reduce.hpp	/^        patch_size_y = 4$/;"	e	enum:cv::cudev::DefaultGlobReducePolicy::__anon390
pathname_	ts/ts_gtest.h	/^  std::string pathname_;$/;"	m	class:testing::internal::FilePath
pattern	ts/ts_gtest.h	/^  const char* pattern() const { return pattern_; }$/;"	f	class:std::tr1::RE
pattern_	ts/ts_gtest.h	/^  const char* pattern_;$/;"	m	class:std::tr1::RE
perf	ts/cuda_perf.hpp	/^namespace perf$/;"	n
perf	ts/ocl_perf.hpp	/^namespace perf {$/;"	n	namespace:cvtest::ocl
perf	ts/ts_perf.hpp	/^namespace perf$/;"	n
perfValidationStage	ts/ts_perf.hpp	/^    unsigned int perfValidationStage;$/;"	m	class:perf::TestBase
perform_morphing	cudalegacy.hpp	/^    int perform_morphing;     \/\/!< Number of erode-dilate-erode foreground-blob cleanup iterations.$/;"	m	struct:cv::cuda::FGDParams
performance_metrics	ts/ts_perf.hpp	/^typedef struct CV_EXPORTS performance_metrics$/;"	s	namespace:perf
performance_metrics	ts/ts_perf.hpp	/^} performance_metrics;$/;"	t	namespace:perf	typeref:struct:perf::performance_metrics
period	videostab/wobble_suppression.hpp	/^    virtual int period() const { return period_; }$/;"	f	class:cv::videostab::MoreAccurateMotionWobbleSuppressorBase
period_	videostab/wobble_suppression.hpp	/^    int period_;$/;"	m	class:cv::videostab::MoreAccurateMotionWobbleSuppressorBase
perspectiveMap	cudev/ptr2d/warping.hpp	/^__host__ static PerspectiveMapPtrSz perspectiveMap(Size dstSize, const GpuMat_<float>& warpMat)$/;"	f	namespace:cv::cudev
pink	viz/types.hpp	/^inline cv::viz::Color cv::viz::Color::pink()           { return Color(203, 192, 255); }$/;"	f	class:cv::viz::Color
pitch	cudalegacy/NCV.hpp	/^    Ncv32u pitch() const {return this->_pitch;}$/;"	f	class:NCVMatrix
pivot	flann/hierarchical_clustering_index.h	/^        int pivot;$/;"	m	struct:cvflann::HierarchicalClusteringIndex::Node
pivot	flann/kmeans_index.h	/^        DistanceType* pivot;$/;"	m	struct:cvflann::KMeansIndex::KMeansNode
plain	ts/ts_perf.hpp	/^    bool plain;$/;"	m	struct:perf::ImplData
planeSplit	flann/kdtree_index.h	/^    void planeSplit(int* ind, int count, int cutfeat, DistanceType cutval, int& lim1, int& lim2)$/;"	f	class:cvflann::KDTreeIndex
planeSplit	flann/kdtree_single_index.h	/^    void planeSplit(int* ind, int count, int cutfeat, DistanceType cutval, int& lim1, int& lim2)$/;"	f	class:cvflann::KDTreeSingleIndex
planes	core/mat.hpp	/^    Mat* planes;$/;"	m	class:cv::NAryMatIterator
plus	core/cuda/functional.hpp	/^        __host__ __device__ __forceinline__ plus() {}$/;"	f	struct:cv::cuda::device::plus
plus	core/cuda/functional.hpp	/^        __host__ __device__ __forceinline__ plus(const plus&) {}$/;"	f	struct:cv::cuda::device::plus
plus	core/cuda/functional.hpp	/^    template <typename T> struct plus : binary_function<T, T, T>$/;"	s	namespace:cv::cuda::device
plus	cudev/functional/functional.hpp	/^template <typename T> struct plus : binary_function<T, T, T>$/;"	s	namespace:cv::cudev
plusDelta	imgproc.hpp	/^    int minusDelta, plusDelta;$/;"	m	class:cv::LineIterator
plusStep	imgproc.hpp	/^    int minusStep, plusStep;$/;"	m	class:cv::LineIterator
plus_delta	core/types_c.h	/^    int  plus_delta;$/;"	m	struct:CvLineIterator
plus_step	core/types_c.h	/^    int  plus_step;$/;"	m	struct:CvLineIterator
pointee_type	cudev/util/type_traits.hpp	/^    typedef typename type_traits_detail::PointerTraits<unqualified_type>::type                           pointee_type;$/;"	t	struct:cv::cudev::TypeTraits
pointer	core/cvstd.hpp	/^    typedef char* pointer;$/;"	t	class:cv::String
pointer	core/cvstd.hpp	/^    typedef value_type* pointer;$/;"	t	class:cv::Allocator
pointer	core/mat.hpp	/^    typedef _Tp* pointer;$/;"	t	class:cv::MatIterator_
pointer	core/mat.hpp	/^    typedef const _Tp* pointer;$/;"	t	class:cv::MatConstIterator_
pointer	core/mat.hpp	/^    typedef const uchar** pointer;$/;"	t	class:cv::MatConstIterator
pointer	ts/ts_gtest.h	/^    T* pointer() { return &value_; }$/;"	f	class:std::tr1::ThreadLocal::ValueHolder
pointer	ts/ts_gtest.h	/^  T* pointer() { return &value_; }$/;"	f	class:std::tr1::ThreadLocal
pointer	ts/ts_gtest.h	/^  T* pointer() { return GetOrCreateValue(); }$/;"	f	class:std::tr1::ThreadLocal
pointer	ts/ts_gtest.h	/^  const T* pointer() const { return &value_; }$/;"	f	class:std::tr1::ThreadLocal
pointer	ts/ts_gtest.h	/^  const T* pointer() const { return GetOrCreateValue(); }$/;"	f	class:std::tr1::ThreadLocal
pointer	viz/types.hpp	/^            Point pointer;$/;"	m	class:cv::viz::MouseEvent
points	imgproc/imgproc_c.h	/^CVAPI(CvBox2D) cvFitEllipse2( const CvArr* points );$/;"	v
points0_	videostab/optical_flow.hpp	/^    cuda::GpuMat frame0_, frame1_, points0_, points1_, status_, errors_;$/;"	m	class:cv::videostab::SparsePyrLkOptFlowEstimatorGpu
points1_	videostab/optical_flow.hpp	/^    cuda::GpuMat frame0_, frame1_, points0_, points1_, status_, errors_;$/;"	m	class:cv::videostab::SparsePyrLkOptFlowEstimatorGpu
pointsGood_	videostab/global_motion.hpp	/^    std::vector<Point2f> pointsPrevGood_, pointsGood_;$/;"	m	class:cv::videostab::KeypointBasedMotionEstimator
pointsPrevGood_	videostab/global_motion.hpp	/^    std::vector<Point2f> pointsPrevGood_, pointsGood_;$/;"	m	class:cv::videostab::KeypointBasedMotionEstimator
pointsPrev_	videostab/global_motion.hpp	/^    cuda::GpuMat pointsPrev_, points_;$/;"	m	class:cv::videostab::KeypointBasedMotionEstimatorGpu
pointsPrev_	videostab/global_motion.hpp	/^    std::vector<Point2f> pointsPrev_, points_;$/;"	m	class:cv::videostab::KeypointBasedMotionEstimator
points_	videostab/global_motion.hpp	/^    cuda::GpuMat pointsPrev_, points_;$/;"	m	class:cv::videostab::KeypointBasedMotionEstimatorGpu
points_	videostab/global_motion.hpp	/^    std::vector<Point2f> pointsPrev_, points_;$/;"	m	class:cv::videostab::KeypointBasedMotionEstimator
policy	flann/any.h	/^    anyimpl::base_any_policy* policy;$/;"	m	struct:cvflann::any
policy	flann/any.h	/^    static typename choose_policy<T>::type policy;$/;"	m	class:cvflann::anyimpl::SinglePolicy
policy	flann/any.h	/^typename choose_policy<T>::type SinglePolicy<T>::policy;$/;"	m	class:cvflann::anyimpl::SinglePolicy
polygons	viz/types.hpp	/^            Mat polygons;$/;"	m	class:cv::viz::Mesh
pool	core/mat.hpp	/^        std::vector<uchar> pool;$/;"	m	struct:cv::SparseMat::Hdr
pool	flann/hierarchical_clustering_index.h	/^    PooledAllocator pool;$/;"	m	class:cvflann::HierarchicalClusteringIndex
pool_	flann/kdtree_index.h	/^    PooledAllocator pool_;$/;"	m	class:cvflann::KDTreeIndex
pool_	flann/kdtree_single_index.h	/^    PooledAllocator pool_;$/;"	m	class:cvflann::KDTreeSingleIndex
pool_	flann/kmeans_index.h	/^    PooledAllocator pool_;$/;"	m	class:cvflann::KMeansIndex
popMin	flann/heap.h	/^    bool popMin(T& value)$/;"	f	class:cvflann::Heap
pop_back	core/core_c.h	/^template<typename _Tp> inline void Seq<_Tp>::pop_back()$/;"	f	class:cv::Seq
pop_back	core/core_c.h	/^template<typename _Tp> inline void Seq<_Tp>::pop_back(_Tp* elem, size_t count)$/;"	f	class:cv::Seq
pop_front	core/core_c.h	/^template<typename _Tp> inline void Seq<_Tp>::pop_front()$/;"	f	class:cv::Seq
pop_front	core/core_c.h	/^template<typename _Tp> inline void Seq<_Tp>::pop_front(_Tp* elem, size_t count)$/;"	f	class:cv::Seq
popcnt32	flann/dist.h	/^    unsigned int popcnt32(uint32_t n) const$/;"	f	struct:cvflann::Hamming2
popcnt64	flann/dist.h	/^    unsigned int popcnt64(uint64_t n) const$/;"	f	struct:cvflann::Hamming2
pos	core/mat.inl.hpp	/^Point MatConstIterator_<_Tp>::pos() const$/;"	f	class:cv::MatConstIterator_
pos	cudalegacy/NPP_staging.hpp	/^    Ncv32f pos;           \/\/\/< new frame position$/;"	m	struct:NppStInterpolationState
pos	imgproc.hpp	/^Point LineIterator::pos() const$/;"	f	class:cv::LineIterator
posit_object	calib3d/calib3d_c.h	/^CVAPI(void)  cvReleasePOSITObject( CvPOSITObject**  posit_object );$/;"	v
posix	ts/ts_gtest.h	/^namespace posix {$/;"	n	namespace:std::tr1
pow_	cudev/expr/unary_func.hpp	/^pow_(const SrcPtr& src, float power)$/;"	f	namespace:cv::cudev
pow_func	cudev/functional/functional.hpp	/^template <> struct pow_func<double> : binary_function<double, double, double>$/;"	s	namespace:cv::cudev
pow_func	cudev/functional/functional.hpp	/^template <typename T> struct pow_func : binary_function<T, float, float>$/;"	s	namespace:cv::cudev
ppBuffers	cudalegacy/NPP_staging.hpp	/^    Ncv32f *ppBuffers[6]; \/\/\/< temporary buffers$/;"	m	struct:NppStInterpolationState
ppx	stitching/detail/camera.hpp	/^    double ppx; \/\/ Principal point X$/;"	m	struct:cv::detail::CameraParams
ppy	stitching/detail/camera.hpp	/^    double ppy; \/\/ Principal point Y$/;"	m	struct:cv::detail::CameraParams
preFilterCap	calib3d/calib3d_c.h	/^    int preFilterCap; \/\/ the output of pre-filtering is clipped by [-preFilterCap,preFilterCap]$/;"	m	struct:CvStereoBMState
preFilterSize	calib3d/calib3d_c.h	/^    int preFilterSize; \/\/ averaging window size: ~5x5..21x21$/;"	m	struct:CvStereoBMState
preFilterType	calib3d/calib3d_c.h	/^    int preFilterType; \/\/ =CV_STEREO_BM_NORMALIZED_RESPONSE now$/;"	m	struct:CvStereoBMState
preFilteredImg0	calib3d/calib3d_c.h	/^    CvMat* preFilteredImg0;$/;"	m	struct:CvStereoBMState
preFilteredImg1	calib3d/calib3d_c.h	/^    CvMat* preFilteredImg1;$/;"	m	struct:CvStereoBMState
preProcessedFrame_	videostab/stabilizer.hpp	/^    Mat preProcessedFrame_;$/;"	m	class:cv::videostab::StabilizerBase
pred	core/cuda/functional.hpp	/^        Predicate pred;$/;"	m	struct:cv::cuda::device::binary_negate
pred	core/cuda/functional.hpp	/^      Predicate pred;$/;"	m	struct:cv::cuda::device::unary_negate
pred	cudev/functional/functional.hpp	/^    Predicate pred;$/;"	m	struct:cv::cudev::BinaryNegate
pred	cudev/functional/functional.hpp	/^    Predicate pred;$/;"	m	struct:cv::cudev::UnaryNegate
prev	core/types_c.h	/^    struct CvMemBlock*  prev;$/;"	m	struct:CvMemBlock	typeref:struct:CvMemBlock::CvMemBlock
prev	core/types_c.h	/^    struct CvSeqBlock*  prev; \/**< Previous sequence block.                   *\/$/;"	m	struct:CvSeqBlock	typeref:struct:CvSeqBlock::CvSeqBlock
prev	core/types_c.h	/^    struct CvTypeInfo* prev; \/**< previous registered type in the list *\/$/;"	m	struct:CvTypeInfo	typeref:struct:CvTypeInfo::CvTypeInfo
prevAllocator	core/mat.hpp	/^    const MatAllocator* prevAllocator;$/;"	m	struct:cv::UMatData
prevErrNorm	calib3d/calib3d_c.h	/^    double prevErrNorm, errNorm;$/;"	m	class:CvLevMarq
prevParam	calib3d/calib3d_c.h	/^    cv::Ptr<CvMat> prevParam;$/;"	m	class:CvLevMarq
prev_elem	core/persistence.hpp	/^      schar*       prev_elem;  \/* pointer to previous element *\/$/;"	m	struct:cv::FileNodeIterator::SeqReader
principal_point_	viz/types.hpp	/^            Vec2d principal_point_;$/;"	m	class:cv::viz::Camera
print	core/operations.hpp	/^int print(Ptr<Formatted> fmtd, FILE* stream = stdout)$/;"	f	namespace:cv
print	core/operations.hpp	/^int print(const Mat& mtx, FILE* stream = stdout)$/;"	f	namespace:cv
print	core/operations.hpp	/^int print(const Matx<_Tp, m, n>& matx, FILE* stream = stdout)$/;"	f	namespace:cv
print	core/operations.hpp	/^int print(const UMat& mtx, FILE* stream = stdout)$/;"	f	namespace:cv
print	core/operations.hpp	/^int print(const std::vector<Point3_<_Tp> >& vec, FILE* stream = stdout)$/;"	f	namespace:cv
print	core/operations.hpp	/^int print(const std::vector<Point_<_Tp> >& vec, FILE* stream = stdout)$/;"	f	namespace:cv
print	flann/any.h	/^    virtual void print(std::ostream& out, void* const* src) { out << *reinterpret_cast<T const*>(*src); }$/;"	f	struct:cvflann::anyimpl::big_any_policy
print	flann/any.h	/^    virtual void print(std::ostream& out, void* const* src) { out << *reinterpret_cast<T const*>(src); }$/;"	f	struct:cvflann::anyimpl::small_any_policy
print	flann/any.h	/^template<> inline void big_any_policy<cv::String>::print(std::ostream& out, void* const* src)$/;"	f	class:cvflann::anyimpl::big_any_policy
print	flann/any.h	/^template<> inline void big_any_policy<flann_algorithm_t>::print(std::ostream& out, void* const* src)$/;"	f	class:cvflann::anyimpl::big_any_policy
print	flann/any.h	/^template<> inline void big_any_policy<flann_centers_init_t>::print(std::ostream& out, void* const* src)$/;"	f	class:cvflann::anyimpl::big_any_policy
print	videostab/log.hpp	/^    virtual void print(const char * \/*format*\/, ...) {}$/;"	f	class:cv::videostab::NullLog
printFuncAttrib	core/cuda/funcattrib.hpp	/^    void printFuncAttrib(Func& func)$/;"	f	namespace:cv::cuda::device
print_params	flann/params.h	/^inline void print_params(const IndexParams& params)$/;"	f	namespace:cvflann
print_params	flann/params.h	/^inline void print_params(const IndexParams& params, std::ostream& stream)$/;"	f	namespace:cvflann
prob	videostab/motion_core.hpp	/^    float prob; \/\/!< probability of success$/;"	m	struct:cv::videostab::RansacParams
processNoiseCov	video/tracking.hpp	/^    CV_PROP_RW Mat processNoiseCov;    \/\/!< process noise covariance matrix (Q)$/;"	m	class:cv::KalmanFilter
process_noise_cov	video/tracking_c.h	/^    CvMat* process_noise_cov;   \/* process noise covariance matrix (Q) *\/$/;"	m	struct:CvKalman
processingStartTime_	videostab/stabilizer.hpp	/^    clock_t processingStartTime_;$/;"	m	class:cv::videostab::StabilizerBase
programHash	core/ocl_genbase.hpp	/^    const char* programHash;$/;"	m	struct:cv::ocl::ProgramEntry
programStr	core/ocl_genbase.hpp	/^    const char* programStr;$/;"	m	struct:cv::ocl::ProgramEntry
project1st	core/cuda/functional.hpp	/^        __host__ __device__ __forceinline__ project1st() {}$/;"	f	struct:cv::cuda::device::project1st
project1st	core/cuda/functional.hpp	/^        __host__ __device__ __forceinline__ project1st(const project1st&) {}$/;"	f	struct:cv::cuda::device::project1st
project1st	core/cuda/functional.hpp	/^    template <typename T1, typename T2> struct project1st : binary_function<T1, T2, T1>$/;"	s	namespace:cv::cuda::device
project1st	cudev/functional/functional.hpp	/^template <typename T1, typename T2> struct project1st : binary_function<T1, T2, T1>$/;"	s	namespace:cv::cudev
project2nd	core/cuda/functional.hpp	/^        __host__ __device__ __forceinline__ project2nd() {}$/;"	f	struct:cv::cuda::device::project2nd
project2nd	core/cuda/functional.hpp	/^        __host__ __device__ __forceinline__ project2nd(const project2nd&) {}$/;"	f	struct:cv::cuda::device::project2nd
project2nd	core/cuda/functional.hpp	/^    template <typename T1, typename T2> struct project2nd : binary_function<T1, T2, T2>$/;"	s	namespace:cv::cuda::device
project2nd	cudev/functional/functional.hpp	/^template <typename T1, typename T2> struct project2nd : binary_function<T1, T2, T2>$/;"	s	namespace:cv::cudev
projector_	stitching/detail/warpers.hpp	/^    P projector_;$/;"	m	class:cv::detail::RotationWarperBase
proto2	ts/ts_gtest.h	/^namespace proto2 { class Message; }$/;"	n
pt	core/types.hpp	/^    CV_PROP_RW Point2f pt; \/\/!< coordinates of the keypoints$/;"	m	class:cv::KeyPoint
pt	imgproc.hpp	/^        Point2f pt;$/;"	m	struct:cv::Subdiv2D::Vertex
pt	imgproc.hpp	/^        int pt[4];$/;"	m	struct:cv::Subdiv2D::QuadEdge
pt	imgproc/types_c.h	/^    CvPoint   pt;$/;"	m	struct:CvChainPtReader
ptr	core/core_c.h	/^    uchar* ptr[CV_MAX_ARR]; \/**< pointers to the array slices *\/$/;"	m	struct:CvNArrayIterator
ptr	core/cuda.inl.hpp	/^_Tp* GpuMat::ptr(int y)$/;"	f	class:cv::cuda::GpuMat
ptr	core/cuda.inl.hpp	/^const _Tp* GpuMat::ptr(int y) const$/;"	f	class:cv::cuda::GpuMat
ptr	core/cuda.inl.hpp	/^const uchar* GpuMat::ptr(int y) const$/;"	f	class:cv::cuda::GpuMat
ptr	core/cuda.inl.hpp	/^uchar* GpuMat::ptr(int y)$/;"	f	class:cv::cuda::GpuMat
ptr	core/cuda/border_interpolate.hpp	/^        Ptr2D ptr;$/;"	m	struct:cv::cuda::device::BorderReader
ptr	core/cuda_types.hpp	/^            __CV_CUDA_HOST_DEVICE__       T* ptr(int y = 0)       { return (      T*)( (      char*)DevPtr<T>::data + y * step); }$/;"	f	struct:cv::cuda::PtrStep
ptr	core/cuda_types.hpp	/^            __CV_CUDA_HOST_DEVICE__ const T* ptr(int y = 0) const { return (const T*)( (const char*)DevPtr<T>::data + y * step); }$/;"	f	struct:cv::cuda::PtrStep
ptr	core/mat.hpp	/^    const uchar* ptr;$/;"	m	class:cv::MatConstIterator
ptr	core/mat.hpp	/^    uchar* ptr;$/;"	m	class:cv::SparseMatConstIterator
ptr	core/mat.inl.hpp	/^_Tp* Mat::ptr(int i0, int i1)$/;"	f	class:cv::Mat
ptr	core/mat.inl.hpp	/^_Tp* Mat::ptr(int i0, int i1, int i2)$/;"	f	class:cv::Mat
ptr	core/mat.inl.hpp	/^_Tp* Mat::ptr(int y)$/;"	f	class:cv::Mat
ptr	core/mat.inl.hpp	/^const _Tp* Mat::ptr(int i0, int i1) const$/;"	f	class:cv::Mat
ptr	core/mat.inl.hpp	/^const _Tp* Mat::ptr(int i0, int i1, int i2) const$/;"	f	class:cv::Mat
ptr	core/mat.inl.hpp	/^const _Tp* Mat::ptr(int y) const$/;"	f	class:cv::Mat
ptr	core/mat.inl.hpp	/^const uchar* Mat::ptr(const int* idx) const$/;"	f	class:cv::Mat
ptr	core/mat.inl.hpp	/^const uchar* Mat::ptr(int i0, int i1) const$/;"	f	class:cv::Mat
ptr	core/mat.inl.hpp	/^const uchar* Mat::ptr(int i0, int i1, int i2) const$/;"	f	class:cv::Mat
ptr	core/mat.inl.hpp	/^const uchar* Mat::ptr(int y) const$/;"	f	class:cv::Mat
ptr	core/mat.inl.hpp	/^uchar* Mat::ptr(const int* idx)$/;"	f	class:cv::Mat
ptr	core/mat.inl.hpp	/^uchar* Mat::ptr(int i0, int i1)$/;"	f	class:cv::Mat
ptr	core/mat.inl.hpp	/^uchar* Mat::ptr(int i0, int i1, int i2)$/;"	f	class:cv::Mat
ptr	core/mat.inl.hpp	/^uchar* Mat::ptr(int y)$/;"	f	class:cv::Mat
ptr	core/persistence.hpp	/^      schar*       ptr;        \/* pointer to element be read next *\/$/;"	m	struct:cv::FileNodeIterator::SeqReader
ptr	core/types_c.h	/^        uchar* ptr;$/;"	m	union:CvMat::__anon144
ptr	core/types_c.h	/^        uchar* ptr;$/;"	m	union:CvMatND::__anon147
ptr	core/types_c.h	/^    CvPoint2D32f* ptr;$/;"	m	struct:CvGraphVtx2D
ptr	core/types_c.h	/^    char* ptr;$/;"	m	struct:CvString
ptr	core/types_c.h	/^    uchar* ptr;$/;"	m	struct:CvLineIterator
ptr	core/utility.hpp	/^    _Tp* ptr;$/;"	m	class:cv::AutoBuffer
ptr	cudalegacy/NCV.hpp	/^    T *ptr() const {return this->_ptr;}$/;"	f	class:NCVMatrix
ptr	cudalegacy/NCV.hpp	/^    T *ptr() const {return this->_ptr;}$/;"	f	class:NCVVector
ptr	cudalegacy/NCV.hpp	/^    void *ptr;$/;"	m	struct:NCVMemPtr
ptr	imgproc.hpp	/^    uchar* ptr;$/;"	m	class:cv::LineIterator
ptr0	imgproc.hpp	/^    const uchar* ptr0;$/;"	m	class:cv::LineIterator
ptr_	ts/ts_gtest.h	/^  T* ptr_;$/;"	m	struct:std::tr1::tuple_element
ptr_sz_type	cudev/expr/expr.hpp	/^    typedef Expr<Body>                         ptr_sz_type;$/;"	t	struct:cv::cudev::PtrTraits
ptr_sz_type	cudev/ptr2d/traits.hpp	/^    typedef Ptr2DSz ptr_sz_type;$/;"	t	struct:cv::cudev::PtrTraitsBase
ptr_type	cudev/expr/expr.hpp	/^    typedef typename PtrTraits<Body>::ptr_type ptr_type;$/;"	t	struct:cv::cudev::PtrTraits
ptr_type	cudev/ptr2d/traits.hpp	/^    typedef Ptr2D   ptr_type;$/;"	t	struct:cv::cudev::PtrTraitsBase
ptrs	core/mat.hpp	/^    uchar** ptrs;$/;"	m	class:cv::NAryMatIterator
purple	viz/types.hpp	/^inline cv::viz::Color cv::viz::Color::purple()     { return Color(128,   0, 128); }$/;"	f	class:cv::viz::Color
pushBack	videostab/inpainting.hpp	/^    void pushBack(Ptr<InpainterBase> inpainter) { inpainters_.push_back(inpainter); }$/;"	f	class:cv::videostab::InpaintingPipeline
pushBack	videostab/motion_stabilizing.hpp	/^    void pushBack(Ptr<IMotionStabilizer> stabilizer) { stabilizers_.push_back(stabilizer); }$/;"	f	class:cv::videostab::MotionStabilizationPipeline
push_back	core/core_c.h	/^template<typename _Tp> inline void Seq<_Tp>::push_back(const _Tp& elem)$/;"	f	class:cv::Seq
push_back	core/core_c.h	/^template<typename _Tp> inline void Seq<_Tp>::push_back(const _Tp* elem, size_t count)$/;"	f	class:cv::Seq
push_back	core/mat.inl.hpp	/^void Mat::push_back(const Mat_<_Tp>& m)$/;"	f	class:cv::Mat
push_back	core/mat.inl.hpp	/^void Mat::push_back(const _Tp& elem)$/;"	f	class:cv::Mat
push_front	core/core_c.h	/^template<typename _Tp> inline void Seq<_Tp>::push_front(const _Tp& elem)$/;"	f	class:cv::Seq
push_front	core/core_c.h	/^template<typename _Tp> inline void Seq<_Tp>::push_front(const _Tp* elem, size_t count)$/;"	f	class:cv::Seq
pyrDown	cudev/grid/detail/pyr_down.hpp	/^    __global__ void pyrDown(const SrcPtr src, GlobPtr<DstType> dst, const int src_rows, const int src_cols, const int dst_cols)$/;"	f	namespace:cv::cudev::pyramids_detail
pyrDown	cudev/grid/detail/pyr_down.hpp	/^    __host__ void pyrDown(const SrcPtr& src, const GlobPtr<DstType>& dst, int src_rows, int src_cols, int dst_rows, int dst_cols, cudaStream_t stream)$/;"	f	namespace:cv::cudev::pyramids_detail
pyrDown_	cudev/expr/warping.hpp	/^pyrDown_(const SrcPtr& src)$/;"	f	namespace:cv::cudev
pyrUp	cudev/grid/detail/pyr_up.hpp	/^    __global__ void pyrUp(const SrcPtr src, GlobPtr<DstType> dst, const int src_rows, const int src_cols, const int dst_rows, const int dst_cols)$/;"	f	namespace:cv::cudev::pyramids_detail
pyrUp	cudev/grid/detail/pyr_up.hpp	/^    __host__ void pyrUp(const SrcPtr& src, const GlobPtr<DstType>& dst, int src_rows, int src_cols, int dst_rows, int dst_cols, cudaStream_t stream)$/;"	f	namespace:cv::cudev::pyramids_detail
pyrUp_	cudev/expr/warping.hpp	/^pyrUp_(const SrcPtr& src)$/;"	f	namespace:cv::cudev
pyramid	cudalegacy/NCVPyramid.hpp	/^    namespace pyramid$/;"	n	namespace:cv::cuda::device
pyramids_detail	cudev/grid/detail/pyr_down.hpp	/^namespace pyramids_detail$/;"	n	namespace:cv::cudev
pyramids_detail	cudev/grid/detail/pyr_up.hpp	/^namespace pyramids_detail$/;"	n	namespace:cv::cudev
qedges	imgproc.hpp	/^    std::vector<QuadEdge> qedges;$/;"	m	class:cv::Subdiv2D
quality	ml.hpp	/^        float quality; \/\/!< The split quality, a positive number. It is used to choose the best split.$/;"	m	class:cv::ml::DTrees::Split
queryIdx	core/types.hpp	/^    CV_PROP_RW int queryIdx; \/\/ query descriptor index$/;"	m	class:cv::DMatch
r	objdetect/objdetect_c.h	/^        CvRect r;$/;"	m	struct:CvHaarFeature::__anon32
rSum_	videostab/deblurring.hpp	/^    Mat_<float> bSum_, gSum_, rSum_, wSum_;$/;"	m	class:cv::videostab::WeightingDeblurer
r_kinv	stitching/detail/warpers.hpp	/^    float r_kinv[9];$/;"	m	struct:cv::detail::ProjectorBase
radius	flann/kmeans_index.h	/^        DistanceType radius;$/;"	m	struct:cvflann::KMeansIndex::KMeansNode
radius	flann/result_set.h	/^    DistanceType radius;$/;"	m	class:cvflann::RadiusResultSet
radius	videostab/deblurring.hpp	/^    virtual int radius() const { return radius_; }$/;"	f	class:cv::videostab::DeblurerBase
radius	videostab/inpainting.hpp	/^    virtual int radius() const { return radius_; }$/;"	f	class:cv::videostab::InpainterBase
radius	videostab/motion_stabilizing.hpp	/^    int radius() const { return radius_; }$/;"	f	class:cv::videostab::GaussianMotionFilter
radius	videostab/stabilizer.hpp	/^    int radius() const { return radius_; }$/;"	f	class:cv::videostab::StabilizerBase
radiusSearch	flann.hpp	/^int GenericIndex<Distance>::radiusSearch(const Mat& query, Mat& indices, Mat& dists, DistanceType radius, const ::cvflann::SearchParams& searchParams)$/;"	f	class:cv::flann::GenericIndex
radiusSearch	flann.hpp	/^int GenericIndex<Distance>::radiusSearch(const std::vector<ElementType>& query, std::vector<int>& indices, std::vector<DistanceType>& dists, DistanceType radius, const ::cvflann::SearchParams& searchParams)$/;"	f	class:cv::flann::GenericIndex
radiusSearch	flann.hpp	/^int Index_<T>::radiusSearch(const Mat& query, Mat& indices, Mat& dists, DistanceType radius, const ::cvflann::SearchParams& searchParams)$/;"	f	class:cv::flann::Index_
radiusSearch	flann.hpp	/^int Index_<T>::radiusSearch(const std::vector<ElementType>& query, std::vector<int>& indices, std::vector<DistanceType>& dists, DistanceType radius, const ::cvflann::SearchParams& searchParams)$/;"	f	class:cv::flann::Index_
radiusSearch	flann/flann_base.hpp	/^    int radiusSearch(const Matrix<ElementType>& query, Matrix<int>& indices, Matrix<DistanceType>& dists, float radius, const SearchParams& params)$/;"	f	class:cvflann::Index
radiusSearch	flann/nn_index.h	/^    virtual int radiusSearch(const Matrix<ElementType>& query, Matrix<int>& indices, Matrix<DistanceType>& dists, float radius, const SearchParams& params)$/;"	f	class:cvflann::NNIndex
radius_	flann/result_set.h	/^    DistanceType radius_;$/;"	m	class:cvflann::KNNRadiusUniqueResultSet
radius_	videostab/deblurring.hpp	/^    int radius_;$/;"	m	class:cv::videostab::DeblurerBase
radius_	videostab/inpainting.hpp	/^    double radius_;$/;"	m	class:cv::videostab::ColorInpainter
radius_	videostab/inpainting.hpp	/^    int radius_;$/;"	m	class:cv::videostab::InpainterBase
radius_	videostab/motion_stabilizing.hpp	/^    int radius_;$/;"	m	class:cv::videostab::GaussianMotionFilter
radius_	videostab/stabilizer.hpp	/^    int radius_;$/;"	m	class:cv::videostab::StabilizerBase
radiuses	flann/kmeans_index.h	/^        std::vector<DistanceType>& radiuses;$/;"	m	class:cvflann::KMeansIndex::KMeansDistanceComputer
randInt	ts.hpp	/^inline unsigned randInt( RNG& rng )$/;"	f	namespace:cvtest
randReal	ts.hpp	/^inline  double randReal( RNG& rng )$/;"	f	namespace:cvtest
rand_double	flann/random.h	/^inline double rand_double(double high = 1.0, double low = 0)$/;"	f	namespace:cvflann
rand_int	flann/random.h	/^inline int rand_int(int high = RAND_MAX, int low = 0)$/;"	f	namespace:cvflann
randn	core/operations.hpp	/^Matx<_Tp,m,n> Matx<_Tp,m,n>::randn(_Tp a, _Tp b)$/;"	f	class:cv::Matx
randomBorder	ts/ocl_test.hpp	/^    Border randomBorder(int minValue = 0, int maxValue = MAX_VALUE)$/;"	f	struct:cvtest::ocl::TestUtils
randomDouble	ts/ocl_test.hpp	/^    double randomDouble(double minVal, double maxVal)$/;"	f	struct:cvtest::ocl::TestUtils
randomDoubleLog	ts/ocl_test.hpp	/^    double randomDoubleLog(double minVal, double maxVal)$/;"	f	struct:cvtest::ocl::TestUtils
randomInt	ts/ocl_test.hpp	/^    int randomInt(int minVal, int maxVal)$/;"	f	struct:cvtest::ocl::TestUtils
randomMat	ts/ocl_test.hpp	/^    Mat randomMat(Size size, int type, double minVal, double maxVal, bool useRoi = false)$/;"	f	struct:cvtest::ocl::TestUtils
randomScalar	ts/ocl_test.hpp	/^    Scalar randomScalar(double minVal, double maxVal)$/;"	f	struct:cvtest::ocl::TestUtils
randomSize	ts/ocl_test.hpp	/^    Size randomSize(int minVal, int maxVal)$/;"	f	struct:cvtest::ocl::TestUtils
randomSize	ts/ocl_test.hpp	/^    Size randomSize(int minValX, int maxValX, int minValY, int maxValY)$/;"	f	struct:cvtest::ocl::TestUtils
randomSubMat	ts/ocl_test.hpp	/^    void randomSubMat(Mat& whole, Mat& subMat, const Size& roiSize, const Border& border, int type, double minVal, double maxVal)$/;"	f	struct:cvtest::ocl::TestUtils
random_sample	flann/sampling.h	/^Matrix<T> random_sample(Matrix<T>& srcMatrix, long size, bool remove = false)$/;"	f	namespace:cvflann
random_sample	flann/sampling.h	/^Matrix<T> random_sample(const Matrix<T>& srcMatrix, size_t size)$/;"	f	namespace:cvflann
randu	core/operations.hpp	/^Matx<_Tp,m,n> Matx<_Tp,m,n>::randu(_Tp a, _Tp b)$/;"	f	class:cv::Matx
randu	core/operations.hpp	/^template<typename _Tp> static inline _Tp randu()$/;"	f	namespace:cv
range_width_	stitching/detail/matchers.hpp	/^    int range_width_;$/;"	m	class:cv::detail::BestOf2NearestRangeMatcher
rank_	stitching/detail/util.hpp	/^    std::vector<int> rank_;$/;"	m	class:cv::detail::DisjointSets
ransacParams	videostab/global_motion.hpp	/^    RansacParams ransacParams() const { return ransacParams_; }$/;"	f	class:cv::videostab::MotionEstimatorRansacL2
ransacParams	videostab/outlier_rejection.hpp	/^    RansacParams ransacParams() const { return ransacParams_; }$/;"	f	class:cv::videostab::TranslationBasedLocalOutlierRejector
ransacParams_	videostab/global_motion.hpp	/^    RansacParams ransacParams_;$/;"	m	class:cv::videostab::MotionEstimatorRansacL2
ransacParams_	videostab/outlier_rejection.hpp	/^    RansacParams ransacParams_;$/;"	m	class:cv::videostab::TranslationBasedLocalOutlierRejector
raspberry	viz/types.hpp	/^inline cv::viz::Color cv::viz::Color::raspberry()      { return Color( 92,  11, 227); }$/;"	f	class:cv::viz::Color
re	core/types.hpp	/^    _Tp re, im; \/\/< the real and the imaginary parts$/;"	m	class:cv::Complex
read	core.hpp	/^    template<typename _Tp> static Ptr<_Tp> read(const FileNode& fn)$/;"	f	class:cv::Algorithm
read	core.hpp	/^    virtual void read(const FileNode& fn) { (void)fn; }$/;"	f	class:cv::Algorithm
read	core/persistence.hpp	/^static inline void read(const FileNode& node, Range& value, const Range& default_value)$/;"	f	namespace:cv
read	core/persistence.hpp	/^template<typename _Tp, int cn> static inline void read(const FileNode& node, Vec<_Tp, cn>& value, const Vec<_Tp, cn>& default_value)$/;"	f	namespace:cv
read	core/persistence.hpp	/^template<typename _Tp> static inline void read(const FileNode& node, Complex<_Tp>& value, const Complex<_Tp>& default_value)$/;"	f	namespace:cv
read	core/persistence.hpp	/^template<typename _Tp> static inline void read(const FileNode& node, Point3_<_Tp>& value, const Point3_<_Tp>& default_value)$/;"	f	namespace:cv
read	core/persistence.hpp	/^template<typename _Tp> static inline void read(const FileNode& node, Point_<_Tp>& value, const Point_<_Tp>& default_value)$/;"	f	namespace:cv
read	core/persistence.hpp	/^template<typename _Tp> static inline void read(const FileNode& node, Rect_<_Tp>& value, const Rect_<_Tp>& default_value)$/;"	f	namespace:cv
read	core/persistence.hpp	/^template<typename _Tp> static inline void read(const FileNode& node, Scalar_<_Tp>& value, const Scalar_<_Tp>& default_value)$/;"	f	namespace:cv
read	core/persistence.hpp	/^template<typename _Tp> static inline void read(const FileNode& node, Size_<_Tp>& value, const Size_<_Tp>& default_value)$/;"	f	namespace:cv
read	core/persistence.hpp	/^void read( FileNodeIterator& it, std::vector<_Tp>& vec, size_t maxCount = (size_t)INT_MAX )$/;"	f	namespace:cv
read	core/persistence.hpp	/^void read( const FileNode& node, std::vector<_Tp>& vec, const std::vector<_Tp>& default_value = std::vector<_Tp>() )$/;"	f	namespace:cv
read	core/persistence.hpp	/^void read(const FileNode& node, bool& value, bool default_value)$/;"	f	namespace:cv
read	core/persistence.hpp	/^void read(const FileNode& node, schar& value, schar default_value)$/;"	f	namespace:cv
read	core/persistence.hpp	/^void read(const FileNode& node, short& value, short default_value)$/;"	f	namespace:cv
read	core/persistence.hpp	/^void read(const FileNode& node, uchar& value, uchar default_value)$/;"	f	namespace:cv
read	core/persistence.hpp	/^void read(const FileNode& node, ushort& value, ushort default_value)$/;"	f	namespace:cv
read	core/types_c.h	/^    CvReadFunc read; \/**< reads object from file storage *\/$/;"	m	struct:CvTypeInfo
readRaw	core/persistence.hpp	/^inline void FileNode::readRaw( const String& fmt, uchar* vec, size_t len ) const { begin().readRaw( fmt, vec, len ); }$/;"	f	class:cv::FileNode
read_type	core/cuda/detail/transform_detail.hpp	/^            typedef typename TypeVec<T, shift>::vec_type read_type;$/;"	t	struct:cv::cuda::device::transform_detail::UnaryReadWriteTraits
read_type1	core/cuda/detail/transform_detail.hpp	/^            typedef typename TypeVec<T1, shift>::vec_type read_type1;$/;"	t	struct:cv::cuda::device::transform_detail::BinaryReadWriteTraits
read_type2	core/cuda/detail/transform_detail.hpp	/^            typedef typename TypeVec<T2, shift>::vec_type read_type2;$/;"	t	struct:cv::cuda::device::transform_detail::BinaryReadWriteTraits
reader	core/core_c.h	/^CVAPI(int)  cvGetSeqReaderPos( CvSeqReader* reader );$/;"	v
reader	core/persistence.hpp	/^    SeqReader reader;$/;"	m	class:cv::FileNodeIterator
reader	imgproc/imgproc_c.h	/^CVAPI(CvPoint) cvReadChainPoint( CvChainPtReader* reader );$/;"	v
real_window_size	objdetect/objdetect_c.h	/^    CvSize real_window_size;$/;"	m	struct:CvHaarClassifierCascade
realmaxdiff	ts.hpp	/^    double realmaxdiff;$/;"	m	struct:cvtest::MatComparator
rebind	core/cvstd.hpp	/^    template<typename U> class rebind { typedef Allocator<U> other; };$/;"	c	class:cv::Allocator
rebind	cudev/grid/reduce_to_vec.hpp	/^    template <typename U> struct rebind$/;"	s	struct:cv::cudev::Avg
rebind	cudev/grid/reduce_to_vec.hpp	/^    template <typename U> struct rebind$/;"	s	struct:cv::cudev::Max
rebind	cudev/grid/reduce_to_vec.hpp	/^    template <typename U> struct rebind$/;"	s	struct:cv::cudev::Min
rebind	cudev/grid/reduce_to_vec.hpp	/^    template <typename U> struct rebind$/;"	s	struct:cv::cudev::Sum
recentEdge	imgproc.hpp	/^    int recentEdge;$/;"	m	class:cv::Subdiv2D
recordAssetWriter	videoio/cap_ios.h	/^@property (nonatomic, retain) AVAssetWriter* recordAssetWriter;$/;"	v
recordAssetWriterInput	videoio/cap_ios.h	/^@property (nonatomic, retain) AVAssetWriterInput* recordAssetWriterInput;$/;"	v
recordPixelBufferAdaptor	videoio/cap_ios.h	/^@property (nonatomic, retain) AVAssetWriterInputPixelBufferAdaptor* recordPixelBufferAdaptor;$/;"	v
recordVideo	videoio/cap_ios.h	/^@property (nonatomic, assign) BOOL recordVideo;$/;"	v
rect	imgproc/types_c.h	/^    CvRect rect;    \/**<ROI of the component  *\/$/;"	m	struct:CvConnectedComp
rect	objdetect/objdetect_c.h	/^    CvRect rect;$/;"	m	struct:CvAvgComp
rect	objdetect/objdetect_c.h	/^    } rect[CV_HAAR_FEATURE_MAX];$/;"	m	struct:CvHaarFeature	typeref:struct:CvHaarFeature::__anon32
red	viz/types.hpp	/^inline cv::viz::Color cv::viz::Color::red()     { return Color(  0,   0, 255); }$/;"	f	class:cv::viz::Color
reduce	core/cuda/block.hpp	/^        static __device__ __forceinline__ T reduce(volatile T* buffer, T init, BinOp op)$/;"	f	struct:cv::cuda::device::Block
reduce	core/cuda/block.hpp	/^        static __device__ __forceinline__ void reduce(volatile T* buffer, BinOp op)$/;"	f	struct:cv::cuda::device::Block
reduce	core/cuda/detail/reduce.hpp	/^            static __device__ void reduce(Pointer smem, Reference val, unsigned int tid, Op op)$/;"	f	struct:cv::cuda::device::reduce_detail::Generic
reduce	core/cuda/detail/reduce.hpp	/^            static __device__ void reduce(Pointer smem, Reference val, unsigned int tid, Op op)$/;"	f	struct:cv::cuda::device::reduce_detail::GenericOptimized32
reduce	core/cuda/detail/reduce.hpp	/^            static __device__ void reduce(Pointer smem, Reference val, unsigned int tid, Op op)$/;"	f	struct:cv::cuda::device::reduce_detail::WarpOptimized
reduce	core/cuda/detail/reduce_key_val.hpp	/^            static __device__ void reduce(KP skeys, KR key, VP svals, VR val, unsigned int tid, Cmp cmp)$/;"	f	struct:cv::cuda::device::reduce_key_val_detail::Generic
reduce	core/cuda/detail/reduce_key_val.hpp	/^            static __device__ void reduce(KP skeys, KR key, VP svals, VR val, unsigned int tid, Cmp cmp)$/;"	f	struct:cv::cuda::device::reduce_key_val_detail::GenericOptimized32
reduce	core/cuda/detail/reduce_key_val.hpp	/^            static __device__ void reduce(KP skeys, KR key, VP svals, VR val, unsigned int tid, Cmp cmp)$/;"	f	struct:cv::cuda::device::reduce_key_val_detail::WarpOptimized
reduce	core/cuda/reduce.hpp	/^    __device__ __forceinline__ void reduce(const thrust::tuple<P0, P1, P2, P3, P4, P5, P6, P7, P8, P9>& smem,$/;"	f	namespace:cv::cuda::device
reduce	core/cuda/reduce.hpp	/^    __device__ __forceinline__ void reduce(volatile T* smem, T& val, unsigned int tid, const Op& op)$/;"	f	namespace:cv::cuda::device
reduce	core/cuda/warp.hpp	/^        static __device__ __forceinline__ T reduce(volatile T *ptr, BinOp op)$/;"	f	struct:cv::cuda::device::Warp
reduce	cudev/block/detail/reduce.hpp	/^        __device__ static void reduce(Pointer smem, Reference val, uint tid, Op op)$/;"	f	struct:cv::cudev::block_reduce_detail::Generic
reduce	cudev/block/detail/reduce.hpp	/^        __device__ static void reduce(Pointer smem, Reference val, uint tid, Op op)$/;"	f	struct:cv::cudev::block_reduce_detail::GenericOptimized32
reduce	cudev/block/detail/reduce.hpp	/^        __device__ static void reduce(Pointer smem, Reference val, uint tid, Op op)$/;"	f	struct:cv::cudev::block_reduce_detail::WarpOptimized
reduce	cudev/block/detail/reduce_key_val.hpp	/^        __device__ static void reduce(KP skeys, KR key, VP svals, VR val, uint tid, Cmp cmp)$/;"	f	struct:cv::cudev::block_reduce_key_val_detail::Generic
reduce	cudev/block/detail/reduce_key_val.hpp	/^        __device__ static void reduce(KP skeys, KR key, VP svals, VR val, uint tid, Cmp cmp)$/;"	f	struct:cv::cudev::block_reduce_key_val_detail::GenericOptimized32
reduce	cudev/block/detail/reduce_key_val.hpp	/^        __device__ static void reduce(KP skeys, KR key, VP svals, VR val, uint tid, Cmp cmp)$/;"	f	struct:cv::cudev::block_reduce_key_val_detail::WarpOptimized
reduce	cudev/grid/detail/reduce.hpp	/^    __global__ void reduce(const SrcPtr src, ResType* result, const MaskPtr mask, const int rows, const int cols)$/;"	f	namespace:cv::cudev::grid_reduce_detail
reduce	cudev/grid/detail/reduce.hpp	/^    __host__ void reduce(const SrcPtr& src, ResType* result, const MaskPtr& mask, int rows, int cols, cudaStream_t stream)$/;"	f	namespace:cv::cudev::grid_reduce_detail
reduce	cudev/warp/detail/reduce.hpp	/^        __device__ static void reduce(Pointer smem, Reference val, uint tid, Op op)$/;"	f	struct:cv::cudev::warp_reduce_detail::WarpReductor
reduce	cudev/warp/detail/reduce_key_val.hpp	/^        __device__ static void reduce(KP skeys, KR key, VP svals, VR val, uint tid, Cmp cmp)$/;"	f	struct:cv::cudev::warp_reduce_key_val_detail::WarpReductor
reduceAll	core/cuda/vec_distance.hpp	/^        template <int THREAD_DIM> __device__ __forceinline__ void reduceAll(float* smem, int tid)$/;"	f	struct:cv::cuda::device::L1Dist
reduceAll	core/cuda/vec_distance.hpp	/^        template <int THREAD_DIM> __device__ __forceinline__ void reduceAll(float* smem, int tid)$/;"	f	struct:cv::cuda::device::L2Dist
reduceAll	core/cuda/vec_distance.hpp	/^        template <int THREAD_DIM> __device__ __forceinline__ void reduceAll(int* smem, int tid)$/;"	f	struct:cv::cuda::device::HammingDist
reduceAll	core/cuda/vec_distance.hpp	/^        template <int THREAD_DIM> __device__ __forceinline__ void reduceAll(int* smem, int tid)$/;"	f	struct:cv::cuda::device::L1Dist
reduceBlock	cudev/block/vec_distance.hpp	/^    template <int THREAD_DIM> __device__ __forceinline__ void reduceBlock(result_type* smem, uint tid)$/;"	f	struct:cv::cudev::NormHamming
reduceBlock	cudev/block/vec_distance.hpp	/^    template <int THREAD_DIM> __device__ __forceinline__ void reduceBlock(result_type* smem, uint tid)$/;"	f	struct:cv::cudev::NormL1
reduceBlock	cudev/block/vec_distance.hpp	/^    template <int THREAD_DIM> __device__ __forceinline__ void reduceBlock(result_type* smem, uint tid)$/;"	f	struct:cv::cudev::NormL2
reduceGrid	cudev/grid/detail/reduce.hpp	/^        __device__ void reduceGrid(work_elem_type* result, int tid)$/;"	f	struct:cv::cudev::grid_reduce_detail::SumReductor
reduceGrid	cudev/grid/detail/reduce.hpp	/^        __device__ void reduceGrid(work_type* result, int tid)$/;"	f	struct:cv::cudev::grid_reduce_detail::MinMaxReductor
reduceIter	core/cuda/vec_distance.hpp	/^        __device__ __forceinline__ void reduceIter(float val1, float val2)$/;"	f	struct:cv::cuda::device::L1Dist
reduceIter	core/cuda/vec_distance.hpp	/^        __device__ __forceinline__ void reduceIter(float val1, float val2)$/;"	f	struct:cv::cuda::device::L2Dist
reduceIter	core/cuda/vec_distance.hpp	/^        __device__ __forceinline__ void reduceIter(int val1, int val2)$/;"	f	struct:cv::cuda::device::HammingDist
reduceIter	core/cuda/vec_distance.hpp	/^        __device__ __forceinline__ void reduceIter(int val1, int val2)$/;"	f	struct:cv::cuda::device::L1Dist
reduceKeyVal	core/cuda/reduce.hpp	/^    __device__ __forceinline__ void reduceKeyVal(const thrust::tuple<KP0, KP1, KP2, KP3, KP4, KP5, KP6, KP7, KP8, KP9>& skeys,$/;"	f	namespace:cv::cuda::device
reduceKeyVal	core/cuda/reduce.hpp	/^    __device__ __forceinline__ void reduceKeyVal(volatile K* skeys, K& key, volatile V* svals, V& val, unsigned int tid, const Cmp& cmp)$/;"	f	namespace:cv::cuda::device
reduceKeyVal	core/cuda/reduce.hpp	/^    __device__ __forceinline__ void reduceKeyVal(volatile K* skeys, K& key,$/;"	f	namespace:cv::cuda::device
reduceThread	cudev/block/vec_distance.hpp	/^    __device__ __forceinline__ void reduceThread(value_type val1, value_type val2)$/;"	f	struct:cv::cudev::NormHamming
reduceThread	cudev/block/vec_distance.hpp	/^    __device__ __forceinline__ void reduceThread(value_type val1, value_type val2)$/;"	f	struct:cv::cudev::NormL1
reduceThread	cudev/block/vec_distance.hpp	/^    __device__ __forceinline__ void reduceThread(value_type val1, value_type val2)$/;"	f	struct:cv::cudev::NormL2
reduceToColumn	cudev/grid/detail/reduce_to_column.hpp	/^    __global__ void reduceToColumn(const SrcPtr src, ResType* dst, const MaskPtr mask, const int cols)$/;"	f	namespace:cv::cudev::grid_reduce_to_vec_detail
reduceToColumn	cudev/grid/detail/reduce_to_column.hpp	/^    __host__ void reduceToColumn(const SrcPtr& src, ResType* dst, const MaskPtr& mask, int rows, int cols, cudaStream_t stream)$/;"	f	namespace:cv::cudev::grid_reduce_to_vec_detail
reduceToColumn_	cudev/expr/reduction.hpp	/^reduceToColumn_(const SrcPtr& src)$/;"	f	namespace:cv::cudev
reduceToRow	cudev/grid/detail/reduce_to_row.hpp	/^    __global__ void reduceToRow(const SrcPtr src, ResType* dst, const MaskPtr mask, const int rows, const int cols)$/;"	f	namespace:cv::cudev::grid_reduce_to_vec_detail
reduceToRow	cudev/grid/detail/reduce_to_row.hpp	/^    __host__ void reduceToRow(const SrcPtr& src, ResType* dst, const MaskPtr& mask, int rows, int cols, cudaStream_t stream)$/;"	f	namespace:cv::cudev::grid_reduce_to_vec_detail
reduceToRow_	cudev/expr/reduction.hpp	/^reduceToRow_(const SrcPtr& src)$/;"	f	namespace:cv::cudev
reduceVal	cudev/grid/detail/reduce.hpp	/^        __device__ __forceinline__ void reduceVal(typename TypeTraits<src_type>::parameter_type srcVal)$/;"	f	struct:cv::cudev::grid_reduce_detail::MinMaxReductor
reduceVal	cudev/grid/detail/reduce.hpp	/^        __device__ __forceinline__ void reduceVal(typename TypeTraits<src_type>::parameter_type srcVal)$/;"	f	struct:cv::cudev::grid_reduce_detail::SumReductor
reduceWarp	cudev/block/vec_distance.hpp	/^    __device__ __forceinline__ void reduceWarp(result_type* smem, uint tid)$/;"	f	struct:cv::cudev::NormHamming
reduceWarp	cudev/block/vec_distance.hpp	/^    __device__ __forceinline__ void reduceWarp(result_type* smem, uint tid)$/;"	f	struct:cv::cudev::NormL1
reduceWarp	cudev/block/vec_distance.hpp	/^    __device__ __forceinline__ void reduceWarp(result_type* smem, uint tid)$/;"	f	struct:cv::cudev::NormL2
reduce_detail	core/cuda/detail/reduce.hpp	/^    namespace reduce_detail$/;"	n	namespace:cv::cuda::device
reduce_key_val_detail	core/cuda/detail/reduce_key_val.hpp	/^    namespace reduce_key_val_detail$/;"	n	namespace:cv::cuda::device
reduce_n	core/cuda/block.hpp	/^        static __device__ __forceinline__ void reduce_n(T* data, unsigned int n, BinOp op)$/;"	f	struct:cv::cuda::device::Block
ref	core/mat.inl.hpp	/^_Tp& SparseMat::ref(const int* idx, size_t* hashval)$/;"	f	class:cv::SparseMat
ref	core/mat.inl.hpp	/^_Tp& SparseMat::ref(int i0, int i1, int i2, size_t* hashval)$/;"	f	class:cv::SparseMat
ref	core/mat.inl.hpp	/^_Tp& SparseMat::ref(int i0, int i1, size_t* hashval)$/;"	f	class:cv::SparseMat
ref	core/mat.inl.hpp	/^_Tp& SparseMat::ref(int i0, size_t* hashval)$/;"	f	class:cv::SparseMat
ref	core/mat.inl.hpp	/^_Tp& SparseMat_<_Tp>::ref(const int* idx, size_t* hashval)$/;"	f	class:cv::SparseMat_
ref	core/mat.inl.hpp	/^_Tp& SparseMat_<_Tp>::ref(int i0, int i1, int i2, size_t* hashval)$/;"	f	class:cv::SparseMat_
ref	core/mat.inl.hpp	/^_Tp& SparseMat_<_Tp>::ref(int i0, int i1, size_t* hashval)$/;"	f	class:cv::SparseMat_
ref	core/mat.inl.hpp	/^_Tp& SparseMat_<_Tp>::ref(int i0, size_t* hashval)$/;"	f	class:cv::SparseMat_
ref	cudev/ptr2d/texture.hpp	/^        static TexRef ref;$/;"	m	struct:__anon393::CvCudevTextureRef
ref	cudev/ptr2d/texture.hpp	/^    typename CvCudevTextureRef<T>::TexRef CvCudevTextureRef<T>::ref;$/;"	m	class:__anon393::CvCudevTextureRef
refCount	core/ptr.inl.hpp	/^    unsigned int refCount;$/;"	m	struct:cv::detail::PtrOwner
refcount	core/cuda.hpp	/^    int* refcount;$/;"	m	class:cv::cuda::GpuMat
refcount	core/cuda.hpp	/^    int* refcount;$/;"	m	class:cv::cuda::HostMem
refcount	core/mat.hpp	/^        int refcount;$/;"	m	struct:cv::SparseMat::Hdr
refcount	core/mat.hpp	/^    int refcount;$/;"	m	struct:cv::UMatData
refcount	core/types_c.h	/^    int* refcount;$/;"	m	struct:CvMat
refcount	core/types_c.h	/^    int* refcount;$/;"	m	struct:CvMatND
refcount	core/types_c.h	/^    int* refcount;$/;"	m	struct:CvSparseMat
reference	core/cvstd.hpp	/^    typedef char& reference;$/;"	t	class:cv::String
reference	core/cvstd.hpp	/^    typedef value_type& reference;$/;"	t	class:cv::Allocator
reference	core/mat.hpp	/^    typedef _Tp& reference;$/;"	t	class:cv::MatIterator_
reference	core/mat.hpp	/^    typedef const _Tp& reference;$/;"	t	class:cv::MatConstIterator_
reference	core/mat.hpp	/^    typedef uchar* reference;$/;"	t	class:cv::MatConstIterator
reference	ts/ts_gtest.h	/^  typedef const T& reference;$/;"	t	class:testing::internal::ParamIterator
referred_type	cudev/util/type_traits.hpp	/^    typedef typename type_traits_detail::ReferenceTraits<T>::type                                        referred_type;$/;"	t	struct:cv::cudev::TypeTraits
refinementMask	stitching/detail/motion_estimators.hpp	/^    const Mat refinementMask() const { return refinement_mask_.clone(); }$/;"	f	class:cv::detail::BundleAdjusterBase
refinement_mask_	stitching/detail/motion_estimators.hpp	/^    Mat refinement_mask_;$/;"	m	class:cv::detail::BundleAdjusterBase
regRNG	ts/ts_perf.hpp	/^    cv::RNG regRNG;\/\/own random numbers generator to make collection and verification work identical$/;"	m	class:perf::Regression
registered_	ts/ts_gtest.h	/^  bool registered_;$/;"	m	class:testing::internal::TypedTestCasePState
registr_resol_	stitching.hpp	/^    double registr_resol_;$/;"	m	class:cv::Stitcher
registrationResol	stitching.hpp	/^    CV_WRAP double registrationResol() const { return registr_resol_; }$/;"	f	class:cv::Stitcher
reinterpet_uint	hal/intrin.hpp	/^    static uint_type reinterpet_uint(_Tp x) { return x; }$/;"	f	struct:cv::V_TypeTraits
reinterpet_uint	hal/intrin.hpp	/^    static uint_type reinterpet_uint(value_type x)$/;"	f	struct:cv::V_TypeTraits
reinterpret_as	hal/intrin_cpp.hpp	/^    template<typename _Tp2, int n2> v_reg<_Tp2, n2> reinterpret_as() const$/;"	f	struct:cv::v_reg
reinterpret_from_int	hal/intrin.hpp	/^    static _Tp reinterpret_from_int(int_type x) { return (_Tp)x; }$/;"	f	struct:cv::V_TypeTraits
reinterpret_from_int	hal/intrin.hpp	/^    static value_type reinterpret_from_int(int_type x) { return (value_type)x; }$/;"	f	struct:cv::V_TypeTraits
reinterpret_from_int	hal/intrin.hpp	/^    static value_type reinterpret_from_int(int_type x)$/;"	f	struct:cv::V_TypeTraits
reinterpret_int	hal/intrin.hpp	/^    static int_type reinterpret_int(_Tp x) { return x; }$/;"	f	struct:cv::V_TypeTraits
reinterpret_int	hal/intrin.hpp	/^    static int_type reinterpret_int(value_type x) { return (int_type)x; }$/;"	f	struct:cv::V_TypeTraits
reinterpret_int	hal/intrin.hpp	/^    static int_type reinterpret_int(value_type x)$/;"	f	struct:cv::V_TypeTraits
reinterpret_uint	hal/intrin.hpp	/^    static uint_type reinterpret_uint(value_type x) { return (uint_type)x; }$/;"	f	struct:cv::V_TypeTraits
rejectionStatus_	videostab/global_motion.hpp	/^    std::vector<uchar> rejectionStatus_;$/;"	m	class:cv::videostab::KeypointBasedMotionEstimatorGpu
relation_to_source_	ts/ts_gtest.h	/^  RelationToSource relation_to_source_;$/;"	m	class:testing::internal::NativeArray
release	core/mat.inl.hpp	/^inline void Mat::release()$/;"	f	class:cv::Mat
release	core/mat.inl.hpp	/^inline void UMat::release()$/;"	f	class:cv::UMat
release	core/mat.inl.hpp	/^void SparseMat::release()$/;"	f	class:cv::SparseMat
release	core/ptr.inl.hpp	/^void Ptr<T>::release()$/;"	f	class:cv::Ptr
release	core/types_c.h	/^    CvReleaseFunc release; \/**< releases object (memory etc.) *\/$/;"	m	struct:CvTypeInfo
release	ts/ts_gtest.h	/^  T* release() {$/;"	f	struct:std::tr1::tuple_element
remaining	core/persistence.hpp	/^    size_t remaining;$/;"	m	class:cv::FileNodeIterator
remaining	flann/allocator.h	/^    int     remaining;  \/* Number of bytes left in current block of storage. *\/$/;"	m	class:cvflann::PooledAllocator
remapPtr	cudev/ptr2d/remap.hpp	/^remapPtr(const SrcPtr& src, const MapPtr& map)$/;"	f	namespace:cv::cudev
remapPtr	cudev/ptr2d/remap.hpp	/^remapPtr(const SrcPtr& src, const MapXPtr& mapx, const MapYPtr& mapy)$/;"	f	namespace:cv::cudev
remap_	cudev/expr/warping.hpp	/^remap_(const SrcPtr& src, const MapPtr& map)$/;"	f	namespace:cv::cudev
remap_	cudev/expr/warping.hpp	/^remap_(const SrcPtr& src, const MapXPtr& mapx, const MapYPtr& mapy)$/;"	f	namespace:cv::cudev
remove	core/core_c.h	/^template<typename _Tp> inline void Seq<_Tp>::remove(const Range& r)$/;"	f	class:cv::Seq
remove	core/core_c.h	/^template<typename _Tp> inline void Seq<_Tp>::remove(int idx)$/;"	f	class:cv::Seq
reorder_	flann/kdtree_single_index.h	/^    bool reorder_;$/;"	m	class:cvflann::KDTreeSingleIndex
repeater_	ts/ts_gtest.h	/^  internal::TestEventRepeater* repeater_;$/;"	m	class:testing::TestEventListeners
res	cudev/grid/detail/reduce.hpp	/^                                                typename VecTraits<R>::elem_type&> res(R& val)$/;"	f	struct:cv::cudev::grid_reduce_detail::Unroll
res	cudev/grid/detail/reduce.hpp	/^        __device__ __forceinline__ static R& res(R& val)$/;"	f	struct:cv::cudev::grid_reduce_detail::Unroll
res	cudev/grid/detail/reduce.hpp	/^        __device__ __forceinline__ static tuple<typename VecTraits<R>::elem_type&, typename VecTraits<R>::elem_type&> res(R& val)$/;"	f	struct:cv::cudev::grid_reduce_detail::Unroll
reset	core/ptr.inl.hpp	/^void Ptr<T>::reset(Y* p)$/;"	f	class:cv::Ptr
reset	core/ptr.inl.hpp	/^void Ptr<T>::reset(Y* p, D d)$/;"	f	class:cv::Ptr
reset	flann/any.h	/^    void reset()$/;"	f	struct:cvflann::any
reset	flann/dynamic_bitset.h	/^    void reset()$/;"	f	class:cvflann::DynamicBitset
reset	flann/dynamic_bitset.h	/^    void reset(size_t index)$/;"	f	class:cvflann::DynamicBitset
reset	flann/timer.h	/^    void reset()$/;"	f	class:cvflann::StartStopTimer
reset	ts/ts_gtest.h	/^  void reset(T* p = NULL) {$/;"	f	struct:std::tr1::tuple_element
reset	ts/ts_gtest.h	/^  void reset(T* ptr = NULL) {$/;"	f	class:testing::internal::linked_ptr
reset	videostab/frame_source.hpp	/^    virtual void reset() {}$/;"	f	class:cv::videostab::NullFrameSource
reset_block	flann/dynamic_bitset.h	/^    void reset_block(size_t index)$/;"	f	class:cvflann::DynamicBitset
reshape	core/matx.hpp	/^Matx<_Tp, m1, n1> Matx<_Tp, m, n>::reshape() const$/;"	f	class:cv::Matx
reshape_	cudev/ptr2d/gpumat.hpp	/^reshape_(const GpuMat_<T>& mat, int rows = 0)$/;"	f	namespace:cv::cudev
resize	core/utility.hpp	/^AutoBuffer<_Tp, fixed_size>::resize(size_t _size)$/;"	f	class:cv::AutoBuffer
resize	flann/dynamic_bitset.h	/^    void resize(size_t sz)$/;"	f	class:cvflann::DynamicBitset
resizePtr	cudev/ptr2d/resize.hpp	/^__host__ ResizePtrSz<typename PtrTraits<SrcPtr>::ptr_type> resizePtr(const SrcPtr& src, float fx, float fy)$/;"	f	namespace:cv::cudev
resize_	cudev/expr/warping.hpp	/^resize_(const SrcPtr& src, float fx, float fy)$/;"	f	namespace:cv::cudev
response	core/types.hpp	/^    CV_PROP_RW float response; \/\/!< the response by which the most strong keypoints have been selected. Can be used for the further sorting or subsampling$/;"	m	class:cv::KeyPoint
result	cudev/grid/reduce_to_vec.hpp	/^    __device__ __forceinline__ static T result(T r, float sz)$/;"	f	struct:cv::cudev::Avg
result	cudev/grid/reduce_to_vec.hpp	/^    __device__ __forceinline__ static T result(T r, int)$/;"	f	struct:cv::cudev::Max
result	cudev/grid/reduce_to_vec.hpp	/^    __device__ __forceinline__ static T result(T r, int)$/;"	f	struct:cv::cudev::Min
result	cudev/grid/reduce_to_vec.hpp	/^    __device__ __forceinline__ static T result(T r, int)$/;"	f	struct:cv::cudev::Sum
result	ts/ts_gtest.h	/^  const TestResult* result() const { return &result_; }$/;"	f	class:testing::TestInfo
resultDevice_	videostab/wobble_suppression.hpp	/^    cuda::GpuMat frameDevice_, resultDevice_;$/;"	m	class:cv::videostab::MoreAccurateMotionWobbleSuppressorGpu
result_	ts/ts_gtest.h	/^  TestResult result_;$/;"	m	class:testing::TestInfo
result_type	core/cuda/border_interpolate.hpp	/^        typedef D result_type;$/;"	t	struct:cv::cuda::device::BrdColConstant
result_type	core/cuda/border_interpolate.hpp	/^        typedef D result_type;$/;"	t	struct:cv::cuda::device::BrdColReflect
result_type	core/cuda/border_interpolate.hpp	/^        typedef D result_type;$/;"	t	struct:cv::cuda::device::BrdColReflect101
result_type	core/cuda/border_interpolate.hpp	/^        typedef D result_type;$/;"	t	struct:cv::cuda::device::BrdColReplicate
result_type	core/cuda/border_interpolate.hpp	/^        typedef D result_type;$/;"	t	struct:cv::cuda::device::BrdColWrap
result_type	core/cuda/border_interpolate.hpp	/^        typedef D result_type;$/;"	t	struct:cv::cuda::device::BrdConstant
result_type	core/cuda/border_interpolate.hpp	/^        typedef D result_type;$/;"	t	struct:cv::cuda::device::BrdReflect
result_type	core/cuda/border_interpolate.hpp	/^        typedef D result_type;$/;"	t	struct:cv::cuda::device::BrdReflect101
result_type	core/cuda/border_interpolate.hpp	/^        typedef D result_type;$/;"	t	struct:cv::cuda::device::BrdReplicate
result_type	core/cuda/border_interpolate.hpp	/^        typedef D result_type;$/;"	t	struct:cv::cuda::device::BrdRowConstant
result_type	core/cuda/border_interpolate.hpp	/^        typedef D result_type;$/;"	t	struct:cv::cuda::device::BrdRowReflect
result_type	core/cuda/border_interpolate.hpp	/^        typedef D result_type;$/;"	t	struct:cv::cuda::device::BrdRowReflect101
result_type	core/cuda/border_interpolate.hpp	/^        typedef D result_type;$/;"	t	struct:cv::cuda::device::BrdRowReplicate
result_type	core/cuda/border_interpolate.hpp	/^        typedef D result_type;$/;"	t	struct:cv::cuda::device::BrdRowWrap
result_type	core/cuda/border_interpolate.hpp	/^        typedef D result_type;$/;"	t	struct:cv::cuda::device::BrdWrap
result_type	core/cuda/vec_distance.hpp	/^        typedef float result_type;$/;"	t	struct:cv::cuda::device::L1Dist
result_type	core/cuda/vec_distance.hpp	/^        typedef float result_type;$/;"	t	struct:cv::cuda::device::L2Dist
result_type	core/cuda/vec_distance.hpp	/^        typedef int result_type;$/;"	t	struct:cv::cuda::device::HammingDist
result_type	core/cuda/vec_distance.hpp	/^        typedef int result_type;$/;"	t	struct:cv::cuda::device::L1Dist
result_type	cudev/block/vec_distance.hpp	/^    typedef float result_type;$/;"	t	struct:cv::cudev::NormL1
result_type	cudev/block/vec_distance.hpp	/^    typedef float result_type;$/;"	t	struct:cv::cudev::NormL2
result_type	cudev/block/vec_distance.hpp	/^    typedef int result_type;$/;"	t	struct:cv::cudev::NormHamming
result_type	cudev/block/vec_distance.hpp	/^    typedef uint result_type;$/;"	t	struct:cv::cudev::NormL1
result_type	cudev/functional/functional.hpp	/^    typedef _Result result_type;$/;"	t	struct:cv::cudev::binary_function
result_type	cudev/functional/functional.hpp	/^    typedef _Result result_type;$/;"	t	struct:cv::cudev::unary_function
result_type	cudev/functional/tuple_adapter.hpp	/^    typedef typename Op::result_type result_type;$/;"	t	struct:cv::cudev::BinaryTupleAdapter
result_type	cudev/functional/tuple_adapter.hpp	/^    typedef typename Op::result_type result_type;$/;"	t	struct:cv::cudev::UnaryTupleAdapter
rfind	core/cvstd.hpp	/^size_t String::rfind(char c, size_t pos) const$/;"	f	class:cv::String
rfind	core/cvstd.hpp	/^size_t String::rfind(const String& str, size_t pos) const$/;"	f	class:cv::String
rfind	core/cvstd.hpp	/^size_t String::rfind(const char* s, size_t pos) const$/;"	f	class:cv::String
rfind	core/cvstd.hpp	/^size_t String::rfind(const char* s, size_t pos, size_t n) const$/;"	f	class:cv::String
rig	ts/ocl_test.hpp	/^        int top, bot, lef, rig;$/;"	m	struct:cvtest::ocl::TestUtils::Border
right	flann/kdtree_single_index.h	/^        int left, right;$/;"	m	struct:cvflann::KDTreeSingleIndex::Node
right	ml.hpp	/^        int right; \/\/!< Index of right child node$/;"	m	class:cv::ml::DTrees::Node
right	objdetect/objdetect_c.h	/^    int* right;$/;"	m	struct:CvHaarClassifier
rinv	stitching/detail/warpers.hpp	/^    float rinv[9];$/;"	m	struct:cv::detail::ProjectorBase
rng	ts.hpp	/^    RNG rng;$/;"	m	class:cvtest::TS
rng	ts/ocl_test.hpp	/^    cv::RNG rng;$/;"	m	struct:cvtest::ocl::TestUtils
rng_seed	ts.hpp	/^    uint64 rng_seed;$/;"	m	struct:cvtest::TSParams
rng_seed	ts.hpp	/^    uint64 rng_seed;$/;"	m	struct:cvtest::TestInfo
rng_seed0	ts.hpp	/^    uint64 rng_seed0;$/;"	m	struct:cvtest::TestInfo
roi	core/types_c.h	/^    struct _IplROI *roi;    \/**< Image ROI. If NULL, the whole image is selected. *\/$/;"	m	struct:_IplImage	typeref:struct:_IplImage::_IplROI
roi1	calib3d/calib3d_c.h	/^    CvRect roi1, roi2;$/;"	m	struct:CvStereoBMState
roi2	calib3d/calib3d_c.h	/^    CvRect roi1, roi2;$/;"	m	struct:CvStereoBMState
rois_	stitching.hpp	/^    std::vector<std::vector<cv::Rect> > rois_;$/;"	m	class:cv::Stitcher
root	flann/hierarchical_clustering_index.h	/^    NodePtr* root;$/;"	m	class:cvflann::HierarchicalClusteringIndex
rootIn	ts/ts_perf.hpp	/^    cv::FileNode rootIn;$/;"	m	class:perf::Regression
root_	flann/kmeans_index.h	/^    KMeansNodePtr root_;$/;"	m	class:cvflann::KMeansIndex
root_bbox_	flann/kdtree_single_index.h	/^    BoundingBox root_bbox_;$/;"	m	class:cvflann::KDTreeSingleIndex
root_node_	flann/kdtree_single_index.h	/^    NodePtr root_node_;$/;"	m	class:cvflann::KDTreeSingleIndex
rose	viz/types.hpp	/^inline cv::viz::Color cv::viz::Color::rose()       { return Color(128,   0, 255); }$/;"	f	class:cv::viz::Color
rotate	core/affine.hpp	/^cv::Affine3<T> cv::Affine3<T>::rotate(const Mat3& R) const$/;"	f	class:cv::Affine3
rotate	core/affine.hpp	/^cv::Affine3<T> cv::Affine3<T>::rotate(const Vec3& _rvec) const$/;"	f	class:cv::Affine3
rotateVideo	videoio/cap_ios.h	/^@property (nonatomic, assign) BOOL rotateVideo;$/;"	v
rotation	core/affine.hpp	/^typename cv::Affine3<T>::Mat3 cv::Affine3<T>::rotation() const$/;"	f	class:cv::Affine3
rotation	core/affine.hpp	/^void cv::Affine3<T>::rotation(const Mat3& R)$/;"	f	class:cv::Affine3
rotation	core/affine.hpp	/^void cv::Affine3<T>::rotation(const Vec3& _rvec)$/;"	f	class:cv::Affine3
rotation	core/affine.hpp	/^void cv::Affine3<T>::rotation(const cv::Mat& data)$/;"	f	class:cv::Affine3
row	core/cuda.inl.hpp	/^GpuMat GpuMat::row(int y) const$/;"	f	class:cv::cuda::GpuMat
row	core/mat.inl.hpp	/^Mat Mat::row(int y) const$/;"	f	class:cv::Mat
row	core/mat.inl.hpp	/^Mat_<_Tp> Mat_<_Tp>::row(int y) const$/;"	f	class:cv::Mat_
row	core/mat.inl.hpp	/^UMat UMat::row(int y) const$/;"	f	class:cv::UMat
row	core/matx.hpp	/^Matx<_Tp, 1, n> Matx<_Tp, m, n>::row(int i) const$/;"	f	class:cv::Matx
row	cudev/ptr2d/detail/gpumat.hpp	/^__host__ GpuMat_<T> GpuMat_<T>::row(int y) const$/;"	f	class:cv::cudev::GpuMat_
row	cudev/ptr2d/glob.hpp	/^    __device__ __forceinline__       T* row(int y)       { return (      T*)( (      uchar*)data + y * step); }$/;"	f	struct:cv::cudev::GlobPtr
row	cudev/ptr2d/glob.hpp	/^    __device__ __forceinline__ const T* row(int y) const { return (const T*)( (const uchar*)data + y * step); }$/;"	f	struct:cv::cudev::GlobPtr
rowRange	core/cuda.inl.hpp	/^GpuMat GpuMat::rowRange(Range r) const$/;"	f	class:cv::cuda::GpuMat
rowRange	core/cuda.inl.hpp	/^GpuMat GpuMat::rowRange(int startrow, int endrow) const$/;"	f	class:cv::cuda::GpuMat
rowRange	core/mat.inl.hpp	/^Mat Mat::rowRange(const Range& r) const$/;"	f	class:cv::Mat
rowRange	core/mat.inl.hpp	/^Mat Mat::rowRange(int startrow, int endrow) const$/;"	f	class:cv::Mat
rowRange	core/mat.inl.hpp	/^UMat UMat::rowRange(const Range& r) const$/;"	f	class:cv::UMat
rowRange	core/mat.inl.hpp	/^UMat UMat::rowRange(int startrow, int endrow) const$/;"	f	class:cv::UMat
rowRange	cudev/ptr2d/detail/gpumat.hpp	/^__host__ GpuMat_<T> GpuMat_<T>::rowRange(Range r) const$/;"	f	class:cv::cudev::GpuMat_
rowRange	cudev/ptr2d/detail/gpumat.hpp	/^__host__ GpuMat_<T> GpuMat_<T>::rowRange(int startrow, int endrow) const$/;"	f	class:cv::cudev::GpuMat_
rowlb_	videostab/global_motion.hpp	/^    std::vector<double> elems_, rowlb_, rowub_;$/;"	m	class:cv::videostab::MotionEstimatorL1
rowlb_	videostab/motion_stabilizing.hpp	/^    std::vector<double> elems_, rowlb_, rowub_;$/;"	m	class:cv::videostab::LpMotionStabilizer
rows	core/cuda.hpp	/^    int rows, cols;$/;"	m	class:cv::cuda::GpuMat
rows	core/cuda.hpp	/^    int rows, cols;$/;"	m	class:cv::cuda::HostMem
rows	core/cuda_types.hpp	/^            int rows;$/;"	m	struct:cv::cuda::PtrStepSz
rows	core/mat.hpp	/^    int rows, cols;$/;"	m	class:cv::Mat
rows	core/mat.hpp	/^    int rows, cols;$/;"	m	class:cv::UMat
rows	core/matx.hpp	/^           rows     = m,$/;"	e	enum:cv::Matx::__anon150
rows	core/opengl.hpp	/^int cv::ogl::Buffer::rows() const$/;"	f	class:cv::ogl::Buffer
rows	core/opengl.hpp	/^int cv::ogl::Texture2D::rows() const$/;"	f	class:cv::ogl::Texture2D
rows	core/types_c.h	/^        int rows;$/;"	m	union:CvMat::__anon145
rows	core/types_c.h	/^    int rows;$/;"	m	struct:CvMat
rows	cudev/ptr2d/constant.hpp	/^    int rows, cols;$/;"	m	struct:cv::cudev::ConstantPtrSz
rows	cudev/ptr2d/deriv.hpp	/^    int rows, cols;$/;"	m	struct:cv::cudev::DerivXPtrSz
rows	cudev/ptr2d/deriv.hpp	/^    int rows, cols;$/;"	m	struct:cv::cudev::DerivYPtrSz
rows	cudev/ptr2d/deriv.hpp	/^    int rows, cols;$/;"	m	struct:cv::cudev::LaplacianPtrSz
rows	cudev/ptr2d/deriv.hpp	/^    int rows, cols;$/;"	m	struct:cv::cudev::ScharrXPtrSz
rows	cudev/ptr2d/deriv.hpp	/^    int rows, cols;$/;"	m	struct:cv::cudev::ScharrYPtrSz
rows	cudev/ptr2d/deriv.hpp	/^    int rows, cols;$/;"	m	struct:cv::cudev::SobelXPtrSz
rows	cudev/ptr2d/deriv.hpp	/^    int rows, cols;$/;"	m	struct:cv::cudev::SobelYPtrSz
rows	cudev/ptr2d/extrapolation.hpp	/^    int rows, cols;$/;"	m	struct:cv::cudev::BrdBase
rows	cudev/ptr2d/extrapolation.hpp	/^    int rows, cols;$/;"	m	struct:cv::cudev::BrdConstant
rows	cudev/ptr2d/glob.hpp	/^    int rows, cols;$/;"	m	struct:cv::cudev::GlobPtrSz
rows	cudev/ptr2d/interpolation.hpp	/^    int rows, cols;$/;"	m	struct:cv::cudev::CommonAreaInterPtrSz
rows	cudev/ptr2d/interpolation.hpp	/^    int rows, cols;$/;"	m	struct:cv::cudev::CubicInterPtrSz
rows	cudev/ptr2d/interpolation.hpp	/^    int rows, cols;$/;"	m	struct:cv::cudev::IntegerAreaInterPtrSz
rows	cudev/ptr2d/interpolation.hpp	/^    int rows, cols;$/;"	m	struct:cv::cudev::LinearInterPtrSz
rows	cudev/ptr2d/interpolation.hpp	/^    int rows, cols;$/;"	m	struct:cv::cudev::NearestInterPtrSz
rows	cudev/ptr2d/lut.hpp	/^    int rows, cols;$/;"	m	struct:cv::cudev::LutPtrSz
rows	cudev/ptr2d/mask.hpp	/^    int rows, cols;$/;"	m	struct:cv::cudev::SingleMaskChannelsSz
rows	cudev/ptr2d/remap.hpp	/^    int rows, cols;$/;"	m	struct:cv::cudev::RemapPtr1Sz
rows	cudev/ptr2d/remap.hpp	/^    int rows, cols;$/;"	m	struct:cv::cudev::RemapPtr2Sz
rows	cudev/ptr2d/resize.hpp	/^    int rows, cols;$/;"	m	struct:cv::cudev::ResizePtrSz
rows	cudev/ptr2d/texture.hpp	/^    int rows, cols;$/;"	m	struct:cv::cudev::Texture
rows	cudev/ptr2d/transform.hpp	/^    int rows, cols;$/;"	m	struct:cv::cudev::BinaryTransformPtrSz
rows	cudev/ptr2d/transform.hpp	/^    int rows, cols;$/;"	m	struct:cv::cudev::UnaryTransformPtrSz
rows	cudev/ptr2d/warping.hpp	/^    int rows, cols;$/;"	m	struct:cv::cudev::AffineMapPtrSz
rows	cudev/ptr2d/warping.hpp	/^    int rows, cols;$/;"	m	struct:cv::cudev::PerspectiveMapPtrSz
rows	cudev/ptr2d/zip.hpp	/^    int rows, cols;$/;"	m	struct:cv::cudev::ZipPtrSz
rows	flann/matrix.h	/^    size_t rows;$/;"	m	class:cvflann::Matrix
rows	flann/matrix.h	/^    size_t rows;$/;"	m	class:cvflann::UntypedMatrix
rows	flann/saving.h	/^    size_t rows;$/;"	m	struct:cvflann::IndexHeader
rows_	core/opengl.hpp	/^    int rows_;$/;"	m	class:cv::ogl::Buffer
rows_	core/opengl.hpp	/^    int rows_;$/;"	m	class:cv::ogl::Texture2D
rows_	videostab/global_motion.hpp	/^    std::vector<int> rows_, cols_;$/;"	m	class:cv::videostab::MotionEstimatorL1
rows_	videostab/motion_stabilizing.hpp	/^    std::vector<int> rows_, cols_;$/;"	m	class:cv::videostab::LpMotionStabilizer
rowub_	videostab/global_motion.hpp	/^    std::vector<double> elems_, rowlb_, rowub_;$/;"	m	class:cv::videostab::MotionEstimatorL1
rowub_	videostab/motion_stabilizing.hpp	/^    std::vector<double> elems_, rowlb_, rowub_;$/;"	m	class:cv::videostab::LpMotionStabilizer
run	videostab/fast_marching_inl.hpp	/^Inpaint FastMarchingMethod::run(const cv::Mat &mask, Inpaint inpaint)$/;"	f	class:cv::videostab::FastMarchingMethod
run_test_case	ts.hpp	/^    int run_test_case( int expected_code, const string& _descr, F f)$/;"	f	class:cvtest::BadArgTest
running	videoio/cap_ios.h	/^@property (nonatomic, readonly) BOOL running;$/;"	v
runsPerIteration	ts/ts_perf.hpp	/^    unsigned int runsPerIteration;$/;"	m	class:perf::TestBase
rvec	core/affine.hpp	/^typename cv::Affine3<T>::Vec3 cv::Affine3<T>::rvec() const$/;"	f	class:cv::Affine3
s	core/mat.hpp	/^    Scalar s;$/;"	m	class:cv::MatExpr
s	core/types_c.h	/^        short* s;$/;"	m	union:CvMat::__anon144
s	core/types_c.h	/^        short* s;$/;"	m	union:CvMatND::__anon147
s	hal/intrin_cpp.hpp	/^    _Tp s[n];$/;"	m	struct:cv::v_reg
safeFinish	ts/ocl_perf.hpp	/^inline void safeFinish()$/;"	f	namespace:cvtest::ocl::perf
sample_fraction_	flann/autotuned_index.h	/^    float sample_fraction_;$/;"	m	class:cvflann::AutotunedIndex
sampledDataset_	flann/autotuned_index.h	/^    Matrix<ElementType> sampledDataset_;$/;"	m	class:cvflann::AutotunedIndex
samples	ts/ts_perf.hpp	/^    unsigned int samples;$/;"	m	struct:perf::performance_metrics
saturate_cast	core/cuda/saturate_cast.hpp	/^    template<> __device__ __forceinline__ int saturate_cast<int>(double v)$/;"	f	namespace:cv::cuda::device
saturate_cast	core/cuda/saturate_cast.hpp	/^    template<> __device__ __forceinline__ int saturate_cast<int>(float v)$/;"	f	namespace:cv::cuda::device
saturate_cast	core/cuda/saturate_cast.hpp	/^    template<> __device__ __forceinline__ int saturate_cast<int>(uint v)$/;"	f	namespace:cv::cuda::device
saturate_cast	core/cuda/saturate_cast.hpp	/^    template<> __device__ __forceinline__ schar saturate_cast<schar>(double v)$/;"	f	namespace:cv::cuda::device
saturate_cast	core/cuda/saturate_cast.hpp	/^    template<> __device__ __forceinline__ schar saturate_cast<schar>(float v)$/;"	f	namespace:cv::cuda::device
saturate_cast	core/cuda/saturate_cast.hpp	/^    template<> __device__ __forceinline__ schar saturate_cast<schar>(int v)$/;"	f	namespace:cv::cuda::device
saturate_cast	core/cuda/saturate_cast.hpp	/^    template<> __device__ __forceinline__ schar saturate_cast<schar>(short v)$/;"	f	namespace:cv::cuda::device
saturate_cast	core/cuda/saturate_cast.hpp	/^    template<> __device__ __forceinline__ schar saturate_cast<schar>(uchar v)$/;"	f	namespace:cv::cuda::device
saturate_cast	core/cuda/saturate_cast.hpp	/^    template<> __device__ __forceinline__ schar saturate_cast<schar>(uint v)$/;"	f	namespace:cv::cuda::device
saturate_cast	core/cuda/saturate_cast.hpp	/^    template<> __device__ __forceinline__ schar saturate_cast<schar>(ushort v)$/;"	f	namespace:cv::cuda::device
saturate_cast	core/cuda/saturate_cast.hpp	/^    template<> __device__ __forceinline__ short saturate_cast<short>(double v)$/;"	f	namespace:cv::cuda::device
saturate_cast	core/cuda/saturate_cast.hpp	/^    template<> __device__ __forceinline__ short saturate_cast<short>(float v)$/;"	f	namespace:cv::cuda::device
saturate_cast	core/cuda/saturate_cast.hpp	/^    template<> __device__ __forceinline__ short saturate_cast<short>(int v)$/;"	f	namespace:cv::cuda::device
saturate_cast	core/cuda/saturate_cast.hpp	/^    template<> __device__ __forceinline__ short saturate_cast<short>(uint v)$/;"	f	namespace:cv::cuda::device
saturate_cast	core/cuda/saturate_cast.hpp	/^    template<> __device__ __forceinline__ short saturate_cast<short>(ushort v)$/;"	f	namespace:cv::cuda::device
saturate_cast	core/cuda/saturate_cast.hpp	/^    template<> __device__ __forceinline__ uchar saturate_cast<uchar>(double v)$/;"	f	namespace:cv::cuda::device
saturate_cast	core/cuda/saturate_cast.hpp	/^    template<> __device__ __forceinline__ uchar saturate_cast<uchar>(float v)$/;"	f	namespace:cv::cuda::device
saturate_cast	core/cuda/saturate_cast.hpp	/^    template<> __device__ __forceinline__ uchar saturate_cast<uchar>(int v)$/;"	f	namespace:cv::cuda::device
saturate_cast	core/cuda/saturate_cast.hpp	/^    template<> __device__ __forceinline__ uchar saturate_cast<uchar>(schar v)$/;"	f	namespace:cv::cuda::device
saturate_cast	core/cuda/saturate_cast.hpp	/^    template<> __device__ __forceinline__ uchar saturate_cast<uchar>(short v)$/;"	f	namespace:cv::cuda::device
saturate_cast	core/cuda/saturate_cast.hpp	/^    template<> __device__ __forceinline__ uchar saturate_cast<uchar>(uint v)$/;"	f	namespace:cv::cuda::device
saturate_cast	core/cuda/saturate_cast.hpp	/^    template<> __device__ __forceinline__ uchar saturate_cast<uchar>(ushort v)$/;"	f	namespace:cv::cuda::device
saturate_cast	core/cuda/saturate_cast.hpp	/^    template<> __device__ __forceinline__ uint saturate_cast<uint>(double v)$/;"	f	namespace:cv::cuda::device
saturate_cast	core/cuda/saturate_cast.hpp	/^    template<> __device__ __forceinline__ uint saturate_cast<uint>(float v)$/;"	f	namespace:cv::cuda::device
saturate_cast	core/cuda/saturate_cast.hpp	/^    template<> __device__ __forceinline__ uint saturate_cast<uint>(int v)$/;"	f	namespace:cv::cuda::device
saturate_cast	core/cuda/saturate_cast.hpp	/^    template<> __device__ __forceinline__ uint saturate_cast<uint>(schar v)$/;"	f	namespace:cv::cuda::device
saturate_cast	core/cuda/saturate_cast.hpp	/^    template<> __device__ __forceinline__ uint saturate_cast<uint>(short v)$/;"	f	namespace:cv::cuda::device
saturate_cast	core/cuda/saturate_cast.hpp	/^    template<> __device__ __forceinline__ ushort saturate_cast<ushort>(double v)$/;"	f	namespace:cv::cuda::device
saturate_cast	core/cuda/saturate_cast.hpp	/^    template<> __device__ __forceinline__ ushort saturate_cast<ushort>(float v)$/;"	f	namespace:cv::cuda::device
saturate_cast	core/cuda/saturate_cast.hpp	/^    template<> __device__ __forceinline__ ushort saturate_cast<ushort>(int v)$/;"	f	namespace:cv::cuda::device
saturate_cast	core/cuda/saturate_cast.hpp	/^    template<> __device__ __forceinline__ ushort saturate_cast<ushort>(schar v)$/;"	f	namespace:cv::cuda::device
saturate_cast	core/cuda/saturate_cast.hpp	/^    template<> __device__ __forceinline__ ushort saturate_cast<ushort>(short v)$/;"	f	namespace:cv::cuda::device
saturate_cast	core/cuda/saturate_cast.hpp	/^    template<> __device__ __forceinline__ ushort saturate_cast<ushort>(uint v)$/;"	f	namespace:cv::cuda::device
saturate_cast	core/cuda/saturate_cast.hpp	/^    template<typename _Tp> __device__ __forceinline__ _Tp saturate_cast(double v) { return _Tp(v); }$/;"	f	namespace:cv::cuda::device
saturate_cast	core/cuda/saturate_cast.hpp	/^    template<typename _Tp> __device__ __forceinline__ _Tp saturate_cast(float v) { return _Tp(v); }$/;"	f	namespace:cv::cuda::device
saturate_cast	core/cuda/saturate_cast.hpp	/^    template<typename _Tp> __device__ __forceinline__ _Tp saturate_cast(int v) { return _Tp(v); }$/;"	f	namespace:cv::cuda::device
saturate_cast	core/cuda/saturate_cast.hpp	/^    template<typename _Tp> __device__ __forceinline__ _Tp saturate_cast(schar v) { return _Tp(v); }$/;"	f	namespace:cv::cuda::device
saturate_cast	core/cuda/saturate_cast.hpp	/^    template<typename _Tp> __device__ __forceinline__ _Tp saturate_cast(short v) { return _Tp(v); }$/;"	f	namespace:cv::cuda::device
saturate_cast	core/cuda/saturate_cast.hpp	/^    template<typename _Tp> __device__ __forceinline__ _Tp saturate_cast(uchar v) { return _Tp(v); }$/;"	f	namespace:cv::cuda::device
saturate_cast	core/cuda/saturate_cast.hpp	/^    template<typename _Tp> __device__ __forceinline__ _Tp saturate_cast(uint v) { return _Tp(v); }$/;"	f	namespace:cv::cuda::device
saturate_cast	core/cuda/saturate_cast.hpp	/^    template<typename _Tp> __device__ __forceinline__ _Tp saturate_cast(ushort v) { return _Tp(v); }$/;"	f	namespace:cv::cuda::device
saturate_cast	core/cuda/vec_math.hpp	/^template<typename T> static __device__ __forceinline__ T saturate_cast(const char1& v) {return vec_math_detail::saturate_cast_helper<T>(v);}$/;"	f	namespace:cv::cuda::device
saturate_cast	core/cuda/vec_math.hpp	/^template<typename T> static __device__ __forceinline__ T saturate_cast(const char2& v) {return vec_math_detail::saturate_cast_helper<T>(v);}$/;"	f	namespace:cv::cuda::device
saturate_cast	core/cuda/vec_math.hpp	/^template<typename T> static __device__ __forceinline__ T saturate_cast(const char3& v) {return vec_math_detail::saturate_cast_helper<T>(v);}$/;"	f	namespace:cv::cuda::device
saturate_cast	core/cuda/vec_math.hpp	/^template<typename T> static __device__ __forceinline__ T saturate_cast(const char4& v) {return vec_math_detail::saturate_cast_helper<T>(v);}$/;"	f	namespace:cv::cuda::device
saturate_cast	core/cuda/vec_math.hpp	/^template<typename T> static __device__ __forceinline__ T saturate_cast(const double1& v) {return vec_math_detail::saturate_cast_helper<T>(v);}$/;"	f	namespace:cv::cuda::device
saturate_cast	core/cuda/vec_math.hpp	/^template<typename T> static __device__ __forceinline__ T saturate_cast(const double2& v) {return vec_math_detail::saturate_cast_helper<T>(v);}$/;"	f	namespace:cv::cuda::device
saturate_cast	core/cuda/vec_math.hpp	/^template<typename T> static __device__ __forceinline__ T saturate_cast(const double3& v) {return vec_math_detail::saturate_cast_helper<T>(v);}$/;"	f	namespace:cv::cuda::device
saturate_cast	core/cuda/vec_math.hpp	/^template<typename T> static __device__ __forceinline__ T saturate_cast(const double4& v) {return vec_math_detail::saturate_cast_helper<T>(v);}$/;"	f	namespace:cv::cuda::device
saturate_cast	core/cuda/vec_math.hpp	/^template<typename T> static __device__ __forceinline__ T saturate_cast(const float1& v) {return vec_math_detail::saturate_cast_helper<T>(v);}$/;"	f	namespace:cv::cuda::device
saturate_cast	core/cuda/vec_math.hpp	/^template<typename T> static __device__ __forceinline__ T saturate_cast(const float2& v) {return vec_math_detail::saturate_cast_helper<T>(v);}$/;"	f	namespace:cv::cuda::device
saturate_cast	core/cuda/vec_math.hpp	/^template<typename T> static __device__ __forceinline__ T saturate_cast(const float3& v) {return vec_math_detail::saturate_cast_helper<T>(v);}$/;"	f	namespace:cv::cuda::device
saturate_cast	core/cuda/vec_math.hpp	/^template<typename T> static __device__ __forceinline__ T saturate_cast(const float4& v) {return vec_math_detail::saturate_cast_helper<T>(v);}$/;"	f	namespace:cv::cuda::device
saturate_cast	core/cuda/vec_math.hpp	/^template<typename T> static __device__ __forceinline__ T saturate_cast(const int1& v) {return vec_math_detail::saturate_cast_helper<T>(v);}$/;"	f	namespace:cv::cuda::device
saturate_cast	core/cuda/vec_math.hpp	/^template<typename T> static __device__ __forceinline__ T saturate_cast(const int2& v) {return vec_math_detail::saturate_cast_helper<T>(v);}$/;"	f	namespace:cv::cuda::device
saturate_cast	core/cuda/vec_math.hpp	/^template<typename T> static __device__ __forceinline__ T saturate_cast(const int3& v) {return vec_math_detail::saturate_cast_helper<T>(v);}$/;"	f	namespace:cv::cuda::device
saturate_cast	core/cuda/vec_math.hpp	/^template<typename T> static __device__ __forceinline__ T saturate_cast(const int4& v) {return vec_math_detail::saturate_cast_helper<T>(v);}$/;"	f	namespace:cv::cuda::device
saturate_cast	core/cuda/vec_math.hpp	/^template<typename T> static __device__ __forceinline__ T saturate_cast(const short1& v) {return vec_math_detail::saturate_cast_helper<T>(v);}$/;"	f	namespace:cv::cuda::device
saturate_cast	core/cuda/vec_math.hpp	/^template<typename T> static __device__ __forceinline__ T saturate_cast(const short2& v) {return vec_math_detail::saturate_cast_helper<T>(v);}$/;"	f	namespace:cv::cuda::device
saturate_cast	core/cuda/vec_math.hpp	/^template<typename T> static __device__ __forceinline__ T saturate_cast(const short3& v) {return vec_math_detail::saturate_cast_helper<T>(v);}$/;"	f	namespace:cv::cuda::device
saturate_cast	core/cuda/vec_math.hpp	/^template<typename T> static __device__ __forceinline__ T saturate_cast(const short4& v) {return vec_math_detail::saturate_cast_helper<T>(v);}$/;"	f	namespace:cv::cuda::device
saturate_cast	core/cuda/vec_math.hpp	/^template<typename T> static __device__ __forceinline__ T saturate_cast(const uchar1& v) {return vec_math_detail::saturate_cast_helper<T>(v);}$/;"	f	namespace:cv::cuda::device
saturate_cast	core/cuda/vec_math.hpp	/^template<typename T> static __device__ __forceinline__ T saturate_cast(const uchar2& v) {return vec_math_detail::saturate_cast_helper<T>(v);}$/;"	f	namespace:cv::cuda::device
saturate_cast	core/cuda/vec_math.hpp	/^template<typename T> static __device__ __forceinline__ T saturate_cast(const uchar3& v) {return vec_math_detail::saturate_cast_helper<T>(v);}$/;"	f	namespace:cv::cuda::device
saturate_cast	core/cuda/vec_math.hpp	/^template<typename T> static __device__ __forceinline__ T saturate_cast(const uchar4& v) {return vec_math_detail::saturate_cast_helper<T>(v);}$/;"	f	namespace:cv::cuda::device
saturate_cast	core/cuda/vec_math.hpp	/^template<typename T> static __device__ __forceinline__ T saturate_cast(const uint1& v) {return vec_math_detail::saturate_cast_helper<T>(v);}$/;"	f	namespace:cv::cuda::device
saturate_cast	core/cuda/vec_math.hpp	/^template<typename T> static __device__ __forceinline__ T saturate_cast(const uint2& v) {return vec_math_detail::saturate_cast_helper<T>(v);}$/;"	f	namespace:cv::cuda::device
saturate_cast	core/cuda/vec_math.hpp	/^template<typename T> static __device__ __forceinline__ T saturate_cast(const uint3& v) {return vec_math_detail::saturate_cast_helper<T>(v);}$/;"	f	namespace:cv::cuda::device
saturate_cast	core/cuda/vec_math.hpp	/^template<typename T> static __device__ __forceinline__ T saturate_cast(const uint4& v) {return vec_math_detail::saturate_cast_helper<T>(v);}$/;"	f	namespace:cv::cuda::device
saturate_cast	core/cuda/vec_math.hpp	/^template<typename T> static __device__ __forceinline__ T saturate_cast(const ushort1& v) {return vec_math_detail::saturate_cast_helper<T>(v);}$/;"	f	namespace:cv::cuda::device
saturate_cast	core/cuda/vec_math.hpp	/^template<typename T> static __device__ __forceinline__ T saturate_cast(const ushort2& v) {return vec_math_detail::saturate_cast_helper<T>(v);}$/;"	f	namespace:cv::cuda::device
saturate_cast	core/cuda/vec_math.hpp	/^template<typename T> static __device__ __forceinline__ T saturate_cast(const ushort3& v) {return vec_math_detail::saturate_cast_helper<T>(v);}$/;"	f	namespace:cv::cuda::device
saturate_cast	core/cuda/vec_math.hpp	/^template<typename T> static __device__ __forceinline__ T saturate_cast(const ushort4& v) {return vec_math_detail::saturate_cast_helper<T>(v);}$/;"	f	namespace:cv::cuda::device
saturate_cast	cudev/util/saturate_cast.hpp	/^template <> __device__ __forceinline__ int saturate_cast<int>(double v)$/;"	f	namespace:cv::cudev
saturate_cast	cudev/util/saturate_cast.hpp	/^template <> __device__ __forceinline__ int saturate_cast<int>(float v)$/;"	f	namespace:cv::cudev
saturate_cast	cudev/util/saturate_cast.hpp	/^template <> __device__ __forceinline__ int saturate_cast<int>(uint v)$/;"	f	namespace:cv::cudev
saturate_cast	cudev/util/saturate_cast.hpp	/^template <> __device__ __forceinline__ schar saturate_cast<schar>(double v)$/;"	f	namespace:cv::cudev
saturate_cast	cudev/util/saturate_cast.hpp	/^template <> __device__ __forceinline__ schar saturate_cast<schar>(float v)$/;"	f	namespace:cv::cudev
saturate_cast	cudev/util/saturate_cast.hpp	/^template <> __device__ __forceinline__ schar saturate_cast<schar>(int v)$/;"	f	namespace:cv::cudev
saturate_cast	cudev/util/saturate_cast.hpp	/^template <> __device__ __forceinline__ schar saturate_cast<schar>(short v)$/;"	f	namespace:cv::cudev
saturate_cast	cudev/util/saturate_cast.hpp	/^template <> __device__ __forceinline__ schar saturate_cast<schar>(uchar v)$/;"	f	namespace:cv::cudev
saturate_cast	cudev/util/saturate_cast.hpp	/^template <> __device__ __forceinline__ schar saturate_cast<schar>(uint v)$/;"	f	namespace:cv::cudev
saturate_cast	cudev/util/saturate_cast.hpp	/^template <> __device__ __forceinline__ schar saturate_cast<schar>(ushort v)$/;"	f	namespace:cv::cudev
saturate_cast	cudev/util/saturate_cast.hpp	/^template <> __device__ __forceinline__ short saturate_cast<short>(double v)$/;"	f	namespace:cv::cudev
saturate_cast	cudev/util/saturate_cast.hpp	/^template <> __device__ __forceinline__ short saturate_cast<short>(float v)$/;"	f	namespace:cv::cudev
saturate_cast	cudev/util/saturate_cast.hpp	/^template <> __device__ __forceinline__ short saturate_cast<short>(int v)$/;"	f	namespace:cv::cudev
saturate_cast	cudev/util/saturate_cast.hpp	/^template <> __device__ __forceinline__ short saturate_cast<short>(uint v)$/;"	f	namespace:cv::cudev
saturate_cast	cudev/util/saturate_cast.hpp	/^template <> __device__ __forceinline__ short saturate_cast<short>(ushort v)$/;"	f	namespace:cv::cudev
saturate_cast	cudev/util/saturate_cast.hpp	/^template <> __device__ __forceinline__ uchar saturate_cast<uchar>(double v)$/;"	f	namespace:cv::cudev
saturate_cast	cudev/util/saturate_cast.hpp	/^template <> __device__ __forceinline__ uchar saturate_cast<uchar>(float v)$/;"	f	namespace:cv::cudev
saturate_cast	cudev/util/saturate_cast.hpp	/^template <> __device__ __forceinline__ uchar saturate_cast<uchar>(int v)$/;"	f	namespace:cv::cudev
saturate_cast	cudev/util/saturate_cast.hpp	/^template <> __device__ __forceinline__ uchar saturate_cast<uchar>(schar v)$/;"	f	namespace:cv::cudev
saturate_cast	cudev/util/saturate_cast.hpp	/^template <> __device__ __forceinline__ uchar saturate_cast<uchar>(short v)$/;"	f	namespace:cv::cudev
saturate_cast	cudev/util/saturate_cast.hpp	/^template <> __device__ __forceinline__ uchar saturate_cast<uchar>(uint v)$/;"	f	namespace:cv::cudev
saturate_cast	cudev/util/saturate_cast.hpp	/^template <> __device__ __forceinline__ uchar saturate_cast<uchar>(ushort v)$/;"	f	namespace:cv::cudev
saturate_cast	cudev/util/saturate_cast.hpp	/^template <> __device__ __forceinline__ uint saturate_cast<uint>(double v)$/;"	f	namespace:cv::cudev
saturate_cast	cudev/util/saturate_cast.hpp	/^template <> __device__ __forceinline__ uint saturate_cast<uint>(float v)$/;"	f	namespace:cv::cudev
saturate_cast	cudev/util/saturate_cast.hpp	/^template <> __device__ __forceinline__ uint saturate_cast<uint>(int v)$/;"	f	namespace:cv::cudev
saturate_cast	cudev/util/saturate_cast.hpp	/^template <> __device__ __forceinline__ uint saturate_cast<uint>(schar v)$/;"	f	namespace:cv::cudev
saturate_cast	cudev/util/saturate_cast.hpp	/^template <> __device__ __forceinline__ uint saturate_cast<uint>(short v)$/;"	f	namespace:cv::cudev
saturate_cast	cudev/util/saturate_cast.hpp	/^template <> __device__ __forceinline__ ushort saturate_cast<ushort>(double v)$/;"	f	namespace:cv::cudev
saturate_cast	cudev/util/saturate_cast.hpp	/^template <> __device__ __forceinline__ ushort saturate_cast<ushort>(float v)$/;"	f	namespace:cv::cudev
saturate_cast	cudev/util/saturate_cast.hpp	/^template <> __device__ __forceinline__ ushort saturate_cast<ushort>(int v)$/;"	f	namespace:cv::cudev
saturate_cast	cudev/util/saturate_cast.hpp	/^template <> __device__ __forceinline__ ushort saturate_cast<ushort>(schar v)$/;"	f	namespace:cv::cudev
saturate_cast	cudev/util/saturate_cast.hpp	/^template <> __device__ __forceinline__ ushort saturate_cast<ushort>(short v)$/;"	f	namespace:cv::cudev
saturate_cast	cudev/util/saturate_cast.hpp	/^template <> __device__ __forceinline__ ushort saturate_cast<ushort>(uint v)$/;"	f	namespace:cv::cudev
saturate_cast	cudev/util/saturate_cast.hpp	/^template <typename T> __device__ __forceinline__ T saturate_cast(double v) { return T(v); }$/;"	f	namespace:cv::cudev
saturate_cast	cudev/util/saturate_cast.hpp	/^template <typename T> __device__ __forceinline__ T saturate_cast(float v) { return T(v); }$/;"	f	namespace:cv::cudev
saturate_cast	cudev/util/saturate_cast.hpp	/^template <typename T> __device__ __forceinline__ T saturate_cast(int v) { return T(v); }$/;"	f	namespace:cv::cudev
saturate_cast	cudev/util/saturate_cast.hpp	/^template <typename T> __device__ __forceinline__ T saturate_cast(schar v) { return T(v); }$/;"	f	namespace:cv::cudev
saturate_cast	cudev/util/saturate_cast.hpp	/^template <typename T> __device__ __forceinline__ T saturate_cast(short v) { return T(v); }$/;"	f	namespace:cv::cudev
saturate_cast	cudev/util/saturate_cast.hpp	/^template <typename T> __device__ __forceinline__ T saturate_cast(uchar v) { return T(v); }$/;"	f	namespace:cv::cudev
saturate_cast	cudev/util/saturate_cast.hpp	/^template <typename T> __device__ __forceinline__ T saturate_cast(uint v) { return T(v); }$/;"	f	namespace:cv::cudev
saturate_cast	cudev/util/saturate_cast.hpp	/^template <typename T> __device__ __forceinline__ T saturate_cast(ushort v) { return T(v); }$/;"	f	namespace:cv::cudev
saturate_cast	cudev/util/vec_math.hpp	/^template<typename T> __device__ __forceinline__ T saturate_cast(const char1& v) { return vec_math_detail::SatCastHelper<VecTraits<T>::cn, T>::cast(v); }$/;"	f	namespace:cv::cudev
saturate_cast	cudev/util/vec_math.hpp	/^template<typename T> __device__ __forceinline__ T saturate_cast(const char2& v) { return vec_math_detail::SatCastHelper<VecTraits<T>::cn, T>::cast(v); }$/;"	f	namespace:cv::cudev
saturate_cast	cudev/util/vec_math.hpp	/^template<typename T> __device__ __forceinline__ T saturate_cast(const char3& v) { return vec_math_detail::SatCastHelper<VecTraits<T>::cn, T>::cast(v); }$/;"	f	namespace:cv::cudev
saturate_cast	cudev/util/vec_math.hpp	/^template<typename T> __device__ __forceinline__ T saturate_cast(const char4& v) { return vec_math_detail::SatCastHelper<VecTraits<T>::cn, T>::cast(v); }$/;"	f	namespace:cv::cudev
saturate_cast	cudev/util/vec_math.hpp	/^template<typename T> __device__ __forceinline__ T saturate_cast(const double1& v) { return vec_math_detail::SatCastHelper<VecTraits<T>::cn, T>::cast(v); }$/;"	f	namespace:cv::cudev
saturate_cast	cudev/util/vec_math.hpp	/^template<typename T> __device__ __forceinline__ T saturate_cast(const double2& v) { return vec_math_detail::SatCastHelper<VecTraits<T>::cn, T>::cast(v); }$/;"	f	namespace:cv::cudev
saturate_cast	cudev/util/vec_math.hpp	/^template<typename T> __device__ __forceinline__ T saturate_cast(const double3& v) { return vec_math_detail::SatCastHelper<VecTraits<T>::cn, T>::cast(v); }$/;"	f	namespace:cv::cudev
saturate_cast	cudev/util/vec_math.hpp	/^template<typename T> __device__ __forceinline__ T saturate_cast(const double4& v) { return vec_math_detail::SatCastHelper<VecTraits<T>::cn, T>::cast(v); }$/;"	f	namespace:cv::cudev
saturate_cast	cudev/util/vec_math.hpp	/^template<typename T> __device__ __forceinline__ T saturate_cast(const float1& v) { return vec_math_detail::SatCastHelper<VecTraits<T>::cn, T>::cast(v); }$/;"	f	namespace:cv::cudev
saturate_cast	cudev/util/vec_math.hpp	/^template<typename T> __device__ __forceinline__ T saturate_cast(const float2& v) { return vec_math_detail::SatCastHelper<VecTraits<T>::cn, T>::cast(v); }$/;"	f	namespace:cv::cudev
saturate_cast	cudev/util/vec_math.hpp	/^template<typename T> __device__ __forceinline__ T saturate_cast(const float3& v) { return vec_math_detail::SatCastHelper<VecTraits<T>::cn, T>::cast(v); }$/;"	f	namespace:cv::cudev
saturate_cast	cudev/util/vec_math.hpp	/^template<typename T> __device__ __forceinline__ T saturate_cast(const float4& v) { return vec_math_detail::SatCastHelper<VecTraits<T>::cn, T>::cast(v); }$/;"	f	namespace:cv::cudev
saturate_cast	cudev/util/vec_math.hpp	/^template<typename T> __device__ __forceinline__ T saturate_cast(const int1& v) { return vec_math_detail::SatCastHelper<VecTraits<T>::cn, T>::cast(v); }$/;"	f	namespace:cv::cudev
saturate_cast	cudev/util/vec_math.hpp	/^template<typename T> __device__ __forceinline__ T saturate_cast(const int2& v) { return vec_math_detail::SatCastHelper<VecTraits<T>::cn, T>::cast(v); }$/;"	f	namespace:cv::cudev
saturate_cast	cudev/util/vec_math.hpp	/^template<typename T> __device__ __forceinline__ T saturate_cast(const int3& v) { return vec_math_detail::SatCastHelper<VecTraits<T>::cn, T>::cast(v); }$/;"	f	namespace:cv::cudev
saturate_cast	cudev/util/vec_math.hpp	/^template<typename T> __device__ __forceinline__ T saturate_cast(const int4& v) { return vec_math_detail::SatCastHelper<VecTraits<T>::cn, T>::cast(v); }$/;"	f	namespace:cv::cudev
saturate_cast	cudev/util/vec_math.hpp	/^template<typename T> __device__ __forceinline__ T saturate_cast(const short1& v) { return vec_math_detail::SatCastHelper<VecTraits<T>::cn, T>::cast(v); }$/;"	f	namespace:cv::cudev
saturate_cast	cudev/util/vec_math.hpp	/^template<typename T> __device__ __forceinline__ T saturate_cast(const short2& v) { return vec_math_detail::SatCastHelper<VecTraits<T>::cn, T>::cast(v); }$/;"	f	namespace:cv::cudev
saturate_cast	cudev/util/vec_math.hpp	/^template<typename T> __device__ __forceinline__ T saturate_cast(const short3& v) { return vec_math_detail::SatCastHelper<VecTraits<T>::cn, T>::cast(v); }$/;"	f	namespace:cv::cudev
saturate_cast	cudev/util/vec_math.hpp	/^template<typename T> __device__ __forceinline__ T saturate_cast(const short4& v) { return vec_math_detail::SatCastHelper<VecTraits<T>::cn, T>::cast(v); }$/;"	f	namespace:cv::cudev
saturate_cast	cudev/util/vec_math.hpp	/^template<typename T> __device__ __forceinline__ T saturate_cast(const uchar1& v) { return vec_math_detail::SatCastHelper<VecTraits<T>::cn, T>::cast(v); }$/;"	f	namespace:cv::cudev
saturate_cast	cudev/util/vec_math.hpp	/^template<typename T> __device__ __forceinline__ T saturate_cast(const uchar2& v) { return vec_math_detail::SatCastHelper<VecTraits<T>::cn, T>::cast(v); }$/;"	f	namespace:cv::cudev
saturate_cast	cudev/util/vec_math.hpp	/^template<typename T> __device__ __forceinline__ T saturate_cast(const uchar3& v) { return vec_math_detail::SatCastHelper<VecTraits<T>::cn, T>::cast(v); }$/;"	f	namespace:cv::cudev
saturate_cast	cudev/util/vec_math.hpp	/^template<typename T> __device__ __forceinline__ T saturate_cast(const uchar4& v) { return vec_math_detail::SatCastHelper<VecTraits<T>::cn, T>::cast(v); }$/;"	f	namespace:cv::cudev
saturate_cast	cudev/util/vec_math.hpp	/^template<typename T> __device__ __forceinline__ T saturate_cast(const uint1& v) { return vec_math_detail::SatCastHelper<VecTraits<T>::cn, T>::cast(v); }$/;"	f	namespace:cv::cudev
saturate_cast	cudev/util/vec_math.hpp	/^template<typename T> __device__ __forceinline__ T saturate_cast(const uint2& v) { return vec_math_detail::SatCastHelper<VecTraits<T>::cn, T>::cast(v); }$/;"	f	namespace:cv::cudev
saturate_cast	cudev/util/vec_math.hpp	/^template<typename T> __device__ __forceinline__ T saturate_cast(const uint3& v) { return vec_math_detail::SatCastHelper<VecTraits<T>::cn, T>::cast(v); }$/;"	f	namespace:cv::cudev
saturate_cast	cudev/util/vec_math.hpp	/^template<typename T> __device__ __forceinline__ T saturate_cast(const uint4& v) { return vec_math_detail::SatCastHelper<VecTraits<T>::cn, T>::cast(v); }$/;"	f	namespace:cv::cudev
saturate_cast	cudev/util/vec_math.hpp	/^template<typename T> __device__ __forceinline__ T saturate_cast(const ushort1& v) { return vec_math_detail::SatCastHelper<VecTraits<T>::cn, T>::cast(v); }$/;"	f	namespace:cv::cudev
saturate_cast	cudev/util/vec_math.hpp	/^template<typename T> __device__ __forceinline__ T saturate_cast(const ushort2& v) { return vec_math_detail::SatCastHelper<VecTraits<T>::cn, T>::cast(v); }$/;"	f	namespace:cv::cudev
saturate_cast	cudev/util/vec_math.hpp	/^template<typename T> __device__ __forceinline__ T saturate_cast(const ushort3& v) { return vec_math_detail::SatCastHelper<VecTraits<T>::cn, T>::cast(v); }$/;"	f	namespace:cv::cudev
saturate_cast	cudev/util/vec_math.hpp	/^template<typename T> __device__ __forceinline__ T saturate_cast(const ushort4& v) { return vec_math_detail::SatCastHelper<VecTraits<T>::cn, T>::cast(v); }$/;"	f	namespace:cv::cudev
saturate_cast	hal/defs.h	/^template<> inline int saturate_cast<int>(double v)           { return cvRound(v); }$/;"	f	namespace:cv
saturate_cast	hal/defs.h	/^template<> inline int saturate_cast<int>(float v)            { return cvRound(v); }$/;"	f	namespace:cv
saturate_cast	hal/defs.h	/^template<> inline schar saturate_cast<schar>(double v)       { int iv = cvRound(v); return saturate_cast<schar>(iv); }$/;"	f	namespace:cv
saturate_cast	hal/defs.h	/^template<> inline schar saturate_cast<schar>(float v)        { int iv = cvRound(v); return saturate_cast<schar>(iv); }$/;"	f	namespace:cv
saturate_cast	hal/defs.h	/^template<> inline schar saturate_cast<schar>(int v)          { return (schar)((unsigned)(v-SCHAR_MIN) <= (unsigned)UCHAR_MAX ? v : v > 0 ? SCHAR_MAX : SCHAR_MIN); }$/;"	f	namespace:cv
saturate_cast	hal/defs.h	/^template<> inline schar saturate_cast<schar>(int64 v)        { return (schar)((uint64)((int64)v-SCHAR_MIN) <= (uint64)UCHAR_MAX ? v : v > 0 ? SCHAR_MAX : SCHAR_MIN); }$/;"	f	namespace:cv
saturate_cast	hal/defs.h	/^template<> inline schar saturate_cast<schar>(short v)        { return saturate_cast<schar>((int)v); }$/;"	f	namespace:cv
saturate_cast	hal/defs.h	/^template<> inline schar saturate_cast<schar>(uchar v)        { return (schar)std::min((int)v, SCHAR_MAX); }$/;"	f	namespace:cv
saturate_cast	hal/defs.h	/^template<> inline schar saturate_cast<schar>(uint64 v)       { return (schar)std::min(v, (uint64)SCHAR_MAX); }$/;"	f	namespace:cv
saturate_cast	hal/defs.h	/^template<> inline schar saturate_cast<schar>(unsigned v)     { return (schar)std::min(v, (unsigned)SCHAR_MAX); }$/;"	f	namespace:cv
saturate_cast	hal/defs.h	/^template<> inline schar saturate_cast<schar>(ushort v)       { return (schar)std::min((unsigned)v, (unsigned)SCHAR_MAX); }$/;"	f	namespace:cv
saturate_cast	hal/defs.h	/^template<> inline short saturate_cast<short>(double v)       { int iv = cvRound(v); return saturate_cast<short>(iv); }$/;"	f	namespace:cv
saturate_cast	hal/defs.h	/^template<> inline short saturate_cast<short>(float v)        { int iv = cvRound(v); return saturate_cast<short>(iv); }$/;"	f	namespace:cv
saturate_cast	hal/defs.h	/^template<> inline short saturate_cast<short>(int v)          { return (short)((unsigned)(v - SHRT_MIN) <= (unsigned)USHRT_MAX ? v : v > 0 ? SHRT_MAX : SHRT_MIN); }$/;"	f	namespace:cv
saturate_cast	hal/defs.h	/^template<> inline short saturate_cast<short>(int64 v)        { return (short)((uint64)((int64)v - SHRT_MIN) <= (uint64)USHRT_MAX ? v : v > 0 ? SHRT_MAX : SHRT_MIN); }$/;"	f	namespace:cv
saturate_cast	hal/defs.h	/^template<> inline short saturate_cast<short>(uint64 v)       { return (short)std::min(v, (uint64)SHRT_MAX); }$/;"	f	namespace:cv
saturate_cast	hal/defs.h	/^template<> inline short saturate_cast<short>(unsigned v)     { return (short)std::min(v, (unsigned)SHRT_MAX); }$/;"	f	namespace:cv
saturate_cast	hal/defs.h	/^template<> inline short saturate_cast<short>(ushort v)       { return (short)std::min((int)v, SHRT_MAX); }$/;"	f	namespace:cv
saturate_cast	hal/defs.h	/^template<> inline uchar saturate_cast<uchar>(double v)       { int iv = cvRound(v); return saturate_cast<uchar>(iv); }$/;"	f	namespace:cv
saturate_cast	hal/defs.h	/^template<> inline uchar saturate_cast<uchar>(float v)        { int iv = cvRound(v); return saturate_cast<uchar>(iv); }$/;"	f	namespace:cv
saturate_cast	hal/defs.h	/^template<> inline uchar saturate_cast<uchar>(int v)          { return (uchar)((unsigned)v <= UCHAR_MAX ? v : v > 0 ? UCHAR_MAX : 0); }$/;"	f	namespace:cv
saturate_cast	hal/defs.h	/^template<> inline uchar saturate_cast<uchar>(int64 v)        { return (uchar)((uint64)v <= (uint64)UCHAR_MAX ? v : v > 0 ? UCHAR_MAX : 0); }$/;"	f	namespace:cv
saturate_cast	hal/defs.h	/^template<> inline uchar saturate_cast<uchar>(schar v)        { return (uchar)std::max((int)v, 0); }$/;"	f	namespace:cv
saturate_cast	hal/defs.h	/^template<> inline uchar saturate_cast<uchar>(short v)        { return saturate_cast<uchar>((int)v); }$/;"	f	namespace:cv
saturate_cast	hal/defs.h	/^template<> inline uchar saturate_cast<uchar>(uint64 v)       { return (uchar)std::min(v, (uint64)UCHAR_MAX); }$/;"	f	namespace:cv
saturate_cast	hal/defs.h	/^template<> inline uchar saturate_cast<uchar>(unsigned v)     { return (uchar)std::min(v, (unsigned)UCHAR_MAX); }$/;"	f	namespace:cv
saturate_cast	hal/defs.h	/^template<> inline uchar saturate_cast<uchar>(ushort v)       { return (uchar)std::min((unsigned)v, (unsigned)UCHAR_MAX); }$/;"	f	namespace:cv
saturate_cast	hal/defs.h	/^template<> inline unsigned saturate_cast<unsigned>(double v) { return cvRound(v); }$/;"	f	namespace:cv
saturate_cast	hal/defs.h	/^template<> inline unsigned saturate_cast<unsigned>(float v)  { return cvRound(v); }$/;"	f	namespace:cv
saturate_cast	hal/defs.h	/^template<> inline ushort saturate_cast<ushort>(double v)     { int iv = cvRound(v); return saturate_cast<ushort>(iv); }$/;"	f	namespace:cv
saturate_cast	hal/defs.h	/^template<> inline ushort saturate_cast<ushort>(float v)      { int iv = cvRound(v); return saturate_cast<ushort>(iv); }$/;"	f	namespace:cv
saturate_cast	hal/defs.h	/^template<> inline ushort saturate_cast<ushort>(int v)        { return (ushort)((unsigned)v <= (unsigned)USHRT_MAX ? v : v > 0 ? USHRT_MAX : 0); }$/;"	f	namespace:cv
saturate_cast	hal/defs.h	/^template<> inline ushort saturate_cast<ushort>(int64 v)      { return (ushort)((uint64)v <= (uint64)USHRT_MAX ? v : v > 0 ? USHRT_MAX : 0); }$/;"	f	namespace:cv
saturate_cast	hal/defs.h	/^template<> inline ushort saturate_cast<ushort>(schar v)      { return (ushort)std::max((int)v, 0); }$/;"	f	namespace:cv
saturate_cast	hal/defs.h	/^template<> inline ushort saturate_cast<ushort>(short v)      { return (ushort)std::max((int)v, 0); }$/;"	f	namespace:cv
saturate_cast	hal/defs.h	/^template<> inline ushort saturate_cast<ushort>(uint64 v)     { return (ushort)std::min(v, (uint64)USHRT_MAX); }$/;"	f	namespace:cv
saturate_cast	hal/defs.h	/^template<> inline ushort saturate_cast<ushort>(unsigned v)   { return (ushort)std::min(v, (unsigned)USHRT_MAX); }$/;"	f	namespace:cv
saturate_cast	hal/defs.h	/^template<typename _Tp> static inline _Tp saturate_cast(double v)   { return _Tp(v); }$/;"	f	namespace:cv
saturate_cast	hal/defs.h	/^template<typename _Tp> static inline _Tp saturate_cast(float v)    { return _Tp(v); }$/;"	f	namespace:cv
saturate_cast	hal/defs.h	/^template<typename _Tp> static inline _Tp saturate_cast(int v)      { return _Tp(v); }$/;"	f	namespace:cv
saturate_cast	hal/defs.h	/^template<typename _Tp> static inline _Tp saturate_cast(int64 v)    { return _Tp(v); }$/;"	f	namespace:cv
saturate_cast	hal/defs.h	/^template<typename _Tp> static inline _Tp saturate_cast(schar v)    { return _Tp(v); }$/;"	f	namespace:cv
saturate_cast	hal/defs.h	/^template<typename _Tp> static inline _Tp saturate_cast(short v)    { return _Tp(v); }$/;"	f	namespace:cv
saturate_cast	hal/defs.h	/^template<typename _Tp> static inline _Tp saturate_cast(uchar v)    { return _Tp(v); }$/;"	f	namespace:cv
saturate_cast	hal/defs.h	/^template<typename _Tp> static inline _Tp saturate_cast(uint64 v)   { return _Tp(v); }$/;"	f	namespace:cv
saturate_cast	hal/defs.h	/^template<typename _Tp> static inline _Tp saturate_cast(unsigned v) { return _Tp(v); }$/;"	f	namespace:cv
saturate_cast	hal/defs.h	/^template<typename _Tp> static inline _Tp saturate_cast(ushort v)   { return _Tp(v); }$/;"	f	namespace:cv
saturate_cast_func	core/cuda/functional.hpp	/^        __host__ __device__ __forceinline__ saturate_cast_func() {}$/;"	f	struct:cv::cuda::device::saturate_cast_func
saturate_cast_func	core/cuda/functional.hpp	/^        __host__ __device__ __forceinline__ saturate_cast_func(const saturate_cast_func&) {}$/;"	f	struct:cv::cuda::device::saturate_cast_func
saturate_cast_func	core/cuda/functional.hpp	/^    template <typename T, typename D> struct saturate_cast_func : unary_function<T, D>$/;"	s	namespace:cv::cuda::device
saturate_cast_func	cudev/functional/functional.hpp	/^template <typename T, typename D> struct saturate_cast_func : unary_function<T, D>$/;"	s	namespace:cv::cudev
saturate_cast_helper	core/cuda/vec_math.hpp	/^    template <typename VecD, typename VecS> static __device__ __forceinline__ VecD saturate_cast_helper(const VecS& v)$/;"	f	namespace:cv::cuda::device::vec_math_detail
save	flann.hpp	/^        void save(String filename) { nnIndex->save(filename); }$/;"	f	class:cv::flann::GenericIndex
save	flann.hpp	/^    void save(String filename)$/;"	f	class:cv::flann::Index_
save	flann/flann_base.hpp	/^    void save(cv::String filename)$/;"	f	class:cvflann::Index
saveIndex	flann/autotuned_index.h	/^    virtual void saveIndex(FILE* stream)$/;"	f	class:cvflann::AutotunedIndex
saveIndex	flann/composite_index.h	/^    void saveIndex(FILE* stream)$/;"	f	class:cvflann::CompositeIndex
saveIndex	flann/flann_base.hpp	/^    virtual void saveIndex(FILE* stream)$/;"	f	class:cvflann::Index
saveIndex	flann/hierarchical_clustering_index.h	/^    void saveIndex(FILE* stream)$/;"	f	class:cvflann::HierarchicalClusteringIndex
saveIndex	flann/kdtree_index.h	/^    void saveIndex(FILE* stream)$/;"	f	class:cvflann::KDTreeIndex
saveIndex	flann/kdtree_single_index.h	/^    void saveIndex(FILE* stream)$/;"	f	class:cvflann::KDTreeSingleIndex
saveIndex	flann/kmeans_index.h	/^    void saveIndex(FILE* stream)$/;"	f	class:cvflann::KMeansIndex
saveIndex	flann/linear_index.h	/^    void saveIndex(FILE*)$/;"	f	class:cvflann::LinearIndex
saveIndex	flann/lsh_index.h	/^    void saveIndex(FILE* stream)$/;"	f	class:cvflann::LshIndex
save_header	flann/saving.h	/^void save_header(FILE* stream, const NNIndex<Distance>& index)$/;"	f	namespace:cvflann
save_to_file	flann/hdf5.h	/^void save_to_file(const cvflann::Matrix<T>& dataset, const String& filename, const String& name)$/;"	f	namespace:cvflann
save_tree	flann/hierarchical_clustering_index.h	/^    void save_tree(FILE* stream, NodePtr node, int num)$/;"	f	class:cvflann::HierarchicalClusteringIndex
save_tree	flann/kdtree_index.h	/^    void save_tree(FILE* stream, NodePtr tree)$/;"	f	class:cvflann::KDTreeIndex
save_tree	flann/kdtree_single_index.h	/^    void save_tree(FILE* stream, NodePtr tree)$/;"	f	class:cvflann::KDTreeSingleIndex
save_tree	flann/kmeans_index.h	/^    void save_tree(FILE* stream, KMeansNodePtr node)$/;"	f	class:cvflann::KMeansIndex
save_value	flann/saving.h	/^void save_value(FILE* stream, const T& value, size_t count = 1)$/;"	f	namespace:cvflann
save_value	flann/saving.h	/^void save_value(FILE* stream, const cvflann::Matrix<T>& value)$/;"	f	namespace:cvflann
save_value	flann/saving.h	/^void save_value(FILE* stream, const std::vector<T>& value)$/;"	f	namespace:cvflann
scale	core/cuda/filters.hpp	/^        float scale_x, scale_y ,scale;$/;"	m	struct:cv::cuda::device::IntegerAreaFilter
scale	objdetect.hpp	/^   double scale;$/;"	m	struct:cv::DetectionROI
scale	objdetect/objdetect_c.h	/^    double scale;$/;"	m	struct:CvHaarClassifierCascade
scale	stitching/detail/warpers.hpp	/^    float scale;$/;"	m	struct:cv::detail::ProjectorBase
scaleAdd	cudaarithm.hpp	/^static inline void scaleAdd(InputArray src1, double alpha, InputArray src2, OutputArray dst, Stream& stream = Stream::Null())$/;"	f	namespace:cv::cuda
scaleFactor	objdetect/detection_based_tracker.hpp	/^                float scaleFactor;$/;"	m	class:cv::DetectionBasedTracker::IDetector
scale_factor	cudalegacy/NCVBroxOpticalFlow.hpp	/^    Ncv32f scale_factor;$/;"	m	struct:NCVBroxOpticalFlowDescriptor
scale_x	core/cuda/filters.hpp	/^        float scale_x, scale_y ,scale;$/;"	m	struct:cv::cuda::device::IntegerAreaFilter
scale_x	core/cuda/filters.hpp	/^        float scale_x, scale_y;$/;"	m	struct:cv::cuda::device::AreaFilter
scale_y	core/cuda/filters.hpp	/^        float scale_x, scale_y ,scale;$/;"	m	struct:cv::cuda::device::IntegerAreaFilter
scale_y	core/cuda/filters.hpp	/^        float scale_x, scale_y;$/;"	m	struct:cv::cuda::device::AreaFilter
scanner	core/core_c.h	/^CVAPI(int)  cvNextGraphItem( CvGraphScanner* scanner );$/;"	v
scanner	core/core_c.h	/^CVAPI(void) cvReleaseGraphScanner( CvGraphScanner** scanner );$/;"	v
scanner	imgproc/imgproc_c.h	/^CVAPI(CvSeq*)  cvEndFindContours( CvContourScanner* scanner );$/;"	v
scanner	imgproc/imgproc_c.h	/^CVAPI(CvSeq*)  cvFindNextContour( CvContourScanner scanner );$/;"	v
schar	hal/defs.h	/^typedef signed char schar;$/;"	t
scharrXPtr	cudev/ptr2d/deriv.hpp	/^__host__ ScharrXPtrSz<typename PtrTraits<SrcPtr>::ptr_type> scharrXPtr(const SrcPtr& src)$/;"	f	namespace:cv::cudev
scharrX_	cudev/expr/deriv.hpp	/^scharrX_(const SrcPtr& src)$/;"	f	namespace:cv::cudev
scharrYPtr	cudev/ptr2d/deriv.hpp	/^__host__ ScharrYPtrSz<typename PtrTraits<SrcPtr>::ptr_type> scharrYPtr(const SrcPtr& src)$/;"	f	namespace:cv::cudev
scharrY_	cudev/expr/deriv.hpp	/^scharrY_(const SrcPtr& src)$/;"	f	namespace:cv::cudev
scn	ts/cuda_perf.hpp	/^        int scn;$/;"	m	struct:perf::CvtColorInfo
seamEstimationResol	stitching.hpp	/^    CV_WRAP double seamEstimationResol() const { return seam_est_resol_; }$/;"	f	class:cv::Stitcher
seamFinder	stitching.hpp	/^    Ptr<detail::SeamFinder> seamFinder() { return seam_finder_; }$/;"	f	class:cv::Stitcher
seamFinder	stitching.hpp	/^    const Ptr<detail::SeamFinder> seamFinder() const { return seam_finder_; }$/;"	f	class:cv::Stitcher
seam_est_imgs_	stitching.hpp	/^    std::vector<cv::UMat> seam_est_imgs_;$/;"	m	class:cv::Stitcher
seam_est_resol_	stitching.hpp	/^    double seam_est_resol_;$/;"	m	class:cv::Stitcher
seam_finder_	stitching.hpp	/^    Ptr<detail::SeamFinder> seam_finder_;$/;"	m	class:cv::Stitcher
seam_scale_	stitching.hpp	/^    double seam_scale_;$/;"	m	class:cv::Stitcher
seam_work_aspect_	stitching.hpp	/^    double seam_work_aspect_;$/;"	m	class:cv::Stitcher
searchLevel	flann/kdtree_index.h	/^    void searchLevel(ResultSet<DistanceType>& result_set, const ElementType* vec, NodePtr node, DistanceType mindist, int& checkCount, int maxCheck,$/;"	f	class:cvflann::KDTreeIndex
searchLevel	flann/kdtree_single_index.h	/^    void searchLevel(ResultSet<DistanceType>& result_set, const ElementType* vec, const NodePtr node, DistanceType mindistsq,$/;"	f	class:cvflann::KDTreeSingleIndex
searchLevelExact	flann/kdtree_index.h	/^    void searchLevelExact(ResultSet<DistanceType>& result_set, const ElementType* vec, const NodePtr node, DistanceType mindist, const float epsError)$/;"	f	class:cvflann::KDTreeIndex
searchParams	features2d.hpp	/^    Ptr<flann::SearchParams> searchParams;$/;"	m	class:cv::FlannBasedMatcher
searchTimeCost	flann/autotuned_index.h	/^        float searchTimeCost;$/;"	m	struct:cvflann::AutotunedIndex::CostData
search_modules	core/types_c.h	/^    int search_modules;$/;"	m	struct:CvPluginFuncInfo
search_with_ground_truth	flann/index_testing.h	/^float search_with_ground_truth(NNIndex<Distance>& index, const Matrix<typename Distance::ElementType>& inputData,$/;"	f	namespace:cvflann
second_argument_type	cudev/functional/functional.hpp	/^    typedef _Arg2   second_argument_type;$/;"	t	struct:cv::cudev::binary_function
seed_random	flann/random.h	/^inline void seed_random(unsigned int seed)$/;"	f	namespace:cvflann
seek	core/core_c.h	/^template<typename _Tp> inline void SeqIterator<_Tp>::seek(size_t pos)$/;"	f	class:cv::SeqIterator
seekEnd	core/mat.inl.hpp	/^void SparseMatConstIterator::seekEnd()$/;"	f	class:cv::SparseMatConstIterator
selectDivision	flann/kdtree_index.h	/^    int selectDivision(DistanceType* v)$/;"	f	class:cvflann::KDTreeIndex
sensitivity	videostab/deblurring.hpp	/^    float sensitivity() const { return sensitivity_; }$/;"	f	class:cv::videostab::WeightingDeblurer
sensitivity_	videostab/deblurring.hpp	/^    float sensitivity_;$/;"	m	class:cv::videostab::WeightingDeblurer
separateDetectionWork	objdetect/detection_based_tracker.hpp	/^        cv::Ptr<SeparateDetectionWork> separateDetectionWork;$/;"	m	class:cv::DetectionBasedTracker
seq	core/core_c.h	/^    CvSeq* seq;$/;"	m	class:cv::Seq
seq	core/core_c.h	/^CVAPI(void)  cvClearSeq( CvSeq* seq );$/;"	v
seq	core/core_c.h	/^CVAPI(void) cvSeqInvert( CvSeq* seq );$/;"	v
seq	core/persistence.hpp	/^      void*        seq;        \/* sequence, beign read; CvSeq      *\/$/;"	m	struct:cv::FileNodeIterator::SeqReader
seq	core/types_c.h	/^        CvSeq* seq; \/**< sequence (ordered collection of file nodes) *\/$/;"	m	union:CvFileNode::__anon149
set	core/ocl.hpp	/^    template<typename _Tp> int set(int i, const _Tp& value)$/;"	f	class:cv::ocl::Kernel
set	flann/dynamic_bitset.h	/^    void set(size_t index)$/;"	f	class:cvflann::DynamicBitset
set	ts/ts_gtest.h	/^  void set(const T& value) { *pointer() = value; }$/;"	f	class:std::tr1::ThreadLocal
set	ts/ts_gtest.h	/^  void set(const T& value) { value_ = value; }$/;"	f	class:std::tr1::ThreadLocal
set	videostab/global_motion.hpp	/^    void set(int row, int col, double coef)$/;"	f	class:cv::videostab::MotionEstimatorL1
set	videostab/motion_stabilizing.hpp	/^    void set(int row, int col, double coef)$/;"	f	class:cv::videostab::LpMotionStabilizer
setAlpha	core/cuda/detail/color_detail.hpp	/^        template <typename T> static __device__ __forceinline__ void setAlpha(typename TypeVec<T, 3>::vec_type& vec, T val)$/;"	f	namespace:cv::cuda::device::color_detail
setAlpha	core/cuda/detail/color_detail.hpp	/^        template <typename T> static __device__ __forceinline__ void setAlpha(typename TypeVec<T, 4>::vec_type& vec, T val)$/;"	f	namespace:cv::cuda::device::color_detail
setAlpha	cudev/functional/detail/color_cvt.hpp	/^    template <typename T> __device__ __forceinline__ void setAlpha(typename MakeVec<T, 3>::type& vec, T val)$/;"	f	namespace:cv::cudev::color_cvt_detail
setAlpha	cudev/functional/detail/color_cvt.hpp	/^    template <typename T> __device__ __forceinline__ void setAlpha(typename MakeVec<T, 4>::type& vec, T val)$/;"	f	namespace:cv::cudev::color_cvt_detail
setBlender	stitching.hpp	/^    void setBlender(Ptr<detail::Blender> b) { blender_ = b; }$/;"	f	class:cv::Stitcher
setBlurrinessRates	videostab/deblurring.hpp	/^    virtual void setBlurrinessRates(const std::vector<float> &val) { blurrinessRates_ = &val; }$/;"	f	class:cv::videostab::DeblurerBase
setBorderMode	videostab/inpainting.hpp	/^    void setBorderMode(int val) { borderMode_ = val; }$/;"	f	class:cv::videostab::MotionInpainter
setBorderMode	videostab/stabilizer.hpp	/^    void setBorderMode(int val) { borderMode_ = val; }$/;"	f	class:cv::videostab::StabilizerBase
setBundleAdjuster	stitching.hpp	/^    void setBundleAdjuster(Ptr<detail::BundleAdjusterBase> bundle_adjuster)$/;"	f	class:cv::Stitcher
setCellSize	videostab/outlier_rejection.hpp	/^    void setCellSize(Size val) { cellSize_ = val; }$/;"	f	class:cv::videostab::TranslationBasedLocalOutlierRejector
setClip	viz/types.hpp	/^            void setClip(const Vec2d &clip) { clip_ = clip; }$/;"	f	class:cv::viz::Camera
setCompositingResol	stitching.hpp	/^    CV_WRAP void setCompositingResol(double resol_mpx) { compose_resol_ = resol_mpx; }$/;"	f	class:cv::Stitcher
setConfThresh	stitching/detail/motion_estimators.hpp	/^    void setConfThresh(double conf_thresh) { conf_thresh_ = conf_thresh; }$/;"	f	class:cv::detail::BundleAdjusterBase
setCorrectionForInclusion	videostab/stabilizer.hpp	/^    void setCorrectionForInclusion(bool val) { doCorrectionForInclusion_ = val; }$/;"	f	class:cv::videostab::StabilizerBase
setCostFunction	stitching/detail/seam_finders.hpp	/^    void setCostFunction(CostFunction val) { costFunc_ = val; }$/;"	f	class:cv::detail::DpSeamFinder
setDeblurer	videostab/stabilizer.hpp	/^    void setDeblurer(Ptr<DeblurerBase> val) { deblurer_ = val; }$/;"	f	class:cv::videostab::StabilizerBase
setDestination	flann/logger.h	/^    static void setDestination(const char* name) { instance()._setDestination(name); }$/;"	f	class:cvflann::Logger
setDetector	videostab/global_motion.hpp	/^    void setDetector(Ptr<FeatureDetector> val) { detector_ = val; }$/;"	f	class:cv::videostab::KeypointBasedMotionEstimator
setDistThreshold	videostab/inpainting.hpp	/^    void setDistThreshold(float val) { distThresh_ = val; }$/;"	f	class:cv::videostab::MotionInpainter
setEstimateTrimRatio	videostab/stabilizer.hpp	/^    void setEstimateTrimRatio(bool val) { mustEstTrimRatio_ = val; }$/;"	f	class:cv::videostab::TwoPassStabilizer
setExposureCompensator	stitching.hpp	/^    void setExposureCompensator(Ptr<detail::ExposureCompensator> exposure_comp)$/;"	f	class:cv::Stitcher
setFeatureDesc	cudalegacy/NCVHaarObjectDetection.hpp	/^    __host__ NCVStatus setFeatureDesc(HaarFeatureDescriptor32 f)$/;"	f	struct:HaarClassifierNode128
setFeaturesFinder	stitching.hpp	/^    void setFeaturesFinder(Ptr<detail::FeaturesFinder> features_finder)$/;"	f	class:cv::Stitcher
setFeaturesMatcher	stitching.hpp	/^    void setFeaturesMatcher(Ptr<detail::FeaturesMatcher> features_matcher)$/;"	f	class:cv::Stitcher
setFlowErrorThreshold	videostab/inpainting.hpp	/^    void setFlowErrorThreshold(float val) { flowErrorThreshold_ = val; }$/;"	f	class:cv::videostab::MotionInpainter
setFov	viz/types.hpp	/^            void setFov(const Vec2d& fov) { fov_ = fov; }$/;"	f	class:cv::viz::Camera
setFrameCount	videostab/wobble_suppression.hpp	/^    virtual void setFrameCount(int val) { frameCount_ = val; }$/;"	f	class:cv::videostab::WobbleSuppressorBase
setFrameSize	videostab/motion_stabilizing.hpp	/^    void setFrameSize(Size val) { frameSize_ = val; }$/;"	f	class:cv::videostab::LpMotionStabilizer
setFrameSource	videostab/stabilizer.hpp	/^    void setFrameSource(Ptr<IFrameSource> val) { frameSource_ = val; }$/;"	f	class:cv::videostab::StabilizerBase
setFrames	videostab/deblurring.hpp	/^    virtual void setFrames(const std::vector<Mat> &val) { frames_ = &val; }$/;"	f	class:cv::videostab::DeblurerBase
setFrames	videostab/inpainting.hpp	/^    virtual void setFrames(const std::vector<Mat> &val) { frames_ = &val; }$/;"	f	class:cv::videostab::InpainterBase
setInpainter	videostab/stabilizer.hpp	/^    void setInpainter(Ptr<InpainterBase> val) { inpainter_ = val; }$/;"	f	class:cv::videostab::StabilizerBase
setIppErrorStatus	core/private.hpp	200;"	d
setLeftNodeDesc	cudalegacy/NCVHaarObjectDetection.hpp	/^    __host__ NCVStatus setLeftNodeDesc(HaarClassifierNodeDescriptor32 nl)$/;"	f	struct:HaarClassifierNode128
setLevel	flann/logger.h	/^    static void setLevel(int level) { instance().logLevel = level; }$/;"	f	class:cvflann::Logger
setLog	videostab/stabilizer.hpp	/^    void setLog(Ptr<ILog> ilog) { log_ = ilog; }$/;"	f	class:cv::videostab::StabilizerBase
setMask	core/cuda/utility.hpp	/^        __device__ __forceinline__ void setMask(int z)$/;"	f	struct:cv::cuda::device::MaskCollection
setMask	core/cuda/utility.hpp	/^        __device__ __forceinline__ void setMask(int) const$/;"	f	struct:cv::cuda::device::WithOutMask
setMatchingMask	stitching.hpp	/^    void setMatchingMask(const cv::UMat &mask)$/;"	f	class:cv::Stitcher
setMaxLevel	videostab/optical_flow.hpp	/^    virtual void setMaxLevel(int val) { maxLevel_ = val; }$/;"	f	class:cv::videostab::PyrLkOptFlowEstimatorBase
setMaxObjectSize	objdetect/detection_based_tracker.hpp	/^                void setMaxObjectSize(const cv::Size& max)$/;"	f	class:cv::DetectionBasedTracker::IDetector
setMinInlierRatio	videostab/global_motion.hpp	/^    void setMinInlierRatio(float val) { minInlierRatio_ = val; }$/;"	f	class:cv::videostab::MotionEstimatorRansacL2
setMinNeighbours	objdetect/detection_based_tracker.hpp	/^                void setMinNeighbours(int value)$/;"	f	class:cv::DetectionBasedTracker::IDetector
setMinObjectSize	objdetect/detection_based_tracker.hpp	/^                void setMinObjectSize(const cv::Size& min)$/;"	f	class:cv::DetectionBasedTracker::IDetector
setMotionEstimator	videostab/stabilizer.hpp	/^    void setMotionEstimator(Ptr<ImageMotionEstimatorBase> val) { motionEstimator_ = val; }$/;"	f	class:cv::videostab::StabilizerBase
setMotionEstimator	videostab/wobble_suppression.hpp	/^    void setMotionEstimator(Ptr<ImageMotionEstimatorBase> val) { motionEstimator_ = val; }$/;"	f	class:cv::videostab::WobbleSuppressorBase
setMotionFilter	videostab/stabilizer.hpp	/^    void setMotionFilter(Ptr<MotionFilterBase> val) { motionFilter_ = val; }$/;"	f	class:cv::videostab::OnePassStabilizer
setMotionModel	videostab/global_motion.hpp	/^    virtual void setMotionModel(MotionModel val) { motionEstimator_->setMotionModel(val); }$/;"	f	class:cv::videostab::KeypointBasedMotionEstimator
setMotionModel	videostab/global_motion.hpp	/^    virtual void setMotionModel(MotionModel val) { motionEstimator_->setMotionModel(val); }$/;"	f	class:cv::videostab::KeypointBasedMotionEstimatorGpu
setMotionModel	videostab/global_motion.hpp	/^    virtual void setMotionModel(MotionModel val) { motionEstimator_->setMotionModel(val); }$/;"	f	class:cv::videostab::ToFileMotionWriter
setMotionModel	videostab/global_motion.hpp	/^    virtual void setMotionModel(MotionModel val) { motionModel_ = val; }$/;"	f	class:cv::videostab::ImageMotionEstimatorBase
setMotionModel	videostab/global_motion.hpp	/^    virtual void setMotionModel(MotionModel val) { motionModel_ = val; }$/;"	f	class:cv::videostab::MotionEstimatorBase
setMotionModel	videostab/inpainting.hpp	/^    virtual void setMotionModel(MotionModel val) { motionModel_ = val; }$/;"	f	class:cv::videostab::InpainterBase
setMotionModel	videostab/motion_stabilizing.hpp	/^    void setMotionModel(MotionModel val) { model_ = val; }$/;"	f	class:cv::videostab::LpMotionStabilizer
setMotionStabilizer	videostab/stabilizer.hpp	/^    void setMotionStabilizer(Ptr<IMotionStabilizer> val) { motionStabilizer_ = val; }$/;"	f	class:cv::videostab::TwoPassStabilizer
setMotions	videostab/deblurring.hpp	/^    virtual void setMotions(const std::vector<Mat> &val) { motions_ = &val; }$/;"	f	class:cv::videostab::DeblurerBase
setMotions	videostab/inpainting.hpp	/^    virtual void setMotions(const std::vector<Mat> &val) { motions_ = &val; }$/;"	f	class:cv::videostab::InpainterBase
setMotions	videostab/wobble_suppression.hpp	/^    virtual void setMotions(const std::vector<Mat> &val) { motions_ = &val; }$/;"	f	class:cv::videostab::WobbleSuppressorBase
setMotions2	videostab/wobble_suppression.hpp	/^    virtual void setMotions2(const std::vector<Mat> &val) { motions2_ = &val; }$/;"	f	class:cv::videostab::WobbleSuppressorBase
setNumBands	stitching/detail/blenders.hpp	/^    void setNumBands(int val) { actual_num_bands_ = val; }$/;"	f	class:cv::detail::MultiBandBlender
setNumClassifierRootNodes	cudalegacy/NCVHaarObjectDetection.hpp	/^    __host__ NCVStatus setNumClassifierRootNodes(Ncv32u val)$/;"	f	struct:HaarStage64
setOptFlowEstimator	videostab/inpainting.hpp	/^    void setOptFlowEstimator(Ptr<IDenseOptFlowEstimator> val) { optFlowEstimator_ = val; }$/;"	f	class:cv::videostab::MotionInpainter
setOpticalFlowEstimator	videostab/global_motion.hpp	/^    void setOpticalFlowEstimator(Ptr<ISparseOptFlowEstimator> val) { optFlowEstimator_ = val; }$/;"	f	class:cv::videostab::KeypointBasedMotionEstimator
setOutlierRejector	videostab/global_motion.hpp	/^    void setOutlierRejector(Ptr<IOutlierRejector> val) { outlierRejector_ = val; }$/;"	f	class:cv::videostab::KeypointBasedMotionEstimator
setOutlierRejector	videostab/global_motion.hpp	/^    void setOutlierRejector(Ptr<IOutlierRejector> val) { outlierRejector_ = val; }$/;"	f	class:cv::videostab::KeypointBasedMotionEstimatorGpu
setPanoConfidenceThresh	stitching.hpp	/^    CV_WRAP void setPanoConfidenceThresh(double conf_thresh) { conf_thresh_ = conf_thresh; }$/;"	f	class:cv::Stitcher
setPeriod	videostab/wobble_suppression.hpp	/^    virtual void setPeriod(int val) { period_ = val; }$/;"	f	class:cv::videostab::MoreAccurateMotionWobbleSuppressorBase
setRadius	videostab/deblurring.hpp	/^    virtual void setRadius(int val) { radius_ = val; }$/;"	f	class:cv::videostab::DeblurerBase
setRadius	videostab/inpainting.hpp	/^    virtual void setRadius(int val) { radius_ = val; }$/;"	f	class:cv::videostab::InpainterBase
setRadius	videostab/stabilizer.hpp	/^    void setRadius(int val) { radius_ = val; }$/;"	f	class:cv::videostab::StabilizerBase
setRansacParams	videostab/global_motion.hpp	/^    void setRansacParams(const RansacParams &val) { ransacParams_ = val; }$/;"	f	class:cv::videostab::MotionEstimatorRansacL2
setRansacParams	videostab/outlier_rejection.hpp	/^    void setRansacParams(RansacParams val) { ransacParams_ = val; }$/;"	f	class:cv::videostab::TranslationBasedLocalOutlierRejector
setRect	cudalegacy/NCVHaarObjectDetection.hpp	/^    __host__ NCVStatus setRect(Ncv32u rectX, Ncv32u rectY, Ncv32u rectWidth, Ncv32u rectHeight, Ncv32u \/*clsWidth*\/, Ncv32u \/*clsHeight*\/)$/;"	f	struct:HaarFeature64
setRefinementMask	stitching/detail/motion_estimators.hpp	/^    void setRefinementMask(const Mat &mask)$/;"	f	class:cv::detail::BundleAdjusterBase
setRegistrationResol	stitching.hpp	/^    CV_WRAP void setRegistrationResol(double resol_mpx) { registr_resol_ = resol_mpx; }$/;"	f	class:cv::Stitcher
setRightNodeDesc	cudalegacy/NCVHaarObjectDetection.hpp	/^    __host__ NCVStatus setRightNodeDesc(HaarClassifierNodeDescriptor32 nr)$/;"	f	struct:HaarClassifierNode128
setScale	stitching/detail/warpers.hpp	/^    virtual void setScale(float) {}$/;"	f	class:cv::detail::RotationWarper
setScale	stitching/detail/warpers.hpp	/^    void setScale(float val) { projector_.scale = val; }$/;"	f	class:cv::detail::RotationWarperBase
setScaleFactor	objdetect/detection_based_tracker.hpp	/^                void setScaleFactor(float value)$/;"	f	class:cv::DetectionBasedTracker::IDetector
setSeamEstimationResol	stitching.hpp	/^    CV_WRAP void setSeamEstimationResol(double resol_mpx) { seam_est_resol_ = resol_mpx; }$/;"	f	class:cv::Stitcher
setSeamFinder	stitching.hpp	/^    void setSeamFinder(Ptr<detail::SeamFinder> seam_finder) { seam_finder_ = seam_finder; }$/;"	f	class:cv::Stitcher
setSensitivity	videostab/deblurring.hpp	/^    void setSensitivity(float val) { sensitivity_ = val; }$/;"	f	class:cv::videostab::WeightingDeblurer
setSharpness	stitching/detail/blenders.hpp	/^    void setSharpness(float val) { sharpness_ = val; }$/;"	f	class:cv::detail::FeatherBlender
setStabilizationMotions	videostab/inpainting.hpp	/^    virtual void setStabilizationMotions(const std::vector<Mat> &val) { stabilizationMotions_ = &val; }$/;"	f	class:cv::videostab::InpainterBase
setStabilizationMotions	videostab/wobble_suppression.hpp	/^    virtual void setStabilizationMotions(const std::vector<Mat> &val) { stabilizationMotions_ = &val; }$/;"	f	class:cv::videostab::WobbleSuppressorBase
setStabilizedFrames	videostab/inpainting.hpp	/^    virtual void setStabilizedFrames(const std::vector<Mat> &val) { stabilizedFrames_ = &val; }$/;"	f	class:cv::videostab::InpainterBase
setStageThreshold	cudalegacy/NCVHaarObjectDetection.hpp	/^    __host__ NCVStatus setStageThreshold(Ncv32f t)$/;"	f	struct:HaarStage64
setStartClassifierRootNodeOffset	cudalegacy/NCVHaarObjectDetection.hpp	/^    __host__ NCVStatus setStartClassifierRootNodeOffset(Ncv32u val)$/;"	f	struct:HaarStage64
setStdevThresh	videostab/inpainting.hpp	/^    void setStdevThresh(float val) { stdevThresh_ = val; }$/;"	f	class:cv::videostab::ConsistentMosaicInpainter
setTermCriteria	stitching/detail/motion_estimators.hpp	/^    void setTermCriteria(const TermCriteria& term_criteria) { term_criteria_ = term_criteria; }$/;"	f	class:cv::detail::BundleAdjusterBase
setThreshold	cudalegacy/NCVHaarObjectDetection.hpp	/^    __host__ NCVStatus setThreshold(Ncv32f t)$/;"	f	struct:HaarClassifierNode128
setTo	core/cuda.inl.hpp	/^GpuMat& GpuMat::setTo(Scalar s)$/;"	f	class:cv::cuda::GpuMat
setTo	core/cuda.inl.hpp	/^GpuMat& GpuMat::setTo(Scalar s, InputArray mask)$/;"	f	class:cv::cuda::GpuMat
setTrimRatio	videostab/motion_stabilizing.hpp	/^    void setTrimRatio(float val) { trimRatio_ = val; }$/;"	f	class:cv::videostab::LpMotionStabilizer
setTrimRatio	videostab/stabilizer.hpp	/^    void setTrimRatio(float val) { trimRatio_ = val; }$/;"	f	class:cv::videostab::StabilizerBase
setVerified	ts/ts_perf.hpp	/^    void setVerified() { this->verified = true; }$/;"	f	class:perf::TestBase
setWarper	stitching.hpp	/^    void setWarper(Ptr<WarperCreator> creator) { warper_ = creator; }$/;"	f	class:cv::Stitcher
setWaveCorrectKind	stitching.hpp	/^    void setWaveCorrectKind(detail::WaveCorrectKind kind) { wave_correct_kind_ = kind; }$/;"	f	class:cv::Stitcher
setWaveCorrection	stitching.hpp	/^    CV_WRAP void setWaveCorrection(bool flag) { do_wave_correct_ = flag; }$/;"	f	class:cv::Stitcher
setWeight	cudalegacy/NCVHaarObjectDetection.hpp	/^    __host__ NCVStatus setWeight(Ncv32f weight)$/;"	f	struct:HaarFeature64
setWeight1	videostab/motion_stabilizing.hpp	/^    void setWeight1(float val) { w1_ = val; }$/;"	f	class:cv::videostab::LpMotionStabilizer
setWeight2	videostab/motion_stabilizing.hpp	/^    void setWeight2(float val) { w2_ = val; }$/;"	f	class:cv::videostab::LpMotionStabilizer
setWeight3	videostab/motion_stabilizing.hpp	/^    void setWeight3(float val) { w3_ = val; }$/;"	f	class:cv::videostab::LpMotionStabilizer
setWeight4	videostab/motion_stabilizing.hpp	/^    void setWeight4(float val) { w4_ = val; }$/;"	f	class:cv::videostab::LpMotionStabilizer
setWinSize	videostab/optical_flow.hpp	/^    virtual void setWinSize(Size val) { winSize_ = val; }$/;"	f	class:cv::videostab::PyrLkOptFlowEstimatorBase
setWobbleSuppressor	videostab/stabilizer.hpp	/^    void setWobbleSuppressor(Ptr<WobbleSuppressorBase> val) { wobbleSuppressor_ = val; }$/;"	f	class:cv::videostab::TwoPassStabilizer
set_cb_index	flann/kmeans_index.h	/^    void set_cb_index( float index)$/;"	f	class:cvflann::KMeansIndex
set_elapsed_time	ts/ts_gtest.h	/^  void set_elapsed_time(TimeInMillis elapsed) { elapsed_time_ = elapsed; }$/;"	f	class:testing::TestResult
set_header	core/core_c.h	/^CVAPI(void)  cvClearSet( CvSet* set_header );$/;"	v
set_postprocess_func	highgui/highgui_c.h	234;"	d
set_preprocess_func	highgui/highgui_c.h	233;"	d
set_should_run	ts/ts_gtest.h	/^  void set_should_run(bool should) { should_run_ = should; }$/;"	f	class:testing::TestCase
set_up_tc_	ts/ts_gtest.h	/^  Test::SetUpTestCaseFunc set_up_tc_;$/;"	m	class:testing::TestCase
severity_	ts/ts_gtest.h	/^  const GTestLogSeverity severity_;$/;"	m	class:std::tr1::GTestLog
sharpness	stitching/detail/blenders.hpp	/^    float sharpness() const { return sharpness_; }$/;"	f	class:cv::detail::FeatherBlender
sharpness_	stitching/detail/blenders.hpp	/^    float sharpness_;$/;"	m	class:cv::detail::FeatherBlender
shear	highgui.hpp	/^    float       shear;     \/\/ slope coefficient: 0 - normal, >0 - italic$/;"	m	struct:cv::QtFont
shear	imgproc/imgproc_c.h	/^    float       shear;      \/\/!< slope coefficient: 0 - normal, >0 - italic$/;"	m	struct:CvFont
shfl	core/cuda/warp_shuffle.hpp	/^    __device__ __forceinline__ T shfl(T val, int srcLane, int width = warpSize)$/;"	f	namespace:cv::cuda::device
shfl	core/cuda/warp_shuffle.hpp	/^    __device__ __forceinline__ double shfl(double val, int srcLane, int width = warpSize)$/;"	f	namespace:cv::cuda::device
shfl	core/cuda/warp_shuffle.hpp	/^    __device__ __forceinline__ unsigned int shfl(unsigned int val, int srcLane, int width = warpSize)$/;"	f	namespace:cv::cuda::device
shfl	cudev/warp/shuffle.hpp	/^__device__ __forceinline__ float shfl(float val, int srcLane, int width = warpSize)$/;"	f	namespace:cv::cudev
shfl	cudev/warp/shuffle.hpp	/^__device__ __forceinline__ int shfl(int val, int srcLane, int width = warpSize)$/;"	f	namespace:cv::cudev
shfl	cudev/warp/shuffle.hpp	/^__device__ __forceinline__ schar shfl(schar val, int srcLane, int width = warpSize)$/;"	f	namespace:cv::cudev
shfl	cudev/warp/shuffle.hpp	/^__device__ __forceinline__ short shfl(short val, int srcLane, int width = warpSize)$/;"	f	namespace:cv::cudev
shfl	cudev/warp/shuffle.hpp	/^__device__ __forceinline__ uchar shfl(uchar val, int srcLane, int width = warpSize)$/;"	f	namespace:cv::cudev
shfl	cudev/warp/shuffle.hpp	/^__device__ __forceinline__ uint shfl(uint val, int srcLane, int width = warpSize)$/;"	f	namespace:cv::cudev
shfl	cudev/warp/shuffle.hpp	/^__device__ __forceinline__ ushort shfl(ushort val, int srcLane, int width = warpSize)$/;"	f	namespace:cv::cudev
shfl	cudev/warp/shuffle.hpp	/^__device__ double shfl(double val, int srcLane, int width = warpSize)$/;"	f	namespace:cv::cudev
shfl_down	core/cuda/warp_shuffle.hpp	/^    __device__ __forceinline__ T shfl_down(T val, unsigned int delta, int width = warpSize)$/;"	f	namespace:cv::cuda::device
shfl_down	core/cuda/warp_shuffle.hpp	/^    __device__ __forceinline__ double shfl_down(double val, unsigned int delta, int width = warpSize)$/;"	f	namespace:cv::cuda::device
shfl_down	core/cuda/warp_shuffle.hpp	/^    __device__ __forceinline__ unsigned int shfl_down(unsigned int val, unsigned int delta, int width = warpSize)$/;"	f	namespace:cv::cuda::device
shfl_down	cudev/warp/shuffle.hpp	/^__device__ __forceinline__ float shfl_down(float val, uint delta, int width = warpSize)$/;"	f	namespace:cv::cudev
shfl_down	cudev/warp/shuffle.hpp	/^__device__ __forceinline__ int shfl_down(int val, uint delta, int width = warpSize)$/;"	f	namespace:cv::cudev
shfl_down	cudev/warp/shuffle.hpp	/^__device__ __forceinline__ schar shfl_down(schar val, uint delta, int width = warpSize)$/;"	f	namespace:cv::cudev
shfl_down	cudev/warp/shuffle.hpp	/^__device__ __forceinline__ short shfl_down(short val, uint delta, int width = warpSize)$/;"	f	namespace:cv::cudev
shfl_down	cudev/warp/shuffle.hpp	/^__device__ __forceinline__ uchar shfl_down(uchar val, uint delta, int width = warpSize)$/;"	f	namespace:cv::cudev
shfl_down	cudev/warp/shuffle.hpp	/^__device__ __forceinline__ uint shfl_down(uint val, uint delta, int width = warpSize)$/;"	f	namespace:cv::cudev
shfl_down	cudev/warp/shuffle.hpp	/^__device__ __forceinline__ ushort shfl_down(ushort val, uint delta, int width = warpSize)$/;"	f	namespace:cv::cudev
shfl_down	cudev/warp/shuffle.hpp	/^__device__ double shfl_down(double val, uint delta, int width = warpSize)$/;"	f	namespace:cv::cudev
shfl_up	core/cuda/warp_shuffle.hpp	/^    __device__ __forceinline__ T shfl_up(T val, unsigned int delta, int width = warpSize)$/;"	f	namespace:cv::cuda::device
shfl_up	core/cuda/warp_shuffle.hpp	/^    __device__ __forceinline__ double shfl_up(double val, unsigned int delta, int width = warpSize)$/;"	f	namespace:cv::cuda::device
shfl_up	core/cuda/warp_shuffle.hpp	/^    __device__ __forceinline__ unsigned int shfl_up(unsigned int val, unsigned int delta, int width = warpSize)$/;"	f	namespace:cv::cuda::device
shfl_up	cudev/warp/shuffle.hpp	/^__device__ __forceinline__ float shfl_up(float val, uint delta, int width = warpSize)$/;"	f	namespace:cv::cudev
shfl_up	cudev/warp/shuffle.hpp	/^__device__ __forceinline__ int shfl_up(int val, uint delta, int width = warpSize)$/;"	f	namespace:cv::cudev
shfl_up	cudev/warp/shuffle.hpp	/^__device__ __forceinline__ schar shfl_up(schar val, uint delta, int width = warpSize)$/;"	f	namespace:cv::cudev
shfl_up	cudev/warp/shuffle.hpp	/^__device__ __forceinline__ short shfl_up(short val, uint delta, int width = warpSize)$/;"	f	namespace:cv::cudev
shfl_up	cudev/warp/shuffle.hpp	/^__device__ __forceinline__ uchar shfl_up(uchar val, uint delta, int width = warpSize)$/;"	f	namespace:cv::cudev
shfl_up	cudev/warp/shuffle.hpp	/^__device__ __forceinline__ uint shfl_up(uint val, uint delta, int width = warpSize)$/;"	f	namespace:cv::cudev
shfl_up	cudev/warp/shuffle.hpp	/^__device__ __forceinline__ ushort shfl_up(ushort val, uint delta, int width = warpSize)$/;"	f	namespace:cv::cudev
shfl_up	cudev/warp/shuffle.hpp	/^__device__ double shfl_up(double val, uint delta, int width = warpSize)$/;"	f	namespace:cv::cudev
shfl_xor	cudev/warp/shuffle.hpp	/^__device__ __forceinline__ float shfl_xor(float val, int laneMask, int width = warpSize)$/;"	f	namespace:cv::cudev
shfl_xor	cudev/warp/shuffle.hpp	/^__device__ __forceinline__ int shfl_xor(int val, int laneMask, int width = warpSize)$/;"	f	namespace:cv::cudev
shfl_xor	cudev/warp/shuffle.hpp	/^__device__ __forceinline__ schar shfl_xor(schar val, int laneMask, int width = warpSize)$/;"	f	namespace:cv::cudev
shfl_xor	cudev/warp/shuffle.hpp	/^__device__ __forceinline__ short shfl_xor(short val, int laneMask, int width = warpSize)$/;"	f	namespace:cv::cudev
shfl_xor	cudev/warp/shuffle.hpp	/^__device__ __forceinline__ uchar shfl_xor(uchar val, int laneMask, int width = warpSize)$/;"	f	namespace:cv::cudev
shfl_xor	cudev/warp/shuffle.hpp	/^__device__ __forceinline__ uint shfl_xor(uint val, int laneMask, int width = warpSize)$/;"	f	namespace:cv::cudev
shfl_xor	cudev/warp/shuffle.hpp	/^__device__ __forceinline__ ushort shfl_xor(ushort val, int laneMask, int width = warpSize)$/;"	f	namespace:cv::cudev
shfl_xor	cudev/warp/shuffle.hpp	/^__device__ double shfl_xor(double val, int laneMask, int width = warpSize)$/;"	f	namespace:cv::cudev
shift	core/cuda/functional.hpp	/^            enum { shift = BinOpShift<sizeof(T1), sizeof(T2), sizeof(D)>::shift };$/;"	e	enum:cv::cuda::device::functional_detail::DefaultBinaryShift::__anon262
shift	core/cuda/functional.hpp	/^            enum { shift = DefaultBinaryShift<typename Func::first_argument_type, typename Func::second_argument_type, typename Func::result_type>::shift };$/;"	e	enum:cv::cuda::device::functional_detail::ShiftDispatcher::__anon264
shift	core/cuda/functional.hpp	/^            enum { shift = DefaultUnaryShift<typename Func::argument_type, typename Func::result_type>::shift };$/;"	e	enum:cv::cuda::device::functional_detail::ShiftDispatcher::__anon263
shift	core/cuda/functional.hpp	/^            enum { shift = UnOpShift<sizeof(T), sizeof(D)>::shift };$/;"	e	enum:cv::cuda::device::functional_detail::DefaultUnaryShift::__anon258
shift	core/cuda/functional.hpp	/^        enum { shift = functional_detail::ShiftDispatcher<Func>::shift };$/;"	e	enum:cv::cuda::device::DefaultTransformShift::__anon265
shift	core/cuda/functional.hpp	/^        template <size_t src_elem_size, size_t dst_elem_size> struct UnOpShift { enum { shift = 1 }; };$/;"	e	enum:cv::cuda::device::functional_detail::UnOpShift::__anon255
shift	core/cuda/functional.hpp	/^        template <size_t src_elem_size1, size_t src_elem_size2, size_t dst_elem_size> struct BinOpShift { enum { shift = 1 }; };$/;"	e	enum:cv::cuda::device::functional_detail::BinOpShift::__anon259
shift	core/cuda/functional.hpp	/^        template <size_t src_elem_size1, size_t src_elem_size2> struct BinOpShift<src_elem_size1, src_elem_size2, 1> { enum { shift = 4 }; };$/;"	e	enum:cv::cuda::device::functional_detail::BinOpShift::__anon260
shift	core/cuda/functional.hpp	/^        template <size_t src_elem_size1, size_t src_elem_size2> struct BinOpShift<src_elem_size1, src_elem_size2, 2> { enum { shift = 2 }; };$/;"	e	enum:cv::cuda::device::functional_detail::BinOpShift::__anon261
shift	core/cuda/functional.hpp	/^        template <size_t src_elem_size> struct UnOpShift<src_elem_size, 1> { enum { shift = 4 }; };$/;"	e	enum:cv::cuda::device::functional_detail::UnOpShift::__anon256
shift	core/cuda/functional.hpp	/^        template <size_t src_elem_size> struct UnOpShift<src_elem_size, 2> { enum { shift = 2 }; };$/;"	e	enum:cv::cuda::device::functional_detail::UnOpShift::__anon257
shift	cudev/grid/transform.hpp	/^        shift = 4$/;"	e	enum:cv::cudev::DefaultTransformPolicy::__anon389
shift	hal/intrin.hpp	/^    enum { delta = 0, shift = 0 };$/;"	e	enum:cv::V_TypeTraits::__anon85
shift	hal/intrin.hpp	/^    enum { delta = 128, shift = 8 };$/;"	e	enum:cv::V_TypeTraits::__anon86
shift	hal/intrin.hpp	/^    enum { delta = 128, shift = 8 };$/;"	e	enum:cv::V_TypeTraits::__anon87
shift	hal/intrin.hpp	/^    enum { delta = 128, shift = 8 };$/;"	e	enum:cv::V_TypeTraits::__anon89
shift	hal/intrin.hpp	/^    enum { delta = 32768, shift = 16 };$/;"	e	enum:cv::V_TypeTraits::__anon88
shortdim	core/matx.hpp	/^           shortdim = (m < n ? m : n)$/;"	e	enum:cv::Matx::__anon150
should_run	ts/ts_gtest.h	/^  bool should_run() const { return should_run_; }$/;"	f	class:testing::TestCase
should_run	ts/ts_gtest.h	/^  bool should_run() const { return should_run_; }$/;"	f	class:testing::TestInfo
should_run_	ts/ts_gtest.h	/^  bool should_run_;                 \/\/ True iff this test should run$/;"	m	class:testing::TestInfo
should_run_	ts/ts_gtest.h	/^  bool should_run_;$/;"	m	class:testing::TestCase
shrinkPtr	cudev/expr/expr.hpp	/^    __host__ static ptr_type shrinkPtr(const Expr<Body>& expr)$/;"	f	struct:cv::cudev::PtrTraits
shrinkPtr	cudev/ptr2d/traits.hpp	/^    __host__ static Ptr2D shrinkPtr(const Ptr2DSz& ptr)$/;"	f	struct:cv::cudev::PtrTraitsBase
shrinkPtr	cudev/ptr2d/traits.hpp	/^__host__ typename PtrTraits<Ptr2DSz>::ptr_type shrinkPtr(const Ptr2DSz& ptr)$/;"	f	namespace:cv::cudev
sign_bit	ts/ts_gtest.h	/^  Bits sign_bit() const { return kSignBitMask & u_.bits_; }$/;"	f	class:testing::internal::FloatingPoint
signature	core/types_c.h	/^    int signature;$/;"	m	struct:CvMemStorage
signature	flann/saving.h	/^    char signature[16];$/;"	m	struct:cvflann::IndexHeader
signedGradient	objdetect.hpp	/^    CV_PROP bool signedGradient;$/;"	m	struct:cv::HOGDescriptor
signum_	ts/ts_gtest.h	/^  const int signum_;$/;"	m	class:testing::KilledBySignal
silver	viz/types.hpp	/^inline cv::viz::Color cv::viz::Color::silver()         { return Color(192, 192, 192); }$/;"	f	class:cv::viz::Color
simpleDistance	flann/dist.h	/^struct simpleDistance$/;"	s	namespace:cvflann
simpleDistance	flann/dist.h	/^struct simpleDistance<ChiSquareDistance<ElementType>, ElementType>$/;"	s	namespace:cvflann
simpleDistance	flann/dist.h	/^struct simpleDistance<HellingerDistance<ElementType>, ElementType>$/;"	s	namespace:cvflann
simpleDistance	flann/dist.h	/^struct simpleDistance<L2<ElementType>, ElementType>$/;"	s	namespace:cvflann
simpleDistance	flann/dist.h	/^struct simpleDistance<L2_Simple<ElementType>, ElementType>$/;"	s	namespace:cvflann
simpleDistance	flann/dist.h	/^struct simpleDistance<MinkowskiDistance<ElementType>, ElementType>$/;"	s	namespace:cvflann
simple_block_dim_x	core/cuda/functional.hpp	/^        enum { simple_block_dim_x = 16 };$/;"	e	enum:cv::cuda::device::DefaultTransformFunctorTraits::__anon266
simple_block_dim_y	core/cuda/functional.hpp	/^        enum { simple_block_dim_y = 16 };$/;"	e	enum:cv::cuda::device::DefaultTransformFunctorTraits::__anon267
singleMaskChannels	cudev/ptr2d/mask.hpp	/^singleMaskChannels(const MaskPtr& mask, int channels)$/;"	f	namespace:cv::cudev
size	core/core_c.h	/^    CvSize size; \/**< maximal common linear size: { width = size, height = 1 } *\/$/;"	m	struct:CvNArrayIterator
size	core/core_c.h	/^CVAPI(void*)  cvAlloc( size_t size );$/;"	v
size	core/core_c.h	/^template<typename _Tp> inline size_t Seq<_Tp>::size() const$/;"	f	class:cv::Seq
size	core/cuda.inl.hpp	/^Size GpuMat::size() const$/;"	f	class:cv::cuda::GpuMat
size	core/cuda.inl.hpp	/^Size HostMem::size() const$/;"	f	class:cv::cuda::HostMem
size	core/cuda_types.hpp	/^            size_t size;$/;"	m	struct:cv::cuda::PtrSz
size	core/cvstd.hpp	/^size_t String::size() const$/;"	f	class:cv::String
size	core/mat.hpp	/^        int size[MAX_DIM];$/;"	m	struct:cv::SparseMat::Hdr
size	core/mat.hpp	/^    MatSize size;$/;"	m	class:cv::Mat
size	core/mat.hpp	/^    MatSize size;$/;"	m	class:cv::UMat
size	core/mat.hpp	/^    size_t size;$/;"	m	class:cv::NAryMatIterator
size	core/mat.hpp	/^    size_t size;$/;"	m	struct:cv::UMatData
size	core/mat.inl.hpp	/^const int* SparseMat::size() const$/;"	f	class:cv::SparseMat
size	core/mat.inl.hpp	/^int SparseMat::size(int i) const$/;"	f	class:cv::SparseMat
size	core/opengl.hpp	/^cv::Size cv::ogl::Buffer::size() const$/;"	f	class:cv::ogl::Buffer
size	core/opengl.hpp	/^cv::Size cv::ogl::Texture2D::size() const$/;"	f	class:cv::ogl::Texture2D
size	core/opengl.hpp	/^int cv::ogl::Arrays::size() const$/;"	f	class:cv::ogl::Arrays
size	core/types.hpp	/^    CV_PROP_RW float size; \/\/!< diameter of the meaningful keypoint neighborhood$/;"	m	class:cv::KeyPoint
size	core/types.hpp	/^    Size2f size;    \/\/< width and height of the rectangle$/;"	m	class:cv::RotatedRect
size	core/types.hpp	/^Size_<_Tp> Rect_<_Tp>::size() const$/;"	f	class:cv::Rect_
size	core/types.hpp	/^int Range::size() const$/;"	f	class:cv::Range
size	core/types_c.h	/^        int size;$/;"	m	struct:CvMatND::__anon148
size	core/types_c.h	/^    CvSize2D32f  size;    \/**< Box width and length.                       *\/$/;"	m	struct:CvBox2D
size	core/types_c.h	/^    int size[CV_MAX_DIM];$/;"	m	struct:CvSparseMat
size	core/utility.hpp	/^AutoBuffer<_Tp, fixed_size>::size() const$/;"	f	class:cv::AutoBuffer
size	cudalegacy/NCV.hpp	/^    NcvSize32u size() const {return NcvSize32u(this->_width, this->_height);}$/;"	f	class:NCVMatrix
size	cudalegacy/NCV.hpp	/^    size_t size;$/;"	m	struct:NCVMemSegment
size	cudalegacy/NPP_staging.hpp	/^    NcvSize32u size;      \/\/\/< frame size$/;"	m	struct:NppStInterpolationState
size	cudev/util/tuple.hpp	/^    enum { size = 1 };$/;"	e	enum:cv::cudev::TupleTraits::__anon365
size	cudev/util/tuple.hpp	/^    enum { size = tuple_size< tuple<P0, P1, P2, P3, P4, P5, P6, P7, P8, P9> >::value };$/;"	e	enum:cv::cudev::TupleTraits::__anon367
size	features2d.hpp	/^    int size;$/;"	m	class:cv::BOWTrainer
size	flann.hpp	/^        int size() const { return nnIndex->size(); }$/;"	f	class:cv::flann::GenericIndex
size	flann.hpp	/^    int size() const$/;"	f	class:cv::flann::Index_
size	flann/autotuned_index.h	/^    virtual size_t size() const$/;"	f	class:cvflann::AutotunedIndex
size	flann/composite_index.h	/^    size_t size() const$/;"	f	class:cvflann::CompositeIndex
size	flann/dynamic_bitset.h	/^    size_t size() const$/;"	f	class:cvflann::DynamicBitset
size	flann/flann_base.hpp	/^    size_t size() const$/;"	f	class:cvflann::Index
size	flann/heap.h	/^    int size()$/;"	f	class:cvflann::Heap
size	flann/hierarchical_clustering_index.h	/^        int size;$/;"	m	struct:cvflann::HierarchicalClusteringIndex::Node
size	flann/hierarchical_clustering_index.h	/^    size_t size() const$/;"	f	class:cvflann::HierarchicalClusteringIndex
size	flann/kdtree_index.h	/^    size_t size() const$/;"	f	class:cvflann::KDTreeIndex
size	flann/kdtree_single_index.h	/^    size_t size() const$/;"	f	class:cvflann::KDTreeSingleIndex
size	flann/kmeans_index.h	/^        int size;$/;"	m	struct:cvflann::KMeansIndex::KMeansNode
size	flann/kmeans_index.h	/^    size_t size() const$/;"	f	class:cvflann::KMeansIndex
size	flann/linear_index.h	/^    size_t size() const$/;"	f	class:cvflann::LinearIndex
size	flann/lsh_index.h	/^    size_t size() const$/;"	f	class:cvflann::LshIndex
size	flann/result_set.h	/^    size_t size() const$/;"	f	class:cvflann::KNNResultSet
size	flann/result_set.h	/^    size_t size() const$/;"	f	class:cvflann::KNNSimpleResultSet
size	flann/result_set.h	/^    size_t size() const$/;"	f	class:cvflann::RadiusResultSet
size	flann/result_set.h	/^    size_t size() const$/;"	f	class:cvflann::UniqueResultSet
size	stitching/detail/util.hpp	/^    std::vector<int> size;$/;"	m	class:cv::detail::DisjointSets
size	ts/ts_gtest.h	/^  size_t size() const { return size_; }$/;"	f	class:testing::internal::NativeArray
size	videostab/motion_core.hpp	/^    int size; \/\/!< subset size$/;"	m	struct:cv::videostab::RansacParams
size_	core/opengl.hpp	/^    int size_;$/;"	m	class:cv::ogl::Arrays
size_	flann/dynamic_bitset.h	/^    size_t size_;$/;"	m	class:cvflann::DynamicBitset
size_	flann/hierarchical_clustering_index.h	/^    size_t size_;$/;"	m	class:cvflann::HierarchicalClusteringIndex
size_	flann/kdtree_index.h	/^    size_t size_;$/;"	m	class:cvflann::KDTreeIndex
size_	flann/kdtree_single_index.h	/^    size_t size_;$/;"	m	class:cvflann::KDTreeSingleIndex
size_	flann/kmeans_index.h	/^    size_t size_;$/;"	m	class:cvflann::KMeansIndex
size_	flann/random.h	/^    int size_;$/;"	m	class:cvflann::UniqueRandom
size_	ts/ts_gtest.h	/^  size_t size_;$/;"	m	class:testing::internal::NativeArray
size_	videostab/fast_marching.hpp	/^    int size_; \/\/ narrow band size$/;"	m	class:cv::videostab::FastMarchingMethod
size_histogram_	flann/lsh_table.h	/^    std::vector<std::vector<unsigned int> > size_histogram_;$/;"	m	struct:cvflann::lsh::LshStats
size_type	core/cvstd.hpp	/^    typedef size_t size_type;$/;"	t	class:cv::Allocator
size_type	core/cvstd.hpp	/^    typedef size_t size_type;$/;"	t	class:cv::String
sizeof	cudalegacy/NCV.hpp	/^NCV_CT_ASSERT(sizeof(NcvPoint2D32u) == 2 * sizeof(Ncv32u));$/;"	v
sizeof	cudalegacy/NCV.hpp	/^NCV_CT_ASSERT(sizeof(NcvRect32s) == 4 * sizeof(Ncv32s));$/;"	v
sizeof	cudalegacy/NCV.hpp	/^NCV_CT_ASSERT(sizeof(NcvRect32u) == 4 * sizeof(Ncv32u));$/;"	v
sizeof	cudalegacy/NCV.hpp	/^NCV_CT_ASSERT(sizeof(NcvRect8u) == sizeof(Ncv32u));$/;"	v
sizeof	cudalegacy/NCV.hpp	/^NCV_CT_ASSERT(sizeof(NcvSize32u) == 2 * sizeof(Ncv32u));$/;"	v
sizes_	stitching/detail/seam_finders.hpp	/^    std::vector<Size> sizes_;$/;"	m	class:cv::detail::PairwiseSeamFinder
sliceEnd	core/mat.hpp	/^    const uchar* sliceEnd;$/;"	m	class:cv::MatConstIterator
sliceStart	core/mat.hpp	/^    const uchar* sliceStart;$/;"	m	class:cv::MatConstIterator
slidingSumBuf	calib3d/calib3d_c.h	/^    CvMat* slidingSumBuf;$/;"	m	struct:CvStereoBMState
small	core/cvdef.h	53;"	d
small_any_policy	flann/any.h	/^struct small_any_policy : typed_base_any_policy<T>$/;"	s	namespace:cvflann::anyimpl
smart_block_dim_x	core/cuda/functional.hpp	/^        enum { smart_block_dim_x = 16 };$/;"	e	enum:cv::cuda::device::DefaultTransformFunctorTraits::__anon268
smart_block_dim_y	core/cuda/functional.hpp	/^        enum { smart_block_dim_y = 16 };$/;"	e	enum:cv::cuda::device::DefaultTransformFunctorTraits::__anon269
smart_shift	core/cuda/functional.hpp	/^        enum { smart_shift = DefaultTransformShift<Func>::shift };$/;"	e	enum:cv::cuda::device::DefaultTransformFunctorTraits::__anon270
smem	core/cuda/emulation.hpp	/^        struct smem$/;"	s	struct:cv::cuda::device::Emulation
smem	cudev/grid/detail/reduce.hpp	/^        __device__ __forceinline__ static tuple<volatile R*, volatile R*, volatile R*, volatile R*> smem(R* ptr)$/;"	f	struct:cv::cudev::grid_reduce_detail::Unroll
smem	cudev/grid/detail/reduce.hpp	/^        __device__ __forceinline__ static tuple<volatile R*, volatile R*, volatile R*> smem(R* ptr)$/;"	f	struct:cv::cudev::grid_reduce_detail::Unroll
smem	cudev/grid/detail/reduce.hpp	/^        __device__ __forceinline__ static tuple<volatile R*, volatile R*> smem(R* ptr)$/;"	f	struct:cv::cudev::grid_reduce_detail::Unroll
smem	cudev/grid/detail/reduce.hpp	/^        __device__ __forceinline__ static volatile R* smem(R* ptr)$/;"	f	struct:cv::cudev::grid_reduce_detail::Unroll
smem_tuple	core/cuda/reduce.hpp	/^    smem_tuple(T0* t0)$/;"	f	namespace:cv::cuda::device
smem_tuple	core/cuda/reduce.hpp	/^    smem_tuple(T0* t0, T1* t1)$/;"	f	namespace:cv::cuda::device
smem_tuple	core/cuda/reduce.hpp	/^    smem_tuple(T0* t0, T1* t1, T2* t2)$/;"	f	namespace:cv::cuda::device
smem_tuple	core/cuda/reduce.hpp	/^    smem_tuple(T0* t0, T1* t1, T2* t2, T3* t3)$/;"	f	namespace:cv::cuda::device
smem_tuple	core/cuda/reduce.hpp	/^    smem_tuple(T0* t0, T1* t1, T2* t2, T3* t3, T4* t4)$/;"	f	namespace:cv::cuda::device
smem_tuple	core/cuda/reduce.hpp	/^    smem_tuple(T0* t0, T1* t1, T2* t2, T3* t3, T4* t4, T5* t5)$/;"	f	namespace:cv::cuda::device
smem_tuple	core/cuda/reduce.hpp	/^    smem_tuple(T0* t0, T1* t1, T2* t2, T3* t3, T4* t4, T5* t5, T6* t6)$/;"	f	namespace:cv::cuda::device
smem_tuple	core/cuda/reduce.hpp	/^    smem_tuple(T0* t0, T1* t1, T2* t2, T3* t3, T4* t4, T5* t5, T6* t6, T7* t7)$/;"	f	namespace:cv::cuda::device
smem_tuple	core/cuda/reduce.hpp	/^    smem_tuple(T0* t0, T1* t1, T2* t2, T3* t3, T4* t4, T5* t5, T6* t6, T7* t7, T8* t8)$/;"	f	namespace:cv::cuda::device
smem_tuple	core/cuda/reduce.hpp	/^    smem_tuple(T0* t0, T1* t1, T2* t2, T3* t3, T4* t4, T5* t5, T6* t6, T7* t7, T8* t8, T9* t9)$/;"	f	namespace:cv::cuda::device
smem_tuple	cudev/warp/reduce.hpp	/^smem_tuple(T0* t0)$/;"	f	namespace:cv::cudev
smem_tuple	cudev/warp/reduce.hpp	/^smem_tuple(T0* t0, T1* t1)$/;"	f	namespace:cv::cudev
smem_tuple	cudev/warp/reduce.hpp	/^smem_tuple(T0* t0, T1* t1, T2* t2)$/;"	f	namespace:cv::cudev
smem_tuple	cudev/warp/reduce.hpp	/^smem_tuple(T0* t0, T1* t1, T2* t2, T3* t3)$/;"	f	namespace:cv::cudev
smem_tuple	cudev/warp/reduce.hpp	/^smem_tuple(T0* t0, T1* t1, T2* t2, T3* t3, T4* t4)$/;"	f	namespace:cv::cudev
smem_tuple	cudev/warp/reduce.hpp	/^smem_tuple(T0* t0, T1* t1, T2* t2, T3* t3, T4* t4, T5* t5)$/;"	f	namespace:cv::cudev
smem_tuple	cudev/warp/reduce.hpp	/^smem_tuple(T0* t0, T1* t1, T2* t2, T3* t3, T4* t4, T5* t5, T6* t6)$/;"	f	namespace:cv::cudev
smem_tuple	cudev/warp/reduce.hpp	/^smem_tuple(T0* t0, T1* t1, T2* t2, T3* t3, T4* t4, T5* t5, T6* t6, T7* t7)$/;"	f	namespace:cv::cudev
smem_tuple	cudev/warp/reduce.hpp	/^smem_tuple(T0* t0, T1* t1, T2* t2, T3* t3, T4* t4, T5* t5, T6* t6, T7* t7, T8* t8)$/;"	f	namespace:cv::cudev
smem_tuple	cudev/warp/reduce.hpp	/^smem_tuple(T0* t0, T1* t1, T2* t2, T3* t3, T4* t4, T5* t5, T6* t6, T7* t7, T8* t8, T9* t9)$/;"	f	namespace:cv::cudev
sobelXPtr	cudev/ptr2d/deriv.hpp	/^__host__ SobelXPtrSz<typename PtrTraits<SrcPtr>::ptr_type> sobelXPtr(const SrcPtr& src)$/;"	f	namespace:cv::cudev
sobelX_	cudev/expr/deriv.hpp	/^sobelX_(const SrcPtr& src)$/;"	f	namespace:cv::cudev
sobelYPtr	cudev/ptr2d/deriv.hpp	/^__host__ SobelYPtrSz<typename PtrTraits<SrcPtr>::ptr_type> sobelYPtr(const SrcPtr& src)$/;"	f	namespace:cv::cudev
sobelY_	cudev/expr/deriv.hpp	/^sobelY_(const SrcPtr& src)$/;"	f	namespace:cv::cudev
solve	core/matx.hpp	/^Vec<_Tp, n> Matx<_Tp, m, n>::solve(const Vec<_Tp, m>& rhs, int method) const$/;"	f	class:cv::Matx
solve	core/operations.hpp	/^Matx<_Tp, n, l> Matx<_Tp, m, n>::solve(const Matx<_Tp, m, l>& rhs, int method) const$/;"	f	class:cv::Matx
solve2x2	core/cuda/utility.hpp	/^    template <typename T> __device__ __forceinline__ bool solve2x2(const T A[2][2], const T b[2], T x[2])$/;"	f	namespace:cv::cuda::device
solve3x3	core/cuda/utility.hpp	/^    template <typename T> __device__ __forceinline__ bool solve3x3(const T A[3][3], const T b[3], T x[3])$/;"	f	namespace:cv::cuda::device
solveZ	core/operations.hpp	/^inline void SVD::solveZ( InputArray m, OutputArray _dst )$/;"	f	class:cv::SVD
sortAndCopy	flann/result_set.h	/^    virtual void sortAndCopy(int* indices, DistanceType* dist, int n_neighbors = -1) const$/;"	f	class:cvflann::UniqueResultSet
speckleRange	calib3d/calib3d_c.h	/^    int speckleRange; \/\/ acceptable range of variation in window$/;"	m	struct:CvStereoBMState
speckleWindowSize	calib3d/calib3d_c.h	/^    int speckleWindowSize; \/\/ disparity variation window$/;"	m	struct:CvStereoBMState
speed_level_	flann/lsh_table.h	/^    SpeedLevel speed_level_;$/;"	m	class:cvflann::lsh::LshTable
speedup_	flann/autotuned_index.h	/^    float speedup_;$/;"	m	class:cvflann::AutotunedIndex
splineInterpolate	core/cuda/detail/color_detail.hpp	/^        __device__ __forceinline__ float splineInterpolate(float x, const float* tab, int n)$/;"	f	namespace:cv::cuda::device::color_detail
splineInterpolate	cudev/functional/detail/color_cvt.hpp	/^    __device__ static float splineInterpolate(float x, const float* tab, int n)$/;"	f	namespace:cv::cudev::color_cvt_detail
split	cudev/grid/detail/split_merge.hpp	/^    __global__ void split(const SrcPtr src, GlobPtr<DstType> dst1, GlobPtr<DstType> dst2, GlobPtr<DstType> dst3, GlobPtr<DstType> dst4, const MaskPtr mask, const int rows, const int cols)$/;"	f	namespace:cv::cudev::grid_split_merge_detail
split	cudev/grid/detail/split_merge.hpp	/^    __global__ void split(const SrcPtr src, GlobPtr<DstType> dst1, GlobPtr<DstType> dst2, GlobPtr<DstType> dst3, const MaskPtr mask, const int rows, const int cols)$/;"	f	namespace:cv::cudev::grid_split_merge_detail
split	cudev/grid/detail/split_merge.hpp	/^    __global__ void split(const SrcPtr src, GlobPtr<DstType> dst1, GlobPtr<DstType> dst2, const MaskPtr mask, const int rows, const int cols)$/;"	f	namespace:cv::cudev::grid_split_merge_detail
split	cudev/grid/detail/split_merge.hpp	/^    __host__ void split(const SrcPtr& src, const GlobPtr<DstType>& dst1, const GlobPtr<DstType>& dst2, const GlobPtr<DstType>& dst3, const GlobPtr<DstType>& dst4, const MaskPtr& mask, int rows, int cols, cudaStream_t stream)$/;"	f	namespace:cv::cudev::grid_split_merge_detail
split	cudev/grid/detail/split_merge.hpp	/^    __host__ void split(const SrcPtr& src, const GlobPtr<DstType>& dst1, const GlobPtr<DstType>& dst2, const GlobPtr<DstType>& dst3, const MaskPtr& mask, int rows, int cols, cudaStream_t stream)$/;"	f	namespace:cv::cudev::grid_split_merge_detail
split	cudev/grid/detail/split_merge.hpp	/^    __host__ void split(const SrcPtr& src, const GlobPtr<DstType>& dst1, const GlobPtr<DstType>& dst2, const MaskPtr& mask, int rows, int cols, cudaStream_t stream)$/;"	f	namespace:cv::cudev::grid_split_merge_detail
split	ml.hpp	/^        int split; \/\/!< Index of the first split$/;"	m	class:cv::ml::DTrees::Node
sqr	stitching/detail/util_inl.hpp	/^static inline double sqr(double x) { return x * x; }$/;"	f	namespace:cv::detail
sqr	stitching/detail/util_inl.hpp	/^static inline float sqr(float x) { return x * x; }$/;"	f	namespace:cv::detail
sqr	stitching/detail/util_inl.hpp	/^static inline int sqr(int x) { return x * x; }$/;"	f	namespace:cv::detail
sqr_func	cudev/functional/functional.hpp	/^template <typename T> struct sqr_func : unary_function<T, T>$/;"	s	namespace:cv::cudev
squareDistance	flann/dist.h	/^struct squareDistance$/;"	s	namespace:cvflann
squareDistance	flann/dist.h	/^struct squareDistance<ChiSquareDistance<ElementType>, ElementType>$/;"	s	namespace:cvflann
squareDistance	flann/dist.h	/^struct squareDistance<HellingerDistance<ElementType>, ElementType>$/;"	s	namespace:cvflann
squareDistance	flann/dist.h	/^struct squareDistance<L2<ElementType>, ElementType>$/;"	s	namespace:cvflann
squareDistance	flann/dist.h	/^struct squareDistance<L2_Simple<ElementType>, ElementType>$/;"	s	namespace:cvflann
squareDistance	flann/dist.h	/^struct squareDistance<MinkowskiDistance<ElementType>, ElementType>$/;"	s	namespace:cvflann
src	core/cuda/border_interpolate.hpp	/^        Ptr2D src;$/;"	m	struct:cv::cuda::device::BorderReader
src	core/cuda/filters.hpp	/^        Ptr2D src;$/;"	m	struct:cv::cuda::device::AreaFilter
src	core/cuda/filters.hpp	/^        Ptr2D src;$/;"	m	struct:cv::cuda::device::CubicFilter
src	core/cuda/filters.hpp	/^        Ptr2D src;$/;"	m	struct:cv::cuda::device::IntegerAreaFilter
src	core/cuda/filters.hpp	/^        Ptr2D src;$/;"	m	struct:cv::cuda::device::LinearFilter
src	core/cuda/filters.hpp	/^        Ptr2D src;$/;"	m	struct:cv::cuda::device::PointFilter
src	cudev/expr/reduction.hpp	/^    SrcPtr src;$/;"	m	struct:cv::cudev::CountNonZeroExprBody
src	cudev/expr/reduction.hpp	/^    SrcPtr src;$/;"	m	struct:cv::cudev::FindMaxValExprBody
src	cudev/expr/reduction.hpp	/^    SrcPtr src;$/;"	m	struct:cv::cudev::FindMinMaxValExprBody
src	cudev/expr/reduction.hpp	/^    SrcPtr src;$/;"	m	struct:cv::cudev::FindMinValExprBody
src	cudev/expr/reduction.hpp	/^    SrcPtr src;$/;"	m	struct:cv::cudev::HistogramBody
src	cudev/expr/reduction.hpp	/^    SrcPtr src;$/;"	m	struct:cv::cudev::IntegralBody
src	cudev/expr/reduction.hpp	/^    SrcPtr src;$/;"	m	struct:cv::cudev::ReduceToColumnBody
src	cudev/expr/reduction.hpp	/^    SrcPtr src;$/;"	m	struct:cv::cudev::ReduceToRowBody
src	cudev/expr/reduction.hpp	/^    SrcPtr src;$/;"	m	struct:cv::cudev::SumExprBody
src	cudev/expr/warping.hpp	/^    SrcPtr src;$/;"	m	struct:cv::cudev::PyrDownBody
src	cudev/expr/warping.hpp	/^    SrcPtr src;$/;"	m	struct:cv::cudev::PyrUpBody
src	cudev/expr/warping.hpp	/^    SrcPtr src;$/;"	m	struct:cv::cudev::TransposeBody
src	cudev/ptr2d/deriv.hpp	/^    SrcPtr src;$/;"	m	struct:cv::cudev::DerivXPtr
src	cudev/ptr2d/deriv.hpp	/^    SrcPtr src;$/;"	m	struct:cv::cudev::DerivYPtr
src	cudev/ptr2d/deriv.hpp	/^    SrcPtr src;$/;"	m	struct:cv::cudev::LaplacianPtr
src	cudev/ptr2d/deriv.hpp	/^    SrcPtr src;$/;"	m	struct:cv::cudev::ScharrXPtr
src	cudev/ptr2d/deriv.hpp	/^    SrcPtr src;$/;"	m	struct:cv::cudev::ScharrYPtr
src	cudev/ptr2d/deriv.hpp	/^    SrcPtr src;$/;"	m	struct:cv::cudev::SobelXPtr
src	cudev/ptr2d/deriv.hpp	/^    SrcPtr src;$/;"	m	struct:cv::cudev::SobelYPtr
src	cudev/ptr2d/deriv.hpp	/^   SrcPtr src;$/;"	m	struct:cv::cudev::LaplacianPtr
src	cudev/ptr2d/extrapolation.hpp	/^    SrcPtr src;$/;"	m	struct:cv::cudev::BrdBase
src	cudev/ptr2d/extrapolation.hpp	/^    SrcPtr src;$/;"	m	struct:cv::cudev::BrdConstant
src	cudev/ptr2d/interpolation.hpp	/^    SrcPtr src;$/;"	m	struct:cv::cudev::CommonAreaInterPtr
src	cudev/ptr2d/interpolation.hpp	/^    SrcPtr src;$/;"	m	struct:cv::cudev::CubicInterPtr
src	cudev/ptr2d/interpolation.hpp	/^    SrcPtr src;$/;"	m	struct:cv::cudev::IntegerAreaInterPtr
src	cudev/ptr2d/interpolation.hpp	/^    SrcPtr src;$/;"	m	struct:cv::cudev::LinearInterPtr
src	cudev/ptr2d/interpolation.hpp	/^    SrcPtr src;$/;"	m	struct:cv::cudev::NearestInterPtr
src	cudev/ptr2d/lut.hpp	/^    SrcPtr src;$/;"	m	struct:cv::cudev::LutPtr
src	cudev/ptr2d/remap.hpp	/^    SrcPtr src;$/;"	m	struct:cv::cudev::RemapPtr1
src	cudev/ptr2d/remap.hpp	/^    SrcPtr src;$/;"	m	struct:cv::cudev::RemapPtr2
src	cudev/ptr2d/resize.hpp	/^    SrcPtr src;$/;"	m	struct:cv::cudev::ResizePtr
src	cudev/ptr2d/transform.hpp	/^    SrcPtr src;$/;"	m	struct:cv::cudev::UnaryTransformPtr
src1	cudev/ptr2d/transform.hpp	/^    Src1Ptr src1;$/;"	m	struct:cv::cudev::BinaryTransformPtr
src2	cudev/ptr2d/transform.hpp	/^    Src2Ptr src2;$/;"	m	struct:cv::cudev::BinaryTransformPtr
src_	stitching/detail/seam_finders.hpp	/^        const Mat *src_;$/;"	m	class:cv::detail::DpSeamFinder::ImagePairLess
src_img_idx	stitching/detail/matchers.hpp	/^    int src_img_idx, dst_img_idx;       \/\/!< Images indices (optional)$/;"	m	struct:cv::detail::MatchesInfo
ss_	ts/ts_gtest.h	/^  const internal::scoped_ptr< ::std::stringstream> ss_;$/;"	m	class:testing::Message
stabilizationMotions	videostab/inpainting.hpp	/^    virtual const std::vector<Mat>& stabilizationMotions() const { return *stabilizationMotions_; }$/;"	f	class:cv::videostab::InpainterBase
stabilizationMotions	videostab/wobble_suppression.hpp	/^    virtual const std::vector<Mat>& stabilizationMotions() const { return *stabilizationMotions_; }$/;"	f	class:cv::videostab::WobbleSuppressorBase
stabilizationMotions_	videostab/inpainting.hpp	/^    const std::vector<Mat> *stabilizationMotions_;$/;"	m	class:cv::videostab::InpainterBase
stabilizationMotions_	videostab/stabilizer.hpp	/^    std::vector<Mat> stabilizationMotions_;$/;"	m	class:cv::videostab::StabilizerBase
stabilizationMotions_	videostab/wobble_suppression.hpp	/^    const std::vector<Mat> *stabilizationMotions_;$/;"	m	class:cv::videostab::WobbleSuppressorBase
stabilizedFrames	videostab/inpainting.hpp	/^    virtual const std::vector<Mat>& stabilizedFrames() const { return *stabilizedFrames_; }$/;"	f	class:cv::videostab::InpainterBase
stabilizedFrames_	videostab/inpainting.hpp	/^    const std::vector<Mat> *stabilizedFrames_;$/;"	m	class:cv::videostab::InpainterBase
stabilizedFrames_	videostab/stabilizer.hpp	/^    std::vector<Mat> stabilizedFrames_;$/;"	m	class:cv::videostab::StabilizerBase
stabilizedMasks_	videostab/stabilizer.hpp	/^    std::vector<Mat> stabilizedMasks_;$/;"	m	class:cv::videostab::StabilizerBase
stabilizers_	videostab/motion_stabilizing.hpp	/^    std::vector<Ptr<IMotionStabilizer> > stabilizers_;$/;"	m	class:cv::videostab::MotionStabilizationPipeline
stack	core/core_c.h	/^    CvSeq*   stack;        \/* the graph vertex stack *\/$/;"	m	struct:CvGraphScanner
stack	core/core_c.h	/^    int stack[CV_MAX_DIM]; \/**< for internal use *\/$/;"	m	struct:CvNArrayIterator
stage_classifier	objdetect/objdetect_c.h	/^    CvHaarStageClassifier* stage_classifier;$/;"	m	struct:CvHaarClassifierCascade
start	core/types.hpp	/^    int start, end;$/;"	m	class:cv::Range
start	flann/timer.h	/^    void start()$/;"	f	class:cvflann::StartStopTimer
start	imgproc/types_c.h	/^    CvPoint* start; \/**< point of the contour where the defect begins *\/$/;"	m	struct:CvConvexityDefect
startIdxs	features2d.hpp	/^        std::vector<int> startIdxs;$/;"	m	class:cv::DescriptorMatcher::DescriptorCollection
startTime	flann/timer.h	/^    int64 startTime;$/;"	m	class:cvflann::StartStopTimer
start_index	core/types_c.h	/^    int  start_index, end_index;$/;"	m	struct:CvSlice
start_index	core/types_c.h	/^  int    start_index;         \/**< Index of the first element in the block +  *\/$/;"	m	struct:CvSeqBlock
state	calib3d/calib3d_c.h	/^    int state;$/;"	m	class:CvLevMarq
state	calib3d/calib3d_c.h	/^CVAPI(void) cvReleaseStereoBMState( CvStereoBMState** state );$/;"	v
state	core.hpp	/^    uint64 state;$/;"	m	class:cv::RNG
state	core.hpp	/^    unsigned state[N];$/;"	m	class:cv::RNG_MT19937
state	core/persistence.hpp	/^    int state; \/\/!< the writer state$/;"	m	class:cv::FileStorage
statePost	video/tracking.hpp	/^    CV_PROP_RW Mat statePost;          \/\/!< corrected state (x(k)): x(k)=x'(k)+K(k)*(z(k)-H*x'(k))$/;"	m	class:cv::KalmanFilter
statePre	video/tracking.hpp	/^    CV_PROP_RW Mat statePre;           \/\/!< predicted state (x'(k)): x(k)=A*x(k-1)+B*u(k)$/;"	m	class:cv::KalmanFilter
state_	ts/ts_gtest.h	/^  UInt32 state_;$/;"	m	class:testing::internal::Random
state_post	video/tracking_c.h	/^    CvMat* state_post;          \/* corrected state (x(k)):$/;"	m	struct:CvKalman
state_pre	video/tracking_c.h	/^    CvMat* state_pre;           \/* predicted state (x'(k)):$/;"	m	struct:CvKalman
states_	stitching/detail/seam_finders.hpp	/^    std::vector<ComponentState> states_;$/;"	m	class:cv::detail::DpSeamFinder
staticCast	core/ptr.inl.hpp	/^Ptr<Y> Ptr<T>::staticCast() const$/;"	f	class:cv::Ptr
static_delete	flann/any.h	/^    virtual void static_delete(void** x)$/;"	f	struct:cvflann::anyimpl::big_any_policy
static_delete	flann/any.h	/^    virtual void static_delete(void**) { }$/;"	f	struct:cvflann::anyimpl::small_any_policy
status	objdetect/detection_based_tracker.hpp	/^            ObjectStatus status;$/;"	m	struct:cv::DetectionBasedTracker::ExtObject
status_	videostab/global_motion.hpp	/^    cuda::GpuMat status_;$/;"	m	class:cv::videostab::KeypointBasedMotionEstimatorGpu
status_	videostab/global_motion.hpp	/^    std::vector<uchar> status_;$/;"	m	class:cv::videostab::KeypointBasedMotionEstimator
status_	videostab/optical_flow.hpp	/^    cuda::GpuMat frame0_, frame1_, points0_, points1_, status_, errors_;$/;"	m	class:cv::videostab::SparsePyrLkOptFlowEstimatorGpu
std	core/cvstd.hpp	/^namespace std$/;"	n
std	ts/ts_gtest.h	/^namespace std {$/;"	n
stddev	ts/ts_perf.hpp	/^    double stddev;$/;"	m	struct:perf::performance_metrics
stdev	videostab/motion_stabilizing.hpp	/^    float stdev() const { return stdev_; }$/;"	f	class:cv::videostab::GaussianMotionFilter
stdevThresh	videostab/inpainting.hpp	/^    float stdevThresh() const { return stdevThresh_; }$/;"	f	class:cv::videostab::ConsistentMosaicInpainter
stdevThresh_	videostab/inpainting.hpp	/^    float stdevThresh_;$/;"	m	class:cv::videostab::ConsistentMosaicInpainter
stdev_	videostab/motion_stabilizing.hpp	/^    float stdev_;$/;"	m	class:cv::videostab::GaussianMotionFilter
step	core/cuda.hpp	/^    size_t step;$/;"	m	class:cv::cuda::GpuMat
step	core/cuda.hpp	/^    size_t step;$/;"	m	class:cv::cuda::HostMem
step	core/cuda_types.hpp	/^            size_t step;$/;"	m	struct:cv::cuda::PtrStep
step	core/mat.hpp	/^    MatStep step;$/;"	m	class:cv::Mat
step	core/mat.hpp	/^    MatStep step;$/;"	m	class:cv::UMat
step	core/types_c.h	/^        int step;$/;"	m	struct:CvMatND::__anon148
step	core/types_c.h	/^    int step;$/;"	m	struct:CvMat
step	cudev/ptr2d/glob.hpp	/^    size_t step;$/;"	m	struct:cv::cudev::GlobPtr
step	imgproc.hpp	/^    int step, elemSize;$/;"	m	class:cv::LineIterator
step1	core/cuda.inl.hpp	/^size_t GpuMat::step1() const$/;"	f	class:cv::cuda::GpuMat
step1	core/cuda.inl.hpp	/^size_t HostMem::step1() const$/;"	f	class:cv::cuda::HostMem
step1	core/mat.inl.hpp	/^size_t Mat::step1(int i) const$/;"	f	class:cv::Mat
step1	core/mat.inl.hpp	/^size_t Mat_<_Tp>::step1(int i) const$/;"	f	class:cv::Mat_
step1	core/mat.inl.hpp	/^size_t UMat::step1(int i) const$/;"	f	class:cv::UMat
step1	cudev/ptr2d/detail/gpumat.hpp	/^__host__ size_t GpuMat_<T>::step1() const$/;"	f	class:cv::cudev::GpuMat_
stepT	core/mat.inl.hpp	/^size_t Mat_<_Tp>::stepT(int i) const$/;"	f	class:cv::Mat_
stepT	cudev/ptr2d/detail/gpumat.hpp	/^__host__ size_t GpuMat_<T>::stepT() const$/;"	f	class:cv::cudev::GpuMat_
step_	ts/ts_gtest.h	/^    const IncrementT step_;$/;"	m	class:testing::internal::RangeGenerator::Iterator
step_	ts/ts_gtest.h	/^  const IncrementT step_;$/;"	m	class:testing::internal::RangeGenerator
stop	flann/timer.h	/^    void stop()$/;"	f	class:cvflann::StartStopTimer
storage	core/core_c.h	/^CVAPI(void)  cvClearMemStorage( CvMemStorage* storage );$/;"	v
storage	core/core_c.h	/^CVAPI(void)  cvReleaseMemStorage( CvMemStorage** storage );$/;"	v
storageIn	ts/ts_perf.hpp	/^    cv::FileStorage storageIn;$/;"	m	class:perf::Regression
storageInPath	ts/ts_perf.hpp	/^    std::string storageInPath;$/;"	m	class:perf::Regression
storageOut	ts/ts_perf.hpp	/^    cv::FileStorage storageOut;$/;"	m	class:perf::Regression
storageOutPath	ts/ts_perf.hpp	/^    std::string storageOutPath;$/;"	m	class:perf::Regression
stored	core/cvstd.hpp	/^    T* stored;$/;"	m	struct:cv::Ptr
str	core/types_c.h	/^        CvString str; \/**< text string *\/$/;"	m	union:CvFileNode::__anon149
str	core/types_c.h	/^    CvString str;$/;"	m	struct:CvStringHashNode
stream	flann/logger.h	/^    FILE* stream;$/;"	m	class:cvflann::Logger
stride	core/cuda/block.hpp	/^        static __device__ __forceinline__ unsigned int stride()$/;"	f	struct:cv::cuda::device::Block
stride	cudalegacy/NCV.hpp	/^    Ncv32u stride() const$/;"	f	class:NCVMatrix
stride	flann/matrix.h	/^    size_t stride;$/;"	m	class:cvflann::Matrix
string	ts/ts_gtest.h	/^  const std::string& string() const { return pathname_; }$/;"	f	class:testing::internal::FilePath
structs	core/persistence.hpp	/^    std::vector<char> structs; \/\/!< the stack of written structures$/;"	m	class:cv::FileStorage
subscribe	flann/object_factory.h	/^    bool subscribe(UniqueIdType id, ObjectCreator creator)$/;"	f	class:cvflann::ObjectFactory
subsetOfs	ml.hpp	/^        int subsetOfs; \/**< Offset of the bitset used by the split on a categorical variable.$/;"	m	class:cv::ml::DTrees::Split
substr	core/cvstd.hpp	/^String String::substr(size_t pos, size_t len) const$/;"	f	class:cv::String
success_	ts/ts_gtest.h	/^  bool success_;$/;"	m	class:testing::AssertionResult
suiteName	ts/ts_perf.hpp	/^    std::string suiteName;$/;"	m	class:perf::Regression
sum	cudev/grid/detail/reduce.hpp	/^        work_type sum;$/;"	m	struct:cv::cudev::grid_reduce_detail::SumReductor
sum	cudev/grid/detail/reduce.hpp	/^    __host__ void sum(const SrcPtr& src, ResType* result, const MaskPtr& mask, int rows, int cols, cudaStream_t stream)$/;"	f	namespace:cv::cudev::grid_reduce_detail
sum_	cudev/expr/reduction.hpp	/^sum_(const SrcPtr& src)$/;"	f	namespace:cv::cudev
sum_type	hal/intrin.hpp	/^    typedef _Tp sum_type;$/;"	t	struct:cv::V_TypeTraits
sum_type	hal/intrin.hpp	/^    typedef double sum_type;$/;"	t	struct:cv::V_TypeTraits
sum_type	hal/intrin.hpp	/^    typedef float sum_type;$/;"	t	struct:cv::V_TypeTraits
sum_type	hal/intrin.hpp	/^    typedef int sum_type;$/;"	t	struct:cv::V_TypeTraits
sum_type	hal/intrin.hpp	/^    typedef int64 sum_type;$/;"	t	struct:cv::V_TypeTraits
sum_type	hal/intrin.hpp	/^    typedef uint64 sum_type;$/;"	t	struct:cv::V_TypeTraits
sum_type	hal/intrin.hpp	/^    typedef unsigned sum_type;$/;"	t	struct:cv::V_TypeTraits
summary	ts/ts_gtest.h	/^  const char* summary() const { return summary_.c_str(); }$/;"	f	class:testing::TestPartResult
summary_	ts/ts_gtest.h	/^  std::string summary_;  \/\/ The test failure summary.$/;"	m	class:testing::TestPartResult
superres	superres.hpp	/^    namespace superres$/;"	n	namespace:cv
superres	superres/optical_flow.hpp	/^    namespace superres$/;"	n	namespace:cv
supports	core/cuda.inl.hpp	/^bool DeviceInfo::supports(FeatureSet feature_set) const$/;"	f	class:cv::cuda::DeviceInfo
suppressedFrame_	videostab/stabilizer.hpp	/^    Mat suppressedFrame_;$/;"	m	class:cv::videostab::TwoPassStabilizer
surf	stitching/detail/matchers.hpp	/^    Ptr<Feature2D> surf;$/;"	m	class:cv::detail::SurfFeaturesFinder
surf_	stitching/detail/matchers.hpp	/^    cuda::SURF_CUDA surf_;$/;"	m	class:cv::detail::SurfFeaturesFinderGpu
svm	core/opencl/opencl_svm.hpp	/^namespace cv { namespace ocl { namespace svm {$/;"	n	namespace:cv::ocl
svmDetector	objdetect.hpp	/^    CV_PROP std::vector<float> svmDetector;$/;"	m	struct:cv::HOGDescriptor
swap	core/cuda.inl.hpp	/^void GpuMat::swap(GpuMat& b)$/;"	f	class:cv::cuda::GpuMat
swap	core/cuda.inl.hpp	/^void HostMem::swap(HostMem& b)$/;"	f	class:cv::cuda::HostMem
swap	core/cuda.inl.hpp	/^void swap(GpuMat& a, GpuMat& b)$/;"	f	namespace:cv::cuda
swap	core/cuda.inl.hpp	/^void swap(HostMem& a, HostMem& b)$/;"	f	namespace:cv::cuda
swap	core/cuda/utility.hpp	/^    template <typename T> void __device__ __host__ __forceinline__ swap(T& a, T& b)$/;"	f	namespace:cv::cuda::device
swap	core/cvstd.hpp	/^    static inline void swap(cv::String& a, cv::String& b) { a.swap(b); }$/;"	f	namespace:std
swap	core/cvstd.hpp	/^void String::swap(String& str)$/;"	f	class:cv::String
swap	core/ptr.inl.hpp	/^void Ptr<T>::swap(Ptr<T>& o)$/;"	f	class:cv::Ptr
swap	core/ptr.inl.hpp	/^void swap(Ptr<T>& ptr1, Ptr<T>& ptr2){$/;"	f	namespace:cv
swap	cudev/ptr2d/detail/gpumat.hpp	/^__host__ void GpuMat_<T>::swap(GpuMat_& mat)$/;"	f	class:cv::cudev::GpuMat_
swap	flann/any.h	/^    any& swap(any& x)$/;"	f	struct:cvflann::any
symbol	viz/types.hpp	/^            String symbol;$/;"	m	class:cv::viz::KeyboardEvent
sync	core/cuda/block.hpp	/^        static __device__ __forceinline__ void sync()$/;"	f	struct:cv::cuda::device::Block
syncthreadsOr	core/cuda/emulation.hpp	/^        static __device__ __forceinline__ int syncthreadsOr(int pred)$/;"	f	struct:cv::cuda::device::Emulation
sz	core/mat.hpp	/^    Size sz;$/;"	m	class:cv::_InputArray
sz	core/ocl.hpp	/^    size_t sz;$/;"	m	class:cv::ocl::KernelArg
sz	core/utility.hpp	/^    size_t sz;$/;"	m	class:cv::AutoBuffer
sz1080p	ts/ts_perf.hpp	/^const cv::Size sz1080p = cv::Size(1920, 1080);$/;"	m	namespace:perf
sz1440p	ts/ts_perf.hpp	/^const cv::Size sz1440p = szWQHD;$/;"	m	namespace:perf
sz2160p	ts/ts_perf.hpp	/^const cv::Size sz2160p = cv::Size(3840, 2160);\/\/UHDTV1 4K$/;"	m	namespace:perf
sz240p	ts/ts_perf.hpp	/^const cv::Size sz240p = szQVGA;$/;"	m	namespace:perf
sz2K	ts/ts_perf.hpp	/^const cv::Size sz2K = cv::Size(2048, 2048);$/;"	m	namespace:perf
sz3MP	ts/ts_perf.hpp	/^const cv::Size sz3MP = cv::Size(2048, 1536);$/;"	m	namespace:perf
sz4320p	ts/ts_perf.hpp	/^const cv::Size sz4320p = cv::Size(7680, 4320);\/\/UHDTV2 8K$/;"	m	namespace:perf
sz5MP	ts/ts_perf.hpp	/^const cv::Size sz5MP = cv::Size(2592, 1944);$/;"	m	namespace:perf
sz720p	ts/ts_perf.hpp	/^const cv::Size sz720p = cv::Size(1280, 720);$/;"	m	namespace:perf
szODD	ts/ts_perf.hpp	/^const cv::Size szODD = cv::Size(127, 61);$/;"	m	namespace:perf
szQVGA	ts/ts_perf.hpp	/^const cv::Size szQVGA = cv::Size(320, 240);$/;"	m	namespace:perf
szSVGA	ts/ts_perf.hpp	/^const cv::Size szSVGA = cv::Size(800, 600);$/;"	m	namespace:perf
szSXGA	ts/ts_perf.hpp	/^const cv::Size szSXGA = cv::Size(1280, 1024);$/;"	m	namespace:perf
szSmall128	ts/ts_perf.hpp	/^const cv::Size szSmall128 = cv::Size(128, 128);$/;"	m	namespace:perf
szSmall24	ts/ts_perf.hpp	/^const cv::Size szSmall24 = cv::Size(24, 24);$/;"	m	namespace:perf
szSmall32	ts/ts_perf.hpp	/^const cv::Size szSmall32 = cv::Size(32, 32);$/;"	m	namespace:perf
szSmall64	ts/ts_perf.hpp	/^const cv::Size szSmall64 = cv::Size(64, 64);$/;"	m	namespace:perf
szVGA	ts/ts_perf.hpp	/^const cv::Size szVGA = cv::Size(640, 480);$/;"	m	namespace:perf
szWQHD	ts/ts_perf.hpp	/^const cv::Size szWQHD = cv::Size(2560, 1440);$/;"	m	namespace:perf
szXGA	ts/ts_perf.hpp	/^const cv::Size szXGA = cv::Size(1024, 768);$/;"	m	namespace:perf
sznHD	ts/ts_perf.hpp	/^const cv::Size sznHD = cv::Size(640, 360);$/;"	m	namespace:perf
szqHD	ts/ts_perf.hpp	/^const cv::Size szqHD = cv::Size(960, 540);$/;"	m	namespace:perf
t	core/matx.hpp	/^Matx<_Tp, n, m> Matx<_Tp, m, n>::t() const$/;"	f	class:cv::Matx
t	stitching/detail/camera.hpp	/^    Mat t; \/\/ Translation$/;"	m	struct:cv::detail::CameraParams
t	stitching/detail/warpers.hpp	/^    float t[3];$/;"	m	struct:cv::detail::ProjectorBase
table_number_	flann/lsh_index.h	/^    unsigned int table_number_;$/;"	m	class:cvflann::LshIndex
tables_	flann/lsh_index.h	/^    std::vector<lsh::LshTable<ElementType> > tables_;$/;"	m	class:cvflann::LshIndex
tag	core/types_c.h	/^    int tag;$/;"	m	struct:CvFileNode
target_precision_	flann/autotuned_index.h	/^    float target_precision_;$/;"	m	class:cvflann::AutotunedIndex
tbl	cudev/ptr2d/lut.hpp	/^    TablePtr tbl;$/;"	m	struct:cv::cudev::LutPtr
tcoords	viz/types.hpp	/^            Mat texture, tcoords;$/;"	m	class:cv::viz::Mesh
teal	viz/types.hpp	/^inline cv::viz::Color cv::viz::Color::teal()       { return Color(128, 128,   0); }$/;"	f	class:cv::viz::Color
tear_down_tc_	ts/ts_gtest.h	/^  Test::TearDownTestCaseFunc tear_down_tc_;$/;"	m	class:testing::TestCase
tegra	core/private.hpp	/^namespace tegra {$/;"	n
tell	core/core_c.h	/^template<typename _Tp> inline size_t SeqIterator<_Tp>::tell() const$/;"	f	class:cv::SeqIterator
temp1	video/tracking.hpp	/^    Mat temp1;$/;"	m	class:cv::KalmanFilter
temp1	video/tracking_c.h	/^    CvMat* temp1;               \/* temporary matrices *\/$/;"	m	struct:CvKalman
temp2	video/tracking.hpp	/^    Mat temp2;$/;"	m	class:cv::KalmanFilter
temp2	video/tracking_c.h	/^    CvMat* temp2;$/;"	m	struct:CvKalman
temp3	video/tracking.hpp	/^    Mat temp3;$/;"	m	class:cv::KalmanFilter
temp3	video/tracking_c.h	/^    CvMat* temp3;$/;"	m	struct:CvKalman
temp4	video/tracking.hpp	/^    Mat temp4;$/;"	m	class:cv::KalmanFilter
temp4	video/tracking_c.h	/^    CvMat* temp4;$/;"	m	struct:CvKalman
temp5	video/tracking.hpp	/^    Mat temp5;$/;"	m	class:cv::KalmanFilter
temp5	video/tracking_c.h	/^    CvMat* temp5;$/;"	m	struct:CvKalman
tempCopiedUMat	core/mat.inl.hpp	/^inline bool UMatData::tempCopiedUMat() const { return (flags & TEMP_COPIED_UMAT) == TEMP_COPIED_UMAT; }$/;"	f	class:cv::UMatData
tempUMat	core/mat.inl.hpp	/^inline bool UMatData::tempUMat() const { return (flags & TEMP_UMAT) != 0; }$/;"	f	class:cv::UMatData
termCriteria	stitching/detail/motion_estimators.hpp	/^    TermCriteria termCriteria() { return term_criteria_; }$/;"	f	class:cv::detail::BundleAdjusterBase
term_criteria_	stitching/detail/motion_estimators.hpp	/^    TermCriteria term_criteria_;$/;"	m	class:cv::detail::BundleAdjusterBase
termcrit	features2d.hpp	/^    TermCriteria termcrit;$/;"	m	class:cv::BOWKMeansTrainer
terminal_cost_	stitching/detail/seam_finders.hpp	/^    float terminal_cost_;$/;"	m	class:cv::detail::GraphCutSeamFinderGpu
terminationReason	ts/ts_perf.hpp	/^    int terminationReason;$/;"	m	struct:perf::performance_metrics
test	flann/dynamic_bitset.h	/^    bool test(size_t index) const$/;"	f	class:cvflann::DynamicBitset
test	ts.hpp	/^    BaseTest* test;$/;"	m	struct:cvtest::TestInfo
test	ts/ts_perf.hpp	/^        TestBase* test;$/;"	m	class:perf::TestBase::_declareHelper
testDataset_	flann/autotuned_index.h	/^    Matrix<ElementType> testDataset_;$/;"	m	class:cvflann::AutotunedIndex
testStrategy	ts/ts_perf.hpp	/^    enum PERF_STRATEGY testStrategy;$/;"	m	class:perf::TestBase	typeref:enum:perf::TestBase::PERF_STRATEGY
test_	ts/ts_gtest.h	/^    DeathTest* const test_;$/;"	m	class:testing::internal::DeathTest::ReturnSentinel
test_array	ts.hpp	/^    vector<vector<void*> > test_array;$/;"	m	class:cvtest::ArrayTest
test_base_name	ts/ts_gtest.h	/^    const string test_base_name;$/;"	m	struct:testing::internal::ParameterizedTestCaseInfo::TestInfo
test_case_base_name	ts/ts_gtest.h	/^    const string test_case_base_name;$/;"	m	struct:testing::internal::ParameterizedTestCaseInfo::TestInfo
test_case_count	ts.hpp	/^    int test_case_count; \/\/ the total number of test cases$/;"	m	class:cvtest::BaseTest
test_case_count_scale	ts.hpp	/^    double test_case_count_scale;$/;"	m	struct:cvtest::TSParams
test_case_idx	ts.hpp	/^    int test_case_idx;$/;"	m	class:cvtest::BadArgTest
test_case_idx	ts.hpp	/^    int test_case_idx;$/;"	m	struct:cvtest::TestInfo
test_case_infos_	ts/ts_gtest.h	/^  TestCaseInfoContainer test_case_infos_;$/;"	m	class:testing::internal::ParameterizedTestCaseRegistry
test_case_name	ts/ts_gtest.h	/^  const char* test_case_name() const { return test_case_name_.c_str(); }$/;"	f	class:testing::TestInfo
test_case_name_	ts/ts_gtest.h	/^  const std::string test_case_name_;     \/\/ Test case name$/;"	m	class:testing::TestInfo
test_case_name_	ts/ts_gtest.h	/^  const string test_case_name_;$/;"	m	class:testing::internal::ParameterizedTestCaseInfo
test_index_checks	flann/index_testing.h	/^float test_index_checks(NNIndex<Distance>& index, const Matrix<typename Distance::ElementType>& inputData,$/;"	f	namespace:cvflann
test_index_precision	flann/index_testing.h	/^float test_index_precision(NNIndex<Distance>& index, const Matrix<typename Distance::ElementType>& inputData,$/;"	f	namespace:cvflann
test_index_precisions	flann/index_testing.h	/^void test_index_precisions(NNIndex<Distance>& index, const Matrix<typename Distance::ElementType>& inputData,$/;"	f	namespace:cvflann
test_indices_	ts/ts_gtest.h	/^  std::vector<int> test_indices_;$/;"	m	class:testing::TestCase
test_info_list	ts/ts_gtest.h	/^  const std::vector<TestInfo*>& test_info_list() const {$/;"	f	class:testing::TestCase
test_info_list	ts/ts_gtest.h	/^  std::vector<TestInfo*>& test_info_list() { return test_info_list_; }$/;"	f	class:testing::TestCase
test_info_list_	ts/ts_gtest.h	/^  std::vector<TestInfo*> test_info_list_;$/;"	m	class:testing::TestCase
test_mat	ts.hpp	/^    vector<vector<Mat> > test_mat;$/;"	m	class:cvtest::ArrayTest
test_meta_factory	ts/ts_gtest.h	/^    const scoped_ptr<TestMetaFactoryBase<ParamType> > test_meta_factory;$/;"	m	struct:testing::internal::ParameterizedTestCaseInfo::TestInfo
test_part_results	ts/ts_gtest.h	/^  const std::vector<TestPartResult>& test_part_results() const {$/;"	f	class:testing::TestResult
test_part_results_	ts/ts_gtest.h	/^  std::vector<TestPartResult> test_part_results_;$/;"	m	class:testing::TestResult
test_properites_mutex_	ts/ts_gtest.h	/^  internal::Mutex test_properites_mutex_;$/;"	m	class:testing::TestResult
test_properties	ts/ts_gtest.h	/^  const std::vector<TestProperty>& test_properties() const {$/;"	f	class:testing::TestResult
test_properties_	ts/ts_gtest.h	/^  std::vector<TestProperty> test_properties_;$/;"	m	class:testing::TestResult
testing	ts/ts_gtest.h	/^namespace testing {$/;"	n
testing_internal	ts/ts_gtest.h	/^namespace testing_internal {$/;"	n
tests_	ts/ts_gtest.h	/^  TestInfoContainer tests_;$/;"	m	class:testing::internal::ParameterizedTestCaseInfo
texCoord_	core/opengl.hpp	/^    Buffer texCoord_;$/;"	m	class:cv::ogl::Arrays
texObj	cudev/ptr2d/texture.hpp	/^    cudaTextureObject_t texObj;$/;"	m	struct:cv::cudev::TexturePtr
texture	viz/types.hpp	/^            Mat texture, tcoords;$/;"	m	class:cv::viz::Mesh
textureThreshold	calib3d/calib3d_c.h	/^    int textureThreshold;  \/\/ the disparity is only computed for pixels$/;"	m	struct:CvStereoBMState
thickness	highgui.hpp	/^    int         thickness; \/\/ Qt: weight$/;"	m	struct:cv::QtFont
thickness	imgproc/imgproc_c.h	/^    int         thickness;    \/\/!< Qt: weight               \/** letters thickness *\/$/;"	m	struct:CvFont
this_type_does_not_support_comparisons	core/cuda.hpp	/^    void this_type_does_not_support_comparisons() const {}$/;"	f	class:cv::cuda::Stream
threadLineId	cudev/block/block.hpp	/^    __device__ __forceinline__ static uint threadLineId()$/;"	f	struct:cv::cudev::Block
thread_	ts/ts_gtest.h	/^  pthread_t thread_;  \/\/ The native thread object.$/;"	m	class:std::tr1::ThreadWithParam
thread_can_start_	ts/ts_gtest.h	/^  Notification* const thread_can_start_;$/;"	m	class:std::tr1::ThreadWithParam
thresh	core/cuda/functional.hpp	/^        T thresh;$/;"	m	struct:cv::cuda::device::thresh_binary_func
thresh	core/cuda/functional.hpp	/^        T thresh;$/;"	m	struct:cv::cuda::device::thresh_binary_inv_func
thresh	core/cuda/functional.hpp	/^        T thresh;$/;"	m	struct:cv::cuda::device::thresh_to_zero_func
thresh	core/cuda/functional.hpp	/^        T thresh;$/;"	m	struct:cv::cuda::device::thresh_to_zero_inv_func
thresh	core/cuda/functional.hpp	/^        T thresh;$/;"	m	struct:cv::cuda::device::thresh_trunc_func
thresh	core/types_c.h	/^    float   thresh[CV_MAX_DIM][2];  \/**< For uniform histograms.                      *\/$/;"	m	struct:CvHistogram
thresh	cudev/functional/functional.hpp	/^    T thresh;$/;"	m	struct:cv::cudev::ThreshBinaryFunc
thresh	cudev/functional/functional.hpp	/^    T thresh;$/;"	m	struct:cv::cudev::ThreshBinaryInvFunc
thresh	cudev/functional/functional.hpp	/^    T thresh;$/;"	m	struct:cv::cudev::ThreshToZeroFunc
thresh	cudev/functional/functional.hpp	/^    T thresh;$/;"	m	struct:cv::cudev::ThreshToZeroInvFunc
thresh	cudev/functional/functional.hpp	/^    T thresh;$/;"	m	struct:cv::cudev::ThreshTruncFunc
thresh	videostab/motion_core.hpp	/^    float thresh; \/\/!< max error to classify as inlier$/;"	m	struct:cv::videostab::RansacParams
thresh2	core/types_c.h	/^    float** thresh2;                \/**< For non-uniform histograms.                  *\/$/;"	m	struct:CvHistogram
threshBinaryInv_	cudev/expr/per_element_func.hpp	/^threshBinaryInv_(const SrcPtr& src, typename PtrTraits<SrcPtr>::value_type thresh, typename PtrTraits<SrcPtr>::value_type maxVal)$/;"	f	namespace:cv::cudev
threshBinary_	cudev/expr/per_element_func.hpp	/^threshBinary_(const SrcPtr& src, typename PtrTraits<SrcPtr>::value_type thresh, typename PtrTraits<SrcPtr>::value_type maxVal)$/;"	f	namespace:cv::cudev
threshToZeroInv_	cudev/expr/per_element_func.hpp	/^threshToZeroInv_(const SrcPtr& src, typename PtrTraits<SrcPtr>::value_type thresh)$/;"	f	namespace:cv::cudev
threshToZero_	cudev/expr/per_element_func.hpp	/^threshToZero_(const SrcPtr& src, typename PtrTraits<SrcPtr>::value_type thresh)$/;"	f	namespace:cv::cudev
threshTrunc_	cudev/expr/per_element_func.hpp	/^threshTrunc_(const SrcPtr& src, typename PtrTraits<SrcPtr>::value_type thresh)$/;"	f	namespace:cv::cudev
thresh_binary_func	core/cuda/functional.hpp	/^        __host__ __device__ __forceinline__ thresh_binary_func() {}$/;"	f	struct:cv::cuda::device::thresh_binary_func
thresh_binary_func	core/cuda/functional.hpp	/^        __host__ __device__ __forceinline__ thresh_binary_func(T thresh_, T maxVal_) : thresh(thresh_), maxVal(maxVal_) {}$/;"	f	struct:cv::cuda::device::thresh_binary_func
thresh_binary_func	core/cuda/functional.hpp	/^        __host__ __device__ __forceinline__ thresh_binary_func(const thresh_binary_func& other)$/;"	f	struct:cv::cuda::device::thresh_binary_func
thresh_binary_func	core/cuda/functional.hpp	/^    template <typename T> struct thresh_binary_func : unary_function<T, T>$/;"	s	namespace:cv::cuda::device
thresh_binary_func	cudev/functional/functional.hpp	/^__host__ __device__ ThreshBinaryFunc<T> thresh_binary_func(T thresh, T maxVal)$/;"	f	namespace:cv::cudev
thresh_binary_inv_func	core/cuda/functional.hpp	/^        __host__ __device__ __forceinline__ thresh_binary_inv_func() {}$/;"	f	struct:cv::cuda::device::thresh_binary_inv_func
thresh_binary_inv_func	core/cuda/functional.hpp	/^        __host__ __device__ __forceinline__ thresh_binary_inv_func(T thresh_, T maxVal_) : thresh(thresh_), maxVal(maxVal_) {}$/;"	f	struct:cv::cuda::device::thresh_binary_inv_func
thresh_binary_inv_func	core/cuda/functional.hpp	/^        __host__ __device__ __forceinline__ thresh_binary_inv_func(const thresh_binary_inv_func& other)$/;"	f	struct:cv::cuda::device::thresh_binary_inv_func
thresh_binary_inv_func	core/cuda/functional.hpp	/^    template <typename T> struct thresh_binary_inv_func : unary_function<T, T>$/;"	s	namespace:cv::cuda::device
thresh_binary_inv_func	cudev/functional/functional.hpp	/^__host__ __device__ ThreshBinaryInvFunc<T> thresh_binary_inv_func(T thresh, T maxVal)$/;"	f	namespace:cv::cudev
thresh_to_zero_func	core/cuda/functional.hpp	/^        __host__ __device__ __forceinline__ thresh_to_zero_func() {}$/;"	f	struct:cv::cuda::device::thresh_to_zero_func
thresh_to_zero_func	core/cuda/functional.hpp	/^        explicit __host__ __device__ __forceinline__ thresh_to_zero_func(T thresh_, T maxVal_ = 0) : thresh(thresh_) {(void)maxVal_;}$/;"	f	struct:cv::cuda::device::thresh_to_zero_func
thresh_to_zero_func	core/cuda/functional.hpp	/^       __host__  __device__ __forceinline__ thresh_to_zero_func(const thresh_to_zero_func& other)$/;"	f	struct:cv::cuda::device::thresh_to_zero_func
thresh_to_zero_func	core/cuda/functional.hpp	/^    template <typename T> struct thresh_to_zero_func : unary_function<T, T>$/;"	s	namespace:cv::cuda::device
thresh_to_zero_func	cudev/functional/functional.hpp	/^__host__ __device__ ThreshToZeroFunc<T> thresh_to_zero_func(T thresh)$/;"	f	namespace:cv::cudev
thresh_to_zero_inv_func	core/cuda/functional.hpp	/^        __host__ __device__ __forceinline__ thresh_to_zero_inv_func() {}$/;"	f	struct:cv::cuda::device::thresh_to_zero_inv_func
thresh_to_zero_inv_func	core/cuda/functional.hpp	/^        __host__ __device__ __forceinline__ thresh_to_zero_inv_func(const thresh_to_zero_inv_func& other)$/;"	f	struct:cv::cuda::device::thresh_to_zero_inv_func
thresh_to_zero_inv_func	core/cuda/functional.hpp	/^        explicit __host__ __device__ __forceinline__ thresh_to_zero_inv_func(T thresh_, T maxVal_ = 0) : thresh(thresh_) {(void)maxVal_;}$/;"	f	struct:cv::cuda::device::thresh_to_zero_inv_func
thresh_to_zero_inv_func	core/cuda/functional.hpp	/^    template <typename T> struct thresh_to_zero_inv_func : unary_function<T, T>$/;"	s	namespace:cv::cuda::device
thresh_to_zero_inv_func	cudev/functional/functional.hpp	/^__host__ __device__ ThreshToZeroInvFunc<T> thresh_to_zero_inv_func(T thresh)$/;"	f	namespace:cv::cudev
thresh_trunc_func	core/cuda/functional.hpp	/^        __host__ __device__ __forceinline__ thresh_trunc_func() {}$/;"	f	struct:cv::cuda::device::thresh_trunc_func
thresh_trunc_func	core/cuda/functional.hpp	/^        __host__ __device__ __forceinline__ thresh_trunc_func(const thresh_trunc_func& other)$/;"	f	struct:cv::cuda::device::thresh_trunc_func
thresh_trunc_func	core/cuda/functional.hpp	/^        explicit __host__ __device__ __forceinline__ thresh_trunc_func(T thresh_, T maxVal_ = 0) : thresh(thresh_) {(void)maxVal_;}$/;"	f	struct:cv::cuda::device::thresh_trunc_func
thresh_trunc_func	core/cuda/functional.hpp	/^    template <typename T> struct thresh_trunc_func : unary_function<T, T>$/;"	s	namespace:cv::cuda::device
thresh_trunc_func	cudev/functional/functional.hpp	/^__host__ __device__ ThreshTruncFunc<T> thresh_trunc_func(T thresh)$/;"	f	namespace:cv::cudev
threshold	objdetect/objdetect_c.h	/^    float threshold;$/;"	m	struct:CvHaarStageClassifier
threshold	objdetect/objdetect_c.h	/^    float* threshold;$/;"	m	struct:CvHaarClassifier
thresholdStep	features2d.hpp	/^      CV_PROP_RW float thresholdStep;$/;"	m	struct:cv::SimpleBlobDetector::Params
throw_no_cuda	core/private.cuda.hpp	/^static inline void throw_no_cuda() { CV_Error(cv::Error::GpuNotSupported, "The library is compiled without CUDA support"); }$/;"	f
tileInfo	core/types_c.h	/^    struct _IplTileInfo *tileInfo;  \/**< "           " *\/$/;"	m	struct:_IplImage	typeref:struct:_IplImage::_IplTileInfo
tile_dim	cudev/grid/transpose.hpp	/^        tile_dim    = 16,$/;"	e	enum:cv::cudev::DefaultTransposePolicy::__anon391
tilted	objdetect/objdetect_c.h	/^    int tilted;$/;"	m	struct:CvHaarFeature
timeLimit	ts/ts_perf.hpp	/^    int64 timeLimit;$/;"	m	class:perf::TestBase
timeLimitDefault	ts/ts_perf.hpp	/^    static int64 timeLimitDefault;$/;"	m	class:perf::TestBase
times	ts/ts_perf.hpp	/^    TimeVector times;$/;"	m	class:perf::TestBase
tl	core/types.hpp	/^Point_<_Tp> Rect_<_Tp>::tl() const$/;"	f	class:cv::Rect_
tls_	stitching/detail/seam_finders.hpp	/^    std::vector<Point> tls_, brs_;$/;"	m	class:cv::detail::DpSeamFinder
to	stitching/detail/util.hpp	/^    int from, to;$/;"	m	struct:cv::detail::GraphEdge
toCvType	core/ippasync.hpp	/^    inline int toCvType(const int hppType)$/;"	f	namespace:cv::hpp
toHppType	core/ippasync.hpp	/^    inline int toHppType(const int cvType)$/;"	f	namespace:cv::hpp
toLowerCase	core/cvstd.hpp	/^String String::toLowerCase() const$/;"	f	class:cv::String
top	core/types_c.h	/^    CvMemBlock* top;              \/**< Current memory block - top of the stack. *\/$/;"	m	struct:CvMemStorage
top	core/types_c.h	/^    CvMemBlock* top;$/;"	m	struct:CvMemStoragePos
top	ts/ocl_test.hpp	/^        int top, bot, lef, rig;$/;"	m	struct:cvtest::ocl::TestUtils::Border
topLeft	imgproc.hpp	/^    Point2f topLeft;$/;"	m	class:cv::Subdiv2D
total	core/mat.inl.hpp	/^size_t Mat::total() const$/;"	f	class:cv::Mat
total	core/mat.inl.hpp	/^size_t UMat::total() const$/;"	f	class:cv::UMat
totalCost	flann/autotuned_index.h	/^        float totalCost;$/;"	m	struct:cvflann::AutotunedIndex::CostData
totalMemory	core/cuda.inl.hpp	/^size_t DeviceInfo::totalMemory() const$/;"	f	class:cv::cuda::DeviceInfo
totalTime	ts/ts_perf.hpp	/^    int64 totalTime;$/;"	m	class:perf::TestBase
total_num_matches_	stitching/detail/motion_estimators.hpp	/^    int total_num_matches_;$/;"	m	class:cv::detail::BundleAdjusterBase
tr1	ts/ts_gtest.h	/^namespace tr1 {$/;"	n	namespace:std
trace	core/matx.hpp	/^double trace(const Matx<_Tp, m, n>& a)$/;"	f	namespace:cv
trackedObjects	objdetect/detection_based_tracker.hpp	/^        std::vector<TrackedObject> trackedObjects;$/;"	m	class:cv::DetectionBasedTracker
train	ml.hpp	/^    template<typename _Tp> static Ptr<_Tp> train(const Ptr<TrainData>& data, int flags=0)$/;"	f	class:cv::ml::StatModel
trainDescCollection	features2d.hpp	/^    std::vector<Mat> trainDescCollection;$/;"	m	class:cv::DescriptorMatcher
trainIdx	core/types.hpp	/^    CV_PROP_RW int trainIdx; \/\/ train descriptor index$/;"	m	class:cv::DMatch
transform	core/cuda/transform.hpp	/^    static inline void transform(PtrStepSz<T1> src1, PtrStepSz<T2> src2, PtrStepSz<D> dst, BinOp op, const Mask& mask, cudaStream_t stream)$/;"	f	namespace:cv::cuda::device
transform	core/cuda/transform.hpp	/^    static inline void transform(PtrStepSz<T> src, PtrStepSz<D> dst, UnOp op, const Mask& mask, cudaStream_t stream)$/;"	f	namespace:cv::cuda::device
transform	core/cuda/warp.hpp	/^        static __device__ __forceinline__ OutIt transform(InIt beg, InIt end, OutIt out, UnOp op)$/;"	f	struct:cv::cuda::device::Warp
transform	core/cuda/warp.hpp	/^        static __device__ __forceinline__ OutIt transform(InIt1 beg1, InIt1 end1, InIt2 beg2, OutIt out, BinOp op)$/;"	f	struct:cv::cuda::device::Warp
transform	cudev/grid/detail/transform.hpp	/^        __device__ __forceinline__ static void transform(const SrcVal&, DstPtrTuple&, const OpTuple&, int, int)$/;"	f	struct:cv::cudev::grid_transform_detail::Unroll
transform	cudev/grid/detail/transform.hpp	/^        __device__ static void transform(const SrcVal& srcVal, DstPtrTuple& dst, const OpTuple& op, int y, int x)$/;"	f	struct:cv::cudev::grid_transform_detail::Unroll
transformPtr	cudev/ptr2d/transform.hpp	/^transformPtr(const Src1Ptr& src1, const Src2Ptr& src2, const Op& op)$/;"	f	namespace:cv::cudev
transformPtr	cudev/ptr2d/transform.hpp	/^transformPtr(const SrcPtr& src, const Op& op)$/;"	f	namespace:cv::cudev
transformSimple	core/cuda/detail/transform_detail.hpp	/^        __global__ static void transformSimple(const PtrStepSz<T> src, PtrStep<D> dst, const Mask mask, const UnOp op)$/;"	f	namespace:cv::cuda::device::transform_detail
transformSimple	core/cuda/detail/transform_detail.hpp	/^        static __global__ void transformSimple(const PtrStepSz<T1> src1, const PtrStep<T2> src2, PtrStep<D> dst,$/;"	f	namespace:cv::cuda::device::transform_detail
transformSimple	cudev/grid/detail/transform.hpp	/^    __global__ void transformSimple(const SrcPtr src, GlobPtr<DstType> dst, const UnOp op, const MaskPtr mask, const int rows, const int cols)$/;"	f	namespace:cv::cudev::grid_transform_detail
transformSimple	cudev/grid/detail/transform.hpp	/^    __global__ void transformSimple(const SrcPtr1 src1, const SrcPtr2 src2, GlobPtr<DstType> dst, const BinOp op, const MaskPtr mask, const int rows, const int cols)$/;"	f	namespace:cv::cudev::grid_transform_detail
transformSmart	core/cuda/detail/transform_detail.hpp	/^        static __global__ void transformSmart(const PtrStepSz<T1> src1_, const PtrStep<T2> src2_, PtrStep<D> dst_,$/;"	f	namespace:cv::cuda::device::transform_detail
transformSmart	core/cuda/detail/transform_detail.hpp	/^        static __global__ void transformSmart(const PtrStepSz<T> src_, PtrStep<D> dst_, const Mask mask, const UnOp op)$/;"	f	namespace:cv::cuda::device::transform_detail
transformSmart	cudev/grid/detail/transform.hpp	/^    __global__ void transformSmart(const GlobPtr<SrcType1> src1_, const GlobPtr<SrcType2> src2_, GlobPtr<DstType> dst_, const BinOp op, const MaskPtr mask, const int rows, const int cols)$/;"	f	namespace:cv::cudev::grid_transform_detail
transformSmart	cudev/grid/detail/transform.hpp	/^    __global__ void transformSmart(const GlobPtr<SrcType> src_, GlobPtr<DstType> dst_, const UnOp op, const MaskPtr mask, const int rows, const int cols)$/;"	f	namespace:cv::cudev::grid_transform_detail
transform_binary	cudev/grid/detail/transform.hpp	/^    __host__ void transform_binary(const GlobPtr<SrcType1>& src1, const GlobPtr<SrcType2>& src2, const GlobPtr<DstType>& dst, const BinOp& op, const MaskPtr& mask, int rows, int cols, cudaStream_t stream)$/;"	f	namespace:cv::cudev::grid_transform_detail
transform_binary	cudev/grid/detail/transform.hpp	/^    __host__ void transform_binary(const SrcPtr1& src1, const SrcPtr2& src2, const GlobPtr<DstType>& dst, const BinOp& op, const MaskPtr& mask, int rows, int cols, cudaStream_t stream)$/;"	f	namespace:cv::cudev::grid_transform_detail
transform_detail	core/cuda/detail/transform_detail.hpp	/^    namespace transform_detail$/;"	n	namespace:cv::cuda::device
transform_tuple	cudev/grid/detail/transform.hpp	/^    __global__ void transform_tuple(const SrcPtr src, DstPtrTuple dst, const OpTuple op, const MaskPtr mask, const int rows, const int cols)$/;"	f	namespace:cv::cudev::grid_transform_detail
transform_tuple	cudev/grid/detail/transform.hpp	/^    __host__ void transform_tuple(const SrcPtrTuple& src, const DstPtrTuple& dst, const OpTuple& op, const MaskPtr& mask, int rows, int cols, cudaStream_t stream)$/;"	f	namespace:cv::cudev::grid_transform_detail
transform_unary	cudev/grid/detail/transform.hpp	/^    __host__ void transform_unary(const GlobPtr<SrcType>& src, const GlobPtr<DstType>& dst, const UnOp& op, const MaskPtr& mask, int rows, int cols, cudaStream_t stream)$/;"	f	namespace:cv::cudev::grid_transform_detail
transform_unary	cudev/grid/detail/transform.hpp	/^    __host__ void transform_unary(const SrcPtr& src, const GlobPtr<DstType>& dst, const UnOp& op, const MaskPtr& mask, int rows, int cols, cudaStream_t stream)$/;"	f	namespace:cv::cudev::grid_transform_detail
transformedFrame1_	videostab/inpainting.hpp	/^    Mat frame1_, transformedFrame1_;$/;"	m	class:cv::videostab::MotionInpainter
transformedGrayFrame1_	videostab/inpainting.hpp	/^    Mat_<uchar> grayFrame_, transformedGrayFrame1_;$/;"	m	class:cv::videostab::MotionInpainter
transformedMask1_	videostab/inpainting.hpp	/^    Mat_<uchar> mask1_, transformedMask1_;$/;"	m	class:cv::videostab::MotionInpainter
transfrom	core/cuda/block.hpp	/^        static __device__ __forceinline__ void transfrom(InIt beg, InIt end, OutIt out, UnOp op)$/;"	f	struct:cv::cuda::device::Block
transfrom	core/cuda/block.hpp	/^        static __device__ __forceinline__ void transfrom(InIt1 beg1, InIt1 end1, InIt2 beg2, OutIt out, BinOp op)$/;"	f	struct:cv::cuda::device::Block
transitionMatrix	video/tracking.hpp	/^    CV_PROP_RW Mat transitionMatrix;   \/\/!< state transition matrix (A)$/;"	m	class:cv::KalmanFilter
transition_matrix	video/tracking_c.h	/^    CvMat* transition_matrix;   \/* state transition matrix (A) *\/$/;"	m	struct:CvKalman
translate	core/affine.hpp	/^cv::Affine3<T> cv::Affine3<T>::translate(const Vec3& t) const$/;"	f	class:cv::Affine3
translation	core/affine.hpp	/^typename cv::Affine3<T>::Vec3 cv::Affine3<T>::translation() const$/;"	f	class:cv::Affine3
translation	core/affine.hpp	/^void cv::Affine3<T>::translation(const Vec3& t)$/;"	f	class:cv::Affine3
transpose	cudev/grid/detail/transpose.hpp	/^    __global__ void transpose(const SrcPtr src, GlobPtr<DstType> dst, const int rows, const int cols)$/;"	f	namespace:cv::cudev::transpose_detail
transpose	cudev/grid/detail/transpose.hpp	/^    __host__ void transpose(const SrcPtr& src, const GlobPtr<DstType>& dst, int rows, int cols, cudaStream_t stream)$/;"	f	namespace:cv::cudev::transpose_detail
transpose_	cudev/expr/warping.hpp	/^transpose_(const SrcPtr& src)$/;"	f	namespace:cv::cudev
transpose_detail	cudev/grid/detail/transpose.hpp	/^namespace transpose_detail$/;"	n	namespace:cv::cudev
tree_iterator	core/core_c.h	/^CVAPI(void*) cvNextTreeNode( CvTreeNodeIterator* tree_iterator );$/;"	v
tree_iterator	core/core_c.h	/^CVAPI(void*) cvPrevTreeNode( CvTreeNodeIterator* tree_iterator );$/;"	v
tree_roots_	flann/kdtree_index.h	/^    NodePtr* tree_roots_;$/;"	m	class:cvflann::KDTreeIndex
trees_	flann/hierarchical_clustering_index.h	/^    int trees_;$/;"	m	class:cvflann::HierarchicalClusteringIndex
trees_	flann/kdtree_index.h	/^    int trees_;$/;"	m	class:cvflann::KDTreeIndex
trimRatio	videostab/motion_stabilizing.hpp	/^    float trimRatio() const { return trimRatio_; }$/;"	f	class:cv::videostab::LpMotionStabilizer
trimRatio	videostab/stabilizer.hpp	/^    float trimRatio() const { return trimRatio_; }$/;"	f	class:cv::videostab::StabilizerBase
trimRatio_	videostab/motion_stabilizing.hpp	/^    float trimRatio_;$/;"	m	class:cv::videostab::LpMotionStabilizer
trimRatio_	videostab/stabilizer.hpp	/^    float trimRatio_;$/;"	m	class:cv::videostab::StabilizerBase
true_type	ts/ts_gtest.h	/^typedef bool_constant<true> true_type;$/;"	t	namespace:std::tr1
trySmallerWindows	calib3d/calib3d_c.h	/^    int trySmallerWindows; \/\/ if 1, the results may be more accurate,$/;"	m	struct:CvStereoBMState
ts	ts.hpp	/^    TS* ts;$/;"	m	class:cvtest::BaseTest
tuple	ts/ts_gtest.h	/^  tuple() : f0_(), f1_(), f2_(), f3_(), f4_(), f5_(), f6_(), f7_(), f8_(),$/;"	f	class:std::tr1::tuple
tuple	ts/ts_gtest.h	/^  tuple() {}$/;"	f	class:std::tr1::tuple
tuple	ts/ts_gtest.h	/^  tuple(const tuple& \/* t *\/)  {}$/;"	f	class:std::tr1::tuple
tuple	ts/ts_gtest.h	/^  tuple(const tuple& t) : f0_(t.f0_), f1_(t.f1_), f2_(t.f2_), f3_(t.f3_),$/;"	f	class:std::tr1::tuple
tuple	ts/ts_gtest.h	/^class tuple {$/;"	c	namespace:std::tr1
tuple	ts/ts_gtest.h	/^class tuple<> {$/;"	c	namespace:std::tr1
tuple_detail	cudev/util/detail/tuple.hpp	/^namespace tuple_detail$/;"	n	namespace:cv::cudev
tuple_element	ts/ts_gtest.h	/^struct tuple_element {$/;"	s	namespace:std::tr1
tuple_size	ts/ts_gtest.h	/^struct tuple_size<GTEST_0_TUPLE_(T)> {$/;"	s	namespace:std::tr1
tuple_size	ts/ts_gtest.h	/^struct tuple_size<GTEST_10_TUPLE_(T)> {$/;"	s	namespace:std::tr1
tuple_size	ts/ts_gtest.h	/^struct tuple_size<GTEST_1_TUPLE_(T)> {$/;"	s	namespace:std::tr1
tuple_size	ts/ts_gtest.h	/^struct tuple_size<GTEST_2_TUPLE_(T)> {$/;"	s	namespace:std::tr1
tuple_size	ts/ts_gtest.h	/^struct tuple_size<GTEST_3_TUPLE_(T)> {$/;"	s	namespace:std::tr1
tuple_size	ts/ts_gtest.h	/^struct tuple_size<GTEST_4_TUPLE_(T)> {$/;"	s	namespace:std::tr1
tuple_size	ts/ts_gtest.h	/^struct tuple_size<GTEST_5_TUPLE_(T)> {$/;"	s	namespace:std::tr1
tuple_size	ts/ts_gtest.h	/^struct tuple_size<GTEST_6_TUPLE_(T)> {$/;"	s	namespace:std::tr1
tuple_size	ts/ts_gtest.h	/^struct tuple_size<GTEST_7_TUPLE_(T)> {$/;"	s	namespace:std::tr1
tuple_size	ts/ts_gtest.h	/^struct tuple_size<GTEST_8_TUPLE_(T)> {$/;"	s	namespace:std::tr1
tuple_size	ts/ts_gtest.h	/^struct tuple_size<GTEST_9_TUPLE_(T)> {$/;"	s	namespace:std::tr1
turquoise	viz/types.hpp	/^inline cv::viz::Color cv::viz::Color::turquoise()      { return Color(208, 224,  64); }$/;"	f	class:cv::viz::Color
type	core.hpp	/^    enum { type = Param::ALGORITHM };$/;"	e	enum:cv::ParamType::__anon411
type	core.hpp	/^    enum { type = Param::BOOLEAN };$/;"	e	enum:cv::ParamType::__anon405
type	core.hpp	/^    enum { type = Param::FLOAT };$/;"	e	enum:cv::ParamType::__anon412
type	core.hpp	/^    enum { type = Param::INT };$/;"	e	enum:cv::ParamType::__anon406
type	core.hpp	/^    enum { type = Param::MAT };$/;"	e	enum:cv::ParamType::__anon409
type	core.hpp	/^    enum { type = Param::MAT_VECTOR };$/;"	e	enum:cv::ParamType::__anon410
type	core.hpp	/^    enum { type = Param::REAL };$/;"	e	enum:cv::ParamType::__anon407
type	core.hpp	/^    enum { type = Param::STRING };$/;"	e	enum:cv::ParamType::__anon408
type	core.hpp	/^    enum { type = Param::UCHAR };$/;"	e	enum:cv::ParamType::__anon415
type	core.hpp	/^    enum { type = Param::UINT64 };$/;"	e	enum:cv::ParamType::__anon414
type	core.hpp	/^    enum { type = Param::UNSIGNED_INT };$/;"	e	enum:cv::ParamType::__anon413
type	core/affine.hpp	/^               type         = CV_MAKETYPE(depth, channels)$/;"	e	enum:cv::DataType::__anon162
type	core/core_c.h	/^template<typename _Tp> inline int Seq<_Tp>::type() const$/;"	f	class:cv::Seq
type	core/cuda.inl.hpp	/^int GpuMat::type() const$/;"	f	class:cv::cuda::GpuMat
type	core/cuda.inl.hpp	/^int HostMem::type() const$/;"	f	class:cv::cuda::HostMem
type	core/cuda/detail/reduce.hpp	/^            typedef T type;$/;"	t	struct:cv::cuda::device::reduce_detail::GetType
type	core/cuda/detail/reduce.hpp	/^            typedef T1 type;$/;"	t	struct:cv::cuda::device::reduce_detail::StaticIf
type	core/cuda/detail/reduce.hpp	/^            typedef T2 type;$/;"	t	struct:cv::cuda::device::reduce_detail::StaticIf
type	core/cuda/detail/reduce_key_val.hpp	/^            typedef T type;$/;"	t	struct:cv::cuda::device::reduce_key_val_detail::GetType
type	core/cuda/detail/reduce_key_val.hpp	/^            typedef T1 type;$/;"	t	struct:cv::cuda::device::reduce_key_val_detail::StaticIf
type	core/cuda/detail/reduce_key_val.hpp	/^            typedef T2 type;$/;"	t	struct:cv::cuda::device::reduce_key_val_detail::StaticIf
type	core/cuda/detail/type_traits_detail.hpp	/^            typedef U type;$/;"	t	struct:cv::cuda::device::type_traits_detail::PointerTraits
type	core/cuda/detail/type_traits_detail.hpp	/^            typedef U type;$/;"	t	struct:cv::cuda::device::type_traits_detail::ReferenceTraits
type	core/cuda/detail/type_traits_detail.hpp	/^            typedef U type;$/;"	t	struct:cv::cuda::device::type_traits_detail::UnConst
type	core/cuda/detail/type_traits_detail.hpp	/^            typedef U type;$/;"	t	struct:cv::cuda::device::type_traits_detail::UnVolatile
type	core/cuda/detail/type_traits_detail.hpp	/^            typedef U& type;$/;"	t	struct:cv::cuda::device::type_traits_detail::UnConst
type	core/cuda/detail/type_traits_detail.hpp	/^            typedef U& type;$/;"	t	struct:cv::cuda::device::type_traits_detail::UnVolatile
type	core/cuda/detail/type_traits_detail.hpp	/^            typedef void type;$/;"	t	struct:cv::cuda::device::type_traits_detail::PointerTraits
type	core/cuda/detail/type_traits_detail.hpp	/^        template <> struct AddParameterType<void> { typedef void type; };$/;"	t	struct:cv::cuda::device::type_traits_detail::AddParameterType
type	core/cuda/detail/type_traits_detail.hpp	/^        template <bool, typename T1, typename T2> struct Select { typedef T1 type; };$/;"	t	struct:cv::cuda::device::type_traits_detail::Select
type	core/cuda/detail/type_traits_detail.hpp	/^        template <class U> struct AddParameterType { typedef const U& type; };$/;"	t	struct:cv::cuda::device::type_traits_detail::AddParameterType
type	core/cuda/detail/type_traits_detail.hpp	/^        template <class U> struct AddParameterType<U&> { typedef U& type; };$/;"	t	struct:cv::cuda::device::type_traits_detail::AddParameterType
type	core/cuda/detail/type_traits_detail.hpp	/^        template <typename T1, typename T2> struct Select<false, T1, T2> { typedef T2 type; };$/;"	t	struct:cv::cuda::device::type_traits_detail::Select
type	core/cvstd.hpp	/^struct RefOrVoid { typedef T& type; };$/;"	t	struct:cv::detail::RefOrVoid
type	core/cvstd.hpp	/^struct RefOrVoid<const void>{ typedef const void type; };$/;"	t	struct:cv::detail::RefOrVoid
type	core/cvstd.hpp	/^struct RefOrVoid<const volatile void>{ typedef const volatile void type; };$/;"	t	struct:cv::detail::RefOrVoid
type	core/cvstd.hpp	/^struct RefOrVoid<void>{ typedef void type; };$/;"	t	struct:cv::detail::RefOrVoid
type	core/cvstd.hpp	/^struct RefOrVoid<volatile void>{ typedef volatile void type; };$/;"	t	struct:cv::detail::RefOrVoid
type	core/cvstd.inl.hpp	/^           type         = CV_MAKETYPE(depth, channels) };$/;"	e	enum:cv::DataType::__anon161
type	core/mat.inl.hpp	/^int Mat::type() const$/;"	f	class:cv::Mat
type	core/mat.inl.hpp	/^int Mat_<_Tp>::type() const$/;"	f	class:cv::Mat_
type	core/mat.inl.hpp	/^int SparseMat::type() const$/;"	f	class:cv::SparseMat
type	core/mat.inl.hpp	/^int SparseMat_<_Tp>::type() const$/;"	f	class:cv::SparseMat_
type	core/mat.inl.hpp	/^int UMat::type() const$/;"	f	class:cv::UMat
type	core/matx.hpp	/^           type         = CV_MAKETYPE(depth, channels)$/;"	e	enum:cv::DataType::__anon151
type	core/matx.hpp	/^           type         = CV_MAKETYPE(depth, channels)$/;"	e	enum:cv::DataType::__anon153
type	core/matx.hpp	/^           type     = CV_MAKETYPE(depth, channels)$/;"	e	enum:cv::Vec::__anon152
type	core/matx.hpp	/^           type     = CV_MAKETYPE(depth, channels),$/;"	e	enum:cv::Matx::__anon150
type	core/opengl.hpp	/^int cv::ogl::Buffer::type() const$/;"	f	class:cv::ogl::Buffer
type	core/traits.hpp	/^           type         = CV_MAKETYPE(depth, channels)$/;"	e	enum:cv::DataType::__anon102
type	core/traits.hpp	/^           type         = CV_MAKETYPE(depth, channels)$/;"	e	enum:cv::DataType::__anon103
type	core/traits.hpp	/^           type         = CV_MAKETYPE(depth, channels)$/;"	e	enum:cv::DataType::__anon104
type	core/traits.hpp	/^           type         = CV_MAKETYPE(depth, channels)$/;"	e	enum:cv::DataType::__anon105
type	core/traits.hpp	/^           type         = CV_MAKETYPE(depth, channels)$/;"	e	enum:cv::DataType::__anon106
type	core/traits.hpp	/^           type         = CV_MAKETYPE(depth, channels)$/;"	e	enum:cv::DataType::__anon107
type	core/traits.hpp	/^           type         = CV_MAKETYPE(depth, channels)$/;"	e	enum:cv::DataType::__anon108
type	core/traits.hpp	/^           type         = CV_MAKETYPE(depth, channels)$/;"	e	enum:cv::DataType::__anon109
type	core/traits.hpp	/^           type         = CV_MAKETYPE(depth, channels)$/;"	e	enum:cv::DataType::__anon110
type	core/traits.hpp	/^           type = CV_MAKETYPE(depth, channels)$/;"	e	enum:cv::DataType::__anon101
type	core/types.hpp	/^           type         = CV_MAKETYPE(depth, channels) };$/;"	e	enum:cv::DataType::__anon120
type	core/types.hpp	/^           type         = CV_MAKETYPE(depth, channels)$/;"	e	enum:cv::DataType::__anon121
type	core/types.hpp	/^           type         = CV_MAKETYPE(depth, channels)$/;"	e	enum:cv::DataType::__anon122
type	core/types.hpp	/^           type         = CV_MAKETYPE(depth, channels)$/;"	e	enum:cv::DataType::__anon123
type	core/types.hpp	/^           type         = CV_MAKETYPE(depth, channels)$/;"	e	enum:cv::DataType::__anon124
type	core/types.hpp	/^           type         = CV_MAKETYPE(depth, channels)$/;"	e	enum:cv::DataType::__anon125
type	core/types.hpp	/^           type         = CV_MAKETYPE(depth, channels)$/;"	e	enum:cv::DataType::__anon126
type	core/types.hpp	/^           type         = CV_MAKETYPE(depth, channels)$/;"	e	enum:cv::DataType::__anon127
type	core/types.hpp	/^           type         = CV_MAKETYPE(depth, channels)$/;"	e	enum:cv::DataType::__anon128
type	core/types.hpp	/^           type         = CV_MAKETYPE(depth, channels)$/;"	e	enum:cv::DataType::__anon129
type	core/types.hpp	/^           type         = CV_MAKETYPE(depth, channels)$/;"	e	enum:cv::DataType::__anon130
type	core/types.hpp	/^    int type; \/\/!< the type of termination criteria: COUNT, EPS or COUNT + EPS$/;"	m	class:cv::TermCriteria
type	core/types_c.h	/^    int     type;$/;"	m	struct:CvHistogram
type	core/types_c.h	/^    int    type;  \/**< may be combination of$/;"	m	struct:CvTermCriteria
type	core/types_c.h	/^    int type;$/;"	m	struct:CvMat
type	core/types_c.h	/^    int type;$/;"	m	struct:CvMatND
type	core/types_c.h	/^    int type;$/;"	m	struct:CvSparseMat
type	cudev/block/detail/reduce.hpp	/^        typedef T type;$/;"	t	struct:cv::cudev::block_reduce_detail::GetType
type	cudev/block/detail/reduce_key_val.hpp	/^        typedef T type;$/;"	t	struct:cv::cudev::block_reduce_key_val_detail::GetType
type	cudev/functional/functional.hpp	/^        >::type type;$/;"	t	struct:cv::cudev::functional_detail::FloatType
type	cudev/ptr2d/detail/gpumat.hpp	/^__host__ int GpuMat_<T>::type() const$/;"	f	class:cv::cudev::GpuMat_
type	cudev/util/detail/tuple.hpp	/^        > type;$/;"	t	struct:cv::cudev::tuple_detail::ConvertTuple
type	cudev/util/detail/type_traits.hpp	/^        typedef ElseType type;$/;"	t	struct:cv::cudev::type_traits_detail::SelectIf
type	cudev/util/detail/type_traits.hpp	/^        typedef ThenType type;$/;"	t	struct:cv::cudev::type_traits_detail::SelectIf
type	cudev/util/detail/type_traits.hpp	/^        typedef U type;$/;"	t	struct:cv::cudev::type_traits_detail::PointerTraits
type	cudev/util/detail/type_traits.hpp	/^        typedef U type;$/;"	t	struct:cv::cudev::type_traits_detail::ReferenceTraits
type	cudev/util/detail/type_traits.hpp	/^        typedef U type;$/;"	t	struct:cv::cudev::type_traits_detail::UnConst
type	cudev/util/detail/type_traits.hpp	/^        typedef U type;$/;"	t	struct:cv::cudev::type_traits_detail::UnVolatile
type	cudev/util/detail/type_traits.hpp	/^        typedef U& type;$/;"	t	struct:cv::cudev::type_traits_detail::UnConst
type	cudev/util/detail/type_traits.hpp	/^        typedef U& type;$/;"	t	struct:cv::cudev::type_traits_detail::UnVolatile
type	cudev/util/detail/type_traits.hpp	/^        typedef double type;$/;"	t	struct:cv::cudev::type_traits_detail::LargerDepth
type	cudev/util/detail/type_traits.hpp	/^        typedef float type;$/;"	t	struct:cv::cudev::type_traits_detail::LargerDepth
type	cudev/util/detail/type_traits.hpp	/^        typedef typename SelectIf<sizeof(A) >= sizeof(B), A, B>::type type;$/;"	t	struct:cv::cudev::type_traits_detail::LargerDepth
type	cudev/util/detail/type_traits.hpp	/^        typedef void type;$/;"	t	struct:cv::cudev::type_traits_detail::PointerTraits
type	cudev/util/detail/type_traits.hpp	/^    template <> struct AddParameterType<void> { typedef void type; };$/;"	t	struct:cv::cudev::type_traits_detail::AddParameterType
type	cudev/util/detail/type_traits.hpp	/^    template <class U> struct AddParameterType { typedef const U& type; };$/;"	t	struct:cv::cudev::type_traits_detail::AddParameterType
type	cudev/util/detail/type_traits.hpp	/^    template <class U> struct AddParameterType<U&> { typedef U& type; };$/;"	t	struct:cv::cudev::type_traits_detail::AddParameterType
type	cudev/util/tuple.hpp	/^    typedef typename tuple_detail::ConvertTuple<Tuple, tuple_size<Tuple>::value, CvtOp>::type type;$/;"	t	struct:cv::cudev::ConvertTuple
type	cudev/util/type_traits.hpp	/^    >::type type;$/;"	t	struct:cv::cudev::LargerType
type	cudev/util/type_traits.hpp	/^    typedef ElseType type;$/;"	t	struct:cv::cudev::SelectIf
type	cudev/util/type_traits.hpp	/^    typedef ThenType type;$/;"	t	struct:cv::cudev::SelectIf
type	cudev/util/type_traits.hpp	/^template <typename T> struct DisableIf<false, T> { typedef T type; };$/;"	t	struct:cv::cudev::DisableIf
type	cudev/util/type_traits.hpp	/^template <typename T> struct EnableIf<true, T> { typedef T type; };$/;"	t	struct:cv::cudev::EnableIf
type	cudev/util/vec_traits.hpp	/^           type         = CV_MAKE_TYPE(depth, channels)$/;"	e	enum:cv::DataType::__anon359
type	cudev/util/vec_traits.hpp	/^           type         = CV_MAKE_TYPE(depth, channels)$/;"	e	enum:cv::DataType::__anon360
type	cudev/util/vec_traits.hpp	/^           type         = CV_MAKE_TYPE(depth, channels)$/;"	e	enum:cv::DataType::__anon361
type	cudev/util/vec_traits.hpp	/^           type         = CV_MAKE_TYPE(depth, channels)$/;"	e	enum:cv::DataType::__anon362
type	cudev/util/vec_traits.hpp	/^           type         = CV_MAKE_TYPE(depth, channels)$/;"	e	enum:cv::DataType::__anon363
type	cudev/util/vec_traits.hpp	/^template<> struct MakeVec<bool, 1> { typedef uchar  type; };$/;"	t	struct:cv::cudev::MakeVec
type	cudev/util/vec_traits.hpp	/^template<> struct MakeVec<bool, 2> { typedef uchar2 type; };$/;"	t	struct:cv::cudev::MakeVec
type	cudev/util/vec_traits.hpp	/^template<> struct MakeVec<bool, 3> { typedef uchar3 type; };$/;"	t	struct:cv::cudev::MakeVec
type	cudev/util/vec_traits.hpp	/^template<> struct MakeVec<bool, 4> { typedef uchar4 type; };$/;"	t	struct:cv::cudev::MakeVec
type	cudev/util/vec_traits.hpp	/^template<> struct MakeVec<schar, 1> { typedef schar type; };$/;"	t	struct:cv::cudev::MakeVec
type	cudev/util/vec_traits.hpp	/^template<> struct MakeVec<schar, 2> { typedef char2 type; };$/;"	t	struct:cv::cudev::MakeVec
type	cudev/util/vec_traits.hpp	/^template<> struct MakeVec<schar, 3> { typedef char3 type; };$/;"	t	struct:cv::cudev::MakeVec
type	cudev/util/vec_traits.hpp	/^template<> struct MakeVec<schar, 4> { typedef char4 type; };$/;"	t	struct:cv::cudev::MakeVec
type	cudev/warp/detail/reduce.hpp	/^        typedef T type;$/;"	t	struct:cv::cudev::warp_reduce_detail::GetType
type	cudev/warp/detail/reduce_key_val.hpp	/^        typedef T type;$/;"	t	struct:cv::cudev::warp_reduce_key_val_detail::GetType
type	flann.hpp	/^template <> struct CvType<char> { static int type() { return CV_8S; } };$/;"	f	struct:cv::flann::CvType
type	flann.hpp	/^template <> struct CvType<double> { static int type() { return CV_64F; } };$/;"	f	struct:cv::flann::CvType
type	flann.hpp	/^template <> struct CvType<float> { static int type() { return CV_32F; } };$/;"	f	struct:cv::flann::CvType
type	flann.hpp	/^template <> struct CvType<int> { static int type() { return CV_32S; } };$/;"	f	struct:cv::flann::CvType
type	flann.hpp	/^template <> struct CvType<short> { static int type() { return CV_16S; } };$/;"	f	struct:cv::flann::CvType
type	flann.hpp	/^template <> struct CvType<unsigned char> { static int type() { return CV_8U; } };$/;"	f	struct:cv::flann::CvType
type	flann.hpp	/^template <> struct CvType<unsigned short> { static int type() { return CV_16U; } };$/;"	f	struct:cv::flann::CvType
type	flann/any.h	/^    const std::type_info& type() const$/;"	f	struct:cvflann::any
type	flann/any.h	/^    typedef big_any_policy<T> type;$/;"	t	struct:cvflann::anyimpl::choose_policy
type	flann/any.h	/^    typedef small_any_policy<T*> type;$/;"	t	struct:cvflann::anyimpl::choose_policy
type	flann/any.h	/^    typedef void type;$/;"	t	struct:cvflann::anyimpl::choose_policy
type	flann/any.h	/^    virtual const std::type_info& type() { return typeid(T); }$/;"	f	struct:cvflann::anyimpl::typed_base_any_policy
type	flann/matrix.h	/^    flann_datatype_t type;$/;"	m	class:cvflann::UntypedMatrix
type	flann/matrix.h	/^    typedef T type;$/;"	t	class:cvflann::Matrix
type	flann/saving.h	/^struct Datatype<char> { static flann_datatype_t type() { return FLANN_INT8; } };$/;"	f	struct:cvflann::Datatype
type	flann/saving.h	/^struct Datatype<double> { static flann_datatype_t type() { return FLANN_FLOAT64; } };$/;"	f	struct:cvflann::Datatype
type	flann/saving.h	/^struct Datatype<float> { static flann_datatype_t type() { return FLANN_FLOAT32; } };$/;"	f	struct:cvflann::Datatype
type	flann/saving.h	/^struct Datatype<int> { static flann_datatype_t type() { return FLANN_INT32; } };$/;"	f	struct:cvflann::Datatype
type	flann/saving.h	/^struct Datatype<short> { static flann_datatype_t type() { return FLANN_INT16; } };$/;"	f	struct:cvflann::Datatype
type	flann/saving.h	/^struct Datatype<unsigned char> { static flann_datatype_t type() { return FLANN_UINT8; } };$/;"	f	struct:cvflann::Datatype
type	flann/saving.h	/^struct Datatype<unsigned int> { static flann_datatype_t type() { return FLANN_UINT32; } };$/;"	f	struct:cvflann::Datatype
type	flann/saving.h	/^struct Datatype<unsigned short> { static flann_datatype_t type() { return FLANN_UINT16; } };$/;"	f	struct:cvflann::Datatype
type	imgproc.hpp	/^        int type;$/;"	m	struct:cv::Subdiv2D::Vertex
type	ts/ts_gtest.h	/^      T12> type;$/;"	t	struct:testing::Types
type	ts/ts_gtest.h	/^      T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25> type;$/;"	t	struct:testing::Types
type	ts/ts_gtest.h	/^      T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> type;$/;"	t	struct:testing::Types
type	ts/ts_gtest.h	/^      T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> type;$/;"	t	struct:testing::Types
type	ts/ts_gtest.h	/^      T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> type;$/;"	t	struct:testing::Types
type	ts/ts_gtest.h	/^      T13, T14, T15, T16, T17, T18, T19, T20, T21> type;$/;"	t	struct:testing::Types
type	ts/ts_gtest.h	/^      T13, T14, T15, T16, T17, T18, T19, T20> type;$/;"	t	struct:testing::Types
type	ts/ts_gtest.h	/^      T13, T14, T15, T16, T17, T18, T19> type;$/;"	t	struct:testing::Types
type	ts/ts_gtest.h	/^      T13, T14, T15, T16, T17, T18> type;$/;"	t	struct:testing::Types
type	ts/ts_gtest.h	/^      T13, T14, T15, T16, T17> type;$/;"	t	struct:testing::Types
type	ts/ts_gtest.h	/^      T13, T14, T15, T16> type;$/;"	t	struct:testing::Types
type	ts/ts_gtest.h	/^      T13, T14, T15> type;$/;"	t	struct:testing::Types
type	ts/ts_gtest.h	/^      T13, T14> type;$/;"	t	struct:testing::Types
type	ts/ts_gtest.h	/^      T13> type;$/;"	t	struct:testing::Types
type	ts/ts_gtest.h	/^      T13> type;$/;"	t	struct:testing::internal::Templates
type	ts/ts_gtest.h	/^      T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26> type;$/;"	t	struct:testing::internal::Templates
type	ts/ts_gtest.h	/^      T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25> type;$/;"	t	struct:testing::internal::Templates
type	ts/ts_gtest.h	/^      T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> type;$/;"	t	struct:testing::internal::Templates
type	ts/ts_gtest.h	/^      T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> type;$/;"	t	struct:testing::internal::Templates
type	ts/ts_gtest.h	/^      T14, T15, T16, T17, T18, T19, T20, T21, T22> type;$/;"	t	struct:testing::internal::Templates
type	ts/ts_gtest.h	/^      T14, T15, T16, T17, T18, T19, T20, T21> type;$/;"	t	struct:testing::internal::Templates
type	ts/ts_gtest.h	/^      T14, T15, T16, T17, T18, T19, T20> type;$/;"	t	struct:testing::internal::Templates
type	ts/ts_gtest.h	/^      T14, T15, T16, T17, T18, T19> type;$/;"	t	struct:testing::internal::Templates
type	ts/ts_gtest.h	/^      T14, T15, T16, T17, T18> type;$/;"	t	struct:testing::internal::Templates
type	ts/ts_gtest.h	/^      T14, T15, T16, T17> type;$/;"	t	struct:testing::internal::Templates
type	ts/ts_gtest.h	/^      T14, T15, T16> type;$/;"	t	struct:testing::internal::Templates
type	ts/ts_gtest.h	/^      T14, T15> type;$/;"	t	struct:testing::internal::Templates
type	ts/ts_gtest.h	/^      T14> type;$/;"	t	struct:testing::internal::Templates
type	ts/ts_gtest.h	/^      T26> type;$/;"	t	struct:testing::Types
type	ts/ts_gtest.h	/^      T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39> type;$/;"	t	struct:testing::Types
type	ts/ts_gtest.h	/^      T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38> type;$/;"	t	struct:testing::Types
type	ts/ts_gtest.h	/^      T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37> type;$/;"	t	struct:testing::Types
type	ts/ts_gtest.h	/^      T27, T28, T29, T30, T31, T32, T33, T34, T35, T36> type;$/;"	t	struct:testing::Types
type	ts/ts_gtest.h	/^      T27, T28, T29, T30, T31, T32, T33, T34, T35> type;$/;"	t	struct:testing::Types
type	ts/ts_gtest.h	/^      T27, T28, T29, T30, T31, T32, T33, T34> type;$/;"	t	struct:testing::Types
type	ts/ts_gtest.h	/^      T27, T28, T29, T30, T31, T32, T33> type;$/;"	t	struct:testing::Types
type	ts/ts_gtest.h	/^      T27, T28, T29, T30, T31, T32> type;$/;"	t	struct:testing::Types
type	ts/ts_gtest.h	/^      T27, T28, T29, T30, T31> type;$/;"	t	struct:testing::Types
type	ts/ts_gtest.h	/^      T27, T28, T29, T30> type;$/;"	t	struct:testing::Types
type	ts/ts_gtest.h	/^      T27, T28, T29> type;$/;"	t	struct:testing::Types
type	ts/ts_gtest.h	/^      T27, T28> type;$/;"	t	struct:testing::Types
type	ts/ts_gtest.h	/^      T27> type;$/;"	t	struct:testing::Types
type	ts/ts_gtest.h	/^      T27> type;$/;"	t	struct:testing::internal::Templates
type	ts/ts_gtest.h	/^      T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40> type;$/;"	t	struct:testing::internal::Templates
type	ts/ts_gtest.h	/^      T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39> type;$/;"	t	struct:testing::internal::Templates
type	ts/ts_gtest.h	/^      T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38> type;$/;"	t	struct:testing::internal::Templates
type	ts/ts_gtest.h	/^      T28, T29, T30, T31, T32, T33, T34, T35, T36, T37> type;$/;"	t	struct:testing::internal::Templates
type	ts/ts_gtest.h	/^      T28, T29, T30, T31, T32, T33, T34, T35, T36> type;$/;"	t	struct:testing::internal::Templates
type	ts/ts_gtest.h	/^      T28, T29, T30, T31, T32, T33, T34, T35> type;$/;"	t	struct:testing::internal::Templates
type	ts/ts_gtest.h	/^      T28, T29, T30, T31, T32, T33, T34> type;$/;"	t	struct:testing::internal::Templates
type	ts/ts_gtest.h	/^      T28, T29, T30, T31, T32, T33> type;$/;"	t	struct:testing::internal::Templates
type	ts/ts_gtest.h	/^      T28, T29, T30, T31, T32> type;$/;"	t	struct:testing::internal::Templates
type	ts/ts_gtest.h	/^      T28, T29, T30, T31> type;$/;"	t	struct:testing::internal::Templates
type	ts/ts_gtest.h	/^      T28, T29, T30> type;$/;"	t	struct:testing::internal::Templates
type	ts/ts_gtest.h	/^      T28, T29> type;$/;"	t	struct:testing::internal::Templates
type	ts/ts_gtest.h	/^      T28> type;$/;"	t	struct:testing::internal::Templates
type	ts/ts_gtest.h	/^      T40> type;$/;"	t	struct:testing::Types
type	ts/ts_gtest.h	/^      T41, T42, T43, T44, T45, T46, T47, T48, T49, T50> type;$/;"	t	struct:testing::Types
type	ts/ts_gtest.h	/^      T41, T42, T43, T44, T45, T46, T47, T48, T49, T50>::type type;$/;"	t	struct:testing::internal::TypeList
type	ts/ts_gtest.h	/^      T41, T42, T43, T44, T45, T46, T47, T48, T49> type;$/;"	t	struct:testing::Types
type	ts/ts_gtest.h	/^      T41, T42, T43, T44, T45, T46, T47, T48> type;$/;"	t	struct:testing::Types
type	ts/ts_gtest.h	/^      T41, T42, T43, T44, T45, T46, T47> type;$/;"	t	struct:testing::Types
type	ts/ts_gtest.h	/^      T41, T42, T43, T44, T45, T46> type;$/;"	t	struct:testing::Types
type	ts/ts_gtest.h	/^      T41, T42, T43, T44, T45> type;$/;"	t	struct:testing::Types
type	ts/ts_gtest.h	/^      T41, T42, T43, T44> type;$/;"	t	struct:testing::Types
type	ts/ts_gtest.h	/^      T41, T42, T43> type;$/;"	t	struct:testing::Types
type	ts/ts_gtest.h	/^      T41, T42> type;$/;"	t	struct:testing::Types
type	ts/ts_gtest.h	/^      T41> type;$/;"	t	struct:testing::Types
type	ts/ts_gtest.h	/^      T41> type;$/;"	t	struct:testing::internal::Templates
type	ts/ts_gtest.h	/^      T42, T43, T44, T45, T46, T47, T48, T49, T50> type;$/;"	t	struct:testing::internal::Templates
type	ts/ts_gtest.h	/^      T42, T43, T44, T45, T46, T47, T48, T49> type;$/;"	t	struct:testing::internal::Templates
type	ts/ts_gtest.h	/^      T42, T43, T44, T45, T46, T47, T48> type;$/;"	t	struct:testing::internal::Templates
type	ts/ts_gtest.h	/^      T42, T43, T44, T45, T46, T47> type;$/;"	t	struct:testing::internal::Templates
type	ts/ts_gtest.h	/^      T42, T43, T44, T45, T46> type;$/;"	t	struct:testing::internal::Templates
type	ts/ts_gtest.h	/^      T42, T43, T44, T45> type;$/;"	t	struct:testing::internal::Templates
type	ts/ts_gtest.h	/^      T42, T43, T44> type;$/;"	t	struct:testing::internal::Templates
type	ts/ts_gtest.h	/^      T42, T43> type;$/;"	t	struct:testing::internal::Templates
type	ts/ts_gtest.h	/^      T42> type;$/;"	t	struct:testing::internal::Templates
type	ts/ts_gtest.h	/^    TestPartResult::Type const type;$/;"	m	class:testing::internal::AssertHelper::AssertHelperData::TestPartResult
type	ts/ts_gtest.h	/^    typedef Tmpl<T> type;$/;"	t	struct:testing::internal::TemplateSel::Bind
type	ts/ts_gtest.h	/^  Type type() const { return type_; }$/;"	f	class:testing::TestPartResult
type	ts/ts_gtest.h	/^  typedef T0 type;$/;"	t	struct:std::tr1::gtest_internal::TupleElement
type	ts/ts_gtest.h	/^  typedef T1 type;$/;"	t	struct:std::tr1::gtest_internal::TupleElement
type	ts/ts_gtest.h	/^  typedef T2 type;$/;"	t	struct:std::tr1::gtest_internal::TupleElement
type	ts/ts_gtest.h	/^  typedef T3 type;$/;"	t	struct:std::tr1::gtest_internal::TupleElement
type	ts/ts_gtest.h	/^  typedef T4 type;$/;"	t	struct:std::tr1::gtest_internal::TupleElement
type	ts/ts_gtest.h	/^  typedef T5 type;$/;"	t	struct:std::tr1::gtest_internal::TupleElement
type	ts/ts_gtest.h	/^  typedef T6 type;$/;"	t	struct:std::tr1::gtest_internal::TupleElement
type	ts/ts_gtest.h	/^  typedef T7 type;$/;"	t	struct:std::tr1::gtest_internal::TupleElement
type	ts/ts_gtest.h	/^  typedef T8 type;$/;"	t	struct:std::tr1::gtest_internal::TupleElement
type	ts/ts_gtest.h	/^  typedef T9 type;$/;"	t	struct:std::tr1::gtest_internal::TupleElement
type	ts/ts_gtest.h	/^  typedef Templates0 type;$/;"	t	struct:testing::internal::Templates
type	ts/ts_gtest.h	/^  typedef Templates10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> type;$/;"	t	struct:testing::internal::Templates
type	ts/ts_gtest.h	/^  typedef Templates11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> type;$/;"	t	struct:testing::internal::Templates
type	ts/ts_gtest.h	/^  typedef Templates12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> type;$/;"	t	struct:testing::internal::Templates
type	ts/ts_gtest.h	/^  typedef Templates1<T1> type;$/;"	t	struct:testing::internal::Templates
type	ts/ts_gtest.h	/^  typedef Templates2<T1, T2> type;$/;"	t	struct:testing::internal::Templates
type	ts/ts_gtest.h	/^  typedef Templates3<T1, T2, T3> type;$/;"	t	struct:testing::internal::Templates
type	ts/ts_gtest.h	/^  typedef Templates4<T1, T2, T3, T4> type;$/;"	t	struct:testing::internal::Templates
type	ts/ts_gtest.h	/^  typedef Templates5<T1, T2, T3, T4, T5> type;$/;"	t	struct:testing::internal::Templates
type	ts/ts_gtest.h	/^  typedef Templates6<T1, T2, T3, T4, T5, T6> type;$/;"	t	struct:testing::internal::Templates
type	ts/ts_gtest.h	/^  typedef Templates7<T1, T2, T3, T4, T5, T6, T7> type;$/;"	t	struct:testing::internal::Templates
type	ts/ts_gtest.h	/^  typedef Templates8<T1, T2, T3, T4, T5, T6, T7, T8> type;$/;"	t	struct:testing::internal::Templates
type	ts/ts_gtest.h	/^  typedef Templates9<T1, T2, T3, T4, T5, T6, T7, T8, T9> type;$/;"	t	struct:testing::internal::Templates
type	ts/ts_gtest.h	/^  typedef Types1<T> type;$/;"	t	struct:testing::internal::TypeList
type	ts/ts_gtest.h	/^  typedef bool type;$/;"	t	struct:testing::internal::AssertTypeEq
type	ts/ts_gtest.h	/^  typedef bool_constant<bool_value> type;$/;"	t	struct:std::tr1::bool_constant
type	ts/ts_gtest.h	/^  typedef internal::Types0 type;$/;"	t	struct:testing::Types
type	ts/ts_gtest.h	/^  typedef internal::Types10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> type;$/;"	t	struct:testing::Types
type	ts/ts_gtest.h	/^  typedef internal::Types11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> type;$/;"	t	struct:testing::Types
type	ts/ts_gtest.h	/^  typedef internal::Types1<T1> type;$/;"	t	struct:testing::Types
type	ts/ts_gtest.h	/^  typedef internal::Types2<T1, T2> type;$/;"	t	struct:testing::Types
type	ts/ts_gtest.h	/^  typedef internal::Types3<T1, T2, T3> type;$/;"	t	struct:testing::Types
type	ts/ts_gtest.h	/^  typedef internal::Types4<T1, T2, T3, T4> type;$/;"	t	struct:testing::Types
type	ts/ts_gtest.h	/^  typedef internal::Types5<T1, T2, T3, T4, T5> type;$/;"	t	struct:testing::Types
type	ts/ts_gtest.h	/^  typedef internal::Types6<T1, T2, T3, T4, T5, T6> type;$/;"	t	struct:testing::Types
type	ts/ts_gtest.h	/^  typedef internal::Types7<T1, T2, T3, T4, T5, T6, T7> type;$/;"	t	struct:testing::Types
type	ts/ts_gtest.h	/^  typedef internal::Types8<T1, T2, T3, T4, T5, T6, T7, T8> type;$/;"	t	struct:testing::Types
type	ts/ts_gtest.h	/^  typedef internal::Types9<T1, T2, T3, T4, T5, T6, T7, T8, T9> type;$/;"	t	struct:testing::Types
type	ts/ts_gtest.h	/^  typedef typename RemoveConst<T>::type type[N];$/;"	t	struct:testing::internal::RemoveConst
type	ts/ts_gtest.h	/^struct AddRef { typedef T& type; };  \/\/ NOLINT$/;"	t	struct:std::tr1::gtest_internal::AddRef
type	ts/ts_gtest.h	/^struct AddRef<T&> { typedef T& type; };  \/\/ NOLINT$/;"	t	struct:std::tr1::gtest_internal::AddRef
type	ts/ts_gtest.h	/^struct AddReference { typedef T& type; };  \/\/ NOLINT$/;"	t	struct:testing::internal::AddReference
type	ts/ts_gtest.h	/^struct AddReference<T&> { typedef T& type; };  \/\/ NOLINT$/;"	t	struct:testing::internal::AddReference
type	ts/ts_gtest.h	/^struct ByRef { typedef const T& type; };  \/\/ NOLINT$/;"	t	struct:std::tr1::gtest_internal::ByRef
type	ts/ts_gtest.h	/^struct ByRef<T&> { typedef T& type; };  \/\/ NOLINT$/;"	t	struct:std::tr1::gtest_internal::ByRef
type	ts/ts_gtest.h	/^struct RemoveConst { typedef T type; };  \/\/ NOLINT$/;"	t	struct:testing::internal::RemoveConst
type	ts/ts_gtest.h	/^struct RemoveConst<const T> { typedef T type; };  \/\/ NOLINT$/;"	t	struct:testing::internal::RemoveConst
type	ts/ts_gtest.h	/^struct RemoveReference { typedef T type; };  \/\/ NOLINT$/;"	t	struct:testing::internal::RemoveReference
type	ts/ts_gtest.h	/^struct RemoveReference<T&> { typedef T type; };  \/\/ NOLINT$/;"	t	struct:testing::internal::RemoveReference
type	ts/ts_gtest.h	/^template<> struct EnableIf<true> { typedef void type; };  \/\/ NOLINT$/;"	t	struct:testing::internal::EnableIf
type	viz/types.hpp	/^            Type type;$/;"	m	class:cv::viz::MouseEvent
type_	core/opengl.hpp	/^    int type_;$/;"	m	class:cv::ogl::Buffer
type_	ts/ts_gtest.h	/^  Type type_;$/;"	m	class:testing::TestPartResult
type_name	core/types_c.h	/^    const char* type_name; \/**< type name, written to file storage *\/$/;"	m	struct:CvTypeInfo
type_param	ts/ts_gtest.h	/^  const char* type_param() const {$/;"	f	class:testing::TestCase
type_param	ts/ts_gtest.h	/^  const char* type_param() const {$/;"	f	class:testing::TestInfo
type_param_	ts/ts_gtest.h	/^  const internal::scoped_ptr<const ::std::string> type_param_;$/;"	m	class:testing::TestCase
type_param_	ts/ts_gtest.h	/^  const internal::scoped_ptr<const ::std::string> type_param_;$/;"	m	class:testing::TestInfo
type_traits_detail	core/cuda/detail/type_traits_detail.hpp	/^    namespace type_traits_detail$/;"	n	namespace:cv::cuda::device
type_traits_detail	cudev/util/detail/type_traits.hpp	/^namespace type_traits_detail$/;"	n	namespace:cv::cudev
typed_base_any_policy	flann/any.h	/^struct typed_base_any_policy : base_any_policy$/;"	s	namespace:cvflann::anyimpl
u	core.hpp	/^    Mat u, w, vt;$/;"	m	class:cv::SVD
u	core/mat.hpp	/^    UMatData* u;$/;"	m	class:cv::Mat
u	core/mat.hpp	/^    UMatData* u;$/;"	m	class:cv::UMat
u	core/mat.hpp	/^    UMatData* u;$/;"	m	struct:cv::UMatDataAutoLock
u	hal/defs.h	/^    uint64 u;$/;"	m	union:Cv64suf
u	hal/defs.h	/^    unsigned u;$/;"	m	union:Cv32suf
u_	ts/ts_gtest.h	/^  FloatingPointUnion u_;$/;"	m	class:testing::internal::FloatingPoint
uchar	hal/defs.h	/^   typedef unsigned char uchar;$/;"	t
uint	hal/defs.h	/^     typedef std::uint32_t uint;$/;"	t
uint	hal/defs.h	/^     typedef uint32_t uint;$/;"	t
uint	hal/defs.h	/^   typedef unsigned uint;$/;"	t
uint32_t	flann/dist.h	/^typedef unsigned __int32 uint32_t;$/;"	t
uint64	hal/defs.h	/^   typedef uint64_t uint64;$/;"	t
uint64	hal/defs.h	/^   typedef unsigned __int64 uint64;$/;"	t
uint64_t	flann/dist.h	/^typedef unsigned __int64 uint64_t;$/;"	t
uint_type	hal/intrin.hpp	/^    typedef _Tp uint_type;$/;"	t	struct:cv::V_TypeTraits
uint_type	hal/intrin.hpp	/^    typedef uchar uint_type;$/;"	t	struct:cv::V_TypeTraits
uint_type	hal/intrin.hpp	/^    typedef uint64 uint_type;$/;"	t	struct:cv::V_TypeTraits
uint_type	hal/intrin.hpp	/^    typedef unsigned uint_type;$/;"	t	struct:cv::V_TypeTraits
uint_type	hal/intrin.hpp	/^    typedef ushort uint_type;$/;"	t	struct:cv::V_TypeTraits
unaryTupleAdapter	cudev/functional/tuple_adapter.hpp	/^__host__ __device__ UnaryTupleAdapter<Op, n> unaryTupleAdapter(const Op& op)$/;"	f	namespace:cv::cudev
unary_function	core/cuda/functional.hpp	/^    template<typename Argument, typename Result> struct unary_function : public std::unary_function<Argument, Result> {};$/;"	s	namespace:cv::cuda::device
unary_function	cudev/functional/functional.hpp	/^template <typename _Arg, typename _Result> struct unary_function$/;"	s	namespace:cv::cudev
unary_negate	core/cuda/functional.hpp	/^      __host__ __device__ __forceinline__ unary_negate() {}$/;"	f	struct:cv::cuda::device::unary_negate
unary_negate	core/cuda/functional.hpp	/^      __host__ __device__ __forceinline__ unary_negate(const unary_negate& other) : pred(other.pred) {}$/;"	f	struct:cv::cuda::device::unary_negate
unary_negate	core/cuda/functional.hpp	/^      explicit __host__ __device__ __forceinline__ unary_negate(const Predicate& p) : pred(p) {}$/;"	f	struct:cv::cuda::device::unary_negate
unary_negate	core/cuda/functional.hpp	/^    template <typename Predicate> struct unary_negate : unary_function<typename Predicate::argument_type, bool>$/;"	s	namespace:cv::cuda::device
unbind	cudev/ptr2d/texture.hpp	/^        __host__ static void unbind()$/;"	f	struct:__anon393::CvCudevTextureRef
uniform	core/operations.hpp	/^inline double RNG::uniform(double a, double b) { return ((double)*this)*(b - a) + a; }$/;"	f	class:cv::RNG
uniform	core/operations.hpp	/^inline float  RNG::uniform(float a, float b)   { return ((float)*this)*(b - a) + a; }$/;"	f	class:cv::RNG
uniform	core/operations.hpp	/^inline int    RNG::uniform(int a, int b)       { return a == b ? a : (int)(next() % (b - a) + a); }$/;"	f	class:cv::RNG
unionBr_	stitching/detail/seam_finders.hpp	/^    Point unionTl_, unionBr_;$/;"	m	class:cv::detail::DpSeamFinder
unionSize_	stitching/detail/seam_finders.hpp	/^    Size unionSize_;$/;"	m	class:cv::detail::DpSeamFinder
unionTl_	stitching/detail/seam_finders.hpp	/^    Point unionTl_, unionBr_;$/;"	m	class:cv::detail::DpSeamFinder
uniquenessRatio	calib3d/calib3d_c.h	/^    int uniquenessRatio;   \/\/ accept the computed disparity d* only if$/;"	m	struct:CvStereoBMState
unqualified_type	cudev/util/type_traits.hpp	/^    typedef typename type_traits_detail::UnVolatile<typename type_traits_detail::UnConst<T>::type>::type unqualified_type;$/;"	t	struct:cv::cudev::TypeTraits
unregister	flann/object_factory.h	/^    bool unregister(UniqueIdType id)$/;"	f	class:cvflann::ObjectFactory
unroll	core/cuda/detail/transform_detail.hpp	/^            static __device__ __forceinline__ void unroll(const T& src, D& dst, const Mask& mask, UnOp& op, int x_shifted, int y)$/;"	f	struct:cv::cuda::device::transform_detail::OpUnroller
unroll	core/cuda/detail/transform_detail.hpp	/^            static __device__ __forceinline__ void unroll(const T& src, D& dst, const Mask& mask, const UnOp& op, int x_shifted, int y)$/;"	f	struct:cv::cuda::device::transform_detail::OpUnroller
unroll	core/cuda/detail/transform_detail.hpp	/^            static __device__ __forceinline__ void unroll(const T1& src1, const T2& src2, D& dst, const Mask& mask, BinOp& op, int x_shifted, int y)$/;"	f	struct:cv::cuda::device::transform_detail::OpUnroller
unroll	core/cuda/detail/transform_detail.hpp	/^            static __device__ __forceinline__ void unroll(const T1& src1, const T2& src2, D& dst, const Mask& mask, const BinOp& op, int x_shifted, int y)$/;"	f	struct:cv::cuda::device::transform_detail::OpUnroller
unroll	cudev/grid/detail/transform.hpp	/^        __device__ __forceinline__ static void unroll(const T& src, D& dst, const UnOp& op, const MaskPtr& mask, int x_shifted, int y)$/;"	f	struct:cv::cudev::grid_transform_detail::OpUnroller
unroll	cudev/grid/detail/transform.hpp	/^        __device__ __forceinline__ static void unroll(const T1& src1, const T2& src2, D& dst, const BinOp& op, const MaskPtr& mask, int x_shifted, int y)$/;"	f	struct:cv::cudev::grid_transform_detail::OpUnroller
upload	cudev/ptr2d/detail/gpumat.hpp	/^__host__ void GpuMat_<T>::upload(InputArray arr)$/;"	f	class:cv::cudev::GpuMat_
upload	cudev/ptr2d/detail/gpumat.hpp	/^__host__ void GpuMat_<T>::upload(InputArray arr, Stream& stream)$/;"	f	class:cv::cudev::GpuMat_
urefcount	core/mat.hpp	/^    int urefcount;$/;"	m	struct:cv::UMatData
usageFlags	core/mat.hpp	/^    UMatUsageFlags usageFlags; \/\/ usage flags for allocator$/;"	m	class:cv::UMat
useAVCaptureVideoPreviewLayer	videoio/cap_ios.h	/^@property (nonatomic, assign) BOOL useAVCaptureVideoPreviewLayer;$/;"	v
use_optimized	ts.hpp	/^    bool use_optimized;$/;"	m	struct:cvtest::TSParams
usedMemory	flann/allocator.h	/^    int     usedMemory;$/;"	m	class:cvflann::PooledAllocator
usedMemory	flann/autotuned_index.h	/^    virtual int usedMemory() const$/;"	f	class:cvflann::AutotunedIndex
usedMemory	flann/composite_index.h	/^    int usedMemory() const$/;"	f	class:cvflann::CompositeIndex
usedMemory	flann/flann_base.hpp	/^    virtual int usedMemory() const$/;"	f	class:cvflann::Index
usedMemory	flann/hierarchical_clustering_index.h	/^    int usedMemory() const$/;"	f	class:cvflann::HierarchicalClusteringIndex
usedMemory	flann/kdtree_index.h	/^    int usedMemory() const$/;"	f	class:cvflann::KDTreeIndex
usedMemory	flann/kdtree_single_index.h	/^    int usedMemory() const$/;"	f	class:cvflann::KDTreeSingleIndex
usedMemory	flann/kmeans_index.h	/^    int usedMemory() const$/;"	f	class:cvflann::KMeansIndex
usedMemory	flann/linear_index.h	/^    int usedMemory() const$/;"	f	class:cvflann::LinearIndex
usedMemory	flann/lsh_index.h	/^    int usedMemory() const$/;"	f	class:cvflann::LshIndex
userdata	core/mat.hpp	/^    void* userdata;$/;"	m	struct:cv::UMatData
ushort	hal/defs.h	/^   typedef unsigned short ushort;$/;"	t
utrainDescCollection	features2d.hpp	/^    std::vector<UMat> utrainDescCollection;$/;"	m	class:cv::DescriptorMatcher
v10_	ts/ts_gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray10
v10_	ts/ts_gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray11
v10_	ts/ts_gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray12
v10_	ts/ts_gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray13
v10_	ts/ts_gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray14
v10_	ts/ts_gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray15
v10_	ts/ts_gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray16
v10_	ts/ts_gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray17
v10_	ts/ts_gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray18
v10_	ts/ts_gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray19
v10_	ts/ts_gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray20
v10_	ts/ts_gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray21
v10_	ts/ts_gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray22
v10_	ts/ts_gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray23
v10_	ts/ts_gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray24
v10_	ts/ts_gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray25
v10_	ts/ts_gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray26
v10_	ts/ts_gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray27
v10_	ts/ts_gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray28
v10_	ts/ts_gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray29
v10_	ts/ts_gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray30
v10_	ts/ts_gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray31
v10_	ts/ts_gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray32
v10_	ts/ts_gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray33
v10_	ts/ts_gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray34
v10_	ts/ts_gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray35
v10_	ts/ts_gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray36
v10_	ts/ts_gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray37
v10_	ts/ts_gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray38
v10_	ts/ts_gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray39
v10_	ts/ts_gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray40
v10_	ts/ts_gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray41
v10_	ts/ts_gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray42
v10_	ts/ts_gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray43
v10_	ts/ts_gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray44
v10_	ts/ts_gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray45
v10_	ts/ts_gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray46
v10_	ts/ts_gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray47
v10_	ts/ts_gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray48
v10_	ts/ts_gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray49
v10_	ts/ts_gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray50
v11_	ts/ts_gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray11
v11_	ts/ts_gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray12
v11_	ts/ts_gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray13
v11_	ts/ts_gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray14
v11_	ts/ts_gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray15
v11_	ts/ts_gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray16
v11_	ts/ts_gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray17
v11_	ts/ts_gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray18
v11_	ts/ts_gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray19
v11_	ts/ts_gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray20
v11_	ts/ts_gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray21
v11_	ts/ts_gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray22
v11_	ts/ts_gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray23
v11_	ts/ts_gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray24
v11_	ts/ts_gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray25
v11_	ts/ts_gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray26
v11_	ts/ts_gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray27
v11_	ts/ts_gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray28
v11_	ts/ts_gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray29
v11_	ts/ts_gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray30
v11_	ts/ts_gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray31
v11_	ts/ts_gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray32
v11_	ts/ts_gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray33
v11_	ts/ts_gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray34
v11_	ts/ts_gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray35
v11_	ts/ts_gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray36
v11_	ts/ts_gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray37
v11_	ts/ts_gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray38
v11_	ts/ts_gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray39
v11_	ts/ts_gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray40
v11_	ts/ts_gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray41
v11_	ts/ts_gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray42
v11_	ts/ts_gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray43
v11_	ts/ts_gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray44
v11_	ts/ts_gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray45
v11_	ts/ts_gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray46
v11_	ts/ts_gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray47
v11_	ts/ts_gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray48
v11_	ts/ts_gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray49
v11_	ts/ts_gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray50
v12_	ts/ts_gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray12
v12_	ts/ts_gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray13
v12_	ts/ts_gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray14
v12_	ts/ts_gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray15
v12_	ts/ts_gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray16
v12_	ts/ts_gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray17
v12_	ts/ts_gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray18
v12_	ts/ts_gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray19
v12_	ts/ts_gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray20
v12_	ts/ts_gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray21
v12_	ts/ts_gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray22
v12_	ts/ts_gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray23
v12_	ts/ts_gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray24
v12_	ts/ts_gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray25
v12_	ts/ts_gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray26
v12_	ts/ts_gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray27
v12_	ts/ts_gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray28
v12_	ts/ts_gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray29
v12_	ts/ts_gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray30
v12_	ts/ts_gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray31
v12_	ts/ts_gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray32
v12_	ts/ts_gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray33
v12_	ts/ts_gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray34
v12_	ts/ts_gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray35
v12_	ts/ts_gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray36
v12_	ts/ts_gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray37
v12_	ts/ts_gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray38
v12_	ts/ts_gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray39
v12_	ts/ts_gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray40
v12_	ts/ts_gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray41
v12_	ts/ts_gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray42
v12_	ts/ts_gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray43
v12_	ts/ts_gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray44
v12_	ts/ts_gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray45
v12_	ts/ts_gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray46
v12_	ts/ts_gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray47
v12_	ts/ts_gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray48
v12_	ts/ts_gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray49
v12_	ts/ts_gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray50
v13_	ts/ts_gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray13
v13_	ts/ts_gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray14
v13_	ts/ts_gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray15
v13_	ts/ts_gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray16
v13_	ts/ts_gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray17
v13_	ts/ts_gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray18
v13_	ts/ts_gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray19
v13_	ts/ts_gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray20
v13_	ts/ts_gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray21
v13_	ts/ts_gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray22
v13_	ts/ts_gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray23
v13_	ts/ts_gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray24
v13_	ts/ts_gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray25
v13_	ts/ts_gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray26
v13_	ts/ts_gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray27
v13_	ts/ts_gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray28
v13_	ts/ts_gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray29
v13_	ts/ts_gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray30
v13_	ts/ts_gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray31
v13_	ts/ts_gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray32
v13_	ts/ts_gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray33
v13_	ts/ts_gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray34
v13_	ts/ts_gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray35
v13_	ts/ts_gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray36
v13_	ts/ts_gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray37
v13_	ts/ts_gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray38
v13_	ts/ts_gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray39
v13_	ts/ts_gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray40
v13_	ts/ts_gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray41
v13_	ts/ts_gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray42
v13_	ts/ts_gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray43
v13_	ts/ts_gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray44
v13_	ts/ts_gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray45
v13_	ts/ts_gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray46
v13_	ts/ts_gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray47
v13_	ts/ts_gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray48
v13_	ts/ts_gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray49
v13_	ts/ts_gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray50
v14_	ts/ts_gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray14
v14_	ts/ts_gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray15
v14_	ts/ts_gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray16
v14_	ts/ts_gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray17
v14_	ts/ts_gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray18
v14_	ts/ts_gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray19
v14_	ts/ts_gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray20
v14_	ts/ts_gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray21
v14_	ts/ts_gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray22
v14_	ts/ts_gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray23
v14_	ts/ts_gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray24
v14_	ts/ts_gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray25
v14_	ts/ts_gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray26
v14_	ts/ts_gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray27
v14_	ts/ts_gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray28
v14_	ts/ts_gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray29
v14_	ts/ts_gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray30
v14_	ts/ts_gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray31
v14_	ts/ts_gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray32
v14_	ts/ts_gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray33
v14_	ts/ts_gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray34
v14_	ts/ts_gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray35
v14_	ts/ts_gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray36
v14_	ts/ts_gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray37
v14_	ts/ts_gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray38
v14_	ts/ts_gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray39
v14_	ts/ts_gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray40
v14_	ts/ts_gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray41
v14_	ts/ts_gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray42
v14_	ts/ts_gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray43
v14_	ts/ts_gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray44
v14_	ts/ts_gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray45
v14_	ts/ts_gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray46
v14_	ts/ts_gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray47
v14_	ts/ts_gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray48
v14_	ts/ts_gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray49
v14_	ts/ts_gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray50
v15_	ts/ts_gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray15
v15_	ts/ts_gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray16
v15_	ts/ts_gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray17
v15_	ts/ts_gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray18
v15_	ts/ts_gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray19
v15_	ts/ts_gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray20
v15_	ts/ts_gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray21
v15_	ts/ts_gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray22
v15_	ts/ts_gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray23
v15_	ts/ts_gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray24
v15_	ts/ts_gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray25
v15_	ts/ts_gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray26
v15_	ts/ts_gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray27
v15_	ts/ts_gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray28
v15_	ts/ts_gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray29
v15_	ts/ts_gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray30
v15_	ts/ts_gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray31
v15_	ts/ts_gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray32
v15_	ts/ts_gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray33
v15_	ts/ts_gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray34
v15_	ts/ts_gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray35
v15_	ts/ts_gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray36
v15_	ts/ts_gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray37
v15_	ts/ts_gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray38
v15_	ts/ts_gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray39
v15_	ts/ts_gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray40
v15_	ts/ts_gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray41
v15_	ts/ts_gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray42
v15_	ts/ts_gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray43
v15_	ts/ts_gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray44
v15_	ts/ts_gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray45
v15_	ts/ts_gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray46
v15_	ts/ts_gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray47
v15_	ts/ts_gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray48
v15_	ts/ts_gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray49
v15_	ts/ts_gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray50
v16_	ts/ts_gtest.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray16
v16_	ts/ts_gtest.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray17
v16_	ts/ts_gtest.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray18
v16_	ts/ts_gtest.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray19
v16_	ts/ts_gtest.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray20
v16_	ts/ts_gtest.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray21
v16_	ts/ts_gtest.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray22
v16_	ts/ts_gtest.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray23
v16_	ts/ts_gtest.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray24
v16_	ts/ts_gtest.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray25
v16_	ts/ts_gtest.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray26
v16_	ts/ts_gtest.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray27
v16_	ts/ts_gtest.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray28
v16_	ts/ts_gtest.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray29
v16_	ts/ts_gtest.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray30
v16_	ts/ts_gtest.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray31
v16_	ts/ts_gtest.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray32
v16_	ts/ts_gtest.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray33
v16_	ts/ts_gtest.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray34
v16_	ts/ts_gtest.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray35
v16_	ts/ts_gtest.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray36
v16_	ts/ts_gtest.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray37
v16_	ts/ts_gtest.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray38
v16_	ts/ts_gtest.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray39
v16_	ts/ts_gtest.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray40
v16_	ts/ts_gtest.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray41
v16_	ts/ts_gtest.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray42
v16_	ts/ts_gtest.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray43
v16_	ts/ts_gtest.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray44
v16_	ts/ts_gtest.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray45
v16_	ts/ts_gtest.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray46
v16_	ts/ts_gtest.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray47
v16_	ts/ts_gtest.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray48
v16_	ts/ts_gtest.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray49
v16_	ts/ts_gtest.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray50
v17_	ts/ts_gtest.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray17
v17_	ts/ts_gtest.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray18
v17_	ts/ts_gtest.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray19
v17_	ts/ts_gtest.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray20
v17_	ts/ts_gtest.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray21
v17_	ts/ts_gtest.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray22
v17_	ts/ts_gtest.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray23
v17_	ts/ts_gtest.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray24
v17_	ts/ts_gtest.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray25
v17_	ts/ts_gtest.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray26
v17_	ts/ts_gtest.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray27
v17_	ts/ts_gtest.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray28
v17_	ts/ts_gtest.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray29
v17_	ts/ts_gtest.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray30
v17_	ts/ts_gtest.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray31
v17_	ts/ts_gtest.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray32
v17_	ts/ts_gtest.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray33
v17_	ts/ts_gtest.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray34
v17_	ts/ts_gtest.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray35
v17_	ts/ts_gtest.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray36
v17_	ts/ts_gtest.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray37
v17_	ts/ts_gtest.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray38
v17_	ts/ts_gtest.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray39
v17_	ts/ts_gtest.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray40
v17_	ts/ts_gtest.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray41
v17_	ts/ts_gtest.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray42
v17_	ts/ts_gtest.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray43
v17_	ts/ts_gtest.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray44
v17_	ts/ts_gtest.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray45
v17_	ts/ts_gtest.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray46
v17_	ts/ts_gtest.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray47
v17_	ts/ts_gtest.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray48
v17_	ts/ts_gtest.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray49
v17_	ts/ts_gtest.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray50
v18_	ts/ts_gtest.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray18
v18_	ts/ts_gtest.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray19
v18_	ts/ts_gtest.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray20
v18_	ts/ts_gtest.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray21
v18_	ts/ts_gtest.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray22
v18_	ts/ts_gtest.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray23
v18_	ts/ts_gtest.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray24
v18_	ts/ts_gtest.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray25
v18_	ts/ts_gtest.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray26
v18_	ts/ts_gtest.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray27
v18_	ts/ts_gtest.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray28
v18_	ts/ts_gtest.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray29
v18_	ts/ts_gtest.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray30
v18_	ts/ts_gtest.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray31
v18_	ts/ts_gtest.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray32
v18_	ts/ts_gtest.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray33
v18_	ts/ts_gtest.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray34
v18_	ts/ts_gtest.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray35
v18_	ts/ts_gtest.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray36
v18_	ts/ts_gtest.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray37
v18_	ts/ts_gtest.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray38
v18_	ts/ts_gtest.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray39
v18_	ts/ts_gtest.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray40
v18_	ts/ts_gtest.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray41
v18_	ts/ts_gtest.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray42
v18_	ts/ts_gtest.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray43
v18_	ts/ts_gtest.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray44
v18_	ts/ts_gtest.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray45
v18_	ts/ts_gtest.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray46
v18_	ts/ts_gtest.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray47
v18_	ts/ts_gtest.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray48
v18_	ts/ts_gtest.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray49
v18_	ts/ts_gtest.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray50
v19_	ts/ts_gtest.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray19
v19_	ts/ts_gtest.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray20
v19_	ts/ts_gtest.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray21
v19_	ts/ts_gtest.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray22
v19_	ts/ts_gtest.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray23
v19_	ts/ts_gtest.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray24
v19_	ts/ts_gtest.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray25
v19_	ts/ts_gtest.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray26
v19_	ts/ts_gtest.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray27
v19_	ts/ts_gtest.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray28
v19_	ts/ts_gtest.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray29
v19_	ts/ts_gtest.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray30
v19_	ts/ts_gtest.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray31
v19_	ts/ts_gtest.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray32
v19_	ts/ts_gtest.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray33
v19_	ts/ts_gtest.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray34
v19_	ts/ts_gtest.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray35
v19_	ts/ts_gtest.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray36
v19_	ts/ts_gtest.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray37
v19_	ts/ts_gtest.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray38
v19_	ts/ts_gtest.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray39
v19_	ts/ts_gtest.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray40
v19_	ts/ts_gtest.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray41
v19_	ts/ts_gtest.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray42
v19_	ts/ts_gtest.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray43
v19_	ts/ts_gtest.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray44
v19_	ts/ts_gtest.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray45
v19_	ts/ts_gtest.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray46
v19_	ts/ts_gtest.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray47
v19_	ts/ts_gtest.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray48
v19_	ts/ts_gtest.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray49
v19_	ts/ts_gtest.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray50
v1_	ts/ts_gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray1
v1_	ts/ts_gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray10
v1_	ts/ts_gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray11
v1_	ts/ts_gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray12
v1_	ts/ts_gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray13
v1_	ts/ts_gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray14
v1_	ts/ts_gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray15
v1_	ts/ts_gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray16
v1_	ts/ts_gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray17
v1_	ts/ts_gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray18
v1_	ts/ts_gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray19
v1_	ts/ts_gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray2
v1_	ts/ts_gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray20
v1_	ts/ts_gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray21
v1_	ts/ts_gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray22
v1_	ts/ts_gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray23
v1_	ts/ts_gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray24
v1_	ts/ts_gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray25
v1_	ts/ts_gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray26
v1_	ts/ts_gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray27
v1_	ts/ts_gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray28
v1_	ts/ts_gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray29
v1_	ts/ts_gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray3
v1_	ts/ts_gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray30
v1_	ts/ts_gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray31
v1_	ts/ts_gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray32
v1_	ts/ts_gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray33
v1_	ts/ts_gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray34
v1_	ts/ts_gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray35
v1_	ts/ts_gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray36
v1_	ts/ts_gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray37
v1_	ts/ts_gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray38
v1_	ts/ts_gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray39
v1_	ts/ts_gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray4
v1_	ts/ts_gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray40
v1_	ts/ts_gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray41
v1_	ts/ts_gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray42
v1_	ts/ts_gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray43
v1_	ts/ts_gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray44
v1_	ts/ts_gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray45
v1_	ts/ts_gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray46
v1_	ts/ts_gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray47
v1_	ts/ts_gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray48
v1_	ts/ts_gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray49
v1_	ts/ts_gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray5
v1_	ts/ts_gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray50
v1_	ts/ts_gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray6
v1_	ts/ts_gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray7
v1_	ts/ts_gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray8
v1_	ts/ts_gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray9
v20_	ts/ts_gtest.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray20
v20_	ts/ts_gtest.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray21
v20_	ts/ts_gtest.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray22
v20_	ts/ts_gtest.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray23
v20_	ts/ts_gtest.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray24
v20_	ts/ts_gtest.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray25
v20_	ts/ts_gtest.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray26
v20_	ts/ts_gtest.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray27
v20_	ts/ts_gtest.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray28
v20_	ts/ts_gtest.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray29
v20_	ts/ts_gtest.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray30
v20_	ts/ts_gtest.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray31
v20_	ts/ts_gtest.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray32
v20_	ts/ts_gtest.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray33
v20_	ts/ts_gtest.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray34
v20_	ts/ts_gtest.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray35
v20_	ts/ts_gtest.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray36
v20_	ts/ts_gtest.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray37
v20_	ts/ts_gtest.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray38
v20_	ts/ts_gtest.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray39
v20_	ts/ts_gtest.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray40
v20_	ts/ts_gtest.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray41
v20_	ts/ts_gtest.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray42
v20_	ts/ts_gtest.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray43
v20_	ts/ts_gtest.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray44
v20_	ts/ts_gtest.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray45
v20_	ts/ts_gtest.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray46
v20_	ts/ts_gtest.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray47
v20_	ts/ts_gtest.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray48
v20_	ts/ts_gtest.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray49
v20_	ts/ts_gtest.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray50
v21_	ts/ts_gtest.h	/^  const T21 v21_;$/;"	m	class:testing::internal::ValueArray21
v21_	ts/ts_gtest.h	/^  const T21 v21_;$/;"	m	class:testing::internal::ValueArray22
v21_	ts/ts_gtest.h	/^  const T21 v21_;$/;"	m	class:testing::internal::ValueArray23
v21_	ts/ts_gtest.h	/^  const T21 v21_;$/;"	m	class:testing::internal::ValueArray24
v21_	ts/ts_gtest.h	/^  const T21 v21_;$/;"	m	class:testing::internal::ValueArray25
v21_	ts/ts_gtest.h	/^  const T21 v21_;$/;"	m	class:testing::internal::ValueArray26
v21_	ts/ts_gtest.h	/^  const T21 v21_;$/;"	m	class:testing::internal::ValueArray27
v21_	ts/ts_gtest.h	/^  const T21 v21_;$/;"	m	class:testing::internal::ValueArray28
v21_	ts/ts_gtest.h	/^  const T21 v21_;$/;"	m	class:testing::internal::ValueArray29
v21_	ts/ts_gtest.h	/^  const T21 v21_;$/;"	m	class:testing::internal::ValueArray30
v21_	ts/ts_gtest.h	/^  const T21 v21_;$/;"	m	class:testing::internal::ValueArray31
v21_	ts/ts_gtest.h	/^  const T21 v21_;$/;"	m	class:testing::internal::ValueArray32
v21_	ts/ts_gtest.h	/^  const T21 v21_;$/;"	m	class:testing::internal::ValueArray33
v21_	ts/ts_gtest.h	/^  const T21 v21_;$/;"	m	class:testing::internal::ValueArray34
v21_	ts/ts_gtest.h	/^  const T21 v21_;$/;"	m	class:testing::internal::ValueArray35
v21_	ts/ts_gtest.h	/^  const T21 v21_;$/;"	m	class:testing::internal::ValueArray36
v21_	ts/ts_gtest.h	/^  const T21 v21_;$/;"	m	class:testing::internal::ValueArray37
v21_	ts/ts_gtest.h	/^  const T21 v21_;$/;"	m	class:testing::internal::ValueArray38
v21_	ts/ts_gtest.h	/^  const T21 v21_;$/;"	m	class:testing::internal::ValueArray39
v21_	ts/ts_gtest.h	/^  const T21 v21_;$/;"	m	class:testing::internal::ValueArray40
v21_	ts/ts_gtest.h	/^  const T21 v21_;$/;"	m	class:testing::internal::ValueArray41
v21_	ts/ts_gtest.h	/^  const T21 v21_;$/;"	m	class:testing::internal::ValueArray42
v21_	ts/ts_gtest.h	/^  const T21 v21_;$/;"	m	class:testing::internal::ValueArray43
v21_	ts/ts_gtest.h	/^  const T21 v21_;$/;"	m	class:testing::internal::ValueArray44
v21_	ts/ts_gtest.h	/^  const T21 v21_;$/;"	m	class:testing::internal::ValueArray45
v21_	ts/ts_gtest.h	/^  const T21 v21_;$/;"	m	class:testing::internal::ValueArray46
v21_	ts/ts_gtest.h	/^  const T21 v21_;$/;"	m	class:testing::internal::ValueArray47
v21_	ts/ts_gtest.h	/^  const T21 v21_;$/;"	m	class:testing::internal::ValueArray48
v21_	ts/ts_gtest.h	/^  const T21 v21_;$/;"	m	class:testing::internal::ValueArray49
v21_	ts/ts_gtest.h	/^  const T21 v21_;$/;"	m	class:testing::internal::ValueArray50
v22_	ts/ts_gtest.h	/^  const T22 v22_;$/;"	m	class:testing::internal::ValueArray22
v22_	ts/ts_gtest.h	/^  const T22 v22_;$/;"	m	class:testing::internal::ValueArray23
v22_	ts/ts_gtest.h	/^  const T22 v22_;$/;"	m	class:testing::internal::ValueArray24
v22_	ts/ts_gtest.h	/^  const T22 v22_;$/;"	m	class:testing::internal::ValueArray25
v22_	ts/ts_gtest.h	/^  const T22 v22_;$/;"	m	class:testing::internal::ValueArray26
v22_	ts/ts_gtest.h	/^  const T22 v22_;$/;"	m	class:testing::internal::ValueArray27
v22_	ts/ts_gtest.h	/^  const T22 v22_;$/;"	m	class:testing::internal::ValueArray28
v22_	ts/ts_gtest.h	/^  const T22 v22_;$/;"	m	class:testing::internal::ValueArray29
v22_	ts/ts_gtest.h	/^  const T22 v22_;$/;"	m	class:testing::internal::ValueArray30
v22_	ts/ts_gtest.h	/^  const T22 v22_;$/;"	m	class:testing::internal::ValueArray31
v22_	ts/ts_gtest.h	/^  const T22 v22_;$/;"	m	class:testing::internal::ValueArray32
v22_	ts/ts_gtest.h	/^  const T22 v22_;$/;"	m	class:testing::internal::ValueArray33
v22_	ts/ts_gtest.h	/^  const T22 v22_;$/;"	m	class:testing::internal::ValueArray34
v22_	ts/ts_gtest.h	/^  const T22 v22_;$/;"	m	class:testing::internal::ValueArray35
v22_	ts/ts_gtest.h	/^  const T22 v22_;$/;"	m	class:testing::internal::ValueArray36
v22_	ts/ts_gtest.h	/^  const T22 v22_;$/;"	m	class:testing::internal::ValueArray37
v22_	ts/ts_gtest.h	/^  const T22 v22_;$/;"	m	class:testing::internal::ValueArray38
v22_	ts/ts_gtest.h	/^  const T22 v22_;$/;"	m	class:testing::internal::ValueArray39
v22_	ts/ts_gtest.h	/^  const T22 v22_;$/;"	m	class:testing::internal::ValueArray40
v22_	ts/ts_gtest.h	/^  const T22 v22_;$/;"	m	class:testing::internal::ValueArray41
v22_	ts/ts_gtest.h	/^  const T22 v22_;$/;"	m	class:testing::internal::ValueArray42
v22_	ts/ts_gtest.h	/^  const T22 v22_;$/;"	m	class:testing::internal::ValueArray43
v22_	ts/ts_gtest.h	/^  const T22 v22_;$/;"	m	class:testing::internal::ValueArray44
v22_	ts/ts_gtest.h	/^  const T22 v22_;$/;"	m	class:testing::internal::ValueArray45
v22_	ts/ts_gtest.h	/^  const T22 v22_;$/;"	m	class:testing::internal::ValueArray46
v22_	ts/ts_gtest.h	/^  const T22 v22_;$/;"	m	class:testing::internal::ValueArray47
v22_	ts/ts_gtest.h	/^  const T22 v22_;$/;"	m	class:testing::internal::ValueArray48
v22_	ts/ts_gtest.h	/^  const T22 v22_;$/;"	m	class:testing::internal::ValueArray49
v22_	ts/ts_gtest.h	/^  const T22 v22_;$/;"	m	class:testing::internal::ValueArray50
v23_	ts/ts_gtest.h	/^  const T23 v23_;$/;"	m	class:testing::internal::ValueArray23
v23_	ts/ts_gtest.h	/^  const T23 v23_;$/;"	m	class:testing::internal::ValueArray24
v23_	ts/ts_gtest.h	/^  const T23 v23_;$/;"	m	class:testing::internal::ValueArray25
v23_	ts/ts_gtest.h	/^  const T23 v23_;$/;"	m	class:testing::internal::ValueArray26
v23_	ts/ts_gtest.h	/^  const T23 v23_;$/;"	m	class:testing::internal::ValueArray27
v23_	ts/ts_gtest.h	/^  const T23 v23_;$/;"	m	class:testing::internal::ValueArray28
v23_	ts/ts_gtest.h	/^  const T23 v23_;$/;"	m	class:testing::internal::ValueArray29
v23_	ts/ts_gtest.h	/^  const T23 v23_;$/;"	m	class:testing::internal::ValueArray30
v23_	ts/ts_gtest.h	/^  const T23 v23_;$/;"	m	class:testing::internal::ValueArray31
v23_	ts/ts_gtest.h	/^  const T23 v23_;$/;"	m	class:testing::internal::ValueArray32
v23_	ts/ts_gtest.h	/^  const T23 v23_;$/;"	m	class:testing::internal::ValueArray33
v23_	ts/ts_gtest.h	/^  const T23 v23_;$/;"	m	class:testing::internal::ValueArray34
v23_	ts/ts_gtest.h	/^  const T23 v23_;$/;"	m	class:testing::internal::ValueArray35
v23_	ts/ts_gtest.h	/^  const T23 v23_;$/;"	m	class:testing::internal::ValueArray36
v23_	ts/ts_gtest.h	/^  const T23 v23_;$/;"	m	class:testing::internal::ValueArray37
v23_	ts/ts_gtest.h	/^  const T23 v23_;$/;"	m	class:testing::internal::ValueArray38
v23_	ts/ts_gtest.h	/^  const T23 v23_;$/;"	m	class:testing::internal::ValueArray39
v23_	ts/ts_gtest.h	/^  const T23 v23_;$/;"	m	class:testing::internal::ValueArray40
v23_	ts/ts_gtest.h	/^  const T23 v23_;$/;"	m	class:testing::internal::ValueArray41
v23_	ts/ts_gtest.h	/^  const T23 v23_;$/;"	m	class:testing::internal::ValueArray42
v23_	ts/ts_gtest.h	/^  const T23 v23_;$/;"	m	class:testing::internal::ValueArray43
v23_	ts/ts_gtest.h	/^  const T23 v23_;$/;"	m	class:testing::internal::ValueArray44
v23_	ts/ts_gtest.h	/^  const T23 v23_;$/;"	m	class:testing::internal::ValueArray45
v23_	ts/ts_gtest.h	/^  const T23 v23_;$/;"	m	class:testing::internal::ValueArray46
v23_	ts/ts_gtest.h	/^  const T23 v23_;$/;"	m	class:testing::internal::ValueArray47
v23_	ts/ts_gtest.h	/^  const T23 v23_;$/;"	m	class:testing::internal::ValueArray48
v23_	ts/ts_gtest.h	/^  const T23 v23_;$/;"	m	class:testing::internal::ValueArray49
v23_	ts/ts_gtest.h	/^  const T23 v23_;$/;"	m	class:testing::internal::ValueArray50
v24_	ts/ts_gtest.h	/^  const T24 v24_;$/;"	m	class:testing::internal::ValueArray24
v24_	ts/ts_gtest.h	/^  const T24 v24_;$/;"	m	class:testing::internal::ValueArray25
v24_	ts/ts_gtest.h	/^  const T24 v24_;$/;"	m	class:testing::internal::ValueArray26
v24_	ts/ts_gtest.h	/^  const T24 v24_;$/;"	m	class:testing::internal::ValueArray27
v24_	ts/ts_gtest.h	/^  const T24 v24_;$/;"	m	class:testing::internal::ValueArray28
v24_	ts/ts_gtest.h	/^  const T24 v24_;$/;"	m	class:testing::internal::ValueArray29
v24_	ts/ts_gtest.h	/^  const T24 v24_;$/;"	m	class:testing::internal::ValueArray30
v24_	ts/ts_gtest.h	/^  const T24 v24_;$/;"	m	class:testing::internal::ValueArray31
v24_	ts/ts_gtest.h	/^  const T24 v24_;$/;"	m	class:testing::internal::ValueArray32
v24_	ts/ts_gtest.h	/^  const T24 v24_;$/;"	m	class:testing::internal::ValueArray33
v24_	ts/ts_gtest.h	/^  const T24 v24_;$/;"	m	class:testing::internal::ValueArray34
v24_	ts/ts_gtest.h	/^  const T24 v24_;$/;"	m	class:testing::internal::ValueArray35
v24_	ts/ts_gtest.h	/^  const T24 v24_;$/;"	m	class:testing::internal::ValueArray36
v24_	ts/ts_gtest.h	/^  const T24 v24_;$/;"	m	class:testing::internal::ValueArray37
v24_	ts/ts_gtest.h	/^  const T24 v24_;$/;"	m	class:testing::internal::ValueArray38
v24_	ts/ts_gtest.h	/^  const T24 v24_;$/;"	m	class:testing::internal::ValueArray39
v24_	ts/ts_gtest.h	/^  const T24 v24_;$/;"	m	class:testing::internal::ValueArray40
v24_	ts/ts_gtest.h	/^  const T24 v24_;$/;"	m	class:testing::internal::ValueArray41
v24_	ts/ts_gtest.h	/^  const T24 v24_;$/;"	m	class:testing::internal::ValueArray42
v24_	ts/ts_gtest.h	/^  const T24 v24_;$/;"	m	class:testing::internal::ValueArray43
v24_	ts/ts_gtest.h	/^  const T24 v24_;$/;"	m	class:testing::internal::ValueArray44
v24_	ts/ts_gtest.h	/^  const T24 v24_;$/;"	m	class:testing::internal::ValueArray45
v24_	ts/ts_gtest.h	/^  const T24 v24_;$/;"	m	class:testing::internal::ValueArray46
v24_	ts/ts_gtest.h	/^  const T24 v24_;$/;"	m	class:testing::internal::ValueArray47
v24_	ts/ts_gtest.h	/^  const T24 v24_;$/;"	m	class:testing::internal::ValueArray48
v24_	ts/ts_gtest.h	/^  const T24 v24_;$/;"	m	class:testing::internal::ValueArray49
v24_	ts/ts_gtest.h	/^  const T24 v24_;$/;"	m	class:testing::internal::ValueArray50
v25_	ts/ts_gtest.h	/^  const T25 v25_;$/;"	m	class:testing::internal::ValueArray25
v25_	ts/ts_gtest.h	/^  const T25 v25_;$/;"	m	class:testing::internal::ValueArray26
v25_	ts/ts_gtest.h	/^  const T25 v25_;$/;"	m	class:testing::internal::ValueArray27
v25_	ts/ts_gtest.h	/^  const T25 v25_;$/;"	m	class:testing::internal::ValueArray28
v25_	ts/ts_gtest.h	/^  const T25 v25_;$/;"	m	class:testing::internal::ValueArray29
v25_	ts/ts_gtest.h	/^  const T25 v25_;$/;"	m	class:testing::internal::ValueArray30
v25_	ts/ts_gtest.h	/^  const T25 v25_;$/;"	m	class:testing::internal::ValueArray31
v25_	ts/ts_gtest.h	/^  const T25 v25_;$/;"	m	class:testing::internal::ValueArray32
v25_	ts/ts_gtest.h	/^  const T25 v25_;$/;"	m	class:testing::internal::ValueArray33
v25_	ts/ts_gtest.h	/^  const T25 v25_;$/;"	m	class:testing::internal::ValueArray34
v25_	ts/ts_gtest.h	/^  const T25 v25_;$/;"	m	class:testing::internal::ValueArray35
v25_	ts/ts_gtest.h	/^  const T25 v25_;$/;"	m	class:testing::internal::ValueArray36
v25_	ts/ts_gtest.h	/^  const T25 v25_;$/;"	m	class:testing::internal::ValueArray37
v25_	ts/ts_gtest.h	/^  const T25 v25_;$/;"	m	class:testing::internal::ValueArray38
v25_	ts/ts_gtest.h	/^  const T25 v25_;$/;"	m	class:testing::internal::ValueArray39
v25_	ts/ts_gtest.h	/^  const T25 v25_;$/;"	m	class:testing::internal::ValueArray40
v25_	ts/ts_gtest.h	/^  const T25 v25_;$/;"	m	class:testing::internal::ValueArray41
v25_	ts/ts_gtest.h	/^  const T25 v25_;$/;"	m	class:testing::internal::ValueArray42
v25_	ts/ts_gtest.h	/^  const T25 v25_;$/;"	m	class:testing::internal::ValueArray43
v25_	ts/ts_gtest.h	/^  const T25 v25_;$/;"	m	class:testing::internal::ValueArray44
v25_	ts/ts_gtest.h	/^  const T25 v25_;$/;"	m	class:testing::internal::ValueArray45
v25_	ts/ts_gtest.h	/^  const T25 v25_;$/;"	m	class:testing::internal::ValueArray46
v25_	ts/ts_gtest.h	/^  const T25 v25_;$/;"	m	class:testing::internal::ValueArray47
v25_	ts/ts_gtest.h	/^  const T25 v25_;$/;"	m	class:testing::internal::ValueArray48
v25_	ts/ts_gtest.h	/^  const T25 v25_;$/;"	m	class:testing::internal::ValueArray49
v25_	ts/ts_gtest.h	/^  const T25 v25_;$/;"	m	class:testing::internal::ValueArray50
v26_	ts/ts_gtest.h	/^  const T26 v26_;$/;"	m	class:testing::internal::ValueArray26
v26_	ts/ts_gtest.h	/^  const T26 v26_;$/;"	m	class:testing::internal::ValueArray27
v26_	ts/ts_gtest.h	/^  const T26 v26_;$/;"	m	class:testing::internal::ValueArray28
v26_	ts/ts_gtest.h	/^  const T26 v26_;$/;"	m	class:testing::internal::ValueArray29
v26_	ts/ts_gtest.h	/^  const T26 v26_;$/;"	m	class:testing::internal::ValueArray30
v26_	ts/ts_gtest.h	/^  const T26 v26_;$/;"	m	class:testing::internal::ValueArray31
v26_	ts/ts_gtest.h	/^  const T26 v26_;$/;"	m	class:testing::internal::ValueArray32
v26_	ts/ts_gtest.h	/^  const T26 v26_;$/;"	m	class:testing::internal::ValueArray33
v26_	ts/ts_gtest.h	/^  const T26 v26_;$/;"	m	class:testing::internal::ValueArray34
v26_	ts/ts_gtest.h	/^  const T26 v26_;$/;"	m	class:testing::internal::ValueArray35
v26_	ts/ts_gtest.h	/^  const T26 v26_;$/;"	m	class:testing::internal::ValueArray36
v26_	ts/ts_gtest.h	/^  const T26 v26_;$/;"	m	class:testing::internal::ValueArray37
v26_	ts/ts_gtest.h	/^  const T26 v26_;$/;"	m	class:testing::internal::ValueArray38
v26_	ts/ts_gtest.h	/^  const T26 v26_;$/;"	m	class:testing::internal::ValueArray39
v26_	ts/ts_gtest.h	/^  const T26 v26_;$/;"	m	class:testing::internal::ValueArray40
v26_	ts/ts_gtest.h	/^  const T26 v26_;$/;"	m	class:testing::internal::ValueArray41
v26_	ts/ts_gtest.h	/^  const T26 v26_;$/;"	m	class:testing::internal::ValueArray42
v26_	ts/ts_gtest.h	/^  const T26 v26_;$/;"	m	class:testing::internal::ValueArray43
v26_	ts/ts_gtest.h	/^  const T26 v26_;$/;"	m	class:testing::internal::ValueArray44
v26_	ts/ts_gtest.h	/^  const T26 v26_;$/;"	m	class:testing::internal::ValueArray45
v26_	ts/ts_gtest.h	/^  const T26 v26_;$/;"	m	class:testing::internal::ValueArray46
v26_	ts/ts_gtest.h	/^  const T26 v26_;$/;"	m	class:testing::internal::ValueArray47
v26_	ts/ts_gtest.h	/^  const T26 v26_;$/;"	m	class:testing::internal::ValueArray48
v26_	ts/ts_gtest.h	/^  const T26 v26_;$/;"	m	class:testing::internal::ValueArray49
v26_	ts/ts_gtest.h	/^  const T26 v26_;$/;"	m	class:testing::internal::ValueArray50
v27_	ts/ts_gtest.h	/^  const T27 v27_;$/;"	m	class:testing::internal::ValueArray27
v27_	ts/ts_gtest.h	/^  const T27 v27_;$/;"	m	class:testing::internal::ValueArray28
v27_	ts/ts_gtest.h	/^  const T27 v27_;$/;"	m	class:testing::internal::ValueArray29
v27_	ts/ts_gtest.h	/^  const T27 v27_;$/;"	m	class:testing::internal::ValueArray30
v27_	ts/ts_gtest.h	/^  const T27 v27_;$/;"	m	class:testing::internal::ValueArray31
v27_	ts/ts_gtest.h	/^  const T27 v27_;$/;"	m	class:testing::internal::ValueArray32
v27_	ts/ts_gtest.h	/^  const T27 v27_;$/;"	m	class:testing::internal::ValueArray33
v27_	ts/ts_gtest.h	/^  const T27 v27_;$/;"	m	class:testing::internal::ValueArray34
v27_	ts/ts_gtest.h	/^  const T27 v27_;$/;"	m	class:testing::internal::ValueArray35
v27_	ts/ts_gtest.h	/^  const T27 v27_;$/;"	m	class:testing::internal::ValueArray36
v27_	ts/ts_gtest.h	/^  const T27 v27_;$/;"	m	class:testing::internal::ValueArray37
v27_	ts/ts_gtest.h	/^  const T27 v27_;$/;"	m	class:testing::internal::ValueArray38
v27_	ts/ts_gtest.h	/^  const T27 v27_;$/;"	m	class:testing::internal::ValueArray39
v27_	ts/ts_gtest.h	/^  const T27 v27_;$/;"	m	class:testing::internal::ValueArray40
v27_	ts/ts_gtest.h	/^  const T27 v27_;$/;"	m	class:testing::internal::ValueArray41
v27_	ts/ts_gtest.h	/^  const T27 v27_;$/;"	m	class:testing::internal::ValueArray42
v27_	ts/ts_gtest.h	/^  const T27 v27_;$/;"	m	class:testing::internal::ValueArray43
v27_	ts/ts_gtest.h	/^  const T27 v27_;$/;"	m	class:testing::internal::ValueArray44
v27_	ts/ts_gtest.h	/^  const T27 v27_;$/;"	m	class:testing::internal::ValueArray45
v27_	ts/ts_gtest.h	/^  const T27 v27_;$/;"	m	class:testing::internal::ValueArray46
v27_	ts/ts_gtest.h	/^  const T27 v27_;$/;"	m	class:testing::internal::ValueArray47
v27_	ts/ts_gtest.h	/^  const T27 v27_;$/;"	m	class:testing::internal::ValueArray48
v27_	ts/ts_gtest.h	/^  const T27 v27_;$/;"	m	class:testing::internal::ValueArray49
v27_	ts/ts_gtest.h	/^  const T27 v27_;$/;"	m	class:testing::internal::ValueArray50
v28_	ts/ts_gtest.h	/^  const T28 v28_;$/;"	m	class:testing::internal::ValueArray28
v28_	ts/ts_gtest.h	/^  const T28 v28_;$/;"	m	class:testing::internal::ValueArray29
v28_	ts/ts_gtest.h	/^  const T28 v28_;$/;"	m	class:testing::internal::ValueArray30
v28_	ts/ts_gtest.h	/^  const T28 v28_;$/;"	m	class:testing::internal::ValueArray31
v28_	ts/ts_gtest.h	/^  const T28 v28_;$/;"	m	class:testing::internal::ValueArray32
v28_	ts/ts_gtest.h	/^  const T28 v28_;$/;"	m	class:testing::internal::ValueArray33
v28_	ts/ts_gtest.h	/^  const T28 v28_;$/;"	m	class:testing::internal::ValueArray34
v28_	ts/ts_gtest.h	/^  const T28 v28_;$/;"	m	class:testing::internal::ValueArray35
v28_	ts/ts_gtest.h	/^  const T28 v28_;$/;"	m	class:testing::internal::ValueArray36
v28_	ts/ts_gtest.h	/^  const T28 v28_;$/;"	m	class:testing::internal::ValueArray37
v28_	ts/ts_gtest.h	/^  const T28 v28_;$/;"	m	class:testing::internal::ValueArray38
v28_	ts/ts_gtest.h	/^  const T28 v28_;$/;"	m	class:testing::internal::ValueArray39
v28_	ts/ts_gtest.h	/^  const T28 v28_;$/;"	m	class:testing::internal::ValueArray40
v28_	ts/ts_gtest.h	/^  const T28 v28_;$/;"	m	class:testing::internal::ValueArray41
v28_	ts/ts_gtest.h	/^  const T28 v28_;$/;"	m	class:testing::internal::ValueArray42
v28_	ts/ts_gtest.h	/^  const T28 v28_;$/;"	m	class:testing::internal::ValueArray43
v28_	ts/ts_gtest.h	/^  const T28 v28_;$/;"	m	class:testing::internal::ValueArray44
v28_	ts/ts_gtest.h	/^  const T28 v28_;$/;"	m	class:testing::internal::ValueArray45
v28_	ts/ts_gtest.h	/^  const T28 v28_;$/;"	m	class:testing::internal::ValueArray46
v28_	ts/ts_gtest.h	/^  const T28 v28_;$/;"	m	class:testing::internal::ValueArray47
v28_	ts/ts_gtest.h	/^  const T28 v28_;$/;"	m	class:testing::internal::ValueArray48
v28_	ts/ts_gtest.h	/^  const T28 v28_;$/;"	m	class:testing::internal::ValueArray49
v28_	ts/ts_gtest.h	/^  const T28 v28_;$/;"	m	class:testing::internal::ValueArray50
v29_	ts/ts_gtest.h	/^  const T29 v29_;$/;"	m	class:testing::internal::ValueArray29
v29_	ts/ts_gtest.h	/^  const T29 v29_;$/;"	m	class:testing::internal::ValueArray30
v29_	ts/ts_gtest.h	/^  const T29 v29_;$/;"	m	class:testing::internal::ValueArray31
v29_	ts/ts_gtest.h	/^  const T29 v29_;$/;"	m	class:testing::internal::ValueArray32
v29_	ts/ts_gtest.h	/^  const T29 v29_;$/;"	m	class:testing::internal::ValueArray33
v29_	ts/ts_gtest.h	/^  const T29 v29_;$/;"	m	class:testing::internal::ValueArray34
v29_	ts/ts_gtest.h	/^  const T29 v29_;$/;"	m	class:testing::internal::ValueArray35
v29_	ts/ts_gtest.h	/^  const T29 v29_;$/;"	m	class:testing::internal::ValueArray36
v29_	ts/ts_gtest.h	/^  const T29 v29_;$/;"	m	class:testing::internal::ValueArray37
v29_	ts/ts_gtest.h	/^  const T29 v29_;$/;"	m	class:testing::internal::ValueArray38
v29_	ts/ts_gtest.h	/^  const T29 v29_;$/;"	m	class:testing::internal::ValueArray39
v29_	ts/ts_gtest.h	/^  const T29 v29_;$/;"	m	class:testing::internal::ValueArray40
v29_	ts/ts_gtest.h	/^  const T29 v29_;$/;"	m	class:testing::internal::ValueArray41
v29_	ts/ts_gtest.h	/^  const T29 v29_;$/;"	m	class:testing::internal::ValueArray42
v29_	ts/ts_gtest.h	/^  const T29 v29_;$/;"	m	class:testing::internal::ValueArray43
v29_	ts/ts_gtest.h	/^  const T29 v29_;$/;"	m	class:testing::internal::ValueArray44
v29_	ts/ts_gtest.h	/^  const T29 v29_;$/;"	m	class:testing::internal::ValueArray45
v29_	ts/ts_gtest.h	/^  const T29 v29_;$/;"	m	class:testing::internal::ValueArray46
v29_	ts/ts_gtest.h	/^  const T29 v29_;$/;"	m	class:testing::internal::ValueArray47
v29_	ts/ts_gtest.h	/^  const T29 v29_;$/;"	m	class:testing::internal::ValueArray48
v29_	ts/ts_gtest.h	/^  const T29 v29_;$/;"	m	class:testing::internal::ValueArray49
v29_	ts/ts_gtest.h	/^  const T29 v29_;$/;"	m	class:testing::internal::ValueArray50
v2_	ts/ts_gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray10
v2_	ts/ts_gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray11
v2_	ts/ts_gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray12
v2_	ts/ts_gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray13
v2_	ts/ts_gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray14
v2_	ts/ts_gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray15
v2_	ts/ts_gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray16
v2_	ts/ts_gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray17
v2_	ts/ts_gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray18
v2_	ts/ts_gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray19
v2_	ts/ts_gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray2
v2_	ts/ts_gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray20
v2_	ts/ts_gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray21
v2_	ts/ts_gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray22
v2_	ts/ts_gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray23
v2_	ts/ts_gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray24
v2_	ts/ts_gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray25
v2_	ts/ts_gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray26
v2_	ts/ts_gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray27
v2_	ts/ts_gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray28
v2_	ts/ts_gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray29
v2_	ts/ts_gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray3
v2_	ts/ts_gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray30
v2_	ts/ts_gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray31
v2_	ts/ts_gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray32
v2_	ts/ts_gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray33
v2_	ts/ts_gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray34
v2_	ts/ts_gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray35
v2_	ts/ts_gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray36
v2_	ts/ts_gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray37
v2_	ts/ts_gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray38
v2_	ts/ts_gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray39
v2_	ts/ts_gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray4
v2_	ts/ts_gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray40
v2_	ts/ts_gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray41
v2_	ts/ts_gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray42
v2_	ts/ts_gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray43
v2_	ts/ts_gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray44
v2_	ts/ts_gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray45
v2_	ts/ts_gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray46
v2_	ts/ts_gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray47
v2_	ts/ts_gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray48
v2_	ts/ts_gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray49
v2_	ts/ts_gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray5
v2_	ts/ts_gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray50
v2_	ts/ts_gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray6
v2_	ts/ts_gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray7
v2_	ts/ts_gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray8
v2_	ts/ts_gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray9
v30_	ts/ts_gtest.h	/^  const T30 v30_;$/;"	m	class:testing::internal::ValueArray30
v30_	ts/ts_gtest.h	/^  const T30 v30_;$/;"	m	class:testing::internal::ValueArray31
v30_	ts/ts_gtest.h	/^  const T30 v30_;$/;"	m	class:testing::internal::ValueArray32
v30_	ts/ts_gtest.h	/^  const T30 v30_;$/;"	m	class:testing::internal::ValueArray33
v30_	ts/ts_gtest.h	/^  const T30 v30_;$/;"	m	class:testing::internal::ValueArray34
v30_	ts/ts_gtest.h	/^  const T30 v30_;$/;"	m	class:testing::internal::ValueArray35
v30_	ts/ts_gtest.h	/^  const T30 v30_;$/;"	m	class:testing::internal::ValueArray36
v30_	ts/ts_gtest.h	/^  const T30 v30_;$/;"	m	class:testing::internal::ValueArray37
v30_	ts/ts_gtest.h	/^  const T30 v30_;$/;"	m	class:testing::internal::ValueArray38
v30_	ts/ts_gtest.h	/^  const T30 v30_;$/;"	m	class:testing::internal::ValueArray39
v30_	ts/ts_gtest.h	/^  const T30 v30_;$/;"	m	class:testing::internal::ValueArray40
v30_	ts/ts_gtest.h	/^  const T30 v30_;$/;"	m	class:testing::internal::ValueArray41
v30_	ts/ts_gtest.h	/^  const T30 v30_;$/;"	m	class:testing::internal::ValueArray42
v30_	ts/ts_gtest.h	/^  const T30 v30_;$/;"	m	class:testing::internal::ValueArray43
v30_	ts/ts_gtest.h	/^  const T30 v30_;$/;"	m	class:testing::internal::ValueArray44
v30_	ts/ts_gtest.h	/^  const T30 v30_;$/;"	m	class:testing::internal::ValueArray45
v30_	ts/ts_gtest.h	/^  const T30 v30_;$/;"	m	class:testing::internal::ValueArray46
v30_	ts/ts_gtest.h	/^  const T30 v30_;$/;"	m	class:testing::internal::ValueArray47
v30_	ts/ts_gtest.h	/^  const T30 v30_;$/;"	m	class:testing::internal::ValueArray48
v30_	ts/ts_gtest.h	/^  const T30 v30_;$/;"	m	class:testing::internal::ValueArray49
v30_	ts/ts_gtest.h	/^  const T30 v30_;$/;"	m	class:testing::internal::ValueArray50
v31_	ts/ts_gtest.h	/^  const T31 v31_;$/;"	m	class:testing::internal::ValueArray31
v31_	ts/ts_gtest.h	/^  const T31 v31_;$/;"	m	class:testing::internal::ValueArray32
v31_	ts/ts_gtest.h	/^  const T31 v31_;$/;"	m	class:testing::internal::ValueArray33
v31_	ts/ts_gtest.h	/^  const T31 v31_;$/;"	m	class:testing::internal::ValueArray34
v31_	ts/ts_gtest.h	/^  const T31 v31_;$/;"	m	class:testing::internal::ValueArray35
v31_	ts/ts_gtest.h	/^  const T31 v31_;$/;"	m	class:testing::internal::ValueArray36
v31_	ts/ts_gtest.h	/^  const T31 v31_;$/;"	m	class:testing::internal::ValueArray37
v31_	ts/ts_gtest.h	/^  const T31 v31_;$/;"	m	class:testing::internal::ValueArray38
v31_	ts/ts_gtest.h	/^  const T31 v31_;$/;"	m	class:testing::internal::ValueArray39
v31_	ts/ts_gtest.h	/^  const T31 v31_;$/;"	m	class:testing::internal::ValueArray40
v31_	ts/ts_gtest.h	/^  const T31 v31_;$/;"	m	class:testing::internal::ValueArray41
v31_	ts/ts_gtest.h	/^  const T31 v31_;$/;"	m	class:testing::internal::ValueArray42
v31_	ts/ts_gtest.h	/^  const T31 v31_;$/;"	m	class:testing::internal::ValueArray43
v31_	ts/ts_gtest.h	/^  const T31 v31_;$/;"	m	class:testing::internal::ValueArray44
v31_	ts/ts_gtest.h	/^  const T31 v31_;$/;"	m	class:testing::internal::ValueArray45
v31_	ts/ts_gtest.h	/^  const T31 v31_;$/;"	m	class:testing::internal::ValueArray46
v31_	ts/ts_gtest.h	/^  const T31 v31_;$/;"	m	class:testing::internal::ValueArray47
v31_	ts/ts_gtest.h	/^  const T31 v31_;$/;"	m	class:testing::internal::ValueArray48
v31_	ts/ts_gtest.h	/^  const T31 v31_;$/;"	m	class:testing::internal::ValueArray49
v31_	ts/ts_gtest.h	/^  const T31 v31_;$/;"	m	class:testing::internal::ValueArray50
v32_	ts/ts_gtest.h	/^  const T32 v32_;$/;"	m	class:testing::internal::ValueArray32
v32_	ts/ts_gtest.h	/^  const T32 v32_;$/;"	m	class:testing::internal::ValueArray33
v32_	ts/ts_gtest.h	/^  const T32 v32_;$/;"	m	class:testing::internal::ValueArray34
v32_	ts/ts_gtest.h	/^  const T32 v32_;$/;"	m	class:testing::internal::ValueArray35
v32_	ts/ts_gtest.h	/^  const T32 v32_;$/;"	m	class:testing::internal::ValueArray36
v32_	ts/ts_gtest.h	/^  const T32 v32_;$/;"	m	class:testing::internal::ValueArray37
v32_	ts/ts_gtest.h	/^  const T32 v32_;$/;"	m	class:testing::internal::ValueArray38
v32_	ts/ts_gtest.h	/^  const T32 v32_;$/;"	m	class:testing::internal::ValueArray39
v32_	ts/ts_gtest.h	/^  const T32 v32_;$/;"	m	class:testing::internal::ValueArray40
v32_	ts/ts_gtest.h	/^  const T32 v32_;$/;"	m	class:testing::internal::ValueArray41
v32_	ts/ts_gtest.h	/^  const T32 v32_;$/;"	m	class:testing::internal::ValueArray42
v32_	ts/ts_gtest.h	/^  const T32 v32_;$/;"	m	class:testing::internal::ValueArray43
v32_	ts/ts_gtest.h	/^  const T32 v32_;$/;"	m	class:testing::internal::ValueArray44
v32_	ts/ts_gtest.h	/^  const T32 v32_;$/;"	m	class:testing::internal::ValueArray45
v32_	ts/ts_gtest.h	/^  const T32 v32_;$/;"	m	class:testing::internal::ValueArray46
v32_	ts/ts_gtest.h	/^  const T32 v32_;$/;"	m	class:testing::internal::ValueArray47
v32_	ts/ts_gtest.h	/^  const T32 v32_;$/;"	m	class:testing::internal::ValueArray48
v32_	ts/ts_gtest.h	/^  const T32 v32_;$/;"	m	class:testing::internal::ValueArray49
v32_	ts/ts_gtest.h	/^  const T32 v32_;$/;"	m	class:testing::internal::ValueArray50
v33_	ts/ts_gtest.h	/^  const T33 v33_;$/;"	m	class:testing::internal::ValueArray33
v33_	ts/ts_gtest.h	/^  const T33 v33_;$/;"	m	class:testing::internal::ValueArray34
v33_	ts/ts_gtest.h	/^  const T33 v33_;$/;"	m	class:testing::internal::ValueArray35
v33_	ts/ts_gtest.h	/^  const T33 v33_;$/;"	m	class:testing::internal::ValueArray36
v33_	ts/ts_gtest.h	/^  const T33 v33_;$/;"	m	class:testing::internal::ValueArray37
v33_	ts/ts_gtest.h	/^  const T33 v33_;$/;"	m	class:testing::internal::ValueArray38
v33_	ts/ts_gtest.h	/^  const T33 v33_;$/;"	m	class:testing::internal::ValueArray39
v33_	ts/ts_gtest.h	/^  const T33 v33_;$/;"	m	class:testing::internal::ValueArray40
v33_	ts/ts_gtest.h	/^  const T33 v33_;$/;"	m	class:testing::internal::ValueArray41
v33_	ts/ts_gtest.h	/^  const T33 v33_;$/;"	m	class:testing::internal::ValueArray42
v33_	ts/ts_gtest.h	/^  const T33 v33_;$/;"	m	class:testing::internal::ValueArray43
v33_	ts/ts_gtest.h	/^  const T33 v33_;$/;"	m	class:testing::internal::ValueArray44
v33_	ts/ts_gtest.h	/^  const T33 v33_;$/;"	m	class:testing::internal::ValueArray45
v33_	ts/ts_gtest.h	/^  const T33 v33_;$/;"	m	class:testing::internal::ValueArray46
v33_	ts/ts_gtest.h	/^  const T33 v33_;$/;"	m	class:testing::internal::ValueArray47
v33_	ts/ts_gtest.h	/^  const T33 v33_;$/;"	m	class:testing::internal::ValueArray48
v33_	ts/ts_gtest.h	/^  const T33 v33_;$/;"	m	class:testing::internal::ValueArray49
v33_	ts/ts_gtest.h	/^  const T33 v33_;$/;"	m	class:testing::internal::ValueArray50
v34_	ts/ts_gtest.h	/^  const T34 v34_;$/;"	m	class:testing::internal::ValueArray34
v34_	ts/ts_gtest.h	/^  const T34 v34_;$/;"	m	class:testing::internal::ValueArray35
v34_	ts/ts_gtest.h	/^  const T34 v34_;$/;"	m	class:testing::internal::ValueArray36
v34_	ts/ts_gtest.h	/^  const T34 v34_;$/;"	m	class:testing::internal::ValueArray37
v34_	ts/ts_gtest.h	/^  const T34 v34_;$/;"	m	class:testing::internal::ValueArray38
v34_	ts/ts_gtest.h	/^  const T34 v34_;$/;"	m	class:testing::internal::ValueArray39
v34_	ts/ts_gtest.h	/^  const T34 v34_;$/;"	m	class:testing::internal::ValueArray40
v34_	ts/ts_gtest.h	/^  const T34 v34_;$/;"	m	class:testing::internal::ValueArray41
v34_	ts/ts_gtest.h	/^  const T34 v34_;$/;"	m	class:testing::internal::ValueArray42
v34_	ts/ts_gtest.h	/^  const T34 v34_;$/;"	m	class:testing::internal::ValueArray43
v34_	ts/ts_gtest.h	/^  const T34 v34_;$/;"	m	class:testing::internal::ValueArray44
v34_	ts/ts_gtest.h	/^  const T34 v34_;$/;"	m	class:testing::internal::ValueArray45
v34_	ts/ts_gtest.h	/^  const T34 v34_;$/;"	m	class:testing::internal::ValueArray46
v34_	ts/ts_gtest.h	/^  const T34 v34_;$/;"	m	class:testing::internal::ValueArray47
v34_	ts/ts_gtest.h	/^  const T34 v34_;$/;"	m	class:testing::internal::ValueArray48
v34_	ts/ts_gtest.h	/^  const T34 v34_;$/;"	m	class:testing::internal::ValueArray49
v34_	ts/ts_gtest.h	/^  const T34 v34_;$/;"	m	class:testing::internal::ValueArray50
v35_	ts/ts_gtest.h	/^  const T35 v35_;$/;"	m	class:testing::internal::ValueArray35
v35_	ts/ts_gtest.h	/^  const T35 v35_;$/;"	m	class:testing::internal::ValueArray36
v35_	ts/ts_gtest.h	/^  const T35 v35_;$/;"	m	class:testing::internal::ValueArray37
v35_	ts/ts_gtest.h	/^  const T35 v35_;$/;"	m	class:testing::internal::ValueArray38
v35_	ts/ts_gtest.h	/^  const T35 v35_;$/;"	m	class:testing::internal::ValueArray39
v35_	ts/ts_gtest.h	/^  const T35 v35_;$/;"	m	class:testing::internal::ValueArray40
v35_	ts/ts_gtest.h	/^  const T35 v35_;$/;"	m	class:testing::internal::ValueArray41
v35_	ts/ts_gtest.h	/^  const T35 v35_;$/;"	m	class:testing::internal::ValueArray42
v35_	ts/ts_gtest.h	/^  const T35 v35_;$/;"	m	class:testing::internal::ValueArray43
v35_	ts/ts_gtest.h	/^  const T35 v35_;$/;"	m	class:testing::internal::ValueArray44
v35_	ts/ts_gtest.h	/^  const T35 v35_;$/;"	m	class:testing::internal::ValueArray45
v35_	ts/ts_gtest.h	/^  const T35 v35_;$/;"	m	class:testing::internal::ValueArray46
v35_	ts/ts_gtest.h	/^  const T35 v35_;$/;"	m	class:testing::internal::ValueArray47
v35_	ts/ts_gtest.h	/^  const T35 v35_;$/;"	m	class:testing::internal::ValueArray48
v35_	ts/ts_gtest.h	/^  const T35 v35_;$/;"	m	class:testing::internal::ValueArray49
v35_	ts/ts_gtest.h	/^  const T35 v35_;$/;"	m	class:testing::internal::ValueArray50
v36_	ts/ts_gtest.h	/^  const T36 v36_;$/;"	m	class:testing::internal::ValueArray36
v36_	ts/ts_gtest.h	/^  const T36 v36_;$/;"	m	class:testing::internal::ValueArray37
v36_	ts/ts_gtest.h	/^  const T36 v36_;$/;"	m	class:testing::internal::ValueArray38
v36_	ts/ts_gtest.h	/^  const T36 v36_;$/;"	m	class:testing::internal::ValueArray39
v36_	ts/ts_gtest.h	/^  const T36 v36_;$/;"	m	class:testing::internal::ValueArray40
v36_	ts/ts_gtest.h	/^  const T36 v36_;$/;"	m	class:testing::internal::ValueArray41
v36_	ts/ts_gtest.h	/^  const T36 v36_;$/;"	m	class:testing::internal::ValueArray42
v36_	ts/ts_gtest.h	/^  const T36 v36_;$/;"	m	class:testing::internal::ValueArray43
v36_	ts/ts_gtest.h	/^  const T36 v36_;$/;"	m	class:testing::internal::ValueArray44
v36_	ts/ts_gtest.h	/^  const T36 v36_;$/;"	m	class:testing::internal::ValueArray45
v36_	ts/ts_gtest.h	/^  const T36 v36_;$/;"	m	class:testing::internal::ValueArray46
v36_	ts/ts_gtest.h	/^  const T36 v36_;$/;"	m	class:testing::internal::ValueArray47
v36_	ts/ts_gtest.h	/^  const T36 v36_;$/;"	m	class:testing::internal::ValueArray48
v36_	ts/ts_gtest.h	/^  const T36 v36_;$/;"	m	class:testing::internal::ValueArray49
v36_	ts/ts_gtest.h	/^  const T36 v36_;$/;"	m	class:testing::internal::ValueArray50
v37_	ts/ts_gtest.h	/^  const T37 v37_;$/;"	m	class:testing::internal::ValueArray37
v37_	ts/ts_gtest.h	/^  const T37 v37_;$/;"	m	class:testing::internal::ValueArray38
v37_	ts/ts_gtest.h	/^  const T37 v37_;$/;"	m	class:testing::internal::ValueArray39
v37_	ts/ts_gtest.h	/^  const T37 v37_;$/;"	m	class:testing::internal::ValueArray40
v37_	ts/ts_gtest.h	/^  const T37 v37_;$/;"	m	class:testing::internal::ValueArray41
v37_	ts/ts_gtest.h	/^  const T37 v37_;$/;"	m	class:testing::internal::ValueArray42
v37_	ts/ts_gtest.h	/^  const T37 v37_;$/;"	m	class:testing::internal::ValueArray43
v37_	ts/ts_gtest.h	/^  const T37 v37_;$/;"	m	class:testing::internal::ValueArray44
v37_	ts/ts_gtest.h	/^  const T37 v37_;$/;"	m	class:testing::internal::ValueArray45
v37_	ts/ts_gtest.h	/^  const T37 v37_;$/;"	m	class:testing::internal::ValueArray46
v37_	ts/ts_gtest.h	/^  const T37 v37_;$/;"	m	class:testing::internal::ValueArray47
v37_	ts/ts_gtest.h	/^  const T37 v37_;$/;"	m	class:testing::internal::ValueArray48
v37_	ts/ts_gtest.h	/^  const T37 v37_;$/;"	m	class:testing::internal::ValueArray49
v37_	ts/ts_gtest.h	/^  const T37 v37_;$/;"	m	class:testing::internal::ValueArray50
v38_	ts/ts_gtest.h	/^  const T38 v38_;$/;"	m	class:testing::internal::ValueArray38
v38_	ts/ts_gtest.h	/^  const T38 v38_;$/;"	m	class:testing::internal::ValueArray39
v38_	ts/ts_gtest.h	/^  const T38 v38_;$/;"	m	class:testing::internal::ValueArray40
v38_	ts/ts_gtest.h	/^  const T38 v38_;$/;"	m	class:testing::internal::ValueArray41
v38_	ts/ts_gtest.h	/^  const T38 v38_;$/;"	m	class:testing::internal::ValueArray42
v38_	ts/ts_gtest.h	/^  const T38 v38_;$/;"	m	class:testing::internal::ValueArray43
v38_	ts/ts_gtest.h	/^  const T38 v38_;$/;"	m	class:testing::internal::ValueArray44
v38_	ts/ts_gtest.h	/^  const T38 v38_;$/;"	m	class:testing::internal::ValueArray45
v38_	ts/ts_gtest.h	/^  const T38 v38_;$/;"	m	class:testing::internal::ValueArray46
v38_	ts/ts_gtest.h	/^  const T38 v38_;$/;"	m	class:testing::internal::ValueArray47
v38_	ts/ts_gtest.h	/^  const T38 v38_;$/;"	m	class:testing::internal::ValueArray48
v38_	ts/ts_gtest.h	/^  const T38 v38_;$/;"	m	class:testing::internal::ValueArray49
v38_	ts/ts_gtest.h	/^  const T38 v38_;$/;"	m	class:testing::internal::ValueArray50
v39_	ts/ts_gtest.h	/^  const T39 v39_;$/;"	m	class:testing::internal::ValueArray39
v39_	ts/ts_gtest.h	/^  const T39 v39_;$/;"	m	class:testing::internal::ValueArray40
v39_	ts/ts_gtest.h	/^  const T39 v39_;$/;"	m	class:testing::internal::ValueArray41
v39_	ts/ts_gtest.h	/^  const T39 v39_;$/;"	m	class:testing::internal::ValueArray42
v39_	ts/ts_gtest.h	/^  const T39 v39_;$/;"	m	class:testing::internal::ValueArray43
v39_	ts/ts_gtest.h	/^  const T39 v39_;$/;"	m	class:testing::internal::ValueArray44
v39_	ts/ts_gtest.h	/^  const T39 v39_;$/;"	m	class:testing::internal::ValueArray45
v39_	ts/ts_gtest.h	/^  const T39 v39_;$/;"	m	class:testing::internal::ValueArray46
v39_	ts/ts_gtest.h	/^  const T39 v39_;$/;"	m	class:testing::internal::ValueArray47
v39_	ts/ts_gtest.h	/^  const T39 v39_;$/;"	m	class:testing::internal::ValueArray48
v39_	ts/ts_gtest.h	/^  const T39 v39_;$/;"	m	class:testing::internal::ValueArray49
v39_	ts/ts_gtest.h	/^  const T39 v39_;$/;"	m	class:testing::internal::ValueArray50
v3_	ts/ts_gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray10
v3_	ts/ts_gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray11
v3_	ts/ts_gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray12
v3_	ts/ts_gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray13
v3_	ts/ts_gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray14
v3_	ts/ts_gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray15
v3_	ts/ts_gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray16
v3_	ts/ts_gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray17
v3_	ts/ts_gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray18
v3_	ts/ts_gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray19
v3_	ts/ts_gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray20
v3_	ts/ts_gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray21
v3_	ts/ts_gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray22
v3_	ts/ts_gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray23
v3_	ts/ts_gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray24
v3_	ts/ts_gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray25
v3_	ts/ts_gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray26
v3_	ts/ts_gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray27
v3_	ts/ts_gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray28
v3_	ts/ts_gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray29
v3_	ts/ts_gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray3
v3_	ts/ts_gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray30
v3_	ts/ts_gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray31
v3_	ts/ts_gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray32
v3_	ts/ts_gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray33
v3_	ts/ts_gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray34
v3_	ts/ts_gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray35
v3_	ts/ts_gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray36
v3_	ts/ts_gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray37
v3_	ts/ts_gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray38
v3_	ts/ts_gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray39
v3_	ts/ts_gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray4
v3_	ts/ts_gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray40
v3_	ts/ts_gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray41
v3_	ts/ts_gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray42
v3_	ts/ts_gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray43
v3_	ts/ts_gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray44
v3_	ts/ts_gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray45
v3_	ts/ts_gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray46
v3_	ts/ts_gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray47
v3_	ts/ts_gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray48
v3_	ts/ts_gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray49
v3_	ts/ts_gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray5
v3_	ts/ts_gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray50
v3_	ts/ts_gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray6
v3_	ts/ts_gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray7
v3_	ts/ts_gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray8
v3_	ts/ts_gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray9
v40_	ts/ts_gtest.h	/^  const T40 v40_;$/;"	m	class:testing::internal::ValueArray40
v40_	ts/ts_gtest.h	/^  const T40 v40_;$/;"	m	class:testing::internal::ValueArray41
v40_	ts/ts_gtest.h	/^  const T40 v40_;$/;"	m	class:testing::internal::ValueArray42
v40_	ts/ts_gtest.h	/^  const T40 v40_;$/;"	m	class:testing::internal::ValueArray43
v40_	ts/ts_gtest.h	/^  const T40 v40_;$/;"	m	class:testing::internal::ValueArray44
v40_	ts/ts_gtest.h	/^  const T40 v40_;$/;"	m	class:testing::internal::ValueArray45
v40_	ts/ts_gtest.h	/^  const T40 v40_;$/;"	m	class:testing::internal::ValueArray46
v40_	ts/ts_gtest.h	/^  const T40 v40_;$/;"	m	class:testing::internal::ValueArray47
v40_	ts/ts_gtest.h	/^  const T40 v40_;$/;"	m	class:testing::internal::ValueArray48
v40_	ts/ts_gtest.h	/^  const T40 v40_;$/;"	m	class:testing::internal::ValueArray49
v40_	ts/ts_gtest.h	/^  const T40 v40_;$/;"	m	class:testing::internal::ValueArray50
v41_	ts/ts_gtest.h	/^  const T41 v41_;$/;"	m	class:testing::internal::ValueArray41
v41_	ts/ts_gtest.h	/^  const T41 v41_;$/;"	m	class:testing::internal::ValueArray42
v41_	ts/ts_gtest.h	/^  const T41 v41_;$/;"	m	class:testing::internal::ValueArray43
v41_	ts/ts_gtest.h	/^  const T41 v41_;$/;"	m	class:testing::internal::ValueArray44
v41_	ts/ts_gtest.h	/^  const T41 v41_;$/;"	m	class:testing::internal::ValueArray45
v41_	ts/ts_gtest.h	/^  const T41 v41_;$/;"	m	class:testing::internal::ValueArray46
v41_	ts/ts_gtest.h	/^  const T41 v41_;$/;"	m	class:testing::internal::ValueArray47
v41_	ts/ts_gtest.h	/^  const T41 v41_;$/;"	m	class:testing::internal::ValueArray48
v41_	ts/ts_gtest.h	/^  const T41 v41_;$/;"	m	class:testing::internal::ValueArray49
v41_	ts/ts_gtest.h	/^  const T41 v41_;$/;"	m	class:testing::internal::ValueArray50
v42_	ts/ts_gtest.h	/^  const T42 v42_;$/;"	m	class:testing::internal::ValueArray42
v42_	ts/ts_gtest.h	/^  const T42 v42_;$/;"	m	class:testing::internal::ValueArray43
v42_	ts/ts_gtest.h	/^  const T42 v42_;$/;"	m	class:testing::internal::ValueArray44
v42_	ts/ts_gtest.h	/^  const T42 v42_;$/;"	m	class:testing::internal::ValueArray45
v42_	ts/ts_gtest.h	/^  const T42 v42_;$/;"	m	class:testing::internal::ValueArray46
v42_	ts/ts_gtest.h	/^  const T42 v42_;$/;"	m	class:testing::internal::ValueArray47
v42_	ts/ts_gtest.h	/^  const T42 v42_;$/;"	m	class:testing::internal::ValueArray48
v42_	ts/ts_gtest.h	/^  const T42 v42_;$/;"	m	class:testing::internal::ValueArray49
v42_	ts/ts_gtest.h	/^  const T42 v42_;$/;"	m	class:testing::internal::ValueArray50
v43_	ts/ts_gtest.h	/^  const T43 v43_;$/;"	m	class:testing::internal::ValueArray43
v43_	ts/ts_gtest.h	/^  const T43 v43_;$/;"	m	class:testing::internal::ValueArray44
v43_	ts/ts_gtest.h	/^  const T43 v43_;$/;"	m	class:testing::internal::ValueArray45
v43_	ts/ts_gtest.h	/^  const T43 v43_;$/;"	m	class:testing::internal::ValueArray46
v43_	ts/ts_gtest.h	/^  const T43 v43_;$/;"	m	class:testing::internal::ValueArray47
v43_	ts/ts_gtest.h	/^  const T43 v43_;$/;"	m	class:testing::internal::ValueArray48
v43_	ts/ts_gtest.h	/^  const T43 v43_;$/;"	m	class:testing::internal::ValueArray49
v43_	ts/ts_gtest.h	/^  const T43 v43_;$/;"	m	class:testing::internal::ValueArray50
v44_	ts/ts_gtest.h	/^  const T44 v44_;$/;"	m	class:testing::internal::ValueArray44
v44_	ts/ts_gtest.h	/^  const T44 v44_;$/;"	m	class:testing::internal::ValueArray45
v44_	ts/ts_gtest.h	/^  const T44 v44_;$/;"	m	class:testing::internal::ValueArray46
v44_	ts/ts_gtest.h	/^  const T44 v44_;$/;"	m	class:testing::internal::ValueArray47
v44_	ts/ts_gtest.h	/^  const T44 v44_;$/;"	m	class:testing::internal::ValueArray48
v44_	ts/ts_gtest.h	/^  const T44 v44_;$/;"	m	class:testing::internal::ValueArray49
v44_	ts/ts_gtest.h	/^  const T44 v44_;$/;"	m	class:testing::internal::ValueArray50
v45_	ts/ts_gtest.h	/^  const T45 v45_;$/;"	m	class:testing::internal::ValueArray45
v45_	ts/ts_gtest.h	/^  const T45 v45_;$/;"	m	class:testing::internal::ValueArray46
v45_	ts/ts_gtest.h	/^  const T45 v45_;$/;"	m	class:testing::internal::ValueArray47
v45_	ts/ts_gtest.h	/^  const T45 v45_;$/;"	m	class:testing::internal::ValueArray48
v45_	ts/ts_gtest.h	/^  const T45 v45_;$/;"	m	class:testing::internal::ValueArray49
v45_	ts/ts_gtest.h	/^  const T45 v45_;$/;"	m	class:testing::internal::ValueArray50
v46_	ts/ts_gtest.h	/^  const T46 v46_;$/;"	m	class:testing::internal::ValueArray46
v46_	ts/ts_gtest.h	/^  const T46 v46_;$/;"	m	class:testing::internal::ValueArray47
v46_	ts/ts_gtest.h	/^  const T46 v46_;$/;"	m	class:testing::internal::ValueArray48
v46_	ts/ts_gtest.h	/^  const T46 v46_;$/;"	m	class:testing::internal::ValueArray49
v46_	ts/ts_gtest.h	/^  const T46 v46_;$/;"	m	class:testing::internal::ValueArray50
v47_	ts/ts_gtest.h	/^  const T47 v47_;$/;"	m	class:testing::internal::ValueArray47
v47_	ts/ts_gtest.h	/^  const T47 v47_;$/;"	m	class:testing::internal::ValueArray48
v47_	ts/ts_gtest.h	/^  const T47 v47_;$/;"	m	class:testing::internal::ValueArray49
v47_	ts/ts_gtest.h	/^  const T47 v47_;$/;"	m	class:testing::internal::ValueArray50
v48_	ts/ts_gtest.h	/^  const T48 v48_;$/;"	m	class:testing::internal::ValueArray48
v48_	ts/ts_gtest.h	/^  const T48 v48_;$/;"	m	class:testing::internal::ValueArray49
v48_	ts/ts_gtest.h	/^  const T48 v48_;$/;"	m	class:testing::internal::ValueArray50
v49_	ts/ts_gtest.h	/^  const T49 v49_;$/;"	m	class:testing::internal::ValueArray49
v49_	ts/ts_gtest.h	/^  const T49 v49_;$/;"	m	class:testing::internal::ValueArray50
v4_	ts/ts_gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray10
v4_	ts/ts_gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray11
v4_	ts/ts_gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray12
v4_	ts/ts_gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray13
v4_	ts/ts_gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray14
v4_	ts/ts_gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray15
v4_	ts/ts_gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray16
v4_	ts/ts_gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray17
v4_	ts/ts_gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray18
v4_	ts/ts_gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray19
v4_	ts/ts_gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray20
v4_	ts/ts_gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray21
v4_	ts/ts_gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray22
v4_	ts/ts_gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray23
v4_	ts/ts_gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray24
v4_	ts/ts_gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray25
v4_	ts/ts_gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray26
v4_	ts/ts_gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray27
v4_	ts/ts_gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray28
v4_	ts/ts_gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray29
v4_	ts/ts_gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray30
v4_	ts/ts_gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray31
v4_	ts/ts_gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray32
v4_	ts/ts_gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray33
v4_	ts/ts_gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray34
v4_	ts/ts_gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray35
v4_	ts/ts_gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray36
v4_	ts/ts_gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray37
v4_	ts/ts_gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray38
v4_	ts/ts_gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray39
v4_	ts/ts_gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray4
v4_	ts/ts_gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray40
v4_	ts/ts_gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray41
v4_	ts/ts_gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray42
v4_	ts/ts_gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray43
v4_	ts/ts_gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray44
v4_	ts/ts_gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray45
v4_	ts/ts_gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray46
v4_	ts/ts_gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray47
v4_	ts/ts_gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray48
v4_	ts/ts_gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray49
v4_	ts/ts_gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray5
v4_	ts/ts_gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray50
v4_	ts/ts_gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray6
v4_	ts/ts_gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray7
v4_	ts/ts_gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray8
v4_	ts/ts_gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray9
v50_	ts/ts_gtest.h	/^  const T50 v50_;$/;"	m	class:testing::internal::ValueArray50
v5_	ts/ts_gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray10
v5_	ts/ts_gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray11
v5_	ts/ts_gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray12
v5_	ts/ts_gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray13
v5_	ts/ts_gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray14
v5_	ts/ts_gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray15
v5_	ts/ts_gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray16
v5_	ts/ts_gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray17
v5_	ts/ts_gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray18
v5_	ts/ts_gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray19
v5_	ts/ts_gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray20
v5_	ts/ts_gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray21
v5_	ts/ts_gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray22
v5_	ts/ts_gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray23
v5_	ts/ts_gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray24
v5_	ts/ts_gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray25
v5_	ts/ts_gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray26
v5_	ts/ts_gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray27
v5_	ts/ts_gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray28
v5_	ts/ts_gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray29
v5_	ts/ts_gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray30
v5_	ts/ts_gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray31
v5_	ts/ts_gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray32
v5_	ts/ts_gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray33
v5_	ts/ts_gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray34
v5_	ts/ts_gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray35
v5_	ts/ts_gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray36
v5_	ts/ts_gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray37
v5_	ts/ts_gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray38
v5_	ts/ts_gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray39
v5_	ts/ts_gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray40
v5_	ts/ts_gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray41
v5_	ts/ts_gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray42
v5_	ts/ts_gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray43
v5_	ts/ts_gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray44
v5_	ts/ts_gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray45
v5_	ts/ts_gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray46
v5_	ts/ts_gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray47
v5_	ts/ts_gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray48
v5_	ts/ts_gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray49
v5_	ts/ts_gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray5
v5_	ts/ts_gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray50
v5_	ts/ts_gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray6
v5_	ts/ts_gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray7
v5_	ts/ts_gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray8
v5_	ts/ts_gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray9
v6_	ts/ts_gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray10
v6_	ts/ts_gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray11
v6_	ts/ts_gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray12
v6_	ts/ts_gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray13
v6_	ts/ts_gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray14
v6_	ts/ts_gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray15
v6_	ts/ts_gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray16
v6_	ts/ts_gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray17
v6_	ts/ts_gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray18
v6_	ts/ts_gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray19
v6_	ts/ts_gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray20
v6_	ts/ts_gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray21
v6_	ts/ts_gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray22
v6_	ts/ts_gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray23
v6_	ts/ts_gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray24
v6_	ts/ts_gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray25
v6_	ts/ts_gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray26
v6_	ts/ts_gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray27
v6_	ts/ts_gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray28
v6_	ts/ts_gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray29
v6_	ts/ts_gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray30
v6_	ts/ts_gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray31
v6_	ts/ts_gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray32
v6_	ts/ts_gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray33
v6_	ts/ts_gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray34
v6_	ts/ts_gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray35
v6_	ts/ts_gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray36
v6_	ts/ts_gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray37
v6_	ts/ts_gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray38
v6_	ts/ts_gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray39
v6_	ts/ts_gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray40
v6_	ts/ts_gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray41
v6_	ts/ts_gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray42
v6_	ts/ts_gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray43
v6_	ts/ts_gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray44
v6_	ts/ts_gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray45
v6_	ts/ts_gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray46
v6_	ts/ts_gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray47
v6_	ts/ts_gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray48
v6_	ts/ts_gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray49
v6_	ts/ts_gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray50
v6_	ts/ts_gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray6
v6_	ts/ts_gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray7
v6_	ts/ts_gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray8
v6_	ts/ts_gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray9
v7_	ts/ts_gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray10
v7_	ts/ts_gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray11
v7_	ts/ts_gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray12
v7_	ts/ts_gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray13
v7_	ts/ts_gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray14
v7_	ts/ts_gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray15
v7_	ts/ts_gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray16
v7_	ts/ts_gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray17
v7_	ts/ts_gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray18
v7_	ts/ts_gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray19
v7_	ts/ts_gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray20
v7_	ts/ts_gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray21
v7_	ts/ts_gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray22
v7_	ts/ts_gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray23
v7_	ts/ts_gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray24
v7_	ts/ts_gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray25
v7_	ts/ts_gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray26
v7_	ts/ts_gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray27
v7_	ts/ts_gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray28
v7_	ts/ts_gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray29
v7_	ts/ts_gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray30
v7_	ts/ts_gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray31
v7_	ts/ts_gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray32
v7_	ts/ts_gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray33
v7_	ts/ts_gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray34
v7_	ts/ts_gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray35
v7_	ts/ts_gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray36
v7_	ts/ts_gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray37
v7_	ts/ts_gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray38
v7_	ts/ts_gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray39
v7_	ts/ts_gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray40
v7_	ts/ts_gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray41
v7_	ts/ts_gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray42
v7_	ts/ts_gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray43
v7_	ts/ts_gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray44
v7_	ts/ts_gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray45
v7_	ts/ts_gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray46
v7_	ts/ts_gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray47
v7_	ts/ts_gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray48
v7_	ts/ts_gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray49
v7_	ts/ts_gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray50
v7_	ts/ts_gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray7
v7_	ts/ts_gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray8
v7_	ts/ts_gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray9
v8_	ts/ts_gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray10
v8_	ts/ts_gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray11
v8_	ts/ts_gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray12
v8_	ts/ts_gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray13
v8_	ts/ts_gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray14
v8_	ts/ts_gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray15
v8_	ts/ts_gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray16
v8_	ts/ts_gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray17
v8_	ts/ts_gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray18
v8_	ts/ts_gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray19
v8_	ts/ts_gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray20
v8_	ts/ts_gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray21
v8_	ts/ts_gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray22
v8_	ts/ts_gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray23
v8_	ts/ts_gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray24
v8_	ts/ts_gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray25
v8_	ts/ts_gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray26
v8_	ts/ts_gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray27
v8_	ts/ts_gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray28
v8_	ts/ts_gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray29
v8_	ts/ts_gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray30
v8_	ts/ts_gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray31
v8_	ts/ts_gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray32
v8_	ts/ts_gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray33
v8_	ts/ts_gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray34
v8_	ts/ts_gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray35
v8_	ts/ts_gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray36
v8_	ts/ts_gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray37
v8_	ts/ts_gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray38
v8_	ts/ts_gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray39
v8_	ts/ts_gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray40
v8_	ts/ts_gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray41
v8_	ts/ts_gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray42
v8_	ts/ts_gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray43
v8_	ts/ts_gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray44
v8_	ts/ts_gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray45
v8_	ts/ts_gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray46
v8_	ts/ts_gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray47
v8_	ts/ts_gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray48
v8_	ts/ts_gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray49
v8_	ts/ts_gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray50
v8_	ts/ts_gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray8
v8_	ts/ts_gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray9
v9_	ts/ts_gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray10
v9_	ts/ts_gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray11
v9_	ts/ts_gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray12
v9_	ts/ts_gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray13
v9_	ts/ts_gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray14
v9_	ts/ts_gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray15
v9_	ts/ts_gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray16
v9_	ts/ts_gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray17
v9_	ts/ts_gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray18
v9_	ts/ts_gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray19
v9_	ts/ts_gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray20
v9_	ts/ts_gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray21
v9_	ts/ts_gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray22
v9_	ts/ts_gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray23
v9_	ts/ts_gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray24
v9_	ts/ts_gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray25
v9_	ts/ts_gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray26
v9_	ts/ts_gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray27
v9_	ts/ts_gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray28
v9_	ts/ts_gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray29
v9_	ts/ts_gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray30
v9_	ts/ts_gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray31
v9_	ts/ts_gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray32
v9_	ts/ts_gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray33
v9_	ts/ts_gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray34
v9_	ts/ts_gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray35
v9_	ts/ts_gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray36
v9_	ts/ts_gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray37
v9_	ts/ts_gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray38
v9_	ts/ts_gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray39
v9_	ts/ts_gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray40
v9_	ts/ts_gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray41
v9_	ts/ts_gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray42
v9_	ts/ts_gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray43
v9_	ts/ts_gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray44
v9_	ts/ts_gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray45
v9_	ts/ts_gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray46
v9_	ts/ts_gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray47
v9_	ts/ts_gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray48
v9_	ts/ts_gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray49
v9_	ts/ts_gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray50
v9_	ts/ts_gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray9
v_abs	hal/intrin_neon.hpp	/^inline v_float32x4 v_abs(v_float32x4 x)$/;"	f	namespace:cv
v_abs	hal/intrin_sse.hpp	/^inline v_float32x4 v_abs(const v_float32x4& x)$/;"	f	namespace:cv
v_abs	hal/intrin_sse.hpp	/^inline v_float64x2 v_abs(const v_float64x2& x)$/;"	f	namespace:cv
v_ceil	hal/intrin_cpp.hpp	/^template<int n> inline v_reg<int, n*2> v_ceil(const v_reg<double, n>& a)$/;"	f	namespace:cv
v_ceil	hal/intrin_cpp.hpp	/^template<int n> inline v_reg<int, n> v_ceil(const v_reg<float, n>& a)$/;"	f	namespace:cv
v_ceil	hal/intrin_neon.hpp	/^inline v_int32x4 v_ceil(const v_float32x4& a)$/;"	f	namespace:cv
v_ceil	hal/intrin_sse.hpp	/^inline v_int32x4 v_ceil(const v_float32x4& a)$/;"	f	namespace:cv
v_ceil	hal/intrin_sse.hpp	/^inline v_int32x4 v_ceil(const v_float64x2& a)$/;"	f	namespace:cv
v_check_all	hal/intrin_cpp.hpp	/^template<typename _Tp, int n> inline bool v_check_all(const v_reg<_Tp, n>& a)$/;"	f	namespace:cv
v_check_all	hal/intrin_neon.hpp	/^inline bool v_check_all(const v_float32x4& a)$/;"	f	namespace:cv
v_check_all	hal/intrin_neon.hpp	/^inline bool v_check_all(const v_int16x8& a)$/;"	f	namespace:cv
v_check_all	hal/intrin_neon.hpp	/^inline bool v_check_all(const v_int32x4& a)$/;"	f	namespace:cv
v_check_all	hal/intrin_neon.hpp	/^inline bool v_check_all(const v_int8x16& a)$/;"	f	namespace:cv
v_check_any	hal/intrin_cpp.hpp	/^template<typename _Tp, int n> inline bool v_check_any(const v_reg<_Tp, n>& a)$/;"	f	namespace:cv
v_check_any	hal/intrin_neon.hpp	/^inline bool v_check_any(const v_float32x4& a)$/;"	f	namespace:cv
v_check_any	hal/intrin_neon.hpp	/^inline bool v_check_any(const v_int16x8& a)$/;"	f	namespace:cv
v_check_any	hal/intrin_neon.hpp	/^inline bool v_check_any(const v_int32x4& a)$/;"	f	namespace:cv
v_check_any	hal/intrin_neon.hpp	/^inline bool v_check_any(const v_int8x16& a)$/;"	f	namespace:cv
v_combine_high	hal/intrin_cpp.hpp	/^inline v_reg<_Tp, n> v_combine_high(const v_reg<_Tp, n>& a, const v_reg<_Tp, n>& b)$/;"	f	namespace:cv
v_combine_low	hal/intrin_cpp.hpp	/^inline v_reg<_Tp, n> v_combine_low(const v_reg<_Tp, n>& a, const v_reg<_Tp, n>& b)$/;"	f	namespace:cv
v_cvt_f32	hal/intrin_cpp.hpp	/^template<int n> inline v_reg<float, n> v_cvt_f32(const v_reg<int, n>& a)$/;"	f	namespace:cv
v_cvt_f32	hal/intrin_neon.hpp	/^inline v_float32x4 v_cvt_f32(const v_int32x4& a)$/;"	f	namespace:cv
v_cvt_f32	hal/intrin_sse.hpp	/^inline v_float32x4 v_cvt_f32(const v_float64x2& a)$/;"	f	namespace:cv
v_cvt_f32	hal/intrin_sse.hpp	/^inline v_float32x4 v_cvt_f32(const v_int32x4& a)$/;"	f	namespace:cv
v_cvt_f64	hal/intrin_cpp.hpp	/^template<int n> inline v_reg<double, n> v_cvt_f64(const v_reg<float, n*2>& a)$/;"	f	namespace:cv
v_cvt_f64	hal/intrin_cpp.hpp	/^template<int n> inline v_reg<double, n> v_cvt_f64(const v_reg<int, n*2>& a)$/;"	f	namespace:cv
v_cvt_f64	hal/intrin_sse.hpp	/^inline v_float64x2 v_cvt_f64(const v_float32x4& a)$/;"	f	namespace:cv
v_cvt_f64	hal/intrin_sse.hpp	/^inline v_float64x2 v_cvt_f64(const v_int32x4& a)$/;"	f	namespace:cv
v_dotprod	hal/intrin_cpp.hpp	/^    v_dotprod(const v_reg<_Tp, n>& a, const v_reg<_Tp, n>& b)$/;"	f	namespace:cv
v_dotprod	hal/intrin_neon.hpp	/^inline v_int32x4 v_dotprod(const v_int16x8& a, const v_int16x8& b)$/;"	f	namespace:cv
v_dotprod	hal/intrin_sse.hpp	/^inline v_int32x4 v_dotprod(const v_int16x8& a, const v_int16x8& b)$/;"	f	namespace:cv
v_expand	hal/intrin_cpp.hpp	/^template<typename _Tp, int n> inline void v_expand(const v_reg<_Tp, n>& a,$/;"	f	namespace:cv
v_expand	hal/intrin_sse.hpp	/^inline void v_expand(const v_int32x4& a, v_int64x2& b0, v_int64x2& b1)$/;"	f	namespace:cv
v_expand	hal/intrin_sse.hpp	/^inline void v_expand(const v_uint32x4& a, v_uint64x2& b0, v_uint64x2& b1)$/;"	f	namespace:cv
v_float32x4	hal/intrin_cpp.hpp	/^typedef v_reg<float, 4> v_float32x4;$/;"	t	namespace:cv
v_float32x4	hal/intrin_neon.hpp	/^    explicit v_float32x4(float32x4_t v) : val(v) {}$/;"	f	struct:cv::v_float32x4
v_float32x4	hal/intrin_neon.hpp	/^    v_float32x4() {}$/;"	f	struct:cv::v_float32x4
v_float32x4	hal/intrin_neon.hpp	/^    v_float32x4(float v0, float v1, float v2, float v3)$/;"	f	struct:cv::v_float32x4
v_float32x4	hal/intrin_neon.hpp	/^struct v_float32x4$/;"	s	namespace:cv
v_float32x4	hal/intrin_sse.hpp	/^    explicit v_float32x4(__m128 v) : val(v) {}$/;"	f	struct:cv::v_float32x4
v_float32x4	hal/intrin_sse.hpp	/^    v_float32x4() {}$/;"	f	struct:cv::v_float32x4
v_float32x4	hal/intrin_sse.hpp	/^    v_float32x4(float v0, float v1, float v2, float v3)$/;"	f	struct:cv::v_float32x4
v_float32x4	hal/intrin_sse.hpp	/^struct v_float32x4$/;"	s	namespace:cv
v_float32x8	hal/intrin_cpp.hpp	/^typedef v_reg<float, 8> v_float32x8;$/;"	t	namespace:cv
v_float64x2	hal/intrin_cpp.hpp	/^typedef v_reg<double, 2> v_float64x2;$/;"	t	namespace:cv
v_float64x2	hal/intrin_sse.hpp	/^    explicit v_float64x2(__m128d v) : val(v) {}$/;"	f	struct:cv::v_float64x2
v_float64x2	hal/intrin_sse.hpp	/^    v_float64x2() {}$/;"	f	struct:cv::v_float64x2
v_float64x2	hal/intrin_sse.hpp	/^    v_float64x2(double v0, double v1)$/;"	f	struct:cv::v_float64x2
v_float64x2	hal/intrin_sse.hpp	/^struct v_float64x2$/;"	s	namespace:cv
v_floor	hal/intrin_cpp.hpp	/^template<int n> inline v_reg<int, n*2> v_floor(const v_reg<double, n>& a)$/;"	f	namespace:cv
v_floor	hal/intrin_cpp.hpp	/^template<int n> inline v_reg<int, n> v_floor(const v_reg<float, n>& a)$/;"	f	namespace:cv
v_floor	hal/intrin_neon.hpp	/^inline v_int32x4 v_floor(const v_float32x4& a)$/;"	f	namespace:cv
v_floor	hal/intrin_sse.hpp	/^inline v_int32x4 v_floor(const v_float32x4& a)$/;"	f	namespace:cv
v_floor	hal/intrin_sse.hpp	/^inline v_int32x4 v_floor(const v_float64x2& a)$/;"	f	namespace:cv
v_hsum	hal/intrin_cpp.hpp	/^template<typename _Tp, int n> inline void v_hsum(const v_reg<_Tp, n>& a,$/;"	f	namespace:cv
v_int16x8	hal/intrin_cpp.hpp	/^typedef v_reg<short, 8> v_int16x8;$/;"	t	namespace:cv
v_int16x8	hal/intrin_neon.hpp	/^    explicit v_int16x8(int16x8_t v) : val(v) {}$/;"	f	struct:cv::v_int16x8
v_int16x8	hal/intrin_neon.hpp	/^    v_int16x8() {}$/;"	f	struct:cv::v_int16x8
v_int16x8	hal/intrin_neon.hpp	/^    v_int16x8(short v0, short v1, short v2, short v3, short v4, short v5, short v6, short v7)$/;"	f	struct:cv::v_int16x8
v_int16x8	hal/intrin_neon.hpp	/^struct v_int16x8$/;"	s	namespace:cv
v_int16x8	hal/intrin_sse.hpp	/^    explicit v_int16x8(__m128i v) : val(v) {}$/;"	f	struct:cv::v_int16x8
v_int16x8	hal/intrin_sse.hpp	/^    v_int16x8() {}$/;"	f	struct:cv::v_int16x8
v_int16x8	hal/intrin_sse.hpp	/^    v_int16x8(short v0, short v1, short v2, short v3, short v4, short v5, short v6, short v7)$/;"	f	struct:cv::v_int16x8
v_int16x8	hal/intrin_sse.hpp	/^struct v_int16x8$/;"	s	namespace:cv
v_int32x4	hal/intrin_cpp.hpp	/^typedef v_reg<int, 4> v_int32x4;$/;"	t	namespace:cv
v_int32x4	hal/intrin_neon.hpp	/^    explicit v_int32x4(int32x4_t v) : val(v) {}$/;"	f	struct:cv::v_int32x4
v_int32x4	hal/intrin_neon.hpp	/^    v_int32x4() {}$/;"	f	struct:cv::v_int32x4
v_int32x4	hal/intrin_neon.hpp	/^    v_int32x4(int v0, int v1, int v2, int v3)$/;"	f	struct:cv::v_int32x4
v_int32x4	hal/intrin_neon.hpp	/^struct v_int32x4$/;"	s	namespace:cv
v_int32x4	hal/intrin_sse.hpp	/^    explicit v_int32x4(__m128i v) : val(v) {}$/;"	f	struct:cv::v_int32x4
v_int32x4	hal/intrin_sse.hpp	/^    v_int32x4() {}$/;"	f	struct:cv::v_int32x4
v_int32x4	hal/intrin_sse.hpp	/^    v_int32x4(int v0, int v1, int v2, int v3)$/;"	f	struct:cv::v_int32x4
v_int32x4	hal/intrin_sse.hpp	/^struct v_int32x4$/;"	s	namespace:cv
v_int64x2	hal/intrin_cpp.hpp	/^typedef v_reg<int64, 2> v_int64x2;$/;"	t	namespace:cv
v_int64x2	hal/intrin_neon.hpp	/^    explicit v_int64x2(int64x2_t v) : val(v) {}$/;"	f	struct:cv::v_int64x2
v_int64x2	hal/intrin_neon.hpp	/^    v_int64x2() {}$/;"	f	struct:cv::v_int64x2
v_int64x2	hal/intrin_neon.hpp	/^    v_int64x2(int v0, int v1)$/;"	f	struct:cv::v_int64x2
v_int64x2	hal/intrin_neon.hpp	/^struct v_int64x2$/;"	s	namespace:cv
v_int64x2	hal/intrin_sse.hpp	/^    explicit v_int64x2(__m128i v) : val(v) {}$/;"	f	struct:cv::v_int64x2
v_int64x2	hal/intrin_sse.hpp	/^    v_int64x2() {}$/;"	f	struct:cv::v_int64x2
v_int64x2	hal/intrin_sse.hpp	/^    v_int64x2(int64 v0, int64 v1)$/;"	f	struct:cv::v_int64x2
v_int64x2	hal/intrin_sse.hpp	/^struct v_int64x2$/;"	s	namespace:cv
v_int8x16	hal/intrin_cpp.hpp	/^typedef v_reg<schar, 16> v_int8x16;$/;"	t	namespace:cv
v_int8x16	hal/intrin_neon.hpp	/^    explicit v_int8x16(int8x16_t v) : val(v) {}$/;"	f	struct:cv::v_int8x16
v_int8x16	hal/intrin_neon.hpp	/^    v_int8x16() {}$/;"	f	struct:cv::v_int8x16
v_int8x16	hal/intrin_neon.hpp	/^    v_int8x16(schar v0, schar v1, schar v2, schar v3, schar v4, schar v5, schar v6, schar v7,$/;"	f	struct:cv::v_int8x16
v_int8x16	hal/intrin_neon.hpp	/^struct v_int8x16$/;"	s	namespace:cv
v_int8x16	hal/intrin_sse.hpp	/^    explicit v_int8x16(__m128i v) : val(v) {}$/;"	f	struct:cv::v_int8x16
v_int8x16	hal/intrin_sse.hpp	/^    v_int8x16() {}$/;"	f	struct:cv::v_int8x16
v_int8x16	hal/intrin_sse.hpp	/^    v_int8x16(schar v0, schar v1, schar v2, schar v3, schar v4, schar v5, schar v6, schar v7,$/;"	f	struct:cv::v_int8x16
v_int8x16	hal/intrin_sse.hpp	/^struct v_int8x16$/;"	s	namespace:cv
v_invsqrt	hal/intrin_cpp.hpp	/^inline v_reg<_Tp, n> v_invsqrt(const v_reg<_Tp, n>& a)$/;"	f	namespace:cv
v_invsqrt	hal/intrin_neon.hpp	/^inline v_float32x4 v_invsqrt(const v_float32x4& x)$/;"	f	namespace:cv
v_invsqrt	hal/intrin_sse.hpp	/^inline v_float32x4 v_invsqrt(const v_float32x4& x)$/;"	f	namespace:cv
v_invsqrt	hal/intrin_sse.hpp	/^inline v_float64x2 v_invsqrt(const v_float64x2& x)$/;"	f	namespace:cv
v_load	hal/intrin_cpp.hpp	/^template<typename _Tp, int n> inline v_reg<_Tp, n> v_load(const _Tp* ptr)$/;"	f	namespace:cv
v_load_aligned	hal/intrin_cpp.hpp	/^template<typename _Tp, int n> inline v_reg<_Tp, n> v_load_aligned(const _Tp* ptr)$/;"	f	namespace:cv
v_load_deinterleave	hal/intrin_cpp.hpp	/^inline void v_load_deinterleave(const _Tp* ptr, v_reg<_Tp, n>& a,$/;"	f	namespace:cv
v_load_deinterleave	hal/intrin_cpp.hpp	/^template<typename _Tp, int n> inline void v_load_deinterleave(const _Tp* ptr, v_reg<_Tp, n>& a,$/;"	f	namespace:cv
v_load_deinterleave	hal/intrin_sse.hpp	/^inline void v_load_deinterleave(const uchar* ptr, v_uint8x16& a, v_uint8x16& b, v_uint8x16& c)$/;"	f	namespace:cv
v_load_deinterleave	hal/intrin_sse.hpp	/^inline void v_load_deinterleave(const uchar* ptr, v_uint8x16& a, v_uint8x16& b, v_uint8x16& c, v_uint8x16& d)$/;"	f	namespace:cv
v_load_deinterleave	hal/intrin_sse.hpp	/^inline void v_load_deinterleave(const unsigned* ptr, v_uint32x4& a, v_uint32x4& b, v_uint32x4& c)$/;"	f	namespace:cv
v_load_deinterleave	hal/intrin_sse.hpp	/^inline void v_load_deinterleave(const unsigned* ptr, v_uint32x4& a, v_uint32x4& b, v_uint32x4& c, v_uint32x4& d)$/;"	f	namespace:cv
v_load_deinterleave	hal/intrin_sse.hpp	/^inline void v_load_deinterleave(const ushort* ptr, v_uint16x8& a, v_uint16x8& b, v_uint16x8& c)$/;"	f	namespace:cv
v_load_deinterleave	hal/intrin_sse.hpp	/^inline void v_load_deinterleave(const ushort* ptr, v_uint16x8& a, v_uint16x8& b, v_uint16x8& c, v_uint16x8& d)$/;"	f	namespace:cv
v_load_expand	hal/intrin_cpp.hpp	/^template<typename _Tp, int n> inline v_reg<typename V_TypeTraits<_Tp>::w_type, n> v_load_expand(const _Tp* ptr)$/;"	f	namespace:cv
v_load_expand	hal/intrin_sse.hpp	/^inline v_int64x2 v_load_expand(const int* ptr)$/;"	f	namespace:cv
v_load_expand	hal/intrin_sse.hpp	/^inline v_uint64x2 v_load_expand(const unsigned* ptr)$/;"	f	namespace:cv
v_load_expand_q	hal/intrin_cpp.hpp	/^    V_TypeTraits<typename V_TypeTraits<_Tp>::w_type>::w_type, n> v_load_expand_q(const _Tp* ptr)$/;"	f	namespace:cv
v_load_expand_q	hal/intrin_neon.hpp	/^inline v_int32x4 v_load_expand_q(const schar* ptr)$/;"	f	namespace:cv
v_load_expand_q	hal/intrin_neon.hpp	/^inline v_uint32x4 v_load_expand_q(const uchar* ptr)$/;"	f	namespace:cv
v_load_expand_q	hal/intrin_sse.hpp	/^inline v_int32x4 v_load_expand_q(const schar* ptr)$/;"	f	namespace:cv
v_load_expand_q	hal/intrin_sse.hpp	/^inline v_uint32x4 v_load_expand_q(const uchar* ptr)$/;"	f	namespace:cv
v_load_halves	hal/intrin_cpp.hpp	/^template<typename _Tp, int n> inline void v_load_halves(const _Tp* loptr, const _Tp* hiptr)$/;"	f	namespace:cv
v_magnitude	hal/intrin_cpp.hpp	/^inline v_reg<_Tp, n> v_magnitude(const v_reg<_Tp, n>& a, const v_reg<_Tp, n>& b)$/;"	f	namespace:cv
v_magnitude	hal/intrin_neon.hpp	/^inline v_float32x4 v_magnitude(const v_float32x4& a, const v_float32x4& b)$/;"	f	namespace:cv
v_matmul	hal/intrin_cpp.hpp	/^inline v_float32x4 v_matmul(const v_float32x4& v, const v_float32x4& m0,$/;"	f	namespace:cv
v_matmul	hal/intrin_neon.hpp	/^inline v_float32x4 v_matmul(const v_float32x4& v, const v_float32x4& m0,$/;"	f	namespace:cv
v_matmul	hal/intrin_sse.hpp	/^inline v_float32x4 v_matmul(const v_float32x4& v, const v_float32x4& m0,$/;"	f	namespace:cv
v_max	hal/intrin_sse.hpp	/^inline v_int32x4 v_max(const v_int32x4& a, const v_int32x4& b)$/;"	f	namespace:cv
v_max	hal/intrin_sse.hpp	/^inline v_int8x16 v_max(const v_int8x16& a, const v_int8x16& b)$/;"	f	namespace:cv
v_max	hal/intrin_sse.hpp	/^inline v_uint16x8 v_max(const v_uint16x8& a, const v_uint16x8& b)$/;"	f	namespace:cv
v_max	hal/intrin_sse.hpp	/^inline v_uint32x4 v_max(const v_uint32x4& a, const v_uint32x4& b)$/;"	f	namespace:cv
v_min	hal/intrin_sse.hpp	/^inline v_int32x4 v_min(const v_int32x4& a, const v_int32x4& b)$/;"	f	namespace:cv
v_min	hal/intrin_sse.hpp	/^inline v_int8x16 v_min(const v_int8x16& a, const v_int8x16& b)$/;"	f	namespace:cv
v_min	hal/intrin_sse.hpp	/^inline v_uint16x8 v_min(const v_uint16x8& a, const v_uint16x8& b)$/;"	f	namespace:cv
v_min	hal/intrin_sse.hpp	/^inline v_uint32x4 v_min(const v_uint32x4& a, const v_uint32x4& b)$/;"	f	namespace:cv
v_minmax	hal/intrin_cpp.hpp	/^inline void v_minmax( const v_reg<_Tp, n>& a, const v_reg<_Tp, n>& b,$/;"	f	namespace:cv
v_mul_expand	hal/intrin_cpp.hpp	/^template<typename _Tp, int n> inline void v_mul_expand(const v_reg<_Tp, n>& a, const v_reg<_Tp, n>& b,$/;"	f	namespace:cv
v_mul_expand	hal/intrin_neon.hpp	/^inline void v_mul_expand(const v_int16x8& a, const v_int16x8& b,$/;"	f	namespace:cv
v_mul_expand	hal/intrin_neon.hpp	/^inline void v_mul_expand(const v_uint16x8& a, const v_uint16x8& b,$/;"	f	namespace:cv
v_mul_expand	hal/intrin_neon.hpp	/^inline void v_mul_expand(const v_uint32x4& a, const v_uint32x4& b,$/;"	f	namespace:cv
v_mul_expand	hal/intrin_sse.hpp	/^inline void v_mul_expand(const v_int16x8& a, const v_int16x8& b,$/;"	f	namespace:cv
v_mul_expand	hal/intrin_sse.hpp	/^inline void v_mul_expand(const v_uint16x8& a, const v_uint16x8& b,$/;"	f	namespace:cv
v_mul_expand	hal/intrin_sse.hpp	/^inline void v_mul_expand(const v_uint32x4& a, const v_uint32x4& b,$/;"	f	namespace:cv
v_muladd	hal/intrin_cpp.hpp	/^inline v_reg<_Tp, n> v_muladd(const v_reg<_Tp, n>& a, const v_reg<_Tp, n>& b,$/;"	f	namespace:cv
v_muladd	hal/intrin_neon.hpp	/^inline v_float32x4 v_muladd(const v_float32x4& a, const v_float32x4& b, const v_float32x4& c)$/;"	f	namespace:cv
v_pack	hal/intrin_sse.hpp	/^inline v_int16x8 v_pack(const v_int32x4& a, const v_int32x4& b)$/;"	f	namespace:cv
v_pack	hal/intrin_sse.hpp	/^inline v_int32x4 v_pack(const v_int64x2& a, const v_int64x2& b)$/;"	f	namespace:cv
v_pack	hal/intrin_sse.hpp	/^inline v_int8x16 v_pack(const v_int16x8& a, const v_int16x8& b)$/;"	f	namespace:cv
v_pack	hal/intrin_sse.hpp	/^inline v_uint16x8 v_pack(const v_uint32x4& a, const v_uint32x4& b)$/;"	f	namespace:cv
v_pack	hal/intrin_sse.hpp	/^inline v_uint32x4 v_pack(const v_uint64x2& a, const v_uint64x2& b)$/;"	f	namespace:cv
v_pack	hal/intrin_sse.hpp	/^inline v_uint8x16 v_pack(const v_uint16x8& a, const v_uint16x8& b)$/;"	f	namespace:cv
v_pack_store	hal/intrin_sse.hpp	/^inline void v_pack_store(int* ptr, const v_int64x2& a)$/;"	f	namespace:cv
v_pack_store	hal/intrin_sse.hpp	/^inline void v_pack_store(schar* ptr, v_int16x8& a)$/;"	f	namespace:cv
v_pack_store	hal/intrin_sse.hpp	/^inline void v_pack_store(short* ptr, const v_int32x4& a)$/;"	f	namespace:cv
v_pack_store	hal/intrin_sse.hpp	/^inline void v_pack_store(uchar* ptr, const v_uint16x8& a)$/;"	f	namespace:cv
v_pack_store	hal/intrin_sse.hpp	/^inline void v_pack_store(unsigned* ptr, const v_uint64x2& a)$/;"	f	namespace:cv
v_pack_store	hal/intrin_sse.hpp	/^inline void v_pack_store(ushort* ptr, const v_uint32x4& a)$/;"	f	namespace:cv
v_pack_u	hal/intrin_sse.hpp	/^inline v_uint16x8 v_pack_u(const v_int32x4& a, const v_int32x4& b)$/;"	f	namespace:cv
v_pack_u	hal/intrin_sse.hpp	/^inline v_uint8x16 v_pack_u(const v_int16x8& a, const v_int16x8& b)$/;"	f	namespace:cv
v_pack_u_store	hal/intrin_sse.hpp	/^inline void v_pack_u_store(uchar* ptr, const v_int16x8& a)$/;"	f	namespace:cv
v_pack_u_store	hal/intrin_sse.hpp	/^inline void v_pack_u_store(ushort* ptr, const v_int32x4& a)$/;"	f	namespace:cv
v_packq_epi32	hal/intrin_sse.hpp	/^inline __m128i v_packq_epi32(__m128i a)$/;"	f	namespace:cv
v_recombine	hal/intrin_cpp.hpp	/^inline void v_recombine(const v_reg<_Tp, n>& a, const v_reg<_Tp, n>& b,$/;"	f	namespace:cv
v_reduce_sum	hal/intrin_cpp.hpp	/^template<typename _Tp, int n> inline typename V_TypeTraits<_Tp>::sum_type v_reduce_sum(const v_reg<_Tp, n>& a)$/;"	f	namespace:cv
v_reg	hal/intrin_cpp.hpp	/^    explicit v_reg(const _Tp* ptr) { for( int i = 0; i < n; i++ ) s[i] = ptr[i]; }$/;"	f	struct:cv::v_reg
v_reg	hal/intrin_cpp.hpp	/^    v_reg() {}$/;"	f	struct:cv::v_reg
v_reg	hal/intrin_cpp.hpp	/^    v_reg(_Tp s0, _Tp s1) { s[0] = s0; s[1] = s1; }$/;"	f	struct:cv::v_reg
v_reg	hal/intrin_cpp.hpp	/^    v_reg(_Tp s0, _Tp s1, _Tp s2, _Tp s3) { s[0] = s0; s[1] = s1; s[2] = s2; s[3] = s3; }$/;"	f	struct:cv::v_reg
v_reg	hal/intrin_cpp.hpp	/^    v_reg(_Tp s0, _Tp s1, _Tp s2, _Tp s3,$/;"	f	struct:cv::v_reg
v_reg	hal/intrin_cpp.hpp	/^    v_reg(const v_reg<_Tp, n> & r)$/;"	f	struct:cv::v_reg
v_reg	hal/intrin_cpp.hpp	/^template<typename _Tp, int n> struct v_reg$/;"	s	namespace:cv
v_reinterpret_as_f32	hal/intrin_sse.hpp	/^inline v_float32x4 v_reinterpret_as_f32(const v_int64x2& a)$/;"	f	namespace:cv
v_reinterpret_as_f32	hal/intrin_sse.hpp	/^inline v_float32x4 v_reinterpret_as_f32(const v_uint64x2& a)$/;"	f	namespace:cv
v_reinterpret_as_f64	hal/intrin_sse.hpp	/^inline v_float64x2 v_reinterpret_as_f64(const v_int64x2& a)$/;"	f	namespace:cv
v_reinterpret_as_f64	hal/intrin_sse.hpp	/^inline v_float64x2 v_reinterpret_as_f64(const v_uint64x2& a)$/;"	f	namespace:cv
v_reinterpret_as_int	hal/intrin_cpp.hpp	/^    v_reinterpret_as_int(const v_reg<_Tp, n>& a)$/;"	f	namespace:cv
v_reinterpret_as_s64	hal/intrin_sse.hpp	/^v_int64x2 v_reinterpret_as_s64(const _Tpvec& a) { return v_int64x2(a.val); }$/;"	f	namespace:cv
v_reinterpret_as_u64	hal/intrin_sse.hpp	/^v_uint64x2 v_reinterpret_as_u64(const _Tpvec& a) { return v_uint64x2(a.val); }$/;"	f	namespace:cv
v_reinterpret_as_uint	hal/intrin_cpp.hpp	/^    v_reinterpret_as_uint(const v_reg<_Tp, n>& a)$/;"	f	namespace:cv
v_round	hal/intrin_cpp.hpp	/^template<int n> inline v_reg<int, n*2> v_round(const v_reg<double, n>& a)$/;"	f	namespace:cv
v_round	hal/intrin_cpp.hpp	/^template<int n> inline v_reg<int, n> v_round(const v_reg<float, n>& a)$/;"	f	namespace:cv
v_round	hal/intrin_neon.hpp	/^inline v_int32x4 v_round(const v_float32x4& a)$/;"	f	namespace:cv
v_round	hal/intrin_sse.hpp	/^inline v_int32x4 v_round(const v_float32x4& a)$/;"	f	namespace:cv
v_round	hal/intrin_sse.hpp	/^inline v_int32x4 v_round(const v_float64x2& a)$/;"	f	namespace:cv
v_rshr_pack	hal/intrin_sse.hpp	/^v_int16x8 v_rshr_pack(const v_int32x4& a, const v_int32x4& b)$/;"	f	namespace:cv
v_rshr_pack	hal/intrin_sse.hpp	/^v_int32x4 v_rshr_pack(const v_int64x2& a, const v_int64x2& b)$/;"	f	namespace:cv
v_rshr_pack	hal/intrin_sse.hpp	/^v_int8x16 v_rshr_pack(const v_int16x8& a, const v_int16x8& b)$/;"	f	namespace:cv
v_rshr_pack	hal/intrin_sse.hpp	/^v_uint16x8 v_rshr_pack(const v_uint32x4& a, const v_uint32x4& b)$/;"	f	namespace:cv
v_rshr_pack	hal/intrin_sse.hpp	/^v_uint32x4 v_rshr_pack(const v_uint64x2& a, const v_uint64x2& b)$/;"	f	namespace:cv
v_rshr_pack	hal/intrin_sse.hpp	/^v_uint8x16 v_rshr_pack(const v_uint16x8& a, const v_uint16x8& b)$/;"	f	namespace:cv
v_rshr_pack_store	hal/intrin_sse.hpp	/^void v_rshr_pack_store(int* ptr, const v_int64x2& a)$/;"	f	namespace:cv
v_rshr_pack_store	hal/intrin_sse.hpp	/^void v_rshr_pack_store(schar* ptr, const v_int16x8& a)$/;"	f	namespace:cv
v_rshr_pack_store	hal/intrin_sse.hpp	/^void v_rshr_pack_store(short* ptr, const v_int32x4& a)$/;"	f	namespace:cv
v_rshr_pack_store	hal/intrin_sse.hpp	/^void v_rshr_pack_store(uchar* ptr, const v_uint16x8& a)$/;"	f	namespace:cv
v_rshr_pack_store	hal/intrin_sse.hpp	/^void v_rshr_pack_store(unsigned* ptr, const v_uint64x2& a)$/;"	f	namespace:cv
v_rshr_pack_store	hal/intrin_sse.hpp	/^void v_rshr_pack_store(ushort* ptr, const v_uint32x4& a)$/;"	f	namespace:cv
v_rshr_pack_u	hal/intrin_sse.hpp	/^v_uint8x16 v_rshr_pack_u(const v_int16x8& a, const v_int16x8& b)$/;"	f	namespace:cv
v_rshr_pack_u_store	hal/intrin_sse.hpp	/^void v_rshr_pack_u_store(uchar* ptr, const v_int16x8& a)$/;"	f	namespace:cv
v_rshr_pack_u_store	hal/intrin_sse.hpp	/^void v_rshr_pack_u_store(ushort* ptr, const v_int32x4& a)$/;"	f	namespace:cv
v_select	hal/intrin_cpp.hpp	/^template<typename _Tp, int n> inline v_reg<_Tp, n> v_select(const v_reg<_Tp, n>& mask,$/;"	f	namespace:cv
v_select_si128	hal/intrin_sse.hpp	/^inline __m128i v_select_si128(__m128i mask, __m128i a, __m128i b)$/;"	f	namespace:cv
v_setall_s64	hal/intrin_sse.hpp	/^inline v_int64x2 v_setall_s64(int64 val) { return v_int64x2(val, val); }$/;"	f	namespace:cv
v_setall_u64	hal/intrin_sse.hpp	/^inline v_uint64x2 v_setall_u64(uint64 val) { return v_uint64x2(val, val); }$/;"	f	namespace:cv
v_setzero_s64	hal/intrin_sse.hpp	/^inline v_int64x2 v_setzero_s64() { return v_int64x2(_mm_setzero_si128()); }$/;"	f	namespace:cv
v_setzero_u64	hal/intrin_sse.hpp	/^inline v_uint64x2 v_setzero_u64() { return v_uint64x2(_mm_setzero_si128()); }$/;"	f	namespace:cv
v_sign_epi64	hal/intrin_sse.hpp	/^inline __m128i v_sign_epi64(__m128i a)$/;"	f	namespace:cv
v_signmask	hal/intrin_cpp.hpp	/^template<typename _Tp, int n> inline int v_signmask(const v_reg<_Tp, n>& a)$/;"	f	namespace:cv
v_signmask	hal/intrin_neon.hpp	/^inline int v_signmask(const v_float32x4& a)$/;"	f	namespace:cv
v_signmask	hal/intrin_neon.hpp	/^inline int v_signmask(const v_int16x8& a)$/;"	f	namespace:cv
v_signmask	hal/intrin_neon.hpp	/^inline int v_signmask(const v_int32x4& a)$/;"	f	namespace:cv
v_signmask	hal/intrin_neon.hpp	/^inline int v_signmask(const v_int8x16& a)$/;"	f	namespace:cv
v_signmask	hal/intrin_neon.hpp	/^inline int v_signmask(const v_uint16x8& a)$/;"	f	namespace:cv
v_signmask	hal/intrin_neon.hpp	/^inline int v_signmask(const v_uint32x4& a)$/;"	f	namespace:cv
v_signmask	hal/intrin_neon.hpp	/^inline int v_signmask(const v_uint8x16& a)$/;"	f	namespace:cv
v_sqr_magnitude	hal/intrin_cpp.hpp	/^inline v_reg<_Tp, n> v_sqr_magnitude(const v_reg<_Tp, n>& a, const v_reg<_Tp, n>& b)$/;"	f	namespace:cv
v_sqr_magnitude	hal/intrin_neon.hpp	/^inline v_float32x4 v_sqr_magnitude(const v_float32x4& a, const v_float32x4& b)$/;"	f	namespace:cv
v_sqrt	hal/intrin_neon.hpp	/^inline v_float32x4 v_sqrt(const v_float32x4& x)$/;"	f	namespace:cv
v_sqrt	hal/intrin_sse.hpp	/^inline v_float32x4 v_sqrt(const v_float32x4& x)$/;"	f	namespace:cv
v_sqrt	hal/intrin_sse.hpp	/^inline v_float64x2 v_sqrt(const v_float64x2& x)$/;"	f	namespace:cv
v_srai_epi64	hal/intrin_sse.hpp	/^inline __m128i v_srai_epi64(__m128i a, int imm)$/;"	f	namespace:cv
v_store	hal/intrin_cpp.hpp	/^inline void v_store(_Tp* ptr, const v_reg<_Tp, n>& a)$/;"	f	namespace:cv
v_store_aligned	hal/intrin_cpp.hpp	/^inline void v_store_aligned(_Tp* ptr, const v_reg<_Tp, n>& a)$/;"	f	namespace:cv
v_store_high	hal/intrin_cpp.hpp	/^inline void v_store_high(_Tp* ptr, const v_reg<_Tp, n>& a)$/;"	f	namespace:cv
v_store_interleave	hal/intrin_cpp.hpp	/^inline void v_store_interleave( _Tp* ptr, const v_reg<_Tp, n>& a,$/;"	f	namespace:cv
v_store_interleave	hal/intrin_cpp.hpp	/^template<typename _Tp, int n> inline void v_store_interleave( _Tp* ptr, const v_reg<_Tp, n>& a,$/;"	f	namespace:cv
v_store_interleave	hal/intrin_sse.hpp	/^inline void v_store_interleave( uchar* ptr, const v_uint8x16& a, const v_uint8x16& b,$/;"	f	namespace:cv
v_store_interleave	hal/intrin_sse.hpp	/^inline void v_store_interleave( unsigned* ptr, const v_uint32x4& a, const v_uint32x4& b,$/;"	f	namespace:cv
v_store_interleave	hal/intrin_sse.hpp	/^inline void v_store_interleave( ushort* ptr, const v_uint16x8& a, const v_uint16x8& b,$/;"	f	namespace:cv
v_store_interleave	hal/intrin_sse.hpp	/^inline void v_store_interleave( ushort* ptr, const v_uint16x8& a,$/;"	f	namespace:cv
v_store_interleave	hal/intrin_sse.hpp	/^inline void v_store_interleave(unsigned* ptr, const v_uint32x4& a, const v_uint32x4& b,$/;"	f	namespace:cv
v_store_low	hal/intrin_cpp.hpp	/^inline void v_store_low(_Tp* ptr, const v_reg<_Tp, n>& a)$/;"	f	namespace:cv
v_transpose4x4	hal/intrin_cpp.hpp	/^inline void v_transpose4x4( v_reg<_Tp, 4>& a0, const v_reg<_Tp, 4>& a1,$/;"	f	namespace:cv
v_trunc	hal/intrin_cpp.hpp	/^template<int n> inline v_reg<int, n*2> v_trunc(const v_reg<double, n>& a)$/;"	f	namespace:cv
v_trunc	hal/intrin_cpp.hpp	/^template<int n> inline v_reg<int, n> v_trunc(const v_reg<float, n>& a)$/;"	f	namespace:cv
v_trunc	hal/intrin_neon.hpp	/^inline v_int32x4 v_trunc(const v_float32x4& a)$/;"	f	namespace:cv
v_trunc	hal/intrin_sse.hpp	/^inline v_int32x4 v_trunc(const v_float32x4& a)$/;"	f	namespace:cv
v_trunc	hal/intrin_sse.hpp	/^inline v_int32x4 v_trunc(const v_float64x2& a)$/;"	f	namespace:cv
v_uint16x8	hal/intrin_cpp.hpp	/^typedef v_reg<ushort, 8> v_uint16x8;$/;"	t	namespace:cv
v_uint16x8	hal/intrin_neon.hpp	/^    explicit v_uint16x8(uint16x8_t v) : val(v) {}$/;"	f	struct:cv::v_uint16x8
v_uint16x8	hal/intrin_neon.hpp	/^    v_uint16x8() {}$/;"	f	struct:cv::v_uint16x8
v_uint16x8	hal/intrin_neon.hpp	/^    v_uint16x8(ushort v0, ushort v1, ushort v2, ushort v3, ushort v4, ushort v5, ushort v6, ushort v7)$/;"	f	struct:cv::v_uint16x8
v_uint16x8	hal/intrin_neon.hpp	/^struct v_uint16x8$/;"	s	namespace:cv
v_uint16x8	hal/intrin_sse.hpp	/^    explicit v_uint16x8(__m128i v) : val(v) {}$/;"	f	struct:cv::v_uint16x8
v_uint16x8	hal/intrin_sse.hpp	/^    v_uint16x8() {}$/;"	f	struct:cv::v_uint16x8
v_uint16x8	hal/intrin_sse.hpp	/^    v_uint16x8(ushort v0, ushort v1, ushort v2, ushort v3, ushort v4, ushort v5, ushort v6, ushort v7)$/;"	f	struct:cv::v_uint16x8
v_uint16x8	hal/intrin_sse.hpp	/^struct v_uint16x8$/;"	s	namespace:cv
v_uint32x4	hal/intrin_cpp.hpp	/^typedef v_reg<unsigned, 4> v_uint32x4;$/;"	t	namespace:cv
v_uint32x4	hal/intrin_neon.hpp	/^    explicit v_uint32x4(uint32x4_t v) : val(v) {}$/;"	f	struct:cv::v_uint32x4
v_uint32x4	hal/intrin_neon.hpp	/^    v_uint32x4() {}$/;"	f	struct:cv::v_uint32x4
v_uint32x4	hal/intrin_neon.hpp	/^    v_uint32x4(unsigned v0, unsigned v1, unsigned v2, unsigned v3)$/;"	f	struct:cv::v_uint32x4
v_uint32x4	hal/intrin_neon.hpp	/^struct v_uint32x4$/;"	s	namespace:cv
v_uint32x4	hal/intrin_sse.hpp	/^    explicit v_uint32x4(__m128i v) : val(v) {}$/;"	f	struct:cv::v_uint32x4
v_uint32x4	hal/intrin_sse.hpp	/^    v_uint32x4() {}$/;"	f	struct:cv::v_uint32x4
v_uint32x4	hal/intrin_sse.hpp	/^    v_uint32x4(unsigned v0, unsigned v1, unsigned v2, unsigned v3)$/;"	f	struct:cv::v_uint32x4
v_uint32x4	hal/intrin_sse.hpp	/^struct v_uint32x4$/;"	s	namespace:cv
v_uint64x2	hal/intrin_cpp.hpp	/^typedef v_reg<uint64, 2> v_uint64x2;$/;"	t	namespace:cv
v_uint64x2	hal/intrin_neon.hpp	/^    explicit v_uint64x2(uint64x2_t v) : val(v) {}$/;"	f	struct:cv::v_uint64x2
v_uint64x2	hal/intrin_neon.hpp	/^    v_uint64x2() {}$/;"	f	struct:cv::v_uint64x2
v_uint64x2	hal/intrin_neon.hpp	/^    v_uint64x2(unsigned v0, unsigned v1)$/;"	f	struct:cv::v_uint64x2
v_uint64x2	hal/intrin_neon.hpp	/^struct v_uint64x2$/;"	s	namespace:cv
v_uint64x2	hal/intrin_sse.hpp	/^    explicit v_uint64x2(__m128i v) : val(v) {}$/;"	f	struct:cv::v_uint64x2
v_uint64x2	hal/intrin_sse.hpp	/^    v_uint64x2() {}$/;"	f	struct:cv::v_uint64x2
v_uint64x2	hal/intrin_sse.hpp	/^    v_uint64x2(uint64 v0, uint64 v1)$/;"	f	struct:cv::v_uint64x2
v_uint64x2	hal/intrin_sse.hpp	/^struct v_uint64x2$/;"	s	namespace:cv
v_uint8x16	hal/intrin_cpp.hpp	/^typedef v_reg<uchar, 16> v_uint8x16;$/;"	t	namespace:cv
v_uint8x16	hal/intrin_neon.hpp	/^    explicit v_uint8x16(uint8x16_t v) : val(v) {}$/;"	f	struct:cv::v_uint8x16
v_uint8x16	hal/intrin_neon.hpp	/^    v_uint8x16() {}$/;"	f	struct:cv::v_uint8x16
v_uint8x16	hal/intrin_neon.hpp	/^    v_uint8x16(uchar v0, uchar v1, uchar v2, uchar v3, uchar v4, uchar v5, uchar v6, uchar v7,$/;"	f	struct:cv::v_uint8x16
v_uint8x16	hal/intrin_neon.hpp	/^struct v_uint8x16$/;"	s	namespace:cv
v_uint8x16	hal/intrin_sse.hpp	/^    explicit v_uint8x16(__m128i v) : val(v) {}$/;"	f	struct:cv::v_uint8x16
v_uint8x16	hal/intrin_sse.hpp	/^    v_uint8x16() {}$/;"	f	struct:cv::v_uint8x16
v_uint8x16	hal/intrin_sse.hpp	/^    v_uint8x16(uchar v0, uchar v1, uchar v2, uchar v3, uchar v4, uchar v5, uchar v6, uchar v7,$/;"	f	struct:cv::v_uint8x16
v_uint8x16	hal/intrin_sse.hpp	/^struct v_uint8x16$/;"	s	namespace:cv
v_zip	hal/intrin_cpp.hpp	/^template<typename _Tp, int n> inline void v_zip( const v_reg<_Tp, n>& a0, const v_reg<_Tp, n>& a1,$/;"	f	namespace:cv
vabsdiff2	core/cuda/simd_functions.hpp	/^    static __device__ __forceinline__ unsigned int vabsdiff2(unsigned int a, unsigned int b)$/;"	f	namespace:cv::cuda::device
vabsdiff2	cudev/util/simd_functions.hpp	/^__device__ __forceinline__ uint vabsdiff2(uint a, uint b)$/;"	f	namespace:cv::cudev
vabsdiff4	core/cuda/simd_functions.hpp	/^    static __device__ __forceinline__ unsigned int vabsdiff4(unsigned int a, unsigned int b)$/;"	f	namespace:cv::cuda::device
vabsdiff4	cudev/util/simd_functions.hpp	/^__device__ __forceinline__ uint vabsdiff4(uint a, uint b)$/;"	f	namespace:cv::cudev
vadd2	core/cuda/simd_functions.hpp	/^    static __device__ __forceinline__ unsigned int vadd2(unsigned int a, unsigned int b)$/;"	f	namespace:cv::cuda::device
vadd2	cudev/util/simd_functions.hpp	/^__device__ __forceinline__ uint vadd2(uint a, uint b)$/;"	f	namespace:cv::cudev
vadd4	core/cuda/simd_functions.hpp	/^    static __device__ __forceinline__ unsigned int vadd4(unsigned int a, unsigned int b)$/;"	f	namespace:cv::cuda::device
vadd4	cudev/util/simd_functions.hpp	/^__device__ __forceinline__ uint vadd4(uint a, uint b)$/;"	f	namespace:cv::cudev
val	core/base.hpp	/^     template <> struct CV_StaticAssert_failed<true> { enum { val = 1 }; };$/;"	e	enum:cv::CV_StaticAssert_failed::__anon164
val	core/cuda/border_interpolate.hpp	/^        D val;$/;"	m	struct:cv::cuda::device::BorderReader
val	core/cuda/border_interpolate.hpp	/^        D val;$/;"	m	struct:cv::cuda::device::BrdColConstant
val	core/cuda/border_interpolate.hpp	/^        D val;$/;"	m	struct:cv::cuda::device::BrdConstant
val	core/cuda/border_interpolate.hpp	/^        D val;$/;"	m	struct:cv::cuda::device::BrdRowConstant
val	core/matx.hpp	/^    _Tp val[m*n]; \/\/< matrix elements$/;"	m	class:cv::Matx
val	core/types_c.h	/^    double val[4];$/;"	m	struct:CvScalar
val	cudev/ptr2d/extrapolation.hpp	/^    typename PtrTraits<SrcPtr>::value_type val;$/;"	m	struct:cv::cudev::BrdConstant
val	hal/intrin_neon.hpp	/^    float32x4_t val;$/;"	m	struct:cv::v_float32x4
val	hal/intrin_neon.hpp	/^    int16x8_t val;$/;"	m	struct:cv::v_int16x8
val	hal/intrin_neon.hpp	/^    int32x4_t val;$/;"	m	struct:cv::v_int32x4
val	hal/intrin_neon.hpp	/^    int64x2_t val;$/;"	m	struct:cv::v_int64x2
val	hal/intrin_neon.hpp	/^    int8x16_t val;$/;"	m	struct:cv::v_int8x16
val	hal/intrin_neon.hpp	/^    uint16x8_t val;$/;"	m	struct:cv::v_uint16x8
val	hal/intrin_neon.hpp	/^    uint32x4_t val;$/;"	m	struct:cv::v_uint32x4
val	hal/intrin_neon.hpp	/^    uint64x2_t val;$/;"	m	struct:cv::v_uint64x2
val	hal/intrin_neon.hpp	/^    uint8x16_t val;$/;"	m	struct:cv::v_uint8x16
val	hal/intrin_sse.hpp	/^    __m128 val;$/;"	m	struct:cv::v_float32x4
val	hal/intrin_sse.hpp	/^    __m128d val;$/;"	m	struct:cv::v_float64x2
val	hal/intrin_sse.hpp	/^    __m128i val;$/;"	m	struct:cv::v_int16x8
val	hal/intrin_sse.hpp	/^    __m128i val;$/;"	m	struct:cv::v_int32x4
val	hal/intrin_sse.hpp	/^    __m128i val;$/;"	m	struct:cv::v_int64x2
val	hal/intrin_sse.hpp	/^    __m128i val;$/;"	m	struct:cv::v_int8x16
val	hal/intrin_sse.hpp	/^    __m128i val;$/;"	m	struct:cv::v_uint16x8
val	hal/intrin_sse.hpp	/^    __m128i val;$/;"	m	struct:cv::v_uint32x4
val	hal/intrin_sse.hpp	/^    __m128i val;$/;"	m	struct:cv::v_uint64x2
val	hal/intrin_sse.hpp	/^    __m128i val;$/;"	m	struct:cv::v_uint8x16
val_	ts/cuda_test.hpp	/^        bool val_;$/;"	m	class:cvtest::Inverse
val_	ts/cuda_test.hpp	/^        bool val_;$/;"	m	class:cvtest::UseRoi
val_type	cudev/grid/detail/reduce.hpp	/^        typedef typename MakeVec<R, 2>::type val_type;$/;"	t	struct:cv::cudev::grid_reduce_detail::AtomicUnroll
val_type	cudev/grid/detail/reduce.hpp	/^        typedef typename MakeVec<R, 3>::type val_type;$/;"	t	struct:cv::cudev::grid_reduce_detail::AtomicUnroll
val_type	cudev/grid/detail/reduce.hpp	/^        typedef typename MakeVec<R, 4>::type val_type;$/;"	t	struct:cv::cudev::grid_reduce_detail::AtomicUnroll
validGeometry	imgproc.hpp	/^    bool validGeometry;$/;"	m	class:cv::Subdiv2D
valoffset	core/types_c.h	/^    int valoffset;$/;"	m	struct:CvSparseMat
vals_	flann/random.h	/^    std::vector<int> vals_;$/;"	m	class:cvflann::UniqueRandom
value	core/cuda/detail/reduce.hpp	/^            enum { value = ((N != 0) && !(N & (N - 1))) };$/;"	e	enum:cv::cuda::device::reduce_detail::IsPowerOf2::__anon243
value	core/cuda/detail/reduce_key_val.hpp	/^            enum { value = ((N != 0) && !(N & (N - 1))) };$/;"	e	enum:cv::cuda::device::reduce_key_val_detail::IsPowerOf2::__anon239
value	core/cuda/detail/type_traits_detail.hpp	/^            enum { value = 0 };$/;"	e	enum:cv::cuda::device::type_traits_detail::UnConst::__anon232
value	core/cuda/detail/type_traits_detail.hpp	/^            enum { value = 0 };$/;"	e	enum:cv::cuda::device::type_traits_detail::UnVolatile::__anon235
value	core/cuda/detail/type_traits_detail.hpp	/^            enum { value = 1 };$/;"	e	enum:cv::cuda::device::type_traits_detail::UnConst::__anon233
value	core/cuda/detail/type_traits_detail.hpp	/^            enum { value = 1 };$/;"	e	enum:cv::cuda::device::type_traits_detail::UnConst::__anon234
value	core/cuda/detail/type_traits_detail.hpp	/^            enum { value = 1 };$/;"	e	enum:cv::cuda::device::type_traits_detail::UnVolatile::__anon236
value	core/cuda/detail/type_traits_detail.hpp	/^            enum { value = 1 };$/;"	e	enum:cv::cuda::device::type_traits_detail::UnVolatile::__anon237
value	core/cuda/detail/type_traits_detail.hpp	/^            enum { value = false };$/;"	e	enum:cv::cuda::device::type_traits_detail::PointerTraits::__anon229
value	core/cuda/detail/type_traits_detail.hpp	/^            enum { value = false };$/;"	e	enum:cv::cuda::device::type_traits_detail::ReferenceTraits::__anon227
value	core/cuda/detail/type_traits_detail.hpp	/^            enum { value = true };$/;"	e	enum:cv::cuda::device::type_traits_detail::PointerTraits::__anon230
value	core/cuda/detail/type_traits_detail.hpp	/^            enum { value = true };$/;"	e	enum:cv::cuda::device::type_traits_detail::PointerTraits::__anon231
value	core/cuda/detail/type_traits_detail.hpp	/^            enum { value = true };$/;"	e	enum:cv::cuda::device::type_traits_detail::ReferenceTraits::__anon228
value	core/cuda/detail/type_traits_detail.hpp	/^        template <> struct IsFloat<double> { enum {value = 1}; };$/;"	e	enum:cv::cuda::device::type_traits_detail::IsFloat::__anon185
value	core/cuda/detail/type_traits_detail.hpp	/^        template <> struct IsFloat<float> { enum {value = 1}; };$/;"	e	enum:cv::cuda::device::type_traits_detail::IsFloat::__anon184
value	core/cuda/detail/type_traits_detail.hpp	/^        template <> struct IsIntegral<bool> { enum {value = 1}; };$/;"	e	enum:cv::cuda::device::type_traits_detail::IsIntegral::__anon182
value	core/cuda/detail/type_traits_detail.hpp	/^        template <> struct IsIntegral<char> { enum {value = 1}; };$/;"	e	enum:cv::cuda::device::type_traits_detail::IsIntegral::__anon181
value	core/cuda/detail/type_traits_detail.hpp	/^        template <> struct IsSignedIntergral<char1> { enum {value = 1}; };$/;"	e	enum:cv::cuda::device::type_traits_detail::IsSignedIntergral::__anon168
value	core/cuda/detail/type_traits_detail.hpp	/^        template <> struct IsSignedIntergral<int1> { enum {value = 1}; };$/;"	e	enum:cv::cuda::device::type_traits_detail::IsSignedIntergral::__anon172
value	core/cuda/detail/type_traits_detail.hpp	/^        template <> struct IsSignedIntergral<int> { enum {value = 1}; };$/;"	e	enum:cv::cuda::device::type_traits_detail::IsSignedIntergral::__anon171
value	core/cuda/detail/type_traits_detail.hpp	/^        template <> struct IsSignedIntergral<schar> { enum {value = 1}; };$/;"	e	enum:cv::cuda::device::type_traits_detail::IsSignedIntergral::__anon167
value	core/cuda/detail/type_traits_detail.hpp	/^        template <> struct IsSignedIntergral<short1> { enum {value = 1}; };$/;"	e	enum:cv::cuda::device::type_traits_detail::IsSignedIntergral::__anon170
value	core/cuda/detail/type_traits_detail.hpp	/^        template <> struct IsSignedIntergral<short> { enum {value = 1}; };$/;"	e	enum:cv::cuda::device::type_traits_detail::IsSignedIntergral::__anon169
value	core/cuda/detail/type_traits_detail.hpp	/^        template <> struct IsUnsignedIntegral<uchar1> { enum {value = 1}; };$/;"	e	enum:cv::cuda::device::type_traits_detail::IsUnsignedIntegral::__anon175
value	core/cuda/detail/type_traits_detail.hpp	/^        template <> struct IsUnsignedIntegral<uchar> { enum {value = 1}; };$/;"	e	enum:cv::cuda::device::type_traits_detail::IsUnsignedIntegral::__anon174
value	core/cuda/detail/type_traits_detail.hpp	/^        template <> struct IsUnsignedIntegral<uint1> { enum {value = 1}; };$/;"	e	enum:cv::cuda::device::type_traits_detail::IsUnsignedIntegral::__anon179
value	core/cuda/detail/type_traits_detail.hpp	/^        template <> struct IsUnsignedIntegral<uint> { enum {value = 1}; };$/;"	e	enum:cv::cuda::device::type_traits_detail::IsUnsignedIntegral::__anon178
value	core/cuda/detail/type_traits_detail.hpp	/^        template <> struct IsUnsignedIntegral<ushort1> { enum {value = 1}; };$/;"	e	enum:cv::cuda::device::type_traits_detail::IsUnsignedIntegral::__anon177
value	core/cuda/detail/type_traits_detail.hpp	/^        template <> struct IsUnsignedIntegral<ushort> { enum {value = 1}; };$/;"	e	enum:cv::cuda::device::type_traits_detail::IsUnsignedIntegral::__anon176
value	core/cuda/detail/type_traits_detail.hpp	/^        template <> struct IsVec<char1> { enum {value = 1}; };$/;"	e	enum:cv::cuda::device::type_traits_detail::IsVec::__anon192
value	core/cuda/detail/type_traits_detail.hpp	/^        template <> struct IsVec<char2> { enum {value = 1}; };$/;"	e	enum:cv::cuda::device::type_traits_detail::IsVec::__anon193
value	core/cuda/detail/type_traits_detail.hpp	/^        template <> struct IsVec<char3> { enum {value = 1}; };$/;"	e	enum:cv::cuda::device::type_traits_detail::IsVec::__anon194
value	core/cuda/detail/type_traits_detail.hpp	/^        template <> struct IsVec<char4> { enum {value = 1}; };$/;"	e	enum:cv::cuda::device::type_traits_detail::IsVec::__anon195
value	core/cuda/detail/type_traits_detail.hpp	/^        template <> struct IsVec<char8> { enum {value = 1}; };$/;"	e	enum:cv::cuda::device::type_traits_detail::IsVec::__anon196
value	core/cuda/detail/type_traits_detail.hpp	/^        template <> struct IsVec<double1> { enum {value = 1}; };$/;"	e	enum:cv::cuda::device::type_traits_detail::IsVec::__anon222
value	core/cuda/detail/type_traits_detail.hpp	/^        template <> struct IsVec<double2> { enum {value = 1}; };$/;"	e	enum:cv::cuda::device::type_traits_detail::IsVec::__anon223
value	core/cuda/detail/type_traits_detail.hpp	/^        template <> struct IsVec<double3> { enum {value = 1}; };$/;"	e	enum:cv::cuda::device::type_traits_detail::IsVec::__anon224
value	core/cuda/detail/type_traits_detail.hpp	/^        template <> struct IsVec<double4> { enum {value = 1}; };$/;"	e	enum:cv::cuda::device::type_traits_detail::IsVec::__anon225
value	core/cuda/detail/type_traits_detail.hpp	/^        template <> struct IsVec<double8> { enum {value = 1}; };$/;"	e	enum:cv::cuda::device::type_traits_detail::IsVec::__anon226
value	core/cuda/detail/type_traits_detail.hpp	/^        template <> struct IsVec<float1> { enum {value = 1}; };$/;"	e	enum:cv::cuda::device::type_traits_detail::IsVec::__anon217
value	core/cuda/detail/type_traits_detail.hpp	/^        template <> struct IsVec<float2> { enum {value = 1}; };$/;"	e	enum:cv::cuda::device::type_traits_detail::IsVec::__anon218
value	core/cuda/detail/type_traits_detail.hpp	/^        template <> struct IsVec<float3> { enum {value = 1}; };$/;"	e	enum:cv::cuda::device::type_traits_detail::IsVec::__anon219
value	core/cuda/detail/type_traits_detail.hpp	/^        template <> struct IsVec<float4> { enum {value = 1}; };$/;"	e	enum:cv::cuda::device::type_traits_detail::IsVec::__anon220
value	core/cuda/detail/type_traits_detail.hpp	/^        template <> struct IsVec<float8> { enum {value = 1}; };$/;"	e	enum:cv::cuda::device::type_traits_detail::IsVec::__anon221
value	core/cuda/detail/type_traits_detail.hpp	/^        template <> struct IsVec<int1> { enum {value = 1}; };$/;"	e	enum:cv::cuda::device::type_traits_detail::IsVec::__anon212
value	core/cuda/detail/type_traits_detail.hpp	/^        template <> struct IsVec<int2> { enum {value = 1}; };$/;"	e	enum:cv::cuda::device::type_traits_detail::IsVec::__anon213
value	core/cuda/detail/type_traits_detail.hpp	/^        template <> struct IsVec<int3> { enum {value = 1}; };$/;"	e	enum:cv::cuda::device::type_traits_detail::IsVec::__anon214
value	core/cuda/detail/type_traits_detail.hpp	/^        template <> struct IsVec<int4> { enum {value = 1}; };$/;"	e	enum:cv::cuda::device::type_traits_detail::IsVec::__anon215
value	core/cuda/detail/type_traits_detail.hpp	/^        template <> struct IsVec<int8> { enum {value = 1}; };$/;"	e	enum:cv::cuda::device::type_traits_detail::IsVec::__anon216
value	core/cuda/detail/type_traits_detail.hpp	/^        template <> struct IsVec<short1> { enum {value = 1}; };$/;"	e	enum:cv::cuda::device::type_traits_detail::IsVec::__anon202
value	core/cuda/detail/type_traits_detail.hpp	/^        template <> struct IsVec<short2> { enum {value = 1}; };$/;"	e	enum:cv::cuda::device::type_traits_detail::IsVec::__anon203
value	core/cuda/detail/type_traits_detail.hpp	/^        template <> struct IsVec<short3> { enum {value = 1}; };$/;"	e	enum:cv::cuda::device::type_traits_detail::IsVec::__anon204
value	core/cuda/detail/type_traits_detail.hpp	/^        template <> struct IsVec<short4> { enum {value = 1}; };$/;"	e	enum:cv::cuda::device::type_traits_detail::IsVec::__anon205
value	core/cuda/detail/type_traits_detail.hpp	/^        template <> struct IsVec<short8> { enum {value = 1}; };$/;"	e	enum:cv::cuda::device::type_traits_detail::IsVec::__anon206
value	core/cuda/detail/type_traits_detail.hpp	/^        template <> struct IsVec<uchar1> { enum {value = 1}; };$/;"	e	enum:cv::cuda::device::type_traits_detail::IsVec::__anon187
value	core/cuda/detail/type_traits_detail.hpp	/^        template <> struct IsVec<uchar2> { enum {value = 1}; };$/;"	e	enum:cv::cuda::device::type_traits_detail::IsVec::__anon188
value	core/cuda/detail/type_traits_detail.hpp	/^        template <> struct IsVec<uchar3> { enum {value = 1}; };$/;"	e	enum:cv::cuda::device::type_traits_detail::IsVec::__anon189
value	core/cuda/detail/type_traits_detail.hpp	/^        template <> struct IsVec<uchar4> { enum {value = 1}; };$/;"	e	enum:cv::cuda::device::type_traits_detail::IsVec::__anon190
value	core/cuda/detail/type_traits_detail.hpp	/^        template <> struct IsVec<uchar8> { enum {value = 1}; };$/;"	e	enum:cv::cuda::device::type_traits_detail::IsVec::__anon191
value	core/cuda/detail/type_traits_detail.hpp	/^        template <> struct IsVec<uint1> { enum {value = 1}; };$/;"	e	enum:cv::cuda::device::type_traits_detail::IsVec::__anon207
value	core/cuda/detail/type_traits_detail.hpp	/^        template <> struct IsVec<uint2> { enum {value = 1}; };$/;"	e	enum:cv::cuda::device::type_traits_detail::IsVec::__anon208
value	core/cuda/detail/type_traits_detail.hpp	/^        template <> struct IsVec<uint3> { enum {value = 1}; };$/;"	e	enum:cv::cuda::device::type_traits_detail::IsVec::__anon209
value	core/cuda/detail/type_traits_detail.hpp	/^        template <> struct IsVec<uint4> { enum {value = 1}; };$/;"	e	enum:cv::cuda::device::type_traits_detail::IsVec::__anon210
value	core/cuda/detail/type_traits_detail.hpp	/^        template <> struct IsVec<uint8> { enum {value = 1}; };$/;"	e	enum:cv::cuda::device::type_traits_detail::IsVec::__anon211
value	core/cuda/detail/type_traits_detail.hpp	/^        template <> struct IsVec<ushort1> { enum {value = 1}; };$/;"	e	enum:cv::cuda::device::type_traits_detail::IsVec::__anon197
value	core/cuda/detail/type_traits_detail.hpp	/^        template <> struct IsVec<ushort2> { enum {value = 1}; };$/;"	e	enum:cv::cuda::device::type_traits_detail::IsVec::__anon198
value	core/cuda/detail/type_traits_detail.hpp	/^        template <> struct IsVec<ushort3> { enum {value = 1}; };$/;"	e	enum:cv::cuda::device::type_traits_detail::IsVec::__anon199
value	core/cuda/detail/type_traits_detail.hpp	/^        template <> struct IsVec<ushort4> { enum {value = 1}; };$/;"	e	enum:cv::cuda::device::type_traits_detail::IsVec::__anon200
value	core/cuda/detail/type_traits_detail.hpp	/^        template <> struct IsVec<ushort8> { enum {value = 1}; };$/;"	e	enum:cv::cuda::device::type_traits_detail::IsVec::__anon201
value	core/cuda/detail/type_traits_detail.hpp	/^        template <typename T> struct IsFloat { enum {value = 0}; };$/;"	e	enum:cv::cuda::device::type_traits_detail::IsFloat::__anon183
value	core/cuda/detail/type_traits_detail.hpp	/^        template <typename T> struct IsIntegral { enum {value = IsSignedIntergral<T>::value || IsUnsignedIntegral<T>::value}; };$/;"	e	enum:cv::cuda::device::type_traits_detail::IsIntegral::__anon180
value	core/cuda/detail/type_traits_detail.hpp	/^        template <typename T> struct IsSignedIntergral { enum {value = 0}; };$/;"	e	enum:cv::cuda::device::type_traits_detail::IsSignedIntergral::__anon166
value	core/cuda/detail/type_traits_detail.hpp	/^        template <typename T> struct IsUnsignedIntegral { enum {value = 0}; };$/;"	e	enum:cv::cuda::device::type_traits_detail::IsUnsignedIntegral::__anon173
value	core/cuda/detail/type_traits_detail.hpp	/^        template <typename T> struct IsVec { enum {value = 0}; };$/;"	e	enum:cv::cuda::device::type_traits_detail::IsVec::__anon186
value	core/cuda/functional.hpp	/^        enum { value = (sizeof(check(makeF())) == sizeof(Yes)) };$/;"	e	enum:cv::cuda::device::IsBinaryFunction::__anon254
value	core/cuda/functional.hpp	/^        enum { value = (sizeof(check(makeF())) == sizeof(Yes)) };$/;"	e	enum:cv::cuda::device::IsUnaryFunction::__anon253
value	core/cuda/type_traits.hpp	/^        enum {value = type_traits_detail::IsIntegral<T>::value || type_traits_detail::IsFloat<T>::value ||$/;"	e	enum:cv::cuda::device::IsSimpleParameter::__anon271
value	core/mat.inl.hpp	/^_Tp SparseMat::value(const int* idx, size_t* hashval) const$/;"	f	class:cv::SparseMat
value	core/mat.inl.hpp	/^_Tp SparseMat::value(int i0, int i1, int i2, size_t* hashval) const$/;"	f	class:cv::SparseMat
value	core/mat.inl.hpp	/^_Tp SparseMat::value(int i0, int i1, size_t* hashval) const$/;"	f	class:cv::SparseMat
value	core/mat.inl.hpp	/^_Tp SparseMat::value(int i0, size_t* hashval) const$/;"	f	class:cv::SparseMat
value	core/mat.inl.hpp	/^_Tp& SparseMat::value(Node* n)$/;"	f	class:cv::SparseMat
value	core/mat.inl.hpp	/^_Tp& SparseMatIterator::value() const$/;"	f	class:cv::SparseMatIterator
value	core/mat.inl.hpp	/^const _Tp& SparseMat::value(const Node* n) const$/;"	f	class:cv::SparseMat
value	core/mat.inl.hpp	/^const _Tp& SparseMatConstIterator::value() const$/;"	f	class:cv::SparseMatConstIterator
value	core/traits.hpp	/^        value = DataType<_Tp>::depth,$/;"	e	enum:cv::DataDepth::__anon111
value	cudev/functional/functional.hpp	/^    enum { value = (sizeof(check(makeF())) == sizeof(Yes)) };$/;"	e	enum:cv::cudev::IsBinaryFunction::__anon399
value	cudev/functional/functional.hpp	/^    enum { value = (sizeof(check(makeF())) == sizeof(Yes)) };$/;"	e	enum:cv::cudev::IsUnaryFunction::__anon398
value	cudev/ptr2d/constant.hpp	/^    T value;$/;"	m	struct:cv::cudev::ConstantPtr
value	cudev/util/detail/type_traits.hpp	/^        enum { value = 0 };$/;"	e	enum:cv::cudev::type_traits_detail::PointerTraits::__anon344
value	cudev/util/detail/type_traits.hpp	/^        enum { value = 0 };$/;"	e	enum:cv::cudev::type_traits_detail::ReferenceTraits::__anon342
value	cudev/util/detail/type_traits.hpp	/^        enum { value = 0 };$/;"	e	enum:cv::cudev::type_traits_detail::UnConst::__anon347
value	cudev/util/detail/type_traits.hpp	/^        enum { value = 0 };$/;"	e	enum:cv::cudev::type_traits_detail::UnVolatile::__anon350
value	cudev/util/detail/type_traits.hpp	/^        enum { value = 1 };$/;"	e	enum:cv::cudev::type_traits_detail::PointerTraits::__anon345
value	cudev/util/detail/type_traits.hpp	/^        enum { value = 1 };$/;"	e	enum:cv::cudev::type_traits_detail::PointerTraits::__anon346
value	cudev/util/detail/type_traits.hpp	/^        enum { value = 1 };$/;"	e	enum:cv::cudev::type_traits_detail::ReferenceTraits::__anon343
value	cudev/util/detail/type_traits.hpp	/^        enum { value = 1 };$/;"	e	enum:cv::cudev::type_traits_detail::UnConst::__anon348
value	cudev/util/detail/type_traits.hpp	/^        enum { value = 1 };$/;"	e	enum:cv::cudev::type_traits_detail::UnConst::__anon349
value	cudev/util/detail/type_traits.hpp	/^        enum { value = 1 };$/;"	e	enum:cv::cudev::type_traits_detail::UnVolatile::__anon351
value	cudev/util/detail/type_traits.hpp	/^        enum { value = 1 };$/;"	e	enum:cv::cudev::type_traits_detail::UnVolatile::__anon352
value	cudev/util/detail/type_traits.hpp	/^        enum { value = IsIntegral<T>::value$/;"	e	enum:cv::cudev::type_traits_detail::IsSimpleParameter::__anon353
value	cudev/util/detail/type_traits.hpp	/^    template <> struct IsFloat<double> { enum {value = 1}; };$/;"	e	enum:cv::cudev::type_traits_detail::IsFloat::__anon308
value	cudev/util/detail/type_traits.hpp	/^    template <> struct IsFloat<float> { enum {value = 1}; };$/;"	e	enum:cv::cudev::type_traits_detail::IsFloat::__anon307
value	cudev/util/detail/type_traits.hpp	/^    template <> struct IsIntegral<bool> { enum {value = 1}; };$/;"	e	enum:cv::cudev::type_traits_detail::IsIntegral::__anon305
value	cudev/util/detail/type_traits.hpp	/^    template <> struct IsIntegral<char> { enum {value = 1}; };$/;"	e	enum:cv::cudev::type_traits_detail::IsIntegral::__anon304
value	cudev/util/detail/type_traits.hpp	/^    template <> struct IsSignedIntergral<int> { enum {value = 1}; };$/;"	e	enum:cv::cudev::type_traits_detail::IsSignedIntergral::__anon298
value	cudev/util/detail/type_traits.hpp	/^    template <> struct IsSignedIntergral<schar> { enum {value = 1}; };$/;"	e	enum:cv::cudev::type_traits_detail::IsSignedIntergral::__anon296
value	cudev/util/detail/type_traits.hpp	/^    template <> struct IsSignedIntergral<short> { enum {value = 1}; };$/;"	e	enum:cv::cudev::type_traits_detail::IsSignedIntergral::__anon297
value	cudev/util/detail/type_traits.hpp	/^    template <> struct IsUnsignedIntegral<uchar> { enum {value = 1}; };$/;"	e	enum:cv::cudev::type_traits_detail::IsUnsignedIntegral::__anon300
value	cudev/util/detail/type_traits.hpp	/^    template <> struct IsUnsignedIntegral<uint> { enum {value = 1}; };$/;"	e	enum:cv::cudev::type_traits_detail::IsUnsignedIntegral::__anon302
value	cudev/util/detail/type_traits.hpp	/^    template <> struct IsUnsignedIntegral<ushort> { enum {value = 1}; };$/;"	e	enum:cv::cudev::type_traits_detail::IsUnsignedIntegral::__anon301
value	cudev/util/detail/type_traits.hpp	/^    template <> struct IsVec<char1> { enum {value = 1}; };$/;"	e	enum:cv::cudev::type_traits_detail::IsVec::__anon314
value	cudev/util/detail/type_traits.hpp	/^    template <> struct IsVec<char2> { enum {value = 1}; };$/;"	e	enum:cv::cudev::type_traits_detail::IsVec::__anon315
value	cudev/util/detail/type_traits.hpp	/^    template <> struct IsVec<char3> { enum {value = 1}; };$/;"	e	enum:cv::cudev::type_traits_detail::IsVec::__anon316
value	cudev/util/detail/type_traits.hpp	/^    template <> struct IsVec<char4> { enum {value = 1}; };$/;"	e	enum:cv::cudev::type_traits_detail::IsVec::__anon317
value	cudev/util/detail/type_traits.hpp	/^    template <> struct IsVec<double1> { enum {value = 1}; };$/;"	e	enum:cv::cudev::type_traits_detail::IsVec::__anon338
value	cudev/util/detail/type_traits.hpp	/^    template <> struct IsVec<double2> { enum {value = 1}; };$/;"	e	enum:cv::cudev::type_traits_detail::IsVec::__anon339
value	cudev/util/detail/type_traits.hpp	/^    template <> struct IsVec<double3> { enum {value = 1}; };$/;"	e	enum:cv::cudev::type_traits_detail::IsVec::__anon340
value	cudev/util/detail/type_traits.hpp	/^    template <> struct IsVec<double4> { enum {value = 1}; };$/;"	e	enum:cv::cudev::type_traits_detail::IsVec::__anon341
value	cudev/util/detail/type_traits.hpp	/^    template <> struct IsVec<float1> { enum {value = 1}; };$/;"	e	enum:cv::cudev::type_traits_detail::IsVec::__anon334
value	cudev/util/detail/type_traits.hpp	/^    template <> struct IsVec<float2> { enum {value = 1}; };$/;"	e	enum:cv::cudev::type_traits_detail::IsVec::__anon335
value	cudev/util/detail/type_traits.hpp	/^    template <> struct IsVec<float3> { enum {value = 1}; };$/;"	e	enum:cv::cudev::type_traits_detail::IsVec::__anon336
value	cudev/util/detail/type_traits.hpp	/^    template <> struct IsVec<float4> { enum {value = 1}; };$/;"	e	enum:cv::cudev::type_traits_detail::IsVec::__anon337
value	cudev/util/detail/type_traits.hpp	/^    template <> struct IsVec<int1> { enum {value = 1}; };$/;"	e	enum:cv::cudev::type_traits_detail::IsVec::__anon330
value	cudev/util/detail/type_traits.hpp	/^    template <> struct IsVec<int2> { enum {value = 1}; };$/;"	e	enum:cv::cudev::type_traits_detail::IsVec::__anon331
value	cudev/util/detail/type_traits.hpp	/^    template <> struct IsVec<int3> { enum {value = 1}; };$/;"	e	enum:cv::cudev::type_traits_detail::IsVec::__anon332
value	cudev/util/detail/type_traits.hpp	/^    template <> struct IsVec<int4> { enum {value = 1}; };$/;"	e	enum:cv::cudev::type_traits_detail::IsVec::__anon333
value	cudev/util/detail/type_traits.hpp	/^    template <> struct IsVec<short1> { enum {value = 1}; };$/;"	e	enum:cv::cudev::type_traits_detail::IsVec::__anon322
value	cudev/util/detail/type_traits.hpp	/^    template <> struct IsVec<short2> { enum {value = 1}; };$/;"	e	enum:cv::cudev::type_traits_detail::IsVec::__anon323
value	cudev/util/detail/type_traits.hpp	/^    template <> struct IsVec<short3> { enum {value = 1}; };$/;"	e	enum:cv::cudev::type_traits_detail::IsVec::__anon324
value	cudev/util/detail/type_traits.hpp	/^    template <> struct IsVec<short4> { enum {value = 1}; };$/;"	e	enum:cv::cudev::type_traits_detail::IsVec::__anon325
value	cudev/util/detail/type_traits.hpp	/^    template <> struct IsVec<uchar1> { enum {value = 1}; };$/;"	e	enum:cv::cudev::type_traits_detail::IsVec::__anon310
value	cudev/util/detail/type_traits.hpp	/^    template <> struct IsVec<uchar2> { enum {value = 1}; };$/;"	e	enum:cv::cudev::type_traits_detail::IsVec::__anon311
value	cudev/util/detail/type_traits.hpp	/^    template <> struct IsVec<uchar3> { enum {value = 1}; };$/;"	e	enum:cv::cudev::type_traits_detail::IsVec::__anon312
value	cudev/util/detail/type_traits.hpp	/^    template <> struct IsVec<uchar4> { enum {value = 1}; };$/;"	e	enum:cv::cudev::type_traits_detail::IsVec::__anon313
value	cudev/util/detail/type_traits.hpp	/^    template <> struct IsVec<uint1> { enum {value = 1}; };$/;"	e	enum:cv::cudev::type_traits_detail::IsVec::__anon326
value	cudev/util/detail/type_traits.hpp	/^    template <> struct IsVec<uint2> { enum {value = 1}; };$/;"	e	enum:cv::cudev::type_traits_detail::IsVec::__anon327
value	cudev/util/detail/type_traits.hpp	/^    template <> struct IsVec<uint3> { enum {value = 1}; };$/;"	e	enum:cv::cudev::type_traits_detail::IsVec::__anon328
value	cudev/util/detail/type_traits.hpp	/^    template <> struct IsVec<uint4> { enum {value = 1}; };$/;"	e	enum:cv::cudev::type_traits_detail::IsVec::__anon329
value	cudev/util/detail/type_traits.hpp	/^    template <> struct IsVec<ushort1> { enum {value = 1}; };$/;"	e	enum:cv::cudev::type_traits_detail::IsVec::__anon318
value	cudev/util/detail/type_traits.hpp	/^    template <> struct IsVec<ushort2> { enum {value = 1}; };$/;"	e	enum:cv::cudev::type_traits_detail::IsVec::__anon319
value	cudev/util/detail/type_traits.hpp	/^    template <> struct IsVec<ushort3> { enum {value = 1}; };$/;"	e	enum:cv::cudev::type_traits_detail::IsVec::__anon320
value	cudev/util/detail/type_traits.hpp	/^    template <> struct IsVec<ushort4> { enum {value = 1}; };$/;"	e	enum:cv::cudev::type_traits_detail::IsVec::__anon321
value	cudev/util/detail/type_traits.hpp	/^    template <typename T> struct IsFloat { enum {value = 0}; };$/;"	e	enum:cv::cudev::type_traits_detail::IsFloat::__anon306
value	cudev/util/detail/type_traits.hpp	/^    template <typename T> struct IsIntegral { enum {value = IsSignedIntergral<T>::value || IsUnsignedIntegral<T>::value}; };$/;"	e	enum:cv::cudev::type_traits_detail::IsIntegral::__anon303
value	cudev/util/detail/type_traits.hpp	/^    template <typename T> struct IsSignedIntergral { enum {value = 0}; };$/;"	e	enum:cv::cudev::type_traits_detail::IsSignedIntergral::__anon295
value	cudev/util/detail/type_traits.hpp	/^    template <typename T> struct IsUnsignedIntegral { enum {value = 0}; };$/;"	e	enum:cv::cudev::type_traits_detail::IsUnsignedIntegral::__anon299
value	cudev/util/detail/type_traits.hpp	/^    template <typename T> struct IsVec { enum {value = 0}; };$/;"	e	enum:cv::cudev::type_traits_detail::IsVec::__anon309
value	cudev/util/type_traits.hpp	/^    enum { value = ((N != 0) && !(N & (N - 1))) };$/;"	e	enum:cv::cudev::IsPowerOf2::__anon371
value	cudev/util/type_traits.hpp	/^    enum { value = (1 << (COUNT - 1) < N) ? COUNT : COUNT - 1 };$/;"	e	enum:cv::cudev::Log2::__anon370
value	cudev/util/type_traits.hpp	/^    enum { value = 0 };$/;"	e	enum:cv::cudev::TypesEquals::__anon372
value	cudev/util/type_traits.hpp	/^    enum { value = 1 };$/;"	e	enum:cv::cudev::TypesEquals::__anon373
value	cudev/util/type_traits.hpp	/^    enum { value = Log2<N, (CURRENT_VAL >> 1), COUNT + 1>::VALUE };$/;"	e	enum:cv::cudev::Log2::__anon369
value	cudev/util/type_traits.hpp	/^   enum { value = A };$/;"	e	enum:cv::cudev::Int2Type::__anon368
value	flann/timer.h	/^    double value;$/;"	m	class:cvflann::StartStopTimer
value	imgproc/types_c.h	/^    CvScalar value; \/**<average color of the connected component *\/$/;"	m	struct:CvConnectedComp
value	ml.hpp	/^        double value; \/\/!< Value at the node: a class label in case of classification or estimated$/;"	m	class:cv::ml::DTrees::Node
value	ts/ts_gtest.h	/^  const char* value() const {$/;"	f	class:testing::TestProperty
value	ts/ts_gtest.h	/^  const char* value;$/;"	m	struct:testing::internal::ConstCharPtr
value	ts/ts_gtest.h	/^  static const bool value = __is_convertible(From, To);$/;"	m	class:testing::internal::ImplicitlyConvertible
value	ts/ts_gtest.h	/^  static const bool value = bool_value;$/;"	m	struct:std::tr1::bool_constant
value	ts/ts_gtest.h	/^  static const bool value =$/;"	m	class:testing::internal::ImplicitlyConvertible
value	ts/ts_gtest.h	/^  static const int value = 0;$/;"	m	struct:std::tr1::tuple_size
value	ts/ts_gtest.h	/^  static const int value = 10;$/;"	m	struct:std::tr1::tuple_size
value	ts/ts_gtest.h	/^  static const int value = 1;$/;"	m	struct:std::tr1::tuple_size
value	ts/ts_gtest.h	/^  static const int value = 2;$/;"	m	struct:std::tr1::tuple_size
value	ts/ts_gtest.h	/^  static const int value = 3;$/;"	m	struct:std::tr1::tuple_size
value	ts/ts_gtest.h	/^  static const int value = 4;$/;"	m	struct:std::tr1::tuple_size
value	ts/ts_gtest.h	/^  static const int value = 5;$/;"	m	struct:std::tr1::tuple_size
value	ts/ts_gtest.h	/^  static const int value = 6;$/;"	m	struct:std::tr1::tuple_size
value	ts/ts_gtest.h	/^  static const int value = 7;$/;"	m	struct:std::tr1::tuple_size
value	ts/ts_gtest.h	/^  static const int value = 8;$/;"	m	struct:std::tr1::tuple_size
value	ts/ts_gtest.h	/^  static const int value = 9;$/;"	m	struct:std::tr1::tuple_size
value	ts/ts_gtest.h	/^const bool ImplicitlyConvertible<From, To>::value;$/;"	m	class:testing::internal::ImplicitlyConvertible
value	ts/ts_gtest.h	/^template <bool bool_value> const bool bool_constant<bool_value>::value;$/;"	m	class:std::tr1::bool_constant
valueOffset	core/mat.hpp	/^        int valueOffset;$/;"	m	struct:cv::SparseMat::Hdr
value_	core/opencl/opencl_svm.hpp	/^    int value_;$/;"	m	struct:cv::ocl::svm::SVMCapabilities
value_	ts/ts_gtest.h	/^    RawType value_;  \/\/ The raw floating-point number.$/;"	m	union:testing::internal::FloatingPoint::FloatingPointUnion
value_	ts/ts_gtest.h	/^    T value_;$/;"	m	class:std::tr1::ThreadLocal::ValueHolder
value_	ts/ts_gtest.h	/^    T value_;$/;"	m	class:testing::internal::RangeGenerator::Iterator
value_	ts/ts_gtest.h	/^    mutable scoped_ptr<const T> value_;$/;"	m	class:testing::internal::ValuesInIteratorRangeGenerator::Iterator
value_	ts/ts_gtest.h	/^  T value_;$/;"	m	class:std::tr1::ThreadLocal
value_	ts/ts_gtest.h	/^  T* value_;$/;"	m	class:testing::internal::linked_ptr
value_	ts/ts_gtest.h	/^  std::string value_;$/;"	m	class:testing::TestProperty
value_param	ts/ts_gtest.h	/^  const char* value_param() const {$/;"	f	class:testing::TestInfo
value_param_	ts/ts_gtest.h	/^  const internal::scoped_ptr<const ::std::string> value_param_;$/;"	m	class:testing::TestInfo
value_type	core/affine.hpp	/^        typedef Affine3<_Tp>                               value_type;$/;"	t	class:cv::DataType
value_type	core/cuda/vec_distance.hpp	/^        typedef float value_type;$/;"	t	struct:cv::cuda::device::L1Dist
value_type	core/cuda/vec_distance.hpp	/^        typedef float value_type;$/;"	t	struct:cv::cuda::device::L2Dist
value_type	core/cuda/vec_distance.hpp	/^        typedef int value_type;$/;"	t	struct:cv::cuda::device::HammingDist
value_type	core/cuda/vec_distance.hpp	/^        typedef int value_type;$/;"	t	struct:cv::cuda::device::L1Dist
value_type	core/cvstd.hpp	/^    typedef _Tp value_type;$/;"	t	class:cv::Allocator
value_type	core/cvstd.hpp	/^    typedef char value_type;$/;"	t	class:cv::String
value_type	core/cvstd.inl.hpp	/^    typedef std::complex<_Tp>  value_type;$/;"	t	class:cv::DataType
value_type	core/mat.hpp	/^    typedef _Tp value_type;$/;"	t	class:cv::MatConstIterator_
value_type	core/mat.hpp	/^    typedef _Tp value_type;$/;"	t	class:cv::Mat_
value_type	core/mat.hpp	/^    typedef uchar* value_type;$/;"	t	class:cv::MatConstIterator
value_type	core/matx.hpp	/^    typedef Matx<_Tp, m, n>                               value_type;$/;"	t	class:cv::DataType
value_type	core/matx.hpp	/^    typedef Vec<_Tp, cn>                               value_type;$/;"	t	class:cv::DataType
value_type	core/matx.hpp	/^    typedef _Tp                           value_type;$/;"	t	class:cv::Matx
value_type	core/matx.hpp	/^    typedef _Tp value_type;$/;"	t	class:cv::Vec
value_type	core/traits.hpp	/^    typedef _Tp         value_type;$/;"	t	class:cv::DataType
value_type	core/traits.hpp	/^    typedef bool        value_type;$/;"	t	class:cv::DataType
value_type	core/traits.hpp	/^    typedef double      value_type;$/;"	t	class:cv::DataType
value_type	core/traits.hpp	/^    typedef double value_type;$/;"	t	class:cv::TypeDepth
value_type	core/traits.hpp	/^    typedef float       value_type;$/;"	t	class:cv::DataType
value_type	core/traits.hpp	/^    typedef float value_type;$/;"	t	class:cv::TypeDepth
value_type	core/traits.hpp	/^    typedef int         value_type;$/;"	t	class:cv::DataType
value_type	core/traits.hpp	/^    typedef int value_type;$/;"	t	class:cv::TypeDepth
value_type	core/traits.hpp	/^    typedef schar       value_type;$/;"	t	class:cv::DataType
value_type	core/traits.hpp	/^    typedef schar value_type;$/;"	t	class:cv::TypeDepth
value_type	core/traits.hpp	/^    typedef short       value_type;$/;"	t	class:cv::DataType
value_type	core/traits.hpp	/^    typedef short value_type;$/;"	t	class:cv::TypeDepth
value_type	core/traits.hpp	/^    typedef uchar       value_type;$/;"	t	class:cv::DataType
value_type	core/traits.hpp	/^    typedef uchar value_type;$/;"	t	class:cv::TypeDepth
value_type	core/traits.hpp	/^    typedef ushort      value_type;$/;"	t	class:cv::DataType
value_type	core/traits.hpp	/^    typedef ushort value_type;$/;"	t	class:cv::TypeDepth
value_type	core/traits.hpp	/^    typedef void value_type;$/;"	t	class:cv::TypeDepth
value_type	core/types.hpp	/^    typedef Complex<_Tp> value_type;$/;"	t	class:cv::DataType
value_type	core/types.hpp	/^    typedef DMatch      value_type;$/;"	t	class:cv::DataType
value_type	core/types.hpp	/^    typedef KeyPoint      value_type;$/;"	t	class:cv::DataType
value_type	core/types.hpp	/^    typedef Moments     value_type;$/;"	t	class:cv::DataType
value_type	core/types.hpp	/^    typedef Point3_<_Tp>                               value_type;$/;"	t	class:cv::DataType
value_type	core/types.hpp	/^    typedef Point_<_Tp>                               value_type;$/;"	t	class:cv::DataType
value_type	core/types.hpp	/^    typedef Range      value_type;$/;"	t	class:cv::DataType
value_type	core/types.hpp	/^    typedef Rect_<_Tp>                               value_type;$/;"	t	class:cv::DataType
value_type	core/types.hpp	/^    typedef RotatedRect  value_type;$/;"	t	class:cv::DataType
value_type	core/types.hpp	/^    typedef Scalar_<_Tp>                               value_type;$/;"	t	class:cv::DataType
value_type	core/types.hpp	/^    typedef Size_<_Tp>                               value_type;$/;"	t	class:cv::DataType
value_type	core/types.hpp	/^    typedef _Tp value_type;$/;"	t	class:cv::Point3_
value_type	core/types.hpp	/^    typedef _Tp value_type;$/;"	t	class:cv::Point_
value_type	core/types.hpp	/^    typedef _Tp value_type;$/;"	t	class:cv::Rect_
value_type	core/types.hpp	/^    typedef _Tp value_type;$/;"	t	class:cv::Size_
value_type	core/utility.hpp	/^    typedef _Tp value_type;$/;"	t	class:cv::AutoBuffer
value_type	cudev/block/vec_distance.hpp	/^    typedef float value_type;$/;"	t	struct:cv::cudev::NormL1
value_type	cudev/block/vec_distance.hpp	/^    typedef float value_type;$/;"	t	struct:cv::cudev::NormL2
value_type	cudev/block/vec_distance.hpp	/^    typedef int value_type;$/;"	t	struct:cv::cudev::NormHamming
value_type	cudev/block/vec_distance.hpp	/^    typedef int value_type;$/;"	t	struct:cv::cudev::NormL1
value_type	cudev/expr/expr.hpp	/^    typedef typename ptr_type::value_type value_type;$/;"	t	struct:cv::cudev::PtrTraits
value_type	cudev/ptr2d/constant.hpp	/^    typedef T   value_type;$/;"	t	struct:cv::cudev::ConstantPtr
value_type	cudev/ptr2d/deriv.hpp	/^    typedef typename PtrTraits<SrcPtr>::value_type value_type;$/;"	t	struct:cv::cudev::DerivXPtr
value_type	cudev/ptr2d/deriv.hpp	/^    typedef typename PtrTraits<SrcPtr>::value_type value_type;$/;"	t	struct:cv::cudev::DerivYPtr
value_type	cudev/ptr2d/deriv.hpp	/^    typedef typename PtrTraits<SrcPtr>::value_type value_type;$/;"	t	struct:cv::cudev::LaplacianPtr
value_type	cudev/ptr2d/deriv.hpp	/^    typedef typename PtrTraits<SrcPtr>::value_type value_type;$/;"	t	struct:cv::cudev::ScharrXPtr
value_type	cudev/ptr2d/deriv.hpp	/^    typedef typename PtrTraits<SrcPtr>::value_type value_type;$/;"	t	struct:cv::cudev::ScharrYPtr
value_type	cudev/ptr2d/deriv.hpp	/^    typedef typename PtrTraits<SrcPtr>::value_type value_type;$/;"	t	struct:cv::cudev::SobelXPtr
value_type	cudev/ptr2d/deriv.hpp	/^    typedef typename PtrTraits<SrcPtr>::value_type value_type;$/;"	t	struct:cv::cudev::SobelYPtr
value_type	cudev/ptr2d/extrapolation.hpp	/^    typedef typename PtrTraits<SrcPtr>::value_type value_type;$/;"	t	struct:cv::cudev::BrdBase
value_type	cudev/ptr2d/extrapolation.hpp	/^    typedef typename PtrTraits<SrcPtr>::value_type value_type;$/;"	t	struct:cv::cudev::BrdConstant
value_type	cudev/ptr2d/glob.hpp	/^    typedef T   value_type;$/;"	t	struct:cv::cudev::GlobPtr
value_type	cudev/ptr2d/gpumat.hpp	/^    typedef T value_type;$/;"	t	class:cv::cudev::GpuMat_
value_type	cudev/ptr2d/interpolation.hpp	/^    typedef typename PtrTraits<SrcPtr>::value_type value_type;$/;"	t	struct:cv::cudev::CommonAreaInterPtr
value_type	cudev/ptr2d/interpolation.hpp	/^    typedef typename PtrTraits<SrcPtr>::value_type value_type;$/;"	t	struct:cv::cudev::CubicInterPtr
value_type	cudev/ptr2d/interpolation.hpp	/^    typedef typename PtrTraits<SrcPtr>::value_type value_type;$/;"	t	struct:cv::cudev::IntegerAreaInterPtr
value_type	cudev/ptr2d/interpolation.hpp	/^    typedef typename PtrTraits<SrcPtr>::value_type value_type;$/;"	t	struct:cv::cudev::LinearInterPtr
value_type	cudev/ptr2d/interpolation.hpp	/^    typedef typename PtrTraits<SrcPtr>::value_type value_type;$/;"	t	struct:cv::cudev::NearestInterPtr
value_type	cudev/ptr2d/lut.hpp	/^    typedef typename PtrTraits<TablePtr>::value_type value_type;$/;"	t	struct:cv::cudev::LutPtr
value_type	cudev/ptr2d/mask.hpp	/^    typedef bool value_type;$/;"	t	struct:cv::cudev::WithOutMask
value_type	cudev/ptr2d/mask.hpp	/^    typedef typename PtrTraits<MaskPtr>::value_type value_type;$/;"	t	struct:cv::cudev::SingleMaskChannels
value_type	cudev/ptr2d/remap.hpp	/^    typedef typename PtrTraits<SrcPtr>::value_type  value_type;$/;"	t	struct:cv::cudev::RemapPtr2
value_type	cudev/ptr2d/remap.hpp	/^    typedef typename PtrTraits<SrcPtr>::value_type value_type;$/;"	t	struct:cv::cudev::RemapPtr1
value_type	cudev/ptr2d/resize.hpp	/^    typedef typename PtrTraits<SrcPtr>::value_type value_type;$/;"	t	struct:cv::cudev::ResizePtr
value_type	cudev/ptr2d/texture.hpp	/^    typedef T     value_type;$/;"	t	struct:cv::cudev::TexturePtr
value_type	cudev/ptr2d/traits.hpp	/^    typedef typename Ptr2D::value_type value_type;$/;"	t	struct:cv::cudev::PtrTraitsBase
value_type	cudev/ptr2d/transform.hpp	/^    typedef typename Op::result_type                value_type;$/;"	t	struct:cv::cudev::BinaryTransformPtr
value_type	cudev/ptr2d/transform.hpp	/^    typedef typename Op::result_type               value_type;$/;"	t	struct:cv::cudev::UnaryTransformPtr
value_type	cudev/ptr2d/warping.hpp	/^    typedef float2 value_type;$/;"	t	struct:cv::cudev::AffineMapPtr
value_type	cudev/ptr2d/warping.hpp	/^    typedef float2 value_type;$/;"	t	struct:cv::cudev::PerspectiveMapPtr
value_type	cudev/ptr2d/zip.hpp	/^                  typename PtrTraits<Ptr1>::value_type> value_type;$/;"	t	struct:cv::cudev::ZipPtr
value_type	cudev/ptr2d/zip.hpp	/^                  typename PtrTraits<Ptr2>::value_type> value_type;$/;"	t	struct:cv::cudev::ZipPtr
value_type	cudev/ptr2d/zip.hpp	/^                  typename PtrTraits<Ptr3>::value_type> value_type;$/;"	t	struct:cv::cudev::ZipPtr
value_type	cudev/util/vec_traits.hpp	/^    typedef char1      value_type;$/;"	t	class:cv::DataType
value_type	cudev/util/vec_traits.hpp	/^    typedef char2      value_type;$/;"	t	class:cv::DataType
value_type	cudev/util/vec_traits.hpp	/^    typedef char3      value_type;$/;"	t	class:cv::DataType
value_type	cudev/util/vec_traits.hpp	/^    typedef char4      value_type;$/;"	t	class:cv::DataType
value_type	cudev/util/vec_traits.hpp	/^    typedef uint         value_type;$/;"	t	class:cv::DataType
value_type	hal/intrin.hpp	/^    typedef double value_type;$/;"	t	struct:cv::V_TypeTraits
value_type	hal/intrin.hpp	/^    typedef float value_type;$/;"	t	struct:cv::V_TypeTraits
value_type	hal/intrin.hpp	/^    typedef int value_type;$/;"	t	struct:cv::V_TypeTraits
value_type	hal/intrin.hpp	/^    typedef int64 value_type;$/;"	t	struct:cv::V_TypeTraits
value_type	hal/intrin.hpp	/^    typedef schar value_type;$/;"	t	struct:cv::V_TypeTraits
value_type	hal/intrin.hpp	/^    typedef short value_type;$/;"	t	struct:cv::V_TypeTraits
value_type	hal/intrin.hpp	/^    typedef uchar value_type;$/;"	t	struct:cv::V_TypeTraits
value_type	hal/intrin.hpp	/^    typedef uint64 value_type;$/;"	t	struct:cv::V_TypeTraits
value_type	hal/intrin.hpp	/^    typedef unsigned value_type;$/;"	t	struct:cv::V_TypeTraits
value_type	hal/intrin.hpp	/^    typedef ushort value_type;$/;"	t	struct:cv::V_TypeTraits
value_type	ts/ts_gtest.h	/^  typedef Element value_type;$/;"	t	class:testing::internal::NativeArray
value_type	ts/ts_gtest.h	/^  typedef T value_type;$/;"	t	class:testing::internal::ParamIterator
value_type	ts/ts_gtest.h	/^  typedef T value_type;$/;"	t	struct:std::tr1::IteratorTraits
value_type	ts/ts_gtest.h	/^  typedef typename Iterator::value_type value_type;$/;"	t	struct:std::tr1::IteratorTraits
values	core/types_c.h	/^    float *values;$/;"	m	struct:_IplConvKernelFP
values	core/types_c.h	/^    int *values;$/;"	m	struct:_IplConvKernel
values	ts/cuda_test.hpp	/^        const std::vector<cv::cuda::DeviceInfo>& values() const { return devices_; }$/;"	f	class:cvtest::DeviceManager
varIdx	ml.hpp	/^        int varIdx; \/\/!< Index of variable on which the split is created.$/;"	m	class:cv::ml::DTrees::Split
var_	flann/kdtree_index.h	/^    DistanceType* var_;$/;"	m	class:cvflann::KDTreeIndex
variance	flann/kmeans_index.h	/^        DistanceType variance;$/;"	m	struct:cvflann::KMeansIndex::KMeansNode
vavg2	core/cuda/simd_functions.hpp	/^    static __device__ __forceinline__ unsigned int vavg2(unsigned int a, unsigned int b)$/;"	f	namespace:cv::cuda::device
vavg2	cudev/util/simd_functions.hpp	/^__device__ __forceinline__ uint vavg2(uint a, uint b)$/;"	f	namespace:cv::cudev
vavg4	core/cuda/simd_functions.hpp	/^    static __device__ __forceinline__ unsigned int vavg4(unsigned int a, unsigned int b)$/;"	f	namespace:cv::cuda::device
vavg4	cudev/util/simd_functions.hpp	/^__device__ __forceinline__ uint vavg4(uint a, uint b)$/;"	f	namespace:cv::cudev
vavrg2	core/cuda/simd_functions.hpp	/^    static __device__ __forceinline__ unsigned int vavrg2(unsigned int a, unsigned int b)$/;"	f	namespace:cv::cuda::device
vavrg2	cudev/util/simd_functions.hpp	/^__device__ __forceinline__ uint vavrg2(uint a, uint b)$/;"	f	namespace:cv::cudev
vavrg4	core/cuda/simd_functions.hpp	/^    static __device__ __forceinline__ unsigned int vavrg4(unsigned int a, unsigned int b)$/;"	f	namespace:cv::cuda::device
vavrg4	cudev/util/simd_functions.hpp	/^__device__ __forceinline__ uint vavrg4(uint a, uint b)$/;"	f	namespace:cv::cudev
vcmpeq2	core/cuda/simd_functions.hpp	/^    static __device__ __forceinline__ unsigned int vcmpeq2(unsigned int a, unsigned int b)$/;"	f	namespace:cv::cuda::device
vcmpeq2	cudev/util/simd_functions.hpp	/^__device__ __forceinline__ uint vcmpeq2(uint a, uint b)$/;"	f	namespace:cv::cudev
vcmpeq4	core/cuda/simd_functions.hpp	/^    static __device__ __forceinline__ unsigned int vcmpeq4(unsigned int a, unsigned int b)$/;"	f	namespace:cv::cuda::device
vcmpeq4	cudev/util/simd_functions.hpp	/^__device__ __forceinline__ uint vcmpeq4(uint a, uint b)$/;"	f	namespace:cv::cudev
vcmpge2	core/cuda/simd_functions.hpp	/^    static __device__ __forceinline__ unsigned int vcmpge2(unsigned int a, unsigned int b)$/;"	f	namespace:cv::cuda::device
vcmpge2	cudev/util/simd_functions.hpp	/^__device__ __forceinline__ uint vcmpge2(uint a, uint b)$/;"	f	namespace:cv::cudev
vcmpge4	core/cuda/simd_functions.hpp	/^    static __device__ __forceinline__ unsigned int vcmpge4(unsigned int a, unsigned int b)$/;"	f	namespace:cv::cuda::device
vcmpge4	cudev/util/simd_functions.hpp	/^__device__ __forceinline__ uint vcmpge4(uint a, uint b)$/;"	f	namespace:cv::cudev
vcmpgt2	core/cuda/simd_functions.hpp	/^    static __device__ __forceinline__ unsigned int vcmpgt2(unsigned int a, unsigned int b)$/;"	f	namespace:cv::cuda::device
vcmpgt2	cudev/util/simd_functions.hpp	/^__device__ __forceinline__ uint vcmpgt2(uint a, uint b)$/;"	f	namespace:cv::cudev
vcmpgt4	core/cuda/simd_functions.hpp	/^    static __device__ __forceinline__ unsigned int vcmpgt4(unsigned int a, unsigned int b)$/;"	f	namespace:cv::cuda::device
vcmpgt4	cudev/util/simd_functions.hpp	/^__device__ __forceinline__ uint vcmpgt4(uint a, uint b)$/;"	f	namespace:cv::cudev
vcmple2	core/cuda/simd_functions.hpp	/^    static __device__ __forceinline__ unsigned int vcmple2(unsigned int a, unsigned int b)$/;"	f	namespace:cv::cuda::device
vcmple2	cudev/util/simd_functions.hpp	/^__device__ __forceinline__ uint vcmple2(uint a, uint b)$/;"	f	namespace:cv::cudev
vcmple4	core/cuda/simd_functions.hpp	/^    static __device__ __forceinline__ unsigned int vcmple4(unsigned int a, unsigned int b)$/;"	f	namespace:cv::cuda::device
vcmple4	cudev/util/simd_functions.hpp	/^__device__ __forceinline__ uint vcmple4(uint a, uint b)$/;"	f	namespace:cv::cudev
vcmplt2	core/cuda/simd_functions.hpp	/^    static __device__ __forceinline__ unsigned int vcmplt2(unsigned int a, unsigned int b)$/;"	f	namespace:cv::cuda::device
vcmplt2	cudev/util/simd_functions.hpp	/^__device__ __forceinline__ uint vcmplt2(uint a, uint b)$/;"	f	namespace:cv::cudev
vcmplt4	core/cuda/simd_functions.hpp	/^    static __device__ __forceinline__ unsigned int vcmplt4(unsigned int a, unsigned int b)$/;"	f	namespace:cv::cuda::device
vcmplt4	cudev/util/simd_functions.hpp	/^__device__ __forceinline__ uint vcmplt4(uint a, uint b)$/;"	f	namespace:cv::cudev
vcmpne2	core/cuda/simd_functions.hpp	/^    static __device__ __forceinline__ unsigned int vcmpne2(unsigned int a, unsigned int b)$/;"	f	namespace:cv::cuda::device
vcmpne2	cudev/util/simd_functions.hpp	/^__device__ __forceinline__ uint vcmpne2(uint a, uint b)$/;"	f	namespace:cv::cudev
vcmpne4	core/cuda/simd_functions.hpp	/^    static __device__ __forceinline__ unsigned int vcmpne4(unsigned int a, unsigned int b)$/;"	f	namespace:cv::cuda::device
vcmpne4	cudev/util/simd_functions.hpp	/^__device__ __forceinline__ uint vcmpne4(uint a, uint b)$/;"	f	namespace:cv::cudev
vec1	core/cuda/vec_distance.hpp	/^        const T1* vec1;$/;"	m	struct:cv::cuda::device::VecDiffGlobal
vec1Vals	core/cuda/vec_distance.hpp	/^        U vec1Vals[MAX_LEN \/ THREAD_DIM];$/;"	m	struct:cv::cuda::device::VecDiffCachedRegister
vec_distance_detail	core/cuda/detail/vec_distance_detail.hpp	/^    namespace vec_distance_detail$/;"	n	namespace:cv::cuda::device
vec_math_detail	core/cuda/vec_math.hpp	/^namespace vec_math_detail$/;"	n	namespace:cv::cuda::device
vec_math_detail	cudev/util/vec_math.hpp	/^namespace vec_math_detail$/;"	n	namespace:cv::cudev
vec_type	core/affine.hpp	/^        typedef Vec<channel_type, channels> vec_type;$/;"	t	class:cv::DataType
vec_type	core/cuda/vec_traits.hpp	/^    template<> struct TypeVec<bool, 1> { typedef uchar vec_type; };$/;"	t	struct:cv::cuda::device::TypeVec
vec_type	core/cuda/vec_traits.hpp	/^    template<> struct TypeVec<bool, 2> { typedef uchar2 vec_type; };$/;"	t	struct:cv::cuda::device::TypeVec
vec_type	core/cuda/vec_traits.hpp	/^    template<> struct TypeVec<bool, 3> { typedef uchar3 vec_type; };$/;"	t	struct:cv::cuda::device::TypeVec
vec_type	core/cuda/vec_traits.hpp	/^    template<> struct TypeVec<bool, 4> { typedef uchar4 vec_type; };$/;"	t	struct:cv::cuda::device::TypeVec
vec_type	core/cuda/vec_traits.hpp	/^    template<> struct TypeVec<bool, 8> { typedef uchar8 vec_type; };$/;"	t	struct:cv::cuda::device::TypeVec
vec_type	core/cuda/vec_traits.hpp	/^    template<> struct TypeVec<schar, 1> { typedef schar vec_type; };$/;"	t	struct:cv::cuda::device::TypeVec
vec_type	core/cuda/vec_traits.hpp	/^    template<> struct TypeVec<schar, 2> { typedef char2 vec_type; };$/;"	t	struct:cv::cuda::device::TypeVec
vec_type	core/cuda/vec_traits.hpp	/^    template<> struct TypeVec<schar, 3> { typedef char3 vec_type; };$/;"	t	struct:cv::cuda::device::TypeVec
vec_type	core/cuda/vec_traits.hpp	/^    template<> struct TypeVec<schar, 4> { typedef char4 vec_type; };$/;"	t	struct:cv::cuda::device::TypeVec
vec_type	core/cuda/vec_traits.hpp	/^    template<> struct TypeVec<schar, 8> { typedef char8 vec_type; };$/;"	t	struct:cv::cuda::device::TypeVec
vec_type	core/cvstd.inl.hpp	/^    typedef Vec<channel_type, channels> vec_type;$/;"	t	class:cv::DataType
vec_type	core/matx.hpp	/^    typedef value_type                                    vec_type;$/;"	t	class:cv::DataType
vec_type	core/matx.hpp	/^    typedef value_type                                 vec_type;$/;"	t	class:cv::DataType
vec_type	core/traits.hpp	/^    typedef value_type  vec_type;$/;"	t	class:cv::DataType
vec_type	core/types.hpp	/^    typedef Vec<channel_type, channels> vec_type;$/;"	t	class:cv::DataType
vec_type	cudev/util/vec_traits.hpp	/^    typedef value_type   vec_type;$/;"	t	class:cv::DataType
vec_type	cudev/util/vec_traits.hpp	/^    typedef value_type vec_type;$/;"	t	class:cv::DataType
veclen	flann.hpp	/^        int veclen() const { return nnIndex->veclen(); }$/;"	f	class:cv::flann::GenericIndex
veclen	flann.hpp	/^    int veclen() const$/;"	f	class:cv::flann::Index_
veclen	flann/autotuned_index.h	/^    virtual size_t veclen() const$/;"	f	class:cvflann::AutotunedIndex
veclen	flann/composite_index.h	/^    size_t veclen() const$/;"	f	class:cvflann::CompositeIndex
veclen	flann/flann_base.hpp	/^    size_t veclen() const$/;"	f	class:cvflann::Index
veclen	flann/hierarchical_clustering_index.h	/^    size_t veclen() const$/;"	f	class:cvflann::HierarchicalClusteringIndex
veclen	flann/kdtree_index.h	/^    size_t veclen() const$/;"	f	class:cvflann::KDTreeIndex
veclen	flann/kdtree_single_index.h	/^    size_t veclen() const$/;"	f	class:cvflann::KDTreeSingleIndex
veclen	flann/kmeans_index.h	/^        const size_t veclen;$/;"	m	class:cvflann::KMeansIndex::KMeansDistanceComputer
veclen	flann/kmeans_index.h	/^    size_t veclen() const$/;"	f	class:cvflann::KMeansIndex
veclen	flann/linear_index.h	/^    size_t veclen() const$/;"	f	class:cvflann::LinearIndex
veclen	flann/lsh_index.h	/^    size_t veclen() const$/;"	f	class:cvflann::LshIndex
veclen_	flann/hierarchical_clustering_index.h	/^    size_t veclen_;$/;"	m	class:cvflann::HierarchicalClusteringIndex
veclen_	flann/kdtree_index.h	/^    size_t veclen_;$/;"	m	class:cvflann::KDTreeIndex
veclen_	flann/kmeans_index.h	/^    size_t veclen_;$/;"	m	class:cvflann::KMeansIndex
verified	ts/ts_perf.hpp	/^    bool verified;$/;"	m	class:perf::TestBase
version	core/types_c.h	/^    const char* version;$/;"	m	struct:CvModuleInfo
version	flann/saving.h	/^    char version[16];$/;"	m	struct:cvflann::IndexHeader
vertex_	core/opengl.hpp	/^    Buffer vertex_;$/;"	m	class:cv::ogl::Arrays
vertical_pass	cudev/grid/detail/integral.hpp	/^    __global__ void vertical_pass(GlobPtr<T> integral, const int rows, const int cols)$/;"	f	namespace:cv::cudev::integral_detail
vertical_pass	cudev/grid/detail/integral.hpp	/^    __host__ void vertical_pass(const GlobPtr<T>& integral, int rows, int cols, cudaStream_t stream)$/;"	f	namespace:cv::cudev::integral_detail
videoCaptureConnection	videoio/cap_ios.h	/^@property (nonatomic, retain) AVCaptureConnection* videoCaptureConnection;$/;"	v
videostab	videostab/deblurring.hpp	/^namespace videostab$/;"	n	namespace:cv
videostab	videostab/fast_marching.hpp	/^namespace videostab$/;"	n	namespace:cv
videostab	videostab/fast_marching_inl.hpp	/^namespace videostab$/;"	n	namespace:cv
videostab	videostab/frame_source.hpp	/^namespace videostab$/;"	n	namespace:cv
videostab	videostab/global_motion.hpp	/^namespace videostab$/;"	n	namespace:cv
videostab	videostab/inpainting.hpp	/^namespace videostab$/;"	n	namespace:cv
videostab	videostab/log.hpp	/^namespace videostab$/;"	n	namespace:cv
videostab	videostab/motion_core.hpp	/^namespace videostab$/;"	n	namespace:cv
videostab	videostab/motion_stabilizing.hpp	/^namespace videostab$/;"	n	namespace:cv
videostab	videostab/optical_flow.hpp	/^namespace videostab$/;"	n	namespace:cv
videostab	videostab/outlier_rejection.hpp	/^namespace videostab$/;"	n	namespace:cv
videostab	videostab/ring_buffer.hpp	/^namespace videostab$/;"	n	namespace:cv
videostab	videostab/stabilizer.hpp	/^namespace videostab$/;"	n	namespace:cv
videostab	videostab/wobble_suppression.hpp	/^namespace videostab$/;"	n	namespace:cv
vind_	flann/kdtree_index.h	/^    std::vector<int> vind_;$/;"	m	class:cvflann::KDTreeIndex
vind_	flann/kdtree_single_index.h	/^    std::vector<int> vind_;$/;"	m	class:cvflann::KDTreeSingleIndex
violet	viz/types.hpp	/^inline cv::viz::Color cv::viz::Color::violet()         { return Color(226,  43, 138); }$/;"	f	class:cv::viz::Color
viz	viz/types.hpp	/^    namespace viz$/;"	n	namespace:cv
viz	viz/viz3d.hpp	/^    namespace viz$/;"	n	namespace:cv
viz	viz/vizcore.hpp	/^    namespace viz$/;"	n	namespace:cv
viz	viz/widget_accessor.hpp	/^    namespace viz$/;"	n	namespace:cv
viz	viz/widgets.hpp	/^    namespace viz$/;"	n	namespace:cv
vmax2	core/cuda/simd_functions.hpp	/^    static __device__ __forceinline__ unsigned int vmax2(unsigned int a, unsigned int b)$/;"	f	namespace:cv::cuda::device
vmax2	cudev/util/simd_functions.hpp	/^__device__ __forceinline__ uint vmax2(uint a, uint b)$/;"	f	namespace:cv::cudev
vmax4	core/cuda/simd_functions.hpp	/^    static __device__ __forceinline__ unsigned int vmax4(unsigned int a, unsigned int b)$/;"	f	namespace:cv::cuda::device
vmax4	cudev/util/simd_functions.hpp	/^__device__ __forceinline__ uint vmax4(uint a, uint b)$/;"	f	namespace:cv::cudev
vmin2	core/cuda/simd_functions.hpp	/^    static __device__ __forceinline__ unsigned int vmin2(unsigned int a, unsigned int b)$/;"	f	namespace:cv::cuda::device
vmin2	cudev/util/simd_functions.hpp	/^__device__ __forceinline__ uint vmin2(uint a, uint b)$/;"	f	namespace:cv::cudev
vmin4	core/cuda/simd_functions.hpp	/^    static __device__ __forceinline__ unsigned int vmin4(unsigned int a, unsigned int b)$/;"	f	namespace:cv::cuda::device
vmin4	cudev/util/simd_functions.hpp	/^__device__ __forceinline__ uint vmin4(uint a, uint b)$/;"	f	namespace:cv::cudev
vocabulary	features2d.hpp	/^    Mat vocabulary;$/;"	m	class:cv::BOWImgDescriptorExtractor
vscale	highgui.hpp	/^    float       hscale, vscale;$/;"	m	struct:cv::QtFont
vscale	imgproc/imgproc_c.h	/^    float       hscale, vscale;$/;"	m	struct:CvFont
vseteq2	core/cuda/simd_functions.hpp	/^    static __device__ __forceinline__ unsigned int vseteq2(unsigned int a, unsigned int b)$/;"	f	namespace:cv::cuda::device
vseteq2	cudev/util/simd_functions.hpp	/^__device__ __forceinline__ uint vseteq2(uint a, uint b)$/;"	f	namespace:cv::cudev
vseteq4	core/cuda/simd_functions.hpp	/^    static __device__ __forceinline__ unsigned int vseteq4(unsigned int a, unsigned int b)$/;"	f	namespace:cv::cuda::device
vseteq4	cudev/util/simd_functions.hpp	/^__device__ __forceinline__ uint vseteq4(uint a, uint b)$/;"	f	namespace:cv::cudev
vsetge2	core/cuda/simd_functions.hpp	/^    static __device__ __forceinline__ unsigned int vsetge2(unsigned int a, unsigned int b)$/;"	f	namespace:cv::cuda::device
vsetge2	cudev/util/simd_functions.hpp	/^__device__ __forceinline__ uint vsetge2(uint a, uint b)$/;"	f	namespace:cv::cudev
vsetge4	core/cuda/simd_functions.hpp	/^    static __device__ __forceinline__ unsigned int vsetge4(unsigned int a, unsigned int b)$/;"	f	namespace:cv::cuda::device
vsetge4	cudev/util/simd_functions.hpp	/^__device__ __forceinline__ uint vsetge4(uint a, uint b)$/;"	f	namespace:cv::cudev
vsetgt2	core/cuda/simd_functions.hpp	/^    static __device__ __forceinline__ unsigned int vsetgt2(unsigned int a, unsigned int b)$/;"	f	namespace:cv::cuda::device
vsetgt2	cudev/util/simd_functions.hpp	/^__device__ __forceinline__ uint vsetgt2(uint a, uint b)$/;"	f	namespace:cv::cudev
vsetgt4	core/cuda/simd_functions.hpp	/^    static __device__ __forceinline__ unsigned int vsetgt4(unsigned int a, unsigned int b)$/;"	f	namespace:cv::cuda::device
vsetgt4	cudev/util/simd_functions.hpp	/^__device__ __forceinline__ uint vsetgt4(uint a, uint b)$/;"	f	namespace:cv::cudev
vsetle2	core/cuda/simd_functions.hpp	/^    static __device__ __forceinline__ unsigned int vsetle2(unsigned int a, unsigned int b)$/;"	f	namespace:cv::cuda::device
vsetle2	cudev/util/simd_functions.hpp	/^__device__ __forceinline__ uint vsetle2(uint a, uint b)$/;"	f	namespace:cv::cudev
vsetle4	core/cuda/simd_functions.hpp	/^    static __device__ __forceinline__ unsigned int vsetle4(unsigned int a, unsigned int b)$/;"	f	namespace:cv::cuda::device
vsetle4	cudev/util/simd_functions.hpp	/^__device__ __forceinline__ uint vsetle4(uint a, uint b)$/;"	f	namespace:cv::cudev
vsetlt2	core/cuda/simd_functions.hpp	/^    static __device__ __forceinline__ unsigned int vsetlt2(unsigned int a, unsigned int b)$/;"	f	namespace:cv::cuda::device
vsetlt2	cudev/util/simd_functions.hpp	/^__device__ __forceinline__ uint vsetlt2(uint a, uint b)$/;"	f	namespace:cv::cudev
vsetlt4	core/cuda/simd_functions.hpp	/^    static __device__ __forceinline__ unsigned int vsetlt4(unsigned int a, unsigned int b)$/;"	f	namespace:cv::cuda::device
vsetlt4	cudev/util/simd_functions.hpp	/^__device__ __forceinline__ uint vsetlt4(uint a, uint b)$/;"	f	namespace:cv::cudev
vsetne2	core/cuda/simd_functions.hpp	/^    static __device__ __forceinline__ unsigned int vsetne2(unsigned int a, unsigned int b)$/;"	f	namespace:cv::cuda::device
vsetne2	cudev/util/simd_functions.hpp	/^__device__ __forceinline__ uint vsetne2(uint a, uint b)$/;"	f	namespace:cv::cudev
vsetne4	core/cuda/simd_functions.hpp	/^    static __device__ __forceinline__ unsigned int vsetne4(unsigned int a, unsigned int b)$/;"	f	namespace:cv::cuda::device
vsetne4	cudev/util/simd_functions.hpp	/^__device__ __forceinline__ uint vsetne4(uint a, uint b)$/;"	f	namespace:cv::cudev
vsub2	core/cuda/simd_functions.hpp	/^    static __device__ __forceinline__ unsigned int vsub2(unsigned int a, unsigned int b)$/;"	f	namespace:cv::cuda::device
vsub2	cudev/util/simd_functions.hpp	/^__device__ __forceinline__ uint vsub2(uint a, uint b)$/;"	f	namespace:cv::cudev
vsub4	core/cuda/simd_functions.hpp	/^    static __device__ __forceinline__ unsigned int vsub4(unsigned int a, unsigned int b)$/;"	f	namespace:cv::cuda::device
vsub4	cudev/util/simd_functions.hpp	/^__device__ __forceinline__ uint vsub4(uint a, uint b)$/;"	f	namespace:cv::cudev
vt	core.hpp	/^    Mat u, w, vt;$/;"	m	class:cv::SVD
vtx	core/core_c.h	/^    CvGraphVtx* vtx;       \/* current graph vertex (or current edge origin) *\/$/;"	m	struct:CvGraphScanner
vtx	imgproc.hpp	/^    std::vector<Vertex> vtx;$/;"	m	class:cv::Subdiv2D
w	core.hpp	/^    Mat u, w, vt;$/;"	m	class:cv::SVD
w1_	videostab/motion_stabilizing.hpp	/^    float w1_, w2_, w3_, w4_;$/;"	m	class:cv::videostab::LpMotionStabilizer
w2_	videostab/motion_stabilizing.hpp	/^    float w1_, w2_, w3_, w4_;$/;"	m	class:cv::videostab::LpMotionStabilizer
w3_	videostab/motion_stabilizing.hpp	/^    float w1_, w2_, w3_, w4_;$/;"	m	class:cv::videostab::LpMotionStabilizer
w4_	videostab/motion_stabilizing.hpp	/^    float w1_, w2_, w3_, w4_;$/;"	m	class:cv::videostab::LpMotionStabilizer
wSum_	videostab/deblurring.hpp	/^    Mat_<float> bSum_, gSum_, rSum_, wSum_;$/;"	m	class:cv::videostab::WeightingDeblurer
w_type	hal/intrin.hpp	/^    typedef double w_type;$/;"	t	struct:cv::V_TypeTraits
w_type	hal/intrin.hpp	/^    typedef int w_type;$/;"	t	struct:cv::V_TypeTraits
w_type	hal/intrin.hpp	/^    typedef int64 w_type;$/;"	t	struct:cv::V_TypeTraits
w_type	hal/intrin.hpp	/^    typedef short w_type;$/;"	t	struct:cv::V_TypeTraits
w_type	hal/intrin.hpp	/^    typedef uint64 w_type;$/;"	t	struct:cv::V_TypeTraits
w_type	hal/intrin.hpp	/^    typedef unsigned w_type;$/;"	t	struct:cv::V_TypeTraits
w_type	hal/intrin.hpp	/^    typedef ushort w_type;$/;"	t	struct:cv::V_TypeTraits
walkBreadthFirst	stitching/detail/util_inl.hpp	/^B Graph::walkBreadthFirst(int from, B body) const$/;"	f	class:cv::detail::Graph
warp	stitching/detail/warpers.hpp	/^    Point warp(InputArray src, InputArray K, InputArray R, InputArray T, int interp_mode, int border_mode,$/;"	f	class:cv::detail::PlaneWarperGpu
warp	stitching/detail/warpers.hpp	/^    Point warp(InputArray src, InputArray K, InputArray R, int interp_mode, int border_mode,$/;"	f	class:cv::detail::CylindricalWarperGpu
warp	stitching/detail/warpers.hpp	/^    Point warp(InputArray src, InputArray K, InputArray R, int interp_mode, int border_mode,$/;"	f	class:cv::detail::PlaneWarperGpu
warp	stitching/detail/warpers.hpp	/^    Point warp(InputArray src, InputArray K, InputArray R, int interp_mode, int border_mode,$/;"	f	class:cv::detail::SphericalWarperGpu
warp	stitching/detail/warpers_inl.hpp	/^Point RotationWarperBase<P>::warp(InputArray src, InputArray K, InputArray R, int interp_mode, int border_mode,$/;"	f	class:cv::detail::RotationWarperBase
warpAffinePtr	cudev/ptr2d/warping.hpp	/^warpAffinePtr(const SrcPtr& src, Size dstSize, const GpuMat_<float>& warpMat)$/;"	f	namespace:cv::cudev
warpAffine_	cudev/expr/warping.hpp	/^warpAffine_(const SrcPtr& src, Size dstSize, const GpuMat_<float>& warpMat)$/;"	f	namespace:cv::cudev
warpBackward	stitching/detail/warpers_inl.hpp	/^void RotationWarperBase<P>::warpBackward(InputArray src, InputArray K, InputArray R, int interp_mode, int border_mode,$/;"	f	class:cv::detail::RotationWarperBase
warpCopy	cudev/warp/warp.hpp	/^__device__ __forceinline__ OutIt warpCopy(InIt beg, InIt end, OutIt out)$/;"	f	namespace:cv::cudev
warpFill	cudev/warp/warp.hpp	/^__device__ __forceinline__ void warpFill(It beg, It end, const T& value)$/;"	f	namespace:cv::cudev
warpId	cudev/warp/warp.hpp	/^    __device__ __forceinline__ static uint warpId()$/;"	f	struct:cv::cudev::Warp
warpMat	cudev/ptr2d/warping.hpp	/^    const float* warpMat;$/;"	m	struct:cv::cudev::AffineMapPtr
warpMat	cudev/ptr2d/warping.hpp	/^    const float* warpMat;$/;"	m	struct:cv::cudev::PerspectiveMapPtr
warpPerspectivePtr	cudev/ptr2d/warping.hpp	/^warpPerspectivePtr(const SrcPtr& src, Size dstSize, const GpuMat_<float>& warpMat)$/;"	f	namespace:cv::cudev
warpPerspective_	cudev/expr/warping.hpp	/^warpPerspective_(const SrcPtr& src, Size dstSize, const GpuMat_<float>& warpMat)$/;"	f	namespace:cv::cudev
warpPoint	stitching/detail/warpers_inl.hpp	/^Point2f RotationWarperBase<P>::warpPoint(const Point2f &pt, InputArray K, InputArray R)$/;"	f	class:cv::detail::RotationWarperBase
warpReduce	cudev/warp/reduce.hpp	/^__device__ __forceinline__ void warpReduce(const tuple<P0, P1, P2, P3, P4, P5, P6, P7, P8, P9>& smem,$/;"	f	namespace:cv::cudev
warpReduce	cudev/warp/reduce.hpp	/^__device__ __forceinline__ void warpReduce(volatile T* smem, T& val, uint tid, const Op& op)$/;"	f	namespace:cv::cudev
warpReduceKeyVal	cudev/warp/reduce.hpp	/^__device__ __forceinline__ void warpReduceKeyVal(const tuple<KP0, KP1, KP2, KP3, KP4, KP5, KP6, KP7, KP8, KP9>& skeys,$/;"	f	namespace:cv::cudev
warpReduceKeyVal	cudev/warp/reduce.hpp	/^__device__ __forceinline__ void warpReduceKeyVal(volatile K* skeys, K& key, volatile V* svals, V& val, uint tid, const Cmp& cmp)$/;"	f	namespace:cv::cudev
warpReduceKeyVal	cudev/warp/reduce.hpp	/^__device__ __forceinline__ void warpReduceKeyVal(volatile K* skeys, K& key,$/;"	f	namespace:cv::cudev
warpRoi	stitching/detail/warpers_inl.hpp	/^Rect RotationWarperBase<P>::warpRoi(Size src_size, InputArray K, InputArray R)$/;"	f	class:cv::detail::RotationWarperBase
warpScanExclusive	core/cuda/scan.hpp	/^    __device__ __forceinline__ T warpScanExclusive(T idata, volatile T* s_Data, unsigned int tid)$/;"	f	namespace:cv::cuda::device
warpScanExclusive	cudev/warp/scan.hpp	/^__device__ __forceinline__ T warpScanExclusive(T data, volatile T* smem, uint tid)$/;"	f	namespace:cv::cudev
warpScanInclusive	core/cuda/scan.hpp	/^    __device__ T warpScanInclusive(T idata, volatile T* s_Data, unsigned int tid)$/;"	f	namespace:cv::cuda::device
warpScanInclusive	cudev/warp/scan.hpp	/^__device__ T warpScanInclusive(T data, volatile T* smem, uint tid)$/;"	f	namespace:cv::cudev
warpTransform	cudev/warp/warp.hpp	/^__device__ __forceinline__ OutIt warpTransform(InIt beg, InIt end, OutIt out, const UnOp& op)$/;"	f	namespace:cv::cudev
warpTransform	cudev/warp/warp.hpp	/^__device__ __forceinline__ OutIt warpTransform(InIt1 beg1, InIt1 end1, InIt2 beg2, OutIt out, const BinOp& op)$/;"	f	namespace:cv::cudev
warpYota	cudev/warp/warp.hpp	/^__device__ __forceinline__ void warpYota(OutIt beg, OutIt end, T value)$/;"	f	namespace:cv::cudev
warp_log	core/cuda/scan.hpp	/^        static const int warp_log         = 5;$/;"	m	struct:cv::cuda::device::WarpScanNoComp
warp_log	core/cuda/scan.hpp	/^        static const int warp_log  = 5;$/;"	m	struct:cv::cuda::device::BlockScan
warp_mask	core/cuda/scan.hpp	/^        static const int warp_mask        = 31;$/;"	m	struct:cv::cuda::device::WarpScanNoComp
warp_mask	core/cuda/scan.hpp	/^        static const int warp_mask = 31;$/;"	m	struct:cv::cuda::device::BlockScan
warp_offset	core/cuda/scan.hpp	/^        static const int warp_offset      = 0;$/;"	m	struct:cv::cuda::device::WarpScan
warp_offset	core/cuda/scan.hpp	/^        static const int warp_offset      = 16;$/;"	m	struct:cv::cuda::device::WarpScanNoComp
warp_reduce	core/cuda/warp_reduce.hpp	/^    __device__ __forceinline__ T warp_reduce(volatile T *ptr , const unsigned int tid = threadIdx.x)$/;"	f	namespace:cv::cuda::device
warp_reduce_detail	cudev/warp/detail/reduce.hpp	/^namespace warp_reduce_detail$/;"	n	namespace:cv::cudev
warp_reduce_key_val_detail	cudev/warp/detail/reduce_key_val.hpp	/^namespace warp_reduce_key_val_detail$/;"	n	namespace:cv::cudev
warp_smem_stride	core/cuda/scan.hpp	/^        static const int warp_smem_stride = 32 + 16 + 1;$/;"	m	struct:cv::cuda::device::WarpScanNoComp
warped_image_scale_	stitching.hpp	/^    double warped_image_scale_;$/;"	m	class:cv::Stitcher
warper	stitching.hpp	/^    Ptr<WarperCreator> warper() { return warper_; }$/;"	f	class:cv::Stitcher
warper	stitching.hpp	/^    const Ptr<WarperCreator> warper() const { return warper_; }$/;"	f	class:cv::Stitcher
warper_	stitching.hpp	/^    Ptr<WarperCreator> warper_;$/;"	m	class:cv::Stitcher
wastedMemory	flann/allocator.h	/^    int     wastedMemory;$/;"	m	class:cvflann::PooledAllocator
waveCorrectKind	stitching.hpp	/^    detail::WaveCorrectKind waveCorrectKind() const { return wave_correct_kind_; }$/;"	f	class:cv::Stitcher
waveCorrection	stitching.hpp	/^    CV_WRAP bool waveCorrection() const { return do_wave_correct_; }$/;"	f	class:cv::Stitcher
wave_correct_kind_	stitching.hpp	/^    detail::WaveCorrectKind wave_correct_kind_;$/;"	m	class:cv::Stitcher
weight	objdetect/objdetect_c.h	/^        float weight;$/;"	m	struct:CvHaarFeature::__anon32
weight	stitching/detail/util.hpp	/^    float weight;$/;"	m	struct:cv::detail::GraphEdge
weight1	videostab/motion_stabilizing.hpp	/^    float weight1() const { return w1_; }$/;"	f	class:cv::videostab::LpMotionStabilizer
weight2	videostab/motion_stabilizing.hpp	/^    float weight2() const { return w2_; }$/;"	f	class:cv::videostab::LpMotionStabilizer
weight3	videostab/motion_stabilizing.hpp	/^    float weight3() const { return w3_; }$/;"	f	class:cv::videostab::LpMotionStabilizer
weight4	videostab/motion_stabilizing.hpp	/^    float weight4() const { return w4_; }$/;"	f	class:cv::videostab::LpMotionStabilizer
weight_	videostab/motion_stabilizing.hpp	/^    std::vector<float> weight_;$/;"	m	class:cv::videostab::GaussianMotionFilter
weight_map_	stitching/detail/blenders.hpp	/^    UMat weight_map_;$/;"	m	class:cv::detail::FeatherBlender
weight_type_	stitching/detail/blenders.hpp	/^    int weight_type_; \/\/CV_32F or CV_16S$/;"	m	class:cv::detail::MultiBandBlender
weightsPositionsSmoothing	objdetect/detection_based_tracker.hpp	/^        std::vector<float> weightsPositionsSmoothing;$/;"	m	class:cv::DetectionBasedTracker
weightsSizesSmoothing	objdetect/detection_based_tracker.hpp	/^        std::vector<float> weightsSizesSmoothing;$/;"	m	class:cv::DetectionBasedTracker
white	viz/types.hpp	/^inline cv::viz::Color cv::viz::Color::white()   { return Color(255, 255, 255); }$/;"	f	class:cv::viz::Color
width	core/cuda/border_interpolate.hpp	/^        int width;$/;"	m	struct:cv::cuda::device::BorderReader
width	core/cuda/border_interpolate.hpp	/^        int width;$/;"	m	struct:cv::cuda::device::BrdConstant
width	core/cuda/border_interpolate.hpp	/^        int width;$/;"	m	struct:cv::cuda::device::BrdRowConstant
width	core/cuda/border_interpolate.hpp	/^        int width;$/;"	m	struct:cv::cuda::device::BrdRowWrap
width	core/cuda/border_interpolate.hpp	/^        int width;$/;"	m	struct:cv::cuda::device::BrdWrap
width	core/cuda/filters.hpp	/^        int width, haight;$/;"	m	struct:cv::cuda::device::AreaFilter
width	core/types.hpp	/^    _Tp width, height; \/\/ the width and the height$/;"	m	class:cv::Size_
width	core/types.hpp	/^    _Tp x, y, width, height; \/\/< the top-left corner, as well as width and height of the rectangle$/;"	m	class:cv::Rect_
width	core/types_c.h	/^        int width;$/;"	m	union:CvMat::__anon146
width	core/types_c.h	/^    float width;$/;"	m	struct:CvSize2D32f
width	core/types_c.h	/^    int  width;             \/**< Image width in pixels.                           *\/$/;"	m	struct:_IplImage
width	core/types_c.h	/^    int  width;$/;"	m	struct:_IplROI
width	core/types_c.h	/^    int width;$/;"	m	struct:CvRect
width	core/types_c.h	/^    int width;$/;"	m	struct:CvSize
width	cudacodec.hpp	/^    int width;$/;"	m	struct:cv::cudacodec::FormatInfo
width	cudalegacy/NCV.hpp	/^    Ncv32s width;      \/\/\/< Rectangle width.$/;"	m	struct:NcvRect32s
width	cudalegacy/NCV.hpp	/^    Ncv32s width;  \/\/\/< Rectangle width.$/;"	m	struct:NcvSize32s
width	cudalegacy/NCV.hpp	/^    Ncv32u width() const {return this->_width;}$/;"	f	class:NCVMatrix
width	cudalegacy/NCV.hpp	/^    Ncv32u width;      \/\/\/< Rectangle width.$/;"	m	struct:NcvRect32u
width	cudalegacy/NCV.hpp	/^    Ncv32u width;  \/\/\/< Rectangle width.$/;"	m	struct:NcvSize32u
width	cudalegacy/NCV.hpp	/^    Ncv8u width;$/;"	m	struct:NcvRect8u
widthStep	core/types_c.h	/^    int  widthStep;         \/**< Size of aligned image row in bytes.    *\/$/;"	m	struct:_IplImage
winSigma	objdetect.hpp	/^    CV_PROP double winSigma;$/;"	m	struct:cv::HOGDescriptor
winSize	objdetect.hpp	/^    CV_PROP Size winSize;$/;"	m	struct:cv::HOGDescriptor
winSize	videostab/optical_flow.hpp	/^    virtual Size winSize() const { return winSize_; }$/;"	f	class:cv::videostab::PyrLkOptFlowEstimatorBase
winSize_	videostab/optical_flow.hpp	/^    Size winSize_;$/;"	m	class:cv::videostab::PyrLkOptFlowEstimatorBase
window_size_	viz/types.hpp	/^            Size window_size_;$/;"	m	class:cv::viz::Camera
wobbleSuppressor	videostab/stabilizer.hpp	/^    Ptr<WobbleSuppressorBase> wobbleSuppressor() const { return wobbleSuppressor_; }$/;"	f	class:cv::videostab::TwoPassStabilizer
wobbleSuppressor_	videostab/stabilizer.hpp	/^    Ptr<WobbleSuppressorBase> wobbleSuppressor_;$/;"	m	class:cv::videostab::TwoPassStabilizer
workScale	stitching.hpp	/^    CV_WRAP double workScale() const { return work_scale_; }$/;"	f	class:cv::Stitcher
work_elem_type	cudev/grid/detail/reduce.hpp	/^        typedef typename VecTraits<work_type>::elem_type work_elem_type;$/;"	t	struct:cv::cudev::grid_reduce_detail::SumReductor
work_scale_	stitching.hpp	/^    double work_scale_;$/;"	m	class:cv::Stitcher
work_type	core/affine.hpp	/^        typedef Affine3<typename DataType<_Tp>::work_type> work_type;$/;"	t	class:cv::DataType
work_type	core/cuda/filters.hpp	/^        typedef typename TypeVec<float, VecTraits<elem_type>::cn>::vec_type work_type;$/;"	t	struct:cv::cuda::device::CubicFilter
work_type	core/cvstd.inl.hpp	/^    typedef value_type         work_type;$/;"	t	class:cv::DataType
work_type	core/matx.hpp	/^    typedef Matx<typename DataType<_Tp>::work_type, m, n> work_type;$/;"	t	class:cv::DataType
work_type	core/matx.hpp	/^    typedef Vec<typename DataType<_Tp>::work_type, cn> work_type;$/;"	t	class:cv::DataType
work_type	core/traits.hpp	/^    typedef int         work_type;$/;"	t	class:cv::DataType
work_type	core/traits.hpp	/^    typedef value_type  work_type;$/;"	t	class:cv::DataType
work_type	core/types.hpp	/^    typedef Point3_<typename DataType<_Tp>::work_type> work_type;$/;"	t	class:cv::DataType
work_type	core/types.hpp	/^    typedef Point_<typename DataType<_Tp>::work_type> work_type;$/;"	t	class:cv::DataType
work_type	core/types.hpp	/^    typedef Rect_<typename DataType<_Tp>::work_type> work_type;$/;"	t	class:cv::DataType
work_type	core/types.hpp	/^    typedef Scalar_<typename DataType<_Tp>::work_type> work_type;$/;"	t	class:cv::DataType
work_type	core/types.hpp	/^    typedef Size_<typename DataType<_Tp>::work_type> work_type;$/;"	t	class:cv::DataType
work_type	core/types.hpp	/^    typedef double      work_type;$/;"	t	class:cv::DataType
work_type	core/types.hpp	/^    typedef float         work_type;$/;"	t	class:cv::DataType
work_type	core/types.hpp	/^    typedef int         work_type;$/;"	t	class:cv::DataType
work_type	core/types.hpp	/^    typedef value_type   work_type;$/;"	t	class:cv::DataType
work_type	core/types.hpp	/^    typedef value_type work_type;$/;"	t	class:cv::DataType
work_type	cudev/grid/reduce_to_vec.hpp	/^    typedef T work_type;$/;"	t	struct:cv::cudev::Avg
work_type	cudev/grid/reduce_to_vec.hpp	/^    typedef T work_type;$/;"	t	struct:cv::cudev::Max
work_type	cudev/grid/reduce_to_vec.hpp	/^    typedef T work_type;$/;"	t	struct:cv::cudev::Min
work_type	cudev/grid/reduce_to_vec.hpp	/^    typedef T work_type;$/;"	t	struct:cv::cudev::Sum
work_type	cudev/util/vec_traits.hpp	/^    typedef value_type   work_type;$/;"	t	class:cv::DataType
work_type	cudev/util/vec_traits.hpp	/^    typedef value_type work_type;$/;"	t	class:cv::DataType
worktype_f	core/cuda/detail/color_detail.hpp	/^            typedef float worktype_f;$/;"	t	struct:cv::cuda::device::color_detail::ColorChannel
worstDist	flann/result_set.h	/^    DistanceType worstDist() const$/;"	f	class:cvflann::KNNResultSet
worstDist	flann/result_set.h	/^    DistanceType worstDist() const$/;"	f	class:cvflann::KNNSimpleResultSet
worstDist	flann/result_set.h	/^    DistanceType worstDist() const$/;"	f	class:cvflann::RadiusResultSet
worstDist	flann/result_set.h	/^    inline DistanceType worstDist() const$/;"	f	class:cvflann::RadiusUniqueResultSet
worstDist	flann/result_set.h	/^    inline DistanceType worstDist() const$/;"	f	class:cvflann::UniqueResultSet
worst_distance_	flann/result_set.h	/^    DistanceType worst_distance_;$/;"	m	class:cvflann::KNNResultSet
worst_distance_	flann/result_set.h	/^    DistanceType worst_distance_;$/;"	m	class:cvflann::KNNSimpleResultSet
worst_distance_	flann/result_set.h	/^    DistanceType worst_distance_;$/;"	m	class:cvflann::UniqueResultSet
write	core.hpp	/^    virtual void write(FileStorage& fs) const { (void)fs; }$/;"	f	class:cv::Algorithm
write	core/persistence.hpp	/^void write( FileStorage& fs, const String& name, const std::vector<_Tp>& vec )$/;"	f	namespace:cv
write	core/persistence.hpp	/^void write( FileStorage& fs, const String& value )$/;"	f	namespace:cv
write	core/persistence.hpp	/^void write( FileStorage& fs, const double& value )$/;"	f	namespace:cv
write	core/persistence.hpp	/^void write( FileStorage& fs, const float& value )$/;"	f	namespace:cv
write	core/persistence.hpp	/^void write( FileStorage& fs, const int& value )$/;"	f	namespace:cv
write	core/persistence.hpp	/^void write( FileStorage& fs, const std::vector<_Tp>& vec )$/;"	f	namespace:cv
write	core/persistence.hpp	/^void write(FileStorage& fs, const Complex<_Tp>& c )$/;"	f	namespace:cv
write	core/persistence.hpp	/^void write(FileStorage& fs, const Point3_<_Tp>& pt )$/;"	f	namespace:cv
write	core/persistence.hpp	/^void write(FileStorage& fs, const Point_<_Tp>& pt )$/;"	f	namespace:cv
write	core/persistence.hpp	/^void write(FileStorage& fs, const Range& r )$/;"	f	namespace:cv
write	core/persistence.hpp	/^void write(FileStorage& fs, const Rect_<_Tp>& r )$/;"	f	namespace:cv
write	core/persistence.hpp	/^void write(FileStorage& fs, const Scalar_<_Tp>& s )$/;"	f	namespace:cv
write	core/persistence.hpp	/^void write(FileStorage& fs, const Size_<_Tp>& sz )$/;"	f	namespace:cv
write	core/persistence.hpp	/^void write(FileStorage& fs, const String& name, const Complex<_Tp>& c )$/;"	f	namespace:cv
write	core/persistence.hpp	/^void write(FileStorage& fs, const String& name, const Point3_<_Tp>& pt )$/;"	f	namespace:cv
write	core/persistence.hpp	/^void write(FileStorage& fs, const String& name, const Point_<_Tp>& pt )$/;"	f	namespace:cv
write	core/persistence.hpp	/^void write(FileStorage& fs, const String& name, const Range& r )$/;"	f	namespace:cv
write	core/persistence.hpp	/^void write(FileStorage& fs, const String& name, const Rect_<_Tp>& r )$/;"	f	namespace:cv
write	core/persistence.hpp	/^void write(FileStorage& fs, const String& name, const Scalar_<_Tp>& s )$/;"	f	namespace:cv
write	core/persistence.hpp	/^void write(FileStorage& fs, const String& name, const Size_<_Tp>& sz )$/;"	f	namespace:cv
write	core/persistence.hpp	/^void write(FileStorage& fs, const String& name, const Vec<_Tp, cn>& v )$/;"	f	namespace:cv
write	core/persistence.hpp	/^void write(FileStorage& fs, const Vec<_Tp, cn>& v )$/;"	f	namespace:cv
write	core/persistence.hpp	/^void write(FileStorage& fs, const _Tp& value)$/;"	f	namespace:cv
write	core/types_c.h	/^    CvWriteFunc write; \/**< writes object to file storage *\/$/;"	m	struct:CvTypeInfo
write_fd	ts/ts_gtest.h	/^  int write_fd() const { return write_fd_; }$/;"	f	class:testing::internal::InternalRunDeathTestFlag
write_fd_	ts/ts_gtest.h	/^  int write_fd_;$/;"	m	class:testing::internal::InternalRunDeathTestFlag
write_type	core/cuda/detail/transform_detail.hpp	/^            typedef typename TypeVec<D, shift>::vec_type write_type;$/;"	t	struct:cv::cuda::device::transform_detail::BinaryReadWriteTraits
write_type	core/cuda/detail/transform_detail.hpp	/^            typedef typename TypeVec<D, shift>::vec_type write_type;$/;"	t	struct:cv::cuda::device::transform_detail::UnaryReadWriteTraits
writer	core/core_c.h	/^CVAPI(CvSeq*)  cvEndWriteSeq( CvSeqWriter* writer );$/;"	v
writer	core/core_c.h	/^CVAPI(void)   cvFlushSeqWriter( CvSeqWriter* writer );$/;"	v
writer	core/core_c.h	/^CVAPI(void)  cvCreateSeqBlock( CvSeqWriter* writer );$/;"	v
writer	videoio.hpp	/^    Ptr<CvVideoWriter> writer;$/;"	m	class:cv::VideoWriter
writer	videoio/videoio_c.h	/^CVAPI(void) cvReleaseVideoWriter( CvVideoWriter** writer );$/;"	v
wscale	core/ocl.hpp	/^    int wscale, iwscale;$/;"	m	class:cv::ocl::KernelArg
x	core/types.hpp	/^    _Tp x, y, width, height; \/\/< the top-left corner, as well as width and height of the rectangle$/;"	m	class:cv::Rect_
x	core/types.hpp	/^    _Tp x, y, z; \/\/< the point coordinates$/;"	m	class:cv::Point3_
x	core/types.hpp	/^    _Tp x, y; \/\/< the point coordinates$/;"	m	class:cv::Point_
x	core/types_c.h	/^    double x;$/;"	m	struct:CvPoint2D64f
x	core/types_c.h	/^    double x;$/;"	m	struct:CvPoint3D64f
x	core/types_c.h	/^    float x;$/;"	m	struct:CvPoint2D32f
x	core/types_c.h	/^    float x;$/;"	m	struct:CvPoint3D32f
x	core/types_c.h	/^    int x;$/;"	m	struct:CvPoint
x	core/types_c.h	/^    int x;$/;"	m	struct:CvRect
x	cudalegacy/NCV.hpp	/^    Ncv32s x;          \/\/\/< x-coordinate of upper left corner.$/;"	m	struct:NcvRect32s
x	cudalegacy/NCV.hpp	/^    Ncv32s x; \/\/\/< Point X.$/;"	m	struct:NcvPoint2D32s
x	cudalegacy/NCV.hpp	/^    Ncv32u x;          \/\/\/< x-coordinate of upper left corner.$/;"	m	struct:NcvRect32u
x	cudalegacy/NCV.hpp	/^    Ncv32u x; \/\/\/< Point X.$/;"	m	struct:NcvPoint2D32u
x	cudalegacy/NCV.hpp	/^    Ncv8u x;$/;"	m	struct:NcvRect8u
x	videostab/fast_marching.hpp	/^        int x, y;$/;"	m	struct:cv::videostab::FastMarchingMethod::DXY
xOffset	core/types_c.h	/^    int  xOffset;$/;"	m	struct:_IplROI
xor_masks_	flann/lsh_index.h	/^    std::vector<lsh::BucketKey> xor_masks_;$/;"	m	class:cvflann::LshIndex
xyz_shift	core/cuda/detail/color_detail.hpp	/^            xyz_shift  = 12,$/;"	e	enum:cv::cuda::device::color_detail::__anon240
xyz_shift	cudev/functional/detail/color_cvt.hpp	/^        xyz_shift  = 12,$/;"	e	enum:cv::cudev::color_cvt_detail::__anon396
y	core/types.hpp	/^    _Tp x, y, width, height; \/\/< the top-left corner, as well as width and height of the rectangle$/;"	m	class:cv::Rect_
y	core/types.hpp	/^    _Tp x, y, z; \/\/< the point coordinates$/;"	m	class:cv::Point3_
y	core/types.hpp	/^    _Tp x, y; \/\/< the point coordinates$/;"	m	class:cv::Point_
y	core/types_c.h	/^    double y;$/;"	m	struct:CvPoint2D64f
y	core/types_c.h	/^    double y;$/;"	m	struct:CvPoint3D64f
y	core/types_c.h	/^    float y;$/;"	m	struct:CvPoint2D32f
y	core/types_c.h	/^    float y;$/;"	m	struct:CvPoint3D32f
y	core/types_c.h	/^    int y;$/;"	m	struct:CvPoint
y	core/types_c.h	/^    int y;$/;"	m	struct:CvRect
y	cudalegacy/NCV.hpp	/^    Ncv32s y;          \/\/\/< y-coordinate of upper left corner.$/;"	m	struct:NcvRect32s
y	cudalegacy/NCV.hpp	/^    Ncv32s y; \/\/\/< Point Y.$/;"	m	struct:NcvPoint2D32s
y	cudalegacy/NCV.hpp	/^    Ncv32u y;          \/\/\/< y-coordinate of upper left corner.$/;"	m	struct:NcvRect32u
y	cudalegacy/NCV.hpp	/^    Ncv32u y; \/\/\/< Point Y.$/;"	m	struct:NcvPoint2D32u
y	cudalegacy/NCV.hpp	/^    Ncv8u y;$/;"	m	struct:NcvRect8u
y	videostab/fast_marching.hpp	/^        int x, y;$/;"	m	struct:cv::videostab::FastMarchingMethod::DXY
yOffset	core/types_c.h	/^    int  yOffset;$/;"	m	struct:_IplROI
yellow	viz/types.hpp	/^inline cv::viz::Color cv::viz::Color::yellow()  { return Color(  0, 255, 255); }$/;"	f	class:cv::viz::Color
yota	core/cuda/block.hpp	/^        static __device__ __forceinline__ void yota(OutIt beg, OutIt end, T value)$/;"	f	struct:cv::cuda::device::Block
yota	core/cuda/warp.hpp	/^        static __device__ __forceinline__ void yota(OutIt beg, OutIt end, T value)$/;"	f	struct:cv::cuda::device::Warp
yuv_shift	core/cuda/detail/color_detail.hpp	/^            yuv_shift  = 14,$/;"	e	enum:cv::cuda::device::color_detail::__anon240
yuv_shift	cudev/functional/detail/color_cvt.hpp	/^        yuv_shift  = 14,$/;"	e	enum:cv::cudev::color_cvt_detail::__anon396
z	core/types.hpp	/^    _Tp x, y, z; \/\/< the point coordinates$/;"	m	class:cv::Point3_
z	core/types_c.h	/^    double z;$/;"	m	struct:CvPoint3D64f
z	core/types_c.h	/^    float z;$/;"	m	struct:CvPoint3D32f
zero	hal/intrin_cpp.hpp	/^    static v_reg<_Tp, n> zero()$/;"	f	struct:cv::v_reg
zeros	core/mat.inl.hpp	/^MatExpr Mat_<_Tp>::zeros(Size sz)$/;"	f	class:cv::Mat_
zeros	core/mat.inl.hpp	/^MatExpr Mat_<_Tp>::zeros(int rows, int cols)$/;"	f	class:cv::Mat_
zeros	core/matx.hpp	/^Matx<_Tp,m,n> Matx<_Tp,m,n>::zeros()$/;"	f	class:cv::Matx
zipPtr	cudev/ptr2d/zip.hpp	/^zipPtr(const Ptr0& ptr0, const Ptr1& ptr1)$/;"	f	namespace:cv::cudev
zipPtr	cudev/ptr2d/zip.hpp	/^zipPtr(const Ptr0& ptr0, const Ptr1& ptr1, const Ptr2& ptr2)$/;"	f	namespace:cv::cudev
zipPtr	cudev/ptr2d/zip.hpp	/^zipPtr(const Ptr0& ptr0, const Ptr1& ptr1, const Ptr2& ptr2, const Ptr3& ptr3)$/;"	f	namespace:cv::cudev
~Allocator	core/cuda.hpp	/^        virtual ~Allocator() {}$/;"	f	class:cv::cuda::GpuMat::Allocator
~Allocator	core/cvstd.hpp	/^    ~Allocator() {}$/;"	f	class:cv::Allocator
~AutoBuffer	core/utility.hpp	/^AutoBuffer<_Tp, fixed_size>::~AutoBuffer()$/;"	f	class:cv::AutoBuffer
~AutoLock	core/utility.hpp	/^    ~AutoLock() { mutex->unlock(); }$/;"	f	class:cv::AutoLock
~AutotunedIndex	flann/autotuned_index.h	/^    virtual ~AutotunedIndex()$/;"	f	class:cvflann::AutotunedIndex
~BFMatcher	features2d.hpp	/^    virtual ~BFMatcher() {}$/;"	f	class:cv::BFMatcher
~Blender	stitching/detail/blenders.hpp	/^    virtual ~Blender() {}$/;"	f	class:cv::detail::Blender
~BufferPoolController	core/bufferpool.hpp	/^    ~BufferPoolController() { }$/;"	f	class:cv::BufferPoolController
~CartesianProductGenerator10	ts/ts_gtest.h	/^  virtual ~CartesianProductGenerator10() {}$/;"	f	class:testing::internal::CartesianProductGenerator10
~CartesianProductGenerator2	ts/ts_gtest.h	/^  virtual ~CartesianProductGenerator2() {}$/;"	f	class:testing::internal::CartesianProductGenerator2
~CartesianProductGenerator3	ts/ts_gtest.h	/^  virtual ~CartesianProductGenerator3() {}$/;"	f	class:testing::internal::CartesianProductGenerator3
~CartesianProductGenerator4	ts/ts_gtest.h	/^  virtual ~CartesianProductGenerator4() {}$/;"	f	class:testing::internal::CartesianProductGenerator4
~CartesianProductGenerator5	ts/ts_gtest.h	/^  virtual ~CartesianProductGenerator5() {}$/;"	f	class:testing::internal::CartesianProductGenerator5
~CartesianProductGenerator6	ts/ts_gtest.h	/^  virtual ~CartesianProductGenerator6() {}$/;"	f	class:testing::internal::CartesianProductGenerator6
~CartesianProductGenerator7	ts/ts_gtest.h	/^  virtual ~CartesianProductGenerator7() {}$/;"	f	class:testing::internal::CartesianProductGenerator7
~CartesianProductGenerator8	ts/ts_gtest.h	/^  virtual ~CartesianProductGenerator8() {}$/;"	f	class:testing::internal::CartesianProductGenerator8
~CartesianProductGenerator9	ts/ts_gtest.h	/^  virtual ~CartesianProductGenerator9() {}$/;"	f	class:testing::internal::CartesianProductGenerator9
~CompositeIndex	flann/composite_index.h	/^    virtual ~CompositeIndex()$/;"	f	class:cvflann::CompositeIndex
~DeathTest	ts/ts_gtest.h	/^  virtual ~DeathTest() { }$/;"	f	class:testing::internal::DeathTest
~DeathTestFactory	ts/ts_gtest.h	/^  virtual ~DeathTestFactory() { }$/;"	f	class:testing::internal::DeathTestFactory
~DeblurerBase	videostab/deblurring.hpp	/^    virtual ~DeblurerBase() {}$/;"	f	class:cv::videostab::DeblurerBase
~DefaultRngAuto	ts.hpp	/^    ~DefaultRngAuto() { cv::theRNG().state = old_state; }$/;"	f	struct:cvtest::DefaultRngAuto
~EncoderCallBack	cudacodec.hpp	/^    virtual ~EncoderCallBack() {}$/;"	f	class:cv::cudacodec::EncoderCallBack
~Environment	ts/ts_gtest.h	/^  virtual ~Environment() {}$/;"	f	class:testing::Environment
~Estimator	stitching/detail/motion_estimators.hpp	/^    virtual ~Estimator() {}$/;"	f	class:cv::detail::Estimator
~ExposureCompensator	stitching/detail/exposure_compensate.hpp	/^    virtual ~ExposureCompensator() {}$/;"	f	class:cv::detail::ExposureCompensator
~FeaturesFinder	stitching/detail/matchers.hpp	/^    virtual ~FeaturesFinder() {}$/;"	f	class:cv::detail::FeaturesFinder
~FeaturesMatcher	stitching/detail/matchers.hpp	/^    virtual ~FeaturesMatcher() {}$/;"	f	class:cv::detail::FeaturesMatcher
~Function	core/optim.hpp	/^        virtual ~Function() {}$/;"	f	class:cv::MinProblemSolver::Function
~GTestMutexLock	ts/ts_gtest.h	/^  ~GTestMutexLock() { mutex_->Unlock(); }$/;"	f	class:std::tr1::GTestMutexLock
~GenericIndex	flann.hpp	/^GenericIndex<Distance>::~GenericIndex()$/;"	f	class:cv::flann::GenericIndex
~GpuMat	core/cuda.inl.hpp	/^GpuMat::~GpuMat()$/;"	f	class:cv::cuda::GpuMat
~HOGDescriptor	objdetect.hpp	/^    virtual ~HOGDescriptor() {}$/;"	f	struct:cv::HOGDescriptor
~HierarchicalClusteringIndex	flann/hierarchical_clustering_index.h	/^    virtual ~HierarchicalClusteringIndex()$/;"	f	class:cvflann::HierarchicalClusteringIndex
~HostMem	core/cuda.inl.hpp	/^HostMem::~HostMem()$/;"	f	class:cv::cuda::HostMem
~IDenseOptFlowEstimator	videostab/optical_flow.hpp	/^    virtual ~IDenseOptFlowEstimator() {}$/;"	f	class:cv::videostab::IDenseOptFlowEstimator
~IDetector	objdetect/detection_based_tracker.hpp	/^                virtual ~IDetector() {}$/;"	f	class:cv::DetectionBasedTracker::IDetector
~IFrameSource	videostab/frame_source.hpp	/^    virtual ~IFrameSource() {}$/;"	f	class:cv::videostab::IFrameSource
~ILog	videostab/log.hpp	/^    virtual ~ILog() {}$/;"	f	class:cv::videostab::ILog
~IMotionStabilizer	videostab/motion_stabilizing.hpp	/^    virtual ~IMotionStabilizer() {}$/;"	f	class:cv::videostab::IMotionStabilizer
~INCVMemAllocator	cudalegacy/NCV.hpp	/^inline INCVMemAllocator::~INCVMemAllocator() {}$/;"	f	class:INCVMemAllocator
~IOutlierRejector	videostab/outlier_rejection.hpp	/^    virtual ~IOutlierRejector() {}$/;"	f	class:cv::videostab::IOutlierRejector
~ISparseOptFlowEstimator	videostab/optical_flow.hpp	/^    virtual ~ISparseOptFlowEstimator() {}$/;"	f	class:cv::videostab::ISparseOptFlowEstimator
~ImageMotionEstimatorBase	videostab/global_motion.hpp	/^    virtual ~ImageMotionEstimatorBase() {}$/;"	f	class:cv::videostab::ImageMotionEstimatorBase
~Index	flann/flann_base.hpp	/^    ~Index()$/;"	f	class:cvflann::Index
~Index_	flann.hpp	/^Index_<T>::~Index_()$/;"	f	class:cv::flann::Index_
~InpainterBase	videostab/inpainting.hpp	/^    virtual ~InpainterBase() {}$/;"	f	class:cv::videostab::InpainterBase
~InternalRunDeathTestFlag	ts/ts_gtest.h	/^  ~InternalRunDeathTestFlag() {$/;"	f	class:testing::internal::InternalRunDeathTestFlag
~Iterator	ts/ts_gtest.h	/^    virtual ~Iterator() {}$/;"	f	class:testing::internal::CartesianProductGenerator10::Iterator
~Iterator	ts/ts_gtest.h	/^    virtual ~Iterator() {}$/;"	f	class:testing::internal::CartesianProductGenerator2::Iterator
~Iterator	ts/ts_gtest.h	/^    virtual ~Iterator() {}$/;"	f	class:testing::internal::CartesianProductGenerator3::Iterator
~Iterator	ts/ts_gtest.h	/^    virtual ~Iterator() {}$/;"	f	class:testing::internal::CartesianProductGenerator4::Iterator
~Iterator	ts/ts_gtest.h	/^    virtual ~Iterator() {}$/;"	f	class:testing::internal::CartesianProductGenerator5::Iterator
~Iterator	ts/ts_gtest.h	/^    virtual ~Iterator() {}$/;"	f	class:testing::internal::CartesianProductGenerator6::Iterator
~Iterator	ts/ts_gtest.h	/^    virtual ~Iterator() {}$/;"	f	class:testing::internal::CartesianProductGenerator7::Iterator
~Iterator	ts/ts_gtest.h	/^    virtual ~Iterator() {}$/;"	f	class:testing::internal::CartesianProductGenerator8::Iterator
~Iterator	ts/ts_gtest.h	/^    virtual ~Iterator() {}$/;"	f	class:testing::internal::CartesianProductGenerator9::Iterator
~Iterator	ts/ts_gtest.h	/^    virtual ~Iterator() {}$/;"	f	class:testing::internal::RangeGenerator::Iterator
~Iterator	ts/ts_gtest.h	/^    virtual ~Iterator() {}$/;"	f	class:testing::internal::ValuesInIteratorRangeGenerator::Iterator
~KDTreeIndex	flann/kdtree_index.h	/^    ~KDTreeIndex()$/;"	f	class:cvflann::KDTreeIndex
~KDTreeSingleIndex	flann/kdtree_single_index.h	/^    ~KDTreeSingleIndex()$/;"	f	class:cvflann::KDTreeSingleIndex
~KMeansIndex	flann/kmeans_index.h	/^    virtual ~KMeansIndex()$/;"	f	class:cvflann::KMeansIndex
~LineSegmentDetector	imgproc.hpp	/^    virtual ~LineSegmentDetector() { }$/;"	f	class:cv::LineSegmentDetector
~Logger	flann/logger.h	/^    ~Logger()$/;"	f	class:cvflann::Logger
~MaskGenerator	objdetect.hpp	/^        virtual ~MaskGenerator() {}$/;"	f	class:cv::BaseCascadeClassifier::MaskGenerator
~Mat	core/mat.inl.hpp	/^Mat::~Mat()$/;"	f	class:cv::Mat
~MatAllocator	core/mat.hpp	/^    virtual ~MatAllocator() {}$/;"	f	class:cv::MatAllocator
~MotionEstimatorBase	videostab/global_motion.hpp	/^    virtual ~MotionEstimatorBase() {}$/;"	f	class:cv::videostab::MotionEstimatorBase
~MotionFilterBase	videostab/motion_stabilizing.hpp	/^    virtual ~MotionFilterBase() {}$/;"	f	class:cv::videostab::MotionFilterBase
~Mutex	ts/ts_gtest.h	/^  ~Mutex() {$/;"	f	class:std::tr1::Mutex
~NCVMatrix	cudalegacy/NCV.hpp	/^    virtual ~NCVMatrix() {}$/;"	f	class:NCVMatrix
~NCVMatrixAlloc	cudalegacy/NCV.hpp	/^    ~NCVMatrixAlloc()$/;"	f	class:NCVMatrixAlloc
~NCVVector	cudalegacy/NCV.hpp	/^    virtual ~NCVVector() {}$/;"	f	class:NCVVector
~NCVVectorAlloc	cudalegacy/NCV.hpp	/^    ~NCVVectorAlloc()$/;"	f	class:NCVVectorAlloc
~NNIndex	flann/nn_index.h	/^    virtual ~NNIndex() {}$/;"	f	class:cvflann::NNIndex
~NativeArray	ts/ts_gtest.h	/^  ~NativeArray() {$/;"	f	class:testing::internal::NativeArray
~Notification	ts/ts_gtest.h	/^  ~Notification() {$/;"	f	class:std::tr1::Notification
~NppStStreamHandler	cudalegacy/private.hpp	/^        inline ~NppStStreamHandler()$/;"	f	class:cv::cuda::NppStStreamHandler
~ParamGeneratorInterface	ts/ts_gtest.h	/^  virtual ~ParamGeneratorInterface() {}$/;"	f	class:testing::internal::ParamGeneratorInterface
~ParamIteratorInterface	ts/ts_gtest.h	/^  virtual ~ParamIteratorInterface() {}$/;"	f	class:testing::internal::ParamIteratorInterface
~ParameterizedTestCaseInfoBase	ts/ts_gtest.h	/^  virtual ~ParameterizedTestCaseInfoBase() {}$/;"	f	class:testing::internal::ParameterizedTestCaseInfoBase
~ParameterizedTestCaseRegistry	ts/ts_gtest.h	/^  ~ParameterizedTestCaseRegistry() {$/;"	f	class:testing::internal::ParameterizedTestCaseRegistry
~PooledAllocator	flann/allocator.h	/^    ~PooledAllocator()$/;"	f	class:cvflann::PooledAllocator
~Ptr	core/ptr.inl.hpp	/^Ptr<T>::~Ptr()$/;"	f	class:cv::Ptr
~PtrOwner	core/ptr.inl.hpp	/^    virtual ~PtrOwner()$/;"	f	struct:cv::detail::PtrOwner
~PyrLkOptFlowEstimatorBase	videostab/optical_flow.hpp	/^    virtual ~PyrLkOptFlowEstimatorBase() {}$/;"	f	class:cv::videostab::PyrLkOptFlowEstimatorBase
~RadiusResultSet	flann/result_set.h	/^    ~RadiusResultSet()$/;"	f	class:cvflann::RadiusResultSet
~RangeGenerator	ts/ts_gtest.h	/^  virtual ~RangeGenerator() {}$/;"	f	class:testing::internal::RangeGenerator
~RawVideoSource	cudacodec.hpp	/^    virtual ~RawVideoSource() {}$/;"	f	class:cv::cudacodec::RawVideoSource
~ResultSet	flann/result_set.h	/^    virtual ~ResultSet() {}$/;"	f	class:cvflann::ResultSet
~ReturnSentinel	ts/ts_gtest.h	/^    ~ReturnSentinel() { test_->Abort(TEST_ENCOUNTERED_RETURN_STATEMENT); }$/;"	f	class:testing::internal::DeathTest::ReturnSentinel
~RotationWarper	stitching/detail/warpers.hpp	/^    virtual ~RotationWarper() {}$/;"	f	class:cv::detail::RotationWarper
~SeamFinder	stitching/detail/seam_finders.hpp	/^    virtual ~SeamFinder() {}$/;"	f	class:cv::detail::SeamFinder
~SparseMat	core/mat.inl.hpp	/^SparseMat::~SparseMat()$/;"	f	class:cv::SparseMat
~StabilizerBase	videostab/stabilizer.hpp	/^    virtual ~StabilizerBase() {}$/;"	f	class:cv::videostab::StabilizerBase
~String	core/cvstd.hpp	/^String::~String()$/;"	f	class:cv::String
~TLSData	core/utility.hpp	/^    inline ~TLSData() {}$/;"	f	class:cv::TLSData
~TestEventListener	ts/ts_gtest.h	/^  virtual ~TestEventListener() {}$/;"	f	class:testing::TestEventListener
~TestFactoryBase	ts/ts_gtest.h	/^  virtual ~TestFactoryBase() {}$/;"	f	class:testing::internal::TestFactoryBase
~TestMetaFactoryBase	ts/ts_gtest.h	/^  virtual ~TestMetaFactoryBase() {}$/;"	f	class:testing::internal::TestMetaFactoryBase
~TestPartResultReporterInterface	ts/ts_gtest.h	/^  virtual ~TestPartResultReporterInterface() {}$/;"	f	class:testing::TestPartResultReporterInterface
~Texture	cudev/ptr2d/texture.hpp	/^    __host__ ~Texture()$/;"	f	struct:cv::cudev::Texture
~ThreadLocal	ts/ts_gtest.h	/^  ~ThreadLocal() {$/;"	f	class:std::tr1::ThreadLocal
~ThreadLocalValueHolderBase	ts/ts_gtest.h	/^  virtual ~ThreadLocalValueHolderBase() {}$/;"	f	class:std::tr1::ThreadLocalValueHolderBase
~ThreadWithParam	ts/ts_gtest.h	/^  ~ThreadWithParam() { Join(); }$/;"	f	class:std::tr1::ThreadWithParam
~ThreadWithParamBase	ts/ts_gtest.h	/^  virtual ~ThreadWithParamBase() {}$/;"	f	class:std::tr1::ThreadWithParamBase
~Timelapser	stitching/detail/timelapsers.hpp	/^    virtual ~Timelapser() {}$/;"	f	class:cv::detail::Timelapser
~UMatDataAutoLock	core/mat.inl.hpp	/^inline UMatDataAutoLock::~UMatDataAutoLock() { u->unlock(); }$/;"	f	class:cv::UMatDataAutoLock
~UntypedMatrix	flann/matrix.h	/^    ~UntypedMatrix()$/;"	f	class:cvflann::UntypedMatrix
~ValuesInIteratorRangeGenerator	ts/ts_gtest.h	/^  virtual ~ValuesInIteratorRangeGenerator() {}$/;"	f	class:testing::internal::ValuesInIteratorRangeGenerator
~VideoReader	cudacodec.hpp	/^    virtual ~VideoReader() {}$/;"	f	class:cv::cudacodec::VideoReader
~VideoWriter	cudacodec.hpp	/^    virtual ~VideoWriter() {}$/;"	f	class:cv::cudacodec::VideoWriter
~WImage	core/wimage.hpp	/^template<typename T> inline WImage<T>::~WImage() {}$/;"	f	class:cv::WImage
~WImageBuffer	core/wimage.hpp	/^    ~WImageBuffer() {$/;"	f	class:cv::WImageBuffer
~WImageBufferC	core/wimage.hpp	/^    ~WImageBufferC() {$/;"	f	class:cv::WImageBufferC
~WImageC	core/wimage.hpp	/^template<typename T, int C> inline WImageC<T, C>::~WImageC() {}$/;"	f	class:cv::WImageC
~WImageViewC	core/wimage.hpp	/^    virtual ~WImageViewC() {}$/;"	f	class:cv::WImageViewC
~WarperCreator	stitching/warpers.hpp	/^    virtual ~WarperCreator() {}$/;"	f	class:cv::WarperCreator
~WithParamInterface	ts/ts_gtest.h	/^  virtual ~WithParamInterface() {}$/;"	f	class:testing::WithParamInterface
~WobbleSuppressorBase	videostab/wobble_suppression.hpp	/^    virtual ~WobbleSuppressorBase() {}$/;"	f	class:cv::videostab::WobbleSuppressorBase
~_InputArray	core/mat.inl.hpp	/^inline _InputArray::~_InputArray() {}$/;"	f	class:cv::_InputArray
~any	flann/any.h	/^    ~any()$/;"	f	struct:cvflann::any
~base_any_policy	flann/any.h	/^    virtual ~base_any_policy() {}$/;"	f	struct:cvflann::anyimpl::base_any_policy
~linked_ptr	ts/ts_gtest.h	/^  ~linked_ptr() { depart(); }$/;"	f	class:testing::internal::linked_ptr
